var Eval =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./build/tiny/js/src/cmd/Eval.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./build/tiny/js/msg/names.json":
/*!**************************************!*\
  !*** ./build/tiny/js/msg/names.json ***!
  \**************************************/
/*! exports provided: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"[[\\\"define\\\",\\\"@\\\"],[\\\"make-cell\\\",\\\"cell:make\\\"],[\\\"max\\\",\\\">:>\\\"],[\\\"min\\\",\\\"<:<\\\"],[\\\"factorial\\\",\\\"*:<\\\"],[\\\"and\\\",\\\"true:*\\\"],[\\\"or\\\",\\\"true:+\\\"],[\\\">=\\\",\\\">:=\\\"],[\\\"<=\\\",\\\"<:=\\\"],[\\\"car\\\",\\\"cons:0\\\"],[\\\"cdr\\\",\\\"cons:1\\\"],[\\\"set!\\\",\\\"cell:assign\\\"],[\\\"get!\\\",\\\"cell:get\\\"],[\\\"pair\\\",\\\"list:2\\\"],[\\\"head\\\",\\\"list:0\\\"],[\\\"tail\\\",\\\"list:remainder\\\"]]\");\n\n//# sourceURL=webpack://Eval/./build/tiny/js/msg/names.json?");

/***/ }),

/***/ "./build/tiny/js/src/cmd/Eval.js":
/*!***************************************!*\
  !*** ./build/tiny/js/src/cmd/Eval.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Rename_1 = __webpack_require__(/*! ../cosmicos/Rename */ \"./build/tiny/js/src/cosmicos/Rename.js\");\nconst cosmicos = __webpack_require__(/*! lib/cosmicos */ \"./build/tiny/lib/cosmicos.js\").cosmicos;\nclass Eval {\n    constructor() {\n        this.cache = '';\n        this.rename = new Rename_1.Rename();\n        this.cc = new cosmicos.Evaluate(null, true);\n        this.cc.applyOldOrder();\n        this.cc.addStd();\n    }\n    clean(input) {\n        input = this.rename.renameWithinString(input);\n        input = \"\" + input; // make sure this really is a string :-/\n        let len = input.length;\n        if (len >= 3) {\n            if (input[0] == '(' && input[len - 1] == ')' && input[len - 2] == '\\n') {\n                // old-style node repl - strip extra parens\n                input = input.substr(1, len - 2);\n            }\n        }\n        len = input.length;\n        if (len > 0) {\n            if (input[len - 1] == '\\n') {\n                // strip newline\n                input = input.substr(0, len - 1);\n            }\n        }\n        len = input.length;\n        if (len >= 2) {\n            if (input[0] == '(' && input[len - 1] == ')') {\n                // we don't wrap top level statements any more\n                input = input.substr(1, len - 2);\n            }\n        }\n        return input;\n    }\n    apply(input, print) {\n        input = this.clean(input);\n        var input0 = input;\n        if (this.cache != \"\") {\n            input = this.cache + input;\n        }\n        let out = \"\";\n        try {\n            if (input === \"help\") {\n                out += \"Syntax:\\n\";\n                out += \"  Space-separated lists of names and numbers with nesting e.g.: * 3 (+ 1 (+ 2 3))\\n\";\n                out += \"  Shorthand: \\\"|\\\" nests to end of expression: (+ 1 | + 2 3) is equiv. to (+ 1 (+ 2 3))\\n\";\n                out += \"             \\\"$x\\\" is equivalent to \\\"(x)\\\"\\n\";\n                out += \"  Lists are evaluated by calling the first element with each of the others in turn.\\n\";\n                out += \"  If the first element of the list is a name or number, it is treated as a lookup.\\n\";\n                out += \"  Exception: \\\"? x body\\\" makes a function\\n\";\n                out += \"             \\\"if cond A B\\\" evaluates to A if cond is true, otherwise B\\n\";\n                out += \"             \\\"define x v\\\" means that looking up $x will return v\\n\\n\";\n                out += \"      Symbol  Meaning when called               Example\\n\";\n                var vocab = this.cc.getVocab();\n                var names = vocab.getNames();\n                for (var i = 0; i < names.length; i++) {\n                    var lout = \"\";\n                    var name = names[i];\n                    var origName = this.rename.unget(name);\n                    var idx = \"\";\n                    for (let j = idx.length; j < 5; j++) {\n                        lout += \" \";\n                    }\n                    lout += idx;\n                    lout += \" \";\n                    lout += origName;\n                    for (let j = origName.length; j < 7; j++) {\n                        lout += \" \";\n                    }\n                    var meta = vocab.getMeta(name);\n                    var e = meta ? meta.description : null;\n                    if (e) {\n                        lout += \" \" + e;\n                        for (let j = e.length; j < 33; j++) {\n                            lout += \" \";\n                        }\n                        var ex = meta ? meta.example : null;\n                        if (ex) {\n                            lout += \" \" + ex;\n                        }\n                    }\n                    lout += \"\\n\";\n                    if (e) {\n                        out += lout;\n                    }\n                }\n                print(out);\n                out = null;\n            }\n            else if (input === \"examples\") {\n                print(this.cc.examples().join(\"\\n\") + \"\\n\");\n                out = null;\n            }\n            else {\n                out = this.cc.evaluateLine(input);\n                if (out == null) {\n                    this.cache += input0 + \"\\n\";\n                }\n                else {\n                    var v = parseInt(out);\n                    if (\"\" + v === out) {\n                        out = v;\n                    }\n                    this.cache = \"\";\n                }\n            }\n        }\n        catch (e) {\n            this.cache = \"\";\n            out = \"\" + e;\n        }\n        if (this.cache == \"\") {\n            return out;\n        }\n        return undefined;\n    }\n}\nexports.default = Eval;\n\n\n//# sourceURL=webpack://Eval/./build/tiny/js/src/cmd/Eval.js?");

/***/ }),

/***/ "./build/tiny/js/src/cosmicos/Rename.js":
/*!**********************************************!*\
  !*** ./build/tiny/js/src/cosmicos/Rename.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst standardNames = __webpack_require__(/*! ../../msg/names.json */ \"./build/tiny/js/msg/names.json\");\nclass Rename {\n    constructor(pairs = []) {\n        this.names = new Map();\n        this.unnames = new Map();\n        if (pairs.length === 0) {\n            pairs = standardNames;\n        }\n        for (const pair of pairs) {\n            if (pair[0]) {\n                this.add(pair[0], pair[1]);\n            }\n        }\n    }\n    add(src, dest) {\n        this.names.set(src, dest);\n        this.unnames.set(dest, src);\n    }\n    get(src) {\n        if (src.charAt(0) === ':') {\n            return src;\n        }\n        if (this.names.has(src)) {\n            return this.names.get(src);\n        }\n        const parts = src.split(':');\n        const next = parts.length > 1 ? parts.map(part => this.get(part)).join(':') : src;\n        if (next === src) {\n            return next;\n        }\n        return this.get(next);\n    }\n    // this is weak, doesn't deal with parts.\n    unget(src) {\n        while (this.unnames.has(src)) {\n            src = this.unnames.get(src);\n        }\n        return src;\n    }\n    rename(e) {\n        for (let i = 0; i < e.length; i++) {\n            const v = e[i];\n            if (Array.isArray(v)) {\n                this.rename(v);\n                continue;\n            }\n            if (!(typeof v === 'string')) {\n                continue;\n            }\n            e[i] = this.get(e[i]);\n        }\n        return e;\n    }\n    renameWithinString(src) {\n        const parts = [];\n        let base = 0;\n        let prevActive = false;\n        const letter = new RegExp(/[-a-zA-Z0-9.:!]/);\n        for (let i = 0; i <= src.length; i++) {\n            const active = (i < src.length) ? letter.test(src.charAt(i)) : !prevActive;\n            if (active !== prevActive) {\n                if (i !== base) {\n                    const part = src.substr(base, i - base);\n                    base = i;\n                    parts.push(prevActive ? this.get(part) : part);\n                }\n            }\n            prevActive = active;\n        }\n        return parts.join('');\n    }\n    unrenameWithinString(src) {\n        const parts = [];\n        let base = 0;\n        let prevActive = false;\n        const letter = new RegExp(/[-a-zA-Z0-9.:!]/);\n        for (let i = 0; i <= src.length; i++) {\n            const active = (i < src.length) ? letter.test(src.charAt(i)) : !prevActive;\n            if (active !== prevActive) {\n                if (i !== base) {\n                    const part = src.substr(base, i - base);\n                    base = i;\n                    parts.push(prevActive ? this.unget(part) : part);\n                }\n            }\n            prevActive = active;\n        }\n        return parts.join('');\n    }\n}\nexports.Rename = Rename;\n\n\n//# sourceURL=webpack://Eval/./build/tiny/js/src/cosmicos/Rename.js?");

/***/ }),

/***/ "./build/tiny/lib/cosmicos.js":
/*!************************************!*\
  !*** ./build/tiny/lib/cosmicos.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {// Generated by Haxe 3.4.4\n(function ($hx_exports, $global) { \"use strict\";\n$hx_exports[\"cosmicos\"] = $hx_exports[\"cosmicos\"] || {};\nvar $estr = function() { return js_Boot.__string_rec(this,''); };\nfunction $extend(from, fields) {\n\tfunction Inherit() {} Inherit.prototype = from; var proto = new Inherit();\n\tfor (var name in fields) proto[name] = fields[name];\n\tif( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;\n\treturn proto;\n}\nvar EReg = function(r,opt) {\n\tthis.r = new RegExp(r,opt.split(\"u\").join(\"\"));\n};\nEReg.__name__ = [\"EReg\"];\nEReg.prototype = {\n\tmatch: function(s) {\n\t\tif(this.r.global) {\n\t\t\tthis.r.lastIndex = 0;\n\t\t}\n\t\tthis.r.m = this.r.exec(s);\n\t\tthis.r.s = s;\n\t\treturn this.r.m != null;\n\t}\n\t,__class__: EReg\n};\nvar HxOverrides = function() { };\nHxOverrides.__name__ = [\"HxOverrides\"];\nHxOverrides.cca = function(s,index) {\n\tvar x = s.charCodeAt(index);\n\tif(x != x) {\n\t\treturn undefined;\n\t}\n\treturn x;\n};\nHxOverrides.substr = function(s,pos,len) {\n\tif(len == null) {\n\t\tlen = s.length;\n\t} else if(len < 0) {\n\t\tif(pos == 0) {\n\t\t\tlen = s.length + len;\n\t\t} else {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\treturn s.substr(pos,len);\n};\nHxOverrides.iter = function(a) {\n\treturn { cur : 0, arr : a, hasNext : function() {\n\t\treturn this.cur < this.arr.length;\n\t}, next : function() {\n\t\treturn this.arr[this.cur++];\n\t}};\n};\nMath.__name__ = [\"Math\"];\nvar Reflect = function() { };\nReflect.__name__ = [\"Reflect\"];\nReflect.field = function(o,field) {\n\ttry {\n\t\treturn o[field];\n\t} catch( e ) {\n\t\treturn null;\n\t}\n};\nvar Std = function() { };\nStd.__name__ = [\"Std\"];\nStd.string = function(s) {\n\treturn js_Boot.__string_rec(s,\"\");\n};\nStd.parseInt = function(x) {\n\tvar v = parseInt(x,10);\n\tif(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {\n\t\tv = parseInt(x);\n\t}\n\tif(isNaN(v)) {\n\t\treturn null;\n\t}\n\treturn v;\n};\nvar StringBuf = function() {\n\tthis.b = \"\";\n};\nStringBuf.__name__ = [\"StringBuf\"];\nStringBuf.prototype = {\n\t__class__: StringBuf\n};\nvar StringTools = function() { };\nStringTools.__name__ = [\"StringTools\"];\nStringTools.hex = function(n,digits) {\n\tvar s = \"\";\n\tvar hexChars = \"0123456789ABCDEF\";\n\twhile(true) {\n\t\ts = hexChars.charAt(n & 15) + s;\n\t\tn >>>= 4;\n\t\tif(!(n > 0)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(digits != null) {\n\t\twhile(s.length < digits) s = \"0\" + s;\n\t}\n\treturn s;\n};\nvar Type = function() { };\nType.__name__ = [\"Type\"];\nType.getClassName = function(c) {\n\tvar a = c.__name__;\n\tif(a == null) {\n\t\treturn null;\n\t}\n\treturn a.join(\".\");\n};\nvar cosmicos_BigInteger = function() {\n\tif(cosmicos_BigInteger.BI_RC == null || cosmicos_BigInteger.BI_RC.length == 0) {\n\t\tcosmicos_BigInteger.initBiRc();\n\t}\n\tif(cosmicos_BigInteger.BI_RM.length == 0) {\n\t\tthrow new js__$Boot_HaxeError(\"BI_RM not initialized\");\n\t}\n\tthis.chunks = [];\n\tvar _g = cosmicos_BigInteger.defaultAm;\n\tswitch(_g) {\n\tcase 1:\n\t\tthis.am = $bind(this,this.am1);\n\t\tbreak;\n\tcase 2:\n\t\tthis.am = $bind(this,this.am2);\n\t\tbreak;\n\tcase 3:\n\t\tthis.am = $bind(this,this.am3);\n\t\tbreak;\n\tdefault:\n\t\tthrow new js__$Boot_HaxeError(\"am error\");\n\t}\n};\ncosmicos_BigInteger.__name__ = [\"cosmicos\",\"BigInteger\"];\ncosmicos_BigInteger.initBiRc = function() {\n\tcosmicos_BigInteger.BI_RC = [];\n\tvar rr = HxOverrides.cca(\"0\",0);\n\tvar _g = 0;\n\twhile(_g < 10) {\n\t\tvar vv = _g++;\n\t\tcosmicos_BigInteger.BI_RC[rr] = vv;\n\t\t++rr;\n\t}\n\trr = HxOverrides.cca(\"a\",0);\n\tvar _g1 = 10;\n\twhile(_g1 < 37) {\n\t\tvar vv1 = _g1++;\n\t\tcosmicos_BigInteger.BI_RC[rr] = vv1;\n\t\t++rr;\n\t}\n\trr = HxOverrides.cca(\"A\",0);\n\tvar _g2 = 10;\n\twhile(_g2 < 37) {\n\t\tvar vv2 = _g2++;\n\t\tcosmicos_BigInteger.BI_RC[rr] = vv2;\n\t\t++rr;\n\t}\n};\ncosmicos_BigInteger.get_ZERO = function() {\n\treturn cosmicos_BigInteger.nbv(0);\n};\ncosmicos_BigInteger.get_ONE = function() {\n\treturn cosmicos_BigInteger.nbv(1);\n};\ncosmicos_BigInteger.nbv = function(i) {\n\tvar r = cosmicos_BigInteger.nbi();\n\tr.fromInt(i);\n\treturn r;\n};\ncosmicos_BigInteger.nbi = function() {\n\treturn new cosmicos_BigInteger();\n};\ncosmicos_BigInteger.ofString = function(s,base) {\n\tvar me = cosmicos_BigInteger.nbi();\n\tvar fromStringExt = function(s1,b) {\n\t\tme.fromInt(0);\n\t\tvar cs = Math.floor(0.6931471805599453 * cosmicos_BigInteger.DB / Math.log(b));\n\t\tvar d = Math.pow(b,cs) | 0;\n\t\tvar mi = false;\n\t\tvar j = 0;\n\t\tvar w = 0;\n\t\tvar _g1 = 0;\n\t\tvar _g = s1.length;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tvar x = cosmicos_BigInteger.intAt(s1,i);\n\t\t\tif(x < 0) {\n\t\t\t\tif(s1.charAt(i) == \"-\" && me.sign == 0) {\n\t\t\t\t\tmi = true;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tw = b * w + x;\n\t\t\tif(++j >= cs) {\n\t\t\t\tme.dMultiply(d);\n\t\t\t\tme.dAddOffset(w,0);\n\t\t\t\tj = 0;\n\t\t\t\tw = 0;\n\t\t\t}\n\t\t}\n\t\tif(j > 0) {\n\t\t\tme.dMultiply(Math.pow(b,j) | 0);\n\t\t\tme.dAddOffset(w,0);\n\t\t}\n\t\tif(mi) {\n\t\t\tcosmicos_BigInteger.get_ZERO().subTo(me,me);\n\t\t}\n\t\treturn me;\n\t};\n\tvar k;\n\tif(base == 16) {\n\t\tk = 4;\n\t} else if(base == 10) {\n\t\treturn fromStringExt(s,base);\n\t} else if(base == 256) {\n\t\tk = 8;\n\t} else if(base == 8) {\n\t\tk = 3;\n\t} else if(base == 2) {\n\t\tk = 1;\n\t} else if(base == 32) {\n\t\tk = 5;\n\t} else if(base == 4) {\n\t\tk = 2;\n\t} else {\n\t\treturn fromStringExt(s,base);\n\t}\n\tme.t = 0;\n\tme.sign = 0;\n\tvar i1 = s.length;\n\tvar mi1 = false;\n\tvar sh = 0;\n\twhile(--i1 >= 0) {\n\t\tvar x1 = k == 8 ? HxOverrides.cca(s,i1) & 255 : cosmicos_BigInteger.intAt(s,i1);\n\t\tif(x1 < 0) {\n\t\t\tif(s.charAt(i1) == \"-\") {\n\t\t\t\tmi1 = true;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tmi1 = false;\n\t\tif(sh == 0) {\n\t\t\tme.chunks[me.t] = x1;\n\t\t\tme.t++;\n\t\t} else if(sh + k > cosmicos_BigInteger.DB) {\n\t\t\tme.chunks[me.t - 1] |= (x1 & (1 << cosmicos_BigInteger.DB - sh) - 1) << sh;\n\t\t\tme.chunks[me.t] = x1 >> cosmicos_BigInteger.DB - sh;\n\t\t\tme.t++;\n\t\t} else {\n\t\t\tme.chunks[me.t - 1] |= x1 << sh;\n\t\t}\n\t\tsh += k;\n\t\tif(sh >= cosmicos_BigInteger.DB) {\n\t\t\tsh -= cosmicos_BigInteger.DB;\n\t\t}\n\t}\n\tif(k == 8 && (HxOverrides.cca(s,0) & 128) != 0) {\n\t\tme.sign = -1;\n\t\tif(sh > 0) {\n\t\t\tme.chunks[me.t - 1] |= (1 << cosmicos_BigInteger.DB - sh) - 1 << sh;\n\t\t}\n\t}\n\tme.clamp();\n\tif(mi1) {\n\t\tcosmicos_BigInteger.get_ZERO().subTo(me,me);\n\t}\n\treturn me;\n};\ncosmicos_BigInteger.ofInt = function(x) {\n\tvar i = cosmicos_BigInteger.nbi();\n\ti.fromInt(x);\n\treturn i;\n};\ncosmicos_BigInteger.ofInt32 = function(x) {\n\tvar i = cosmicos_BigInteger.nbi();\n\ti.fromInt32(x);\n\treturn i;\n};\ncosmicos_BigInteger.ofBytes = function(r,unsigned,pos,len) {\n\tif(pos == null) {\n\t\tpos = 0;\n\t}\n\tif(len == null) {\n\t\tlen = r.length - pos;\n\t}\n\tif(len == 0) {\n\t\treturn cosmicos_BigInteger.get_ZERO();\n\t}\n\tvar bi = cosmicos_BigInteger.nbi();\n\tbi.sign = 0;\n\tbi.t = 0;\n\tvar i = pos + len;\n\tvar sh = 0;\n\twhile(--i >= pos) {\n\t\tvar x = i < len ? r.b[i] & 255 : 0;\n\t\tif(sh == 0) {\n\t\t\tbi.chunks[bi.t] = x;\n\t\t\tbi.t++;\n\t\t} else if(sh + 8 > cosmicos_BigInteger.DB) {\n\t\t\tbi.chunks[bi.t - 1] |= (x & (1 << cosmicos_BigInteger.DB - sh) - 1) << sh;\n\t\t\tbi.chunks[bi.t] = x >> cosmicos_BigInteger.DB - sh;\n\t\t\tbi.t++;\n\t\t} else {\n\t\t\tbi.chunks[bi.t - 1] |= x << sh;\n\t\t}\n\t\tsh += 8;\n\t\tif(sh >= cosmicos_BigInteger.DB) {\n\t\t\tsh -= cosmicos_BigInteger.DB;\n\t\t}\n\t}\n\tif(!unsigned && (r.b[0] & 128) != 0) {\n\t\tbi.sign = -1;\n\t\tif(sh > 0) {\n\t\t\tbi.chunks[bi.t - 1] |= (1 << cosmicos_BigInteger.DB - sh) - 1 << sh;\n\t\t}\n\t}\n\tbi.clamp();\n\treturn bi;\n};\ncosmicos_BigInteger.op_and = function(x,y) {\n\treturn x & y;\n};\ncosmicos_BigInteger.op_or = function(x,y) {\n\treturn x | y;\n};\ncosmicos_BigInteger.op_xor = function(x,y) {\n\treturn x ^ y;\n};\ncosmicos_BigInteger.op_andnot = function(x,y) {\n\treturn x & ~y;\n};\ncosmicos_BigInteger.nbits = function(x) {\n\tvar r = 1;\n\tvar t = x >>> 16;\n\tif(t != 0) {\n\t\tx = t;\n\t\tr += 16;\n\t}\n\tt = x >> 8;\n\tif(t != 0) {\n\t\tx = t;\n\t\tr += 8;\n\t}\n\tt = x >> 4;\n\tif(t != 0) {\n\t\tx = t;\n\t\tr += 4;\n\t}\n\tt = x >> 2;\n\tif(t != 0) {\n\t\tx = t;\n\t\tr += 2;\n\t}\n\tt = x >> 1;\n\tif(t != 0) {\n\t\tx = t;\n\t\t++r;\n\t}\n\treturn r;\n};\ncosmicos_BigInteger.cbit = function(x) {\n\tvar r = 0;\n\twhile(x != 0) {\n\t\tx &= x - 1;\n\t\t++r;\n\t}\n\treturn r;\n};\ncosmicos_BigInteger.intAt = function(s,i) {\n\tvar c = cosmicos_BigInteger.BI_RC[HxOverrides.cca(s,i)];\n\tif(c == null) {\n\t\treturn -1;\n\t}\n\treturn c;\n};\ncosmicos_BigInteger.int2charCode = function(n) {\n\treturn HxOverrides.cca(cosmicos_BigInteger.BI_RM,n);\n};\ncosmicos_BigInteger.lbit = function(x) {\n\tif(x == 0) {\n\t\treturn -1;\n\t}\n\tvar r = 0;\n\tif((x & 65535) == 0) {\n\t\tx >>= 16;\n\t\tr += 16;\n\t}\n\tif((x & 255) == 0) {\n\t\tx >>= 8;\n\t\tr += 8;\n\t}\n\tif((x & 15) == 0) {\n\t\tx >>= 4;\n\t\tr += 4;\n\t}\n\tif((x & 3) == 0) {\n\t\tx >>= 2;\n\t\tr += 2;\n\t}\n\tif((x & 1) == 0) {\n\t\t++r;\n\t}\n\treturn r;\n};\ncosmicos_BigInteger.dumpBi = function(r) {\n\tvar s = \"sign: \" + (r.sign == null ? \"null\" : \"\" + r.sign);\n\ts += \" t: \" + r.t;\n\ts += Std.string(r.chunks);\n\treturn s;\n};\ncosmicos_BigInteger.prototype = {\n\tfromInt: function(x) {\n\t\tthis.t = 1;\n\t\tthis.chunks[0] = 0;\n\t\tthis.sign = x < 0 ? -1 : 0;\n\t\tif(x > 0) {\n\t\t\tthis.chunks[0] = x;\n\t\t} else if(x < -1) {\n\t\t\tthis.chunks[0] = x + cosmicos_BigInteger.DV;\n\t\t} else {\n\t\t\tthis.t = 0;\n\t\t}\n\t}\n\t,fromInt32: function(x) {\n\t\tthis.fromInt(x);\n\t}\n\t,toInt: function() {\n\t\tif(this.sign < 0) {\n\t\t\tif(this.t == 1) {\n\t\t\t\treturn this.chunks[0] - cosmicos_BigInteger.DV;\n\t\t\t} else if(this.t == 0) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} else if(this.t == 1) {\n\t\t\treturn this.chunks[0];\n\t\t} else if(this.t == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn (this.chunks[1] & (1 << 32 - cosmicos_BigInteger.DB) - 1) << cosmicos_BigInteger.DB | this.chunks[0];\n\t}\n\t,toInt32: function() {\n\t\treturn this.toInt();\n\t}\n\t,toString: function() {\n\t\treturn this.toRadix(10);\n\t}\n\t,toHex: function() {\n\t\treturn this.toRadix(16);\n\t}\n\t,toBytes: function() {\n\t\tvar i = this.t;\n\t\tvar r = [];\n\t\tr[0] = this.sign;\n\t\tvar p = cosmicos_BigInteger.DB - i * cosmicos_BigInteger.DB % 8;\n\t\tvar d;\n\t\tvar k = 0;\n\t\tif(i-- > 0) {\n\t\t\tvar tmp;\n\t\t\tif(p < cosmicos_BigInteger.DB) {\n\t\t\t\td = this.chunks[i] >> p;\n\t\t\t\ttmp = d != (this.sign & cosmicos_BigInteger.DM) >> p;\n\t\t\t} else {\n\t\t\t\ttmp = false;\n\t\t\t}\n\t\t\tif(tmp) {\n\t\t\t\tr[k] = d | this.sign << cosmicos_BigInteger.DB - p;\n\t\t\t\t++k;\n\t\t\t}\n\t\t\twhile(i >= 0) {\n\t\t\t\tif(p < 8) {\n\t\t\t\t\td = (this.chunks[i] & (1 << p) - 1) << 8 - p;\n\t\t\t\t\t--i;\n\t\t\t\t\td |= this.chunks[i] >> (p += cosmicos_BigInteger.DB - 8);\n\t\t\t\t} else {\n\t\t\t\t\td = this.chunks[i] >> (p -= 8) & 255;\n\t\t\t\t\tif(p <= 0) {\n\t\t\t\t\t\tp += cosmicos_BigInteger.DB;\n\t\t\t\t\t\t--i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif((d & 128) != 0) {\n\t\t\t\t\td |= -256;\n\t\t\t\t}\n\t\t\t\tif(k == 0 && (this.sign & 128) != (d & 128)) {\n\t\t\t\t\t++k;\n\t\t\t\t}\n\t\t\t\tif(k > 0 || d != this.sign) {\n\t\t\t\t\tr[k] = d;\n\t\t\t\t\t++k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvar bb = new haxe_io_BytesBuffer();\n\t\tvar _g1 = 0;\n\t\tvar _g = r.length;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i1 = _g1++;\n\t\t\tbb.b.push(r[i1]);\n\t\t}\n\t\treturn bb.getBytes();\n\t}\n\t,toBytesUnsigned: function() {\n\t\tvar bb = new haxe_io_BytesBuffer();\n\t\tvar k = 8;\n\t\tvar km = 255;\n\t\tvar d = 0;\n\t\tvar i = this.t;\n\t\tvar p = cosmicos_BigInteger.DB - i * cosmicos_BigInteger.DB % k;\n\t\tvar m = false;\n\t\tvar c = 0;\n\t\tif(i-- > 0) {\n\t\t\tvar tmp;\n\t\t\tif(p < cosmicos_BigInteger.DB) {\n\t\t\t\td = this.chunks[i] >> p;\n\t\t\t\ttmp = d > 0;\n\t\t\t} else {\n\t\t\t\ttmp = false;\n\t\t\t}\n\t\t\tif(tmp) {\n\t\t\t\tm = true;\n\t\t\t\tbb.b.push(d);\n\t\t\t\t++c;\n\t\t\t}\n\t\t\twhile(i >= 0) {\n\t\t\t\tif(p < k) {\n\t\t\t\t\td = (this.chunks[i] & (1 << p) - 1) << k - p;\n\t\t\t\t\td |= this.chunks[--i] >> (p += cosmicos_BigInteger.DB - k);\n\t\t\t\t} else {\n\t\t\t\t\td = this.chunks[i] >> (p -= k) & km;\n\t\t\t\t\tif(p <= 0) {\n\t\t\t\t\t\tp += cosmicos_BigInteger.DB;\n\t\t\t\t\t\t--i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(d > 0) {\n\t\t\t\t\tm = true;\n\t\t\t\t}\n\t\t\t\tif(m) {\n\t\t\t\t\tbb.b.push(d);\n\t\t\t\t\t++c;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn bb.getBytes();\n\t}\n\t,toRadix: function(b) {\n\t\tif(b == null) {\n\t\t\tb = 10;\n\t\t}\n\t\tif(b < 2 || b > 36) {\n\t\t\tthrow new js__$Boot_HaxeError(\"invalid base for conversion\");\n\t\t}\n\t\tif(this.sigNum() == 0) {\n\t\t\treturn \"0\";\n\t\t}\n\t\tvar cs = Math.floor(0.6931471805599453 * cosmicos_BigInteger.DB / Math.log(b));\n\t\tvar a = Math.pow(b,cs) | 0;\n\t\tvar d = cosmicos_BigInteger.nbv(a);\n\t\tvar y = cosmicos_BigInteger.nbi();\n\t\tvar z = cosmicos_BigInteger.nbi();\n\t\tvar r = \"\";\n\t\tthis.divRemTo(d,y,z);\n\t\twhile(y.sigNum() > 0) {\n\t\t\tr = HxOverrides.substr(cosmicos_I32.baseEncode(a + z.toInt32(),b),1,null) + r;\n\t\t\ty.divRemTo(d,y,z);\n\t\t}\n\t\treturn cosmicos_I32.baseEncode(z.toInt32(),b) + r;\n\t}\n\t,abs: function() {\n\t\tif(this.sign < 0) {\n\t\t\treturn this.neg();\n\t\t} else {\n\t\t\treturn this;\n\t\t}\n\t}\n\t,add: function(a) {\n\t\tvar r = cosmicos_BigInteger.nbi();\n\t\tthis.addTo(a,r);\n\t\treturn r;\n\t}\n\t,compare: function(a) {\n\t\tvar r = this.sign - a.sign;\n\t\tif(r != 0) {\n\t\t\treturn r;\n\t\t}\n\t\tvar i = this.t;\n\t\tr = i - a.t;\n\t\tif(r != 0) {\n\t\t\treturn r;\n\t\t}\n\t\twhile(--i >= 0) {\n\t\t\tr = this.chunks[i] - a.chunks[i];\n\t\t\tif(r != 0) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\t,div: function(a) {\n\t\tvar r = cosmicos_BigInteger.nbi();\n\t\tthis.divRemTo(a,r,null);\n\t\treturn r;\n\t}\n\t,divideAndRemainder: function(a) {\n\t\tvar q = cosmicos_BigInteger.nbi();\n\t\tvar r = cosmicos_BigInteger.nbi();\n\t\tthis.divRemTo(a,q,r);\n\t\treturn [q,r];\n\t}\n\t,eq: function(a) {\n\t\treturn this.compare(a) == 0;\n\t}\n\t,isEven: function() {\n\t\treturn (this.t > 0 ? this.chunks[0] & 1 : this.sign) == 0;\n\t}\n\t,max: function(a) {\n\t\tif(this.compare(a) > 0) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn a;\n\t\t}\n\t}\n\t,min: function(a) {\n\t\tif(this.compare(a) < 0) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn a;\n\t\t}\n\t}\n\t,mod: function(a) {\n\t\tvar r = cosmicos_BigInteger.nbi();\n\t\tthis.abs().divRemTo(a,null,r);\n\t\tif(this.sign < 0 && r.compare(cosmicos_BigInteger.get_ZERO()) > 0) {\n\t\t\ta.subTo(r,r);\n\t\t}\n\t\treturn r;\n\t}\n\t,modInt: function(n) {\n\t\tif(n <= 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tvar d = cosmicos_BigInteger.DV % n;\n\t\tvar r = this.sign < 0 ? n - 1 : 0;\n\t\tif(this.t > 0) {\n\t\t\tif(d == 0) {\n\t\t\t\tr = this.chunks[0] % n;\n\t\t\t} else {\n\t\t\t\tvar i = this.t - 1;\n\t\t\t\twhile(i >= 0) {\n\t\t\t\t\tr = (d * r + this.chunks[i]) % n;\n\t\t\t\t\t--i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn r;\n\t}\n\t,modInverse: function(m) {\n\t\tvar ac = m.isEven();\n\t\tif(this.isEven() && ac || m.sigNum() == 0) {\n\t\t\treturn cosmicos_BigInteger.get_ZERO();\n\t\t}\n\t\tvar u = m.clone();\n\t\tvar v = this.clone();\n\t\tvar a = cosmicos_BigInteger.nbv(1);\n\t\tvar b = cosmicos_BigInteger.nbv(0);\n\t\tvar c = cosmicos_BigInteger.nbv(0);\n\t\tvar d = cosmicos_BigInteger.nbv(1);\n\t\twhile(u.sigNum() != 0) {\n\t\t\twhile(u.isEven()) {\n\t\t\t\tu.rShiftTo(1,u);\n\t\t\t\tif(ac) {\n\t\t\t\t\tif(!a.isEven() || !b.isEven()) {\n\t\t\t\t\t\ta.addTo(this,a);\n\t\t\t\t\t\tb.subTo(m,b);\n\t\t\t\t\t}\n\t\t\t\t\ta.rShiftTo(1,a);\n\t\t\t\t} else if(!b.isEven()) {\n\t\t\t\t\tb.subTo(m,b);\n\t\t\t\t}\n\t\t\t\tb.rShiftTo(1,b);\n\t\t\t}\n\t\t\twhile(v.isEven()) {\n\t\t\t\tv.rShiftTo(1,v);\n\t\t\t\tif(ac) {\n\t\t\t\t\tif(!c.isEven() || !d.isEven()) {\n\t\t\t\t\t\tc.addTo(this,c);\n\t\t\t\t\t\td.subTo(m,d);\n\t\t\t\t\t}\n\t\t\t\t\tc.rShiftTo(1,c);\n\t\t\t\t} else if(!d.isEven()) {\n\t\t\t\t\td.subTo(m,d);\n\t\t\t\t}\n\t\t\t\td.rShiftTo(1,d);\n\t\t\t}\n\t\t\tif(u.compare(v) >= 0) {\n\t\t\t\tu.subTo(v,u);\n\t\t\t\tif(ac) {\n\t\t\t\t\ta.subTo(c,a);\n\t\t\t\t}\n\t\t\t\tb.subTo(d,b);\n\t\t\t} else {\n\t\t\t\tv.subTo(u,v);\n\t\t\t\tif(ac) {\n\t\t\t\t\tc.subTo(a,c);\n\t\t\t\t}\n\t\t\t\td.subTo(b,d);\n\t\t\t}\n\t\t}\n\t\tif(v.compare(cosmicos_BigInteger.get_ONE()) != 0) {\n\t\t\treturn cosmicos_BigInteger.get_ZERO();\n\t\t}\n\t\tif(d.compare(m) >= 0) {\n\t\t\treturn d.sub(m);\n\t\t}\n\t\tif(d.sigNum() < 0) {\n\t\t\td.addTo(m,d);\n\t\t} else {\n\t\t\treturn d;\n\t\t}\n\t\treturn d;\n\t}\n\t,mul: function(a) {\n\t\tvar r = cosmicos_BigInteger.nbi();\n\t\tthis.multiplyTo(a,r);\n\t\treturn r;\n\t}\n\t,neg: function() {\n\t\tvar r = cosmicos_BigInteger.nbi();\n\t\tcosmicos_BigInteger.get_ZERO().subTo(this,r);\n\t\treturn r;\n\t}\n\t,remainder: function(a) {\n\t\tvar r = cosmicos_BigInteger.nbi();\n\t\tthis.divRemTo(a,null,r);\n\t\treturn r;\n\t}\n\t,sub: function(a) {\n\t\tvar r = cosmicos_BigInteger.nbi();\n\t\tthis.subTo(a,r);\n\t\treturn r;\n\t}\n\t,and: function(a) {\n\t\tvar r = cosmicos_BigInteger.nbi();\n\t\tthis.bitwiseTo(a,cosmicos_BigInteger.op_and,r);\n\t\treturn r;\n\t}\n\t,andNot: function(a) {\n\t\tvar r = cosmicos_BigInteger.nbi();\n\t\tthis.bitwiseTo(a,cosmicos_BigInteger.op_andnot,r);\n\t\treturn r;\n\t}\n\t,bitCount: function() {\n\t\tvar r = 0;\n\t\tvar x = this.sign & cosmicos_BigInteger.DM;\n\t\tvar _g1 = 0;\n\t\tvar _g = this.t;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tr += cosmicos_BigInteger.cbit(this.chunks[i] ^ x);\n\t\t}\n\t\treturn r;\n\t}\n\t,bitLength: function() {\n\t\tif(this.t <= 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn cosmicos_BigInteger.DB * (this.t - 1) + cosmicos_BigInteger.nbits(this.chunks[this.t - 1] ^ this.sign & cosmicos_BigInteger.DM);\n\t}\n\t,complement: function() {\n\t\tvar r = cosmicos_BigInteger.nbi();\n\t\tvar _g1 = 0;\n\t\tvar _g = this.t;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tr.chunks[i] = cosmicos_BigInteger.DM & ~this.chunks[i];\n\t\t}\n\t\tr.t = this.t;\n\t\tr.sign = ~this.sign;\n\t\treturn r;\n\t}\n\t,clearBit: function(n) {\n\t\treturn this.changeBit(n,cosmicos_BigInteger.op_andnot);\n\t}\n\t,flipBit: function(n) {\n\t\treturn this.changeBit(n,cosmicos_BigInteger.op_xor);\n\t}\n\t,getLowestSetBit: function() {\n\t\tvar _g1 = 0;\n\t\tvar _g = this.t;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tif(this.chunks[i] != 0) {\n\t\t\t\treturn i * cosmicos_BigInteger.DB + cosmicos_BigInteger.lbit(this.chunks[i]);\n\t\t\t}\n\t\t}\n\t\tif(this.sign < 0) {\n\t\t\treturn this.t * cosmicos_BigInteger.DB;\n\t\t}\n\t\treturn -1;\n\t}\n\t,not: function() {\n\t\treturn this.complement();\n\t}\n\t,or: function(a) {\n\t\tvar r = cosmicos_BigInteger.nbi();\n\t\tthis.bitwiseTo(a,cosmicos_BigInteger.op_or,r);\n\t\treturn r;\n\t}\n\t,setBit: function(n) {\n\t\treturn this.changeBit(n,cosmicos_BigInteger.op_or);\n\t}\n\t,shl: function(n) {\n\t\tvar r = cosmicos_BigInteger.nbi();\n\t\tif(n < 0) {\n\t\t\tthis.rShiftTo(-n,r);\n\t\t} else {\n\t\t\tthis.lShiftTo(n,r);\n\t\t}\n\t\treturn r;\n\t}\n\t,shr: function(n) {\n\t\tvar r = cosmicos_BigInteger.nbi();\n\t\tif(n < 0) {\n\t\t\tthis.lShiftTo(-n,r);\n\t\t} else {\n\t\t\tthis.rShiftTo(n,r);\n\t\t}\n\t\treturn r;\n\t}\n\t,testBit: function(n) {\n\t\tvar j = Math.floor(n / cosmicos_BigInteger.DB);\n\t\tif(j >= this.t) {\n\t\t\treturn this.sign != 0;\n\t\t}\n\t\treturn (this.chunks[j] & 1 << n % cosmicos_BigInteger.DB) != 0;\n\t}\n\t,xor: function(a) {\n\t\tvar r = cosmicos_BigInteger.nbi();\n\t\tthis.bitwiseTo(a,cosmicos_BigInteger.op_xor,r);\n\t\treturn r;\n\t}\n\t,addTo: function(a,r) {\n\t\tvar i = 0;\n\t\tvar c = 0;\n\t\tvar m = Math.min(a.t,this.t) | 0;\n\t\twhile(i < m) {\n\t\t\tc += this.chunks[i] + a.chunks[i];\n\t\t\tr.chunks[i] = c & cosmicos_BigInteger.DM;\n\t\t\t++i;\n\t\t\tc >>= cosmicos_BigInteger.DB;\n\t\t}\n\t\tif(a.t < this.t) {\n\t\t\tc += a.sign;\n\t\t\twhile(i < this.t) {\n\t\t\t\tc += this.chunks[i];\n\t\t\t\tr.chunks[i] = c & cosmicos_BigInteger.DM;\n\t\t\t\t++i;\n\t\t\t\tc >>= cosmicos_BigInteger.DB;\n\t\t\t}\n\t\t\tc += this.sign;\n\t\t} else {\n\t\t\tc += this.sign;\n\t\t\twhile(i < a.t) {\n\t\t\t\tc += a.chunks[i];\n\t\t\t\tr.chunks[i] = c & cosmicos_BigInteger.DM;\n\t\t\t\t++i;\n\t\t\t\tc >>= cosmicos_BigInteger.DB;\n\t\t\t}\n\t\t\tc += a.sign;\n\t\t}\n\t\tr.sign = c < 0 ? -1 : 0;\n\t\tif(c > 0) {\n\t\t\tr.chunks[i] = c;\n\t\t\t++i;\n\t\t} else if(c < -1) {\n\t\t\tr.chunks[i] = cosmicos_BigInteger.DV + c;\n\t\t\t++i;\n\t\t}\n\t\tr.t = i;\n\t\tr.clamp();\n\t}\n\t,copyTo: function(r) {\n\t\tvar _g1 = 0;\n\t\tvar _g = this.chunks.length;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tr.chunks[i] = this.chunks[i];\n\t\t}\n\t\tr.t = this.t;\n\t\tr.sign = this.sign;\n\t}\n\t,divRemTo: function(m,q,r) {\n\t\tvar pm = m.abs();\n\t\tif(pm.t <= 0) {\n\t\t\treturn;\n\t\t}\n\t\tvar pt = this.abs();\n\t\tif(pt.t < pm.t) {\n\t\t\tif(q != null) {\n\t\t\t\tq.fromInt(0);\n\t\t\t}\n\t\t\tif(r != null) {\n\t\t\t\tthis.copyTo(r);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif(r == null) {\n\t\t\tr = cosmicos_BigInteger.nbi();\n\t\t}\n\t\tvar y = cosmicos_BigInteger.nbi();\n\t\tvar ts = this.sign;\n\t\tvar ms = m.sign;\n\t\tvar nsh = cosmicos_BigInteger.DB - cosmicos_BigInteger.nbits(pm.chunks[pm.t - 1]);\n\t\tif(nsh > 0) {\n\t\t\tpt.lShiftTo(nsh,r);\n\t\t\tpm.lShiftTo(nsh,y);\n\t\t} else {\n\t\t\tpt.copyTo(r);\n\t\t\tpm.copyTo(y);\n\t\t}\n\t\tvar ys = y.t;\n\t\tvar y0 = y.chunks[ys - 1];\n\t\tif(y0 == 0) {\n\t\t\treturn;\n\t\t}\n\t\tvar yt = y0 * 1.0 * ((1 << cosmicos_BigInteger.F1) * 1.0) + (ys > 1 ? (y.chunks[ys - 2] >> cosmicos_BigInteger.F2) * 1.0 : 0.0);\n\t\tvar d1 = cosmicos_BigInteger.FV / yt;\n\t\tvar d2 = (1 << cosmicos_BigInteger.F1) * 1.0 / yt;\n\t\tvar e = (1 << cosmicos_BigInteger.F2) * 1.0;\n\t\tvar i = r.t;\n\t\tvar j = i - ys;\n\t\tvar t = q == null ? cosmicos_BigInteger.nbi() : q;\n\t\ty.dlShiftTo(j,t);\n\t\tif(r.compare(t) >= 0) {\n\t\t\tr.chunks[r.t] = 1;\n\t\t\tr.t++;\n\t\t\tr.subTo(t,r);\n\t\t}\n\t\tcosmicos_BigInteger.get_ONE().dlShiftTo(ys,t);\n\t\tt.subTo(y,y);\n\t\twhile(y.t < ys) {\n\t\t\ty.chunks[y.t] = 0;\n\t\t\ty.t++;\n\t\t}\n\t\twhile(--j >= 0) {\n\t\t\tvar qd;\n\t\t\tif(r.chunks[--i] == y0) {\n\t\t\t\tqd = cosmicos_BigInteger.DM;\n\t\t\t} else {\n\t\t\t\tqd = Math.floor(r.chunks[i] * 1.0 * d1 + (r.chunks[i - 1] * 1.0 + e) * d2);\n\t\t\t}\n\t\t\tr.chunks[i] += y.am(0,qd,r,j,0,ys);\n\t\t\tif(r.chunks[i] < qd) {\n\t\t\t\ty.dlShiftTo(j,t);\n\t\t\t\tr.subTo(t,r);\n\t\t\t\twhile(r.chunks[i] < --qd) r.subTo(t,r);\n\t\t\t}\n\t\t}\n\t\tif(q != null) {\n\t\t\tr.drShiftTo(ys,q);\n\t\t\tif(ts != ms) {\n\t\t\t\tcosmicos_BigInteger.get_ZERO().subTo(q,q);\n\t\t\t}\n\t\t}\n\t\tr.t = ys;\n\t\tr.clamp();\n\t\tif(nsh > 0) {\n\t\t\tr.rShiftTo(nsh,r);\n\t\t}\n\t\tif(ts < 0) {\n\t\t\tcosmicos_BigInteger.get_ZERO().subTo(r,r);\n\t\t}\n\t}\n\t,multiplyLowerTo: function(a,n,r) {\n\t\tvar i = Math.min(this.t + a.t,n) | 0;\n\t\tr.sign = 0;\n\t\tr.t = i;\n\t\twhile(i > 0) {\n\t\t\t--i;\n\t\t\tr.chunks[i] = 0;\n\t\t}\n\t\tvar j = r.t - this.t;\n\t\twhile(i < j) {\n\t\t\tr.chunks[i + this.t] = this.am(0,a.chunks[i],r,i,0,this.t);\n\t\t\t++i;\n\t\t}\n\t\tj = Math.min(a.t,n) | 0;\n\t\twhile(i < j) {\n\t\t\tthis.am(0,a.chunks[i],r,i,0,n - i);\n\t\t\t++i;\n\t\t}\n\t\tr.clamp();\n\t}\n\t,multiplyTo: function(a,r) {\n\t\tvar x = this.abs();\n\t\tvar y = a.abs();\n\t\tvar i = x.t;\n\t\tr.t = i + y.t;\n\t\twhile(--i >= 0) r.chunks[i] = 0;\n\t\tvar _g1 = 0;\n\t\tvar _g = y.t;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i1 = _g1++;\n\t\t\tr.chunks[i1 + x.t] = x.am(0,y.chunks[i1],r,i1,0,x.t);\n\t\t}\n\t\tr.sign = 0;\n\t\tr.clamp();\n\t\tif(this.sign != a.sign) {\n\t\t\tcosmicos_BigInteger.get_ZERO().subTo(r,r);\n\t\t}\n\t}\n\t,multiplyUpperTo: function(a,n,r) {\n\t\t--n;\n\t\tvar i = r.t = this.t + a.t - n;\n\t\tr.sign = 0;\n\t\twhile(--i >= 0) r.chunks[i] = 0;\n\t\ti = Math.max(n - this.t,0) | 0;\n\t\tvar _g1 = i;\n\t\tvar _g = a.t;\n\t\twhile(_g1 < _g) {\n\t\t\tvar x = _g1++;\n\t\t\tr.chunks[this.t + x - n] = this.am(n - x,a.chunks[x],r,0,0,this.t + x - n);\n\t\t}\n\t\tr.clamp();\n\t\tr.drShiftTo(1,r);\n\t}\n\t,squareTo: function(r) {\n\t\tif(r == this) {\n\t\t\tthrow new js__$Boot_HaxeError(\"can not squareTo self\");\n\t\t}\n\t\tvar x = this.abs();\n\t\tvar i = r.t = 2 * x.t;\n\t\twhile(--i >= 0) r.chunks[i] = 0;\n\t\ti = 0;\n\t\twhile(i < x.t - 1) {\n\t\t\tvar c = x.am(i,x.chunks[i],r,2 * i,0,1);\n\t\t\tvar r1 = r.chunks;\n\t\t\tvar tmp = i + x.t;\n\t\t\tr1[tmp] += x.am(i + 1,2 * x.chunks[i],r,2 * i + 1,c,x.t - i - 1);\n\t\t\tif(r1[tmp] >= cosmicos_BigInteger.DV) {\n\t\t\t\tr.chunks[i + x.t] -= cosmicos_BigInteger.DV;\n\t\t\t\tr.chunks[i + x.t + 1] = 1;\n\t\t\t}\n\t\t\t++i;\n\t\t}\n\t\tif(r.t > 0) {\n\t\t\tvar rv = x.am(i,x.chunks[i],r,2 * i,0,1);\n\t\t\tr.chunks[r.t - 1] += rv;\n\t\t}\n\t\tr.sign = 0;\n\t\tr.clamp();\n\t}\n\t,subTo: function(a,r) {\n\t\tvar i = 0;\n\t\tvar c = 0;\n\t\tvar m = Math.min(a.t,this.t) | 0;\n\t\twhile(i < m) {\n\t\t\tc += this.chunks[i] - a.chunks[i];\n\t\t\tr.chunks[i] = c & cosmicos_BigInteger.DM;\n\t\t\t++i;\n\t\t\tc >>= cosmicos_BigInteger.DB;\n\t\t}\n\t\tif(a.t < this.t) {\n\t\t\tc -= a.sign;\n\t\t\twhile(i < this.t) {\n\t\t\t\tc += this.chunks[i];\n\t\t\t\tr.chunks[i] = c & cosmicos_BigInteger.DM;\n\t\t\t\t++i;\n\t\t\t\tc >>= cosmicos_BigInteger.DB;\n\t\t\t}\n\t\t\tc += this.sign;\n\t\t} else {\n\t\t\tc += this.sign;\n\t\t\twhile(i < a.t) {\n\t\t\t\tc -= a.chunks[i];\n\t\t\t\tr.chunks[i] = c & cosmicos_BigInteger.DM;\n\t\t\t\t++i;\n\t\t\t\tc >>= cosmicos_BigInteger.DB;\n\t\t\t}\n\t\t\tc -= a.sign;\n\t\t}\n\t\tr.sign = c < 0 ? -1 : 0;\n\t\tif(c < -1) {\n\t\t\tr.chunks[i] = cosmicos_BigInteger.DV + c;\n\t\t\t++i;\n\t\t} else if(c > 0) {\n\t\t\tr.chunks[i] = c;\n\t\t\t++i;\n\t\t}\n\t\tr.t = i;\n\t\tr.clamp();\n\t}\n\t,clamp: function() {\n\t\tvar c = this.sign & cosmicos_BigInteger.DM;\n\t\twhile(this.t > 0 && this.chunks[this.t - 1] == c) --this.t;\n\t}\n\t,clone: function() {\n\t\tvar r = cosmicos_BigInteger.nbi();\n\t\tthis.copyTo(r);\n\t\treturn r;\n\t}\n\t,gcd: function(a) {\n\t\tvar x = this.sign < 0 ? this.neg() : this.clone();\n\t\tvar y = a.sign < 0 ? a.neg() : a.clone();\n\t\tif(x.compare(y) < 0) {\n\t\t\tvar t = x;\n\t\t\tx = y;\n\t\t\ty = t;\n\t\t}\n\t\tvar i = x.getLowestSetBit();\n\t\tvar g = y.getLowestSetBit();\n\t\tif(g < 0) {\n\t\t\treturn x;\n\t\t}\n\t\tif(i < g) {\n\t\t\tg = i;\n\t\t}\n\t\tif(g > 0) {\n\t\t\tx.rShiftTo(g,x);\n\t\t\ty.rShiftTo(g,y);\n\t\t}\n\t\twhile(x.sigNum() > 0) {\n\t\t\ti = x.getLowestSetBit();\n\t\t\tif(i > 0) {\n\t\t\t\tx.rShiftTo(i,x);\n\t\t\t}\n\t\t\ti = y.getLowestSetBit();\n\t\t\tif(i > 0) {\n\t\t\t\ty.rShiftTo(i,y);\n\t\t\t}\n\t\t\tif(x.compare(y) >= 0) {\n\t\t\t\tx.subTo(y,x);\n\t\t\t\tx.rShiftTo(1,x);\n\t\t\t} else {\n\t\t\t\ty.subTo(x,y);\n\t\t\t\ty.rShiftTo(1,y);\n\t\t\t}\n\t\t}\n\t\tif(g > 0) {\n\t\t\ty.lShiftTo(g,y);\n\t\t}\n\t\treturn y;\n\t}\n\t,padTo: function(n) {\n\t\twhile(this.t < n) {\n\t\t\tthis.chunks[this.t] = 0;\n\t\t\tthis.t++;\n\t\t}\n\t}\n\t,shortValue: function() {\n\t\tif(this.t == 0) {\n\t\t\treturn this.sign;\n\t\t} else {\n\t\t\treturn this.chunks[0] << 16 >> 16;\n\t\t}\n\t}\n\t,byteValue: function() {\n\t\tif(this.t == 0) {\n\t\t\treturn this.sign;\n\t\t} else {\n\t\t\treturn this.chunks[0] << 24 >> 24;\n\t\t}\n\t}\n\t,sigNum: function() {\n\t\tif(this.sign < 0) {\n\t\t\treturn -1;\n\t\t} else if(this.t <= 0 || this.t == 1 && this.chunks[0] <= 0) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\t,dAddOffset: function(n,w) {\n\t\twhile(this.t <= w) {\n\t\t\tthis.chunks[this.t] = 0;\n\t\t\tthis.t++;\n\t\t}\n\t\tthis.chunks[w] += n;\n\t\twhile(this.chunks[w] >= cosmicos_BigInteger.DV) {\n\t\t\tthis.chunks[w] -= cosmicos_BigInteger.DV;\n\t\t\tif(++w >= this.t) {\n\t\t\t\tthis.chunks[this.t] = 0;\n\t\t\t\tthis.t++;\n\t\t\t}\n\t\t\t++this.chunks[w];\n\t\t}\n\t}\n\t,dlShiftTo: function(n,r) {\n\t\tif(r == null) {\n\t\t\treturn;\n\t\t}\n\t\tvar i = this.t - 1;\n\t\twhile(i >= 0) {\n\t\t\tr.chunks[i + n] = this.chunks[i];\n\t\t\t--i;\n\t\t}\n\t\ti = n - 1;\n\t\twhile(i >= 0) {\n\t\t\tr.chunks[i] = 0;\n\t\t\t--i;\n\t\t}\n\t\tr.t = this.t + n;\n\t\tr.sign = this.sign;\n\t}\n\t,drShiftTo: function(n,r) {\n\t\tif(r == null) {\n\t\t\treturn;\n\t\t}\n\t\tvar i = n;\n\t\twhile(i < this.t) {\n\t\t\tr.chunks[i - n] = this.chunks[i];\n\t\t\t++i;\n\t\t}\n\t\tr.t = Math.max(this.t - n,0) | 0;\n\t\tr.sign = this.sign;\n\t}\n\t,invDigit: function() {\n\t\tif(this.t < 1) {\n\t\t\treturn 0;\n\t\t}\n\t\tvar x = this.chunks[0];\n\t\tif((x & 1) == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tvar y = x & 3;\n\t\ty = y * (2 - (x & 15) * y) & 15;\n\t\ty = y * (2 - (x & 255) * y) & 255;\n\t\ty = y * (2 - ((x & 65535) * y & 65535)) & 65535;\n\t\ty = y * (2 - x * y % cosmicos_BigInteger.DV) % cosmicos_BigInteger.DV;\n\t\tif(y > 0) {\n\t\t\treturn cosmicos_BigInteger.DV - y;\n\t\t} else {\n\t\t\treturn -y;\n\t\t}\n\t}\n\t,bitwiseTo: function(a,op,r) {\n\t\tvar f;\n\t\tvar m = Math.min(a.t,this.t) | 0;\n\t\tvar _g1 = 0;\n\t\tvar _g = m;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tr.chunks[i] = op(this.chunks[i],a.chunks[i]);\n\t\t}\n\t\tif(a.t < this.t) {\n\t\t\tf = a.sign & cosmicos_BigInteger.DM;\n\t\t\tvar _g11 = m;\n\t\t\tvar _g2 = this.t;\n\t\t\twhile(_g11 < _g2) {\n\t\t\t\tvar i1 = _g11++;\n\t\t\t\tr.chunks[i1] = op(this.chunks[i1],f);\n\t\t\t}\n\t\t\tr.t = this.t;\n\t\t} else {\n\t\t\tf = this.sign & cosmicos_BigInteger.DM;\n\t\t\tvar _g12 = m;\n\t\t\tvar _g3 = a.t;\n\t\t\twhile(_g12 < _g3) {\n\t\t\t\tvar i2 = _g12++;\n\t\t\t\tr.chunks[i2] = op(f,a.chunks[i2]);\n\t\t\t}\n\t\t\tr.t = a.t;\n\t\t}\n\t\tr.sign = op(this.sign,a.sign);\n\t\tr.clamp();\n\t}\n\t,changeBit: function(n,op) {\n\t\tvar r = cosmicos_BigInteger.get_ONE().shl(n);\n\t\tthis.bitwiseTo(r,op,r);\n\t\treturn r;\n\t}\n\t,chunkSize: function(r) {\n\t\treturn Math.floor(0.6931471805599453 * cosmicos_BigInteger.DB / Math.log(r));\n\t}\n\t,dMultiply: function(n) {\n\t\tthis.chunks[this.t] = this.am(0,n - 1,this,0,0,this.t);\n\t\tthis.t++;\n\t\tthis.clamp();\n\t}\n\t,lShiftTo: function(n,r) {\n\t\tvar bs = n % cosmicos_BigInteger.DB;\n\t\tvar cbs = cosmicos_BigInteger.DB - bs;\n\t\tvar bm = (1 << cbs) - 1;\n\t\tvar ds = Math.floor(n / cosmicos_BigInteger.DB);\n\t\tvar c = this.sign << bs & cosmicos_BigInteger.DM;\n\t\tvar i;\n\t\tvar i1 = this.t - 1;\n\t\twhile(i1 >= 0) {\n\t\t\tr.chunks[i1 + ds + 1] = this.chunks[i1] >> cbs | c;\n\t\t\tc = (this.chunks[i1] & bm) << bs;\n\t\t\t--i1;\n\t\t}\n\t\ti1 = ds - 1;\n\t\twhile(i1 >= 0) {\n\t\t\tr.chunks[i1] = 0;\n\t\t\t--i1;\n\t\t}\n\t\tr.chunks[ds] = c;\n\t\tr.t = this.t + ds + 1;\n\t\tr.sign = this.sign;\n\t\tr.clamp();\n\t}\n\t,rShiftTo: function(n,r) {\n\t\tr.sign = this.sign;\n\t\tvar ds = Math.floor(n / cosmicos_BigInteger.DB);\n\t\tif(ds >= this.t) {\n\t\t\tr.t = 0;\n\t\t\treturn;\n\t\t}\n\t\tvar bs = n % cosmicos_BigInteger.DB;\n\t\tvar cbs = cosmicos_BigInteger.DB - bs;\n\t\tvar bm = (1 << bs) - 1;\n\t\tr.chunks[0] = this.chunks[ds] >> bs;\n\t\tvar _g1 = ds + 1;\n\t\tvar _g = this.t;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tr.chunks[i - ds - 1] |= (this.chunks[i] & bm) << cbs;\n\t\t\tr.chunks[i - ds] = this.chunks[i] >> bs;\n\t\t}\n\t\tif(bs > 0) {\n\t\t\tr.chunks[this.t - ds - 1] |= (this.sign & bm) << cbs;\n\t\t}\n\t\tr.t = this.t - ds;\n\t\tr.clamp();\n\t}\n\t,am1: function(i,x,w,j,c,n) {\n\t\twhile(--n >= 0) {\n\t\t\tvar v = x * this.chunks[i] + w.chunks[j] + c;\n\t\t\t++i;\n\t\t\tc = Math.floor(v / 67108864);\n\t\t\tw.chunks[j] = v & 67108863;\n\t\t\t++j;\n\t\t}\n\t\treturn c;\n\t}\n\t,am2: function(i,x,w,j,c,n) {\n\t\tvar xl = x & 32767;\n\t\tvar xh = x >> 15;\n\t\twhile(--n >= 0) {\n\t\t\tvar l = this.chunks[i] & 32767;\n\t\t\tvar h = this.chunks[i] >> 15;\n\t\t\t++i;\n\t\t\tvar m = xh * l + h * xl;\n\t\t\tl = xl * l + ((m & 32767) << 15) + w.chunks[j] + (c & 1073741823);\n\t\t\tc = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n\t\t\tw.chunks[j] = l & 1073741823;\n\t\t\t++j;\n\t\t}\n\t\treturn c;\n\t}\n\t,am3: function(i,x,w,j,c,n) {\n\t\tvar xl = x & 16383;\n\t\tvar xh = x >> 14;\n\t\twhile(--n >= 0) {\n\t\t\tvar l = this.chunks[i] & 16383;\n\t\t\tvar h = this.chunks[i] >> 14;\n\t\t\t++i;\n\t\t\tvar m = xh * l + h * xl;\n\t\t\tl = xl * l + ((m & 16383) << 14) + w.chunks[j] + c;\n\t\t\tc = (l >> 28) + (m >> 14) + xh * h;\n\t\t\tw.chunks[j] = l & 268435455;\n\t\t\t++j;\n\t\t}\n\t\treturn c;\n\t}\n\t,__class__: cosmicos_BigInteger\n};\nvar cosmicos_BitString = $hx_exports[\"cosmicos\"][\"BitString\"] = function(txt) {\n\tthis.txt = txt;\n};\ncosmicos_BitString.__name__ = [\"cosmicos\",\"BitString\"];\ncosmicos_BitString.prototype = {\n\tasBigInteger: function() {\n\t\tvar u = cosmicos_BigInteger.ofInt(0);\n\t\tvar two = cosmicos_BigInteger.ofInt(2);\n\t\tvar _g1 = 0;\n\t\tvar _g = this.txt.length;\n\t\twhile(_g1 < _g) {\n\t\t\tvar j = _g1++;\n\t\t\tu = u.mul(two);\n\t\t\tif(this.txt.charAt(j) == \":\") {\n\t\t\t\tu = u.add(cosmicos_BigInteger.get_ONE());\n\t\t\t}\n\t\t}\n\t\treturn u;\n\t}\n\t,small: function() {\n\t\treturn this.txt.length < 15;\n\t}\n\t,asInteger: function() {\n\t\tif(!this.small()) {\n\t\t\treturn this.asBigInteger();\n\t\t}\n\t\tvar u = 0;\n\t\tvar _g1 = 0;\n\t\tvar _g = this.txt.length;\n\t\twhile(_g1 < _g) {\n\t\t\tvar j = _g1++;\n\t\t\tu *= 2;\n\t\t\tif(this.txt.charAt(j) == \":\") {\n\t\t\t\t++u;\n\t\t\t}\n\t\t}\n\t\treturn u;\n\t}\n\t,__class__: cosmicos_BitString\n};\nvar cosmicos_Codec = $hx_exports[\"cosmicos\"][\"Codec\"] = function() { };\ncosmicos_Codec.__name__ = [\"cosmicos\",\"Codec\"];\ncosmicos_Codec.prototype = {\n\t__class__: cosmicos_Codec\n};\nvar cosmicos_ChainCodec = $hx_exports[\"cosmicos\"][\"ChainCodec\"] = function(codecs) {\n\tthis.codecs = codecs;\n};\ncosmicos_ChainCodec.__name__ = [\"cosmicos\",\"ChainCodec\"];\ncosmicos_ChainCodec.__interfaces__ = [cosmicos_Codec];\ncosmicos_ChainCodec.prototype = {\n\tencode: function(src) {\n\t\tvar _g1 = 0;\n\t\tvar _g = this.codecs.length;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tvar result = this.codecs[i].encode(src);\n\t\t\tif(!result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t,decode: function(src) {\n\t\tvar _g1 = 0;\n\t\tvar _g = this.codecs.length;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tvar result = this.codecs[this.codecs.length - i - 1].decode(src);\n\t\t\tif(!result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t,last: function() {\n\t\tif(this.codecs.length == 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.codecs[this.codecs.length - 1];\n\t}\n\t,__class__: cosmicos_ChainCodec\n};\nvar cosmicos_Complex = $hx_exports[\"cosmicos\"][\"Complex\"] = function(re,im) {\n\tif(im == null) {\n\t\tim = 0;\n\t}\n\tif(re == null) {\n\t\tre = 0;\n\t}\n\tthis.re = re;\n\tthis.im = im;\n};\ncosmicos_Complex.__name__ = [\"cosmicos\",\"Complex\"];\ncosmicos_Complex.floatEquals = function(lhs,rhs) {\n\treturn Math.abs(lhs - rhs) < 0.00000001;\n};\ncosmicos_Complex.prototype = {\n\ttoString: function() {\n\t\treturn \"[\" + this.re + \", \" + this.im + \"]\";\n\t}\n\t,clone: function() {\n\t\treturn new cosmicos_Complex(this.re,this.im);\n\t}\n\t,mul: function(alt) {\n\t\treturn new cosmicos_Complex(this.re * alt.re - this.im * alt.im,this.re * alt.im + alt.re * this.im);\n\t}\n\t,div: function(alt) {\n\t\treturn new cosmicos_Complex((this.re * alt.re + this.im * alt.im) / (alt.re * alt.re + alt.im * alt.im),(this.im * alt.re - this.re * alt.im) / (alt.re * alt.re + alt.im * alt.im));\n\t}\n\t,add: function(alt) {\n\t\treturn new cosmicos_Complex(this.re + alt.re,this.im + alt.im);\n\t}\n\t,sub: function(alt) {\n\t\treturn new cosmicos_Complex(this.re - alt.re,this.im - alt.im);\n\t}\n\t,equals: function(c2) {\n\t\tif(cosmicos_Complex.floatEquals(c2.re,this.re)) {\n\t\t\treturn cosmicos_Complex.floatEquals(c2.im,this.im);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\t,__class__: cosmicos_Complex\n};\nvar cosmicos_Config = $hx_exports[\"cosmicos\"][\"Config\"] = function(txt) {\n\tthis.config = null;\n\tthis.external_vocab = null;\n\tif(txt != null) {\n\t\tthis.config = JSON.parse(txt);\n\t}\n};\ncosmicos_Config.__name__ = [\"cosmicos\",\"Config\"];\ncosmicos_Config.prototype = {\n\tuseFlattener: function() {\n\t\tif(this.config == null) {\n\t\t\treturn true;\n\t\t}\n\t\treturn Reflect.field(this.config,\"use_flattener\");\n\t}\n\t,lines: function() {\n\t\tif(this.config == null) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn Reflect.field(this.config,\"lines\");\n\t}\n\t,getExternalVocabPath: function() {\n\t\tif(this.config == null) {\n\t\t\treturn null;\n\t\t}\n\t\tvar fname = Reflect.field(this.config,\"vocab\");\n\t\tif(fname == \"\") {\n\t\t\treturn null;\n\t\t}\n\t\treturn fname;\n\t}\n\t,getNamesPath: function() {\n\t\tif(this.config == null) {\n\t\t\treturn null;\n\t\t}\n\t\tvar fname = Reflect.field(this.config,\"names\");\n\t\tif(fname == \"\") {\n\t\t\treturn null;\n\t\t}\n\t\treturn fname;\n\t}\n\t,setExternalVocab: function(txt) {\n\t\tthis.external_vocab = JSON.parse(txt);\n\t}\n\t,getExternalVocab: function() {\n\t\treturn this.external_vocab;\n\t}\n\t,__class__: cosmicos_Config\n};\nvar cosmicos_Cons = $hx_exports[\"cosmicos\"][\"Cons\"] = function() { };\ncosmicos_Cons.__name__ = [\"cosmicos\",\"Cons\"];\ncosmicos_Cons.cons = function(x,y) {\n\treturn function(f) {\n\t\treturn (f(x))(y);\n\t};\n};\ncosmicos_Cons.car = function(x) {\n\treturn x(function(a) {\n\t\treturn function(b) {\n\t\t\treturn a;\n\t\t};\n\t});\n};\ncosmicos_Cons.cdr = function(x) {\n\treturn x(function(a) {\n\t\treturn function(b) {\n\t\t\treturn b;\n\t\t};\n\t});\n};\ncosmicos_Cons.deconsify = function(e) {\n\tif(typeof(e) == \"number\" && ((e | 0) === e)) {\n\t\treturn e;\n\t}\n\tif(js_Boot.__instanceof(e,cosmicos_BigInteger)) {\n\t\treturn e;\n\t}\n\tif(typeof(e) == \"string\") {\n\t\treturn e;\n\t}\n\tif(js_Boot.__instanceof(e,cosmicos_BitString)) {\n\t\treturn e;\n\t}\n\tif(typeof(e) == \"number\") {\n\t\treturn e;\n\t}\n\tvar c = new cosmicos_Cursor(e);\n\tvar lst = [];\n\tvar len = c.length();\n\tvar _g1 = 0;\n\tvar _g = len;\n\twhile(_g1 < _g) {\n\t\tvar i = _g1++;\n\t\tvar ei = c.next();\n\t\tlst.push(cosmicos_Cons.deconsify(ei));\n\t}\n\treturn lst;\n};\ncosmicos_Cons.consify = function(e) {\n\tif(!((e instanceof Array) && e.__enum__ == null)) {\n\t\treturn e;\n\t}\n\tvar lst = e;\n\tvar len = lst.length;\n\tif(len == 0) {\n\t\treturn cosmicos_Cons.cons(0,0);\n\t}\n\tif(len == 1) {\n\t\treturn cosmicos_Cons.cons(1,cosmicos_Cons.consify(lst[0]));\n\t}\n\tvar r = cosmicos_Cons.cons(cosmicos_Cons.consify(lst[len - 2]),cosmicos_Cons.consify(lst[len - 1]));\n\tvar _g1 = 0;\n\tvar _g = len - 2;\n\twhile(_g1 < _g) {\n\t\tvar i = _g1++;\n\t\tr = cosmicos_Cons.cons(cosmicos_Cons.consify(lst[len - 3 - i]),r);\n\t}\n\treturn cosmicos_Cons.cons(len,r);\n};\nvar cosmicos_CosDefine = $hx_exports[\"cosmicos\"][\"CosDefine\"] = function(k,v) {\n\tthis.k = k;\n\tthis.v = v;\n};\ncosmicos_CosDefine.__name__ = [\"cosmicos\",\"CosDefine\"];\ncosmicos_CosDefine.prototype = {\n\t__class__: cosmicos_CosDefine\n};\nvar cosmicos_CosFunction = $hx_exports[\"cosmicos\"][\"CosFunction\"] = function(fn,meta) {\n\tthis.fn = fn;\n\tthis.meta = meta;\n};\ncosmicos_CosFunction.__name__ = [\"cosmicos\",\"CosFunction\"];\ncosmicos_CosFunction.prototype = {\n\t__class__: cosmicos_CosFunction\n};\nvar cosmicos_Cursor = function(e) {\n\tthis.at = 0;\n\tthis.len = cosmicos_Cons.car(e);\n\tthis.e = cosmicos_Cons.cdr(e);\n};\ncosmicos_Cursor.__name__ = [\"cosmicos\",\"Cursor\"];\ncosmicos_Cursor.prototype = {\n\tlength: function() {\n\t\treturn this.len;\n\t}\n\t,next: function() {\n\t\tvar result = null;\n\t\tif(this.len == 1) {\n\t\t\tresult = this.e;\n\t\t\tthis.e = null;\n\t\t} else if(this.at == this.len - 1) {\n\t\t\tresult = cosmicos_Cons.cdr(this.e);\n\t\t\tthis.e = null;\n\t\t} else {\n\t\t\tresult = cosmicos_Cons.car(this.e);\n\t\t\tif(this.at != this.len - 2) {\n\t\t\t\tthis.e = cosmicos_Cons.cdr(this.e);\n\t\t\t}\n\t\t}\n\t\tthis.at++;\n\t\treturn result;\n\t}\n\t,__class__: cosmicos_Cursor\n};\nvar cosmicos_Evaluate = $hx_exports[\"cosmicos\"][\"Evaluate\"] = function(state,useIntVocab) {\n\tif(useIntVocab == null) {\n\t\tuseIntVocab = false;\n\t}\n\tif(state == null) {\n\t\tstate = new cosmicos_State();\n\t\tif(useIntVocab) {\n\t\t\tstate.useIntVocab();\n\t\t}\n\t}\n\tthis.state = state;\n\tthis.mem = state.getMemory();\n\tthis.vocab = state.getVocab();\n\tthis.id_lambda = this.vocab.get(\"?\");\n\tthis.id_lambda0 = this.vocab.get(\"??\");\n\tthis.id_define = this.vocab.get(\"@\");\n\tthis.id_if = this.vocab.get(\"if\");\n\tthis.id_assign = this.vocab.get(\"assign\");\n\tthis.id_translate = -1;\n\tthis.internal_id = 10000;\n\tthis.config = state.getConfig();\n};\ncosmicos_Evaluate.__name__ = [\"cosmicos\",\"Evaluate\"];\ncosmicos_Evaluate.isBi = function(x) {\n\treturn js_Boot.__instanceof(x,cosmicos_BigInteger);\n};\ncosmicos_Evaluate.isBi2 = function(x,y) {\n\tif(!js_Boot.__instanceof(x,cosmicos_BigInteger)) {\n\t\treturn js_Boot.__instanceof(y,cosmicos_BigInteger);\n\t} else {\n\t\treturn true;\n\t}\n};\ncosmicos_Evaluate.isFloat2 = function(x,y) {\n\tif(typeof(x) != \"number\") {\n\t\treturn typeof(y) == \"number\";\n\t} else {\n\t\treturn true;\n\t}\n};\ncosmicos_Evaluate.isComplex2 = function(x,y) {\n\tif(!js_Boot.__instanceof(x,cosmicos_Complex)) {\n\t\treturn js_Boot.__instanceof(y,cosmicos_Complex);\n\t} else {\n\t\treturn true;\n\t}\n};\ncosmicos_Evaluate.bi = function(x) {\n\tif(js_Boot.__instanceof(x,cosmicos_BigInteger)) {\n\t\treturn x;\n\t}\n\treturn cosmicos_BigInteger.ofInt(x);\n};\ncosmicos_Evaluate.complex = function(x) {\n\tif(typeof(x) == \"number\" && ((x | 0) === x) || typeof(x) == \"number\") {\n\t\treturn new cosmicos_Complex(x);\n\t}\n\treturn x;\n};\ncosmicos_Evaluate.main = function() {\n};\ncosmicos_Evaluate.dummy = function() {\n\tnew cosmicos_ManuscriptStyle();\n\tnew cosmicos_FourSymbolCodec(null);\n\tnew cosmicos_EvaluateCodec(null);\n\tnew cosmicos_PreprocessCodec(null);\n\tnew cosmicos_Sound();\n};\ncosmicos_Evaluate.prototype = {\n\tevaluateInContext: function(e0,cbase) {\n\t\tvar _gthis = this;\n\t\tvar c = cbase;\n\t\tvar c_is_private = false;\n\t\tvar more = false;\n\t\twhile(true) {\n\t\t\tif(typeof(e0) == \"string\") {\n\t\t\t\tvar str = e0;\n\t\t\t\tif(str.length == 0 || str.charAt(0) == \"1\") {\n\t\t\t\t\treturn str.length;\n\t\t\t\t}\n\t\t\t\treturn str;\n\t\t\t}\n\t\t\tif(typeof(e0) == \"number\" && ((e0 | 0) === e0) || js_Boot.__instanceof(e0,cosmicos_BigInteger) || js_Boot.__instanceof(e0,cosmicos_BitString) || typeof(e0) == \"string\" || typeof(e0) == \"number\") {\n\t\t\t\treturn e0;\n\t\t\t}\n\t\t\tvar cursor = new cosmicos_Cursor(e0);\n\t\t\tvar x = this.evaluateInContext(cursor.next(),c);\n\t\t\tif(x == this.id_lambda) {\n\t\t\t\tvar k2 = [this.evaluateInContext(cursor.next(),c)];\n\t\t\t\tvar e2 = [cursor.next()];\n\t\t\t\treturn (function(e21,k21) {\n\t\t\t\t\treturn function(v) {\n\t\t\t\t\t\tvar c2 = new cosmicos_Memory(c,k21[0],v);\n\t\t\t\t\t\treturn _gthis.evaluateInContext(e21[0],c2);\n\t\t\t\t\t};\n\t\t\t\t})(e2,k2);\n\t\t\t} else if(x == this.id_lambda0) {\n\t\t\t\tvar k22 = [this.evaluateInContext(cursor.next(),c)];\n\t\t\t\tvar e22 = [cursor.next()];\n\t\t\t\treturn new cosmicos_CosFunction((function(e23,k23) {\n\t\t\t\t\treturn function(v1) {\n\t\t\t\t\t\tvar c21 = new cosmicos_Memory(c,k23[0],v1);\n\t\t\t\t\t\treturn _gthis.evaluateInContext(e23[0],c21);\n\t\t\t\t\t};\n\t\t\t\t})(e22,k22),true);\n\t\t\t} else if(x == this.id_assign) {\n\t\t\t\tvar k24 = this.evaluateInContext(cursor.next(),c);\n\t\t\t\tvar v2 = this.evaluateInContext(cursor.next(),c);\n\t\t\t\tvar c22 = new cosmicos_Memory(c,k24,v2);\n\t\t\t\te0 = cursor.next();\n\t\t\t\tc = c22;\n\t\t\t\tmore = true;\n\t\t\t\tif(!more) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if(x == this.id_define) {\n\t\t\t\tvar k25 = cursor.next();\n\t\t\t\tvar v21 = this.evaluateInContext(cursor.next(),c);\n\t\t\t\tvar code = this.evaluateInContext(k25,c);\n\t\t\t\treturn new cosmicos_CosDefine(code,v21);\n\t\t\t} else if(x == this.id_if) {\n\t\t\t\tvar choice = this.evaluateInContext(cursor.next(),c);\n\t\t\t\tif(choice != 0) {\n\t\t\t\t\te0 = cursor.next();\n\t\t\t\t\tmore = true;\n\t\t\t\t\tif(!more) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tcursor.next();\n\t\t\t\t\te0 = cursor.next();\n\t\t\t\t\tmore = true;\n\t\t\t\t\tif(!more) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tvar open = true;\n\t\t\t\t\tvar x0 = x;\n\t\t\t\t\tvar len = cursor.length();\n\t\t\t\t\tvar _g1 = 0;\n\t\t\t\t\tvar _g = len;\n\t\t\t\t\twhile(_g1 < _g) {\n\t\t\t\t\t\tvar i = _g1++;\n\t\t\t\t\t\tif(i > 0) {\n\t\t\t\t\t\t\tif(x == 1) {\n\t\t\t\t\t\t\t\topen = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar v3 = [cursor.next()];\n\t\t\t\t\t\t\tif(open) {\n\t\t\t\t\t\t\t\tx = this.evaluateInContext(v3[0],c);\n\t\t\t\t\t\t\t} else if(js_Boot.__instanceof(x,cosmicos_CosFunction)) {\n\t\t\t\t\t\t\t\tx = x.fn((function(v4) {\n\t\t\t\t\t\t\t\t\treturn function(x1) {\n\t\t\t\t\t\t\t\t\t\treturn _gthis.evaluateInContext(v4[0],c);\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t})(v3));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tx = x(this.evaluateInContext(v3[0],c));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(open) {\n\t\t\t\t\t\t\tif(typeof(x) == \"number\" && ((x | 0) === x) || js_Boot.__instanceof(x,cosmicos_BigInteger)) {\n\t\t\t\t\t\t\t\tvar j = x;\n\t\t\t\t\t\t\t\tx = c.get(j);\n\t\t\t\t\t\t\t\tif(len > 0) {\n\t\t\t\t\t\t\t\t\tif(x == null) {\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"Problem with \" + j + \" (\" + this.vocab.reverse(j) + \")\");\n\t\t\t\t\t\t\t\t\t\tthrow new js__$Boot_HaxeError(\"Problem with \" + j + \" (\" + this.vocab.reverse(j) + \")\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\topen = false;\n\t\t\t\t\t\t\t} else if(typeof(x) == \"string\") {\n\t\t\t\t\t\t\t\tvar j1 = x;\n\t\t\t\t\t\t\t\tx = c.get(j1);\n\t\t\t\t\t\t\t\tif(len > 0) {\n\t\t\t\t\t\t\t\t\tif(x == null) {\n\t\t\t\t\t\t\t\t\t\tconsole.log(\"Symbol '\" + j1 + \"' unrecognized\");\n\t\t\t\t\t\t\t\t\t\tthrow new js__$Boot_HaxeError(\"Symbol '\" + j1 + \"' unrecognized\");\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\topen = false;\n\t\t\t\t\t\t\t} else if(js_Boot.__instanceof(x,cosmicos_BitString)) {\n\t\t\t\t\t\t\t\tvar bs = x;\n\t\t\t\t\t\t\t\tx = bs.asBigInteger();\n\t\t\t\t\t\t\t\topen = false;\n\t\t\t\t\t\t\t} else if(js_Boot.__instanceof(x,cosmicos_CosDefine)) {\n\t\t\t\t\t\t\t\tif(!c_is_private) {\n\t\t\t\t\t\t\t\t\tc = new cosmicos_Memory(c);\n\t\t\t\t\t\t\t\t\tc_is_private = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tthis.applyDefine(x,c);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\topen = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch( e ) {\n\t\t\t\t\tif (e instanceof js__$Boot_HaxeError) e = e.val;\n\t\t\t\t\tconsole.log(\"Problem evaluating \" + Std.string(cosmicos_Cons.deconsify(e0)) + \" (\" + Std.string(e) + \")\");\n\t\t\t\t\tthrow js__$Boot_HaxeError.wrap(e);\n\t\t\t\t}\n\t\t\t\treturn x;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t,applyDefine: function(e,mem) {\n\t\tif(!js_Boot.__instanceof(e,cosmicos_CosDefine)) {\n\t\t\treturn false;\n\t\t}\n\t\tvar def = e;\n\t\tmem.add(def.k,def.v);\n\t\treturn true;\n\t}\n\t,evaluateExpression: function(e) {\n\t\tvar r = this.evaluateInContext(e,this.mem);\n\t\tif(this.applyDefine(r,this.mem)) {\n\t\t\tr = 1;\n\t\t}\n\t\treturn r;\n\t}\n\t,evaluateLine: function(str) {\n\t\tvar codec = new cosmicos_ChainCodec([new cosmicos_ParseCodec(this.vocab),new cosmicos_NormalizeCodec(this.vocab),new cosmicos_UnflattenCodec(),new cosmicos_TranslateCodec(this.state)]);\n\t\tvar statement = new cosmicos_Statement(str);\n\t\tcodec.encode(statement);\n\t\treturn this.evaluateExpression(statement.content);\n\t}\n\t,iid: function() {\n\t\tvar result = this.internal_id;\n\t\tthis.internal_id++;\n\t\treturn result;\n\t}\n\t,getVocab: function() {\n\t\treturn this.vocab;\n\t}\n\t,getMemory: function() {\n\t\treturn this.mem;\n\t}\n\t,getState: function() {\n\t\treturn this.state;\n\t}\n\t,explain: function(name,desc,example) {\n\t\tthis.vocab.setMeta(name,new cosmicos_VocabMeta(desc,example));\n\t}\n\t,applyOldOrder: function() {\n\t\tvar _gthis = this;\n\t\tif(this.mem == null) {\n\t\t\tthis.mem = new cosmicos_Memory(null);\n\t\t}\n\t\tthis.vocab.clear();\n\t\tthis.vocab.check(\"false\",0);\n\t\tthis.vocab.check(\"true\",1);\n\t\tthis.vocab.check(\"<\",2);\n\t\tthis.explain(\"<\",\"is one integer less than another\",\"< 41 42\");\n\t\tthis.vocab.check(\"=\",3);\n\t\tthis.explain(\"=\",\"test for integer equality\",\"= 42 42\");\n\t\tthis.vocab.check(\">\",4);\n\t\tthis.explain(\">\",\"is one integer greater than another\",\"> 42 41\");\n\t\tthis.vocab.check(\"not\",5);\n\t\tthis.vocab.check(\"unary\",7);\n\t\tthis.vocab.check(\"*\",9);\n\t\tthis.explain(\"*\",\"multiply two integers\",\"* 2 21\");\n\t\tthis.vocab.check(\"+\",10);\n\t\tthis.explain(\"+\",\"add two integers\",\"+ 22 20\");\n\t\tthis.vocab.check(\"-\",11);\n\t\tthis.explain(\"-\",\"subtract one integer from another\",\"- 44 2\");\n\t\tthis.id_lambda = this.vocab.check(\"?\",12);\n\t\tthis.explain(\"?\",\"create an anonymous function\",\"? x | - $x 1\");\n\t\tthis.id_define = this.vocab.check(\"@\",13);\n\t\tthis.explain(\"@\",\"store an expression in memory\",\"@ decrement | ? x | - $x 1\");\n\t\tthis.id_assign = this.vocab.check(\"assign\",14);\n\t\tthis.explain(\"assign\",\"memory within expression\",\"assign x 15 | = $x 15\");\n\t\tthis.id_if = this.vocab.check(\"if\",15);\n\t\tthis.explain(\"if\",\"conditional evaluation\",\"if (> $x 1) (dec $x) $x\");\n\t\tthis.vocab.check(\"vector\",16);\n\t\tthis.vocab.check(\"solve\",17);\n\t\tthis.vocab.check(\"intro\",18);\n\t\tthis.vocab.check(\"forall\",19);\n\t\tthis.vocab.check(\"exists\",20);\n\t\tthis.vocab.check(\"cons\",21);\n\t\tthis.id_translate = this.vocab.check(\"translate\",25);\n\t\tthis.vocab.check(\"lambda\",26);\n\t\tthis.vocab.check(\"make\",27);\n\t\tthis.vocab.check(\"all\",30);\n\t\tthis.vocab.check(\"undefined\",32);\n\t\tthis.vocab.check(\"div\",34);\n\t\tthis.vocab.check(\"primer\",35);\n\t\tthis.vocab.check(\"demo\",36);\n\t\tthis.vocab.check(\"cell\",37);\n\t\tthis.mem.add(this.vocab.get(\"intro\"),function(x) {\n\t\t\treturn 1;\n\t\t});\n\t\tthis.vocab.set(\"assume\",this.iid());\n\t\tthis.mem.add(this.vocab.get(\"assume\"),function(x1) {\n\t\t\treturn x1;\n\t\t});\n\t\tthis.addStdMin();\n\t\tthis.evaluateLine(\"@ 1 1\");\n\t\tthis.evaluateLine(\"@ true 1\");\n\t\tthis.addDefinition(\"not\",\"? 0 | if $0 0 1\");\n\t\tthis.addDefinition(\"true:*\",\"? 0 | ? 1 | if $0 $1 0\");\n\t\tthis.addDefinition(\"true:+\",\"? 0 | ? 1 | if $0 1 $1\");\n\t\tthis.mem.add(this.vocab.get(\"cell:make\"),function(x2) {\n\t\t\treturn { data : x2};\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"cell:get\"),function(x3) {\n\t\t\treturn x3.data;\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"cell:assign\"),function(x4) {\n\t\t\treturn function(y) {\n\t\t\t\tx4.data = y;\n\t\t\t\treturn 1;\n\t\t\t};\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"function?\"),function(x5) {\n\t\t\treturn !(typeof(x5) == \"number\" && ((x5 | 0) === x5) || typeof(x5) == \"number\" || js_Boot.__instanceof(x5,cosmicos_BigInteger) || typeof(x5) == \"string\" || js_Boot.__instanceof(x5,cosmicos_BitString) || typeof(x5) == \"boolean\");\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"translate\"),function(x6) {\n\t\t\tif(typeof(x6) == \"number\" && ((x6 | 0) === x6) || js_Boot.__instanceof(x6,cosmicos_BigInteger) || typeof(x6) == \"string\" || js_Boot.__instanceof(x6,cosmicos_BitString) || typeof(x6) == \"number\") {\n\t\t\t\treturn x6;\n\t\t\t}\n\t\t\tvar rep = function(x7) {\n\t\t\t};\n\t\t\tvar len = cosmicos_Cons.car(x6);\n\t\t\tif(len == 0) {\n\t\t\t\treturn x6;\n\t\t\t}\n\t\t\tvar current = _gthis.mem.get(_gthis.id_translate);\n\t\t\tif(len == 1) {\n\t\t\t\tvar tmp = cosmicos_Cons.cdr(x6);\n\t\t\t\treturn cosmicos_Cons.cons(1,current(tmp));\n\t\t\t}\n\t\t\tvar rep1 = function(r,len1,rec) {\n\t\t\t\tif(len1 == 2) {\n\t\t\t\t\tvar rep2 = cosmicos_Cons.car(r);\n\t\t\t\t\tvar rep3 = current(rep2);\n\t\t\t\t\tvar rep4 = cosmicos_Cons.cdr(r);\n\t\t\t\t\treturn cosmicos_Cons.cons(rep3,current(rep4));\n\t\t\t\t}\n\t\t\t\tvar rep5 = cosmicos_Cons.car(r);\n\t\t\t\treturn cosmicos_Cons.cons(current(rep5),rec(cosmicos_Cons.cdr(r),len1 - 1,rec));\n\t\t\t};\n\t\t\treturn cosmicos_Cons.cons(len,rep1(cosmicos_Cons.cdr(x6),len,rep1));\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"forall\"),function(f) {\n\t\t\tif(f(-5) != 0 && f(10) != 0 && f(15) != 0 && f(18) != 0) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"exists\"),function(f1) {\n\t\t\tvar _g = -10;\n\t\t\twhile(_g < 20) {\n\t\t\t\tvar i = _g++;\n\t\t\t\tif(f1(i) != 0) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"solve\"),function(f2) {\n\t\t\tvar samples = [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,Math.sqrt(2)];\n\t\t\tvar _g1 = 0;\n\t\t\twhile(_g1 < samples.length) {\n\t\t\t\tvar i1 = samples[_g1];\n\t\t\t\t++_g1;\n\t\t\t\tif(f2(i1) != 0) {\n\t\t\t\t\treturn i1;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn 0;\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"all\"),function(f3) {\n\t\t\tvar lst = [];\n\t\t\tvar _g2 = -50;\n\t\t\twhile(_g2 < 50) {\n\t\t\t\tvar i2 = _g2++;\n\t\t\t\tif(f3(i2) != 0) {\n\t\t\t\t\tlst.push(i2);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn cosmicos_Cons.consify(lst);\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"sqrt\"),function(x8) {\n\t\t\treturn Math.sqrt(x8);\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"pow\"),function(x9) {\n\t\t\treturn function(y1) {\n\t\t\t\treturn Math.pow(x9,y1);\n\t\t\t};\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"set:int:+\"),(this.mem.get(this.vocab.get(\"all\")))(function(x10) {\n\t\t\treturn x10 >= 0;\n\t\t}));\n\t\tthis.mem.add(this.vocab.get(\"div\"),function(x11) {\n\t\t\treturn function(y2) {\n\t\t\t\tif(cosmicos_Evaluate.isBi2(x11,y2)) {\n\t\t\t\t\treturn cosmicos_Evaluate.bi(x11).div(cosmicos_Evaluate.bi(y2));\n\t\t\t\t}\n\t\t\t\treturn x11 / y2 | 0;\n\t\t\t};\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"frac\"),function(x12) {\n\t\t\treturn function(y3) {\n\t\t\t\tif(cosmicos_Evaluate.isBi2(x12,y3)) {\n\t\t\t\t\tthrow new js__$Boot_HaxeError(\"real division cannot deal with bigints yet\");\n\t\t\t\t}\n\t\t\t\tif(cosmicos_Evaluate.isComplex2(x12,y3)) {\n\t\t\t\t\treturn cosmicos_Evaluate.complex(x12).div(cosmicos_Evaluate.complex(y3));\n\t\t\t\t}\n\t\t\t\treturn x12 / y3;\n\t\t\t};\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"demo\"),function(x13) {\n\t\t\treturn x13;\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"e\"),Math.exp(1.0));\n\t\tthis.mem.add(this.vocab.get(\"pi\"),Math.PI);\n\t\tthis.mem.add(this.vocab.get(\"i\"),new cosmicos_Complex(0,1));\n\t\tthis.vocab.set(\"is-int\",this.iid());\n\t\tthis.evaluateLine(\"@ is-int | ? x 1\");\n\t\tthis.vocab.set(\"unary-v\",this.iid());\n\t\tthis.evaluateLine(\"@ unary-v | ? v | ? x | if (= $x 0) $v (unary-v | + $v 1)\");\n\t\tthis.evaluateLine(\"@ unary | unary-v 0\");\n\t\tthis.vocab.set(\"has-divisor-within\",this.iid());\n\t\tthis.evaluateLine(\"@ has-divisor-within | ? top | ? x | if (< $top 2) 0 | if (= $x | * $top | div $x $top) 1 | has-divisor-within (- $top 1) $x\");\n\t\tthis.vocab.set(\"is-prime\",this.iid());\n\t\tthis.evaluateLine(\"@ is-prime | ? x | if (< $x 2) 0 | not | has-divisor-within (- $x 1) $x\");\n\t\tthis.vocab.set(\"has-square-divisor-within\",this.iid());\n\t\tthis.evaluateLine(\"@ has-square-divisor-within | ? top | ? x | if (< $top 0) 0 | if (= $x | * $top $top) 1 | has-square-divisor-within (- $top 1) $x\");\n\t\tthis.vocab.set(\"is-square\",this.iid());\n\t\tthis.evaluateLine(\"@ is-square | ? x | has-square-divisor-within $x $x\");\n\t\tthis.evaluateLine(\"@ undefined 999999\");\n\t\tthis.evaluateLine(\"@ even | ? x | = 0 | - $x | * 2 | div $x 2\");\n\t\tthis.evaluateLine(\"@ is | ? x | if (= $x int) $is-int | if (= $x square) $is-square | if (= $x prime) $is-prime $undefined\");\n\t\tthis.id_lambda0 = this.vocab.get(\"??\");\n\t}\n\t,addStdMin: function() {\n\t\tthis.mem.add(this.vocab.get(\"+\"),function(x) {\n\t\t\treturn function(y) {\n\t\t\t\tif(cosmicos_Evaluate.isBi2(x,y)) {\n\t\t\t\t\treturn cosmicos_Evaluate.bi(x).add(cosmicos_Evaluate.bi(y));\n\t\t\t\t}\n\t\t\t\tif(cosmicos_Evaluate.isComplex2(x,y)) {\n\t\t\t\t\treturn cosmicos_Evaluate.complex(x).add(cosmicos_Evaluate.complex(y));\n\t\t\t\t}\n\t\t\t\treturn x + y;\n\t\t\t};\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"-\"),function(x1) {\n\t\t\treturn function(y1) {\n\t\t\t\tif(cosmicos_Evaluate.isBi2(x1,y1)) {\n\t\t\t\t\treturn cosmicos_Evaluate.bi(x1).sub(cosmicos_Evaluate.bi(y1));\n\t\t\t\t}\n\t\t\t\tif(cosmicos_Evaluate.isComplex2(x1,y1)) {\n\t\t\t\t\treturn cosmicos_Evaluate.complex(x1).sub(cosmicos_Evaluate.complex(y1));\n\t\t\t\t}\n\t\t\t\treturn x1 - y1;\n\t\t\t};\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"=\"),function(x2) {\n\t\t\treturn function(y2) {\n\t\t\t\tif(cosmicos_Evaluate.isBi2(x2,y2)) {\n\t\t\t\t\tif(cosmicos_Evaluate.bi(x2).compare(cosmicos_Evaluate.bi(y2)) == 0) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cosmicos_Evaluate.isComplex2(x2,y2)) {\n\t\t\t\t\tvar _this = cosmicos_Evaluate.complex(x2);\n\t\t\t\t\tvar c2 = cosmicos_Evaluate.complex(y2);\n\t\t\t\t\tif(cosmicos_Complex.floatEquals(c2.re,_this.re)) {\n\t\t\t\t\t\treturn cosmicos_Complex.floatEquals(c2.im,_this.im);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cosmicos_Evaluate.isFloat2(x2,y2)) {\n\t\t\t\t\treturn Math.abs(x2 - y2) < 0.0001;\n\t\t\t\t}\n\t\t\t\tif(x2 == y2) {\n\t\t\t\t\treturn 1;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"*\"),function(x3) {\n\t\t\treturn function(y3) {\n\t\t\t\tif(cosmicos_Evaluate.isBi2(x3,y3)) {\n\t\t\t\t\treturn cosmicos_Evaluate.bi(x3).mul(cosmicos_Evaluate.bi(y3));\n\t\t\t\t}\n\t\t\t\tif(cosmicos_Evaluate.isComplex2(x3,y3)) {\n\t\t\t\t\treturn cosmicos_Evaluate.complex(x3).mul(cosmicos_Evaluate.complex(y3));\n\t\t\t\t}\n\t\t\t\treturn x3 * y3;\n\t\t\t};\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"<\"),function(x4) {\n\t\t\treturn function(y4) {\n\t\t\t\tif(cosmicos_Evaluate.isBi2(x4,y4)) {\n\t\t\t\t\tif(cosmicos_Evaluate.bi(x4).compare(cosmicos_Evaluate.bi(y4)) < 0) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(x4 < y4) {\n\t\t\t\t\treturn 1;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\">\"),function(x5) {\n\t\t\treturn function(y5) {\n\t\t\t\tif(cosmicos_Evaluate.isBi2(x5,y5)) {\n\t\t\t\t\tif(cosmicos_Evaluate.bi(x5).compare(cosmicos_Evaluate.bi(y5)) > 0) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(x5 > y5) {\n\t\t\t\t\treturn 1;\n\t\t\t\t} else {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t\tthis.mem.add(this.vocab.get(\"pure\"),function(v) {\n\t\t\tif(v) {\n\t\t\t\treturn function(x6) {\n\t\t\t\t\treturn function(y6) {\n\t\t\t\t\t\treturn x6;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn function(x7) {\n\t\t\t\t\treturn function(y7) {\n\t\t\t\t\t\treturn y7;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n\t,addDefinition: function(name,body,example) {\n\t\tthis.evaluateLine(\"@ \" + name + \" | \" + body);\n\t\tthis.vocab.setMeta(name,new cosmicos_VocabMeta(body,example));\n\t}\n\t,addStd: function() {\n\t\tthis.addStdMin();\n\t\tthis.explain(\"false\",\"not true ;-)\",\"= (> 10 20) $false\");\n\t\tthis.explain(\"true\",\"not false ;-)\",\"= (> 20 10) $true\");\n\t\tthis.addDefinition(\"not\",\"? x | if $x 0 1\",\"not (> 41 42)\");\n\t\tthis.explain(\"true:*\",\"true if both args are true\",\"and (> 42 41) (< 41 42)\");\n\t\tthis.explain(\"true:+\",\"true if either arg is true\",\"or (> 42 41) (< 42 41)\");\n\t}\n\t,addPrimer: function(primer) {\n\t\tthis.mem.add(this.vocab.get(\"primer\"),cosmicos_Cons.consify(primer));\n\t}\n\t,examples: function() {\n\t\treturn [\"+ 3 (* 10 2)\",\"+ 3 | * 10 2\",\"+ 3 20\",\"@ square | ? x | * $x $x\",\"square 10\",\"@ factorial | ? n | if (= $n 0) 1 | * $n | factorial (- $n 1)\",\"factorial 5\",\"@ first | ? x | ? y | x\",\"@ second | ? x | ? y | y\",\"@ cons | ? x | ? y | ? f | f $x $y\",\"@ car | ? f | f $first\",\"@ cdr | ? f | f $second\",\"car | cons 10 15\",\"cdr | cons 10 15\"];\n\t}\n\t,__class__: cosmicos_Evaluate\n};\nvar cosmicos_EvaluateCodec = $hx_exports[\"cosmicos\"][\"EvaluateCodec\"] = function(state,with_std_functions) {\n\tif(with_std_functions == null) {\n\t\twith_std_functions = true;\n\t}\n\tthis.state = state;\n\tthis[\"eval\"] = new cosmicos_Evaluate(state);\n\tthis[\"eval\"].applyOldOrder();\n\tif(with_std_functions) {\n\t\tthis[\"eval\"].addStdMin();\n\t}\n};\ncosmicos_EvaluateCodec.__name__ = [\"cosmicos\",\"EvaluateCodec\"];\ncosmicos_EvaluateCodec.__interfaces__ = [cosmicos_Codec];\ncosmicos_EvaluateCodec.prototype = {\n\taddPrimer: function(primer) {\n\t\tthis[\"eval\"].addPrimer(primer);\n\t}\n\t,encode: function(src) {\n\t\tsrc.content = [this[\"eval\"].evaluateExpression(src.content)];\n\t\treturn true;\n\t}\n\t,decode: function(src) {\n\t\tsrc.content = src.content[0];\n\t\tvar r = cosmicos_Cons.deconsify(src.content);\n\t\tvar vocab = this.state.getVocab();\n\t\tif(vocab.exists(\"vector\")) {\n\t\t\tvar vector = vocab.get(\"vector\");\n\t\t\tthis.vectorify(r,vector);\n\t\t}\n\t\tsrc.content = cosmicos_Cons.consify(r);\n\t\treturn true;\n\t}\n\t,vectorify: function(v,vector) {\n\t\tif((v instanceof Array) && v.__enum__ == null) {\n\t\t\tvar ei = v;\n\t\t\tvar _g1 = 0;\n\t\t\tvar _g = ei.length;\n\t\t\twhile(_g1 < _g) {\n\t\t\t\tvar i = _g1++;\n\t\t\t\tei[i] = this.vectorify(ei[i],vector);\n\t\t\t}\n\t\t\tei.splice(0,0,vector);\n\t\t\treturn ei;\n\t\t} else {\n\t\t\treturn v;\n\t\t}\n\t}\n\t,__class__: cosmicos_EvaluateCodec\n};\nvar cosmicos_FourSymbolCodec = $hx_exports[\"cosmicos\"][\"FourSymbolCodec\"] = function(vocab) {\n\tthis.vocab = vocab;\n};\ncosmicos_FourSymbolCodec.__name__ = [\"cosmicos\",\"FourSymbolCodec\"];\ncosmicos_FourSymbolCodec.__interfaces__ = [cosmicos_Codec];\ncosmicos_FourSymbolCodec.prototype = {\n\tencode: function(src) {\n\t\tvar txt = cosmicos_Parse.codify(src.content,this.vocab);\n\t\tsrc.content = [txt];\n\t\treturn true;\n\t}\n\t,decode: function(src) {\n\t\tvar txt = src.content[0];\n\t\tvar out = \"\";\n\t\tvar len = txt.length;\n\t\tvar unit = \"\";\n\t\tvar _g1 = 0;\n\t\tvar _g = len;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tvar ch = txt.charAt(i);\n\t\t\tif(ch == \"0\") {\n\t\t\t\tunit += \".\";\n\t\t\t} else if(ch == \"1\") {\n\t\t\t\tunit += \":\";\n\t\t\t} else if(ch == \"2\") {\n\t\t\t\tout += unit;\n\t\t\t\tunit = \"\";\n\t\t\t\tout += \"(\";\n\t\t\t} else if(ch == \"3\") {\n\t\t\t\tif(unit != \"\") {\n\t\t\t\t\tvar bs = new cosmicos_BitString(unit);\n\t\t\t\t\tif(bs.small()) {\n\t\t\t\t\t\tout += \"]\";\n\t\t\t\t\t\tout += Std.string(bs.asInteger());\n\t\t\t\t\t\tout += \"[\";\n\t\t\t\t\t\tunit = \"\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tout += \" \";\n\t\t\t\t\t\tout += unit;\n\t\t\t\t\t\tout += \" \";\n\t\t\t\t\t\tunit = \"\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tout += \")\";\n\t\t\t}\n\t\t}\n\t\tvar r = new EReg(\"\\\\(\\\\]\",\"g\");\n\t\tvar out1 = out.replace(r.r,\" \");\n\t\tr = new EReg(\"\\\\[\\\\)\",\"g\");\n\t\tout1 = out1.replace(r.r,\" \");\n\t\tr = new EReg(\":\\\\(\\\\)\",\"g\");\n\t\tout1 = out1.replace(r.r,\" | \");\n\t\tr = new EReg(\"\\\\.\\\\(\\\\) *\",\"g\");\n\t\tout1 = out1.replace(r.r,\" $\");\n\t\tr = new EReg(\" *\\\\(\\\\(\\\\)\\\\)\",\"g\");\n\t\tout1 = out1.replace(r.r,\";\");\n\t\tr = new EReg(\"   *\",\"g\");\n\t\tout1 = out1.replace(r.r,\" \");\n\t\tvar codec = new cosmicos_ChainCodec([new cosmicos_ParseCodec(this.vocab),new cosmicos_NormalizeCodec(this.vocab)]);\n\t\tvar dest = new cosmicos_Statement(out1);\n\t\tcodec.encode(dest);\n\t\tsrc.content = dest.content;\n\t\treturn true;\n\t}\n\t,__class__: cosmicos_FourSymbolCodec\n};\nvar cosmicos_Constants = function() { };\ncosmicos_Constants.__name__ = [\"cosmicos\",\"Constants\"];\nvar cosmicos_I32 = function() { };\ncosmicos_I32.__name__ = [\"cosmicos\",\"I32\"];\ncosmicos_I32.B4 = function(v) {\n\treturn v >>> 24 & -1;\n};\ncosmicos_I32.B3 = function(v) {\n\treturn v >>> 16 & 255 & -1;\n};\ncosmicos_I32.B2 = function(v) {\n\treturn v >>> 8 & 255 & -1;\n};\ncosmicos_I32.B1 = function(v) {\n\treturn v & 255 & -1;\n};\ncosmicos_I32.abs = function(v) {\n\treturn Math.abs(v) | 0;\n};\ncosmicos_I32.add = function(a,b) {\n\treturn a + b;\n};\ncosmicos_I32.alphaFromArgb = function(v) {\n\treturn v >>> 24 & -1;\n};\ncosmicos_I32.and = function(a,b) {\n\treturn a & b;\n};\ncosmicos_I32.baseEncode = function(v,radix) {\n\tif(radix < 2 || radix > 36) {\n\t\tthrow new js__$Boot_HaxeError(\"radix out of range\");\n\t}\n\tvar sb = \"\";\n\tvar av = Math.abs(v) | 0;\n\tvar radix32 = radix;\n\twhile(true) {\n\t\tvar r32 = av % radix32;\n\t\tsb = \"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(r32 & -1) + sb;\n\t\tav = (av - r32) / radix32 | 0;\n\t\tif(av == 0) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(v < 0) {\n\t\treturn \"-\" + sb;\n\t}\n\treturn sb;\n};\ncosmicos_I32.complement = function(v) {\n\treturn ~v;\n};\ncosmicos_I32.compare = function(a,b) {\n\treturn a - b;\n};\ncosmicos_I32.div = function(a,b) {\n\treturn a / b | 0;\n};\ncosmicos_I32.encodeBE = function(i) {\n\tvar b = new haxe_io_Bytes(new ArrayBuffer(4));\n\tb.b[0] = i >>> 24 & -1 & 255;\n\tb.b[1] = i >>> 16 & 255 & -1 & 255;\n\tb.b[2] = i >>> 8 & 255 & -1 & 255;\n\tb.b[3] = i & 255 & -1 & 255;\n\treturn b;\n};\ncosmicos_I32.encodeLE = function(i) {\n\tvar b = new haxe_io_Bytes(new ArrayBuffer(4));\n\tb.b[0] = i & 255 & -1 & 255;\n\tb.b[1] = i >>> 8 & 255 & -1 & 255;\n\tb.b[2] = i >>> 16 & 255 & -1 & 255;\n\tb.b[3] = i >>> 24 & -1 & 255;\n\treturn b;\n};\ncosmicos_I32.decodeBE = function(s,pos) {\n\tif(pos == null) {\n\t\tpos = 0;\n\t}\n\tvar b0 = s.b[pos + 3];\n\tvar b1 = s.b[pos + 2];\n\tvar b2 = s.b[pos + 1];\n\tvar b3 = s.b[pos];\n\tb1 <<= 8;\n\tb2 <<= 16;\n\tb3 <<= 24;\n\tvar a = b0 + b1;\n\ta += b2;\n\ta += b3;\n\treturn a;\n};\ncosmicos_I32.decodeLE = function(s,pos) {\n\tif(pos == null) {\n\t\tpos = 0;\n\t}\n\tvar b0 = s.b[pos];\n\tvar b1 = s.b[pos + 1];\n\tvar b2 = s.b[pos + 2];\n\tvar b3 = s.b[pos + 3];\n\tb1 <<= 8;\n\tb2 <<= 16;\n\tb3 <<= 24;\n\tvar a = b0 + b1;\n\ta += b2;\n\ta += b3;\n\treturn a;\n};\ncosmicos_I32.eq = function(a,b) {\n\treturn a == b;\n};\ncosmicos_I32.gt = function(a,b) {\n\treturn a > b;\n};\ncosmicos_I32.gteq = function(a,b) {\n\treturn a >= b;\n};\ncosmicos_I32.lt = function(a,b) {\n\treturn a < b;\n};\ncosmicos_I32.lteq = function(a,b) {\n\treturn a <= b;\n};\ncosmicos_I32.make = function(high,low) {\n\treturn (high << 16) + low;\n};\ncosmicos_I32.makeColor = function(alpha,rgb) {\n\treturn alpha << 24 | rgb & 16777215;\n};\ncosmicos_I32.mod = function(a,b) {\n\treturn a % b;\n};\ncosmicos_I32.mul = function(a,b) {\n\treturn a * b;\n};\ncosmicos_I32.neg = function(v) {\n\treturn -v;\n};\ncosmicos_I32.ofInt = function(v) {\n\treturn v;\n};\ncosmicos_I32.or = function(a,b) {\n\treturn a | b;\n};\ncosmicos_I32.packBE = function(l) {\n\tvar sb = new haxe_io_BytesBuffer();\n\tvar _g1 = 0;\n\tvar _g = l.length;\n\twhile(_g1 < _g) {\n\t\tvar i = _g1++;\n\t\tsb.b.push(l[i] >>> 24 & -1);\n\t\tsb.b.push(l[i] >>> 16 & 255 & -1);\n\t\tsb.b.push(l[i] >>> 8 & 255 & -1);\n\t\tsb.b.push(l[i] & 255 & -1);\n\t}\n\treturn sb.getBytes();\n};\ncosmicos_I32.packLE = function(l) {\n\tvar sb = new haxe_io_BytesBuffer();\n\tvar _g1 = 0;\n\tvar _g = l.length;\n\twhile(_g1 < _g) {\n\t\tvar i = _g1++;\n\t\tsb.b.push(l[i] & 255 & -1);\n\t\tsb.b.push(l[i] >>> 8 & 255 & -1);\n\t\tsb.b.push(l[i] >>> 16 & 255 & -1);\n\t\tsb.b.push(l[i] >>> 24 & -1);\n\t}\n\treturn sb.getBytes();\n};\ncosmicos_I32.rgbFromArgb = function(v) {\n\treturn v & 16777215;\n};\ncosmicos_I32.sub = function(a,b) {\n\treturn a - b;\n};\ncosmicos_I32.shl = function(v,bits) {\n\treturn v << bits;\n};\ncosmicos_I32.shr = function(v,bits) {\n\treturn v >> bits;\n};\ncosmicos_I32.toColor = function(v) {\n\treturn { alpha : v >>> 24 & -1, color : v & 16777215};\n};\ncosmicos_I32.toFloat = function(v) {\n\treturn v * 1.0;\n};\ncosmicos_I32.toInt = function(v) {\n\treturn v & -1;\n};\ncosmicos_I32.toNativeArray = function(v) {\n\treturn v;\n};\ncosmicos_I32.unpackLE = function(s) {\n\tif(s == null || s.length == 0) {\n\t\treturn [];\n\t}\n\tif(s.length % 4 != 0) {\n\t\tthrow new js__$Boot_HaxeError(\"Buffer not multiple of 4 bytes\");\n\t}\n\tvar a = [];\n\tvar pos = 0;\n\tvar i = 0;\n\tvar len = s.length;\n\twhile(pos < len) {\n\t\ta[i] = cosmicos_I32.decodeLE(s,pos);\n\t\tpos += 4;\n\t\t++i;\n\t}\n\treturn a;\n};\ncosmicos_I32.unpackBE = function(s) {\n\tif(s == null || s.length == 0) {\n\t\treturn [];\n\t}\n\tif(s.length % 4 != 0) {\n\t\tthrow new js__$Boot_HaxeError(\"Buffer not multiple of 4 bytes\");\n\t}\n\tvar a = [];\n\tvar pos = 0;\n\tvar i = 0;\n\twhile(pos < s.length) {\n\t\ta[i] = cosmicos_I32.decodeBE(s,pos);\n\t\tpos += 4;\n\t\t++i;\n\t}\n\treturn a;\n};\ncosmicos_I32.ushr = function(v,bits) {\n\treturn v >>> bits;\n};\ncosmicos_I32.xor = function(a,b) {\n\treturn a ^ b;\n};\ncosmicos_I32.intToHex = function(j) {\n\tvar sb_b = \"\";\n\tvar i = 8;\n\twhile(i-- > 0) {\n\t\tvar v = j >>> i * 4 & 15;\n\t\tsb_b += Std.string(StringTools.hex(v).toLowerCase());\n\t}\n\treturn sb_b;\n};\ncosmicos_I32.int32ToHex = function(j) {\n\tvar sb_b = \"\";\n\tvar i = 8;\n\tvar f = 15;\n\twhile(i-- > 0) {\n\t\tvar v = j >>> i * 4 & f & -1;\n\t\tsb_b += Std.string(StringTools.hex(v).toLowerCase());\n\t}\n\treturn sb_b;\n};\nvar cosmicos_ManuscriptStyle = $hx_exports[\"cosmicos\"][\"ManuscriptStyle\"] = function() {\n};\ncosmicos_ManuscriptStyle.__name__ = [\"cosmicos\",\"ManuscriptStyle\"];\ncosmicos_ManuscriptStyle.prototype = {\n\trender: function(x) {\n\t\tthis.out = [];\n\t\tthis.need_ws = false;\n\t\tthis.renderNest(x,false);\n\t\treturn this.out;\n\t}\n\t,ws: function() {\n\t\tif(this.need_ws) {\n\t\t\tthis.out.push(\" \");\n\t\t\tthis.need_ws = false;\n\t\t}\n\t}\n\t,nws: function() {\n\t\tthis.need_ws = true;\n\t}\n\t,renderInt: function(x) {\n\t\tthis.ws();\n\t\tthis.out.push(x);\n\t\tthis.nws();\n\t}\n\t,renderString: function(x) {\n\t\tthis.ws();\n\t\tif(x == \"\") {\n\t\t\tthis.out.push(\"\");\n\t\t\treturn;\n\t\t}\n\t\tthis.out.push(x);\n\t\tthis.nws();\n\t}\n\t,renderNest: function(x,nested) {\n\t\tvar offset = 0;\n\t\tvar parens = nested;\n\t\tif(x.length >= 1) {\n\t\t\tvar e = x[0];\n\t\t\tif(e == -1 || e == -2) {\n\t\t\t\toffset = 1;\n\t\t\t\tif(e == -1) {\n\t\t\t\t\tthis.ws();\n\t\t\t\t\tthis.out.push(\"|\");\n\t\t\t\t\tthis.nws();\n\t\t\t\t}\n\t\t\t\tif(e == -2) {\n\t\t\t\t\tthis.ws();\n\t\t\t\t\tthis.out.push(\"$\");\n\t\t\t\t}\n\t\t\t\tparens = false;\n\t\t\t}\n\t\t}\n\t\tif(parens) {\n\t\t\tthis.out.push(\"(\");\n\t\t}\n\t\tvar _g1 = offset;\n\t\tvar _g = x.length;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tvar e1 = x[i];\n\t\t\tif(typeof(e1) == \"string\") {\n\t\t\t\tthis.renderString(e1);\n\t\t\t}\n\t\t\tif(typeof(e1) == \"number\" && ((e1 | 0) === e1)) {\n\t\t\t\tthis.renderInt(e1);\n\t\t\t}\n\t\t\tif((e1 instanceof Array) && e1.__enum__ == null) {\n\t\t\t\tthis.ws();\n\t\t\t\tthis.renderNest(e1,true);\n\t\t\t\tthis.nws();\n\t\t\t}\n\t\t}\n\t\tif(parens) {\n\t\t\tthis.out.push(\")\");\n\t\t}\n\t}\n\t,__class__: cosmicos_ManuscriptStyle\n};\nvar cosmicos_Memory = $hx_exports[\"cosmicos\"][\"Memory\"] = function(parent,key,val) {\n\tif(key == null) {\n\t\tkey = -1;\n\t}\n\tthis.parent = parent;\n\tthis.key = key;\n\tthis.val = val;\n\tif(key == -1) {\n\t\tthis.block = new haxe_ds_StringMap();\n\t}\n};\ncosmicos_Memory.__name__ = [\"cosmicos\",\"Memory\"];\ncosmicos_Memory.prototype = {\n\tadd: function(key,val) {\n\t\tif(this.block != null) {\n\t\t\tvar _this = this.block;\n\t\t\tvar key1 = key;\n\t\t\tvar value = val;\n\t\t\tif(__map_reserved[key1] != null) {\n\t\t\t\t_this.setReserved(key1,value);\n\t\t\t} else {\n\t\t\t\t_this.h[key1] = value;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif(this.parent != null) {\n\t\t\tthis.parent.add(key,val);\n\t\t}\n\t}\n\t,get: function(key) {\n\t\tif(this.block == null) {\n\t\t\tif(this.key == key) {\n\t\t\t\treturn this.val;\n\t\t\t}\n\t\t\tif(this.parent == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn this.parent.get(key);\n\t\t}\n\t\tvar _this = this.block;\n\t\tvar key1 = key;\n\t\tvar result = __map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1];\n\t\tif(result == null && this.parent != null) {\n\t\t\tresult = this.parent.get(key);\n\t\t}\n\t\treturn result;\n\t}\n\t,__class__: cosmicos_Memory\n};\nvar cosmicos_NormalizeCodec = $hx_exports[\"cosmicos\"][\"NormalizeCodec\"] = function(vocab) {\n\tthis.vocab = vocab;\n};\ncosmicos_NormalizeCodec.__name__ = [\"cosmicos\",\"NormalizeCodec\"];\ncosmicos_NormalizeCodec.__interfaces__ = [cosmicos_Codec];\ncosmicos_NormalizeCodec.prototype = {\n\tencode: function(src) {\n\t\tcosmicos_Parse.encodeSymbols(src.content,this.vocab);\n\t\treturn true;\n\t}\n\t,decode: function(src) {\n\t\tsrc.content = this.recover(src.content,0);\n\t\treturn true;\n\t}\n\t,recover: function(v,level) {\n\t\tif((v instanceof Array) && v.__enum__ == null) {\n\t\t\tvar ei = v;\n\t\t\tvar _g1 = 0;\n\t\t\tvar _g = ei.length;\n\t\t\twhile(_g1 < _g) {\n\t\t\t\tvar i = _g1++;\n\t\t\t\tei[i] = this.recover(ei[i],level + 1);\n\t\t\t}\n\t\t\treturn ei;\n\t\t} else {\n\t\t\treturn cosmicos_Parse.recover(v);\n\t\t}\n\t}\n\t,__class__: cosmicos_NormalizeCodec\n};\nvar cosmicos_Parse = $hx_exports[\"cosmicos\"][\"Parse\"] = function() { };\ncosmicos_Parse.__name__ = [\"cosmicos\",\"Parse\"];\ncosmicos_Parse.removePipes = function(x,bracketlevel) {\n\tvar res = \"\";\n\tvar ch = x.charAt(x.length - 1);\n\tif(ch == \";\") {\n\t\tx = HxOverrides.substr(x,0,x.length - 1);\n\t}\n\tvar level = 0;\n\tvar slashes = 0;\n\tvar appendstr = \"\";\n\tvar substring = \"\";\n\tvar oldch = \"\";\n\tvar _g1 = 0;\n\tvar _g = x.length;\n\twhile(_g1 < _g) {\n\t\tvar i = _g1++;\n\t\tvar ch1 = x.charAt(i);\n\t\tvar delta_level = 0;\n\t\tappendstr = \"\";\n\t\tif(ch1 == \"(\") {\n\t\t\t++level;\n\t\t\tdelta_level = 1;\n\t\t}\n\t\tif(ch1 == \")\") {\n\t\t\t--level;\n\t\t\tdelta_level = -1;\n\t\t}\n\t\tif(level == 0) {\n\t\t\tif(ch1 == \"|\" || ch1 == \"/\") {\n\t\t\t\t++slashes;\n\t\t\t\tappendstr = \"(\";\n\t\t\t} else {\n\t\t\t\tappendstr = ch1;\n\t\t\t\tif((oldch == \"/\" || oldch == \"|\") && appendstr == \" \") {\n\t\t\t\t\tappendstr = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(delta_level == -1) {\n\t\t\t\tappendstr = \"(\" + cosmicos_Parse.removePipes(HxOverrides.substr(substring,1,substring.length),bracketlevel + 1) + \")\";\n\t\t\t\tsubstring = \"\";\n\t\t\t}\n\t\t} else {\n\t\t\tsubstring += ch1;\n\t\t}\n\t\tres += appendstr;\n\t\toldch = ch1;\n\t}\n\tvar _g11 = 0;\n\tvar _g2 = slashes;\n\twhile(_g11 < _g2) {\n\t\tvar i1 = _g11++;\n\t\tres += \")\";\n\t}\n\treturn res;\n};\ncosmicos_Parse.removeDollars = function(x) {\n\tvar terminalsymbols = \" ();\";\n\tvar founddollar = false;\n\tvar res = \"\";\n\tvar dollarstring = \"\";\n\tvar _g1 = 0;\n\tvar _g = x.length;\n\twhile(_g1 < _g) {\n\t\tvar i = _g1++;\n\t\tvar ch = x.charAt(i);\n\t\tif(ch == \"$\") {\n\t\t\tfounddollar = true;\n\t\t}\n\t\tif(founddollar) {\n\t\t\tif(terminalsymbols.indexOf(ch) != -1 || i == x.length - 1) {\n\t\t\t\tif(i != x.length - 1) {\n\t\t\t\t\tres += \"(\" + dollarstring + \")\";\n\t\t\t\t\tres += ch;\n\t\t\t\t} else {\n\t\t\t\t\tres += \"(\" + dollarstring + ch + \")\";\n\t\t\t\t}\n\t\t\t\tdollarstring = \"\";\n\t\t\t\tfounddollar = false;\n\t\t\t} else if(ch != \"$\") {\n\t\t\t\tdollarstring += ch;\n\t\t\t}\n\t\t} else {\n\t\t\tres += ch;\n\t\t}\n\t}\n\treturn res;\n};\ncosmicos_Parse.removeFlatteningSyntax = function(x) {\n\tvar res = cosmicos_Parse.removePipes(x,0);\n\tres = cosmicos_Parse.removeDollars(res);\n\treturn res;\n};\ncosmicos_Parse.stringToList = function(x,vocab) {\n\tvar ch = x.charAt(x.length - 1);\n\tif(ch == \";\") {\n\t\tx = HxOverrides.substr(x,0,x.length - 1);\n\t}\n\tvar level = 0;\n\tvar _g1 = 0;\n\tvar _g = x.length;\n\twhile(_g1 < _g) {\n\t\tvar i = _g1++;\n\t\tvar ch1 = x.charAt(i);\n\t\tif(ch1 == \"(\" || ch1 == \"{\") {\n\t\t\t++level;\n\t\t}\n\t\tif(ch1 == \")\" || ch1 == \"}\") {\n\t\t\t--level;\n\t\t}\n\t}\n\tif(level != 0) {\n\t\treturn null;\n\t}\n\tvar result = cosmicos_Parse.stringToListCore(x,vocab);\n\treturn result;\n};\ncosmicos_Parse.stringToListCore = function(x,vocab) {\n\tvar result = [];\n\tvar prefix = [];\n\tx = \" \" + x + \" )\";\n\tvar cache = \"\";\n\tvar level = 0;\n\tvar slashed = false;\n\tvar _g1 = 0;\n\tvar _g = x.length;\n\twhile(_g1 < _g) {\n\t\tvar i = _g1++;\n\t\tvar ch = x.charAt(i);\n\t\tif(ch == \"\\n\" || ch == \"\\r\" || ch == \";\" && level < 0) {\n\t\t\tch = \" \";\n\t\t}\n\t\tif(ch == \"(\" || ch == \"{\") {\n\t\t\t++level;\n\t\t\tif(level == 1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tif((ch == \"/\" || ch == \"|\") && level == 0) {\n\t\t\tlevel = 1;\n\t\t\tslashed = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif(ch == \")\" || ch == \"}\") {\n\t\t\t--level;\n\t\t\tif(level == 0) {\n\t\t\t\tvar r = cosmicos_Parse.stringToListCore(cache,vocab);\n\t\t\t\tresult.push(r);\n\t\t\t\tif(slashed) {\n\t\t\t\t\tresult[result.length - 1].unshift(-1);\n\t\t\t\t\tslashed = false;\n\t\t\t\t}\n\t\t\t\tcache = \"\";\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tif(ch == \";\") {\n\t\t\tif(level > (slashed ? 1 : 0)) {\n\t\t\t\tcache += ch;\n\t\t\t}\n\t\t} else if(ch != \" \" || level > 0) {\n\t\t\tcache += ch;\n\t\t}\n\t\tif(level == 0 && (ch == \" \" || ch == \";\") && cache.length > 0) {\n\t\t\tif(cache.charAt(0) == \"$\") {\n\t\t\t\tcache = HxOverrides.substr(cache,1,cache.length - 1);\n\t\t\t\tresult.push([-2,cache]);\n\t\t\t} else {\n\t\t\t\tresult.push(cache);\n\t\t\t}\n\t\t\tcache = \"\";\n\t\t}\n\t\tif(ch == \";\" && level == 1 && slashed) {\n\t\t\tvar r1 = cosmicos_Parse.stringToListCore(cache,vocab);\n\t\t\tresult.push(r1);\n\t\t\tif(slashed) {\n\t\t\t\tresult[result.length - 1].unshift(-1);\n\t\t\t\tslashed = false;\n\t\t\t}\n\t\t\tprefix.push(result);\n\t\t\tresult = [];\n\t\t\tcache = \"\";\n\t\t\tlevel = 0;\n\t\t\tcontinue;\n\t\t}\n\t\tif(ch == \";\" && level == 0) {\n\t\t\tprefix.push(result);\n\t\t\tresult = [];\n\t\t\tcache = \"\";\n\t\t\tcontinue;\n\t\t}\n\t}\n\tif(prefix.length > 0) {\n\t\tif(result.length == 0) {\n\t\t\tresult = prefix;\n\t\t} else {\n\t\t\tresult = prefix.concat(result);\n\t\t}\n\t}\n\treturn result;\n};\ncosmicos_Parse.looksLikeMutation = function(v) {\n\tif((v instanceof Array) && v.__enum__ == null) {\n\t\tvar e = v;\n\t\tvar _g1 = 0;\n\t\tvar _g = e.length;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tvar v1 = e[i];\n\t\t\tif(cosmicos_Parse.looksLikeMutation(v1)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} else if(v == \"define\" || v == \"set!\" || v == \"class\" || v == \"act\") {\n\t\treturn true;\n\t}\n\treturn false;\n};\ncosmicos_Parse.encodeSymbols = function(e,vocab,numeric) {\n\tif(numeric == null) {\n\t\tnumeric = false;\n\t}\n\tvar _g1 = 0;\n\tvar _g = e.length;\n\twhile(_g1 < _g) {\n\t\tvar i = _g1++;\n\t\tvar v = e[i];\n\t\tif((v instanceof Array) && v.__enum__ == null) {\n\t\t\tvar ei = v;\n\t\t\tcosmicos_Parse.encodeSymbols(ei,vocab,numeric);\n\t\t} else if(v == -1 || v == -2) {\n\t\t\tcontinue;\n\t\t} else {\n\t\t\tvar str = v;\n\t\t\tvar ch0 = str.charAt(0);\n\t\t\tif(ch0 < \"0\" || ch0 > \"9\") {\n\t\t\t\tif((ch0 == \":\" || ch0 == \".\") && str.length > 1) {\n\t\t\t\t\tv = new cosmicos_BitString(str);\n\t\t\t\t} else if(ch0 == \"U\" && new EReg(\"^U1*U$\",\"\").match(str)) {\n\t\t\t\t\tv = HxOverrides.substr(str,1,str.length - 2);\n\t\t\t\t} else if(ch0 == \"\\\"\") {\n\t\t\t\t\tvar len = str.length;\n\t\t\t\t\tvar u = cosmicos_BigInteger.ofInt(0);\n\t\t\t\t\tvar times = cosmicos_BigInteger.ofInt(256);\n\t\t\t\t\tvar _g3 = 1;\n\t\t\t\t\tvar _g2 = len - 1;\n\t\t\t\t\twhile(_g3 < _g2) {\n\t\t\t\t\t\tvar j = _g3++;\n\t\t\t\t\t\tu = u.mul(times);\n\t\t\t\t\t\tu = u.add(cosmicos_BigInteger.ofInt(HxOverrides.cca(str,j)));\n\t\t\t\t\t}\n\t\t\t\t\tv = u;\n\t\t\t\t} else {\n\t\t\t\t\tv = str;\n\t\t\t\t\tif(v == \"define\") {\n\t\t\t\t\t\tv = \"@\";\n\t\t\t\t\t}\n\t\t\t\t\tif(numeric) {\n\t\t\t\t\t\tv = vocab.getInt(v);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tv = vocab.get(v);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if(str.charAt(str.length - 1) == \"f\") {\n\t\t\t\tv = parseFloat(HxOverrides.substr(str,0,str.length - 1));\n\t\t\t} else {\n\t\t\t\tv = Std.parseInt(str);\n\t\t\t}\n\t\t\te[i] = v;\n\t\t}\n\t}\n};\ncosmicos_Parse.softCompare = function(x,y) {\n\tif(x.length != y.length) {\n\t\treturn false;\n\t}\n\tvar _g1 = 0;\n\tvar _g = x.length;\n\twhile(_g1 < _g) {\n\t\tvar i = _g1++;\n\t\tvar xi = x[i];\n\t\tvar yi = y[i];\n\t\tif(((xi instanceof Array) && xi.__enum__ == null) != ((yi instanceof Array) && yi.__enum__ == null)) {\n\t\t\tif((xi instanceof Array) && xi.__enum__ == null) {\n\t\t\t\tvar xia = xi;\n\t\t\t\tif(xia.length != 1) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(xia[0].asBigInteger().compare(cosmicos_Evaluate.bi(yi)) != 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar yia = yi;\n\t\t\t\tif(yia.length != 1) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif(yia[0].asBigInteger().compare(cosmicos_Evaluate.bi(xi)) != 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t} else if((xi instanceof Array) && xi.__enum__ == null) {\n\t\t\tvar xia1 = xi;\n\t\t\tvar yia1 = yi;\n\t\t\tif(!cosmicos_Parse.softCompare(xia1,yia1)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if(js_Boot.__instanceof(xi,cosmicos_BitString) && js_Boot.__instanceof(yi,cosmicos_BitString)) {\n\t\t\tif(xi.txt != yi.txt) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if(xi != yi) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\ncosmicos_Parse.removeSlashMarker = function(e) {\n\tvar _g1 = 0;\n\tvar _g = e.length;\n\twhile(_g1 < _g) {\n\t\tvar i = _g1++;\n\t\tvar v = e[i];\n\t\tif((v instanceof Array) && v.__enum__ == null) {\n\t\t\tvar ei = v;\n\t\t\tcosmicos_Parse.removeSlashMarker(ei);\n\t\t}\n\t}\n\tif(e.length > 0) {\n\t\tif(e[0] == -1 || e[0] == -2) {\n\t\t\te.shift();\n\t\t}\n\t}\n};\ncosmicos_Parse.textify = function(e,vocab) {\n\tvar txt = \"\";\n\tif((e instanceof Array) && e.__enum__ == null) {\n\t\tvar lst = e;\n\t\tvar len = lst.length;\n\t\ttxt += \"(\";\n\t\tvar _g1 = 0;\n\t\tvar _g = len;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tif(i > 0) {\n\t\t\t\ttxt += \" \";\n\t\t\t}\n\t\t\ttxt += cosmicos_Parse.textify(lst[i],vocab);\n\t\t}\n\t\ttxt += \")\";\n\t\treturn txt;\n\t}\n\tvar v = vocab.reverse(e);\n\tif(v == null) {\n\t\treturn \"\" + Std.string(e);\n\t}\n\treturn Std.string(e) + \"-\" + v;\n};\ncosmicos_Parse.codifyInner = function(e,level,vocab) {\n\tvar txt = \"\";\n\tvar need_paren = level > 0;\n\tvar first = 0;\n\tif(e.length > 0) {\n\t\tif(e[0] == -1) {\n\t\t\ttxt += \"123\";\n\t\t\tneed_paren = false;\n\t\t\t++first;\n\t\t} else if(e[0] == -2) {\n\t\t\ttxt += \"023\";\n\t\t\tneed_paren = false;\n\t\t\t++first;\n\t\t}\n\t}\n\tif(need_paren) {\n\t\ttxt += \"2\";\n\t}\n\tvar _g1 = first;\n\tvar _g = e.length;\n\twhile(_g1 < _g) {\n\t\tvar i = _g1++;\n\t\tvar v = e[i];\n\t\tif((v instanceof Array) && v.__enum__ == null) {\n\t\t\tvar ei = v;\n\t\t\ttxt += cosmicos_Parse.codifyInner(ei,level + 1,vocab);\n\t\t} else if(js_Boot.__instanceof(v,cosmicos_BitString)) {\n\t\t\tvar bs = v;\n\t\t\tvar str = bs.txt;\n\t\t\tvar len = str.length;\n\t\t\tif(str.length == 0 || str.charAt(0) == \"1\") {\n\t\t\t\ttxt += \"0\";\n\t\t\t\tvar _g3 = 0;\n\t\t\t\tvar _g2 = len;\n\t\t\t\twhile(_g3 < _g2) {\n\t\t\t\t\tvar j = _g3++;\n\t\t\t\t\ttxt += \"1\";\n\t\t\t\t}\n\t\t\t\ttxt += \"0\";\n\t\t\t} else {\n\t\t\t\tvar _g31 = 0;\n\t\t\t\tvar _g21 = len;\n\t\t\t\twhile(_g31 < _g21) {\n\t\t\t\t\tvar j1 = _g31++;\n\t\t\t\t\ttxt += str.charAt(j1) == \":\" ? \"1\" : \"0\";\n\t\t\t\t}\n\t\t\t}\n\t\t} else if(typeof(v) == \"string\") {\n\t\t\tvar str1 = v;\n\t\t\tvar len1 = str1.length;\n\t\t\tvar rem = 0;\n\t\t\tvar ch = str1.charAt(0);\n\t\t\tif(ch >= \"0\" && ch <= \"9\") {\n\t\t\t\trem = Std.parseInt(str1);\n\t\t\t} else {\n\t\t\t\trem = vocab.getBase(str1);\n\t\t\t}\n\t\t\tvar b = \"\";\n\t\t\twhile(true) {\n\t\t\t\tb = (rem % 2 != 0 ? \"1\" : \"0\") + b;\n\t\t\t\trem = rem / 2 | 0;\n\t\t\t\tif(!(rem != 0)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttxt += \"2\" + b + \"3\";\n\t\t} else if(js_Boot.__instanceof(v,cosmicos_BigInteger)) {\n\t\t\tvar b1 = \"\";\n\t\t\tvar rem1 = v;\n\t\t\tvar two = cosmicos_BigInteger.get_ONE().add(cosmicos_BigInteger.get_ONE());\n\t\t\twhile(true) {\n\t\t\t\tvar d = rem1.divideAndRemainder(two);\n\t\t\t\tb1 = d[1].toString() + b1;\n\t\t\t\trem1 = d[0];\n\t\t\t\tif(!(!rem1.eq(cosmicos_BigInteger.get_ZERO()))) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttxt += \"2\" + b1 + \"3\";\n\t\t} else {\n\t\t\tvar b2 = \"\";\n\t\t\tvar rem2 = v;\n\t\t\twhile(true) {\n\t\t\t\tb2 = (rem2 % 2 != 0 ? \"1\" : \"0\") + b2;\n\t\t\t\trem2 = rem2 / 2 | 0;\n\t\t\t\tif(!(rem2 != 0)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttxt += \"2\" + b2 + \"3\";\n\t\t}\n\t}\n\tif(need_paren) {\n\t\ttxt += \"3\";\n\t}\n\treturn txt;\n};\ncosmicos_Parse.codify = function(e,vocab) {\n\tvar txt = cosmicos_Parse.codifyInner(e,0,vocab);\n\ttxt += \"2233\";\n\treturn txt;\n};\ncosmicos_Parse.recoverList = function(e) {\n\tvar _g1 = 0;\n\tvar _g = e.length;\n\twhile(_g1 < _g) {\n\t\tvar i = _g1++;\n\t\tvar v = e[i];\n\t\tif((v instanceof Array) && v.__enum__ == null) {\n\t\t\tvar ei = v;\n\t\t\tcosmicos_Parse.recoverList(ei);\n\t\t} else {\n\t\t\te[i] = cosmicos_Parse.recover(v);\n\t\t}\n\t}\n};\ncosmicos_Parse.examine = function(e) {\n\tvar o = e[0];\n\tconsole.log(\"my type is \" + Type.getClassName(o == null ? null : js_Boot.getClass(o)));\n};\ncosmicos_Parse.recover = function(x) {\n\tif(typeof(x) == \"number\" && ((x | 0) === x)) {\n\t\treturn x;\n\t}\n\tif(js_Boot.__instanceof(x,cosmicos_BigInteger)) {\n\t\tvar txt = \"\";\n\t\tvar mod = cosmicos_BigInteger.ofInt(256);\n\t\twhile(x.compare(cosmicos_BigInteger.get_ZERO()) > 0) {\n\t\t\tvar rem = x.mod(mod);\n\t\t\ttxt = String.fromCharCode(rem.toInt()) + txt;\n\t\t\tx = x.div(mod);\n\t\t}\n\t\treturn \"\\\"\" + txt + \"\\\"\";\n\t}\n\tif(js_Boot.__instanceof(x,cosmicos_BitString)) {\n\t\tvar bs = x;\n\t\treturn bs.txt;\n\t}\n\tvar txt1 = \"\";\n\tif((x instanceof Array) && x.__enum__ == null) {\n\t\tvar lst = x;\n\t\tvar len = lst.length;\n\t\ttxt1 += \"(vector \";\n\t\tvar _g1 = 0;\n\t\tvar _g = len;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tif(i > 0) {\n\t\t\t\ttxt1 += \" \";\n\t\t\t}\n\t\t\ttxt1 += Std.string(cosmicos_Parse.recover(lst[i]));\n\t\t}\n\t\ttxt1 += \")\";\n\t\treturn txt1;\n\t}\n\tif(typeof(x) == \"string\") {\n\t\treturn x;\n\t}\n\treturn \"???\";\n};\nvar cosmicos_ParseCodec = $hx_exports[\"cosmicos\"][\"ParseCodec\"] = function(vocab,top) {\n\tif(top == null) {\n\t\ttop = true;\n\t}\n\tthis.vocab = vocab;\n\tthis.top = top;\n};\ncosmicos_ParseCodec.__name__ = [\"cosmicos\",\"ParseCodec\"];\ncosmicos_ParseCodec.__interfaces__ = [cosmicos_Codec];\ncosmicos_ParseCodec.prototype = {\n\tencode: function(src) {\n\t\tvar txt = src.content[0];\n\t\tsrc.content = cosmicos_Parse.stringToList(txt,this.vocab);\n\t\treturn true;\n\t}\n\t,decode: function(src) {\n\t\tif(this.top) {\n\t\t\tsrc.content = [this.flatten(src.content,0) + \";\"];\n\t\t} else {\n\t\t\tsrc.content = [this.flatten(src.content,1)];\n\t\t}\n\t\treturn true;\n\t}\n\t,flatten: function(v,level) {\n\t\tif((v instanceof Array) && v.__enum__ == null) {\n\t\t\tvar ei = v;\n\t\t\tvar txts = [];\n\t\t\tvar len = ei.length;\n\t\t\tvar has_flattener = false;\n\t\t\tvar flattener = 0;\n\t\t\tvar _g1 = 0;\n\t\t\tvar _g = len;\n\t\t\twhile(_g1 < _g) {\n\t\t\t\tvar i = _g1++;\n\t\t\t\tif(i == 0 && ei[i] < 0) {\n\t\t\t\t\thas_flattener = true;\n\t\t\t\t\tflattener = ei[i];\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\ttxts.push(this.flatten(ei[i],level + 1));\n\t\t\t}\n\t\t\tvar result = txts.join(\" \");\n\t\t\tif(has_flattener) {\n\t\t\t\tif(flattener == -2) {\n\t\t\t\t\tresult = \"$\" + result;\n\t\t\t\t} else {\n\t\t\t\t\tresult = \"| \" + result;\n\t\t\t\t}\n\t\t\t} else if(level > 0) {\n\t\t\t\tresult = \"(\" + result + \")\";\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\treturn Std.string(v);\n\t}\n\t,__class__: cosmicos_ParseCodec\n};\nvar cosmicos_PreprocessCodec = $hx_exports[\"cosmicos\"][\"PreprocessCodec\"] = function(state) {\n\tthis.config = state.getConfig();\n};\ncosmicos_PreprocessCodec.__name__ = [\"cosmicos\",\"PreprocessCodec\"];\ncosmicos_PreprocessCodec.__interfaces__ = [cosmicos_Codec];\ncosmicos_PreprocessCodec.prototype = {\n\tencode: function(src) {\n\t\tif(!this.config.useFlattener()) {\n\t\t\tsrc.content[0] = cosmicos_Parse.removeFlatteningSyntax(src.content[0]);\n\t\t}\n\t\treturn true;\n\t}\n\t,decode: function(src) {\n\t\treturn true;\n\t}\n\t,__class__: cosmicos_PreprocessCodec\n};\nvar cosmicos_Sound = $hx_exports[\"cosmicos\"][\"Sound\"] = function() {\n\tthis.units = 0;\n};\ncosmicos_Sound.__name__ = [\"cosmicos\",\"Sound\"];\ncosmicos_Sound.main = function() {\n};\ncosmicos_Sound.prototype = {\n\tshow: function(x,n) {\n\t\tvar _g1 = 0;\n\t\tvar _g = n;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tvar v = x % 256;\n\t\t\tthis.txt.b += String.fromCharCode(v);\n\t\t\tx >>= 8;\n\t\t}\n\t}\n\t,show_header: function(sample_len) {\n\t\tthis.txt.b += HxOverrides.substr(\"RIFF\",0,null);\n\t\tthis.show(36 + sample_len,4);\n\t\tthis.txt.b += HxOverrides.substr(\"WAVE\",0,null);\n\t\tthis.txt.b += HxOverrides.substr(\"fmt \",0,null);\n\t\tthis.show(16,4);\n\t\tthis.show(1,2);\n\t\tthis.show(1,2);\n\t\tthis.show(16000,4);\n\t\tthis.show(16000,4);\n\t\tthis.show(1,2);\n\t\tthis.show(8,2);\n\t\tthis.txt.b += HxOverrides.substr(\"data\",0,null);\n\t\tthis.show(sample_len,4);\n\t}\n\t,render: function(text,header) {\n\t\tvar unit_len = 4000;\n\t\tvar char_len = text.length;\n\t\tvar variation = 0.5;\n\t\tvar qraise = Math.sqrt(Math.sqrt(2));\n\t\tvar qminor = 2;\n\t\tvar base = 2;\n\t\tif(header) {\n\t\t\tvar sample_len = unit_len * (this.units > char_len ? this.units : char_len);\n\t\t\tthis.show_header(sample_len);\n\t\t}\n\t\tvar v = 0;\n\t\tvar n_prev = 0;\n\t\tvar n2_prev = -1;\n\t\tvar k_prev = 4;\n\t\tvar _g1 = 0;\n\t\tvar _g = char_len;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tvar k = HxOverrides.cca(text,i) - 48;\n\t\t\tvar n = k;\n\t\t\tvar n2 = -1;\n\t\t\tvar chord = 0;\n\t\t\tif(k == 2) {\n\t\t\t\tbase *= qraise;\n\t\t\t\tn = base;\n\t\t\t\tchord = 1;\n\t\t\t}\n\t\t\tif(k == 3) {\n\t\t\t\tbase /= qraise;\n\t\t\t\tn = base;\n\t\t\t\tchord = 1;\n\t\t\t}\n\t\t\tif(k == 0) {\n\t\t\t\tn2 = base / qminor;\n\t\t\t\tn = base;\n\t\t\t}\n\t\t\tif(k == 1) {\n\t\t\t\tn2 = base * qminor;\n\t\t\t\tn = base;\n\t\t\t}\n\t\t\tvar _g3 = 0;\n\t\t\tvar _g2 = unit_len;\n\t\t\twhile(_g3 < _g2) {\n\t\t\t\tvar j = _g3++;\n\t\t\t\tvar q = 0;\n\t\t\t\tvar factor = j / 80.0;\n\t\t\t\tvar tweak = 1 - Math.abs(j - unit_len / 2) / (unit_len / 2);\n\t\t\t\tif(factor > 1) {\n\t\t\t\t\tfactor = 1;\n\t\t\t\t}\n\t\t\t\tif(k != 4 && k != 5) {\n\t\t\t\t\tq += factor * 100 * Math.sin(n * v);\n\t\t\t\t\tif(n2 >= 0) {\n\t\t\t\t\t\tq += factor * 20 * Math.sin(n2 * v);\n\t\t\t\t\t}\n\t\t\t\t\tvar tmp = chord != 0;\n\t\t\t\t}\n\t\t\t\tif(k_prev != 4 && k_prev != 5) {\n\t\t\t\t\tif(i != 0) {\n\t\t\t\t\t\tq += (1 - factor) * 100 * Math.sin(n_prev * v);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(n2_prev >= 0) {\n\t\t\t\t\tq += (1 - factor) * 20 * Math.sin(n2_prev * v);\n\t\t\t\t}\n\t\t\t\tif(k == 4 || k == 5) {\n\t\t\t\t\tif(k == 4) {\n\t\t\t\t\t\tq += tweak * factor * 50 * Math.sin(base * v);\n\t\t\t\t\t\tq += tweak * factor * 25 * Math.sin(2 * base * v);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tq += tweak * factor * 50 * Math.sin(base * v);\n\t\t\t\t\t\tq += tweak * factor * 25 * Math.sin(2 * base * v);\n\t\t\t\t\t\tq += tweak * factor * 12 * Math.sin(4 * base * v);\n\t\t\t\t\t\tq += tweak * factor * 12 * Math.sin(8 * base * v);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.show(128 + (q | 0),1);\n\t\t\t\tv += 0.1;\n\t\t\t}\n\t\t\tn_prev = n;\n\t\t\tk_prev = k;\n\t\t\tn2_prev = n2;\n\t\t}\n\t}\n\t,textToWav: function(text,content_mode) {\n\t\tthis.txt = new StringBuf();\n\t\tif(content_mode) {\n\t\t\tthis.txt.b += HxOverrides.substr(\"Content-Type: audio/x-wav\",0,null);\n\t\t\tthis.txt.b += \"\\n\";\n\t\t\tthis.txt.b += \"\\n\";\n\t\t}\n\t\tthis.render(text,true);\n\t\tvar result = this.txt.b;\n\t\treturn result;\n\t}\n\t,addText: function(text) {\n\t\tthis.render(text,false);\n\t}\n\t,practiceText: function(text) {\n\t\tthis.units += text.length;\n\t}\n\t,drainWav: function() {\n\t\tvar result = this.txt.b;\n\t\tthis.txt = new StringBuf();\n\t\treturn result;\n\t}\n\t,textToWavUrl: function(text) {\n\t\tthis.txt = new StringBuf();\n\t\tthis.render(text,true);\n\t\tvar enc = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"));\n\t\tvar str = this.txt.b;\n\t\tvar b = new haxe_io_Bytes(new ArrayBuffer(str.length));\n\t\tvar _g1 = 0;\n\t\tvar _g = str.length;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tvar v = str.charCodeAt(i);\n\t\t\tb.b[i] = v & 255;\n\t\t}\n\t\treturn \"data:audio/wav;base64,\" + enc.encodeBytes(b).toString();\n\t}\n\t,__class__: cosmicos_Sound\n};\nvar cosmicos_State = $hx_exports[\"cosmicos\"][\"State\"] = function(config) {\n\tthis.config = config;\n\tthis.vocab = null;\n\tthis.mem = null;\n};\ncosmicos_State.__name__ = [\"cosmicos\",\"State\"];\ncosmicos_State.prototype = {\n\tsetConfig: function(config) {\n\t\tthis.config = config;\n\t}\n\t,useIntVocab: function() {\n\t\tthis.vocab = new cosmicos_Vocab(true);\n\t}\n\t,getVocab: function() {\n\t\tif(this.vocab == null) {\n\t\t\tthis.vocab = new cosmicos_Vocab();\n\t\t}\n\t\treturn this.vocab;\n\t}\n\t,getMemory: function() {\n\t\tif(this.mem == null) {\n\t\t\tthis.mem = new cosmicos_Memory(null);\n\t\t}\n\t\treturn this.mem;\n\t}\n\t,getConfig: function() {\n\t\tif(this.config == null) {\n\t\t\tthis.config = new cosmicos_Config();\n\t\t}\n\t\treturn this.config;\n\t}\n\t,__class__: cosmicos_State\n};\nvar cosmicos_Statement = $hx_exports[\"cosmicos\"][\"Statement\"] = function(txt) {\n\tif(txt != null) {\n\t\tthis.content = [txt];\n\t} else {\n\t\tthis.content = null;\n\t}\n};\ncosmicos_Statement.__name__ = [\"cosmicos\",\"Statement\"];\ncosmicos_Statement.prototype = {\n\tcopy: function() {\n\t\tvar result = new cosmicos_Statement();\n\t\tif(this.content != null) {\n\t\t\tresult.content = this.copyArray(this.content);\n\t\t}\n\t\treturn result;\n\t}\n\t,copyArray: function(e) {\n\t\tvar result = [];\n\t\tvar _g1 = 0;\n\t\tvar _g = e.length;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tvar ei = e[i];\n\t\t\tif((ei instanceof Array) && ei.__enum__ == null) {\n\t\t\t\tresult.push(this.copyArray(ei));\n\t\t\t} else {\n\t\t\t\tresult.push(ei);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t,__class__: cosmicos_Statement\n};\nvar cosmicos_TranslateCodec = $hx_exports[\"cosmicos\"][\"TranslateCodec\"] = function(state) {\n\tthis.state = state;\n};\ncosmicos_TranslateCodec.__name__ = [\"cosmicos\",\"TranslateCodec\"];\ncosmicos_TranslateCodec.__interfaces__ = [cosmicos_Codec];\ncosmicos_TranslateCodec.prototype = {\n\tencode: function(src) {\n\t\tsrc.content = cosmicos_Cons.consify(src.content);\n\t\tvar vocab = this.state.getVocab();\n\t\tif(vocab.exists(\"translate\")) {\n\t\t\tvar mem = this.state.getMemory();\n\t\t\tvar translate = mem.get(vocab.get(\"translate\"));\n\t\t\tif(translate != null) {\n\t\t\t\tsrc.content = translate(src.content);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t,decode: function(src) {\n\t\tsrc.content = cosmicos_Cons.deconsify(src.content);\n\t\tconsole.log(\"Translated\");\n\t\tconsole.log(src.content);\n\t\treturn true;\n\t}\n\t,__class__: cosmicos_TranslateCodec\n};\nvar cosmicos_UnflattenCodec = $hx_exports[\"cosmicos\"][\"UnflattenCodec\"] = function() {\n};\ncosmicos_UnflattenCodec.__name__ = [\"cosmicos\",\"UnflattenCodec\"];\ncosmicos_UnflattenCodec.__interfaces__ = [cosmicos_Codec];\ncosmicos_UnflattenCodec.prototype = {\n\tencode: function(src) {\n\t\tcosmicos_Parse.removeSlashMarker(src.content);\n\t\treturn true;\n\t}\n\t,decode: function(src) {\n\t\tthis.unflatten(src.content,0);\n\t\treturn true;\n\t}\n\t,unflatten: function(v,level) {\n\t\tif((v instanceof Array) && v.__enum__ == null) {\n\t\t\tvar ei = v;\n\t\t\tvar len = ei.length;\n\t\t\tvar has_flattener = false;\n\t\t\tvar _g1 = 0;\n\t\t\tvar _g = len;\n\t\t\twhile(_g1 < _g) {\n\t\t\t\tvar i = _g1++;\n\t\t\t\tthis.unflatten(ei[i],level + 1);\n\t\t\t\tif(i == len - 1 && ((ei[i] instanceof Array) && ei[i].__enum__ == null)) {\n\t\t\t\t\tvar etail = ei[i];\n\t\t\t\t\tif(etail.length > 0) {\n\t\t\t\t\t\tif(etail[0] != -1 && etail[0] != -2) {\n\t\t\t\t\t\t\tetail.splice(0,0,-1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(len == 1) {\n\t\t\t\tei.splice(0,0,-2);\n\t\t\t}\n\t\t}\n\t}\n\t,__class__: cosmicos_UnflattenCodec\n};\nvar cosmicos_Vocab = $hx_exports[\"cosmicos\"][\"Vocab\"] = function(useInt) {\n\tif(useInt == null) {\n\t\tuseInt = false;\n\t}\n\tthis.clear();\n\tthis.useInt = useInt;\n};\ncosmicos_Vocab.__name__ = [\"cosmicos\",\"Vocab\"];\ncosmicos_Vocab.prototype = {\n\tclear: function() {\n\t\tthis.nameToCode = new haxe_ds_StringMap();\n\t\tthis.codeToName = new haxe_ds_IntMap();\n\t\tthis.nameToMeta = new haxe_ds_StringMap();\n\t\tthis.used = new haxe_ds_StringMap();\n\t\tthis.topCode = 0;\n\t}\n\t,getBase: function(name) {\n\t\tif(name == \"define\") {\n\t\t\tname = \"@\";\n\t\t}\n\t\tvar _this = this.nameToCode;\n\t\tif(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {\n\t\t\twhile(this.codeToName.h.hasOwnProperty(this.topCode)) this.topCode++;\n\t\t\tvar value = this.topCode;\n\t\t\tvar _this1 = this.nameToCode;\n\t\t\tif(__map_reserved[name] != null) {\n\t\t\t\t_this1.setReserved(name,value);\n\t\t\t} else {\n\t\t\t\t_this1.h[name] = value;\n\t\t\t}\n\t\t\tthis.codeToName.h[this.topCode] = name;\n\t\t\tthis.topCode++;\n\t\t}\n\t\tvar _this2 = this.nameToCode;\n\t\tif(__map_reserved[name] != null) {\n\t\t\treturn _this2.getReserved(name);\n\t\t} else {\n\t\t\treturn _this2.h[name];\n\t\t}\n\t}\n\t,'use': function(name) {\n\t\tvar _this = this.used;\n\t\tif(__map_reserved[name] != null) {\n\t\t\t_this.setReserved(name,1);\n\t\t} else {\n\t\t\t_this.h[name] = 1;\n\t\t}\n\t}\n\t,get: function(name) {\n\t\tif(name == \"define\") {\n\t\t\tname = \"@\";\n\t\t}\n\t\tvar code = this.getBase(name);\n\t\tif(this.useInt) {\n\t\t\treturn code;\n\t\t} else {\n\t\t\treturn name;\n\t\t}\n\t}\n\t,getInt: function(name) {\n\t\tif(name == \"define\") {\n\t\t\tname = \"@\";\n\t\t}\n\t\tvar code = this.getBase(name);\n\t\treturn code;\n\t}\n\t,exists: function(name) {\n\t\tvar _this = this.nameToCode;\n\t\tif(__map_reserved[name] != null) {\n\t\t\treturn _this.existsReserved(name);\n\t\t} else {\n\t\t\treturn _this.h.hasOwnProperty(name);\n\t\t}\n\t}\n\t,check: function(name,id) {\n\t\tvar _this = this.nameToCode;\n\t\tif(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {\n\t\t\tvar nid = this.getBase(name);\n\t\t\tif(id != nid) {\n\t\t\t\tthrow new js__$Boot_HaxeError(\"id for \" + name + \" is unexpected (\" + nid + \" vs \" + id + \")\");\n\t\t\t}\n\t\t} else if(this.codeToName.h.hasOwnProperty(id)) {\n\t\t\tthrow new js__$Boot_HaxeError(\"problem with \" + name);\n\t\t} else {\n\t\t\tthis.set(name,id);\n\t\t}\n\t\treturn this.get(name);\n\t}\n\t,set: function(name,id) {\n\t\tthis.codeToName.h[id] = name;\n\t\tvar _this = this.nameToCode;\n\t\tif(__map_reserved[name] != null) {\n\t\t\t_this.setReserved(name,id);\n\t\t} else {\n\t\t\t_this.h[name] = id;\n\t\t}\n\t\treturn this.get(name);\n\t}\n\t,setMeta: function(name,meta) {\n\t\tvar _this = this.nameToMeta;\n\t\tif(__map_reserved[name] != null) {\n\t\t\t_this.setReserved(name,meta);\n\t\t} else {\n\t\t\t_this.h[name] = meta;\n\t\t}\n\t}\n\t,getMeta: function(name) {\n\t\tvar _this = this.nameToMeta;\n\t\tif(__map_reserved[name] != null) {\n\t\t\treturn _this.getReserved(name);\n\t\t} else {\n\t\t\treturn _this.h[name];\n\t\t}\n\t}\n\t,reverse: function(id) {\n\t\treturn this.codeToName.h[id];\n\t}\n\t,getNames: function(decorated) {\n\t\tif(decorated == null) {\n\t\t\tdecorated = false;\n\t\t}\n\t\tif(!decorated) {\n\t\t\tvar _g = [];\n\t\t\tvar i = this.nameToCode.keys();\n\t\t\twhile(i.hasNext()) {\n\t\t\t\tvar i1 = i.next();\n\t\t\t\t_g.push(i1);\n\t\t\t}\n\t\t\treturn _g;\n\t\t}\n\t\tvar result = [];\n\t\tvar i2 = this.nameToCode.keys();\n\t\twhile(i2.hasNext()) {\n\t\t\tvar i3 = i2.next();\n\t\t\tvar _this = this.used;\n\t\t\tif((__map_reserved[i3] != null ? _this.getReserved(i3) : _this.h[i3]) != null) {\n\t\t\t\tvar _this1 = this.nameToCode;\n\t\t\t\tresult.push(i3 + \" = \" + (__map_reserved[i3] != null ? _this1.getReserved(i3) : _this1.h[i3]));\n\t\t\t} else {\n\t\t\t\tvar _this2 = this.nameToCode;\n\t\t\t\tresult.push(\"((\" + i3 + \" = \" + (__map_reserved[i3] != null ? _this2.getReserved(i3) : _this2.h[i3]) + \"))\");\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t,__class__: cosmicos_Vocab\n};\nvar cosmicos_VocabMeta = $hx_exports[\"cosmicos\"][\"VocabMeta\"] = function(description,example) {\n\tthis.description = description;\n\tthis.example = example;\n};\ncosmicos_VocabMeta.__name__ = [\"cosmicos\",\"VocabMeta\"];\ncosmicos_VocabMeta.prototype = {\n\t__class__: cosmicos_VocabMeta\n};\nvar haxe_IMap = function() { };\nhaxe_IMap.__name__ = [\"haxe\",\"IMap\"];\nvar haxe_crypto_BaseCode = function(base) {\n\tvar len = base.length;\n\tvar nbits = 1;\n\twhile(len > 1 << nbits) ++nbits;\n\tif(nbits > 8 || len != 1 << nbits) {\n\t\tthrow new js__$Boot_HaxeError(\"BaseCode : base length must be a power of two.\");\n\t}\n\tthis.base = base;\n\tthis.nbits = nbits;\n};\nhaxe_crypto_BaseCode.__name__ = [\"haxe\",\"crypto\",\"BaseCode\"];\nhaxe_crypto_BaseCode.prototype = {\n\tencodeBytes: function(b) {\n\t\tvar nbits = this.nbits;\n\t\tvar base = this.base;\n\t\tvar size = b.length * 8 / nbits | 0;\n\t\tvar out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));\n\t\tvar buf = 0;\n\t\tvar curbits = 0;\n\t\tvar mask = (1 << nbits) - 1;\n\t\tvar pin = 0;\n\t\tvar pout = 0;\n\t\twhile(pout < size) {\n\t\t\twhile(curbits < nbits) {\n\t\t\t\tcurbits += 8;\n\t\t\t\tbuf <<= 8;\n\t\t\t\tbuf |= b.b[pin++];\n\t\t\t}\n\t\t\tcurbits -= nbits;\n\t\t\tout.b[pout++] = base.b[buf >> curbits & mask] & 255;\n\t\t}\n\t\tif(curbits > 0) {\n\t\t\tout.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;\n\t\t}\n\t\treturn out;\n\t}\n\t,__class__: haxe_crypto_BaseCode\n};\nvar haxe_ds_IntMap = function() {\n\tthis.h = { };\n};\nhaxe_ds_IntMap.__name__ = [\"haxe\",\"ds\",\"IntMap\"];\nhaxe_ds_IntMap.__interfaces__ = [haxe_IMap];\nhaxe_ds_IntMap.prototype = {\n\t__class__: haxe_ds_IntMap\n};\nvar haxe_ds_StringMap = function() {\n\tthis.h = { };\n};\nhaxe_ds_StringMap.__name__ = [\"haxe\",\"ds\",\"StringMap\"];\nhaxe_ds_StringMap.__interfaces__ = [haxe_IMap];\nhaxe_ds_StringMap.prototype = {\n\tsetReserved: function(key,value) {\n\t\tif(this.rh == null) {\n\t\t\tthis.rh = { };\n\t\t}\n\t\tthis.rh[\"$\" + key] = value;\n\t}\n\t,getReserved: function(key) {\n\t\tif(this.rh == null) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn this.rh[\"$\" + key];\n\t\t}\n\t}\n\t,existsReserved: function(key) {\n\t\tif(this.rh == null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.rh.hasOwnProperty(\"$\" + key);\n\t}\n\t,keys: function() {\n\t\treturn HxOverrides.iter(this.arrayKeys());\n\t}\n\t,arrayKeys: function() {\n\t\tvar out = [];\n\t\tfor( var key in this.h ) {\n\t\tif(this.h.hasOwnProperty(key)) {\n\t\t\tout.push(key);\n\t\t}\n\t\t}\n\t\tif(this.rh != null) {\n\t\t\tfor( var key in this.rh ) {\n\t\t\tif(key.charCodeAt(0) == 36) {\n\t\t\t\tout.push(key.substr(1));\n\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\t,__class__: haxe_ds_StringMap\n};\nvar haxe_io_Bytes = function(data) {\n\tthis.length = data.byteLength;\n\tthis.b = new Uint8Array(data);\n\tthis.b.bufferValue = data;\n\tdata.hxBytes = this;\n\tdata.bytes = this.b;\n};\nhaxe_io_Bytes.__name__ = [\"haxe\",\"io\",\"Bytes\"];\nhaxe_io_Bytes.ofString = function(s) {\n\tvar a = [];\n\tvar i = 0;\n\twhile(i < s.length) {\n\t\tvar c = s.charCodeAt(i++);\n\t\tif(55296 <= c && c <= 56319) {\n\t\t\tc = c - 55232 << 10 | s.charCodeAt(i++) & 1023;\n\t\t}\n\t\tif(c <= 127) {\n\t\t\ta.push(c);\n\t\t} else if(c <= 2047) {\n\t\t\ta.push(192 | c >> 6);\n\t\t\ta.push(128 | c & 63);\n\t\t} else if(c <= 65535) {\n\t\t\ta.push(224 | c >> 12);\n\t\t\ta.push(128 | c >> 6 & 63);\n\t\t\ta.push(128 | c & 63);\n\t\t} else {\n\t\t\ta.push(240 | c >> 18);\n\t\t\ta.push(128 | c >> 12 & 63);\n\t\t\ta.push(128 | c >> 6 & 63);\n\t\t\ta.push(128 | c & 63);\n\t\t}\n\t}\n\treturn new haxe_io_Bytes(new Uint8Array(a).buffer);\n};\nhaxe_io_Bytes.prototype = {\n\tgetString: function(pos,len) {\n\t\tif(pos < 0 || len < 0 || pos + len > this.length) {\n\t\t\tthrow new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);\n\t\t}\n\t\tvar s = \"\";\n\t\tvar b = this.b;\n\t\tvar fcc = String.fromCharCode;\n\t\tvar i = pos;\n\t\tvar max = pos + len;\n\t\twhile(i < max) {\n\t\t\tvar c = b[i++];\n\t\t\tif(c < 128) {\n\t\t\t\tif(c == 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ts += fcc(c);\n\t\t\t} else if(c < 224) {\n\t\t\t\ts += fcc((c & 63) << 6 | b[i++] & 127);\n\t\t\t} else if(c < 240) {\n\t\t\t\tvar c2 = b[i++];\n\t\t\t\ts += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);\n\t\t\t} else {\n\t\t\t\tvar c21 = b[i++];\n\t\t\t\tvar c3 = b[i++];\n\t\t\t\tvar u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;\n\t\t\t\ts += fcc((u >> 10) + 55232);\n\t\t\t\ts += fcc(u & 1023 | 56320);\n\t\t\t}\n\t\t}\n\t\treturn s;\n\t}\n\t,toString: function() {\n\t\treturn this.getString(0,this.length);\n\t}\n\t,__class__: haxe_io_Bytes\n};\nvar haxe_io_BytesBuffer = function() {\n\tthis.b = [];\n};\nhaxe_io_BytesBuffer.__name__ = [\"haxe\",\"io\",\"BytesBuffer\"];\nhaxe_io_BytesBuffer.prototype = {\n\tgetBytes: function() {\n\t\tvar bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);\n\t\tthis.b = null;\n\t\treturn bytes;\n\t}\n\t,__class__: haxe_io_BytesBuffer\n};\nvar haxe_io_Error = { __ename__ : true, __constructs__ : [\"Blocked\",\"Overflow\",\"OutsideBounds\",\"Custom\"] };\nhaxe_io_Error.Blocked = [\"Blocked\",0];\nhaxe_io_Error.Blocked.toString = $estr;\nhaxe_io_Error.Blocked.__enum__ = haxe_io_Error;\nhaxe_io_Error.Overflow = [\"Overflow\",1];\nhaxe_io_Error.Overflow.toString = $estr;\nhaxe_io_Error.Overflow.__enum__ = haxe_io_Error;\nhaxe_io_Error.OutsideBounds = [\"OutsideBounds\",2];\nhaxe_io_Error.OutsideBounds.toString = $estr;\nhaxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;\nhaxe_io_Error.Custom = function(e) { var $x = [\"Custom\",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };\nvar js__$Boot_HaxeError = function(val) {\n\tError.call(this);\n\tthis.val = val;\n\tthis.message = String(val);\n\tif(Error.captureStackTrace) {\n\t\tError.captureStackTrace(this,js__$Boot_HaxeError);\n\t}\n};\njs__$Boot_HaxeError.__name__ = [\"js\",\"_Boot\",\"HaxeError\"];\njs__$Boot_HaxeError.wrap = function(val) {\n\tif((val instanceof Error)) {\n\t\treturn val;\n\t} else {\n\t\treturn new js__$Boot_HaxeError(val);\n\t}\n};\njs__$Boot_HaxeError.__super__ = Error;\njs__$Boot_HaxeError.prototype = $extend(Error.prototype,{\n\t__class__: js__$Boot_HaxeError\n});\nvar js_Boot = function() { };\njs_Boot.__name__ = [\"js\",\"Boot\"];\njs_Boot.getClass = function(o) {\n\tif((o instanceof Array) && o.__enum__ == null) {\n\t\treturn Array;\n\t} else {\n\t\tvar cl = o.__class__;\n\t\tif(cl != null) {\n\t\t\treturn cl;\n\t\t}\n\t\tvar name = js_Boot.__nativeClassName(o);\n\t\tif(name != null) {\n\t\t\treturn js_Boot.__resolveNativeClass(name);\n\t\t}\n\t\treturn null;\n\t}\n};\njs_Boot.__string_rec = function(o,s) {\n\tif(o == null) {\n\t\treturn \"null\";\n\t}\n\tif(s.length >= 5) {\n\t\treturn \"<...>\";\n\t}\n\tvar t = typeof(o);\n\tif(t == \"function\" && (o.__name__ || o.__ename__)) {\n\t\tt = \"object\";\n\t}\n\tswitch(t) {\n\tcase \"function\":\n\t\treturn \"<function>\";\n\tcase \"object\":\n\t\tif(o instanceof Array) {\n\t\t\tif(o.__enum__) {\n\t\t\t\tif(o.length == 2) {\n\t\t\t\t\treturn o[0];\n\t\t\t\t}\n\t\t\t\tvar str = o[0] + \"(\";\n\t\t\t\ts += \"\\t\";\n\t\t\t\tvar _g1 = 2;\n\t\t\t\tvar _g = o.length;\n\t\t\t\twhile(_g1 < _g) {\n\t\t\t\t\tvar i = _g1++;\n\t\t\t\t\tif(i != 2) {\n\t\t\t\t\t\tstr += \",\" + js_Boot.__string_rec(o[i],s);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstr += js_Boot.__string_rec(o[i],s);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn str + \")\";\n\t\t\t}\n\t\t\tvar l = o.length;\n\t\t\tvar i1;\n\t\t\tvar str1 = \"[\";\n\t\t\ts += \"\\t\";\n\t\t\tvar _g11 = 0;\n\t\t\tvar _g2 = l;\n\t\t\twhile(_g11 < _g2) {\n\t\t\t\tvar i2 = _g11++;\n\t\t\t\tstr1 += (i2 > 0 ? \",\" : \"\") + js_Boot.__string_rec(o[i2],s);\n\t\t\t}\n\t\t\tstr1 += \"]\";\n\t\t\treturn str1;\n\t\t}\n\t\tvar tostr;\n\t\ttry {\n\t\t\ttostr = o.toString;\n\t\t} catch( e ) {\n\t\t\treturn \"???\";\n\t\t}\n\t\tif(tostr != null && tostr != Object.toString && typeof(tostr) == \"function\") {\n\t\t\tvar s2 = o.toString();\n\t\t\tif(s2 != \"[object Object]\") {\n\t\t\t\treturn s2;\n\t\t\t}\n\t\t}\n\t\tvar k = null;\n\t\tvar str2 = \"{\\n\";\n\t\ts += \"\\t\";\n\t\tvar hasp = o.hasOwnProperty != null;\n\t\tfor( var k in o ) {\n\t\tif(hasp && !o.hasOwnProperty(k)) {\n\t\t\tcontinue;\n\t\t}\n\t\tif(k == \"prototype\" || k == \"__class__\" || k == \"__super__\" || k == \"__interfaces__\" || k == \"__properties__\") {\n\t\t\tcontinue;\n\t\t}\n\t\tif(str2.length != 2) {\n\t\t\tstr2 += \", \\n\";\n\t\t}\n\t\tstr2 += s + k + \" : \" + js_Boot.__string_rec(o[k],s);\n\t\t}\n\t\ts = s.substring(1);\n\t\tstr2 += \"\\n\" + s + \"}\";\n\t\treturn str2;\n\tcase \"string\":\n\t\treturn o;\n\tdefault:\n\t\treturn String(o);\n\t}\n};\njs_Boot.__interfLoop = function(cc,cl) {\n\tif(cc == null) {\n\t\treturn false;\n\t}\n\tif(cc == cl) {\n\t\treturn true;\n\t}\n\tvar intf = cc.__interfaces__;\n\tif(intf != null) {\n\t\tvar _g1 = 0;\n\t\tvar _g = intf.length;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tvar i1 = intf[i];\n\t\t\tif(i1 == cl || js_Boot.__interfLoop(i1,cl)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn js_Boot.__interfLoop(cc.__super__,cl);\n};\njs_Boot.__instanceof = function(o,cl) {\n\tif(cl == null) {\n\t\treturn false;\n\t}\n\tswitch(cl) {\n\tcase Array:\n\t\tif((o instanceof Array)) {\n\t\t\treturn o.__enum__ == null;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase Bool:\n\t\treturn typeof(o) == \"boolean\";\n\tcase Dynamic:\n\t\treturn true;\n\tcase Float:\n\t\treturn typeof(o) == \"number\";\n\tcase Int:\n\t\tif(typeof(o) == \"number\") {\n\t\t\treturn (o|0) === o;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase String:\n\t\treturn typeof(o) == \"string\";\n\tdefault:\n\t\tif(o != null) {\n\t\t\tif(typeof(cl) == \"function\") {\n\t\t\t\tif(o instanceof cl) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} else if(typeof(cl) == \"object\" && js_Boot.__isNativeObj(cl)) {\n\t\t\t\tif(o instanceof cl) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\tif(cl == Class ? o.__name__ != null : false) {\n\t\t\treturn true;\n\t\t}\n\t\tif(cl == Enum ? o.__ename__ != null : false) {\n\t\t\treturn true;\n\t\t}\n\t\treturn o.__enum__ == cl;\n\t}\n};\njs_Boot.__nativeClassName = function(o) {\n\tvar name = js_Boot.__toStr.call(o).slice(8,-1);\n\tif(name == \"Object\" || name == \"Function\" || name == \"Math\" || name == \"JSON\") {\n\t\treturn null;\n\t}\n\treturn name;\n};\njs_Boot.__isNativeObj = function(o) {\n\treturn js_Boot.__nativeClassName(o) != null;\n};\njs_Boot.__resolveNativeClass = function(name) {\n\treturn $global[name];\n};\nvar js_html_compat_ArrayBuffer = function(a) {\n\tif((a instanceof Array) && a.__enum__ == null) {\n\t\tthis.a = a;\n\t\tthis.byteLength = a.length;\n\t} else {\n\t\tvar len = a;\n\t\tthis.a = [];\n\t\tvar _g1 = 0;\n\t\tvar _g = len;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tthis.a[i] = 0;\n\t\t}\n\t\tthis.byteLength = len;\n\t}\n};\njs_html_compat_ArrayBuffer.__name__ = [\"js\",\"html\",\"compat\",\"ArrayBuffer\"];\njs_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {\n\tvar u = new Uint8Array(this,begin,end == null ? null : end - begin);\n\tvar result = new ArrayBuffer(u.byteLength);\n\tvar resultArray = new Uint8Array(result);\n\tresultArray.set(u);\n\treturn result;\n};\njs_html_compat_ArrayBuffer.prototype = {\n\tslice: function(begin,end) {\n\t\treturn new js_html_compat_ArrayBuffer(this.a.slice(begin,end));\n\t}\n\t,__class__: js_html_compat_ArrayBuffer\n};\nvar js_html_compat_Uint8Array = function() { };\njs_html_compat_Uint8Array.__name__ = [\"js\",\"html\",\"compat\",\"Uint8Array\"];\njs_html_compat_Uint8Array._new = function(arg1,offset,length) {\n\tvar arr;\n\tif(typeof(arg1) == \"number\") {\n\t\tarr = [];\n\t\tvar _g1 = 0;\n\t\tvar _g = arg1;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tarr[i] = 0;\n\t\t}\n\t\tarr.byteLength = arr.length;\n\t\tarr.byteOffset = 0;\n\t\tarr.buffer = new js_html_compat_ArrayBuffer(arr);\n\t} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {\n\t\tvar buffer = arg1;\n\t\tif(offset == null) {\n\t\t\toffset = 0;\n\t\t}\n\t\tif(length == null) {\n\t\t\tlength = buffer.byteLength - offset;\n\t\t}\n\t\tif(offset == 0) {\n\t\t\tarr = buffer.a;\n\t\t} else {\n\t\t\tarr = buffer.a.slice(offset,offset + length);\n\t\t}\n\t\tarr.byteLength = arr.length;\n\t\tarr.byteOffset = offset;\n\t\tarr.buffer = buffer;\n\t} else if((arg1 instanceof Array) && arg1.__enum__ == null) {\n\t\tarr = arg1.slice();\n\t\tarr.byteLength = arr.length;\n\t\tarr.byteOffset = 0;\n\t\tarr.buffer = new js_html_compat_ArrayBuffer(arr);\n\t} else {\n\t\tthrow new js__$Boot_HaxeError(\"TODO \" + Std.string(arg1));\n\t}\n\tarr.subarray = js_html_compat_Uint8Array._subarray;\n\tarr.set = js_html_compat_Uint8Array._set;\n\treturn arr;\n};\njs_html_compat_Uint8Array._set = function(arg,offset) {\n\tif(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {\n\t\tvar a = arg;\n\t\tif(arg.byteLength + offset > this.byteLength) {\n\t\t\tthrow new js__$Boot_HaxeError(\"set() outside of range\");\n\t\t}\n\t\tvar _g1 = 0;\n\t\tvar _g = arg.byteLength;\n\t\twhile(_g1 < _g) {\n\t\t\tvar i = _g1++;\n\t\t\tthis[i + offset] = a[i];\n\t\t}\n\t} else if((arg instanceof Array) && arg.__enum__ == null) {\n\t\tvar a1 = arg;\n\t\tif(a1.length + offset > this.byteLength) {\n\t\t\tthrow new js__$Boot_HaxeError(\"set() outside of range\");\n\t\t}\n\t\tvar _g11 = 0;\n\t\tvar _g2 = a1.length;\n\t\twhile(_g11 < _g2) {\n\t\t\tvar i1 = _g11++;\n\t\t\tthis[i1 + offset] = a1[i1];\n\t\t}\n\t} else {\n\t\tthrow new js__$Boot_HaxeError(\"TODO\");\n\t}\n};\njs_html_compat_Uint8Array._subarray = function(start,end) {\n\tvar a = js_html_compat_Uint8Array._new(this.slice(start,end));\n\ta.byteOffset = start;\n\treturn a;\n};\nvar $_, $fid = 0;\nfunction $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }\nString.prototype.__class__ = String;\nString.__name__ = [\"String\"];\nArray.__name__ = [\"Array\"];\nvar Int = { __name__ : [\"Int\"]};\nvar Dynamic = { __name__ : [\"Dynamic\"]};\nvar Float = Number;\nFloat.__name__ = [\"Float\"];\nvar Bool = Boolean;\nBool.__ename__ = [\"Bool\"];\nvar Class = { __name__ : [\"Class\"]};\nvar Enum = { };\nvar dbits = 30;\nswitch(dbits) {\ncase 26:\n\tcosmicos_BigInteger.defaultAm = 1;\n\tbreak;\ncase 28:\n\tcosmicos_BigInteger.defaultAm = 3;\n\tbreak;\ncase 30:\n\tcosmicos_BigInteger.defaultAm = 2;\n\tbreak;\ndefault:\n\tthrow new js__$Boot_HaxeError(\"bad dbits value\");\n}\ncosmicos_BigInteger.DB = dbits;\ncosmicos_BigInteger.DM = (1 << cosmicos_BigInteger.DB) - 1;\ncosmicos_BigInteger.DV = 1 << cosmicos_BigInteger.DB;\ncosmicos_BigInteger.BI_FP = 52;\ncosmicos_BigInteger.FV = Math.pow(2,cosmicos_BigInteger.BI_FP);\ncosmicos_BigInteger.F1 = cosmicos_BigInteger.BI_FP - cosmicos_BigInteger.DB;\ncosmicos_BigInteger.F2 = 2 * cosmicos_BigInteger.DB - cosmicos_BigInteger.BI_FP;\ncosmicos_BigInteger.initBiRc();\ncosmicos_BigInteger.BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\ncosmicos_BigInteger.lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509];\ncosmicos_BigInteger.lplim = 67108864 / cosmicos_BigInteger.lowprimes[cosmicos_BigInteger.lowprimes.length - 1] | 0;\nvar __map_reserved = {};\nvar ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;\nif(ArrayBuffer.prototype.slice == null) {\n\tArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;\n}\nvar Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;\ncosmicos_BigInteger.MAX_RADIX = 36;\ncosmicos_BigInteger.MIN_RADIX = 2;\ncosmicos_Constants.DIGITS_BASE10 = \"0123456789\";\ncosmicos_Constants.DIGITS_HEXU = \"0123456789ABCDEF\";\ncosmicos_Constants.DIGITS_HEXL = \"0123456789abcdef\";\ncosmicos_Constants.DIGITS_OCTAL = \"01234567\";\ncosmicos_Constants.DIGITS_BN = \"0123456789abcdefghijklmnopqrstuvwxyz\";\ncosmicos_Constants.DIGITS_BASE64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\ncosmicos_Constants.PROTO_HTTP = \"http://\";\ncosmicos_Constants.PROTO_HTTPS = \"http://\";\ncosmicos_Constants.PROTO_FILE = \"file://\";\ncosmicos_Constants.PROTO_FTP = \"ftp://\";\ncosmicos_Constants.PROTO_RTMP = \"rtmp://\";\ncosmicos_I32.ZERO = 0;\ncosmicos_I32.ONE = 1;\ncosmicos_I32.BYTE_MASK = 255;\njs_Boot.__toStr = ({ }).toString;\njs_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;\ncosmicos_Evaluate.main();\n})( true ? exports : undefined, typeof window != \"undefined\" ? window : typeof global != \"undefined\" ? global : typeof self != \"undefined\" ? self : this);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://Eval/./build/tiny/lib/cosmicos.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack://Eval/(webpack)/buildin/global.js?");

/***/ })

/******/ })["default"];