// Generated by Haxe 3.4.4
(function ($hx_exports, $global) { "use strict";
$hx_exports["cosmicos"] = $hx_exports["cosmicos"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = ["EReg"];
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = ["Math"];
var Reflect = function() { };
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
var Std = function() { };
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = ["StringTools"];
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var Type = function() { };
Type.__name__ = ["Type"];
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
var cosmicos_BigInteger = function() {
	if(cosmicos_BigInteger.BI_RC == null || cosmicos_BigInteger.BI_RC.length == 0) {
		cosmicos_BigInteger.initBiRc();
	}
	if(cosmicos_BigInteger.BI_RM.length == 0) {
		throw new js__$Boot_HaxeError("BI_RM not initialized");
	}
	this.chunks = [];
	var _g = cosmicos_BigInteger.defaultAm;
	switch(_g) {
	case 1:
		this.am = $bind(this,this.am1);
		break;
	case 2:
		this.am = $bind(this,this.am2);
		break;
	case 3:
		this.am = $bind(this,this.am3);
		break;
	default:
		throw new js__$Boot_HaxeError("am error");
	}
};
cosmicos_BigInteger.__name__ = ["cosmicos","BigInteger"];
cosmicos_BigInteger.initBiRc = function() {
	cosmicos_BigInteger.BI_RC = [];
	var rr = HxOverrides.cca("0",0);
	var _g = 0;
	while(_g < 10) {
		var vv = _g++;
		cosmicos_BigInteger.BI_RC[rr] = vv;
		++rr;
	}
	rr = HxOverrides.cca("a",0);
	var _g1 = 10;
	while(_g1 < 37) {
		var vv1 = _g1++;
		cosmicos_BigInteger.BI_RC[rr] = vv1;
		++rr;
	}
	rr = HxOverrides.cca("A",0);
	var _g2 = 10;
	while(_g2 < 37) {
		var vv2 = _g2++;
		cosmicos_BigInteger.BI_RC[rr] = vv2;
		++rr;
	}
};
cosmicos_BigInteger.get_ZERO = function() {
	return cosmicos_BigInteger.nbv(0);
};
cosmicos_BigInteger.get_ONE = function() {
	return cosmicos_BigInteger.nbv(1);
};
cosmicos_BigInteger.nbv = function(i) {
	var r = cosmicos_BigInteger.nbi();
	r.fromInt(i);
	return r;
};
cosmicos_BigInteger.nbi = function() {
	return new cosmicos_BigInteger();
};
cosmicos_BigInteger.ofString = function(s,base) {
	var me = cosmicos_BigInteger.nbi();
	var fromStringExt = function(s1,b) {
		me.fromInt(0);
		var cs = Math.floor(0.6931471805599453 * cosmicos_BigInteger.DB / Math.log(b));
		var d = Math.pow(b,cs) | 0;
		var mi = false;
		var j = 0;
		var w = 0;
		var _g1 = 0;
		var _g = s1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var x = cosmicos_BigInteger.intAt(s1,i);
			if(x < 0) {
				if(s1.charAt(i) == "-" && me.sign == 0) {
					mi = true;
				}
				continue;
			}
			w = b * w + x;
			if(++j >= cs) {
				me.dMultiply(d);
				me.dAddOffset(w,0);
				j = 0;
				w = 0;
			}
		}
		if(j > 0) {
			me.dMultiply(Math.pow(b,j) | 0);
			me.dAddOffset(w,0);
		}
		if(mi) {
			cosmicos_BigInteger.get_ZERO().subTo(me,me);
		}
		return me;
	};
	var k;
	if(base == 16) {
		k = 4;
	} else if(base == 10) {
		return fromStringExt(s,base);
	} else if(base == 256) {
		k = 8;
	} else if(base == 8) {
		k = 3;
	} else if(base == 2) {
		k = 1;
	} else if(base == 32) {
		k = 5;
	} else if(base == 4) {
		k = 2;
	} else {
		return fromStringExt(s,base);
	}
	me.t = 0;
	me.sign = 0;
	var i1 = s.length;
	var mi1 = false;
	var sh = 0;
	while(--i1 >= 0) {
		var x1 = k == 8 ? HxOverrides.cca(s,i1) & 255 : cosmicos_BigInteger.intAt(s,i1);
		if(x1 < 0) {
			if(s.charAt(i1) == "-") {
				mi1 = true;
			}
			continue;
		}
		mi1 = false;
		if(sh == 0) {
			me.chunks[me.t] = x1;
			me.t++;
		} else if(sh + k > cosmicos_BigInteger.DB) {
			me.chunks[me.t - 1] |= (x1 & (1 << cosmicos_BigInteger.DB - sh) - 1) << sh;
			me.chunks[me.t] = x1 >> cosmicos_BigInteger.DB - sh;
			me.t++;
		} else {
			me.chunks[me.t - 1] |= x1 << sh;
		}
		sh += k;
		if(sh >= cosmicos_BigInteger.DB) {
			sh -= cosmicos_BigInteger.DB;
		}
	}
	if(k == 8 && (HxOverrides.cca(s,0) & 128) != 0) {
		me.sign = -1;
		if(sh > 0) {
			me.chunks[me.t - 1] |= (1 << cosmicos_BigInteger.DB - sh) - 1 << sh;
		}
	}
	me.clamp();
	if(mi1) {
		cosmicos_BigInteger.get_ZERO().subTo(me,me);
	}
	return me;
};
cosmicos_BigInteger.ofInt = function(x) {
	var i = cosmicos_BigInteger.nbi();
	i.fromInt(x);
	return i;
};
cosmicos_BigInteger.ofInt32 = function(x) {
	var i = cosmicos_BigInteger.nbi();
	i.fromInt32(x);
	return i;
};
cosmicos_BigInteger.ofBytes = function(r,unsigned,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = r.length - pos;
	}
	if(len == 0) {
		return cosmicos_BigInteger.get_ZERO();
	}
	var bi = cosmicos_BigInteger.nbi();
	bi.sign = 0;
	bi.t = 0;
	var i = pos + len;
	var sh = 0;
	while(--i >= pos) {
		var x = i < len ? r.b[i] & 255 : 0;
		if(sh == 0) {
			bi.chunks[bi.t] = x;
			bi.t++;
		} else if(sh + 8 > cosmicos_BigInteger.DB) {
			bi.chunks[bi.t - 1] |= (x & (1 << cosmicos_BigInteger.DB - sh) - 1) << sh;
			bi.chunks[bi.t] = x >> cosmicos_BigInteger.DB - sh;
			bi.t++;
		} else {
			bi.chunks[bi.t - 1] |= x << sh;
		}
		sh += 8;
		if(sh >= cosmicos_BigInteger.DB) {
			sh -= cosmicos_BigInteger.DB;
		}
	}
	if(!unsigned && (r.b[0] & 128) != 0) {
		bi.sign = -1;
		if(sh > 0) {
			bi.chunks[bi.t - 1] |= (1 << cosmicos_BigInteger.DB - sh) - 1 << sh;
		}
	}
	bi.clamp();
	return bi;
};
cosmicos_BigInteger.op_and = function(x,y) {
	return x & y;
};
cosmicos_BigInteger.op_or = function(x,y) {
	return x | y;
};
cosmicos_BigInteger.op_xor = function(x,y) {
	return x ^ y;
};
cosmicos_BigInteger.op_andnot = function(x,y) {
	return x & ~y;
};
cosmicos_BigInteger.nbits = function(x) {
	var r = 1;
	var t = x >>> 16;
	if(t != 0) {
		x = t;
		r += 16;
	}
	t = x >> 8;
	if(t != 0) {
		x = t;
		r += 8;
	}
	t = x >> 4;
	if(t != 0) {
		x = t;
		r += 4;
	}
	t = x >> 2;
	if(t != 0) {
		x = t;
		r += 2;
	}
	t = x >> 1;
	if(t != 0) {
		x = t;
		++r;
	}
	return r;
};
cosmicos_BigInteger.cbit = function(x) {
	var r = 0;
	while(x != 0) {
		x &= x - 1;
		++r;
	}
	return r;
};
cosmicos_BigInteger.intAt = function(s,i) {
	var c = cosmicos_BigInteger.BI_RC[HxOverrides.cca(s,i)];
	if(c == null) {
		return -1;
	}
	return c;
};
cosmicos_BigInteger.int2charCode = function(n) {
	return HxOverrides.cca(cosmicos_BigInteger.BI_RM,n);
};
cosmicos_BigInteger.lbit = function(x) {
	if(x == 0) {
		return -1;
	}
	var r = 0;
	if((x & 65535) == 0) {
		x >>= 16;
		r += 16;
	}
	if((x & 255) == 0) {
		x >>= 8;
		r += 8;
	}
	if((x & 15) == 0) {
		x >>= 4;
		r += 4;
	}
	if((x & 3) == 0) {
		x >>= 2;
		r += 2;
	}
	if((x & 1) == 0) {
		++r;
	}
	return r;
};
cosmicos_BigInteger.dumpBi = function(r) {
	var s = "sign: " + (r.sign == null ? "null" : "" + r.sign);
	s += " t: " + r.t;
	s += Std.string(r.chunks);
	return s;
};
cosmicos_BigInteger.prototype = {
	fromInt: function(x) {
		this.t = 1;
		this.chunks[0] = 0;
		this.sign = x < 0 ? -1 : 0;
		if(x > 0) {
			this.chunks[0] = x;
		} else if(x < -1) {
			this.chunks[0] = x + cosmicos_BigInteger.DV;
		} else {
			this.t = 0;
		}
	}
	,fromInt32: function(x) {
		this.fromInt(x);
	}
	,toInt: function() {
		if(this.sign < 0) {
			if(this.t == 1) {
				return this.chunks[0] - cosmicos_BigInteger.DV;
			} else if(this.t == 0) {
				return -1;
			}
		} else if(this.t == 1) {
			return this.chunks[0];
		} else if(this.t == 0) {
			return 0;
		}
		return (this.chunks[1] & (1 << 32 - cosmicos_BigInteger.DB) - 1) << cosmicos_BigInteger.DB | this.chunks[0];
	}
	,toInt32: function() {
		return this.toInt();
	}
	,toString: function() {
		return this.toRadix(10);
	}
	,toHex: function() {
		return this.toRadix(16);
	}
	,toBytes: function() {
		var i = this.t;
		var r = [];
		r[0] = this.sign;
		var p = cosmicos_BigInteger.DB - i * cosmicos_BigInteger.DB % 8;
		var d;
		var k = 0;
		if(i-- > 0) {
			var tmp;
			if(p < cosmicos_BigInteger.DB) {
				d = this.chunks[i] >> p;
				tmp = d != (this.sign & cosmicos_BigInteger.DM) >> p;
			} else {
				tmp = false;
			}
			if(tmp) {
				r[k] = d | this.sign << cosmicos_BigInteger.DB - p;
				++k;
			}
			while(i >= 0) {
				if(p < 8) {
					d = (this.chunks[i] & (1 << p) - 1) << 8 - p;
					--i;
					d |= this.chunks[i] >> (p += cosmicos_BigInteger.DB - 8);
				} else {
					d = this.chunks[i] >> (p -= 8) & 255;
					if(p <= 0) {
						p += cosmicos_BigInteger.DB;
						--i;
					}
				}
				if((d & 128) != 0) {
					d |= -256;
				}
				if(k == 0 && (this.sign & 128) != (d & 128)) {
					++k;
				}
				if(k > 0 || d != this.sign) {
					r[k] = d;
					++k;
				}
			}
		}
		var bb = new haxe_io_BytesBuffer();
		var _g1 = 0;
		var _g = r.length;
		while(_g1 < _g) {
			var i1 = _g1++;
			bb.b.push(r[i1]);
		}
		return bb.getBytes();
	}
	,toBytesUnsigned: function() {
		var bb = new haxe_io_BytesBuffer();
		var k = 8;
		var km = 255;
		var d = 0;
		var i = this.t;
		var p = cosmicos_BigInteger.DB - i * cosmicos_BigInteger.DB % k;
		var m = false;
		var c = 0;
		if(i-- > 0) {
			var tmp;
			if(p < cosmicos_BigInteger.DB) {
				d = this.chunks[i] >> p;
				tmp = d > 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				m = true;
				bb.b.push(d);
				++c;
			}
			while(i >= 0) {
				if(p < k) {
					d = (this.chunks[i] & (1 << p) - 1) << k - p;
					d |= this.chunks[--i] >> (p += cosmicos_BigInteger.DB - k);
				} else {
					d = this.chunks[i] >> (p -= k) & km;
					if(p <= 0) {
						p += cosmicos_BigInteger.DB;
						--i;
					}
				}
				if(d > 0) {
					m = true;
				}
				if(m) {
					bb.b.push(d);
					++c;
				}
			}
		}
		return bb.getBytes();
	}
	,toRadix: function(b) {
		if(b == null) {
			b = 10;
		}
		if(b < 2 || b > 36) {
			throw new js__$Boot_HaxeError("invalid base for conversion");
		}
		if(this.sigNum() == 0) {
			return "0";
		}
		var cs = Math.floor(0.6931471805599453 * cosmicos_BigInteger.DB / Math.log(b));
		var a = Math.pow(b,cs) | 0;
		var d = cosmicos_BigInteger.nbv(a);
		var y = cosmicos_BigInteger.nbi();
		var z = cosmicos_BigInteger.nbi();
		var r = "";
		this.divRemTo(d,y,z);
		while(y.sigNum() > 0) {
			r = HxOverrides.substr(cosmicos_I32.baseEncode(a + z.toInt32(),b),1,null) + r;
			y.divRemTo(d,y,z);
		}
		return cosmicos_I32.baseEncode(z.toInt32(),b) + r;
	}
	,abs: function() {
		if(this.sign < 0) {
			return this.neg();
		} else {
			return this;
		}
	}
	,add: function(a) {
		var r = cosmicos_BigInteger.nbi();
		this.addTo(a,r);
		return r;
	}
	,compare: function(a) {
		var r = this.sign - a.sign;
		if(r != 0) {
			return r;
		}
		var i = this.t;
		r = i - a.t;
		if(r != 0) {
			return r;
		}
		while(--i >= 0) {
			r = this.chunks[i] - a.chunks[i];
			if(r != 0) {
				return r;
			}
		}
		return 0;
	}
	,div: function(a) {
		var r = cosmicos_BigInteger.nbi();
		this.divRemTo(a,r,null);
		return r;
	}
	,divideAndRemainder: function(a) {
		var q = cosmicos_BigInteger.nbi();
		var r = cosmicos_BigInteger.nbi();
		this.divRemTo(a,q,r);
		return [q,r];
	}
	,eq: function(a) {
		return this.compare(a) == 0;
	}
	,isEven: function() {
		return (this.t > 0 ? this.chunks[0] & 1 : this.sign) == 0;
	}
	,max: function(a) {
		if(this.compare(a) > 0) {
			return this;
		} else {
			return a;
		}
	}
	,min: function(a) {
		if(this.compare(a) < 0) {
			return this;
		} else {
			return a;
		}
	}
	,mod: function(a) {
		var r = cosmicos_BigInteger.nbi();
		this.abs().divRemTo(a,null,r);
		if(this.sign < 0 && r.compare(cosmicos_BigInteger.get_ZERO()) > 0) {
			a.subTo(r,r);
		}
		return r;
	}
	,modInt: function(n) {
		if(n <= 0) {
			return 0;
		}
		var d = cosmicos_BigInteger.DV % n;
		var r = this.sign < 0 ? n - 1 : 0;
		if(this.t > 0) {
			if(d == 0) {
				r = this.chunks[0] % n;
			} else {
				var i = this.t - 1;
				while(i >= 0) {
					r = (d * r + this.chunks[i]) % n;
					--i;
				}
			}
		}
		return r;
	}
	,modInverse: function(m) {
		var ac = m.isEven();
		if(this.isEven() && ac || m.sigNum() == 0) {
			return cosmicos_BigInteger.get_ZERO();
		}
		var u = m.clone();
		var v = this.clone();
		var a = cosmicos_BigInteger.nbv(1);
		var b = cosmicos_BigInteger.nbv(0);
		var c = cosmicos_BigInteger.nbv(0);
		var d = cosmicos_BigInteger.nbv(1);
		while(u.sigNum() != 0) {
			while(u.isEven()) {
				u.rShiftTo(1,u);
				if(ac) {
					if(!a.isEven() || !b.isEven()) {
						a.addTo(this,a);
						b.subTo(m,b);
					}
					a.rShiftTo(1,a);
				} else if(!b.isEven()) {
					b.subTo(m,b);
				}
				b.rShiftTo(1,b);
			}
			while(v.isEven()) {
				v.rShiftTo(1,v);
				if(ac) {
					if(!c.isEven() || !d.isEven()) {
						c.addTo(this,c);
						d.subTo(m,d);
					}
					c.rShiftTo(1,c);
				} else if(!d.isEven()) {
					d.subTo(m,d);
				}
				d.rShiftTo(1,d);
			}
			if(u.compare(v) >= 0) {
				u.subTo(v,u);
				if(ac) {
					a.subTo(c,a);
				}
				b.subTo(d,b);
			} else {
				v.subTo(u,v);
				if(ac) {
					c.subTo(a,c);
				}
				d.subTo(b,d);
			}
		}
		if(v.compare(cosmicos_BigInteger.get_ONE()) != 0) {
			return cosmicos_BigInteger.get_ZERO();
		}
		if(d.compare(m) >= 0) {
			return d.sub(m);
		}
		if(d.sigNum() < 0) {
			d.addTo(m,d);
		} else {
			return d;
		}
		return d;
	}
	,mul: function(a) {
		var r = cosmicos_BigInteger.nbi();
		this.multiplyTo(a,r);
		return r;
	}
	,neg: function() {
		var r = cosmicos_BigInteger.nbi();
		cosmicos_BigInteger.get_ZERO().subTo(this,r);
		return r;
	}
	,remainder: function(a) {
		var r = cosmicos_BigInteger.nbi();
		this.divRemTo(a,null,r);
		return r;
	}
	,sub: function(a) {
		var r = cosmicos_BigInteger.nbi();
		this.subTo(a,r);
		return r;
	}
	,and: function(a) {
		var r = cosmicos_BigInteger.nbi();
		this.bitwiseTo(a,cosmicos_BigInteger.op_and,r);
		return r;
	}
	,andNot: function(a) {
		var r = cosmicos_BigInteger.nbi();
		this.bitwiseTo(a,cosmicos_BigInteger.op_andnot,r);
		return r;
	}
	,bitCount: function() {
		var r = 0;
		var x = this.sign & cosmicos_BigInteger.DM;
		var _g1 = 0;
		var _g = this.t;
		while(_g1 < _g) {
			var i = _g1++;
			r += cosmicos_BigInteger.cbit(this.chunks[i] ^ x);
		}
		return r;
	}
	,bitLength: function() {
		if(this.t <= 0) {
			return 0;
		}
		return cosmicos_BigInteger.DB * (this.t - 1) + cosmicos_BigInteger.nbits(this.chunks[this.t - 1] ^ this.sign & cosmicos_BigInteger.DM);
	}
	,complement: function() {
		var r = cosmicos_BigInteger.nbi();
		var _g1 = 0;
		var _g = this.t;
		while(_g1 < _g) {
			var i = _g1++;
			r.chunks[i] = cosmicos_BigInteger.DM & ~this.chunks[i];
		}
		r.t = this.t;
		r.sign = ~this.sign;
		return r;
	}
	,clearBit: function(n) {
		return this.changeBit(n,cosmicos_BigInteger.op_andnot);
	}
	,flipBit: function(n) {
		return this.changeBit(n,cosmicos_BigInteger.op_xor);
	}
	,getLowestSetBit: function() {
		var _g1 = 0;
		var _g = this.t;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.chunks[i] != 0) {
				return i * cosmicos_BigInteger.DB + cosmicos_BigInteger.lbit(this.chunks[i]);
			}
		}
		if(this.sign < 0) {
			return this.t * cosmicos_BigInteger.DB;
		}
		return -1;
	}
	,not: function() {
		return this.complement();
	}
	,or: function(a) {
		var r = cosmicos_BigInteger.nbi();
		this.bitwiseTo(a,cosmicos_BigInteger.op_or,r);
		return r;
	}
	,setBit: function(n) {
		return this.changeBit(n,cosmicos_BigInteger.op_or);
	}
	,shl: function(n) {
		var r = cosmicos_BigInteger.nbi();
		if(n < 0) {
			this.rShiftTo(-n,r);
		} else {
			this.lShiftTo(n,r);
		}
		return r;
	}
	,shr: function(n) {
		var r = cosmicos_BigInteger.nbi();
		if(n < 0) {
			this.lShiftTo(-n,r);
		} else {
			this.rShiftTo(n,r);
		}
		return r;
	}
	,testBit: function(n) {
		var j = Math.floor(n / cosmicos_BigInteger.DB);
		if(j >= this.t) {
			return this.sign != 0;
		}
		return (this.chunks[j] & 1 << n % cosmicos_BigInteger.DB) != 0;
	}
	,xor: function(a) {
		var r = cosmicos_BigInteger.nbi();
		this.bitwiseTo(a,cosmicos_BigInteger.op_xor,r);
		return r;
	}
	,addTo: function(a,r) {
		var i = 0;
		var c = 0;
		var m = Math.min(a.t,this.t) | 0;
		while(i < m) {
			c += this.chunks[i] + a.chunks[i];
			r.chunks[i] = c & cosmicos_BigInteger.DM;
			++i;
			c >>= cosmicos_BigInteger.DB;
		}
		if(a.t < this.t) {
			c += a.sign;
			while(i < this.t) {
				c += this.chunks[i];
				r.chunks[i] = c & cosmicos_BigInteger.DM;
				++i;
				c >>= cosmicos_BigInteger.DB;
			}
			c += this.sign;
		} else {
			c += this.sign;
			while(i < a.t) {
				c += a.chunks[i];
				r.chunks[i] = c & cosmicos_BigInteger.DM;
				++i;
				c >>= cosmicos_BigInteger.DB;
			}
			c += a.sign;
		}
		r.sign = c < 0 ? -1 : 0;
		if(c > 0) {
			r.chunks[i] = c;
			++i;
		} else if(c < -1) {
			r.chunks[i] = cosmicos_BigInteger.DV + c;
			++i;
		}
		r.t = i;
		r.clamp();
	}
	,copyTo: function(r) {
		var _g1 = 0;
		var _g = this.chunks.length;
		while(_g1 < _g) {
			var i = _g1++;
			r.chunks[i] = this.chunks[i];
		}
		r.t = this.t;
		r.sign = this.sign;
	}
	,divRemTo: function(m,q,r) {
		var pm = m.abs();
		if(pm.t <= 0) {
			return;
		}
		var pt = this.abs();
		if(pt.t < pm.t) {
			if(q != null) {
				q.fromInt(0);
			}
			if(r != null) {
				this.copyTo(r);
			}
			return;
		}
		if(r == null) {
			r = cosmicos_BigInteger.nbi();
		}
		var y = cosmicos_BigInteger.nbi();
		var ts = this.sign;
		var ms = m.sign;
		var nsh = cosmicos_BigInteger.DB - cosmicos_BigInteger.nbits(pm.chunks[pm.t - 1]);
		if(nsh > 0) {
			pt.lShiftTo(nsh,r);
			pm.lShiftTo(nsh,y);
		} else {
			pt.copyTo(r);
			pm.copyTo(y);
		}
		var ys = y.t;
		var y0 = y.chunks[ys - 1];
		if(y0 == 0) {
			return;
		}
		var yt = y0 * 1.0 * ((1 << cosmicos_BigInteger.F1) * 1.0) + (ys > 1 ? (y.chunks[ys - 2] >> cosmicos_BigInteger.F2) * 1.0 : 0.0);
		var d1 = cosmicos_BigInteger.FV / yt;
		var d2 = (1 << cosmicos_BigInteger.F1) * 1.0 / yt;
		var e = (1 << cosmicos_BigInteger.F2) * 1.0;
		var i = r.t;
		var j = i - ys;
		var t = q == null ? cosmicos_BigInteger.nbi() : q;
		y.dlShiftTo(j,t);
		if(r.compare(t) >= 0) {
			r.chunks[r.t] = 1;
			r.t++;
			r.subTo(t,r);
		}
		cosmicos_BigInteger.get_ONE().dlShiftTo(ys,t);
		t.subTo(y,y);
		while(y.t < ys) {
			y.chunks[y.t] = 0;
			y.t++;
		}
		while(--j >= 0) {
			var qd;
			if(r.chunks[--i] == y0) {
				qd = cosmicos_BigInteger.DM;
			} else {
				qd = Math.floor(r.chunks[i] * 1.0 * d1 + (r.chunks[i - 1] * 1.0 + e) * d2);
			}
			r.chunks[i] += y.am(0,qd,r,j,0,ys);
			if(r.chunks[i] < qd) {
				y.dlShiftTo(j,t);
				r.subTo(t,r);
				while(r.chunks[i] < --qd) r.subTo(t,r);
			}
		}
		if(q != null) {
			r.drShiftTo(ys,q);
			if(ts != ms) {
				cosmicos_BigInteger.get_ZERO().subTo(q,q);
			}
		}
		r.t = ys;
		r.clamp();
		if(nsh > 0) {
			r.rShiftTo(nsh,r);
		}
		if(ts < 0) {
			cosmicos_BigInteger.get_ZERO().subTo(r,r);
		}
	}
	,multiplyLowerTo: function(a,n,r) {
		var i = Math.min(this.t + a.t,n) | 0;
		r.sign = 0;
		r.t = i;
		while(i > 0) {
			--i;
			r.chunks[i] = 0;
		}
		var j = r.t - this.t;
		while(i < j) {
			r.chunks[i + this.t] = this.am(0,a.chunks[i],r,i,0,this.t);
			++i;
		}
		j = Math.min(a.t,n) | 0;
		while(i < j) {
			this.am(0,a.chunks[i],r,i,0,n - i);
			++i;
		}
		r.clamp();
	}
	,multiplyTo: function(a,r) {
		var x = this.abs();
		var y = a.abs();
		var i = x.t;
		r.t = i + y.t;
		while(--i >= 0) r.chunks[i] = 0;
		var _g1 = 0;
		var _g = y.t;
		while(_g1 < _g) {
			var i1 = _g1++;
			r.chunks[i1 + x.t] = x.am(0,y.chunks[i1],r,i1,0,x.t);
		}
		r.sign = 0;
		r.clamp();
		if(this.sign != a.sign) {
			cosmicos_BigInteger.get_ZERO().subTo(r,r);
		}
	}
	,multiplyUpperTo: function(a,n,r) {
		--n;
		var i = r.t = this.t + a.t - n;
		r.sign = 0;
		while(--i >= 0) r.chunks[i] = 0;
		i = Math.max(n - this.t,0) | 0;
		var _g1 = i;
		var _g = a.t;
		while(_g1 < _g) {
			var x = _g1++;
			r.chunks[this.t + x - n] = this.am(n - x,a.chunks[x],r,0,0,this.t + x - n);
		}
		r.clamp();
		r.drShiftTo(1,r);
	}
	,squareTo: function(r) {
		if(r == this) {
			throw new js__$Boot_HaxeError("can not squareTo self");
		}
		var x = this.abs();
		var i = r.t = 2 * x.t;
		while(--i >= 0) r.chunks[i] = 0;
		i = 0;
		while(i < x.t - 1) {
			var c = x.am(i,x.chunks[i],r,2 * i,0,1);
			var r1 = r.chunks;
			var tmp = i + x.t;
			r1[tmp] += x.am(i + 1,2 * x.chunks[i],r,2 * i + 1,c,x.t - i - 1);
			if(r1[tmp] >= cosmicos_BigInteger.DV) {
				r.chunks[i + x.t] -= cosmicos_BigInteger.DV;
				r.chunks[i + x.t + 1] = 1;
			}
			++i;
		}
		if(r.t > 0) {
			var rv = x.am(i,x.chunks[i],r,2 * i,0,1);
			r.chunks[r.t - 1] += rv;
		}
		r.sign = 0;
		r.clamp();
	}
	,subTo: function(a,r) {
		var i = 0;
		var c = 0;
		var m = Math.min(a.t,this.t) | 0;
		while(i < m) {
			c += this.chunks[i] - a.chunks[i];
			r.chunks[i] = c & cosmicos_BigInteger.DM;
			++i;
			c >>= cosmicos_BigInteger.DB;
		}
		if(a.t < this.t) {
			c -= a.sign;
			while(i < this.t) {
				c += this.chunks[i];
				r.chunks[i] = c & cosmicos_BigInteger.DM;
				++i;
				c >>= cosmicos_BigInteger.DB;
			}
			c += this.sign;
		} else {
			c += this.sign;
			while(i < a.t) {
				c -= a.chunks[i];
				r.chunks[i] = c & cosmicos_BigInteger.DM;
				++i;
				c >>= cosmicos_BigInteger.DB;
			}
			c -= a.sign;
		}
		r.sign = c < 0 ? -1 : 0;
		if(c < -1) {
			r.chunks[i] = cosmicos_BigInteger.DV + c;
			++i;
		} else if(c > 0) {
			r.chunks[i] = c;
			++i;
		}
		r.t = i;
		r.clamp();
	}
	,clamp: function() {
		var c = this.sign & cosmicos_BigInteger.DM;
		while(this.t > 0 && this.chunks[this.t - 1] == c) --this.t;
	}
	,clone: function() {
		var r = cosmicos_BigInteger.nbi();
		this.copyTo(r);
		return r;
	}
	,gcd: function(a) {
		var x = this.sign < 0 ? this.neg() : this.clone();
		var y = a.sign < 0 ? a.neg() : a.clone();
		if(x.compare(y) < 0) {
			var t = x;
			x = y;
			y = t;
		}
		var i = x.getLowestSetBit();
		var g = y.getLowestSetBit();
		if(g < 0) {
			return x;
		}
		if(i < g) {
			g = i;
		}
		if(g > 0) {
			x.rShiftTo(g,x);
			y.rShiftTo(g,y);
		}
		while(x.sigNum() > 0) {
			i = x.getLowestSetBit();
			if(i > 0) {
				x.rShiftTo(i,x);
			}
			i = y.getLowestSetBit();
			if(i > 0) {
				y.rShiftTo(i,y);
			}
			if(x.compare(y) >= 0) {
				x.subTo(y,x);
				x.rShiftTo(1,x);
			} else {
				y.subTo(x,y);
				y.rShiftTo(1,y);
			}
		}
		if(g > 0) {
			y.lShiftTo(g,y);
		}
		return y;
	}
	,padTo: function(n) {
		while(this.t < n) {
			this.chunks[this.t] = 0;
			this.t++;
		}
	}
	,shortValue: function() {
		if(this.t == 0) {
			return this.sign;
		} else {
			return this.chunks[0] << 16 >> 16;
		}
	}
	,byteValue: function() {
		if(this.t == 0) {
			return this.sign;
		} else {
			return this.chunks[0] << 24 >> 24;
		}
	}
	,sigNum: function() {
		if(this.sign < 0) {
			return -1;
		} else if(this.t <= 0 || this.t == 1 && this.chunks[0] <= 0) {
			return 0;
		} else {
			return 1;
		}
	}
	,dAddOffset: function(n,w) {
		while(this.t <= w) {
			this.chunks[this.t] = 0;
			this.t++;
		}
		this.chunks[w] += n;
		while(this.chunks[w] >= cosmicos_BigInteger.DV) {
			this.chunks[w] -= cosmicos_BigInteger.DV;
			if(++w >= this.t) {
				this.chunks[this.t] = 0;
				this.t++;
			}
			++this.chunks[w];
		}
	}
	,dlShiftTo: function(n,r) {
		if(r == null) {
			return;
		}
		var i = this.t - 1;
		while(i >= 0) {
			r.chunks[i + n] = this.chunks[i];
			--i;
		}
		i = n - 1;
		while(i >= 0) {
			r.chunks[i] = 0;
			--i;
		}
		r.t = this.t + n;
		r.sign = this.sign;
	}
	,drShiftTo: function(n,r) {
		if(r == null) {
			return;
		}
		var i = n;
		while(i < this.t) {
			r.chunks[i - n] = this.chunks[i];
			++i;
		}
		r.t = Math.max(this.t - n,0) | 0;
		r.sign = this.sign;
	}
	,invDigit: function() {
		if(this.t < 1) {
			return 0;
		}
		var x = this.chunks[0];
		if((x & 1) == 0) {
			return 0;
		}
		var y = x & 3;
		y = y * (2 - (x & 15) * y) & 15;
		y = y * (2 - (x & 255) * y) & 255;
		y = y * (2 - ((x & 65535) * y & 65535)) & 65535;
		y = y * (2 - x * y % cosmicos_BigInteger.DV) % cosmicos_BigInteger.DV;
		if(y > 0) {
			return cosmicos_BigInteger.DV - y;
		} else {
			return -y;
		}
	}
	,bitwiseTo: function(a,op,r) {
		var f;
		var m = Math.min(a.t,this.t) | 0;
		var _g1 = 0;
		var _g = m;
		while(_g1 < _g) {
			var i = _g1++;
			r.chunks[i] = op(this.chunks[i],a.chunks[i]);
		}
		if(a.t < this.t) {
			f = a.sign & cosmicos_BigInteger.DM;
			var _g11 = m;
			var _g2 = this.t;
			while(_g11 < _g2) {
				var i1 = _g11++;
				r.chunks[i1] = op(this.chunks[i1],f);
			}
			r.t = this.t;
		} else {
			f = this.sign & cosmicos_BigInteger.DM;
			var _g12 = m;
			var _g3 = a.t;
			while(_g12 < _g3) {
				var i2 = _g12++;
				r.chunks[i2] = op(f,a.chunks[i2]);
			}
			r.t = a.t;
		}
		r.sign = op(this.sign,a.sign);
		r.clamp();
	}
	,changeBit: function(n,op) {
		var r = cosmicos_BigInteger.get_ONE().shl(n);
		this.bitwiseTo(r,op,r);
		return r;
	}
	,chunkSize: function(r) {
		return Math.floor(0.6931471805599453 * cosmicos_BigInteger.DB / Math.log(r));
	}
	,dMultiply: function(n) {
		this.chunks[this.t] = this.am(0,n - 1,this,0,0,this.t);
		this.t++;
		this.clamp();
	}
	,lShiftTo: function(n,r) {
		var bs = n % cosmicos_BigInteger.DB;
		var cbs = cosmicos_BigInteger.DB - bs;
		var bm = (1 << cbs) - 1;
		var ds = Math.floor(n / cosmicos_BigInteger.DB);
		var c = this.sign << bs & cosmicos_BigInteger.DM;
		var i;
		var i1 = this.t - 1;
		while(i1 >= 0) {
			r.chunks[i1 + ds + 1] = this.chunks[i1] >> cbs | c;
			c = (this.chunks[i1] & bm) << bs;
			--i1;
		}
		i1 = ds - 1;
		while(i1 >= 0) {
			r.chunks[i1] = 0;
			--i1;
		}
		r.chunks[ds] = c;
		r.t = this.t + ds + 1;
		r.sign = this.sign;
		r.clamp();
	}
	,rShiftTo: function(n,r) {
		r.sign = this.sign;
		var ds = Math.floor(n / cosmicos_BigInteger.DB);
		if(ds >= this.t) {
			r.t = 0;
			return;
		}
		var bs = n % cosmicos_BigInteger.DB;
		var cbs = cosmicos_BigInteger.DB - bs;
		var bm = (1 << bs) - 1;
		r.chunks[0] = this.chunks[ds] >> bs;
		var _g1 = ds + 1;
		var _g = this.t;
		while(_g1 < _g) {
			var i = _g1++;
			r.chunks[i - ds - 1] |= (this.chunks[i] & bm) << cbs;
			r.chunks[i - ds] = this.chunks[i] >> bs;
		}
		if(bs > 0) {
			r.chunks[this.t - ds - 1] |= (this.sign & bm) << cbs;
		}
		r.t = this.t - ds;
		r.clamp();
	}
	,am1: function(i,x,w,j,c,n) {
		while(--n >= 0) {
			var v = x * this.chunks[i] + w.chunks[j] + c;
			++i;
			c = Math.floor(v / 67108864);
			w.chunks[j] = v & 67108863;
			++j;
		}
		return c;
	}
	,am2: function(i,x,w,j,c,n) {
		var xl = x & 32767;
		var xh = x >> 15;
		while(--n >= 0) {
			var l = this.chunks[i] & 32767;
			var h = this.chunks[i] >> 15;
			++i;
			var m = xh * l + h * xl;
			l = xl * l + ((m & 32767) << 15) + w.chunks[j] + (c & 1073741823);
			c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
			w.chunks[j] = l & 1073741823;
			++j;
		}
		return c;
	}
	,am3: function(i,x,w,j,c,n) {
		var xl = x & 16383;
		var xh = x >> 14;
		while(--n >= 0) {
			var l = this.chunks[i] & 16383;
			var h = this.chunks[i] >> 14;
			++i;
			var m = xh * l + h * xl;
			l = xl * l + ((m & 16383) << 14) + w.chunks[j] + c;
			c = (l >> 28) + (m >> 14) + xh * h;
			w.chunks[j] = l & 268435455;
			++j;
		}
		return c;
	}
	,__class__: cosmicos_BigInteger
};
var cosmicos_BitString = $hx_exports["cosmicos"]["BitString"] = function(txt) {
	this.txt = txt;
};
cosmicos_BitString.__name__ = ["cosmicos","BitString"];
cosmicos_BitString.prototype = {
	asBigInteger: function() {
		var u = cosmicos_BigInteger.ofInt(0);
		var two = cosmicos_BigInteger.ofInt(2);
		var _g1 = 0;
		var _g = this.txt.length;
		while(_g1 < _g) {
			var j = _g1++;
			u = u.mul(two);
			if(this.txt.charAt(j) == ":") {
				u = u.add(cosmicos_BigInteger.get_ONE());
			}
		}
		return u;
	}
	,small: function() {
		return this.txt.length < 15;
	}
	,asInteger: function() {
		if(!this.small()) {
			return this.asBigInteger();
		}
		var u = 0;
		var _g1 = 0;
		var _g = this.txt.length;
		while(_g1 < _g) {
			var j = _g1++;
			u *= 2;
			if(this.txt.charAt(j) == ":") {
				++u;
			}
		}
		return u;
	}
	,__class__: cosmicos_BitString
};
var cosmicos_Codec = $hx_exports["cosmicos"]["Codec"] = function() { };
cosmicos_Codec.__name__ = ["cosmicos","Codec"];
cosmicos_Codec.prototype = {
	__class__: cosmicos_Codec
};
var cosmicos_ChainCodec = $hx_exports["cosmicos"]["ChainCodec"] = function(codecs) {
	this.codecs = codecs;
};
cosmicos_ChainCodec.__name__ = ["cosmicos","ChainCodec"];
cosmicos_ChainCodec.__interfaces__ = [cosmicos_Codec];
cosmicos_ChainCodec.prototype = {
	encode: function(src) {
		var _g1 = 0;
		var _g = this.codecs.length;
		while(_g1 < _g) {
			var i = _g1++;
			var result = this.codecs[i].encode(src);
			if(!result) {
				return result;
			}
		}
		return true;
	}
	,decode: function(src) {
		var _g1 = 0;
		var _g = this.codecs.length;
		while(_g1 < _g) {
			var i = _g1++;
			var result = this.codecs[this.codecs.length - i - 1].decode(src);
			if(!result) {
				return result;
			}
		}
		return true;
	}
	,last: function() {
		if(this.codecs.length == 0) {
			return null;
		}
		return this.codecs[this.codecs.length - 1];
	}
	,__class__: cosmicos_ChainCodec
};
var cosmicos_Complex = $hx_exports["cosmicos"]["Complex"] = function(re,im) {
	if(im == null) {
		im = 0;
	}
	if(re == null) {
		re = 0;
	}
	this.re = re;
	this.im = im;
};
cosmicos_Complex.__name__ = ["cosmicos","Complex"];
cosmicos_Complex.floatEquals = function(lhs,rhs) {
	return Math.abs(lhs - rhs) < 0.00000001;
};
cosmicos_Complex.prototype = {
	toString: function() {
		return "[" + this.re + ", " + this.im + "]";
	}
	,clone: function() {
		return new cosmicos_Complex(this.re,this.im);
	}
	,mul: function(alt) {
		return new cosmicos_Complex(this.re * alt.re - this.im * alt.im,this.re * alt.im + alt.re * this.im);
	}
	,div: function(alt) {
		return new cosmicos_Complex((this.re * alt.re + this.im * alt.im) / (alt.re * alt.re + alt.im * alt.im),(this.im * alt.re - this.re * alt.im) / (alt.re * alt.re + alt.im * alt.im));
	}
	,add: function(alt) {
		return new cosmicos_Complex(this.re + alt.re,this.im + alt.im);
	}
	,sub: function(alt) {
		return new cosmicos_Complex(this.re - alt.re,this.im - alt.im);
	}
	,equals: function(c2) {
		if(cosmicos_Complex.floatEquals(c2.re,this.re)) {
			return cosmicos_Complex.floatEquals(c2.im,this.im);
		} else {
			return false;
		}
	}
	,__class__: cosmicos_Complex
};
var cosmicos_Config = $hx_exports["cosmicos"]["Config"] = function(txt) {
	this.config = null;
	this.external_vocab = null;
	if(txt != null) {
		this.config = JSON.parse(txt);
	}
};
cosmicos_Config.__name__ = ["cosmicos","Config"];
cosmicos_Config.prototype = {
	useFlattener: function() {
		if(this.config == null) {
			return true;
		}
		return Reflect.field(this.config,"use_flattener");
	}
	,lines: function() {
		if(this.config == null) {
			return 0;
		}
		return Reflect.field(this.config,"lines");
	}
	,getExternalVocabPath: function() {
		if(this.config == null) {
			return null;
		}
		var fname = Reflect.field(this.config,"vocab");
		if(fname == "") {
			return null;
		}
		return fname;
	}
	,getNamesPath: function() {
		if(this.config == null) {
			return null;
		}
		var fname = Reflect.field(this.config,"names");
		if(fname == "") {
			return null;
		}
		return fname;
	}
	,setExternalVocab: function(txt) {
		this.external_vocab = JSON.parse(txt);
	}
	,getExternalVocab: function() {
		return this.external_vocab;
	}
	,__class__: cosmicos_Config
};
var cosmicos_Cons = $hx_exports["cosmicos"]["Cons"] = function() { };
cosmicos_Cons.__name__ = ["cosmicos","Cons"];
cosmicos_Cons.cons = function(x,y) {
	return function(f) {
		return (f(x))(y);
	};
};
cosmicos_Cons.car = function(x) {
	return x(function(a) {
		return function(b) {
			return a;
		};
	});
};
cosmicos_Cons.cdr = function(x) {
	return x(function(a) {
		return function(b) {
			return b;
		};
	});
};
cosmicos_Cons.deconsify = function(e) {
	if(typeof(e) == "number" && ((e | 0) === e)) {
		return e;
	}
	if(js_Boot.__instanceof(e,cosmicos_BigInteger)) {
		return e;
	}
	if(typeof(e) == "string") {
		return e;
	}
	if(js_Boot.__instanceof(e,cosmicos_BitString)) {
		return e;
	}
	if(typeof(e) == "number") {
		return e;
	}
	var c = new cosmicos_Cursor(e);
	var lst = [];
	var len = c.length();
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		var ei = c.next();
		lst.push(cosmicos_Cons.deconsify(ei));
	}
	return lst;
};
cosmicos_Cons.consify = function(e) {
	if(!((e instanceof Array) && e.__enum__ == null)) {
		return e;
	}
	var lst = e;
	var len = lst.length;
	if(len == 0) {
		return cosmicos_Cons.cons(0,0);
	}
	if(len == 1) {
		return cosmicos_Cons.cons(1,cosmicos_Cons.consify(lst[0]));
	}
	var r = cosmicos_Cons.cons(cosmicos_Cons.consify(lst[len - 2]),cosmicos_Cons.consify(lst[len - 1]));
	var _g1 = 0;
	var _g = len - 2;
	while(_g1 < _g) {
		var i = _g1++;
		r = cosmicos_Cons.cons(cosmicos_Cons.consify(lst[len - 3 - i]),r);
	}
	return cosmicos_Cons.cons(len,r);
};
var cosmicos_CosDefine = $hx_exports["cosmicos"]["CosDefine"] = function(k,v) {
	this.k = k;
	this.v = v;
};
cosmicos_CosDefine.__name__ = ["cosmicos","CosDefine"];
cosmicos_CosDefine.prototype = {
	__class__: cosmicos_CosDefine
};
var cosmicos_CosFunction = $hx_exports["cosmicos"]["CosFunction"] = function(fn,meta) {
	this.fn = fn;
	this.meta = meta;
};
cosmicos_CosFunction.__name__ = ["cosmicos","CosFunction"];
cosmicos_CosFunction.prototype = {
	__class__: cosmicos_CosFunction
};
var cosmicos_Cursor = function(e) {
	this.at = 0;
	this.len = cosmicos_Cons.car(e);
	this.e = cosmicos_Cons.cdr(e);
};
cosmicos_Cursor.__name__ = ["cosmicos","Cursor"];
cosmicos_Cursor.prototype = {
	length: function() {
		return this.len;
	}
	,next: function() {
		var result = null;
		if(this.len == 1) {
			result = this.e;
			this.e = null;
		} else if(this.at == this.len - 1) {
			result = cosmicos_Cons.cdr(this.e);
			this.e = null;
		} else {
			result = cosmicos_Cons.car(this.e);
			if(this.at != this.len - 2) {
				this.e = cosmicos_Cons.cdr(this.e);
			}
		}
		this.at++;
		return result;
	}
	,__class__: cosmicos_Cursor
};
var cosmicos_Evaluate = $hx_exports["cosmicos"]["Evaluate"] = function(state,useIntVocab) {
	if(useIntVocab == null) {
		useIntVocab = false;
	}
	if(state == null) {
		state = new cosmicos_State();
		if(useIntVocab) {
			state.useIntVocab();
		}
	}
	this.state = state;
	this.mem = state.getMemory();
	this.vocab = state.getVocab();
	this.id_lambda = this.vocab.get("?");
	this.id_lambda0 = this.vocab.get("??");
	this.id_define = this.vocab.get("@");
	this.id_if = this.vocab.get("if");
	this.id_assign = this.vocab.get("assign");
	this.id_translate = -1;
	this.internal_id = 10000;
	this.config = state.getConfig();
};
cosmicos_Evaluate.__name__ = ["cosmicos","Evaluate"];
cosmicos_Evaluate.isBi = function(x) {
	return js_Boot.__instanceof(x,cosmicos_BigInteger);
};
cosmicos_Evaluate.isBi2 = function(x,y) {
	if(!js_Boot.__instanceof(x,cosmicos_BigInteger)) {
		return js_Boot.__instanceof(y,cosmicos_BigInteger);
	} else {
		return true;
	}
};
cosmicos_Evaluate.isFloat2 = function(x,y) {
	if(typeof(x) != "number") {
		return typeof(y) == "number";
	} else {
		return true;
	}
};
cosmicos_Evaluate.isComplex2 = function(x,y) {
	if(!js_Boot.__instanceof(x,cosmicos_Complex)) {
		return js_Boot.__instanceof(y,cosmicos_Complex);
	} else {
		return true;
	}
};
cosmicos_Evaluate.bi = function(x) {
	if(js_Boot.__instanceof(x,cosmicos_BigInteger)) {
		return x;
	}
	return cosmicos_BigInteger.ofInt(x);
};
cosmicos_Evaluate.complex = function(x) {
	if(typeof(x) == "number" && ((x | 0) === x) || typeof(x) == "number") {
		return new cosmicos_Complex(x);
	}
	return x;
};
cosmicos_Evaluate.main = function() {
};
cosmicos_Evaluate.dummy = function() {
	new cosmicos_ManuscriptStyle();
	new cosmicos_FourSymbolCodec(null);
	new cosmicos_EvaluateCodec(null);
	new cosmicos_PreprocessCodec(null);
	new cosmicos_Sound();
};
cosmicos_Evaluate.prototype = {
	evaluateInContext: function(e0,cbase) {
		var _gthis = this;
		var c = cbase;
		var c_is_private = false;
		var more = false;
		while(true) {
			if(typeof(e0) == "string") {
				var str = e0;
				if(str.length == 0 || str.charAt(0) == "1") {
					return str.length;
				}
				return str;
			}
			if(typeof(e0) == "number" && ((e0 | 0) === e0) || js_Boot.__instanceof(e0,cosmicos_BigInteger) || js_Boot.__instanceof(e0,cosmicos_BitString) || typeof(e0) == "string" || typeof(e0) == "number") {
				return e0;
			}
			var cursor = new cosmicos_Cursor(e0);
			var x = this.evaluateInContext(cursor.next(),c);
			if(x == this.id_lambda) {
				var k2 = [this.evaluateInContext(cursor.next(),c)];
				var e2 = [cursor.next()];
				return (function(e21,k21) {
					return function(v) {
						var c2 = new cosmicos_Memory(c,k21[0],v);
						return _gthis.evaluateInContext(e21[0],c2);
					};
				})(e2,k2);
			} else if(x == this.id_lambda0) {
				var k22 = [this.evaluateInContext(cursor.next(),c)];
				var e22 = [cursor.next()];
				return new cosmicos_CosFunction((function(e23,k23) {
					return function(v1) {
						var c21 = new cosmicos_Memory(c,k23[0],v1);
						return _gthis.evaluateInContext(e23[0],c21);
					};
				})(e22,k22),true);
			} else if(x == this.id_assign) {
				var k24 = this.evaluateInContext(cursor.next(),c);
				var v2 = this.evaluateInContext(cursor.next(),c);
				var c22 = new cosmicos_Memory(c,k24,v2);
				e0 = cursor.next();
				c = c22;
				more = true;
				if(!more) {
					break;
				} else {
					continue;
				}
			} else if(x == this.id_define) {
				var k25 = cursor.next();
				var v21 = this.evaluateInContext(cursor.next(),c);
				var code = this.evaluateInContext(k25,c);
				return new cosmicos_CosDefine(code,v21);
			} else if(x == this.id_if) {
				var choice = this.evaluateInContext(cursor.next(),c);
				if(choice != 0) {
					e0 = cursor.next();
					more = true;
					if(!more) {
						break;
					} else {
						continue;
					}
				} else {
					cursor.next();
					e0 = cursor.next();
					more = true;
					if(!more) {
						break;
					} else {
						continue;
					}
				}
			} else {
				try {
					var open = true;
					var x0 = x;
					var len = cursor.length();
					var _g1 = 0;
					var _g = len;
					while(_g1 < _g) {
						var i = _g1++;
						if(i > 0) {
							if(x == 1) {
								open = true;
							}
							var v3 = [cursor.next()];
							if(open) {
								x = this.evaluateInContext(v3[0],c);
							} else if(js_Boot.__instanceof(x,cosmicos_CosFunction)) {
								x = x.fn((function(v4) {
									return function(x1) {
										return _gthis.evaluateInContext(v4[0],c);
									};
								})(v3));
							} else {
								x = x(this.evaluateInContext(v3[0],c));
							}
						}
						if(open) {
							if(typeof(x) == "number" && ((x | 0) === x) || js_Boot.__instanceof(x,cosmicos_BigInteger)) {
								var j = x;
								x = c.get(j);
								if(len > 0) {
									if(x == null) {
										console.log("Problem with " + j + " (" + this.vocab.reverse(j) + ")");
										throw new js__$Boot_HaxeError("Problem with " + j + " (" + this.vocab.reverse(j) + ")");
									}
								}
								open = false;
							} else if(typeof(x) == "string") {
								var j1 = x;
								x = c.get(j1);
								if(len > 0) {
									if(x == null) {
										console.log("Symbol '" + j1 + "' unrecognized");
										throw new js__$Boot_HaxeError("Symbol '" + j1 + "' unrecognized");
									}
								}
								open = false;
							} else if(js_Boot.__instanceof(x,cosmicos_BitString)) {
								var bs = x;
								x = bs.asBigInteger();
								open = false;
							} else if(js_Boot.__instanceof(x,cosmicos_CosDefine)) {
								if(!c_is_private) {
									c = new cosmicos_Memory(c);
									c_is_private = true;
								}
								this.applyDefine(x,c);
							} else {
								open = false;
							}
						}
					}
				} catch( e ) {
					if (e instanceof js__$Boot_HaxeError) e = e.val;
					console.log("Problem evaluating " + Std.string(cosmicos_Cons.deconsify(e0)) + " (" + Std.string(e) + ")");
					throw js__$Boot_HaxeError.wrap(e);
				}
				return x;
			}
		}
		return null;
	}
	,applyDefine: function(e,mem) {
		if(!js_Boot.__instanceof(e,cosmicos_CosDefine)) {
			return false;
		}
		var def = e;
		mem.add(def.k,def.v);
		return true;
	}
	,evaluateExpression: function(e) {
		var r = this.evaluateInContext(e,this.mem);
		if(this.applyDefine(r,this.mem)) {
			r = 1;
		}
		return r;
	}
	,evaluateLine: function(str) {
		var codec = new cosmicos_ChainCodec([new cosmicos_ParseCodec(this.vocab),new cosmicos_NormalizeCodec(this.vocab),new cosmicos_UnflattenCodec(),new cosmicos_TranslateCodec(this.state)]);
		var statement = new cosmicos_Statement(str);
		codec.encode(statement);
		return this.evaluateExpression(statement.content);
	}
	,iid: function() {
		var result = this.internal_id;
		this.internal_id++;
		return result;
	}
	,getVocab: function() {
		return this.vocab;
	}
	,getMemory: function() {
		return this.mem;
	}
	,getState: function() {
		return this.state;
	}
	,explain: function(name,desc,example) {
		this.vocab.setMeta(name,new cosmicos_VocabMeta(desc,example));
	}
	,applyOldOrder: function() {
		var _gthis = this;
		if(this.mem == null) {
			this.mem = new cosmicos_Memory(null);
		}
		this.vocab.clear();
		this.vocab.check("false",0);
		this.vocab.check("true",1);
		this.vocab.check("<",2);
		this.explain("<","is one integer less than another","< 41 42");
		this.vocab.check("=",3);
		this.explain("=","test for integer equality","= 42 42");
		this.vocab.check(">",4);
		this.explain(">","is one integer greater than another","> 42 41");
		this.vocab.check("not",5);
		this.vocab.check("unary",7);
		this.vocab.check("*",9);
		this.explain("*","multiply two integers","* 2 21");
		this.vocab.check("+",10);
		this.explain("+","add two integers","+ 22 20");
		this.vocab.check("-",11);
		this.explain("-","subtract one integer from another","- 44 2");
		this.id_lambda = this.vocab.check("?",12);
		this.explain("?","create an anonymous function","? x | - $x 1");
		this.id_define = this.vocab.check("@",13);
		this.explain("@","store an expression in memory","@ decrement | ? x | - $x 1");
		this.id_assign = this.vocab.check("assign",14);
		this.explain("assign","memory within expression","assign x 15 | = $x 15");
		this.id_if = this.vocab.check("if",15);
		this.explain("if","conditional evaluation","if (> $x 1) (dec $x) $x");
		this.vocab.check("vector",16);
		this.vocab.check("solve",17);
		this.vocab.check("intro",18);
		this.vocab.check("forall",19);
		this.vocab.check("exists",20);
		this.vocab.check("cons",21);
		this.id_translate = this.vocab.check("translate",25);
		this.vocab.check("lambda",26);
		this.vocab.check("make",27);
		this.vocab.check("all",30);
		this.vocab.check("undefined",32);
		this.vocab.check("div",34);
		this.vocab.check("primer",35);
		this.vocab.check("demo",36);
		this.vocab.check("cell",37);
		this.mem.add(this.vocab.get("intro"),function(x) {
			return 1;
		});
		this.vocab.set("assume",this.iid());
		this.mem.add(this.vocab.get("assume"),function(x1) {
			return x1;
		});
		this.addStdMin();
		this.evaluateLine("@ 1 1");
		this.evaluateLine("@ true 1");
		this.addDefinition("not","? 0 | if $0 0 1");
		this.addDefinition("true:*","? 0 | ? 1 | if $0 $1 0");
		this.addDefinition("true:+","? 0 | ? 1 | if $0 1 $1");
		this.mem.add(this.vocab.get("cell:make"),function(x2) {
			return { data : x2};
		});
		this.mem.add(this.vocab.get("cell:get"),function(x3) {
			return x3.data;
		});
		this.mem.add(this.vocab.get("cell:assign"),function(x4) {
			return function(y) {
				x4.data = y;
				return 1;
			};
		});
		this.mem.add(this.vocab.get("function?"),function(x5) {
			return !(typeof(x5) == "number" && ((x5 | 0) === x5) || typeof(x5) == "number" || js_Boot.__instanceof(x5,cosmicos_BigInteger) || typeof(x5) == "string" || js_Boot.__instanceof(x5,cosmicos_BitString) || typeof(x5) == "boolean");
		});
		this.mem.add(this.vocab.get("translate"),function(x6) {
			if(typeof(x6) == "number" && ((x6 | 0) === x6) || js_Boot.__instanceof(x6,cosmicos_BigInteger) || typeof(x6) == "string" || js_Boot.__instanceof(x6,cosmicos_BitString) || typeof(x6) == "number") {
				return x6;
			}
			var rep = function(x7) {
			};
			var len = cosmicos_Cons.car(x6);
			if(len == 0) {
				return x6;
			}
			var current = _gthis.mem.get(_gthis.id_translate);
			if(len == 1) {
				var tmp = cosmicos_Cons.cdr(x6);
				return cosmicos_Cons.cons(1,current(tmp));
			}
			var rep1 = function(r,len1,rec) {
				if(len1 == 2) {
					var rep2 = cosmicos_Cons.car(r);
					var rep3 = current(rep2);
					var rep4 = cosmicos_Cons.cdr(r);
					return cosmicos_Cons.cons(rep3,current(rep4));
				}
				var rep5 = cosmicos_Cons.car(r);
				return cosmicos_Cons.cons(current(rep5),rec(cosmicos_Cons.cdr(r),len1 - 1,rec));
			};
			return cosmicos_Cons.cons(len,rep1(cosmicos_Cons.cdr(x6),len,rep1));
		});
		this.mem.add(this.vocab.get("forall"),function(f) {
			if(f(-5) != 0 && f(10) != 0 && f(15) != 0 && f(18) != 0) {
				return 1;
			} else {
				return 0;
			}
		});
		this.mem.add(this.vocab.get("exists"),function(f1) {
			var _g = -10;
			while(_g < 20) {
				var i = _g++;
				if(f1(i) != 0) {
					return 1;
				}
			}
			return 0;
		});
		this.mem.add(this.vocab.get("solve"),function(f2) {
			var samples = [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7,8,9,10,Math.sqrt(2)];
			var _g1 = 0;
			while(_g1 < samples.length) {
				var i1 = samples[_g1];
				++_g1;
				if(f2(i1) != 0) {
					return i1;
				}
			}
			return 0;
		});
		this.mem.add(this.vocab.get("all"),function(f3) {
			var lst = [];
			var _g2 = -50;
			while(_g2 < 50) {
				var i2 = _g2++;
				if(f3(i2) != 0) {
					lst.push(i2);
				}
			}
			return cosmicos_Cons.consify(lst);
		});
		this.mem.add(this.vocab.get("sqrt"),function(x8) {
			return Math.sqrt(x8);
		});
		this.mem.add(this.vocab.get("pow"),function(x9) {
			return function(y1) {
				return Math.pow(x9,y1);
			};
		});
		this.mem.add(this.vocab.get("set:int:+"),(this.mem.get(this.vocab.get("all")))(function(x10) {
			return x10 >= 0;
		}));
		this.mem.add(this.vocab.get("div"),function(x11) {
			return function(y2) {
				if(cosmicos_Evaluate.isBi2(x11,y2)) {
					return cosmicos_Evaluate.bi(x11).div(cosmicos_Evaluate.bi(y2));
				}
				return x11 / y2 | 0;
			};
		});
		this.mem.add(this.vocab.get("frac"),function(x12) {
			return function(y3) {
				if(cosmicos_Evaluate.isBi2(x12,y3)) {
					throw new js__$Boot_HaxeError("real division cannot deal with bigints yet");
				}
				if(cosmicos_Evaluate.isComplex2(x12,y3)) {
					return cosmicos_Evaluate.complex(x12).div(cosmicos_Evaluate.complex(y3));
				}
				return x12 / y3;
			};
		});
		this.mem.add(this.vocab.get("demo"),function(x13) {
			return x13;
		});
		this.mem.add(this.vocab.get("e"),Math.exp(1.0));
		this.mem.add(this.vocab.get("pi"),Math.PI);
		this.mem.add(this.vocab.get("i"),new cosmicos_Complex(0,1));
		this.vocab.set("is-int",this.iid());
		this.evaluateLine("@ is-int | ? x 1");
		this.vocab.set("unary-v",this.iid());
		this.evaluateLine("@ unary-v | ? v | ? x | if (= $x 0) $v (unary-v | + $v 1)");
		this.evaluateLine("@ unary | unary-v 0");
		this.vocab.set("has-divisor-within",this.iid());
		this.evaluateLine("@ has-divisor-within | ? top | ? x | if (< $top 2) 0 | if (= $x | * $top | div $x $top) 1 | has-divisor-within (- $top 1) $x");
		this.vocab.set("is-prime",this.iid());
		this.evaluateLine("@ is-prime | ? x | if (< $x 2) 0 | not | has-divisor-within (- $x 1) $x");
		this.vocab.set("has-square-divisor-within",this.iid());
		this.evaluateLine("@ has-square-divisor-within | ? top | ? x | if (< $top 0) 0 | if (= $x | * $top $top) 1 | has-square-divisor-within (- $top 1) $x");
		this.vocab.set("is-square",this.iid());
		this.evaluateLine("@ is-square | ? x | has-square-divisor-within $x $x");
		this.evaluateLine("@ undefined 999999");
		this.evaluateLine("@ even | ? x | = 0 | - $x | * 2 | div $x 2");
		this.evaluateLine("@ is | ? x | if (= $x int) $is-int | if (= $x square) $is-square | if (= $x prime) $is-prime $undefined");
		this.id_lambda0 = this.vocab.get("??");
	}
	,addStdMin: function() {
		this.mem.add(this.vocab.get("+"),function(x) {
			return function(y) {
				if(cosmicos_Evaluate.isBi2(x,y)) {
					return cosmicos_Evaluate.bi(x).add(cosmicos_Evaluate.bi(y));
				}
				if(cosmicos_Evaluate.isComplex2(x,y)) {
					return cosmicos_Evaluate.complex(x).add(cosmicos_Evaluate.complex(y));
				}
				return x + y;
			};
		});
		this.mem.add(this.vocab.get("-"),function(x1) {
			return function(y1) {
				if(cosmicos_Evaluate.isBi2(x1,y1)) {
					return cosmicos_Evaluate.bi(x1).sub(cosmicos_Evaluate.bi(y1));
				}
				if(cosmicos_Evaluate.isComplex2(x1,y1)) {
					return cosmicos_Evaluate.complex(x1).sub(cosmicos_Evaluate.complex(y1));
				}
				return x1 - y1;
			};
		});
		this.mem.add(this.vocab.get("="),function(x2) {
			return function(y2) {
				if(cosmicos_Evaluate.isBi2(x2,y2)) {
					if(cosmicos_Evaluate.bi(x2).compare(cosmicos_Evaluate.bi(y2)) == 0) {
						return 1;
					} else {
						return 0;
					}
				}
				if(cosmicos_Evaluate.isComplex2(x2,y2)) {
					var _this = cosmicos_Evaluate.complex(x2);
					var c2 = cosmicos_Evaluate.complex(y2);
					if(cosmicos_Complex.floatEquals(c2.re,_this.re)) {
						return cosmicos_Complex.floatEquals(c2.im,_this.im);
					} else {
						return false;
					}
				}
				if(cosmicos_Evaluate.isFloat2(x2,y2)) {
					return Math.abs(x2 - y2) < 0.0001;
				}
				if(x2 == y2) {
					return 1;
				} else {
					return 0;
				}
			};
		});
		this.mem.add(this.vocab.get("*"),function(x3) {
			return function(y3) {
				if(cosmicos_Evaluate.isBi2(x3,y3)) {
					return cosmicos_Evaluate.bi(x3).mul(cosmicos_Evaluate.bi(y3));
				}
				if(cosmicos_Evaluate.isComplex2(x3,y3)) {
					return cosmicos_Evaluate.complex(x3).mul(cosmicos_Evaluate.complex(y3));
				}
				return x3 * y3;
			};
		});
		this.mem.add(this.vocab.get("<"),function(x4) {
			return function(y4) {
				if(cosmicos_Evaluate.isBi2(x4,y4)) {
					if(cosmicos_Evaluate.bi(x4).compare(cosmicos_Evaluate.bi(y4)) < 0) {
						return 1;
					} else {
						return 0;
					}
				}
				if(x4 < y4) {
					return 1;
				} else {
					return 0;
				}
			};
		});
		this.mem.add(this.vocab.get(">"),function(x5) {
			return function(y5) {
				if(cosmicos_Evaluate.isBi2(x5,y5)) {
					if(cosmicos_Evaluate.bi(x5).compare(cosmicos_Evaluate.bi(y5)) > 0) {
						return 1;
					} else {
						return 0;
					}
				}
				if(x5 > y5) {
					return 1;
				} else {
					return 0;
				}
			};
		});
		this.mem.add(this.vocab.get("pure"),function(v) {
			if(v) {
				return function(x6) {
					return function(y6) {
						return x6;
					};
				};
			} else {
				return function(x7) {
					return function(y7) {
						return y7;
					};
				};
			}
		});
	}
	,addDefinition: function(name,body,example) {
		this.evaluateLine("@ " + name + " | " + body);
		this.vocab.setMeta(name,new cosmicos_VocabMeta(body,example));
	}
	,addStd: function() {
		this.addStdMin();
		this.explain("false","not true ;-)","= (> 10 20) $false");
		this.explain("true","not false ;-)","= (> 20 10) $true");
		this.addDefinition("not","? x | if $x 0 1","not (> 41 42)");
		this.explain("true:*","true if both args are true","and (> 42 41) (< 41 42)");
		this.explain("true:+","true if either arg is true","or (> 42 41) (< 42 41)");
	}
	,addPrimer: function(primer) {
		this.mem.add(this.vocab.get("primer"),cosmicos_Cons.consify(primer));
	}
	,examples: function() {
		return ["+ 3 (* 10 2)","+ 3 | * 10 2","+ 3 20","@ square | ? x | * $x $x","square 10","@ factorial | ? n | if (= $n 0) 1 | * $n | factorial (- $n 1)","factorial 5","@ first | ? x | ? y | x","@ second | ? x | ? y | y","@ cons | ? x | ? y | ? f | f $x $y","@ car | ? f | f $first","@ cdr | ? f | f $second","car | cons 10 15","cdr | cons 10 15"];
	}
	,__class__: cosmicos_Evaluate
};
var cosmicos_EvaluateCodec = $hx_exports["cosmicos"]["EvaluateCodec"] = function(state,with_std_functions) {
	if(with_std_functions == null) {
		with_std_functions = true;
	}
	this.state = state;
	this["eval"] = new cosmicos_Evaluate(state);
	this["eval"].applyOldOrder();
	if(with_std_functions) {
		this["eval"].addStdMin();
	}
};
cosmicos_EvaluateCodec.__name__ = ["cosmicos","EvaluateCodec"];
cosmicos_EvaluateCodec.__interfaces__ = [cosmicos_Codec];
cosmicos_EvaluateCodec.prototype = {
	addPrimer: function(primer) {
		this["eval"].addPrimer(primer);
	}
	,encode: function(src) {
		src.content = [this["eval"].evaluateExpression(src.content)];
		return true;
	}
	,decode: function(src) {
		src.content = src.content[0];
		var r = cosmicos_Cons.deconsify(src.content);
		var vocab = this.state.getVocab();
		if(vocab.exists("vector")) {
			var vector = vocab.get("vector");
			this.vectorify(r,vector);
		}
		src.content = cosmicos_Cons.consify(r);
		return true;
	}
	,vectorify: function(v,vector) {
		if((v instanceof Array) && v.__enum__ == null) {
			var ei = v;
			var _g1 = 0;
			var _g = ei.length;
			while(_g1 < _g) {
				var i = _g1++;
				ei[i] = this.vectorify(ei[i],vector);
			}
			ei.splice(0,0,vector);
			return ei;
		} else {
			return v;
		}
	}
	,__class__: cosmicos_EvaluateCodec
};
var cosmicos_FourSymbolCodec = $hx_exports["cosmicos"]["FourSymbolCodec"] = function(vocab) {
	this.vocab = vocab;
};
cosmicos_FourSymbolCodec.__name__ = ["cosmicos","FourSymbolCodec"];
cosmicos_FourSymbolCodec.__interfaces__ = [cosmicos_Codec];
cosmicos_FourSymbolCodec.prototype = {
	encode: function(src) {
		var txt = cosmicos_Parse.codify(src.content,this.vocab);
		src.content = [txt];
		return true;
	}
	,decode: function(src) {
		var txt = src.content[0];
		var out = "";
		var len = txt.length;
		var unit = "";
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			var ch = txt.charAt(i);
			if(ch == "0") {
				unit += ".";
			} else if(ch == "1") {
				unit += ":";
			} else if(ch == "2") {
				out += unit;
				unit = "";
				out += "(";
			} else if(ch == "3") {
				if(unit != "") {
					var bs = new cosmicos_BitString(unit);
					if(bs.small()) {
						out += "]";
						out += Std.string(bs.asInteger());
						out += "[";
						unit = "";
					} else {
						out += " ";
						out += unit;
						out += " ";
						unit = "";
					}
				}
				out += ")";
			}
		}
		var r = new EReg("\\(\\]","g");
		var out1 = out.replace(r.r," ");
		r = new EReg("\\[\\)","g");
		out1 = out1.replace(r.r," ");
		r = new EReg(":\\(\\)","g");
		out1 = out1.replace(r.r," | ");
		r = new EReg("\\.\\(\\) *","g");
		out1 = out1.replace(r.r," $");
		r = new EReg(" *\\(\\(\\)\\)","g");
		out1 = out1.replace(r.r,";");
		r = new EReg("   *","g");
		out1 = out1.replace(r.r," ");
		var codec = new cosmicos_ChainCodec([new cosmicos_ParseCodec(this.vocab),new cosmicos_NormalizeCodec(this.vocab)]);
		var dest = new cosmicos_Statement(out1);
		codec.encode(dest);
		src.content = dest.content;
		return true;
	}
	,__class__: cosmicos_FourSymbolCodec
};
var cosmicos_Constants = function() { };
cosmicos_Constants.__name__ = ["cosmicos","Constants"];
var cosmicos_I32 = function() { };
cosmicos_I32.__name__ = ["cosmicos","I32"];
cosmicos_I32.B4 = function(v) {
	return v >>> 24 & -1;
};
cosmicos_I32.B3 = function(v) {
	return v >>> 16 & 255 & -1;
};
cosmicos_I32.B2 = function(v) {
	return v >>> 8 & 255 & -1;
};
cosmicos_I32.B1 = function(v) {
	return v & 255 & -1;
};
cosmicos_I32.abs = function(v) {
	return Math.abs(v) | 0;
};
cosmicos_I32.add = function(a,b) {
	return a + b;
};
cosmicos_I32.alphaFromArgb = function(v) {
	return v >>> 24 & -1;
};
cosmicos_I32.and = function(a,b) {
	return a & b;
};
cosmicos_I32.baseEncode = function(v,radix) {
	if(radix < 2 || radix > 36) {
		throw new js__$Boot_HaxeError("radix out of range");
	}
	var sb = "";
	var av = Math.abs(v) | 0;
	var radix32 = radix;
	while(true) {
		var r32 = av % radix32;
		sb = "0123456789abcdefghijklmnopqrstuvwxyz".charAt(r32 & -1) + sb;
		av = (av - r32) / radix32 | 0;
		if(av == 0) {
			break;
		}
	}
	if(v < 0) {
		return "-" + sb;
	}
	return sb;
};
cosmicos_I32.complement = function(v) {
	return ~v;
};
cosmicos_I32.compare = function(a,b) {
	return a - b;
};
cosmicos_I32.div = function(a,b) {
	return a / b | 0;
};
cosmicos_I32.encodeBE = function(i) {
	var b = new haxe_io_Bytes(new ArrayBuffer(4));
	b.b[0] = i >>> 24 & -1 & 255;
	b.b[1] = i >>> 16 & 255 & -1 & 255;
	b.b[2] = i >>> 8 & 255 & -1 & 255;
	b.b[3] = i & 255 & -1 & 255;
	return b;
};
cosmicos_I32.encodeLE = function(i) {
	var b = new haxe_io_Bytes(new ArrayBuffer(4));
	b.b[0] = i & 255 & -1 & 255;
	b.b[1] = i >>> 8 & 255 & -1 & 255;
	b.b[2] = i >>> 16 & 255 & -1 & 255;
	b.b[3] = i >>> 24 & -1 & 255;
	return b;
};
cosmicos_I32.decodeBE = function(s,pos) {
	if(pos == null) {
		pos = 0;
	}
	var b0 = s.b[pos + 3];
	var b1 = s.b[pos + 2];
	var b2 = s.b[pos + 1];
	var b3 = s.b[pos];
	b1 <<= 8;
	b2 <<= 16;
	b3 <<= 24;
	var a = b0 + b1;
	a += b2;
	a += b3;
	return a;
};
cosmicos_I32.decodeLE = function(s,pos) {
	if(pos == null) {
		pos = 0;
	}
	var b0 = s.b[pos];
	var b1 = s.b[pos + 1];
	var b2 = s.b[pos + 2];
	var b3 = s.b[pos + 3];
	b1 <<= 8;
	b2 <<= 16;
	b3 <<= 24;
	var a = b0 + b1;
	a += b2;
	a += b3;
	return a;
};
cosmicos_I32.eq = function(a,b) {
	return a == b;
};
cosmicos_I32.gt = function(a,b) {
	return a > b;
};
cosmicos_I32.gteq = function(a,b) {
	return a >= b;
};
cosmicos_I32.lt = function(a,b) {
	return a < b;
};
cosmicos_I32.lteq = function(a,b) {
	return a <= b;
};
cosmicos_I32.make = function(high,low) {
	return (high << 16) + low;
};
cosmicos_I32.makeColor = function(alpha,rgb) {
	return alpha << 24 | rgb & 16777215;
};
cosmicos_I32.mod = function(a,b) {
	return a % b;
};
cosmicos_I32.mul = function(a,b) {
	return a * b;
};
cosmicos_I32.neg = function(v) {
	return -v;
};
cosmicos_I32.ofInt = function(v) {
	return v;
};
cosmicos_I32.or = function(a,b) {
	return a | b;
};
cosmicos_I32.packBE = function(l) {
	var sb = new haxe_io_BytesBuffer();
	var _g1 = 0;
	var _g = l.length;
	while(_g1 < _g) {
		var i = _g1++;
		sb.b.push(l[i] >>> 24 & -1);
		sb.b.push(l[i] >>> 16 & 255 & -1);
		sb.b.push(l[i] >>> 8 & 255 & -1);
		sb.b.push(l[i] & 255 & -1);
	}
	return sb.getBytes();
};
cosmicos_I32.packLE = function(l) {
	var sb = new haxe_io_BytesBuffer();
	var _g1 = 0;
	var _g = l.length;
	while(_g1 < _g) {
		var i = _g1++;
		sb.b.push(l[i] & 255 & -1);
		sb.b.push(l[i] >>> 8 & 255 & -1);
		sb.b.push(l[i] >>> 16 & 255 & -1);
		sb.b.push(l[i] >>> 24 & -1);
	}
	return sb.getBytes();
};
cosmicos_I32.rgbFromArgb = function(v) {
	return v & 16777215;
};
cosmicos_I32.sub = function(a,b) {
	return a - b;
};
cosmicos_I32.shl = function(v,bits) {
	return v << bits;
};
cosmicos_I32.shr = function(v,bits) {
	return v >> bits;
};
cosmicos_I32.toColor = function(v) {
	return { alpha : v >>> 24 & -1, color : v & 16777215};
};
cosmicos_I32.toFloat = function(v) {
	return v * 1.0;
};
cosmicos_I32.toInt = function(v) {
	return v & -1;
};
cosmicos_I32.toNativeArray = function(v) {
	return v;
};
cosmicos_I32.unpackLE = function(s) {
	if(s == null || s.length == 0) {
		return [];
	}
	if(s.length % 4 != 0) {
		throw new js__$Boot_HaxeError("Buffer not multiple of 4 bytes");
	}
	var a = [];
	var pos = 0;
	var i = 0;
	var len = s.length;
	while(pos < len) {
		a[i] = cosmicos_I32.decodeLE(s,pos);
		pos += 4;
		++i;
	}
	return a;
};
cosmicos_I32.unpackBE = function(s) {
	if(s == null || s.length == 0) {
		return [];
	}
	if(s.length % 4 != 0) {
		throw new js__$Boot_HaxeError("Buffer not multiple of 4 bytes");
	}
	var a = [];
	var pos = 0;
	var i = 0;
	while(pos < s.length) {
		a[i] = cosmicos_I32.decodeBE(s,pos);
		pos += 4;
		++i;
	}
	return a;
};
cosmicos_I32.ushr = function(v,bits) {
	return v >>> bits;
};
cosmicos_I32.xor = function(a,b) {
	return a ^ b;
};
cosmicos_I32.intToHex = function(j) {
	var sb_b = "";
	var i = 8;
	while(i-- > 0) {
		var v = j >>> i * 4 & 15;
		sb_b += Std.string(StringTools.hex(v).toLowerCase());
	}
	return sb_b;
};
cosmicos_I32.int32ToHex = function(j) {
	var sb_b = "";
	var i = 8;
	var f = 15;
	while(i-- > 0) {
		var v = j >>> i * 4 & f & -1;
		sb_b += Std.string(StringTools.hex(v).toLowerCase());
	}
	return sb_b;
};
var cosmicos_ManuscriptStyle = $hx_exports["cosmicos"]["ManuscriptStyle"] = function() {
};
cosmicos_ManuscriptStyle.__name__ = ["cosmicos","ManuscriptStyle"];
cosmicos_ManuscriptStyle.prototype = {
	render: function(x) {
		this.out = [];
		this.need_ws = false;
		this.renderNest(x,false);
		return this.out;
	}
	,ws: function() {
		if(this.need_ws) {
			this.out.push(" ");
			this.need_ws = false;
		}
	}
	,nws: function() {
		this.need_ws = true;
	}
	,renderInt: function(x) {
		this.ws();
		this.out.push(x);
		this.nws();
	}
	,renderString: function(x) {
		this.ws();
		if(x == "") {
			this.out.push("");
			return;
		}
		this.out.push(x);
		this.nws();
	}
	,renderNest: function(x,nested) {
		var offset = 0;
		var parens = nested;
		if(x.length >= 1) {
			var e = x[0];
			if(e == -1 || e == -2) {
				offset = 1;
				if(e == -1) {
					this.ws();
					this.out.push("|");
					this.nws();
				}
				if(e == -2) {
					this.ws();
					this.out.push("$");
				}
				parens = false;
			}
		}
		if(parens) {
			this.out.push("(");
		}
		var _g1 = offset;
		var _g = x.length;
		while(_g1 < _g) {
			var i = _g1++;
			var e1 = x[i];
			if(typeof(e1) == "string") {
				this.renderString(e1);
			}
			if(typeof(e1) == "number" && ((e1 | 0) === e1)) {
				this.renderInt(e1);
			}
			if((e1 instanceof Array) && e1.__enum__ == null) {
				this.ws();
				this.renderNest(e1,true);
				this.nws();
			}
		}
		if(parens) {
			this.out.push(")");
		}
	}
	,__class__: cosmicos_ManuscriptStyle
};
var cosmicos_Memory = $hx_exports["cosmicos"]["Memory"] = function(parent,key,val) {
	if(key == null) {
		key = -1;
	}
	this.parent = parent;
	this.key = key;
	this.val = val;
	if(key == -1) {
		this.block = new haxe_ds_StringMap();
	}
};
cosmicos_Memory.__name__ = ["cosmicos","Memory"];
cosmicos_Memory.prototype = {
	add: function(key,val) {
		if(this.block != null) {
			var _this = this.block;
			var key1 = key;
			var value = val;
			if(__map_reserved[key1] != null) {
				_this.setReserved(key1,value);
			} else {
				_this.h[key1] = value;
			}
			return;
		}
		if(this.parent != null) {
			this.parent.add(key,val);
		}
	}
	,get: function(key) {
		if(this.block == null) {
			if(this.key == key) {
				return this.val;
			}
			if(this.parent == null) {
				return null;
			}
			return this.parent.get(key);
		}
		var _this = this.block;
		var key1 = key;
		var result = __map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1];
		if(result == null && this.parent != null) {
			result = this.parent.get(key);
		}
		return result;
	}
	,__class__: cosmicos_Memory
};
var cosmicos_NormalizeCodec = $hx_exports["cosmicos"]["NormalizeCodec"] = function(vocab) {
	this.vocab = vocab;
};
cosmicos_NormalizeCodec.__name__ = ["cosmicos","NormalizeCodec"];
cosmicos_NormalizeCodec.__interfaces__ = [cosmicos_Codec];
cosmicos_NormalizeCodec.prototype = {
	encode: function(src) {
		cosmicos_Parse.encodeSymbols(src.content,this.vocab);
		return true;
	}
	,decode: function(src) {
		src.content = this.recover(src.content,0);
		return true;
	}
	,recover: function(v,level) {
		if((v instanceof Array) && v.__enum__ == null) {
			var ei = v;
			var _g1 = 0;
			var _g = ei.length;
			while(_g1 < _g) {
				var i = _g1++;
				ei[i] = this.recover(ei[i],level + 1);
			}
			return ei;
		} else {
			return cosmicos_Parse.recover(v);
		}
	}
	,__class__: cosmicos_NormalizeCodec
};
var cosmicos_Parse = $hx_exports["cosmicos"]["Parse"] = function() { };
cosmicos_Parse.__name__ = ["cosmicos","Parse"];
cosmicos_Parse.removePipes = function(x,bracketlevel) {
	var res = "";
	var ch = x.charAt(x.length - 1);
	if(ch == ";") {
		x = HxOverrides.substr(x,0,x.length - 1);
	}
	var level = 0;
	var slashes = 0;
	var appendstr = "";
	var substring = "";
	var oldch = "";
	var _g1 = 0;
	var _g = x.length;
	while(_g1 < _g) {
		var i = _g1++;
		var ch1 = x.charAt(i);
		var delta_level = 0;
		appendstr = "";
		if(ch1 == "(") {
			++level;
			delta_level = 1;
		}
		if(ch1 == ")") {
			--level;
			delta_level = -1;
		}
		if(level == 0) {
			if(ch1 == "|" || ch1 == "/") {
				++slashes;
				appendstr = "(";
			} else {
				appendstr = ch1;
				if((oldch == "/" || oldch == "|") && appendstr == " ") {
					appendstr = "";
				}
			}
			if(delta_level == -1) {
				appendstr = "(" + cosmicos_Parse.removePipes(HxOverrides.substr(substring,1,substring.length),bracketlevel + 1) + ")";
				substring = "";
			}
		} else {
			substring += ch1;
		}
		res += appendstr;
		oldch = ch1;
	}
	var _g11 = 0;
	var _g2 = slashes;
	while(_g11 < _g2) {
		var i1 = _g11++;
		res += ")";
	}
	return res;
};
cosmicos_Parse.removeDollars = function(x) {
	var terminalsymbols = " ();";
	var founddollar = false;
	var res = "";
	var dollarstring = "";
	var _g1 = 0;
	var _g = x.length;
	while(_g1 < _g) {
		var i = _g1++;
		var ch = x.charAt(i);
		if(ch == "$") {
			founddollar = true;
		}
		if(founddollar) {
			if(terminalsymbols.indexOf(ch) != -1 || i == x.length - 1) {
				if(i != x.length - 1) {
					res += "(" + dollarstring + ")";
					res += ch;
				} else {
					res += "(" + dollarstring + ch + ")";
				}
				dollarstring = "";
				founddollar = false;
			} else if(ch != "$") {
				dollarstring += ch;
			}
		} else {
			res += ch;
		}
	}
	return res;
};
cosmicos_Parse.removeFlatteningSyntax = function(x) {
	var res = cosmicos_Parse.removePipes(x,0);
	res = cosmicos_Parse.removeDollars(res);
	return res;
};
cosmicos_Parse.stringToList = function(x,vocab) {
	var ch = x.charAt(x.length - 1);
	if(ch == ";") {
		x = HxOverrides.substr(x,0,x.length - 1);
	}
	var level = 0;
	var _g1 = 0;
	var _g = x.length;
	while(_g1 < _g) {
		var i = _g1++;
		var ch1 = x.charAt(i);
		if(ch1 == "(" || ch1 == "{") {
			++level;
		}
		if(ch1 == ")" || ch1 == "}") {
			--level;
		}
	}
	if(level != 0) {
		return null;
	}
	var result = cosmicos_Parse.stringToListCore(x,vocab);
	return result;
};
cosmicos_Parse.stringToListCore = function(x,vocab) {
	var result = [];
	var prefix = [];
	x = " " + x + " )";
	var cache = "";
	var level = 0;
	var slashed = false;
	var _g1 = 0;
	var _g = x.length;
	while(_g1 < _g) {
		var i = _g1++;
		var ch = x.charAt(i);
		if(ch == "\n" || ch == "\r" || ch == ";" && level < 0) {
			ch = " ";
		}
		if(ch == "(" || ch == "{") {
			++level;
			if(level == 1) {
				continue;
			}
		}
		if((ch == "/" || ch == "|") && level == 0) {
			level = 1;
			slashed = true;
			continue;
		}
		if(ch == ")" || ch == "}") {
			--level;
			if(level == 0) {
				var r = cosmicos_Parse.stringToListCore(cache,vocab);
				result.push(r);
				if(slashed) {
					result[result.length - 1].unshift(-1);
					slashed = false;
				}
				cache = "";
				continue;
			}
		}
		if(ch == ";") {
			if(level > (slashed ? 1 : 0)) {
				cache += ch;
			}
		} else if(ch != " " || level > 0) {
			cache += ch;
		}
		if(level == 0 && (ch == " " || ch == ";") && cache.length > 0) {
			if(cache.charAt(0) == "$") {
				cache = HxOverrides.substr(cache,1,cache.length - 1);
				result.push([-2,cache]);
			} else {
				result.push(cache);
			}
			cache = "";
		}
		if(ch == ";" && level == 1 && slashed) {
			var r1 = cosmicos_Parse.stringToListCore(cache,vocab);
			result.push(r1);
			if(slashed) {
				result[result.length - 1].unshift(-1);
				slashed = false;
			}
			prefix.push(result);
			result = [];
			cache = "";
			level = 0;
			continue;
		}
		if(ch == ";" && level == 0) {
			prefix.push(result);
			result = [];
			cache = "";
			continue;
		}
	}
	if(prefix.length > 0) {
		if(result.length == 0) {
			result = prefix;
		} else {
			result = prefix.concat(result);
		}
	}
	return result;
};
cosmicos_Parse.looksLikeMutation = function(v) {
	if((v instanceof Array) && v.__enum__ == null) {
		var e = v;
		var _g1 = 0;
		var _g = e.length;
		while(_g1 < _g) {
			var i = _g1++;
			var v1 = e[i];
			if(cosmicos_Parse.looksLikeMutation(v1)) {
				return true;
			}
		}
	} else if(v == "@" || v == "define" || v == "set!" || v == "class" || v == "act") {
		return true;
	}
	return false;
};
cosmicos_Parse.encodeSymbols = function(e,vocab,numeric) {
	if(numeric == null) {
		numeric = false;
	}
	var _g1 = 0;
	var _g = e.length;
	while(_g1 < _g) {
		var i = _g1++;
		var v = e[i];
		if((v instanceof Array) && v.__enum__ == null) {
			var ei = v;
			cosmicos_Parse.encodeSymbols(ei,vocab,numeric);
		} else if(v == -1 || v == -2) {
			continue;
		} else {
			var str = v;
			var ch0 = str.charAt(0);
			if(ch0 < "0" || ch0 > "9") {
				if((ch0 == ":" || ch0 == ".") && str.length > 1) {
					v = new cosmicos_BitString(str);
				} else if(ch0 == "U" && new EReg("^U1*U$","").match(str)) {
					v = HxOverrides.substr(str,1,str.length - 2);
				} else if(ch0 == "\"") {
					var len = str.length;
					var u = cosmicos_BigInteger.ofInt(0);
					var times = cosmicos_BigInteger.ofInt(256);
					var _g3 = 1;
					var _g2 = len - 1;
					while(_g3 < _g2) {
						var j = _g3++;
						u = u.mul(times);
						u = u.add(cosmicos_BigInteger.ofInt(HxOverrides.cca(str,j)));
					}
					v = u;
				} else {
					v = str;
					if(v == "define") {
						v = "@";
					}
					if(numeric) {
						v = vocab.getInt(v);
					} else {
						v = vocab.get(v);
					}
				}
			} else if(str.charAt(str.length - 1) == "f") {
				v = parseFloat(HxOverrides.substr(str,0,str.length - 1));
			} else {
				v = Std.parseInt(str);
			}
			e[i] = v;
		}
	}
};
cosmicos_Parse.softCompare = function(x,y) {
	if(x.length != y.length) {
		return false;
	}
	var _g1 = 0;
	var _g = x.length;
	while(_g1 < _g) {
		var i = _g1++;
		var xi = x[i];
		var yi = y[i];
		if(((xi instanceof Array) && xi.__enum__ == null) != ((yi instanceof Array) && yi.__enum__ == null)) {
			if((xi instanceof Array) && xi.__enum__ == null) {
				var xia = xi;
				if(xia.length != 1) {
					return false;
				}
				if(xia[0].asBigInteger().compare(cosmicos_Evaluate.bi(yi)) != 0) {
					return false;
				}
			} else {
				var yia = yi;
				if(yia.length != 1) {
					return false;
				}
				if(yia[0].asBigInteger().compare(cosmicos_Evaluate.bi(xi)) != 0) {
					return false;
				}
			}
		} else if((xi instanceof Array) && xi.__enum__ == null) {
			var xia1 = xi;
			var yia1 = yi;
			if(!cosmicos_Parse.softCompare(xia1,yia1)) {
				return false;
			}
		} else if(js_Boot.__instanceof(xi,cosmicos_BitString) && js_Boot.__instanceof(yi,cosmicos_BitString)) {
			if(xi.txt != yi.txt) {
				return false;
			}
		} else if(xi != yi) {
			return false;
		}
	}
	return true;
};
cosmicos_Parse.removeSlashMarker = function(e) {
	var _g1 = 0;
	var _g = e.length;
	while(_g1 < _g) {
		var i = _g1++;
		var v = e[i];
		if((v instanceof Array) && v.__enum__ == null) {
			var ei = v;
			cosmicos_Parse.removeSlashMarker(ei);
		}
	}
	if(e.length > 0) {
		if(e[0] == -1 || e[0] == -2) {
			e.shift();
		}
	}
};
cosmicos_Parse.textify = function(e,vocab) {
	var txt = "";
	if((e instanceof Array) && e.__enum__ == null) {
		var lst = e;
		var len = lst.length;
		txt += "(";
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			if(i > 0) {
				txt += " ";
			}
			txt += cosmicos_Parse.textify(lst[i],vocab);
		}
		txt += ")";
		return txt;
	}
	var v = vocab.reverse(e);
	if(v == null) {
		return "" + Std.string(e);
	}
	return Std.string(e) + "-" + v;
};
cosmicos_Parse.codifyInner = function(e,level,vocab) {
	var txt = "";
	var need_paren = level > 0;
	var first = 0;
	if(e.length > 0) {
		if(e[0] == -1) {
			txt += "123";
			need_paren = false;
			++first;
		} else if(e[0] == -2) {
			txt += "023";
			need_paren = false;
			++first;
		}
	}
	if(need_paren) {
		txt += "2";
	}
	var _g1 = first;
	var _g = e.length;
	while(_g1 < _g) {
		var i = _g1++;
		var v = e[i];
		if((v instanceof Array) && v.__enum__ == null) {
			var ei = v;
			txt += cosmicos_Parse.codifyInner(ei,level + 1,vocab);
		} else if(js_Boot.__instanceof(v,cosmicos_BitString)) {
			var bs = v;
			var str = bs.txt;
			var len = str.length;
			if(str.length == 0 || str.charAt(0) == "1") {
				txt += "0";
				var _g3 = 0;
				var _g2 = len;
				while(_g3 < _g2) {
					var j = _g3++;
					txt += "1";
				}
				txt += "0";
			} else {
				var _g31 = 0;
				var _g21 = len;
				while(_g31 < _g21) {
					var j1 = _g31++;
					txt += str.charAt(j1) == ":" ? "1" : "0";
				}
			}
		} else if(typeof(v) == "string") {
			var str1 = v;
			var len1 = str1.length;
			var rem = 0;
			var ch = str1.charAt(0);
			if(ch >= "0" && ch <= "9") {
				rem = Std.parseInt(str1);
			} else {
				rem = vocab.getBase(str1);
			}
			var b = "";
			while(true) {
				b = (rem % 2 != 0 ? "1" : "0") + b;
				rem = rem / 2 | 0;
				if(!(rem != 0)) {
					break;
				}
			}
			txt += "2" + b + "3";
		} else if(js_Boot.__instanceof(v,cosmicos_BigInteger)) {
			var b1 = "";
			var rem1 = v;
			var two = cosmicos_BigInteger.get_ONE().add(cosmicos_BigInteger.get_ONE());
			while(true) {
				var d = rem1.divideAndRemainder(two);
				b1 = d[1].toString() + b1;
				rem1 = d[0];
				if(!(!rem1.eq(cosmicos_BigInteger.get_ZERO()))) {
					break;
				}
			}
			txt += "2" + b1 + "3";
		} else {
			var b2 = "";
			var rem2 = v;
			while(true) {
				b2 = (rem2 % 2 != 0 ? "1" : "0") + b2;
				rem2 = rem2 / 2 | 0;
				if(!(rem2 != 0)) {
					break;
				}
			}
			txt += "2" + b2 + "3";
		}
	}
	if(need_paren) {
		txt += "3";
	}
	return txt;
};
cosmicos_Parse.codify = function(e,vocab) {
	var txt = cosmicos_Parse.codifyInner(e,0,vocab);
	txt += "2233";
	return txt;
};
cosmicos_Parse.recoverList = function(e) {
	var _g1 = 0;
	var _g = e.length;
	while(_g1 < _g) {
		var i = _g1++;
		var v = e[i];
		if((v instanceof Array) && v.__enum__ == null) {
			var ei = v;
			cosmicos_Parse.recoverList(ei);
		} else {
			e[i] = cosmicos_Parse.recover(v);
		}
	}
};
cosmicos_Parse.examine = function(e) {
	var o = e[0];
	console.log("my type is " + Type.getClassName(o == null ? null : js_Boot.getClass(o)));
};
cosmicos_Parse.recover = function(x) {
	if(typeof(x) == "number" && ((x | 0) === x)) {
		return x;
	}
	if(js_Boot.__instanceof(x,cosmicos_BigInteger)) {
		var txt = "";
		var mod = cosmicos_BigInteger.ofInt(256);
		while(x.compare(cosmicos_BigInteger.get_ZERO()) > 0) {
			var rem = x.mod(mod);
			txt = String.fromCharCode(rem.toInt()) + txt;
			x = x.div(mod);
		}
		return "\"" + txt + "\"";
	}
	if(js_Boot.__instanceof(x,cosmicos_BitString)) {
		var bs = x;
		return bs.txt;
	}
	var txt1 = "";
	if((x instanceof Array) && x.__enum__ == null) {
		var lst = x;
		var len = lst.length;
		txt1 += "(vector ";
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			if(i > 0) {
				txt1 += " ";
			}
			txt1 += Std.string(cosmicos_Parse.recover(lst[i]));
		}
		txt1 += ")";
		return txt1;
	}
	if(typeof(x) == "string") {
		return x;
	}
	return "???";
};
var cosmicos_ParseCodec = $hx_exports["cosmicos"]["ParseCodec"] = function(vocab,top) {
	if(top == null) {
		top = true;
	}
	this.vocab = vocab;
	this.top = top;
};
cosmicos_ParseCodec.__name__ = ["cosmicos","ParseCodec"];
cosmicos_ParseCodec.__interfaces__ = [cosmicos_Codec];
cosmicos_ParseCodec.prototype = {
	encode: function(src) {
		var txt = src.content[0];
		src.content = cosmicos_Parse.stringToList(txt,this.vocab);
		return true;
	}
	,decode: function(src) {
		if(this.top) {
			src.content = [this.flatten(src.content,0) + ";"];
		} else {
			src.content = [this.flatten(src.content,1)];
		}
		return true;
	}
	,flatten: function(v,level) {
		if((v instanceof Array) && v.__enum__ == null) {
			var ei = v;
			var txts = [];
			var len = ei.length;
			var has_flattener = false;
			var flattener = 0;
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i = _g1++;
				if(i == 0 && ei[i] < 0) {
					has_flattener = true;
					flattener = ei[i];
					continue;
				}
				txts.push(this.flatten(ei[i],level + 1));
			}
			var result = txts.join(" ");
			if(has_flattener) {
				if(flattener == -2) {
					result = "$" + result;
				} else {
					result = "| " + result;
				}
			} else if(level > 0) {
				result = "(" + result + ")";
			}
			return result;
		}
		return Std.string(v);
	}
	,__class__: cosmicos_ParseCodec
};
var cosmicos_PreprocessCodec = $hx_exports["cosmicos"]["PreprocessCodec"] = function(state) {
	this.config = state.getConfig();
};
cosmicos_PreprocessCodec.__name__ = ["cosmicos","PreprocessCodec"];
cosmicos_PreprocessCodec.__interfaces__ = [cosmicos_Codec];
cosmicos_PreprocessCodec.prototype = {
	encode: function(src) {
		if(!this.config.useFlattener()) {
			src.content[0] = cosmicos_Parse.removeFlatteningSyntax(src.content[0]);
		}
		return true;
	}
	,decode: function(src) {
		return true;
	}
	,__class__: cosmicos_PreprocessCodec
};
var cosmicos_Sound = $hx_exports["cosmicos"]["Sound"] = function() {
	this.units = 0;
};
cosmicos_Sound.__name__ = ["cosmicos","Sound"];
cosmicos_Sound.main = function() {
};
cosmicos_Sound.prototype = {
	show: function(x,n) {
		var _g1 = 0;
		var _g = n;
		while(_g1 < _g) {
			var i = _g1++;
			var v = x % 256;
			this.txt.b += String.fromCharCode(v);
			x >>= 8;
		}
	}
	,show_header: function(sample_len) {
		this.txt.b += HxOverrides.substr("RIFF",0,null);
		this.show(36 + sample_len,4);
		this.txt.b += HxOverrides.substr("WAVE",0,null);
		this.txt.b += HxOverrides.substr("fmt ",0,null);
		this.show(16,4);
		this.show(1,2);
		this.show(1,2);
		this.show(16000,4);
		this.show(16000,4);
		this.show(1,2);
		this.show(8,2);
		this.txt.b += HxOverrides.substr("data",0,null);
		this.show(sample_len,4);
	}
	,render: function(text,header) {
		var unit_len = 4000;
		var char_len = text.length;
		var variation = 0.5;
		var qraise = Math.sqrt(Math.sqrt(2));
		var qminor = 2;
		var base = 2;
		if(header) {
			var sample_len = unit_len * (this.units > char_len ? this.units : char_len);
			this.show_header(sample_len);
		}
		var v = 0;
		var n_prev = 0;
		var n2_prev = -1;
		var k_prev = 4;
		var _g1 = 0;
		var _g = char_len;
		while(_g1 < _g) {
			var i = _g1++;
			var k = HxOverrides.cca(text,i) - 48;
			var n = k;
			var n2 = -1;
			var chord = 0;
			if(k == 2) {
				base *= qraise;
				n = base;
				chord = 1;
			}
			if(k == 3) {
				base /= qraise;
				n = base;
				chord = 1;
			}
			if(k == 0) {
				n2 = base / qminor;
				n = base;
			}
			if(k == 1) {
				n2 = base * qminor;
				n = base;
			}
			var _g3 = 0;
			var _g2 = unit_len;
			while(_g3 < _g2) {
				var j = _g3++;
				var q = 0;
				var factor = j / 80.0;
				var tweak = 1 - Math.abs(j - unit_len / 2) / (unit_len / 2);
				if(factor > 1) {
					factor = 1;
				}
				if(k != 4 && k != 5) {
					q += factor * 100 * Math.sin(n * v);
					if(n2 >= 0) {
						q += factor * 20 * Math.sin(n2 * v);
					}
					var tmp = chord != 0;
				}
				if(k_prev != 4 && k_prev != 5) {
					if(i != 0) {
						q += (1 - factor) * 100 * Math.sin(n_prev * v);
					}
				}
				if(n2_prev >= 0) {
					q += (1 - factor) * 20 * Math.sin(n2_prev * v);
				}
				if(k == 4 || k == 5) {
					if(k == 4) {
						q += tweak * factor * 50 * Math.sin(base * v);
						q += tweak * factor * 25 * Math.sin(2 * base * v);
					} else {
						q += tweak * factor * 50 * Math.sin(base * v);
						q += tweak * factor * 25 * Math.sin(2 * base * v);
						q += tweak * factor * 12 * Math.sin(4 * base * v);
						q += tweak * factor * 12 * Math.sin(8 * base * v);
					}
				}
				this.show(128 + (q | 0),1);
				v += 0.1;
			}
			n_prev = n;
			k_prev = k;
			n2_prev = n2;
		}
	}
	,textToWav: function(text,content_mode) {
		this.txt = new StringBuf();
		if(content_mode) {
			this.txt.b += HxOverrides.substr("Content-Type: audio/x-wav",0,null);
			this.txt.b += "\n";
			this.txt.b += "\n";
		}
		this.render(text,true);
		var result = this.txt.b;
		return result;
	}
	,addText: function(text) {
		this.render(text,false);
	}
	,practiceText: function(text) {
		this.units += text.length;
	}
	,drainWav: function() {
		var result = this.txt.b;
		this.txt = new StringBuf();
		return result;
	}
	,textToWavUrl: function(text) {
		this.txt = new StringBuf();
		this.render(text,true);
		var enc = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"));
		var str = this.txt.b;
		var b = new haxe_io_Bytes(new ArrayBuffer(str.length));
		var _g1 = 0;
		var _g = str.length;
		while(_g1 < _g) {
			var i = _g1++;
			var v = str.charCodeAt(i);
			b.b[i] = v & 255;
		}
		return "data:audio/wav;base64," + enc.encodeBytes(b).toString();
	}
	,__class__: cosmicos_Sound
};
var cosmicos_State = $hx_exports["cosmicos"]["State"] = function(config) {
	this.config = config;
	this.vocab = null;
	this.mem = null;
};
cosmicos_State.__name__ = ["cosmicos","State"];
cosmicos_State.prototype = {
	setConfig: function(config) {
		this.config = config;
	}
	,useIntVocab: function() {
		this.vocab = new cosmicos_Vocab(true);
	}
	,getVocab: function() {
		if(this.vocab == null) {
			this.vocab = new cosmicos_Vocab();
		}
		return this.vocab;
	}
	,getMemory: function() {
		if(this.mem == null) {
			this.mem = new cosmicos_Memory(null);
		}
		return this.mem;
	}
	,getConfig: function() {
		if(this.config == null) {
			this.config = new cosmicos_Config();
		}
		return this.config;
	}
	,__class__: cosmicos_State
};
var cosmicos_Statement = $hx_exports["cosmicos"]["Statement"] = function(txt) {
	if(txt != null) {
		this.content = [txt];
	} else {
		this.content = null;
	}
};
cosmicos_Statement.__name__ = ["cosmicos","Statement"];
cosmicos_Statement.prototype = {
	copy: function() {
		var result = new cosmicos_Statement();
		if(this.content != null) {
			result.content = this.copyArray(this.content);
		}
		return result;
	}
	,copyArray: function(e) {
		var result = [];
		var _g1 = 0;
		var _g = e.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ei = e[i];
			if((ei instanceof Array) && ei.__enum__ == null) {
				result.push(this.copyArray(ei));
			} else {
				result.push(ei);
			}
		}
		return result;
	}
	,__class__: cosmicos_Statement
};
var cosmicos_TranslateCodec = $hx_exports["cosmicos"]["TranslateCodec"] = function(state) {
	this.state = state;
};
cosmicos_TranslateCodec.__name__ = ["cosmicos","TranslateCodec"];
cosmicos_TranslateCodec.__interfaces__ = [cosmicos_Codec];
cosmicos_TranslateCodec.prototype = {
	encode: function(src) {
		src.content = cosmicos_Cons.consify(src.content);
		var vocab = this.state.getVocab();
		if(vocab.exists("translate")) {
			var mem = this.state.getMemory();
			var translate = mem.get(vocab.get("translate"));
			if(translate != null) {
				src.content = translate(src.content);
			}
		}
		return true;
	}
	,decode: function(src) {
		src.content = cosmicos_Cons.deconsify(src.content);
		console.log("Translated");
		console.log(src.content);
		return true;
	}
	,__class__: cosmicos_TranslateCodec
};
var cosmicos_UnflattenCodec = $hx_exports["cosmicos"]["UnflattenCodec"] = function() {
};
cosmicos_UnflattenCodec.__name__ = ["cosmicos","UnflattenCodec"];
cosmicos_UnflattenCodec.__interfaces__ = [cosmicos_Codec];
cosmicos_UnflattenCodec.prototype = {
	encode: function(src) {
		cosmicos_Parse.removeSlashMarker(src.content);
		return true;
	}
	,decode: function(src) {
		this.unflatten(src.content,0);
		return true;
	}
	,unflatten: function(v,level) {
		if((v instanceof Array) && v.__enum__ == null) {
			var ei = v;
			var len = ei.length;
			var has_flattener = false;
			var _g1 = 0;
			var _g = len;
			while(_g1 < _g) {
				var i = _g1++;
				this.unflatten(ei[i],level + 1);
				if(i == len - 1 && ((ei[i] instanceof Array) && ei[i].__enum__ == null)) {
					var etail = ei[i];
					if(etail.length > 0) {
						if(etail[0] != -1 && etail[0] != -2) {
							etail.splice(0,0,-1);
						}
					}
				}
			}
			if(len == 1) {
				ei.splice(0,0,-2);
			}
		}
	}
	,__class__: cosmicos_UnflattenCodec
};
var cosmicos_Vocab = $hx_exports["cosmicos"]["Vocab"] = function(useInt) {
	if(useInt == null) {
		useInt = false;
	}
	this.clear();
	this.useInt = useInt;
};
cosmicos_Vocab.__name__ = ["cosmicos","Vocab"];
cosmicos_Vocab.prototype = {
	clear: function() {
		this.nameToCode = new haxe_ds_StringMap();
		this.codeToName = new haxe_ds_IntMap();
		this.nameToMeta = new haxe_ds_StringMap();
		this.used = new haxe_ds_StringMap();
		this.topCode = 0;
	}
	,getBase: function(name) {
		if(name == "define") {
			name = "@";
		}
		var _this = this.nameToCode;
		if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
			while(this.codeToName.h.hasOwnProperty(this.topCode)) this.topCode++;
			var value = this.topCode;
			var _this1 = this.nameToCode;
			if(__map_reserved[name] != null) {
				_this1.setReserved(name,value);
			} else {
				_this1.h[name] = value;
			}
			this.codeToName.h[this.topCode] = name;
			this.topCode++;
		}
		var _this2 = this.nameToCode;
		if(__map_reserved[name] != null) {
			return _this2.getReserved(name);
		} else {
			return _this2.h[name];
		}
	}
	,'use': function(name) {
		var _this = this.used;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,1);
		} else {
			_this.h[name] = 1;
		}
	}
	,get: function(name) {
		if(name == "define") {
			name = "@";
		}
		var code = this.getBase(name);
		if(this.useInt) {
			return code;
		} else {
			return name;
		}
	}
	,getInt: function(name) {
		if(name == "define") {
			name = "@";
		}
		var code = this.getBase(name);
		return code;
	}
	,exists: function(name) {
		var _this = this.nameToCode;
		if(__map_reserved[name] != null) {
			return _this.existsReserved(name);
		} else {
			return _this.h.hasOwnProperty(name);
		}
	}
	,check: function(name,id) {
		var _this = this.nameToCode;
		if(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name)) {
			var nid = this.getBase(name);
			if(id != nid) {
				throw new js__$Boot_HaxeError("id for " + name + " is unexpected (" + nid + " vs " + id + ")");
			}
		} else if(this.codeToName.h.hasOwnProperty(id)) {
			throw new js__$Boot_HaxeError("problem with " + name);
		} else {
			this.set(name,id);
		}
		return this.get(name);
	}
	,set: function(name,id) {
		this.codeToName.h[id] = name;
		var _this = this.nameToCode;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,id);
		} else {
			_this.h[name] = id;
		}
		return this.get(name);
	}
	,setMeta: function(name,meta) {
		var _this = this.nameToMeta;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,meta);
		} else {
			_this.h[name] = meta;
		}
	}
	,getMeta: function(name) {
		var _this = this.nameToMeta;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,reverse: function(id) {
		return this.codeToName.h[id];
	}
	,getNames: function(decorated) {
		if(decorated == null) {
			decorated = false;
		}
		if(!decorated) {
			var _g = [];
			var i = this.nameToCode.keys();
			while(i.hasNext()) {
				var i1 = i.next();
				_g.push(i1);
			}
			return _g;
		}
		var result = [];
		var i2 = this.nameToCode.keys();
		while(i2.hasNext()) {
			var i3 = i2.next();
			var _this = this.used;
			if((__map_reserved[i3] != null ? _this.getReserved(i3) : _this.h[i3]) != null) {
				var _this1 = this.nameToCode;
				result.push(i3 + " = " + (__map_reserved[i3] != null ? _this1.getReserved(i3) : _this1.h[i3]));
			} else {
				var _this2 = this.nameToCode;
				result.push("((" + i3 + " = " + (__map_reserved[i3] != null ? _this2.getReserved(i3) : _this2.h[i3]) + "))");
			}
		}
		return result;
	}
	,__class__: cosmicos_Vocab
};
var cosmicos_VocabMeta = $hx_exports["cosmicos"]["VocabMeta"] = function(description,example) {
	this.description = description;
	this.example = example;
};
cosmicos_VocabMeta.__name__ = ["cosmicos","VocabMeta"];
cosmicos_VocabMeta.prototype = {
	__class__: cosmicos_VocabMeta
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = ["haxe","IMap"];
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	__class__: haxe_ds_IntMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_BytesBuffer = function() {
	this.b = [];
};
haxe_io_BytesBuffer.__name__ = ["haxe","io","BytesBuffer"];
haxe_io_BytesBuffer.prototype = {
	getBytes: function() {
		var bytes = new haxe_io_Bytes(new Uint8Array(this.b).buffer);
		this.b = null;
		return bytes;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = ["js","Boot"];
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.__name__ = ["Array"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var dbits = 30;
switch(dbits) {
case 26:
	cosmicos_BigInteger.defaultAm = 1;
	break;
case 28:
	cosmicos_BigInteger.defaultAm = 3;
	break;
case 30:
	cosmicos_BigInteger.defaultAm = 2;
	break;
default:
	throw new js__$Boot_HaxeError("bad dbits value");
}
cosmicos_BigInteger.DB = dbits;
cosmicos_BigInteger.DM = (1 << cosmicos_BigInteger.DB) - 1;
cosmicos_BigInteger.DV = 1 << cosmicos_BigInteger.DB;
cosmicos_BigInteger.BI_FP = 52;
cosmicos_BigInteger.FV = Math.pow(2,cosmicos_BigInteger.BI_FP);
cosmicos_BigInteger.F1 = cosmicos_BigInteger.BI_FP - cosmicos_BigInteger.DB;
cosmicos_BigInteger.F2 = 2 * cosmicos_BigInteger.DB - cosmicos_BigInteger.BI_FP;
cosmicos_BigInteger.initBiRc();
cosmicos_BigInteger.BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
cosmicos_BigInteger.lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509];
cosmicos_BigInteger.lplim = 67108864 / cosmicos_BigInteger.lowprimes[cosmicos_BigInteger.lowprimes.length - 1] | 0;
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
cosmicos_BigInteger.MAX_RADIX = 36;
cosmicos_BigInteger.MIN_RADIX = 2;
cosmicos_Constants.DIGITS_BASE10 = "0123456789";
cosmicos_Constants.DIGITS_HEXU = "0123456789ABCDEF";
cosmicos_Constants.DIGITS_HEXL = "0123456789abcdef";
cosmicos_Constants.DIGITS_OCTAL = "01234567";
cosmicos_Constants.DIGITS_BN = "0123456789abcdefghijklmnopqrstuvwxyz";
cosmicos_Constants.DIGITS_BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
cosmicos_Constants.PROTO_HTTP = "http://";
cosmicos_Constants.PROTO_HTTPS = "http://";
cosmicos_Constants.PROTO_FILE = "file://";
cosmicos_Constants.PROTO_FTP = "ftp://";
cosmicos_Constants.PROTO_RTMP = "rtmp://";
cosmicos_I32.ZERO = 0;
cosmicos_I32.ONE = 1;
cosmicos_I32.BYTE_MASK = 255;
js_Boot.__toStr = ({ }).toString;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
cosmicos_Evaluate.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
