name: CosmicOS
markdown: redcarpet
pygments: true
baseurl: 
#baseurl: /cosmicos
msg:
  - 
    role: "file"
    lines: 
      - "== COS_License =="
    stanza: 0
  - 
    role: "comment"
    lines: 
      - "#   Author: Paul Fitzpatrick, paulfitz@csail.mit.edu"
      - "#   Copyright (c) 2005 Paul Fitzpatrick"
      - "#"
      - "#   This file is part of CosmicOS."
      - "#"
      - "#   CosmicOS is free software; you can redistribute it and/or modify"
      - "#   it under the terms of the GNU General Public License as published by"
      - "#   the Free Software Foundation; either version 2 of the License, or"
      - "#   (at your option) any later version."
      - "#"
      - "#   CosmicOS is distributed in the hope that it will be useful,"
      - "#   but WITHOUT ANY WARRANTY; without even the implied warranty of"
      - "#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"
      - "#   GNU General Public License for more details."
      - "#"
      - "#   You should have received a copy of the GNU General Public License"
      - "#   along with CosmicOS; if not, write to the Free Software"
      - "#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA"
      - "#"
    stanza: 1
  - 
    role: "file"
    lines: 
      - "== COS_Unary =="
    stanza: 2
  - 
    role: "comment"
    lines: 
      - "# MATH introduce numbers (in unary notation)"
      - "# Here we count up, go through some primes, etc."
      - "# There is some syntax around the numbers, but that doesn't"
      - "# need to be understood at this point."
      - "# Any 'words' written here are converted to arbitrary integers"
      - "# in the actual message.  Any word ending in -in-unary will be given"
      - "# in unary rather than the binary code used in the main body"
      - "# of the message."
    section_description: "introduce numbers (in unary notation)"
    section_category: "MATH"
    section_index: 0
    stanza: 3
  - 
    role: "code"
    lines: 
      - "intro-in-unary U1U;"
    code: "000102233"
    stanza: 4
  - 
    role: "code"
    lines: 
      - "intro-in-unary U11U;"
    code: "0001102233"
    stanza: 5
  - 
    role: "code"
    lines: 
      - "intro-in-unary U111U;"
    code: "00011102233"
    stanza: 6
  - 
    role: "code"
    lines: 
      - "intro-in-unary U1111U;"
    code: "000111102233"
    stanza: 7
  - 
    role: "code"
    lines: 
      - "intro-in-unary U11111U;"
    code: "0001111102233"
    stanza: 8
  - 
    role: "code"
    lines: 
      - "intro-in-unary U111111U;"
    code: "00011111102233"
    stanza: 9
  - 
    role: "code"
    lines: 
      - "intro-in-unary U1111111U;"
    code: "000111111102233"
    stanza: 10
  - 
    role: "code"
    lines: 
      - "intro-in-unary U11111111U;"
    code: "0001111111102233"
    stanza: 11
  - 
    role: "code"
    lines: 
      - "intro-in-unary U111111111U;"
    code: "00011111111102233"
    stanza: 12
  - 
    role: "code"
    lines: 
      - "intro-in-unary U1111111111U;"
    code: "000111111111102233"
    stanza: 13
  - 
    role: "code"
    lines: 
      - "intro-in-unary U11111111111U;"
    code: "0001111111111102233"
    stanza: 14
  - 
    role: "code"
    lines: 
      - "intro-in-unary U111111111111U;"
    code: "00011111111111102233"
    stanza: 15
  - 
    role: "code"
    lines: 
      - "intro-in-unary U1111111111111U;"
    code: "000111111111111102233"
    stanza: 16
  - 
    role: "code"
    lines: 
      - "intro-in-unary U11111111111111U;"
    code: "0001111111111111102233"
    stanza: 17
  - 
    role: "code"
    lines: 
      - "intro-in-unary U111111111111111U;"
    code: "00011111111111111102233"
    stanza: 18
  - 
    role: "code"
    lines: 
      - "intro-in-unary U1111111111111111U;"
    code: "000111111111111111102233"
    stanza: 19
  - 
    role: "code"
    lines: 
      - "intro-in-unary U11U;"
    code: "0001102233"
    stanza: 20
  - 
    role: "code"
    lines: 
      - "intro-in-unary U111U;"
    code: "00011102233"
    stanza: 21
  - 
    role: "code"
    lines: 
      - "intro-in-unary U11111U;"
    code: "0001111102233"
    stanza: 22
  - 
    role: "code"
    lines: 
      - "intro-in-unary U1111111U;"
    code: "000111111102233"
    stanza: 23
  - 
    role: "code"
    lines: 
      - "intro-in-unary U11111111111U;"
    code: "0001111111111102233"
    stanza: 24
  - 
    role: "code"
    lines: 
      - "intro-in-unary U1111111111111U;"
    code: "000111111111111102233"
    stanza: 25
  - 
    role: "code"
    lines: 
      - "intro-in-unary U1U;"
    code: "000102233"
    stanza: 26
  - 
    role: "code"
    lines: 
      - "intro-in-unary U1111U;"
    code: "000111102233"
    stanza: 27
  - 
    role: "code"
    lines: 
      - "intro-in-unary U111111111U;"
    code: "00011111111102233"
    stanza: 28
  - 
    role: "code"
    lines: 
      - "intro-in-unary U1111111111111111U;"
    code: "000111111111111111102233"
    stanza: 29
  - 
    role: "comment"
    lines: 
      - "# MATH introduce equality for unary numbers"
      - "# The intro operator does nothing essential, and could be"
      - "# omitted - it just tags the first use of a new operator."
      - "# The = operator is introduced alongside a duplication of"
      - "# unary numbers.  The meaning will not quite by nailed down"
      - "# until we see other relational operators."
    section_description: "introduce equality for unary numbers"
    section_category: "MATH"
    section_index: 1
    stanza: 30
  - 
    role: "code"
    lines: 
      - "=-in-unary U1U U1U;"
    code: "01100100102233"
    stanza: 31
  - 
    role: "code"
    lines: 
      - "=-in-unary U11U U11U;"
    code: "0110011001102233"
    stanza: 32
  - 
    role: "code"
    lines: 
      - "=-in-unary U111U U111U;"
    code: "011001110011102233"
    stanza: 33
  - 
    role: "code"
    lines: 
      - "=-in-unary U1111U U1111U;"
    code: "01100111100111102233"
    stanza: 34
  - 
    role: "code"
    lines: 
      - "=-in-unary U11111U U11111U;"
    code: "0110011111001111102233"
    stanza: 35
  - 
    role: "code"
    lines: 
      - "=-in-unary U111111U U111111U;"
    code: "011001111110011111102233"
    stanza: 36
  - 
    role: "code"
    lines: 
      - "=-in-unary U1111111U U1111111U;"
    code: "01100111111100111111102233"
    stanza: 37
  - 
    role: "code"
    lines: 
      - "=-in-unary U11111111U U11111111U;"
    code: "0110011111111001111111102233"
    stanza: 38
  - 
    role: "code"
    lines: 
      - "=-in-unary U1U U1U;"
    code: "01100100102233"
    stanza: 39
  - 
    role: "code"
    lines: 
      - "=-in-unary U111111U U111111U;"
    code: "011001111110011111102233"
    stanza: 40
  - 
    role: "code"
    lines: 
      - "=-in-unary U11U U11U;"
    code: "0110011001102233"
    stanza: 41
  - 
    role: "comment"
    lines: 
      - "# MATH now introduce other relational operators"
      - "# After this lesson, it should be clear what contexts"
      - "# < > and = are appropriate in."
      - "# drive the lesson home"
    section_description: "now introduce other relational operators"
    section_category: "MATH"
    section_index: 2
    stanza: 42
  - 
    role: "code"
    lines: 
      - "=-in-unary U1U U1U;"
    code: "01100100102233"
    stanza: 43
  - 
    role: "code"
    lines: 
      - ">-in-unary U11U U1U;"
    code: "0111001100102233"
    stanza: 44
  - 
    role: "code"
    lines: 
      - ">-in-unary U111U U1U;"
    code: "01110011100102233"
    stanza: 45
  - 
    role: "code"
    lines: 
      - ">-in-unary U1111U U1U;"
    code: "011100111100102233"
    stanza: 46
  - 
    role: "code"
    lines: 
      - "<-in-unary U1U U11U;"
    code: "01001001102233"
    stanza: 47
  - 
    role: "code"
    lines: 
      - "=-in-unary U11U U11U;"
    code: "0110011001102233"
    stanza: 48
  - 
    role: "code"
    lines: 
      - ">-in-unary U111U U11U;"
    code: "011100111001102233"
    stanza: 49
  - 
    role: "code"
    lines: 
      - ">-in-unary U1111U U11U;"
    code: "0111001111001102233"
    stanza: 50
  - 
    role: "code"
    lines: 
      - "<-in-unary U1U U111U;"
    code: "010010011102233"
    stanza: 51
  - 
    role: "code"
    lines: 
      - "<-in-unary U11U U111U;"
    code: "0100110011102233"
    stanza: 52
  - 
    role: "code"
    lines: 
      - "=-in-unary U111U U111U;"
    code: "011001110011102233"
    stanza: 53
  - 
    role: "code"
    lines: 
      - ">-in-unary U1111U U111U;"
    code: "01110011110011102233"
    stanza: 54
  - 
    role: "code"
    lines: 
      - "<-in-unary U1U U1111U;"
    code: "0100100111102233"
    stanza: 55
  - 
    role: "code"
    lines: 
      - "<-in-unary U11U U1111U;"
    code: "01001100111102233"
    stanza: 56
  - 
    role: "code"
    lines: 
      - "<-in-unary U111U U1111U;"
    code: "010011100111102233"
    stanza: 57
  - 
    role: "code"
    lines: 
      - "=-in-unary U1111U U1111U;"
    code: "01100111100111102233"
    stanza: 58
  - 
    role: "code"
    lines: 
      - ">-in-unary U1U UU;"
    code: "01110010002233"
    stanza: 59
  - 
    role: "code"
    lines: 
      - ">-in-unary U111111111U U11U;"
    code: "011100111111111001102233"
    stanza: 60
  - 
    role: "code"
    lines: 
      - ">-in-unary U111111U UU;"
    code: "0111001111110002233"
    stanza: 61
  - 
    role: "code"
    lines: 
      - ">-in-unary U11U UU;"
    code: "011100110002233"
    stanza: 62
  - 
    role: "code"
    lines: 
      - ">-in-unary U11111111U U11U;"
    code: "01110011111111001102233"
    stanza: 63
  - 
    role: "code"
    lines: 
      - ">-in-unary U1111U U1U;"
    code: "011100111100102233"
    stanza: 64
  - 
    role: "code"
    lines: 
      - ">-in-unary U11U UU;"
    code: "011100110002233"
    stanza: 65
  - 
    role: "code"
    lines: 
      - ">-in-unary U1111111111U U1U;"
    code: "011100111111111100102233"
    stanza: 66
  - 
    role: "code"
    lines: 
      - ">-in-unary U111111U U1U;"
    code: "01110011111100102233"
    stanza: 67
  - 
    role: "code"
    lines: 
      - ">-in-unary U111111111U U1U;"
    code: "01110011111111100102233"
    stanza: 68
  - 
    role: "code"
    lines: 
      - ">-in-unary U1111111U U1U;"
    code: "011100111111100102233"
    stanza: 69
  - 
    role: "code"
    lines: 
      - "<-in-unary UU U1U;"
    code: "010000102233"
    stanza: 70
  - 
    role: "code"
    lines: 
      - "<-in-unary U111U U1111111111U;"
    code: "010011100111111111102233"
    stanza: 71
  - 
    role: "code"
    lines: 
      - "<-in-unary U1111U U111111111U;"
    code: "010011110011111111102233"
    stanza: 72
  - 
    role: "code"
    lines: 
      - "<-in-unary U11U U1111U;"
    code: "01001100111102233"
    stanza: 73
  - 
    role: "code"
    lines: 
      - "<-in-unary U1U U1111111U;"
    code: "0100100111111102233"
    stanza: 74
  - 
    role: "code"
    lines: 
      - "<-in-unary UU U1111111111U;"
    code: "010000111111111102233"
    stanza: 75
  - 
    role: "code"
    lines: 
      - "<-in-unary UU U11U;"
    code: "0100001102233"
    stanza: 76
  - 
    role: "code"
    lines: 
      - "<-in-unary UU U11U;"
    code: "0100001102233"
    stanza: 77
  - 
    role: "code"
    lines: 
      - "<-in-unary U1U U111U;"
    code: "010010011102233"
    stanza: 78
  - 
    role: "code"
    lines: 
      - "<-in-unary U11U U11111U;"
    code: "010011001111102233"
    stanza: 79
  - 
    role: "code"
    lines: 
      - "<-in-unary U1U U1111U;"
    code: "0100100111102233"
    stanza: 80
  - 
    role: "comment"
    lines: 
      - "# switch to binary labelling for commands"
    stanza: 81
  - 
    role: "code"
    lines: 
      - "= U1U U1U;"
    code: "21030100102233"
    stanza: 82
  - 
    role: "code"
    lines: 
      - "> U11U U1U;"
    code: "211301100102233"
    stanza: 83
  - 
    role: "code"
    lines: 
      - "> U111U U1U;"
    code: "2113011100102233"
    stanza: 84
  - 
    role: "code"
    lines: 
      - "> U1111U U1U;"
    code: "21130111100102233"
    stanza: 85
  - 
    role: "code"
    lines: 
      - "< U1U U11U;"
    code: "21301001102233"
    stanza: 86
  - 
    role: "code"
    lines: 
      - "= U11U U11U;"
    code: "2103011001102233"
    stanza: 87
  - 
    role: "code"
    lines: 
      - "> U111U U11U;"
    code: "21130111001102233"
    stanza: 88
  - 
    role: "code"
    lines: 
      - "> U1111U U11U;"
    code: "211301111001102233"
    stanza: 89
  - 
    role: "code"
    lines: 
      - "< U1U U111U;"
    code: "213010011102233"
    stanza: 90
  - 
    role: "code"
    lines: 
      - "< U11U U111U;"
    code: "2130110011102233"
    stanza: 91
  - 
    role: "code"
    lines: 
      - "= U111U U111U;"
    code: "210301110011102233"
    stanza: 92
  - 
    role: "code"
    lines: 
      - "> U1111U U111U;"
    code: "2113011110011102233"
    stanza: 93
  - 
    role: "code"
    lines: 
      - "< U1U U1111U;"
    code: "2130100111102233"
    stanza: 94
  - 
    role: "code"
    lines: 
      - "< U11U U1111U;"
    code: "21301100111102233"
    stanza: 95
  - 
    role: "code"
    lines: 
      - "< U111U U1111U;"
    code: "213011100111102233"
    stanza: 96
  - 
    role: "code"
    lines: 
      - "= U1111U U1111U;"
    code: "21030111100111102233"
    stanza: 97
  - 
    role: "comment"
    lines: 
      - "# a few more random examples"
    stanza: 98
  - 
    role: "code"
    lines: 
      - "< U111U U1111U;"
    code: "213011100111102233"
    stanza: 99
  - 
    role: "code"
    lines: 
      - "= U1111U U1111U;"
    code: "21030111100111102233"
    stanza: 100
  - 
    role: "code"
    lines: 
      - "< U1U U11111U;"
    code: "21301001111102233"
    stanza: 101
  - 
    role: "code"
    lines: 
      - "> U1111U UU;"
    code: "2113011110002233"
    stanza: 102
  - 
    role: "code"
    lines: 
      - "> U11111U U1111U;"
    code: "211301111100111102233"
    stanza: 103
  - 
    role: "code"
    lines: 
      - "< U11U U111U;"
    code: "2130110011102233"
    stanza: 104
  - 
    role: "code"
    lines: 
      - "> U11U U1U;"
    code: "211301100102233"
    stanza: 105
  - 
    role: "code"
    lines: 
      - "> U11111U U1U;"
    code: "211301111100102233"
    stanza: 106
  - 
    role: "code"
    lines: 
      - "= U111U U111U;"
    code: "210301110011102233"
    stanza: 107
  - 
    role: "code"
    lines: 
      - "= U111U U111U;"
    code: "210301110011102233"
    stanza: 108
  - 
    role: "code"
    lines: 
      - "> U1U UU;"
    code: "2113010002233"
    stanza: 109
  - 
    role: "file"
    lines: 
      - "== COS_NotLogic =="
    stanza: 110
  - 
    role: "comment"
    lines: 
      - "# MATH introduce the NOT logical operator"
    section_description: "introduce the NOT logical operator"
    section_category: "MATH"
    section_index: 3
    stanza: 111
  - 
    role: "code"
    lines: 
      - "intro not;"
    code: "203210032233"
    stanza: 112
  - 
    role: "code"
    lines: 
      - "= UU UU;"
    code: "210300002233"
    stanza: 113
  - 
    role: "code"
    lines: 
      - "not / < UU UU;"
    code: "2100302321300002233"
    stanza: 114
  - 
    role: "code"
    lines: 
      - "not / > UU UU;"
    code: "21003023211300002233"
    stanza: 115
  - 
    role: "code"
    lines: 
      - "= U1111U U1111U;"
    code: "21030111100111102233"
    stanza: 116
  - 
    role: "code"
    lines: 
      - "not / < U1111U U1111U;"
    code: "210030232130111100111102233"
    stanza: 117
  - 
    role: "code"
    lines: 
      - "not / > U1111U U1111U;"
    code: "2100302321130111100111102233"
    stanza: 118
  - 
    role: "code"
    lines: 
      - "= U111111U U111111U;"
    code: "210301111110011111102233"
    stanza: 119
  - 
    role: "code"
    lines: 
      - "not / < U111111U U111111U;"
    code: "2100302321301111110011111102233"
    stanza: 120
  - 
    role: "code"
    lines: 
      - "not / > U111111U U111111U;"
    code: "21003023211301111110011111102233"
    stanza: 121
  - 
    role: "code"
    lines: 
      - "= U11U U11U;"
    code: "2103011001102233"
    stanza: 122
  - 
    role: "code"
    lines: 
      - "not / < U11U U11U;"
    code: "21003023213011001102233"
    stanza: 123
  - 
    role: "code"
    lines: 
      - "not / > U11U U11U;"
    code: "210030232113011001102233"
    stanza: 124
  - 
    role: "code"
    lines: 
      - "= U111U U111U;"
    code: "210301110011102233"
    stanza: 125
  - 
    role: "code"
    lines: 
      - "not / < U111U U111U;"
    code: "2100302321301110011102233"
    stanza: 126
  - 
    role: "code"
    lines: 
      - "not / > U111U U111U;"
    code: "21003023211301110011102233"
    stanza: 127
  - 
    role: "code"
    lines: 
      - "not / = U111U U1111111111U;"
    code: "210030232103011100111111111102233"
    stanza: 128
  - 
    role: "code"
    lines: 
      - "< U111U U1111111111U;"
    code: "213011100111111111102233"
    stanza: 129
  - 
    role: "code"
    lines: 
      - "not / > U111U U1111111111U;"
    code: "210030232113011100111111111102233"
    stanza: 130
  - 
    role: "code"
    lines: 
      - "not / = U11111U U1111111U;"
    code: "21003023210301111100111111102233"
    stanza: 131
  - 
    role: "code"
    lines: 
      - "< U11111U U1111111U;"
    code: "21301111100111111102233"
    stanza: 132
  - 
    role: "code"
    lines: 
      - "not / > U11111U U1111111U;"
    code: "21003023211301111100111111102233"
    stanza: 133
  - 
    role: "code"
    lines: 
      - "not / = U1U U11U;"
    code: "21003023210301001102233"
    stanza: 134
  - 
    role: "code"
    lines: 
      - "< U1U U11U;"
    code: "21301001102233"
    stanza: 135
  - 
    role: "code"
    lines: 
      - "not / > U1U U11U;"
    code: "21003023211301001102233"
    stanza: 136
  - 
    role: "code"
    lines: 
      - "not / = UU U11111U;"
    code: "2100302321030001111102233"
    stanza: 137
  - 
    role: "code"
    lines: 
      - "< UU U11111U;"
    code: "2130001111102233"
    stanza: 138
  - 
    role: "code"
    lines: 
      - "not / > UU U11111U;"
    code: "2100302321130001111102233"
    stanza: 139
  - 
    role: "code"
    lines: 
      - "not / = U11111111U U11111111111111U;"
    code: "210030232103011111111001111111111111102233"
    stanza: 140
  - 
    role: "code"
    lines: 
      - "< U11111111U U11111111111111U;"
    code: "213011111111001111111111111102233"
    stanza: 141
  - 
    role: "code"
    lines: 
      - "not / > U11111111U U11111111111111U;"
    code: "210030232113011111111001111111111111102233"
    stanza: 142
  - 
    role: "code"
    lines: 
      - "not / = U11111111111U U111111U;"
    code: "2100302321030111111111110011111102233"
    stanza: 143
  - 
    role: "code"
    lines: 
      - "> U11111111111U U111111U;"
    code: "21130111111111110011111102233"
    stanza: 144
  - 
    role: "code"
    lines: 
      - "not / < U11111111111U U111111U;"
    code: "210030232130111111111110011111102233"
    stanza: 145
  - 
    role: "code"
    lines: 
      - "not / = U111111111111U U11U;"
    code: "2100302321030111111111111001102233"
    stanza: 146
  - 
    role: "code"
    lines: 
      - "> U111111111111U U11U;"
    code: "21130111111111111001102233"
    stanza: 147
  - 
    role: "code"
    lines: 
      - "not / < U111111111111U U11U;"
    code: "210030232130111111111111001102233"
    stanza: 148
  - 
    role: "code"
    lines: 
      - "not / = U1111111111U U1111111U;"
    code: "2100302321030111111111100111111102233"
    stanza: 149
  - 
    role: "code"
    lines: 
      - "> U1111111111U U1111111U;"
    code: "21130111111111100111111102233"
    stanza: 150
  - 
    role: "code"
    lines: 
      - "not / < U1111111111U U1111111U;"
    code: "210030232130111111111100111111102233"
    stanza: 151
  - 
    role: "code"
    lines: 
      - "not / = U1111U UU;"
    code: "210030232103011110002233"
    stanza: 152
  - 
    role: "code"
    lines: 
      - "> U1111U UU;"
    code: "2113011110002233"
    stanza: 153
  - 
    role: "code"
    lines: 
      - "not / < U1111U UU;"
    code: "21003023213011110002233"
    stanza: 154
  - 
    role: "code"
    lines: 
      - "not / = U1111111111111111U U111111111U;"
    code: "210030232103011111111111111110011111111102233"
    stanza: 155
  - 
    role: "code"
    lines: 
      - "> U1111111111111111U U111111111U;"
    code: "2113011111111111111110011111111102233"
    stanza: 156
  - 
    role: "code"
    lines: 
      - "not / < U1111111111111111U U111111111U;"
    code: "21003023213011111111111111110011111111102233"
    stanza: 157
  - 
    role: "file"
    lines: 
      - "== COS_Addition =="
    stanza: 158
  - 
    role: "comment"
    lines: 
      - "# MATH introduce addition"
    section_description: "introduce addition"
    section_category: "MATH"
    section_index: 4
    stanza: 159
  - 
    role: "code"
    lines: 
      - "intro +;"
    code: "2032101032233"
    stanza: 160
  - 
    role: "code"
    lines: 
      - "= U11U / + UU U11U;"
    code: "210301100232101030001102233"
    stanza: 161
  - 
    role: "code"
    lines: 
      - "= U11111U / + U1111U U1U;"
    code: "210301111100232101030111100102233"
    stanza: 162
  - 
    role: "code"
    lines: 
      - "= U11U / + U11U UU;"
    code: "210301100232101030110002233"
    stanza: 163
  - 
    role: "code"
    lines: 
      - "= U1111U / + UU U1111U;"
    code: "2103011110023210103000111102233"
    stanza: 164
  - 
    role: "code"
    lines: 
      - "= U1111U / + U111U U1U;"
    code: "2103011110023210103011100102233"
    stanza: 165
  - 
    role: "code"
    lines: 
      - "= U111U / + U1U U11U;"
    code: "21030111002321010301001102233"
    stanza: 166
  - 
    role: "code"
    lines: 
      - "= UU / + UU UU;"
    code: "21030002321010300002233"
    stanza: 167
  - 
    role: "code"
    lines: 
      - "= U1111U / + U1111U UU;"
    code: "2103011110023210103011110002233"
    stanza: 168
  - 
    role: "code"
    lines: 
      - "= U111U / + U11U U1U;"
    code: "21030111002321010301100102233"
    stanza: 169
  - 
    role: "code"
    lines: 
      - "= U1111U / + U1111U UU;"
    code: "2103011110023210103011110002233"
    stanza: 170
  - 
    role: "file"
    lines: 
      - "== COS_Subtraction =="
    stanza: 171
  - 
    role: "comment"
    lines: 
      - "# MATH introduce subtraction"
    section_description: "introduce subtraction"
    section_category: "MATH"
    section_index: 5
    stanza: 172
  - 
    role: "code"
    lines: 
      - "intro -;"
    code: "2032101132233"
    stanza: 173
  - 
    role: "code"
    lines: 
      - "= UU / - U11U U11U;"
    code: "210300023210113011001102233"
    stanza: 174
  - 
    role: "code"
    lines: 
      - "= U1111U / - U11111U U1U;"
    code: "210301111002321011301111100102233"
    stanza: 175
  - 
    role: "code"
    lines: 
      - "= U11U / - U11U UU;"
    code: "210301100232101130110002233"
    stanza: 176
  - 
    role: "code"
    lines: 
      - "= UU / - U1111U U1111U;"
    code: "2103000232101130111100111102233"
    stanza: 177
  - 
    role: "code"
    lines: 
      - "= U111U / - U1111U U1U;"
    code: "2103011100232101130111100102233"
    stanza: 178
  - 
    role: "code"
    lines: 
      - "= U1U / - U111U U11U;"
    code: "21030100232101130111001102233"
    stanza: 179
  - 
    role: "code"
    lines: 
      - "= UU / - UU UU;"
    code: "21030002321011300002233"
    stanza: 180
  - 
    role: "code"
    lines: 
      - "= U1111U / - U1111U UU;"
    code: "2103011110023210113011110002233"
    stanza: 181
  - 
    role: "code"
    lines: 
      - "= U11U / - U111U U1U;"
    code: "21030110023210113011100102233"
    stanza: 182
  - 
    role: "code"
    lines: 
      - "= U1111U / - U1111U UU;"
    code: "2103011110023210113011110002233"
    stanza: 183
  - 
    role: "file"
    lines: 
      - "== COS_Multiplication =="
    stanza: 184
  - 
    role: "comment"
    lines: 
      - "# MATH introduce multiplication"
    section_description: "introduce multiplication"
    section_category: "MATH"
    section_index: 6
    stanza: 185
  - 
    role: "code"
    lines: 
      - "intro *;"
    code: "2032100132233"
    stanza: 186
  - 
    role: "code"
    lines: 
      - "= UU / * UU UU;"
    code: "21030002321001300002233"
    stanza: 187
  - 
    role: "code"
    lines: 
      - "= UU / * UU U1U;"
    code: "210300023210013000102233"
    stanza: 188
  - 
    role: "code"
    lines: 
      - "= UU / * UU U11U;"
    code: "2103000232100130001102233"
    stanza: 189
  - 
    role: "code"
    lines: 
      - "= UU / * UU U111U;"
    code: "21030002321001300011102233"
    stanza: 190
  - 
    role: "code"
    lines: 
      - "= UU / * U1U UU;"
    code: "210300023210013010002233"
    stanza: 191
  - 
    role: "code"
    lines: 
      - "= U1U / * U1U U1U;"
    code: "21030100232100130100102233"
    stanza: 192
  - 
    role: "code"
    lines: 
      - "= U11U / * U1U U11U;"
    code: "2103011002321001301001102233"
    stanza: 193
  - 
    role: "code"
    lines: 
      - "= U111U / * U1U U111U;"
    code: "210301110023210013010011102233"
    stanza: 194
  - 
    role: "code"
    lines: 
      - "= UU / * U11U UU;"
    code: "2103000232100130110002233"
    stanza: 195
  - 
    role: "code"
    lines: 
      - "= U11U / * U11U U1U;"
    code: "2103011002321001301100102233"
    stanza: 196
  - 
    role: "code"
    lines: 
      - "= U1111U / * U11U U11U;"
    code: "2103011110023210013011001102233"
    stanza: 197
  - 
    role: "code"
    lines: 
      - "= U111111U / * U11U U111U;"
    code: "2103011111100232100130110011102233"
    stanza: 198
  - 
    role: "code"
    lines: 
      - "= UU / * U111U UU;"
    code: "21030002321001301110002233"
    stanza: 199
  - 
    role: "code"
    lines: 
      - "= U111U / * U111U U1U;"
    code: "210301110023210013011100102233"
    stanza: 200
  - 
    role: "code"
    lines: 
      - "= U111111U / * U111U U11U;"
    code: "2103011111100232100130111001102233"
    stanza: 201
  - 
    role: "code"
    lines: 
      - "= U111111111U / * U111U U111U;"
    code: "21030111111111002321001301110011102233"
    stanza: 202
  - 
    role: "code"
    lines: 
      - "= UU / * UU U1U;"
    code: "210300023210013000102233"
    stanza: 203
  - 
    role: "code"
    lines: 
      - "= U111U / * U111U U1U;"
    code: "210301110023210013011100102233"
    stanza: 204
  - 
    role: "code"
    lines: 
      - "= UU / * U11U UU;"
    code: "2103000232100130110002233"
    stanza: 205
  - 
    role: "code"
    lines: 
      - "= UU / * UU U111U;"
    code: "21030002321001300011102233"
    stanza: 206
  - 
    role: "code"
    lines: 
      - "= U111U / * U111U U1U;"
    code: "210301110023210013011100102233"
    stanza: 207
  - 
    role: "code"
    lines: 
      - "= U11U / * U1U U11U;"
    code: "2103011002321001301001102233"
    stanza: 208
  - 
    role: "code"
    lines: 
      - "= UU / * UU UU;"
    code: "21030002321001300002233"
    stanza: 209
  - 
    role: "code"
    lines: 
      - "= UU / * U111U UU;"
    code: "21030002321001301110002233"
    stanza: 210
  - 
    role: "code"
    lines: 
      - "= UU / * U11U UU;"
    code: "2103000232100130110002233"
    stanza: 211
  - 
    role: "code"
    lines: 
      - "= UU / * U111U UU;"
    code: "21030002321001301110002233"
    stanza: 212
  - 
    role: "file"
    lines: 
      - "== COS_Binary =="
    stanza: 213
  - 
    role: "comment"
    lines: 
      - "# MATH introduce a simple form of binary notation"
      - "# After this lesson, in the higher-level version of the message,"
      - "# will expand decimal to stand for the binary notation given."
      - "# It wouldn't be hard to accompany this lesson with a more"
      - "# formal definition once functions are introduced (below)"
      - "# so maybe the transition to binary should be delayed?"
    section_description: "introduce a simple form of binary notation"
    section_category: "MATH"
    section_index: 7
    stanza: 214
  - 
    role: "code"
    lines: 
      - "= (:) U1U;"
    code: "21032130102233"
    stanza: 215
  - 
    role: "code"
    lines: 
      - "= (:.) U11U;"
    code: "2103210301102233"
    stanza: 216
  - 
    role: "code"
    lines: 
      - "= (:..) U1111U;"
    code: "2103210030111102233"
    stanza: 217
  - 
    role: "code"
    lines: 
      - "= (:...) U11111111U;"
    code: "210321000301111111102233"
    stanza: 218
  - 
    role: "code"
    lines: 
      - "= (:....) U1111111111111111U;"
    code: "210321000030111111111111111102233"
    stanza: 219
  - 
    role: "code"
    lines: 
      - "= (.) UU;"
    code: "2103203002233"
    stanza: 220
  - 
    role: "code"
    lines: 
      - "= (:) U1U;"
    code: "21032130102233"
    stanza: 221
  - 
    role: "code"
    lines: 
      - "= (:.) U11U;"
    code: "2103210301102233"
    stanza: 222
  - 
    role: "code"
    lines: 
      - "= (::) U111U;"
    code: "21032113011102233"
    stanza: 223
  - 
    role: "code"
    lines: 
      - "= (:..) U1111U;"
    code: "2103210030111102233"
    stanza: 224
  - 
    role: "code"
    lines: 
      - "= (:.:) U11111U;"
    code: "21032101301111102233"
    stanza: 225
  - 
    role: "code"
    lines: 
      - "= (::.) U111111U;"
    code: "210321103011111102233"
    stanza: 226
  - 
    role: "code"
    lines: 
      - "= (:::) U1111111U;"
    code: "2103211130111111102233"
    stanza: 227
  - 
    role: "code"
    lines: 
      - "= (:...) U11111111U;"
    code: "210321000301111111102233"
    stanza: 228
  - 
    role: "code"
    lines: 
      - "= (:..:) U111111111U;"
    code: "2103210013011111111102233"
    stanza: 229
  - 
    role: "code"
    lines: 
      - "= (:.:.) U1111111111U;"
    code: "21032101030111111111102233"
    stanza: 230
  - 
    role: "code"
    lines: 
      - "= (:.::) U11111111111U;"
    code: "210321011301111111111102233"
    stanza: 231
  - 
    role: "code"
    lines: 
      - "= (::..) U111111111111U;"
    code: "2103211003011111111111102233"
    stanza: 232
  - 
    role: "code"
    lines: 
      - "= (::.:) U1111111111111U;"
    code: "21032110130111111111111102233"
    stanza: 233
  - 
    role: "code"
    lines: 
      - "= (:::.) U11111111111111U;"
    code: "210321110301111111111111102233"
    stanza: 234
  - 
    role: "code"
    lines: 
      - "= (::::) U111111111111111U;"
    code: "2103211113011111111111111102233"
    stanza: 235
  - 
    role: "code"
    lines: 
      - "= (.) UU;"
    code: "2103203002233"
    stanza: 236
  - 
    role: "code"
    lines: 
      - "= (:::) U1111111U;"
    code: "2103211130111111102233"
    stanza: 237
  - 
    role: "code"
    lines: 
      - "= (::.:) U1111111111111U;"
    code: "21032110130111111111111102233"
    stanza: 238
  - 
    role: "code"
    lines: 
      - "= (:.:) U11111U;"
    code: "21032101301111102233"
    stanza: 239
  - 
    role: "code"
    lines: 
      - "= (:..:) U111111111U;"
    code: "2103210013011111111102233"
    stanza: 240
  - 
    role: "code"
    lines: 
      - "= (.) UU;"
    code: "2103203002233"
    stanza: 241
  - 
    role: "code"
    lines: 
      - "= (::) U111U;"
    code: "21032113011102233"
    stanza: 242
  - 
    role: "code"
    lines: 
      - "= (::::) U111111111111111U;"
    code: "2103211113011111111111111102233"
    stanza: 243
  - 
    role: "code"
    lines: 
      - "= (::..) U111111111111U;"
    code: "2103211003011111111111102233"
    stanza: 244
  - 
    role: "code"
    lines: 
      - "= (:.:) U11111U;"
    code: "21032101301111102233"
    stanza: 245
  - 
    role: "code"
    lines: 
      - "= (:.:) U11111U;"
    code: "21032101301111102233"
    stanza: 246
  - 
    role: "code"
    lines: 
      - "= (:..:) U111111111U;"
    code: "2103210013011111111102233"
    stanza: 247
  - 
    role: "code"
    lines: 
      - "= (:.) U11U;"
    code: "2103210301102233"
    stanza: 248
  - 
    role: "code"
    lines: 
      - "= (:) U1U;"
    code: "21032130102233"
    stanza: 249
  - 
    role: "code"
    lines: 
      - "= (::::) U111111111111111U;"
    code: "2103211113011111111111111102233"
    stanza: 250
  - 
    role: "code"
    lines: 
      - "= (:.) U11U;"
    code: "2103210301102233"
    stanza: 251
  - 
    role: "code"
    lines: 
      - "= U11111U / + U1111U U1U;"
    code: "210301111100232101030111100102233"
    stanza: 252
  - 
    role: "code"
    lines: 
      - "= (:.:) / + (:..) (:);"
    code: "210321013023210103210032132233"
    stanza: 253
  - 
    role: "code"
    lines: 
      - "= U1111111U / + U111111U U1U;"
    code: "2103011111110023210103011111100102233"
    stanza: 254
  - 
    role: "code"
    lines: 
      - "= (:::) / + (::.) (:);"
    code: "210321113023210103211032132233"
    stanza: 255
  - 
    role: "code"
    lines: 
      - "= U11111U / + U1111U U1U;"
    code: "210301111100232101030111100102233"
    stanza: 256
  - 
    role: "code"
    lines: 
      - "= (:.:) / + (:..) (:);"
    code: "210321013023210103210032132233"
    stanza: 257
  - 
    role: "code"
    lines: 
      - "= U1111U / + UU U1111U;"
    code: "2103011110023210103000111102233"
    stanza: 258
  - 
    role: "code"
    lines: 
      - "= (:..) / + (.) (:..);"
    code: "210321003023210103203210032233"
    stanza: 259
  - 
    role: "code"
    lines: 
      - "= U111111111U / + U1111111U U11U;"
    code: "21030111111111002321010301111111001102233"
    stanza: 260
  - 
    role: "code"
    lines: 
      - "= (:..:) / + (:::) (:.);"
    code: "21032100130232101032111321032233"
    stanza: 261
  - 
    role: "code"
    lines: 
      - "= U11111111111U / + U1111111U U1111U;"
    code: "210301111111111100232101030111111100111102233"
    stanza: 262
  - 
    role: "code"
    lines: 
      - "= (:.::) / + (:::) (:..);"
    code: "210321011302321010321113210032233"
    stanza: 263
  - 
    role: "code"
    lines: 
      - "= U1111111111U / + U111U U1111111U;"
    code: "2103011111111110023210103011100111111102233"
    stanza: 264
  - 
    role: "code"
    lines: 
      - "= (:.:.) / + (::) (:::);"
    code: "21032101030232101032113211132233"
    stanza: 265
  - 
    role: "code"
    lines: 
      - "= U111111U / + U11111U U1U;"
    code: "21030111111002321010301111100102233"
    stanza: 266
  - 
    role: "code"
    lines: 
      - "= (::.) / + (:.:) (:);"
    code: "210321103023210103210132132233"
    stanza: 267
  - 
    role: "code"
    lines: 
      - "= U1111U / * U1111U U1U;"
    code: "21030111100232100130111100102233"
    stanza: 268
  - 
    role: "code"
    lines: 
      - "= (:..) / * (:..) (:);"
    code: "210321003023210013210032132233"
    stanza: 269
  - 
    role: "code"
    lines: 
      - "= U1111U / * U1U U1111U;"
    code: "21030111100232100130100111102233"
    stanza: 270
  - 
    role: "code"
    lines: 
      - "= (:..) / * (:) (:..);"
    code: "210321003023210013213210032233"
    stanza: 271
  - 
    role: "code"
    lines: 
      - "= U1111U / * U1U U1111U;"
    code: "21030111100232100130100111102233"
    stanza: 272
  - 
    role: "code"
    lines: 
      - "= (:..) / * (:) (:..);"
    code: "210321003023210013213210032233"
    stanza: 273
  - 
    role: "code"
    lines: 
      - "= U111111U / * U11U U111U;"
    code: "2103011111100232100130110011102233"
    stanza: 274
  - 
    role: "code"
    lines: 
      - "= (::.) / * (:.) (::);"
    code: "210321103023210013210321132233"
    stanza: 275
  - 
    role: "code"
    lines: 
      - "= U111111U / * U11U U111U;"
    code: "2103011111100232100130110011102233"
    stanza: 276
  - 
    role: "code"
    lines: 
      - "= (::.) / * (:.) (::);"
    code: "210321103023210013210321132233"
    stanza: 277
  - 
    role: "code"
    lines: 
      - "= U1111U / * U11U U11U;"
    code: "2103011110023210013011001102233"
    stanza: 278
  - 
    role: "code"
    lines: 
      - "= (:..) / * (:.) (:.);"
    code: "210321003023210013210321032233"
    stanza: 279
  - 
    role: "code"
    lines: 
      - "= U111111111U / * U111U U111U;"
    code: "21030111111111002321001301110011102233"
    stanza: 280
  - 
    role: "code"
    lines: 
      - "= (:..:) / * (::) (::);"
    code: "2103210013023210013211321132233"
    stanza: 281
  - 
    role: "code"
    lines: 
      - "= U1111111111111111U / * U1111U U1111U;"
    code: "21030111111111111111100232100130111100111102233"
    stanza: 282
  - 
    role: "code"
    lines: 
      - "= (:....) / * (:..) (:..);"
    code: "2103210000302321001321003210032233"
    stanza: 283
  - 
    role: "file"
    lines: 
      - "== COS_Evaluation =="
    stanza: 284
  - 
    role: "comment"
    lines: 
      - "# MATH show local assignment"
    section_description: "show local assignment"
    section_category: "MATH"
    section_index: 8
    stanza: 285
  - 
    role: "code"
    lines: 
      - "assign 20 0 / = (20) 0;"
    code: "211103210100320302321032210100332032233"
    stanza: 286
  - 
    role: "code"
    lines: 
      - "assign 20 1 / = (20) 1;"
    code: "211103210100321302321032210100332132233"
    stanza: 287
  - 
    role: "code"
    lines: 
      - "assign 20 2 / = (20) 2;"
    code: "21110321010032103023210322101003321032233"
    stanza: 288
  - 
    role: "code"
    lines: 
      - "assign 21 0 / = (21) 0;"
    code: "211103210101320302321032210101332032233"
    stanza: 289
  - 
    role: "code"
    lines: 
      - "assign 21 1 / = (21) 1;"
    code: "211103210101321302321032210101332132233"
    stanza: 290
  - 
    role: "code"
    lines: 
      - "assign 21 2 / = (21) 2;"
    code: "21110321010132103023210322101013321032233"
    stanza: 291
  - 
    role: "code"
    lines: 
      - "assign 22 0 / = (22) 0;"
    code: "211103210110320302321032210110332032233"
    stanza: 292
  - 
    role: "code"
    lines: 
      - "assign 22 1 / = (22) 1;"
    code: "211103210110321302321032210110332132233"
    stanza: 293
  - 
    role: "code"
    lines: 
      - "assign 22 2 / = (22) 2;"
    code: "21110321011032103023210322101103321032233"
    stanza: 294
  - 
    role: "code"
    lines: 
      - "= 0 (assign 20 0 (20));"
    code: "21032032211103210100320322101003332233"
    stanza: 295
  - 
    role: "code"
    lines: 
      - "= 0 (assign 20 0 / 20);"
    code: "210320322111032101003203023210100332233"
    stanza: 296
  - 
    role: "code"
    lines: 
      - "= 0 / assign 20 0 / 20;"
    code: "2103203023211103210100320302321010032233"
    stanza: 297
  - 
    role: "code"
    lines: 
      - "= 20 / assign 20 0 20;"
    code: "21032101003023211103210100320321010032233"
    stanza: 298
  - 
    role: "code"
    lines: 
      - "= 5 / assign 20 0 5;"
    code: "2103210130232111032101003203210132233"
    stanza: 299
  - 
    role: "code"
    lines: 
      - "= 5 / assign 20 0 / assign 23 5 / 23;"
    code: "210321013023211103210100320302321110321011132101302321011132233"
    stanza: 300
  - 
    role: "code"
    lines: 
      - "= 23 / assign 20 0 / assign 23 5 23;"
    code: "21032101113023211103210100320302321110321011132101321011132233"
    stanza: 301
  - 
    role: "code"
    lines: 
      - "= 1 (assign 20 1 (20));"
    code: "21032132211103210100321322101003332233"
    stanza: 302
  - 
    role: "code"
    lines: 
      - "= 1 (assign 20 1 / 20);"
    code: "210321322111032101003213023210100332233"
    stanza: 303
  - 
    role: "code"
    lines: 
      - "= 1 / assign 20 1 / 20;"
    code: "2103213023211103210100321302321010032233"
    stanza: 304
  - 
    role: "code"
    lines: 
      - "= 20 / assign 20 1 20;"
    code: "21032101003023211103210100321321010032233"
    stanza: 305
  - 
    role: "code"
    lines: 
      - "= 5 / assign 20 1 5;"
    code: "2103210130232111032101003213210132233"
    stanza: 306
  - 
    role: "code"
    lines: 
      - "= 5 / assign 20 1 / assign 23 5 / 23;"
    code: "210321013023211103210100321302321110321011132101302321011132233"
    stanza: 307
  - 
    role: "code"
    lines: 
      - "= 23 / assign 20 1 / assign 23 5 23;"
    code: "21032101113023211103210100321302321110321011132101321011132233"
    stanza: 308
  - 
    role: "code"
    lines: 
      - "= 2 (assign 20 2 (20));"
    code: "2103210322111032101003210322101003332233"
    stanza: 309
  - 
    role: "code"
    lines: 
      - "= 2 (assign 20 2 / 20);"
    code: "21032103221110321010032103023210100332233"
    stanza: 310
  - 
    role: "code"
    lines: 
      - "= 2 / assign 20 2 / 20;"
    code: "210321030232111032101003210302321010032233"
    stanza: 311
  - 
    role: "code"
    lines: 
      - "= 20 / assign 20 2 20;"
    code: "210321010030232111032101003210321010032233"
    stanza: 312
  - 
    role: "code"
    lines: 
      - "= 5 / assign 20 2 5;"
    code: "21032101302321110321010032103210132233"
    stanza: 313
  - 
    role: "code"
    lines: 
      - "= 5 / assign 20 2 / assign 23 5 / 23;"
    code: "2103210130232111032101003210302321110321011132101302321011132233"
    stanza: 314
  - 
    role: "code"
    lines: 
      - "= 23 / assign 20 2 / assign 23 5 23;"
    code: "210321011130232111032101003210302321110321011132101321011132233"
    stanza: 315
  - 
    role: "code"
    lines: 
      - "= 0 (assign 21 0 (21));"
    code: "21032032211103210101320322101013332233"
    stanza: 316
  - 
    role: "code"
    lines: 
      - "= 0 (assign 21 0 / 21);"
    code: "210320322111032101013203023210101332233"
    stanza: 317
  - 
    role: "code"
    lines: 
      - "= 0 / assign 21 0 / 21;"
    code: "2103203023211103210101320302321010132233"
    stanza: 318
  - 
    role: "code"
    lines: 
      - "= 21 / assign 21 0 21;"
    code: "21032101013023211103210101320321010132233"
    stanza: 319
  - 
    role: "code"
    lines: 
      - "= 5 / assign 21 0 5;"
    code: "2103210130232111032101013203210132233"
    stanza: 320
  - 
    role: "code"
    lines: 
      - "= 5 / assign 21 0 / assign 23 5 / 23;"
    code: "210321013023211103210101320302321110321011132101302321011132233"
    stanza: 321
  - 
    role: "code"
    lines: 
      - "= 23 / assign 21 0 / assign 23 5 23;"
    code: "21032101113023211103210101320302321110321011132101321011132233"
    stanza: 322
  - 
    role: "code"
    lines: 
      - "= 1 (assign 21 1 (21));"
    code: "21032132211103210101321322101013332233"
    stanza: 323
  - 
    role: "code"
    lines: 
      - "= 1 (assign 21 1 / 21);"
    code: "210321322111032101013213023210101332233"
    stanza: 324
  - 
    role: "code"
    lines: 
      - "= 1 / assign 21 1 / 21;"
    code: "2103213023211103210101321302321010132233"
    stanza: 325
  - 
    role: "code"
    lines: 
      - "= 21 / assign 21 1 21;"
    code: "21032101013023211103210101321321010132233"
    stanza: 326
  - 
    role: "code"
    lines: 
      - "= 5 / assign 21 1 5;"
    code: "2103210130232111032101013213210132233"
    stanza: 327
  - 
    role: "code"
    lines: 
      - "= 5 / assign 21 1 / assign 23 5 / 23;"
    code: "210321013023211103210101321302321110321011132101302321011132233"
    stanza: 328
  - 
    role: "code"
    lines: 
      - "= 23 / assign 21 1 / assign 23 5 23;"
    code: "21032101113023211103210101321302321110321011132101321011132233"
    stanza: 329
  - 
    role: "code"
    lines: 
      - "= 2 (assign 21 2 (21));"
    code: "2103210322111032101013210322101013332233"
    stanza: 330
  - 
    role: "code"
    lines: 
      - "= 2 (assign 21 2 / 21);"
    code: "21032103221110321010132103023210101332233"
    stanza: 331
  - 
    role: "code"
    lines: 
      - "= 2 / assign 21 2 / 21;"
    code: "210321030232111032101013210302321010132233"
    stanza: 332
  - 
    role: "code"
    lines: 
      - "= 21 / assign 21 2 21;"
    code: "210321010130232111032101013210321010132233"
    stanza: 333
  - 
    role: "code"
    lines: 
      - "= 5 / assign 21 2 5;"
    code: "21032101302321110321010132103210132233"
    stanza: 334
  - 
    role: "code"
    lines: 
      - "= 5 / assign 21 2 / assign 23 5 / 23;"
    code: "2103210130232111032101013210302321110321011132101302321011132233"
    stanza: 335
  - 
    role: "code"
    lines: 
      - "= 23 / assign 21 2 / assign 23 5 23;"
    code: "210321011130232111032101013210302321110321011132101321011132233"
    stanza: 336
  - 
    role: "code"
    lines: 
      - "= 0 (assign 22 0 (22));"
    code: "21032032211103210110320322101103332233"
    stanza: 337
  - 
    role: "code"
    lines: 
      - "= 0 (assign 22 0 / 22);"
    code: "210320322111032101103203023210110332233"
    stanza: 338
  - 
    role: "code"
    lines: 
      - "= 0 / assign 22 0 / 22;"
    code: "2103203023211103210110320302321011032233"
    stanza: 339
  - 
    role: "code"
    lines: 
      - "= 22 / assign 22 0 22;"
    code: "21032101103023211103210110320321011032233"
    stanza: 340
  - 
    role: "code"
    lines: 
      - "= 5 / assign 22 0 5;"
    code: "2103210130232111032101103203210132233"
    stanza: 341
  - 
    role: "code"
    lines: 
      - "= 5 / assign 22 0 / assign 23 5 / 23;"
    code: "210321013023211103210110320302321110321011132101302321011132233"
    stanza: 342
  - 
    role: "code"
    lines: 
      - "= 23 / assign 22 0 / assign 23 5 23;"
    code: "21032101113023211103210110320302321110321011132101321011132233"
    stanza: 343
  - 
    role: "code"
    lines: 
      - "= 1 (assign 22 1 (22));"
    code: "21032132211103210110321322101103332233"
    stanza: 344
  - 
    role: "code"
    lines: 
      - "= 1 (assign 22 1 / 22);"
    code: "210321322111032101103213023210110332233"
    stanza: 345
  - 
    role: "code"
    lines: 
      - "= 1 / assign 22 1 / 22;"
    code: "2103213023211103210110321302321011032233"
    stanza: 346
  - 
    role: "code"
    lines: 
      - "= 22 / assign 22 1 22;"
    code: "21032101103023211103210110321321011032233"
    stanza: 347
  - 
    role: "code"
    lines: 
      - "= 5 / assign 22 1 5;"
    code: "2103210130232111032101103213210132233"
    stanza: 348
  - 
    role: "code"
    lines: 
      - "= 5 / assign 22 1 / assign 23 5 / 23;"
    code: "210321013023211103210110321302321110321011132101302321011132233"
    stanza: 349
  - 
    role: "code"
    lines: 
      - "= 23 / assign 22 1 / assign 23 5 23;"
    code: "21032101113023211103210110321302321110321011132101321011132233"
    stanza: 350
  - 
    role: "code"
    lines: 
      - "= 2 (assign 22 2 (22));"
    code: "2103210322111032101103210322101103332233"
    stanza: 351
  - 
    role: "code"
    lines: 
      - "= 2 (assign 22 2 / 22);"
    code: "21032103221110321011032103023210110332233"
    stanza: 352
  - 
    role: "code"
    lines: 
      - "= 2 / assign 22 2 / 22;"
    code: "210321030232111032101103210302321011032233"
    stanza: 353
  - 
    role: "code"
    lines: 
      - "= 22 / assign 22 2 22;"
    code: "210321011030232111032101103210321011032233"
    stanza: 354
  - 
    role: "code"
    lines: 
      - "= 5 / assign 22 2 5;"
    code: "21032101302321110321011032103210132233"
    stanza: 355
  - 
    role: "code"
    lines: 
      - "= 5 / assign 22 2 / assign 23 5 / 23;"
    code: "2103210130232111032101103210302321110321011132101302321011132233"
    stanza: 356
  - 
    role: "code"
    lines: 
      - "= 23 / assign 22 2 / assign 23 5 23;"
    code: "210321011130232111032101103210302321110321011132101321011132233"
    stanza: 357
  - 
    role: "comment"
    lines: 
      - "# Now for functions."
    stanza: 358
  - 
    role: "code"
    lines: 
      - "assign 20 (? 28 5) / = 5 (20 2);"
    code: "21110321010032211003211100321013302321032101322101003210332233"
    stanza: 359
  - 
    role: "code"
    lines: 
      - "assign 32 (? 24 5) / = 5 (32 3);"
    code: "2111032100000322110032110003210133023210321013221000003211332233"
    stanza: 360
  - 
    role: "code"
    lines: 
      - "assign 28 (? 29 6) / = 6 (28 2);"
    code: "21110321110032211003211101321103302321032110322111003210332233"
    stanza: 361
  - 
    role: "code"
    lines: 
      - "assign 30 (? 32 6) / = 6 (30 3);"
    code: "211103211110322110032100000321103302321032110322111103211332233"
    stanza: 362
  - 
    role: "code"
    lines: 
      - "assign 25 (? 38 (38)) / = 2 (25 2);"
    code: "2111032110013221100321001103221001103330232103210322110013210332233"
    stanza: 363
  - 
    role: "code"
    lines: 
      - "assign 23 (? 30 (30)) / = 3 (23 3);"
    code: "21110321011132211003211110322111103330232103211322101113211332233"
    stanza: 364
  - 
    role: "code"
    lines: 
      - "assign 25 (? 33 (33)) / = 2 (25 2);"
    code: "2111032110013221100321000013221000013330232103210322110013210332233"
    stanza: 365
  - 
    role: "code"
    lines: 
      - "assign 29 (? 21 (21)) / = 3 (29 3);"
    code: "21110321110132211003210101322101013330232103211322111013211332233"
    stanza: 366
  - 
    role: "code"
    lines: 
      - "assign 25 (? 32 / + (32) 1) / = 3 (25 2);"
    code: "2111032110013221100321000003023210103221000003321330232103211322110013210332233"
    stanza: 367
  - 
    role: "code"
    lines: 
      - "assign 31 (? 38 / + (38) 1) / = 4 (31 3);"
    code: "21110321111132211003210011030232101032210011033213302321032100322111113211332233"
    stanza: 368
  - 
    role: "code"
    lines: 
      - "assign 35 (? 33 / + (33) 1) / = 3 (35 2);"
    code: "211103210001132211003210000130232101032210000133213302321032113221000113210332233"
    stanza: 369
  - 
    role: "code"
    lines: 
      - "assign 32 (? 26 / + (26) 1) / = 4 (32 3);"
    code: "21110321000003221100321101030232101032211010332133023210321003221000003211332233"
    stanza: 370
  - 
    role: "code"
    lines: 
      - "assign y (? x / + (x) 6) / = (y 6) 12;"
    code: "21110321001003221100321001013023210103221001013321103302321032210010032110332110032233"
    stanza: 371
  - 
    role: "code"
    lines: 
      - "= ((? x / + (x) 6) 6) 12;"
    code: "2103222110032100101302321010322100101332110332110332110032233"
    stanza: 372
  - 
    role: "code"
    lines: 
      - "assign y (? x / + (x) 4) / = (y 0) 4;"
    code: "21110321001003221100321001013023210103221001013321003302321032210010032033210032233"
    stanza: 373
  - 
    role: "code"
    lines: 
      - "= ((? x / + (x) 4) 0) 4;"
    code: "2103222110032100101302321010322100101332100332033210032233"
    stanza: 374
  - 
    role: "code"
    lines: 
      - "assign y (? x / + (x) 12) / = (y 0) 12;"
    code: "2111032100100322110032100101302321010322100101332110033023210322100100320332110032233"
    stanza: 375
  - 
    role: "code"
    lines: 
      - "= ((? x / + (x) 12) 0) 12;"
    code: "210322211003210010130232101032210010133211003320332110032233"
    stanza: 376
  - 
    role: "code"
    lines: 
      - "assign y (? x / + (x) 15) / = (y 2) 17;"
    code: "211103210010032211003210010130232101032210010133211113302321032210010032103321000132233"
    stanza: 377
  - 
    role: "code"
    lines: 
      - "= ((? x / + (x) 15) 2) 17;"
    code: "21032221100321001013023210103221001013321111332103321000132233"
    stanza: 378
  - 
    role: "code"
    lines: 
      - "assign z (? x / ? y / + 1 / * (x) (y)) / = (z 13 4) 53;"
    code: "21110321001103221100321001013023211003210010030232101032130232100132210010133221001003330232103221001103211013210033211010132233"
    stanza: 379
  - 
    role: "code"
    lines: 
      - "assign z (? x / ? y / + 1 / * (x) (y)) / = ((z 13) 4) 53;"
    code: "2111032100110322110032100101302321100321001003023210103213023210013221001013322100100333023210322210011032110133210033211010132233"
    stanza: 380
  - 
    role: "code"
    lines: 
      - "= ((? x / ? y / + 1 / * (x) (y)) 13 4) 53;"
    code: "2103222110032100101302321100321001003023210103213023210013221001013322100100333211013210033211010132233"
    stanza: 381
  - 
    role: "code"
    lines: 
      - "= (((? x / ? y / + 1 / * (x) (y)) 13) 4) 53;"
    code: "210322221100321001013023211003210010030232101032130232100132210010133221001003332110133210033211010132233"
    stanza: 382
  - 
    role: "code"
    lines: 
      - "assign z (? x / ? y / + 1 / * (x) (y)) / = (z 5 6) 31;"
    code: "211103210011032211003210010130232110032100100302321010321302321001322100101332210010033302321032210011032101321103321111132233"
    stanza: 383
  - 
    role: "code"
    lines: 
      - "assign z (? x / ? y / + 1 / * (x) (y)) / = ((z 5) 6) 31;"
    code: "21110321001103221100321001013023211003210010030232101032130232100132210010133221001003330232103222100110321013321103321111132233"
    stanza: 384
  - 
    role: "code"
    lines: 
      - "= ((? x / ? y / + 1 / * (x) (y)) 5 6) 31;"
    code: "21032221100321001013023211003210010030232101032130232100132210010133221001003332101321103321111132233"
    stanza: 385
  - 
    role: "code"
    lines: 
      - "= (((? x / ? y / + 1 / * (x) (y)) 5) 6) 31;"
    code: "2103222211003210010130232110032100100302321010321302321001322100101332210010033321013321103321111132233"
    stanza: 386
  - 
    role: "code"
    lines: 
      - "assign z (? x / ? y / + 1 / * (x) (y)) / = (z 7 8) 57;"
    code: "21110321001103221100321001013023211003210010030232101032130232100132210010133221001003330232103221001103211132100033211100132233"
    stanza: 387
  - 
    role: "code"
    lines: 
      - "assign z (? x / ? y / + 1 / * (x) (y)) / = ((z 7) 8) 57;"
    code: "2111032100110322110032100101302321100321001003023210103213023210013221001013322100100333023210322210011032111332100033211100132233"
    stanza: 388
  - 
    role: "code"
    lines: 
      - "= ((? x / ? y / + 1 / * (x) (y)) 7 8) 57;"
    code: "2103222110032100101302321100321001003023210103213023210013221001013322100100333211132100033211100132233"
    stanza: 389
  - 
    role: "code"
    lines: 
      - "= (((? x / ? y / + 1 / * (x) (y)) 7) 8) 57;"
    code: "210322221100321001013023211003210010030232101032130232100132210010133221001003332111332100033211100132233"
    stanza: 390
  - 
    role: "code"
    lines: 
      - "assign z (? x / ? y / + 1 / * (x) (y)) / = (z 8 2) 17;"
    code: "211103210011032211003210010130232110032100100302321010321302321001322100101332210010033302321032210011032100032103321000132233"
    stanza: 391
  - 
    role: "code"
    lines: 
      - "assign z (? x / ? y / + 1 / * (x) (y)) / = ((z 8) 2) 17;"
    code: "21110321001103221100321001013023211003210010030232101032130232100132210010133221001003330232103222100110321000332103321000132233"
    stanza: 392
  - 
    role: "code"
    lines: 
      - "= ((? x / ? y / + 1 / * (x) (y)) 8 2) 17;"
    code: "21032221100321001013023211003210010030232101032130232100132210010133221001003332100032103321000132233"
    stanza: 393
  - 
    role: "code"
    lines: 
      - "= (((? x / ? y / + 1 / * (x) (y)) 8) 2) 17;"
    code: "2103222211003210010130232110032100100302321010321302321001322100101332210010033321000332103321000132233"
    stanza: 394
  - 
    role: "code"
    lines: 
      - "assign w (? x / ? y / ? z / = (z) / + (x) (y)) / w 15 14 29;"
    code: "211103210011132211003210010130232110032100100302321100321001103023210322100110330232101032210010133221001003330232100111321111321110321110132233"
    stanza: 395
  - 
    role: "code"
    lines: 
      - "assign w (? x / ? y / ? z / = (z) / + (x) (y)) / w 5 8 13;"
    code: "2111032100111322110032100101302321100321001003023211003210011030232103221001103302321010322100101332210010033302321001113210132100032110132233"
    stanza: 396
  - 
    role: "code"
    lines: 
      - "assign w (? x / ? y / ? z / = (z) / + (x) (y)) / w 12 15 27;"
    code: "211103210011132211003210010130232110032100100302321100321001103023210322100110330232101032210010133221001003330232100111321100321111321101132233"
    stanza: 397
  - 
    role: "code"
    lines: 
      - "assign w (? x / ? y / ? z / = (z) / + (x) (y)) / w 14 14 28;"
    code: "211103210011132211003210010130232110032100100302321100321001103023210322100110330232101032210010133221001003330232100111321110321110321110032233"
    stanza: 398
  - 
    role: "code"
    lines: 
      - "assign w (? x / ? y / ? z / = (z) / + (x) (y)) / w 8 0 8;"
    code: "21110321001113221100321001013023211003210010030232110032100110302321032210011033023210103221001013322100100333023210011132100032032100032233"
    stanza: 399
  - 
    role: "code"
    lines: 
      - "assign w (? x / ? y / ? z / = (z) / + (x) (y)) / w 15 9 24;"
    code: "211103210011132211003210010130232110032100100302321100321001103023210322100110330232101032210010133221001003330232100111321111321001321100032233"
    stanza: 400
  - 
    role: "code"
    lines: 
      - "assign w (? x / ? y / ? z / = (z) / + (x) (y)) / w 11 15 26;"
    code: "211103210011132211003210010130232110032100100302321100321001103023210322100110330232101032210010133221001003330232100111321011321111321101032233"
    stanza: 401
  - 
    role: "code"
    lines: 
      - "assign w (? x / ? y / ? z / = (z) / + (x) (y)) / w 5 7 12;"
    code: "211103210011132211003210010130232110032100100302321100321001103023210322100110330232101032210010133221001003330232100111321013211132110032233"
    stanza: 402
  - 
    role: "file"
    lines: 
      - "== COS_DefineFunction =="
    stanza: 403
  - 
    role: "comment"
    lines: 
      - "# MATH demonstrate existence of memory"
    section_description: "demonstrate existence of memory"
    section_category: "MATH"
    section_index: 9
    stanza: 404
  - 
    role: "code"
    lines: 
      - "define forty-something 42;"
    code: "21101321010003210101032233"
    stanza: 405
  - 
    role: "code"
    lines: 
      - "= 42 (forty-something);"
    code: "21032101010322101000332233"
    stanza: 406
  - 
    role: "comment"
    lines: 
      - "# now introduce a function"
    stanza: 407
  - 
    role: "code"
    lines: 
      - "assign square (? x / * (x) (x)) / = 0 (square 0);"
    code: "21110321010013221100321001013023210013221001013322100101333023210320322101001320332233"
    stanza: 408
  - 
    role: "code"
    lines: 
      - "assign square (? x / * (x) (x)) / = 16 (square 4);"
    code: "21110321010013221100321001013023210013221001013322100101333023210321000032210100132100332233"
    stanza: 409
  - 
    role: "code"
    lines: 
      - "assign square (? x / * (x) (x)) / = 64 (square 8);"
    code: "21110321010013221100321001013023210013221001013322100101333023210321000000322101001321000332233"
    stanza: 410
  - 
    role: "code"
    lines: 
      - "assign square (? x / * (x) (x)) / = 9 (square 3);"
    code: "211103210100132211003210010130232100132210010133221001013330232103210013221010013211332233"
    stanza: 411
  - 
    role: "comment"
    lines: 
      - "# show that functions can be remembered across statements"
    stanza: 412
  - 
    role: "code"
    lines: 
      - "define square / ? x / * (x) (x);"
    code: "2110132101001302321100321001013023210013221001013322100101332233"
    stanza: 413
  - 
    role: "code"
    lines: 
      - "= (square 5) 25;"
    code: "210322101001321013321100132233"
    stanza: 414
  - 
    role: "code"
    lines: 
      - "= (square 0) 0;"
    code: "210322101001320332032233"
    stanza: 415
  - 
    role: "code"
    lines: 
      - "= (square 1) 1;"
    code: "210322101001321332132233"
    stanza: 416
  - 
    role: "code"
    lines: 
      - "= (square 9) 81;"
    code: "210322101001321001332101000132233"
    stanza: 417
  - 
    role: "code"
    lines: 
      - "define plusone / ? x / + (x) 1;"
    code: "211013210101030232110032100101302321010322100101332132233"
    stanza: 418
  - 
    role: "code"
    lines: 
      - "= (plusone 7) 8;"
    code: "21032210101032111332100032233"
    stanza: 419
  - 
    role: "code"
    lines: 
      - "= (plusone 3) 4;"
    code: "210322101010321133210032233"
    stanza: 420
  - 
    role: "code"
    lines: 
      - "= (plusone 3) 4;"
    code: "210322101010321133210032233"
    stanza: 421
  - 
    role: "code"
    lines: 
      - "= (plusone 5) 6;"
    code: "2103221010103210133211032233"
    stanza: 422
  - 
    role: "file"
    lines: 
      - "== COS_TrueFalse =="
    stanza: 423
  - 
    role: "comment"
    lines: 
      - "# MATH use equality for truth values"
    section_description: "use equality for truth values"
    section_category: "MATH"
    section_index: 10
    stanza: 424
  - 
    role: "code"
    lines: 
      - "= (= U11U U11U) (> U1111U U11U);"
    code: "21032210301100110322113011110011032233"
    stanza: 425
  - 
    role: "code"
    lines: 
      - "= (= U1U U1U) (> U111111U U1111U);"
    code: "2103221030100103221130111111001111032233"
    stanza: 426
  - 
    role: "code"
    lines: 
      - "= (< U111U U1111U) (= U11111U U11111U);"
    code: "21032213011100111103221030111110011111032233"
    stanza: 427
  - 
    role: "code"
    lines: 
      - "= (= U111U U111U) (= U1111U U1111U);"
    code: "210322103011100111032210301111001111032233"
    stanza: 428
  - 
    role: "code"
    lines: 
      - "= (= U111U U111U) (= UU UU);"
    code: "2103221030111001110322103000032233"
    stanza: 429
  - 
    role: "code"
    lines: 
      - "= (< U111111U U11U) (< U1111U U11U);"
    code: "2103221301111110011032213011110011032233"
    stanza: 430
  - 
    role: "code"
    lines: 
      - "= (< U1111U U1U) (> UU UU);"
    code: "21032213011110010322113000032233"
    stanza: 431
  - 
    role: "code"
    lines: 
      - "= (> UU U11111U) (= U111U U11U);"
    code: "21032211300011111032210301110011032233"
    stanza: 432
  - 
    role: "code"
    lines: 
      - "= (> U11U U111U) (> U1111U U11111U);"
    code: "210322113011001110322113011110011111032233"
    stanza: 433
  - 
    role: "code"
    lines: 
      - "= (> U11U U111111U) (> U1U U111111U);"
    code: "2103221130110011111103221130100111111032233"
    stanza: 434
  - 
    role: "code"
    lines: 
      - "not / = (> U11U U111U) (< U1U U1111U);"
    code: "210030232103221130110011103221301001111032233"
    stanza: 435
  - 
    role: "code"
    lines: 
      - "not / = (= U1111U U111U) (< U1U U11U);"
    code: "210030232103221030111100111032213010011032233"
    stanza: 436
  - 
    role: "code"
    lines: 
      - "not / = (= U11111U U1111U) (< U11U U1111U);"
    code: "21003023210322103011111001111032213011001111032233"
    stanza: 437
  - 
    role: "code"
    lines: 
      - "not / = (> U1111U U111111U) (= U111U U111U);"
    code: "2100302321032211301111001111110322103011100111032233"
    stanza: 438
  - 
    role: "code"
    lines: 
      - "not / = (= U111U U1U) (> U1111U U1U);"
    code: "210030232103221030111001032211301111001032233"
    stanza: 439
  - 
    role: "code"
    lines: 
      - "not / = (< U111U U111111U) (< U111111U U11U);"
    code: "210030232103221301110011111103221301111110011032233"
    stanza: 440
  - 
    role: "code"
    lines: 
      - "not / = (= U11U U11U) (> U11U U11111U);"
    code: "21003023210322103011001103221130110011111032233"
    stanza: 441
  - 
    role: "code"
    lines: 
      - "not / = (= U11111U U11111U) (< U111111U U11U);"
    code: "21003023210322103011111001111103221301111110011032233"
    stanza: 442
  - 
    role: "code"
    lines: 
      - "not / = (= U111U U111U) (< U1111U U111U);"
    code: "210030232103221030111001110322130111100111032233"
    stanza: 443
  - 
    role: "code"
    lines: 
      - "not / = (> U11111U U11U) (< U11111U U1111U);"
    code: "210030232103221130111110011032213011111001111032233"
    stanza: 444
  - 
    role: "comment"
    lines: 
      - "# This could all be simplified or removed"
      - "# once the handling of true/false stabilizes"
    stanza: 445
  - 
    role: "code"
    lines: 
      - "define true 1;"
    code: "211013210101132132233"
    stanza: 446
  - 
    role: "code"
    lines: 
      - "define false 0;"
    code: "211013210110032032233"
    stanza: 447
  - 
    role: "code"
    lines: 
      - "= (true) (= U1U U1U);"
    code: "210322101011332210301001032233"
    stanza: 448
  - 
    role: "code"
    lines: 
      - "= (true) (= UU UU);"
    code: "2103221010113322103000032233"
    stanza: 449
  - 
    role: "code"
    lines: 
      - "= (true) (> U1111111U U11111U);"
    code: "2103221010113322113011111110011111032233"
    stanza: 450
  - 
    role: "code"
    lines: 
      - "= (true) (= U11111U U11111U);"
    code: "21032210101133221030111110011111032233"
    stanza: 451
  - 
    role: "code"
    lines: 
      - "= (true) (= U1111U U1111U);"
    code: "210322101011332210301111001111032233"
    stanza: 452
  - 
    role: "code"
    lines: 
      - "= (< U11111U U111111U) (true);"
    code: "21032213011111001111110322101011332233"
    stanza: 453
  - 
    role: "code"
    lines: 
      - "= (= U11111U U11111U) (true);"
    code: "21032210301111100111110322101011332233"
    stanza: 454
  - 
    role: "code"
    lines: 
      - "= (> U1111111U U11111U) (true);"
    code: "2103221130111111100111110322101011332233"
    stanza: 455
  - 
    role: "code"
    lines: 
      - "= (= U11U U11U) (true);"
    code: "21032210301100110322101011332233"
    stanza: 456
  - 
    role: "code"
    lines: 
      - "= (< U111U U111111U) (true);"
    code: "210322130111001111110322101011332233"
    stanza: 457
  - 
    role: "code"
    lines: 
      - "= (false) (< U11111U UU);"
    code: "21032210110033221301111100032233"
    stanza: 458
  - 
    role: "code"
    lines: 
      - "= (false) (= U11U U111U);"
    code: "210322101100332210301100111032233"
    stanza: 459
  - 
    role: "code"
    lines: 
      - "= (false) (< U111111U U11U);"
    code: "21032210110033221301111110011032233"
    stanza: 460
  - 
    role: "code"
    lines: 
      - "= (false) (> U1U U11U);"
    code: "2103221011003322113010011032233"
    stanza: 461
  - 
    role: "code"
    lines: 
      - "= (false) (> U11U U11111U);"
    code: "21032210110033221130110011111032233"
    stanza: 462
  - 
    role: "code"
    lines: 
      - "= (= U1111U U111U) (false);"
    code: "21032210301111001110322101100332233"
    stanza: 463
  - 
    role: "code"
    lines: 
      - "= (= UU U1U) (false);"
    code: "21032210300010322101100332233"
    stanza: 464
  - 
    role: "code"
    lines: 
      - "= (< U111111U U111U) (false);"
    code: "210322130111111001110322101100332233"
    stanza: 465
  - 
    role: "code"
    lines: 
      - "= (= U111U UU) (false);"
    code: "2103221030111000322101100332233"
    stanza: 466
  - 
    role: "code"
    lines: 
      - "= (= U1111U U111U) (false);"
    code: "21032210301111001110322101100332233"
    stanza: 467
  - 
    role: "code"
    lines: 
      - "= (true) (true);"
    code: "2103221010113322101011332233"
    stanza: 468
  - 
    role: "code"
    lines: 
      - "= (false) (false);"
    code: "2103221011003322101100332233"
    stanza: 469
  - 
    role: "code"
    lines: 
      - "not / = (true) (false);"
    code: "210030232103221010113322101100332233"
    stanza: 470
  - 
    role: "code"
    lines: 
      - "not / = (false) (true);"
    code: "210030232103221011003322101011332233"
    stanza: 471
  - 
    role: "file"
    lines: 
      - "== COS_If =="
    stanza: 472
  - 
    role: "comment"
    lines: 
      - "# MATH show mechanisms for branching"
    section_description: "show mechanisms for branching"
    section_category: "MATH"
    section_index: 11
    stanza: 473
  - 
    role: "code"
    lines: 
      - "intro if;"
    code: "2032111132233"
    stanza: 474
  - 
    role: "code"
    lines: 
      - "= 28 / if (< 3 0) 24 28;"
    code: "21032111003023211113221321132033211000321110032233"
    stanza: 475
  - 
    role: "code"
    lines: 
      - "= 27 / if (> 2 4) 29 27;"
    code: "21032110113023211113221132103210033211101321101132233"
    stanza: 476
  - 
    role: "code"
    lines: 
      - "= 29 / if (= 3 1) 20 29;"
    code: "210321110130232111132210321132133210100321110132233"
    stanza: 477
  - 
    role: "code"
    lines: 
      - "= 21 / if (= 0 0) 21 26;"
    code: "21032101013023211113221032032033210101321101032233"
    stanza: 478
  - 
    role: "code"
    lines: 
      - "= 29 / if (> 5 3) 29 23;"
    code: "21032111013023211113221132101321133211101321011132233"
    stanza: 479
  - 
    role: "code"
    lines: 
      - "= 26 / if (> 1 0) 26 22;"
    code: "21032110103023211113221132132033211010321011032233"
    stanza: 480
  - 
    role: "code"
    lines: 
      - "= 21 / if (= 3 3) 21 27;"
    code: "2103210101302321111322103211321133210101321101132233"
    stanza: 481
  - 
    role: "code"
    lines: 
      - "= 23 / if (> 4 4) 25 23;"
    code: "210321011130232111132211321003210033211001321011132233"
    stanza: 482
  - 
    role: "code"
    lines: 
      - "define max / ? x / ? y / if (> (x) (y)) (x) (y);"
    code: "21101321011013023211003210010130232110032100100302321111322113221001013322100100333221001013322100100332233"
    stanza: 483
  - 
    role: "code"
    lines: 
      - "define min / ? x / ? y / if (< (x) (y)) (x) (y);"
    code: "2110132101110302321100321001013023211003210010030232111132213221001013322100100333221001013322100100332233"
    stanza: 484
  - 
    role: "code"
    lines: 
      - "= 0 / max 0 0;"
    code: "2103203023210110132032032233"
    stanza: 485
  - 
    role: "code"
    lines: 
      - "= 0 / min 0 0;"
    code: "2103203023210111032032032233"
    stanza: 486
  - 
    role: "code"
    lines: 
      - "= 1 / max 0 1;"
    code: "2103213023210110132032132233"
    stanza: 487
  - 
    role: "code"
    lines: 
      - "= 0 / min 0 1;"
    code: "2103203023210111032032132233"
    stanza: 488
  - 
    role: "code"
    lines: 
      - "= 2 / max 0 2;"
    code: "210321030232101101320321032233"
    stanza: 489
  - 
    role: "code"
    lines: 
      - "= 0 / min 0 2;"
    code: "21032030232101110320321032233"
    stanza: 490
  - 
    role: "code"
    lines: 
      - "= 1 / max 1 0;"
    code: "2103213023210110132132032233"
    stanza: 491
  - 
    role: "code"
    lines: 
      - "= 0 / min 1 0;"
    code: "2103203023210111032132032233"
    stanza: 492
  - 
    role: "code"
    lines: 
      - "= 1 / max 1 1;"
    code: "2103213023210110132132132233"
    stanza: 493
  - 
    role: "code"
    lines: 
      - "= 1 / min 1 1;"
    code: "2103213023210111032132132233"
    stanza: 494
  - 
    role: "code"
    lines: 
      - "= 2 / max 1 2;"
    code: "210321030232101101321321032233"
    stanza: 495
  - 
    role: "code"
    lines: 
      - "= 1 / min 1 2;"
    code: "21032130232101110321321032233"
    stanza: 496
  - 
    role: "code"
    lines: 
      - "= 2 / max 2 0;"
    code: "210321030232101101321032032233"
    stanza: 497
  - 
    role: "code"
    lines: 
      - "= 0 / min 2 0;"
    code: "21032030232101110321032032233"
    stanza: 498
  - 
    role: "code"
    lines: 
      - "= 2 / max 2 1;"
    code: "210321030232101101321032132233"
    stanza: 499
  - 
    role: "code"
    lines: 
      - "= 1 / min 2 1;"
    code: "21032130232101110321032132233"
    stanza: 500
  - 
    role: "code"
    lines: 
      - "= 2 / max 2 2;"
    code: "2103210302321011013210321032233"
    stanza: 501
  - 
    role: "code"
    lines: 
      - "= 2 / min 2 2;"
    code: "2103210302321011103210321032233"
    stanza: 502
  - 
    role: "comment"
    lines: 
      - "# need to be careful about whether 'if' is eager or lazy"
      - "# here we suggest that it is lazy"
    stanza: 503
  - 
    role: "code"
    lines: 
      - "define factorial / ? n / if (< (n) 1) 1 / * (n) / factorial / - (n) 1;"
    code: "211013210111130232110032110000302321111322132211000033213321302321001322110000330232101111302321011322110000332132233"
    stanza: 504
  - 
    role: "code"
    lines: 
      - "= 1 / factorial 1;"
    code: "2103213023210111132132233"
    stanza: 505
  - 
    role: "code"
    lines: 
      - "= 2 / factorial 2;"
    code: "210321030232101111321032233"
    stanza: 506
  - 
    role: "code"
    lines: 
      - "= 6 / factorial 3;"
    code: "2103211030232101111321132233"
    stanza: 507
  - 
    role: "code"
    lines: 
      - "= 24 / factorial 4;"
    code: "2103211000302321011113210032233"
    stanza: 508
  - 
    role: "code"
    lines: 
      - "= 120 / factorial 5;"
    code: "210321111000302321011113210132233"
    stanza: 509
  - 
    role: "file"
    lines: 
      - "== COS_AndLogic =="
    stanza: 510
  - 
    role: "comment"
    lines: 
      - "# MATH introduce the AND logical operator"
    section_description: "introduce the AND logical operator"
    section_category: "MATH"
    section_index: 12
    stanza: 511
  - 
    role: "code"
    lines: 
      - "intro and;"
    code: "203210132233"
    stanza: 512
  - 
    role: "code"
    lines: 
      - "define and (? x / ? y / if (x) (if (y) (true) (false)) (false));"
    code: "2110132101322110032100101302321100321001003023211113221001013322111132210010033221010113322101100333221011003332233"
    stanza: 513
  - 
    role: "code"
    lines: 
      - "and (= U11U U11U) (> U1111U U11U);"
    code: "210132210301100110322113011110011032233"
    stanza: 514
  - 
    role: "code"
    lines: 
      - "and (= U1U U1U) (> U111111U U1111U);"
    code: "21013221030100103221130111111001111032233"
    stanza: 515
  - 
    role: "code"
    lines: 
      - "and (< U111U U1111U) (= U11111U U11111U);"
    code: "210132213011100111103221030111110011111032233"
    stanza: 516
  - 
    role: "code"
    lines: 
      - "and (= U111U U111U) (= U1111U U1111U);"
    code: "2101322103011100111032210301111001111032233"
    stanza: 517
  - 
    role: "code"
    lines: 
      - "and (= U111U U111U) (= UU UU);"
    code: "21013221030111001110322103000032233"
    stanza: 518
  - 
    role: "code"
    lines: 
      - "and (< U11111U U1111111U) (> U11111U U111U);"
    code: "210132213011111001111111032211301111100111032233"
    stanza: 519
  - 
    role: "code"
    lines: 
      - "and (> U11111U U1111U) (> U1U UU);"
    code: "210132211301111100111103221130100032233"
    stanza: 520
  - 
    role: "code"
    lines: 
      - "and (> U111U UU) (= U111U U111U);"
    code: "21013221130111000322103011100111032233"
    stanza: 521
  - 
    role: "code"
    lines: 
      - "and (< U111U U1111U) (< U111U U111111U);"
    code: "2101322130111001111032213011100111111032233"
    stanza: 522
  - 
    role: "code"
    lines: 
      - "and (> U11111U U1111U) (> U11111U U1111U);"
    code: "21013221130111110011110322113011111001111032233"
    stanza: 523
  - 
    role: "code"
    lines: 
      - "not / and (> U111111U U1111U) (< U111U U1U);"
    code: "21003023210132211301111110011110322130111001032233"
    stanza: 524
  - 
    role: "code"
    lines: 
      - "not / and (> U111U U1U) (> U111U U111U);"
    code: "21003023210132211301110010322113011100111032233"
    stanza: 525
  - 
    role: "code"
    lines: 
      - "not / and (= UU UU) (= U11111U U1111U);"
    code: "2100302321013221030000322103011111001111032233"
    stanza: 526
  - 
    role: "code"
    lines: 
      - "not / and (< U11U U1111U) (> U1111U U111111U);"
    code: "2100302321013221301100111103221130111100111111032233"
    stanza: 527
  - 
    role: "code"
    lines: 
      - "not / and (= U111U U111U) (= U111U U1U);"
    code: "21003023210132210301110011103221030111001032233"
    stanza: 528
  - 
    role: "code"
    lines: 
      - "not / and (> U1U U11111U) (< U111U U111111U);"
    code: "210030232101322113010011111032213011100111111032233"
    stanza: 529
  - 
    role: "code"
    lines: 
      - "not / and (< U111111U U11U) (= U11U U11U);"
    code: "210030232101322130111111001103221030110011032233"
    stanza: 530
  - 
    role: "code"
    lines: 
      - "not / and (> U11U U11111U) (= U11111U U11111U);"
    code: "210030232101322113011001111103221030111110011111032233"
    stanza: 531
  - 
    role: "code"
    lines: 
      - "not / and (< U111111U U11U) (= U111U U111U);"
    code: "21003023210132213011111100110322103011100111032233"
    stanza: 532
  - 
    role: "code"
    lines: 
      - "not / and (< U1111U U111U) (> U11111U U11U);"
    code: "21003023210132213011110011103221130111110011032233"
    stanza: 533
  - 
    role: "code"
    lines: 
      - "not / and (< U11111U U1111U) (= U1U U11U);"
    code: "210030232101322130111110011110322103010011032233"
    stanza: 534
  - 
    role: "code"
    lines: 
      - "not / and (< U111111U U1111U) (= U11111U U1U);"
    code: "2100302321013221301111110011110322103011111001032233"
    stanza: 535
  - 
    role: "code"
    lines: 
      - "not / and (> U11U U111111U) (= U1U U11111U);"
    code: "210030232101322113011001111110322103010011111032233"
    stanza: 536
  - 
    role: "code"
    lines: 
      - "not / and (< U111111U U111U) (= U11U U111U);"
    code: "21003023210132213011111100111032210301100111032233"
    stanza: 537
  - 
    role: "code"
    lines: 
      - "not / and (< U111111U U1111U) (> UU U1U);"
    code: "21003023210132213011111100111103221130001032233"
    stanza: 538
  - 
    role: "code"
    lines: 
      - "not / and (= U111U U11111U) (< U1111U U1U);"
    code: "2100302321013221030111001111103221301111001032233"
    stanza: 539
  - 
    role: "code"
    lines: 
      - "not / and (= U1111U U1U) (< U1111U U11U);"
    code: "21003023210132210301111001032213011110011032233"
    stanza: 540
  - 
    role: "code"
    lines: 
      - "not / and (< U111111U U111U) (= U111U UU);"
    code: "210030232101322130111111001110322103011100032233"
    stanza: 541
  - 
    role: "code"
    lines: 
      - "not / and (< U1111U U11U) (< U1111U U111111U);"
    code: "210030232101322130111100110322130111100111111032233"
    stanza: 542
  - 
    role: "code"
    lines: 
      - "not / and (> U1111U U1U) (< U11111U U11U);"
    code: "210030232101322113011110010322130111110011032233"
    stanza: 543
  - 
    role: "code"
    lines: 
      - "not / and (> UU U1U) (> U1111111U U11111U);"
    code: "21003023210132211300010322113011111110011111032233"
    stanza: 544
  - 
    role: "code"
    lines: 
      - "not / and (< U111U U1111U) (> U111U U111111U);"
    code: "2100302321013221301110011110322113011100111111032233"
    stanza: 545
  - 
    role: "code"
    lines: 
      - "not / and (> U1U U11U) (> U111111U U1111U);"
    code: "21003023210132211301001103221130111111001111032233"
    stanza: 546
  - 
    role: "code"
    lines: 
      - "not / and (< UU U1U) (= U1111U U11111U);"
    code: "2100302321013221300010322103011110011111032233"
    stanza: 547
  - 
    role: "code"
    lines: 
      - "and (< U1111U U111111U) (< U11111U U1111111U);"
    code: "2101322130111100111111032213011111001111111032233"
    stanza: 548
  - 
    role: "file"
    lines: 
      - "== COS_OrLogic =="
    stanza: 549
  - 
    role: "comment"
    lines: 
      - "# MATH introduce the OR logical operator"
    section_description: "introduce the OR logical operator"
    section_category: "MATH"
    section_index: 13
    stanza: 550
  - 
    role: "code"
    lines: 
      - "define or (? x / ? y / if (x) (true) (if (y) (true) (false)));"
    code: "2110132110322110032100101302321100321001003023211113221001013322101011332211113221001003322101011332210110033332233"
    stanza: 551
  - 
    role: "code"
    lines: 
      - "intro or;"
    code: "203211032233"
    stanza: 552
  - 
    role: "code"
    lines: 
      - "or (= U11U U11U) (> U1111U U11U);"
    code: "211032210301100110322113011110011032233"
    stanza: 553
  - 
    role: "code"
    lines: 
      - "or (= U1U U1U) (> U111111U U1111U);"
    code: "21103221030100103221130111111001111032233"
    stanza: 554
  - 
    role: "code"
    lines: 
      - "or (< U111U U1111U) (= U11111U U11111U);"
    code: "211032213011100111103221030111110011111032233"
    stanza: 555
  - 
    role: "code"
    lines: 
      - "or (= U111U U111U) (= U1111U U1111U);"
    code: "2110322103011100111032210301111001111032233"
    stanza: 556
  - 
    role: "code"
    lines: 
      - "or (= U111U U111U) (= UU UU);"
    code: "21103221030111001110322103000032233"
    stanza: 557
  - 
    role: "code"
    lines: 
      - "or (< U11111U U1111111U) (> U11111U U111U);"
    code: "211032213011111001111111032211301111100111032233"
    stanza: 558
  - 
    role: "code"
    lines: 
      - "or (> U11111U U1111U) (> U1U UU);"
    code: "211032211301111100111103221130100032233"
    stanza: 559
  - 
    role: "code"
    lines: 
      - "or (> U111U UU) (= U111U U111U);"
    code: "21103221130111000322103011100111032233"
    stanza: 560
  - 
    role: "code"
    lines: 
      - "or (< U111U U1111U) (< U111U U111111U);"
    code: "2110322130111001111032213011100111111032233"
    stanza: 561
  - 
    role: "code"
    lines: 
      - "or (> U11111U U1111U) (> U11111U U1111U);"
    code: "21103221130111110011110322113011111001111032233"
    stanza: 562
  - 
    role: "code"
    lines: 
      - "or (> U111111U U1111U) (< U111U U1U);"
    code: "211032211301111110011110322130111001032233"
    stanza: 563
  - 
    role: "code"
    lines: 
      - "or (> U111U U1U) (> U111U U111U);"
    code: "211032211301110010322113011100111032233"
    stanza: 564
  - 
    role: "code"
    lines: 
      - "or (= UU UU) (= U11111U U1111U);"
    code: "21103221030000322103011111001111032233"
    stanza: 565
  - 
    role: "code"
    lines: 
      - "or (< U11U U1111U) (> U1111U U111111U);"
    code: "21103221301100111103221130111100111111032233"
    stanza: 566
  - 
    role: "code"
    lines: 
      - "or (= U111U U111U) (= U111U U1U);"
    code: "211032210301110011103221030111001032233"
    stanza: 567
  - 
    role: "code"
    lines: 
      - "or (> U1U U11111U) (< U111U U111111U);"
    code: "2110322113010011111032213011100111111032233"
    stanza: 568
  - 
    role: "code"
    lines: 
      - "or (< U111111U U11U) (= U11U U11U);"
    code: "2110322130111111001103221030110011032233"
    stanza: 569
  - 
    role: "code"
    lines: 
      - "or (> U11U U11111U) (= U11111U U11111U);"
    code: "2110322113011001111103221030111110011111032233"
    stanza: 570
  - 
    role: "code"
    lines: 
      - "or (< U111111U U11U) (= U111U U111U);"
    code: "211032213011111100110322103011100111032233"
    stanza: 571
  - 
    role: "code"
    lines: 
      - "or (< U1111U U111U) (> U11111U U11U);"
    code: "211032213011110011103221130111110011032233"
    stanza: 572
  - 
    role: "code"
    lines: 
      - "not / or (< U11111U U1111U) (= U1U U11U);"
    code: "210030232110322130111110011110322103010011032233"
    stanza: 573
  - 
    role: "code"
    lines: 
      - "not / or (< U111111U U1111U) (= U11111U U1U);"
    code: "2100302321103221301111110011110322103011111001032233"
    stanza: 574
  - 
    role: "code"
    lines: 
      - "not / or (> U11U U111111U) (= U1U U11111U);"
    code: "210030232110322113011001111110322103010011111032233"
    stanza: 575
  - 
    role: "code"
    lines: 
      - "not / or (< U111111U U111U) (= U11U U111U);"
    code: "21003023211032213011111100111032210301100111032233"
    stanza: 576
  - 
    role: "code"
    lines: 
      - "not / or (< U111111U U1111U) (> UU U1U);"
    code: "21003023211032213011111100111103221130001032233"
    stanza: 577
  - 
    role: "code"
    lines: 
      - "not / or (= U111U U11111U) (< U1111U U1U);"
    code: "2100302321103221030111001111103221301111001032233"
    stanza: 578
  - 
    role: "code"
    lines: 
      - "not / or (= U1111U U1U) (< U1111U U11U);"
    code: "21003023211032210301111001032213011110011032233"
    stanza: 579
  - 
    role: "code"
    lines: 
      - "not / or (< U111111U U111U) (= U111U UU);"
    code: "210030232110322130111111001110322103011100032233"
    stanza: 580
  - 
    role: "code"
    lines: 
      - "or (< U1111U U11U) (< U1111U U111111U);"
    code: "2110322130111100110322130111100111111032233"
    stanza: 581
  - 
    role: "code"
    lines: 
      - "or (> U1111U U1U) (< U11111U U11U);"
    code: "2110322113011110010322130111110011032233"
    stanza: 582
  - 
    role: "code"
    lines: 
      - "or (> UU U1U) (> U1111111U U11111U);"
    code: "211032211300010322113011111110011111032233"
    stanza: 583
  - 
    role: "code"
    lines: 
      - "or (< U111U U1111U) (> U111U U111111U);"
    code: "21103221301110011110322113011100111111032233"
    stanza: 584
  - 
    role: "code"
    lines: 
      - "or (> U1U U11U) (> U111111U U1111U);"
    code: "211032211301001103221130111111001111032233"
    stanza: 585
  - 
    role: "code"
    lines: 
      - "or (< UU U1U) (= U1111U U11111U);"
    code: "21103221300010322103011110011111032233"
    stanza: 586
  - 
    role: "code"
    lines: 
      - "or (< U1111U U111111U) (< U11111U U1111111U);"
    code: "2110322130111100111111032213011111001111111032233"
    stanza: 587
  - 
    role: "code"
    lines: 
      - "define >= (? x / ? y / or (> (x) (y)) (= (x) (y)));"
    code: "211013211000132211003210010130232110032100100302321103221132210010133221001003332210322100101332210010033332233"
    stanza: 588
  - 
    role: "code"
    lines: 
      - "define <= (? x / ? y / or (< (x) (y)) (= (x) (y)));"
    code: "21101321100103221100321001013023211003210010030232110322132210010133221001003332210322100101332210010033332233"
    stanza: 589
  - 
    role: "code"
    lines: 
      - ">= 0 0;"
    code: "211000132032032233"
    stanza: 590
  - 
    role: "code"
    lines: 
      - "<= 0 0;"
    code: "211001032032032233"
    stanza: 591
  - 
    role: "code"
    lines: 
      - "not / >= 0 1;"
    code: "21003023211000132032132233"
    stanza: 592
  - 
    role: "code"
    lines: 
      - "<= 0 1;"
    code: "211001032032132233"
    stanza: 593
  - 
    role: "code"
    lines: 
      - "not / >= 0 2;"
    code: "210030232110001320321032233"
    stanza: 594
  - 
    role: "code"
    lines: 
      - "<= 0 2;"
    code: "2110010320321032233"
    stanza: 595
  - 
    role: "code"
    lines: 
      - ">= 1 0;"
    code: "211000132132032233"
    stanza: 596
  - 
    role: "code"
    lines: 
      - "not / <= 1 0;"
    code: "21003023211001032132032233"
    stanza: 597
  - 
    role: "code"
    lines: 
      - ">= 1 1;"
    code: "211000132132132233"
    stanza: 598
  - 
    role: "code"
    lines: 
      - "<= 1 1;"
    code: "211001032132132233"
    stanza: 599
  - 
    role: "code"
    lines: 
      - "not / >= 1 2;"
    code: "210030232110001321321032233"
    stanza: 600
  - 
    role: "code"
    lines: 
      - "<= 1 2;"
    code: "2110010321321032233"
    stanza: 601
  - 
    role: "code"
    lines: 
      - ">= 2 0;"
    code: "2110001321032032233"
    stanza: 602
  - 
    role: "code"
    lines: 
      - "not / <= 2 0;"
    code: "210030232110010321032032233"
    stanza: 603
  - 
    role: "code"
    lines: 
      - ">= 2 1;"
    code: "2110001321032132233"
    stanza: 604
  - 
    role: "code"
    lines: 
      - "not / <= 2 1;"
    code: "210030232110010321032132233"
    stanza: 605
  - 
    role: "code"
    lines: 
      - ">= 2 2;"
    code: "21100013210321032233"
    stanza: 606
  - 
    role: "code"
    lines: 
      - "<= 2 2;"
    code: "21100103210321032233"
    stanza: 607
  - 
    role: "file"
    lines: 
      - "== COS_Cons =="
    stanza: 608
  - 
    role: "comment"
    lines: 
      - "# MATH illustrate pairs"
    section_description: "illustrate pairs"
    section_category: "MATH"
    section_index: 14
    stanza: 609
  - 
    role: "code"
    lines: 
      - "define cons (? x / ? y / ? f / f (x) (y));"
    code: "21101321010132211003210010130232110032100100302321100321100113023211001132210010133221001003332233"
    stanza: 610
  - 
    role: "code"
    lines: 
      - "define car (? pair / pair (? x / ? y / x));"
    code: "2110132101103221100321101003023211010032211003210010130232110032100100302321001013332233"
    stanza: 611
  - 
    role: "code"
    lines: 
      - "define cdr (? pair / pair (? x / ? y / y));"
    code: "2110132101113221100321101003023211010032211003210010130232110032100100302321001003332233"
    stanza: 612
  - 
    role: "code"
    lines: 
      - "assign x (cons 0 4) / = (car / x) 0;"
    code: "21110321001013221010132032100330232103221011030232100101332032233"
    stanza: 613
  - 
    role: "code"
    lines: 
      - "assign x (cons 0 4) / = (cdr / x) 4;"
    code: "2111032100101322101013203210033023210322101113023210010133210032233"
    stanza: 614
  - 
    role: "code"
    lines: 
      - "assign x (cons 6 2) / = (car / x) 6;"
    code: "21110321001013221010132110321033023210322101103023210010133211032233"
    stanza: 615
  - 
    role: "code"
    lines: 
      - "assign x (cons 6 2) / = (cdr / x) 2;"
    code: "2111032100101322101013211032103302321032210111302321001013321032233"
    stanza: 616
  - 
    role: "code"
    lines: 
      - "assign x (cons 3 9) / = (car / x) 3;"
    code: "21110321001013221010132113210013302321032210110302321001013321132233"
    stanza: 617
  - 
    role: "code"
    lines: 
      - "assign x (cons 3 9) / = (cdr / x) 9;"
    code: "2111032100101322101013211321001330232103221011130232100101332100132233"
    stanza: 618
  - 
    role: "code"
    lines: 
      - "assign x (cons 7 / cons 10 2) / = (car / x) 7;"
    code: "211103210010132210101321113023210101321010321033023210322101103023210010133211132233"
    stanza: 619
  - 
    role: "code"
    lines: 
      - "assign x (cons 7 / cons 10 2) / = (car / cdr / x) 10;"
    code: "21110321001013221010132111302321010132101032103302321032210110302321011130232100101332101032233"
    stanza: 620
  - 
    role: "code"
    lines: 
      - "assign x (cons 7 / cons 10 2) / = (cdr / cdr / x) 2;"
    code: "211103210010132210101321113023210101321010321033023210322101113023210111302321001013321032233"
    stanza: 621
  - 
    role: "code"
    lines: 
      - "assign x (cons 1 / cons 15 17) / = (car / x) 1;"
    code: "21110321001013221010132130232101013211113210001330232103221011030232100101332132233"
    stanza: 622
  - 
    role: "code"
    lines: 
      - "assign x (cons 1 / cons 15 17) / = (car / cdr / x) 15;"
    code: "211103210010132210101321302321010132111132100013302321032210110302321011130232100101332111132233"
    stanza: 623
  - 
    role: "code"
    lines: 
      - "assign x (cons 1 / cons 15 17) / = (cdr / cdr / x) 17;"
    code: "2111032100101322101013213023210101321111321000133023210322101113023210111302321001013321000132233"
    stanza: 624
  - 
    role: "code"
    lines: 
      - "assign x (cons 8 / cons 14 9) / = (car / x) 8;"
    code: "2111032100101322101013210003023210101321110321001330232103221011030232100101332100032233"
    stanza: 625
  - 
    role: "code"
    lines: 
      - "assign x (cons 8 / cons 14 9) / = (car / cdr / x) 14;"
    code: "21110321001013221010132100030232101013211103210013302321032210110302321011130232100101332111032233"
    stanza: 626
  - 
    role: "code"
    lines: 
      - "assign x (cons 8 / cons 14 9) / = (cdr / cdr / x) 9;"
    code: "21110321001013221010132100030232101013211103210013302321032210111302321011130232100101332100132233"
    stanza: 627
  - 
    role: "code"
    lines: 
      - "assign x (cons 3 / cons 0 / cons 2 / cons 4 1) / and (= 3 / car / x) / and (= 0 / car / cdr / x) / and (= 2 / car / cdr / cdr / x) / and (= 4 / car / cdr / cdr / cdr / x) (= 1 / cdr / cdr / cdr / cdr / x);"
    code: "2111032100101322101013211302321010132030232101013210302321010132100321330232101322103211302321011030232100101330232101322103203023210110302321011130232100101330232101322103210302321011030232101113023210111302321001013302321013221032100302321011030232101113023210111302321011130232100101332210321302321011130232101113023210111302321011130232100101332233"
    stanza: 628
  - 
    role: "file"
    lines: 
      - "== COS_Mutable =="
    stanza: 629
  - 
    role: "comment"
    lines: 
      - "# MATH introduce mutable objects, and side-effects"
    section_description: "introduce mutable objects, and side-effects"
    section_category: "MATH"
    section_index: 15
    stanza: 630
  - 
    role: "code"
    lines: 
      - "intro make-cell;"
    code: "20321101132233"
    stanza: 631
  - 
    role: "code"
    lines: 
      - "intro set!;"
    code: "20321110032233"
    stanza: 632
  - 
    role: "code"
    lines: 
      - "intro get!;"
    code: "20321110132233"
    stanza: 633
  - 
    role: "code"
    lines: 
      - "define demo-mut1 / make-cell 0;"
    code: "2110132110101302321101132032233"
    stanza: 634
  - 
    role: "code"
    lines: 
      - "set! (demo-mut1) 15;"
    code: "211100322110101332111132233"
    stanza: 635
  - 
    role: "code"
    lines: 
      - "= (get! / demo-mut1) 15;"
    code: "2103221110130232110101332111132233"
    stanza: 636
  - 
    role: "code"
    lines: 
      - "set! (demo-mut1) 5;"
    code: "21110032211010133210132233"
    stanza: 637
  - 
    role: "code"
    lines: 
      - "set! (demo-mut1) 7;"
    code: "21110032211010133211132233"
    stanza: 638
  - 
    role: "code"
    lines: 
      - "= (get! / demo-mut1) 7;"
    code: "210322111013023211010133211132233"
    stanza: 639
  - 
    role: "code"
    lines: 
      - "define demo-mut2 / make-cell 11;"
    code: "2110132110110302321101132101132233"
    stanza: 640
  - 
    role: "code"
    lines: 
      - "= (get! / demo-mut2) 11;"
    code: "2103221110130232110110332101132233"
    stanza: 641
  - 
    role: "code"
    lines: 
      - "set! (demo-mut2) 22;"
    code: "2111003221101103321011032233"
    stanza: 642
  - 
    role: "code"
    lines: 
      - "= (get! / demo-mut2) 22;"
    code: "21032211101302321101103321011032233"
    stanza: 643
  - 
    role: "code"
    lines: 
      - "= (get! / demo-mut1) 7;"
    code: "210322111013023211010133211132233"
    stanza: 644
  - 
    role: "code"
    lines: 
      - "= (+ (get! / demo-mut1) (get! / demo-mut2)) 29;"
    code: "210322101032211101302321101013322111013023211011033321110132233"
    stanza: 645
  - 
    role: "code"
    lines: 
      - "if (= (get! / demo-mut1) 7) (set! (demo-mut1) 88) (set! (demo-mut1) 99);"
    code: "2111132210322111013023211010133211133221110032211010133210110003322111003221101013321100011332233"
    stanza: 646
  - 
    role: "code"
    lines: 
      - "= (get! / demo-mut1) 88;"
    code: "2103221110130232110101332101100032233"
    stanza: 647
  - 
    role: "code"
    lines: 
      - "if (= (get! / demo-mut1) 7) (set! (demo-mut1) 88) (set! (demo-mut1) 99);"
    code: "2111132210322111013023211010133211133221110032211010133210110003322111003221101013321100011332233"
    stanza: 648
  - 
    role: "code"
    lines: 
      - "= (get! / demo-mut1) 99;"
    code: "2103221110130232110101332110001132233"
    stanza: 649
  - 
    role: "file"
    lines: 
      - "== COS_ListPre =="
    stanza: 650
  - 
    role: "comment"
    lines: 
      - "# MATH illustrate lists and some list operators"
      - "# to make list describable as a function, need to preceed lists"
      - "# ... with an argument count"
      - "# Lists keep an explicit record of their length"
      - "# this is to avoid the need for using a special 'nil' symbol"
      - "# ... which cannot itself be placed in the list."
      - "# pending: should introduce number? check function"
    section_description: "illustrate lists and some list operators"
    section_category: "MATH"
    section_index: 16
    stanza: 651
  - 
    role: "code"
    lines: 
      - "define list-helper / ? n / ? ret / if (> (n) 1) (? x / list-helper (- (n) 1) (? y / ? z / ret (+ 1 (y)) (cons (x) (z)))) (? x / ret 1 (x));"
    code: "2110132110111302321100321100003023211003211100030232111132211322110000332133221100321001013023211011132210113221100003321332211003210010030232110032100110302321110003221010321322100100333221010132210010133221001103333322110032100101302321110003213221001013332233"
    stanza: 652
  - 
    role: "code"
    lines: 
      - "define list / ? n / if (= (n) 0) (cons 0 0) (list-helper (n) (? y / ? z / cons (y) (z)));"
    code: "21101321110013023211003211000030232111132210322110000332033221010132032033221101113221100003322110032100100302321100321001103023210101322100100332210011033332233"
    stanza: 653
  - 
    role: "code"
    lines: 
      - "define head / ? lst / if (= (car / lst) 0) (undefined) (if (= (car / lst) 1) (cdr / lst) (car / cdr / lst));"
    code: "21101321110103023211003211101130232111132210322101103023211101133203322100000332211113221032210110302321110113321332210111302321110113322101103023210111302321110113332233"
    stanza: 654
  - 
    role: "code"
    lines: 
      - "define tail / ? lst / if (= (car / lst) 0) (undefined) (if (= (car / lst) 1) (cons 0 0) (cons (- (car / lst) 1) (cdr / cdr / lst)));"
    code: "2110132111100302321100321110113023211113221032210110302321110113320332210000033221111322103221011030232111011332133221010132032033221010132210113221011030232111011332133221011130232101113023211101133332233"
    stanza: 655
  - 
    role: "code"
    lines: 
      - "define list-length / ? lst / car / lst;"
    code: "21101321111013023211003211101130232101103023211101132233"
    stanza: 656
  - 
    role: "code"
    lines: 
      - "define list-ref / ? lst / ? n / if (= (list-ref / lst) 0) (undefined) (if (= (n) 0) (head / lst) (list-ref (tail / lst) (- (n) 1)));"
    code: "211013211111030232110032111011302321100321100003023211113221032211111030232111011332033221000003322111132210322110000332033221110103023211101133221111103221111003023211101133221011322110000332133332233"
    stanza: 657
  - 
    role: "code"
    lines: 
      - "define prepend / ? x / ? lst / if (= (list-length / lst) 0) (cons 1 (x)) (cons (+ (list-length / lst) 1) (cons (x) (cdr / lst)));"
    code: "2110132111111302321100321001013023211003211101130232111132210322111101302321110113320332210101321322100101333221010132210103221111013023211101133213322101013221001013322101113023211101133332233"
    stanza: 658
  - 
    role: "code"
    lines: 
      - "define equal / ? x / ? y / if (= (number? (x)) (number? (y))) (if (number? (x)) (= (x) (y)) (list= (x) (y))) (false);"
    code: "21101321000302321100321001013023211003210010030232111132210322110003221001013332211000322100100333322111132211000322100101333221032210010133221001003332210000003221001013322100100333322101100332233"
    stanza: 659
  - 
    role: "code"
    lines: 
      - "define list= / ? x / ? y / if (= (list-length / x) (list-length / y)) (if (> (list-length / x) 0) (and (equal (head / x) (head / y)) (list= (tail / x) (tail / y))) (true)) (false);"
    code: "21101321000000302321100321001013023211003210010030232111132210322111101302321001013322111101302321001003332211113221132211110130232100101332033221013221000322111010302321001013322111010302321001003332210000003221111003023210010133221111003023210010033332210101133322101100332233"
    stanza: 660
  - 
    role: "code"
    lines: 
      - "= (list-length / (list 0)) 0;"
    code: "2103221111013023221110013203332032233"
    stanza: 661
  - 
    role: "code"
    lines: 
      - "= (list-length / (list 4) 6 1 0 4) 4;"
    code: "210322111101302322111001321003321103213203210033210032233"
    stanza: 662
  - 
    role: "code"
    lines: 
      - "= (list-length / (list 6) 6 2 7 0 9 4) 6;"
    code: "210322111101302322111001321103321103210321113203210013210033211032233"
    stanza: 663
  - 
    role: "code"
    lines: 
      - "= (list-length / (list 2) 4 9) 2;"
    code: "21032211110130232211100132103321003210013321032233"
    stanza: 664
  - 
    role: "code"
    lines: 
      - "= (list-length / (list 3) 6 1 7) 3;"
    code: "2103221111013023221110013211332110321321113321132233"
    stanza: 665
  - 
    role: "code"
    lines: 
      - "= (head / (list 6) 12 11 10 4 1 5) 12;"
    code: "2103221110103023221110013211033211003210113210103210032132101332110032233"
    stanza: 666
  - 
    role: "code"
    lines: 
      - "list= (tail / (list 6) 12 11 10 4 1 5) ((list 5) 11 10 4 1 5);"
    code: "210000003221111003023221110013211033211003210113210103210032132101332221110013210133210113210103210032132101332233"
    stanza: 667
  - 
    role: "code"
    lines: 
      - "= (head / (list 8) 15 13 12 7 10 11 13 18) 15;"
    code: "2103221110103023221110013210003321111321101321100321113210103210113211013210010332111132233"
    stanza: 668
  - 
    role: "code"
    lines: 
      - "list= (tail / (list 8) 15 13 12 7 10 11 13 18) ((list 7) 13 12 7 10 11 13 18);"
    code: "21000000322111100302322111001321000332111132110132110032111321010321011321101321001033222111001321113321101321100321113210103210113211013210010332233"
    stanza: 669
  - 
    role: "code"
    lines: 
      - "= (head / (list 2) 11 1) 11;"
    code: "21032211101030232211100132103321011321332101132233"
    stanza: 670
  - 
    role: "code"
    lines: 
      - "list= (tail / (list 2) 11 1) ((list 1) 1);"
    code: "2100000032211110030232211100132103321011321332221110013213321332233"
    stanza: 671
  - 
    role: "code"
    lines: 
      - "= (head / (list 6) 5 19 4 16 6 11) 5;"
    code: "2103221110103023221110013211033210132100113210032100003211032101133210132233"
    stanza: 672
  - 
    role: "code"
    lines: 
      - "list= (tail / (list 6) 5 19 4 16 6 11) ((list 5) 19 4 16 6 11);"
    code: "210000003221111003023221110013211033210132100113210032100003211032101133222111001321013321001132100321000032110321011332233"
    stanza: 673
  - 
    role: "code"
    lines: 
      - "= (head / (list 10) 12 18 7 4 9 18 6 16 6 18) 12;"
    code: "2103221110103023221110013210103321100321001032111321003210013210010321103210000321103210010332110032233"
    stanza: 674
  - 
    role: "code"
    lines: 
      - "list= (tail / (list 10) 12 18 7 4 9 18 6 16 6 18) ((list 9) 18 7 4 9 18 6 16 6 18);"
    code: "210000003221111003023221110013210103321100321001032111321003210013210010321103210000321103210010332221110013210013321001032111321003210013210010321103210000321103210010332233"
    stanza: 675
  - 
    role: "code"
    lines: 
      - "= (head / (list 6) 19 7 3 10 19 13) 19;"
    code: "210322111010302322111001321103321001132111321132101032100113211013321001132233"
    stanza: 676
  - 
    role: "code"
    lines: 
      - "list= (tail / (list 6) 19 7 3 10 19 13) ((list 5) 7 3 10 19 13);"
    code: "2100000032211110030232211100132110332100113211132113210103210011321101332221110013210133211132113210103210011321101332233"
    stanza: 677
  - 
    role: "code"
    lines: 
      - "= (head / (list 6) 19 7 19 12 16 13) 19;"
    code: "210322111010302322111001321103321001132111321001132110032100003211013321001132233"
    stanza: 678
  - 
    role: "code"
    lines: 
      - "list= (tail / (list 6) 19 7 19 12 16 13) ((list 5) 7 19 12 16 13);"
    code: "2100000032211110030232211100132110332100113211132100113211003210000321101332221110013210133211132100113211003210000321101332233"
    stanza: 679
  - 
    role: "code"
    lines: 
      - "= (head / (list 1) 3) 3;"
    code: "210322111010302322111001321332113321132233"
    stanza: 680
  - 
    role: "code"
    lines: 
      - "list= (tail / (list 1) 3) ((list 0));"
    code: "2100000032211110030232211100132133211332221110013203332233"
    stanza: 681
  - 
    role: "code"
    lines: 
      - "= (head / (list 3) 2 19 17) 2;"
    code: "210322111010302322111001321133210321001132100013321032233"
    stanza: 682
  - 
    role: "code"
    lines: 
      - "list= (tail / (list 3) 2 19 17) ((list 2) 19 17);"
    code: "2100000032211110030232211100132113321032100113210001332221110013210332100113210001332233"
    stanza: 683
  - 
    role: "code"
    lines: 
      - "= (head / (list 7) 1 16 5 14 6 19 2) 1;"
    code: "2103221110103023221110013211133213210000321013211103211032100113210332132233"
    stanza: 684
  - 
    role: "code"
    lines: 
      - "list= (tail / (list 7) 1 16 5 14 6 19 2) ((list 6) 16 5 14 6 19 2);"
    code: "210000003221111003023221110013211133213210000321013211103211032100113210332221110013211033210000321013211103211032100113210332233"
    stanza: 685
  - 
    role: "code"
    lines: 
      - "= (list-ref ((list 3) 18 14 17) 1) 14;"
    code: "210322111110322211100132113321001032111032100013321332111032233"
    stanza: 686
  - 
    role: "code"
    lines: 
      - "= (list-ref ((list 3) 8 11 10) 2) 10;"
    code: "21032211111032221110013211332100032101132101033210332101032233"
    stanza: 687
  - 
    role: "code"
    lines: 
      - "= (list-ref ((list 8) 15 0 4 9 9 2 10 17) 3) 9;"
    code: "21032211111032221110013210003321111320321003210013210013210321010321000133211332100132233"
    stanza: 688
  - 
    role: "code"
    lines: 
      - "= (list-ref ((list 7) 4 8 8 5 14 5 13) 4) 14;"
    code: "2103221111103222111001321113321003210003210003210132111032101321101332100332111032233"
    stanza: 689
  - 
    role: "code"
    lines: 
      - "= (list-ref ((list 4) 1 4 7 18) 2) 7;"
    code: "2103221111103222111001321003321321003211132100103321033211132233"
    stanza: 690
  - 
    role: "code"
    lines: 
      - "= (list-ref ((list 3) 12 2 3) 1) 2;"
    code: "2103221111103222111001321133211003210321133213321032233"
    stanza: 691
  - 
    role: "code"
    lines: 
      - "= (list-ref ((list 6) 12 5 7 15 7 16) 2) 7;"
    code: "210322111110322211100132110332110032101321113211113211132100003321033211132233"
    stanza: 692
  - 
    role: "code"
    lines: 
      - "= (list-ref ((list 8) 5 15 7 14 7 1 11 19) 0) 5;"
    code: "210322111110322211100132100033210132111132111321110321113213210113210011332033210132233"
    stanza: 693
  - 
    role: "code"
    lines: 
      - "= (list-ref ((list 3) 19 17 8) 2) 8;"
    code: "2103221111103222111001321133210011321000132100033210332100032233"
    stanza: 694
  - 
    role: "code"
    lines: 
      - "= (list-ref ((list 4) 10 10 4 11) 1) 10;"
    code: "2103221111103222111001321003321010321010321003210113321332101032233"
    stanza: 695
  - 
    role: "code"
    lines: 
      - "list= ((list 0)) ((list 0));"
    code: "2100000032221110013203332221110013203332233"
    stanza: 696
  - 
    role: "code"
    lines: 
      - "list= ((list 1) 4) ((list 1) 4);"
    code: "21000000322211100132133210033222111001321332100332233"
    stanza: 697
  - 
    role: "code"
    lines: 
      - "list= ((list 2) 7 5) ((list 2) 7 5);"
    code: "21000000322211100132103321113210133222111001321033211132101332233"
    stanza: 698
  - 
    role: "code"
    lines: 
      - "list= ((list 3) 15 13 11) ((list 3) 15 13 11);"
    code: "210000003222111001321133211113211013210113322211100132113321111321101321011332233"
    stanza: 699
  - 
    role: "code"
    lines: 
      - "list= ((list 4) 2 8 0 6) ((list 4) 2 8 0 6);"
    code: "21000000322211100132100332103210003203211033222111001321003321032100032032110332233"
    stanza: 700
  - 
    role: "comment"
    lines: 
      - "# this next batch of examples are a bit misleading, should streamline"
    stanza: 701
  - 
    role: "code"
    lines: 
      - "not / list= ((list 0)) ((list 1) 9);"
    code: "210030232100000032221110013203332221110013213321001332233"
    stanza: 702
  - 
    role: "code"
    lines: 
      - "not / list= ((list 0)) ((list 1) 5);"
    code: "21003023210000003222111001320333222111001321332101332233"
    stanza: 703
  - 
    role: "code"
    lines: 
      - "not / list= ((list 1) 18) ((list 2) 8 18);"
    code: "210030232100000032221110013213321001033222111001321033210003210010332233"
    stanza: 704
  - 
    role: "code"
    lines: 
      - "not / list= ((list 1) 18) ((list 2) 18 5);"
    code: "21003023210000003222111001321332100103322211100132103321001032101332233"
    stanza: 705
  - 
    role: "code"
    lines: 
      - "not / list= ((list 2) 11 18) ((list 3) 7 11 18);"
    code: "210030232100000032221110013210332101132100103322211100132113321113210113210010332233"
    stanza: 706
  - 
    role: "code"
    lines: 
      - "not / list= ((list 2) 11 18) ((list 3) 11 18 6);"
    code: "210030232100000032221110013210332101132100103322211100132113321011321001032110332233"
    stanza: 707
  - 
    role: "code"
    lines: 
      - "not / list= ((list 3) 7 19 17) ((list 4) 6 7 19 17);"
    code: "2100302321000000322211100132113321113210011321000133222111001321003321103211132100113210001332233"
    stanza: 708
  - 
    role: "code"
    lines: 
      - "not / list= ((list 3) 7 19 17) ((list 4) 7 19 17 0);"
    code: "21003023210000003222111001321133211132100113210001332221110013210033211132100113210001320332233"
    stanza: 709
  - 
    role: "code"
    lines: 
      - "not / list= ((list 4) 10 0 11 1) ((list 5) 0 10 0 11 1);"
    code: "2100302321000000322211100132100332101032032101132133222111001321013320321010320321011321332233"
    stanza: 710
  - 
    role: "code"
    lines: 
      - "not / list= ((list 4) 10 0 11 1) ((list 5) 10 0 11 1 8);"
    code: "2100302321000000322211100132100332101032032101132133222111001321013321010320321011321321000332233"
    stanza: 711
  - 
    role: "comment"
    lines: 
      - "# some helpful functions"
    stanza: 712
  - 
    role: "code"
    lines: 
      - "list= (prepend 8 ((list 0))) ((list 1) 8);"
    code: "21000000322111111321000322211100132033332221110013213321000332233"
    stanza: 713
  - 
    role: "code"
    lines: 
      - "list= (prepend 11 ((list 1) 8)) ((list 2) 11 8);"
    code: "210000003221111113210113222111001321332100033322211100132103321011321000332233"
    stanza: 714
  - 
    role: "code"
    lines: 
      - "list= (prepend 13 ((list 2) 1 12)) ((list 3) 13 1 12);"
    code: "2100000032211111132110132221110013210332132110033322211100132113321101321321100332233"
    stanza: 715
  - 
    role: "code"
    lines: 
      - "list= (prepend 0 ((list 3) 7 7 5)) ((list 4) 0 7 7 5);"
    code: "21000000322111111320322211100132113321113211132101333222111001321003320321113211132101332233"
    stanza: 716
  - 
    role: "code"
    lines: 
      - "list= (prepend 16 ((list 4) 16 0 19 3)) ((list 5) 16 16 0 19 3);"
    code: "21000000322111111321000032221110013210033210000320321001132113332221110013210133210000321000032032100113211332233"
    stanza: 717
  - 
    role: "code"
    lines: 
      - "list= (prepend 10 ((list 5) 5 6 7 9 10)) ((list 6) 10 5 6 7 9 10);"
    code: "210000003221111113210103222111001321013321013211032111321001321010333222111001321103321010321013211032111321001321010332233"
    stanza: 718
  - 
    role: "code"
    lines: 
      - "list= (prepend 19 ((list 6) 3 19 18 6 10 16)) ((list 7) 19 3 19 18 6 10 16);"
    code: "21000000322111111321001132221110013211033211321001132100103211032101032100003332221110013211133210011321132100113210010321103210103210000332233"
    stanza: 719
  - 
    role: "code"
    lines: 
      - "list= (prepend 19 ((list 7) 17 17 10 1 18 12 14)) ((list 8) 19 17 17 10 1 18 12 14);"
    code: "210000003221111113210011322211100132111332100013210001321010321321001032110032111033322211100132100033210011321000132100013210103213210010321100321110332233"
    stanza: 720
  - 
    role: "code"
    lines: 
      - "define pair / ? x / ? y / (list 2) (x) (y);"
    code: "21101321101003023211003210010130232110032100100302322111001321033221001013322100100332233"
    stanza: 721
  - 
    role: "code"
    lines: 
      - "define first / ? lst / head / lst;"
    code: "2110132100000130232110032111011302321110103023211101132233"
    stanza: 722
  - 
    role: "code"
    lines: 
      - "define second / ? lst / head / tail / lst;"
    code: "211013210000103023211003211101130232111010302321111003023211101132233"
    stanza: 723
  - 
    role: "code"
    lines: 
      - "list= (pair 3 6) ((list 2) 3 6);"
    code: "210000003221101003211321103322211100132103321132110332233"
    stanza: 724
  - 
    role: "code"
    lines: 
      - "= (first / pair 3 6) 3;"
    code: "2103221000001302321101003211321103321132233"
    stanza: 725
  - 
    role: "code"
    lines: 
      - "= (second / pair 3 6) 6;"
    code: "21032210000103023211010032113211033211032233"
    stanza: 726
  - 
    role: "code"
    lines: 
      - "list= (pair 4 9) ((list 2) 4 9);"
    code: "2100000032211010032100321001332221110013210332100321001332233"
    stanza: 727
  - 
    role: "code"
    lines: 
      - "= (first / pair 4 9) 4;"
    code: "2103221000001302321101003210032100133210032233"
    stanza: 728
  - 
    role: "code"
    lines: 
      - "= (second / pair 4 9) 9;"
    code: "21032210000103023211010032100321001332100132233"
    stanza: 729
  - 
    role: "code"
    lines: 
      - "list= (pair 8 3) ((list 2) 8 3);"
    code: "21000000322110100321000321133222111001321033210003211332233"
    stanza: 730
  - 
    role: "code"
    lines: 
      - "= (first / pair 8 3) 8;"
    code: "2103221000001302321101003210003211332100032233"
    stanza: 731
  - 
    role: "code"
    lines: 
      - "= (second / pair 8 3) 3;"
    code: "21032210000103023211010032100032113321132233"
    stanza: 732
  - 
    role: "code"
    lines: 
      - "define list-find-helper / ? lst / ? key / ? fail / ? idx / if (= (list-length / lst) 0) (fail 0) (if (equal (head / lst) (key)) (idx) (list-find-helper (tail / lst) (key) (fail) (+ (idx) 1)));"
    code: "21101321000011302321100321110113023211003210001003023211003210001013023211003210001103023211113221032211110130232111011332033221000101320332211113221000322111010302321110113322100010033322100011033221000011322111100302321110113322100010033221000101332210103221000110332133332233"
    stanza: 733
  - 
    role: "code"
    lines: 
      - "define list-find / ? lst / ? key / ? fail / list-find-helper (lst) (key) (fail) 0;"
    code: "21101321000111302321100321110113023211003210001003023211003210001013023210000113221110113322100010033221000101332032233"
    stanza: 734
  - 
    role: "code"
    lines: 
      - "define example-fail / ? x 100;"
    code: "211013210010003023211003210010132110010032233"
    stanza: 735
  - 
    role: "code"
    lines: 
      - "= (list-find ((list 1) 13) 13 (example-fail)) 0;"
    code: "210322100011132221110013213321101332110132210010003332032233"
    stanza: 736
  - 
    role: "code"
    lines: 
      - "= (list-find ((list 10) 0 9 8 16 15 14 17 5 9 2) 15 (example-fail)) 4;"
    code: "2103221000111322211100132101033203210013210003210000321111321110321000132101321001321033211113221001000333210032233"
    stanza: 737
  - 
    role: "code"
    lines: 
      - "= (list-find ((list 3) 7 4 10) 7 (example-fail)) 0;"
    code: "2103221000111322211100132113321113210032101033211132210010003332032233"
    stanza: 738
  - 
    role: "code"
    lines: 
      - "= (list-find ((list 6) 0 17 10 13 11 5) 17 (example-fail)) 1;"
    code: "210322100011132221110013211033203210001321010321101321011321013321000132210010003332132233"
    stanza: 739
  - 
    role: "code"
    lines: 
      - "= (list-find ((list 3) 12 9 6) 12 (example-fail)) 0;"
    code: "210322100011132221110013211332110032100132110332110032210010003332032233"
    stanza: 740
  - 
    role: "code"
    lines: 
      - "= (list-find ((list 7) 17 1 4 17 14 13 13) 14 (example-fail)) 4;"
    code: "21032210001113222111001321113321000132132100321000132111032110132110133211103221001000333210032233"
    stanza: 741
  - 
    role: "code"
    lines: 
      - "= (list-find ((list 3) 2 15 2) 15 (example-fail)) 1;"
    code: "210322100011132221110013211332103211113210332111132210010003332132233"
    stanza: 742
  - 
    role: "code"
    lines: 
      - "= (list-find ((list 9) 6 13 10 8 10 9 6 15 18) 13 (example-fail)) 1;"
    code: "21032210001113222111001321001332110321101321010321000321010321001321103211113210010332110132210010003332132233"
    stanza: 743
  - 
    role: "code"
    lines: 
      - "= (list-find ((list 3) 12 16 0) 12 (example-fail)) 0;"
    code: "21032210001113222111001321133211003210000320332110032210010003332032233"
    stanza: 744
  - 
    role: "code"
    lines: 
      - "= (list-find ((list 1) 15) 15 (example-fail)) 0;"
    code: "210322100011132221110013213321111332111132210010003332032233"
    stanza: 745
  - 
    role: "code"
    lines: 
      - "= (list-find ((list 4) 2 17 11 5) 14 (example-fail)) 100;"
    code: "210322100011132221110013210033210321000132101132101332111032210010003332110010032233"
    stanza: 746
  - 
    role: "code"
    lines: 
      - "= (list-find ((list 6) 12 1 19 6 17 9) 2 (example-fail)) 100;"
    code: "2103221000111322211100132110332110032132100113211032100013210013321032210010003332110010032233"
    stanza: 747
  - 
    role: "code"
    lines: 
      - "= (list-find ((list 8) 11 6 17 8 13 10 9 16) 19 (example-fail)) 100;"
    code: "21032210001113222111001321000332101132110321000132100032110132101032100132100003321001132210010003332110010032233"
    stanza: 748
  - 
    role: "file"
    lines: 
      - "== COS_Translate =="
    stanza: 749
  - 
    role: "comment"
    lines: 
      - "# HACK describe changes to the implicit interpreter to allow new special forms"
    section_description: "describe changes to the implicit interpreter to allow new special forms"
    section_category: "HACK"
    section_index: 17
    stanza: 750
  - 
    role: "code"
    lines: 
      - "define base-translate / translate;"
    code: "21101321001001302321100132233"
    stanza: 751
  - 
    role: "code"
    lines: 
      - "define translate / ? x / if (= (x) 32) 64 (base-translate / x);"
    code: "21101321100130232110032100101302321111322103221001013321000003321000000322100100130232100101332233"
    stanza: 752
  - 
    role: "code"
    lines: 
      - "= 32 64;"
    code: "2103210000032100000032233"
    stanza: 753
  - 
    role: "code"
    lines: 
      - "= (+ 32 64) 128;"
    code: "2103221010321000003210000003321000000032233"
    stanza: 754
  - 
    role: "code"
    lines: 
      - "define translate / base-translate;"
    code: "21101321100130232100100132233"
    stanza: 755
  - 
    role: "code"
    lines: 
      - "not / = 32 64;"
    code: "210030232103210000032100000032233"
    stanza: 756
  - 
    role: "code"
    lines: 
      - "= (+ 32 64) 96;"
    code: "210322101032100000321000000332110000032233"
    stanza: 757
  - 
    role: "comment"
    lines: 
      - "# now can create a special form for lists"
    stanza: 758
  - 
    role: "code"
    lines: 
      - "define translate / ? x / if (number? / x) (base-translate / x) (if (= (head / x) vector) (translate / prepend ((list 2) list (list-length / tail / x)) (tail / x)) (base-translate / x));"
    code: "211013211001302321100321001013023211113221100030232100101332210010013023210010133221111322103221110103023210010133210000332211001302321111113222111001321033211100132211110130232111100302321001013332211110030232100101333221001001302321001013332233"
    stanza: 759
  - 
    role: "code"
    lines: 
      - "list= (vector 1 2 3) ((list 3) 1 2 3);"
    code: "210000003221000032132103211332221110013211332132103211332233"
    stanza: 760
  - 
    role: "comment"
    lines: 
      - "# now to desugar let expressions"
    stanza: 761
  - 
    role: "code"
    lines: 
      - "define translate-with-vector / translate;"
    code: "21101321001010302321100132233"
    stanza: 762
  - 
    role: "code"
    lines: 
      - "define translate-let-form / ? x / ? body / if (= (list-length / x) 0) (translate / body) (translate-let-form (tail / x) (vector (vector ? (head / head / x) (body)) (head / tail / head / x)));"
    code: "2110132100101130232110032100101302321100321001100302321111322103221111013023210010133203322110013023210011003322100101132211110030232100101332210000322100003211003221110103023211101030232100101332210011003332211101030232111100302321110103023210010133332233"
    stanza: 763
  - 
    role: "code"
    lines: 
      - "define translate / ? x / if (number? / x) (translate-with-vector / x) (if (= (head / x) let) (translate-let-form (head / tail / x) (head / tail / tail / x)) (translate-with-vector / x));"
    code: "211013211001302321100321001013023211113221100030232100101332210010103023210010133221111322103221110103023210010133210011013322100101132211101030232111100302321001013322111010302321111003023211110030232100101333221001010302321001013332233"
    stanza: 764
  - 
    role: "code"
    lines: 
      - "let ((x 20)) (= (x) 20);"
    code: "2100110132221001013210100333221032210010133210100332233"
    stanza: 765
  - 
    role: "code"
    lines: 
      - "let ((x 50) (y 20)) (= (- (x) (y)) 30);"
    code: "2100110132221001013211001033221001003210100333221032210113221001013322100100333211110332233"
    stanza: 766
  - 
    role: "file"
    lines: 
      - "== COS_List =="
    stanza: 767
  - 
    role: "comment"
    lines: 
      - "# the is-list function is now on dubious ground"
      - "# this stuff will be replaced with typing ASAP"
    stanza: 768
  - 
    role: "code"
    lines: 
      - "define is-list / ? x / not / number? / x;"
    code: "21101321001110302321100321001013023210030232110003023210010132233"
    stanza: 769
  - 
    role: "code"
    lines: 
      - "is-list / (list 2) 1 3;"
    code: "2100111030232211100132103321321132233"
    stanza: 770
  - 
    role: "code"
    lines: 
      - "is-list / (list 0);"
    code: "21001110302322111001320332233"
    stanza: 771
  - 
    role: "code"
    lines: 
      - "not / is-list 23;"
    code: "2100302321001110321011132233"
    stanza: 772
  - 
    role: "code"
    lines: 
      - "is-list / (list 3) ((list 2) 2 3) 1 (? x / + (x) 10);"
    code: "21001110302322111001321133222111001321033210321133213221100321001013023210103221001013321010332233"
    stanza: 773
  - 
    role: "file"
    lines: 
      - "== COS_Let =="
    stanza: 774
  - 
    role: "comment"
    lines: 
      - "# MATH introduce sugar for let"
      - "# if would be good to introduce desugarings more rigorously, but for now..."
      - "# ... just a very vague sketch"
    section_description: "introduce sugar for let"
    section_category: "MATH"
    section_index: 18
    stanza: 775
  - 
    role: "code"
    lines: 
      - "intro let;"
    code: "2032100110132233"
    stanza: 776
  - 
    role: "code"
    lines: 
      - "= (let ((x 10)) (+ (x) 5)) ((? x / + (x) 5) 10);"
    code: "210322100110132221001013210103332210103221001013321013332221100321001013023210103221001013321013321010332233"
    stanza: 777
  - 
    role: "code"
    lines: 
      - "= (let ((x 10) (y 5)) (+ (x) (y))) (((? x / ? y / + (x) (y)) 10) 5);"
    code: "2103221001101322210010132101033221001003210133322101032210010133221001003333222211003210010130232110032100100302321010322100101332210010033321010332101332233"
    stanza: 778
  - 
    role: "file"
    lines: 
      - "== COS_MultipleParameter =="
    stanza: 779
  - 
    role: "comment"
    lines: 
      - "# MATH build up functions of several variables"
    section_description: "build up functions of several variables"
    section_category: "MATH"
    section_index: 19
    stanza: 780
  - 
    role: "code"
    lines: 
      - "= ((? x / ? y / - (x) (y)) 4 0) 4;"
    code: "2103222110032100101302321100321001003023210113221001013322100100333210032033210032233"
    stanza: 781
  - 
    role: "code"
    lines: 
      - "= ((? x / ? y / - (x) (y)) 11 8) 3;"
    code: "2103222110032100101302321100321001003023210113221001013322100100333210113210003321132233"
    stanza: 782
  - 
    role: "code"
    lines: 
      - "= ((? x / ? y / - (x) (y)) 5 5) 0;"
    code: "2103222110032100101302321100321001003023210113221001013322100100333210132101332032233"
    stanza: 783
  - 
    role: "code"
    lines: 
      - "= ((? x / ? y / - (x) (y)) 10 1) 9;"
    code: "210322211003210010130232110032100100302321011322100101332210010033321010321332100132233"
    stanza: 784
  - 
    role: "code"
    lines: 
      - "= ((? x / ? y / - (x) (y)) 10 7) 3;"
    code: "210322211003210010130232110032100100302321011322100101332210010033321010321113321132233"
    stanza: 785
  - 
    role: "code"
    lines: 
      - "define last / ? x / list-ref (x) (- (list-length / x) 1);"
    code: "21101321001111302321100321001013023211111032210010133221011322111101302321001013321332233"
    stanza: 786
  - 
    role: "code"
    lines: 
      - "define except-last / ? x / if (> (list-length / x) 1) (prepend (head / x) (except-last / tail / x)) (vector);"
    code: "2110132101000030232110032100101302321111322113221111013023210010133213322111111322111010302321001013322101000030232111100302321001013332210000332233"
    stanza: 787
  - 
    role: "comment"
    lines: 
      - "# test last and except-last"
    stanza: 788
  - 
    role: "code"
    lines: 
      - "= 15 (last / vector 4 5 15);"
    code: "210321111322100111130232100003210032101321111332233"
    stanza: 789
  - 
    role: "code"
    lines: 
      - "list= (vector 4 5) (except-last / vector 4 5 15);"
    code: "210000003221000032100321013322101000030232100003210032101321111332233"
    stanza: 790
  - 
    role: "code"
    lines: 
      - "intro lambda;"
    code: "20321101032233"
    stanza: 791
  - 
    role: "code"
    lines: 
      - "define prev-translate / translate;"
    code: "21101321010001302321100132233"
    stanza: 792
  - 
    role: "code"
    lines: 
      - "define translate / let ((prev (prev-translate))) (? x / if (number? / x) (prev / x) (if (= (head / x) lambda) (let ((formals (head / tail / x)) (body (head / tail / tail / x))) (if (> (list-length / formals) 0) (translate (vector lambda (except-last / formals) (vector ? (last / formals) (body)))) (translate (body)))) (prev / x)));"
    code: "211013211001302321001101322210100103221010001333322110032100101302321111322110003023210010133221010010302321001013322111132210322111010302321001013321101033221001101322210100113221110103023211110030232100101333221001100322111010302321111003023211110030232100101333322111132211322111101302321010011332033221100132210000321101032210100003023210100113322100003211003221001111302321010011332210011003333322110013221001100333332210100103023210010133332233"
    stanza: 793
  - 
    role: "comment"
    lines: 
      - "# test lambda"
    stanza: 794
  - 
    role: "code"
    lines: 
      - "= ((lambda (x y) (- (x) (y))) 8 3) 5;"
    code: "21032221101032210010132100100332210113221001013322100100333321000321133210132233"
    stanza: 795
  - 
    role: "code"
    lines: 
      - "= ((lambda (x y) (- (x) (y))) 1 1) 0;"
    code: "21032221101032210010132100100332210113221001013322100100333321321332032233"
    stanza: 796
  - 
    role: "code"
    lines: 
      - "= ((lambda (x y) (- (x) (y))) 10 9) 1;"
    code: "21032221101032210010132100100332210113221001013322100100333321010321001332132233"
    stanza: 797
  - 
    role: "code"
    lines: 
      - "= ((lambda (x y) (- (x) (y))) 7 5) 2;"
    code: "2103222110103221001013210010033221011322100101332210010033332111321013321032233"
    stanza: 798
  - 
    role: "code"
    lines: 
      - "= ((lambda (x y) (- (x) (y))) 9 8) 1;"
    code: "21032221101032210010132100100332210113221001013322100100333321001321000332132233"
    stanza: 799
  - 
    role: "code"
    lines: 
      - "define apply / lambda (x y) (if (list= (y) (vector)) (x) (apply ((x) (head / y)) (tail / y)));"
    code: "2110132101010030232110103221001013210010033221111322100000032210010033221000033322100101332210101003222100101332211101030232100100333221111003023210010033332233"
    stanza: 800
  - 
    role: "code"
    lines: 
      - "= (apply (lambda (x y) (- (x) (y))) (vector 8 6)) 2;"
    code: "21032210101003221101032210010132100100332210113221001013322100100333322100003210003211033321032233"
    stanza: 801
  - 
    role: "code"
    lines: 
      - "= (apply (lambda (x y) (- (x) (y))) (vector 5 0)) 5;"
    code: "210322101010032211010322100101321001003322101132210010133221001003333221000032101320333210132233"
    stanza: 802
  - 
    role: "code"
    lines: 
      - "= (apply (lambda (x y) (- (x) (y))) (vector 12 9)) 3;"
    code: "210322101010032211010322100101321001003322101132210010133221001003333221000032110032100133321132233"
    stanza: 803
  - 
    role: "code"
    lines: 
      - "= (apply (lambda (x y) (- (x) (y))) (vector 13 8)) 5;"
    code: "2103221010100322110103221001013210010033221011322100101332210010033332210000321101321000333210132233"
    stanza: 804
  - 
    role: "code"
    lines: 
      - "= (apply (lambda (x y) (- (x) (y))) (vector 11 3)) 8;"
    code: "210322101010032211010322100101321001003322101132210010133221001003333221000032101132113332100032233"
    stanza: 805
  - 
    role: "file"
    lines: 
      - "== COS_Map =="
    stanza: 806
  - 
    role: "comment"
    lines: 
      - "# MATH show map function for applying a function across the elements of a list"
    section_description: "show map function for applying a function across the elements of a list"
    section_category: "MATH"
    section_index: 20
    stanza: 807
  - 
    role: "code"
    lines: 
      - "define map / lambda (p lst) (if (> (list-length / lst) 0) (prepend (p (head / lst)) (map (p) (tail / lst))) (vector));"
    code: "211013210101013023211010322101011032111011332211113221132211110130232111011332033221111113221010110322111010302321110113332210101013221010110332211110030232111011333322100003332233"
    stanza: 808
  - 
    role: "code"
    lines: 
      - "list= (map (? x / * (x) 2) (vector 0 8 15)) (vector 0 16 30);"
    code: "21000000322101010132211003210010130232100132210010133210332210000320321000321111333221000032032100003211110332233"
    stanza: 809
  - 
    role: "code"
    lines: 
      - "list= (map (? x / * (x) 2) (vector 12 4 0 9)) (vector 24 8 0 18);"
    code: "2100000032210101013221100321001013023210013221001013321033221000032110032100320321001333221000032110003210003203210010332233"
    stanza: 810
  - 
    role: "code"
    lines: 
      - "list= (map (? x / * (x) 2) (vector 8 9 5 7 10)) (vector 16 18 10 14 20);"
    code: "2100000032210101013221100321001013023210013221001013321033221000032100032100132101321113210103332210000321000032100103210103211103210100332233"
    stanza: 811
  - 
    role: "code"
    lines: 
      - "list= (map (? x / * (x) 2) (vector 10 12 19 8 3 1)) (vector 20 24 38 16 6 2);"
    code: "2100000032210101013221100321001013023210013221001013321033221000032101032110032100113210003211321333221000032101003211000321001103210000321103210332233"
    stanza: 812
  - 
    role: "code"
    lines: 
      - "list= (map (? x 42) (vector 5 18 4)) (vector 42 42 42);"
    code: "21000000322101010132211003210010132101010332210000321013210010321003332210000321010103210101032101010332233"
    stanza: 813
  - 
    role: "code"
    lines: 
      - "list= (map (? x 42) (vector 3 10 17 11)) (vector 42 42 42 42);"
    code: "2100000032210101013221100321001013210101033221000032113210103210001321011333221000032101010321010103210101032101010332233"
    stanza: 814
  - 
    role: "code"
    lines: 
      - "list= (map (? x 42) (vector 5 13 6 16 2)) (vector 42 42 42 42 42);"
    code: "2100000032210101013221100321001013210101033221000032101321101321103210000321033322100003210101032101010321010103210101032101010332233"
    stanza: 815
  - 
    role: "code"
    lines: 
      - "list= (map (? x 42) (vector 9 1 19 14 6 10)) (vector 42 42 42 42 42 42);"
    code: "210000003221010101322110032100101321010103322100003210013213210011321110321103210103332210000321010103210101032101010321010103210101032101010332233"
    stanza: 816
  - 
    role: "code"
    lines: 
      - "define crunch / lambda (p lst) (if (>= (list-length / lst) 2) (p (head / lst) (crunch (p) (tail / lst))) (if (= (list-length / lst) 1) (head / lst) (undefined)));"
    code: "2110132101011130232110103221010110321110113322111132211000132211110130232111011332103322101011032211101030232111011332210101113221010110332211110030232111011333322111132210322111101302321110113321332211101030232111011332210000033332233"
    stanza: 817
  - 
    role: "code"
    lines: 
      - "= (crunch (+) (vector 5 12 2)) 19;"
    code: "2103221010111322101033221000032101321100321033321001132233"
    stanza: 818
  - 
    role: "code"
    lines: 
      - "= (crunch (+) (vector 11 18 1 4)) 34;"
    code: "21032210101113221010332210000321011321001032132100333210001032233"
    stanza: 819
  - 
    role: "code"
    lines: 
      - "= (crunch (+) (vector 15 13 10 12 2)) 52;"
    code: "210322101011132210103322100003211113211013210103211003210333211010032233"
    stanza: 820
  - 
    role: "code"
    lines: 
      - "= (crunch (+) (vector 12 6 17 15 4 10)) 64;"
    code: "21032210101113221010332210000321100321103210001321111321003210103332100000032233"
    stanza: 821
  - 
    role: "file"
    lines: 
      - "== COS_CommentBase =="
    stanza: 822
  - 
    role: "comment"
    lines: 
      - "# NOTE end of part 1, start of part 2"
      - "# The following parts of the message are experimental, and not"
      - "# carefully integrated with the main body"
    section_description: "end of part 1, start of part 2"
    section_category: "NOTE"
    section_index: 21
    stanza: 823
  - 
    role: "code"
    lines: 
      - "intro part2;"
    code: "2032101100032233"
    stanza: 824
  - 
    role: "file"
    lines: 
      - "== COS_Recursion =="
    stanza: 825
  - 
    role: "comment"
    lines: 
      - "# MATH show an example of recursive evaluation"
      - "# skipping over a lot of definitions and desugarings"
    section_description: "show an example of recursive evaluation"
    section_category: "MATH"
    section_index: 22
    stanza: 826
  - 
    role: "code"
    lines: 
      - "define easy-factorial / ? f / ? x / if (> (x) 0) (* (x) / f (f) (- (x) 1)) 1;"
    code: "211013210110013023211003211001130232110032100101302321111322113221001013320332210013221001013302321100113221100113322101132210010133213332132233"
    stanza: 827
  - 
    role: "code"
    lines: 
      - "define factorial / ? x / if (> (x) 0) (* (x) / factorial / - (x) 1) 1;"
    code: "211013210111130232110032100101302321111322113221001013320332210013221001013302321011113023210113221001013321332132233"
    stanza: 828
  - 
    role: "code"
    lines: 
      - "= (easy-factorial (easy-factorial) 0) 1;"
    code: "210322101100132210110013320332132233"
    stanza: 829
  - 
    role: "code"
    lines: 
      - "= (easy-factorial (easy-factorial) 1) 1;"
    code: "210322101100132210110013321332132233"
    stanza: 830
  - 
    role: "code"
    lines: 
      - "= (easy-factorial (easy-factorial) 2) 2;"
    code: "21032210110013221011001332103321032233"
    stanza: 831
  - 
    role: "code"
    lines: 
      - "= (easy-factorial (easy-factorial) 3) 6;"
    code: "210322101100132210110013321133211032233"
    stanza: 832
  - 
    role: "code"
    lines: 
      - "= (easy-factorial (easy-factorial) 4) 24;"
    code: "210322101100132210110013321003321100032233"
    stanza: 833
  - 
    role: "code"
    lines: 
      - "= (easy-factorial (easy-factorial) 5) 120;"
    code: "21032210110013221011001332101332111100032233"
    stanza: 834
  - 
    role: "code"
    lines: 
      - "= (factorial 0) 1;"
    code: "210322101111320332132233"
    stanza: 835
  - 
    role: "code"
    lines: 
      - "= (factorial 1) 1;"
    code: "210322101111321332132233"
    stanza: 836
  - 
    role: "code"
    lines: 
      - "= (factorial 2) 2;"
    code: "21032210111132103321032233"
    stanza: 837
  - 
    role: "code"
    lines: 
      - "= (factorial 3) 6;"
    code: "210322101111321133211032233"
    stanza: 838
  - 
    role: "code"
    lines: 
      - "= (factorial 4) 24;"
    code: "210322101111321003321100032233"
    stanza: 839
  - 
    role: "code"
    lines: 
      - "= (factorial 5) 120;"
    code: "21032210111132101332111100032233"
    stanza: 840
  - 
    role: "file"
    lines: 
      - "== COS_Pure =="
    stanza: 841
  - 
    role: "comment"
    lines: 
      - "# MATH some pure lambda calculus definitions - optional"
      - "# these definitions are not quite what we want"
      - "# since thinking of everything as a function requires headscratching"
      - "# it would be better to use these as a parallel means of evaluation"
      - "# ... for expressions"
    section_description: "some pure lambda calculus definitions - optional"
    section_category: "MATH"
    section_index: 23
    stanza: 842
  - 
    role: "code"
    lines: 
      - "define pure-if / ? x / ? y / ? z / x (y) (z);"
    code: "21101321011010302321100321001013023211003210010030232110032100110302321001013221001003322100110332233"
    stanza: 843
  - 
    role: "code"
    lines: 
      - "define pure-true / ? y / ? z / y;"
    code: "2110132101101130232110032100100302321100321001103023210010032233"
    stanza: 844
  - 
    role: "code"
    lines: 
      - "define pure-false / ? y / ? z / z;"
    code: "2110132101110030232110032100100302321100321001103023210011032233"
    stanza: 845
  - 
    role: "code"
    lines: 
      - "define pure-cons / ? x / ? y / ? z / pure-if (z) (x) (y);"
    code: "2110132101110130232110032100101302321100321001003023211003210011030232101101032210011033221001013322100100332233"
    stanza: 846
  - 
    role: "code"
    lines: 
      - "define pure-car / ? x / x (pure-true);"
    code: "2110132101111030232110032100101302321001013221011011332233"
    stanza: 847
  - 
    role: "code"
    lines: 
      - "define pure-cdr / ? x / x (pure-false);"
    code: "2110132101111130232110032100101302321001013221011100332233"
    stanza: 848
  - 
    role: "code"
    lines: 
      - "define zero / ? f / ? x / x;"
    code: "2110132110000030232110032110011302321100321001013023210010132233"
    stanza: 849
  - 
    role: "code"
    lines: 
      - "define one / ? f / ? x / f (x);"
    code: "21101321100001302321100321100113023211003210010130232110011322100101332233"
    stanza: 850
  - 
    role: "code"
    lines: 
      - "define two / ? f / ? x / f (f (x));"
    code: "211013211000103023211003211001130232110032100101302321100113221100113221001013332233"
    stanza: 851
  - 
    role: "code"
    lines: 
      - "define succ / ? n / ? f / ? x / f ((n (f)) (x));"
    code: "21101321100011302321100321100003023211003211001130232110032100101302321100113222110000322110011333221001013332233"
    stanza: 852
  - 
    role: "code"
    lines: 
      - "define add / ? a / ? b / (a (succ)) (b);"
    code: "2110132110010030232110032110010130232110032110011030232211001013221100011333221100110332233"
    stanza: 853
  - 
    role: "code"
    lines: 
      - "define mult / ? a / ? b / (a (add / b)) (zero);"
    code: "2110132110011130232110032110010130232110032110011030232211001013221100100302321100110333221100000332233"
    stanza: 854
  - 
    role: "code"
    lines: 
      - "define pred / ? n / pure-cdr / (n (? p / pure-cons (succ / pure-car / p) (pure-car / p))) (pure-cons (zero) (zero));"
    code: "2110132110100030232110032110000302321011111302322110000322110032101011030232101110132211000113023210111103023210101103322101111030232101011033332210111013221100000332211000003332233"
    stanza: 855
  - 
    role: "code"
    lines: 
      - "define is-zero / ? n / (n (? dummy / pure-false) (pure-true));"
    code: "21101321101001302321100321100003023221100003221100321101010302321011100332210110113332233"
    stanza: 856
  - 
    role: "code"
    lines: 
      - "define fixed-point / ? f / (? x / f (x (x))) (? x / f (x (x)));"
    code: "2110132110101130232110032110011302322110032100101302321100113221001013221001013333221100321001013023211001132210010132210010133332233"
    stanza: 857
  - 
    role: "comment"
    lines: 
      - "# .. but for rest of message will assume that define does fixed-point for us"
      - "# now build a link between numbers and church number functions"
    stanza: 858
  - 
    role: "code"
    lines: 
      - "define unchurch / ? c / c (? x / + (x) 1) 0;"
    code: "211013211011003023211003211011013023211011013221100321001013023210103221001013321332032233"
    stanza: 859
  - 
    role: "code"
    lines: 
      - "= 0 (unchurch / zero);"
    code: "2103203221101100302321100000332233"
    stanza: 860
  - 
    role: "code"
    lines: 
      - "= 1 (unchurch / one);"
    code: "2103213221101100302321100001332233"
    stanza: 861
  - 
    role: "code"
    lines: 
      - "= 2 (unchurch / two);"
    code: "21032103221101100302321100010332233"
    stanza: 862
  - 
    role: "code"
    lines: 
      - "define church / ? x / if (= 0 (x)) (zero) (succ / church / - (x) 1);"
    code: "211013211011103023211003210010130232111132210320322100101333221100000332211000113023211011103023210113221001013321332233"
    stanza: 863
  - 
    role: "file"
    lines: 
      - "== COS_Quantifier =="
    stanza: 864
  - 
    role: "comment"
    lines: 
      - "# MATH introduce universal quantifier"
      - "# really need to link with sets for true correctness"
      - "# and the examples here are REALLY sparse, need much more"
    section_description: "introduce universal quantifier"
    section_category: "MATH"
    section_index: 24
    stanza: 865
  - 
    role: "code"
    lines: 
      - "intro forall;"
    code: "20321001132233"
    stanza: 866
  - 
    role: "code"
    lines: 
      - "< 5 (+ 5 1);"
    code: "2132101322101032101321332233"
    stanza: 867
  - 
    role: "code"
    lines: 
      - "< 4 (+ 4 1);"
    code: "2132100322101032100321332233"
    stanza: 868
  - 
    role: "code"
    lines: 
      - "< 3 (+ 3 1);"
    code: "21321132210103211321332233"
    stanza: 869
  - 
    role: "code"
    lines: 
      - "< 2 (+ 2 1);"
    code: "21321032210103210321332233"
    stanza: 870
  - 
    role: "code"
    lines: 
      - "< 1 (+ 1 1);"
    code: "213213221010321321332233"
    stanza: 871
  - 
    role: "code"
    lines: 
      - "< 0 (+ 0 1);"
    code: "213203221010320321332233"
    stanza: 872
  - 
    role: "code"
    lines: 
      - "forall (? x / < (x) (+ (x) 1));"
    code: "2100113221100321001013023213221001013322101032210010133213332233"
    stanza: 873
  - 
    role: "code"
    lines: 
      - "< 5 (* 5 2);"
    code: "21321013221001321013210332233"
    stanza: 874
  - 
    role: "code"
    lines: 
      - "< 4 (* 4 2);"
    code: "21321003221001321003210332233"
    stanza: 875
  - 
    role: "code"
    lines: 
      - "< 3 (* 3 2);"
    code: "213211322100132113210332233"
    stanza: 876
  - 
    role: "code"
    lines: 
      - "< 2 (* 2 2);"
    code: "213210322100132103210332233"
    stanza: 877
  - 
    role: "code"
    lines: 
      - "< 1 (* 1 2);"
    code: "2132132210013213210332233"
    stanza: 878
  - 
    role: "code"
    lines: 
      - "not / < 0 (* 0 2);"
    code: "210030232132032210013203210332233"
    stanza: 879
  - 
    role: "code"
    lines: 
      - "not / forall (? x / < (x) (* (x) 2));"
    code: "2100302321001132211003210010130232132210010133221001322100101332103332233"
    stanza: 880
  - 
    role: "comment"
    lines: 
      - "# MATH introduce existential quantifier"
      - "# really need to link with sets for true correctness"
      - "# and the examples here are REALLY sparse, need much more"
    section_description: "introduce existential quantifier"
    section_category: "MATH"
    section_index: 25
    stanza: 881
  - 
    role: "code"
    lines: 
      - "not / = 5 (* 2 2);"
    code: "2100302321032101322100132103210332233"
    stanza: 882
  - 
    role: "code"
    lines: 
      - "= 4 (* 2 2);"
    code: "21032100322100132103210332233"
    stanza: 883
  - 
    role: "code"
    lines: 
      - "not / = 3 (* 2 2);"
    code: "210030232103211322100132103210332233"
    stanza: 884
  - 
    role: "code"
    lines: 
      - "not / = 2 (* 2 2);"
    code: "210030232103210322100132103210332233"
    stanza: 885
  - 
    role: "code"
    lines: 
      - "not / = 1 (* 2 2);"
    code: "21003023210321322100132103210332233"
    stanza: 886
  - 
    role: "code"
    lines: 
      - "not / = 0 (* 2 2);"
    code: "21003023210320322100132103210332233"
    stanza: 887
  - 
    role: "code"
    lines: 
      - "intro exists;"
    code: "20321010032233"
    stanza: 888
  - 
    role: "code"
    lines: 
      - "exists (? x / = (x) (* 2 2));"
    code: "210100322110032100101302321032210010133221001321032103332233"
    stanza: 889
  - 
    role: "code"
    lines: 
      - "not / = 5 (+ 5 2);"
    code: "21003023210321013221010321013210332233"
    stanza: 890
  - 
    role: "code"
    lines: 
      - "not / = 4 (+ 4 2);"
    code: "21003023210321003221010321003210332233"
    stanza: 891
  - 
    role: "code"
    lines: 
      - "not / = 3 (+ 3 2);"
    code: "210030232103211322101032113210332233"
    stanza: 892
  - 
    role: "code"
    lines: 
      - "not / = 2 (+ 2 2);"
    code: "210030232103210322101032103210332233"
    stanza: 893
  - 
    role: "code"
    lines: 
      - "not / = 1 (+ 1 2);"
    code: "2100302321032132210103213210332233"
    stanza: 894
  - 
    role: "code"
    lines: 
      - "not / = 0 (+ 0 2);"
    code: "2100302321032032210103203210332233"
    stanza: 895
  - 
    role: "code"
    lines: 
      - "not (exists (? x / = (x) (+ (x) 2)));"
    code: "2100322101003221100321001013023210322100101332210103221001013321033332233"
    stanza: 896
  - 
    role: "file"
    lines: 
      - "== COS_Implication =="
    stanza: 897
  - 
    role: "comment"
    lines: 
      - "# MATH introduce logical implication"
    section_description: "introduce logical implication"
    section_category: "MATH"
    section_index: 26
    stanza: 898
  - 
    role: "code"
    lines: 
      - "intro =>;"
    code: "2032110111132233"
    stanza: 899
  - 
    role: "code"
    lines: 
      - "define => / ? x / ? y / not / and (x) (not / y);"
    code: "2110132110111130232110032100101302321100321001003023210030232101322100101332210030232100100332233"
    stanza: 900
  - 
    role: "code"
    lines: 
      - "=> (true) (true);"
    code: "211011113221010113322101011332233"
    stanza: 901
  - 
    role: "code"
    lines: 
      - "not / => (true) (false);"
    code: "21003023211011113221010113322101100332233"
    stanza: 902
  - 
    role: "code"
    lines: 
      - "=> (false) (true);"
    code: "211011113221011003322101011332233"
    stanza: 903
  - 
    role: "code"
    lines: 
      - "=> (false) (false);"
    code: "211011113221011003322101100332233"
    stanza: 904
  - 
    role: "code"
    lines: 
      - "forall (? x / forall (? y / => (=> (x) (y)) (=> (not / y) (not / x))));"
    code: "21001132211003210010130232100113221100321001003023211011113221101111322100101332210010033322110111132210030232100100332210030232100101333332233"
    stanza: 905
  - 
    role: "file"
    lines: 
      - "== COS_Set =="
    stanza: 906
  - 
    role: "comment"
    lines: 
      - "# MATH introduce sets and set membership"
    section_description: "introduce sets and set membership"
    section_category: "MATH"
    section_index: 27
    stanza: 907
  - 
    role: "code"
    lines: 
      - "intro element;"
    code: "2032111000032233"
    stanza: 908
  - 
    role: "code"
    lines: 
      - "define element / ? x / ? lst / not / = (list-find-helper (lst) (x) (? y 0) 1) 0;"
    code: "2110132111000030232110032100101302321100321110113023210030232103221000011322111011332210010133221100321001003203321332032233"
    stanza: 909
  - 
    role: "code"
    lines: 
      - "element 0 (vector 0 4 8 3 5);"
    code: "211100003203221000032032100321000321132101332233"
    stanza: 910
  - 
    role: "code"
    lines: 
      - "element 5 (vector 0 4 8 3 5);"
    code: "21110000321013221000032032100321000321132101332233"
    stanza: 911
  - 
    role: "code"
    lines: 
      - "element 3 (vector 0 4 8 3 5);"
    code: "2111000032113221000032032100321000321132101332233"
    stanza: 912
  - 
    role: "code"
    lines: 
      - "element 3 (vector 3 5 1 0 9);"
    code: "21110000321132210000321132101321320321001332233"
    stanza: 913
  - 
    role: "code"
    lines: 
      - "element 1 (vector 3 5 1 0 9);"
    code: "2111000032132210000321132101321320321001332233"
    stanza: 914
  - 
    role: "code"
    lines: 
      - "element 5 (vector 3 5 1 0 9);"
    code: "211100003210132210000321132101321320321001332233"
    stanza: 915
  - 
    role: "code"
    lines: 
      - "element 5 (vector 8 1 6 2 0 5);"
    code: "21110000321013221000032100032132110321032032101332233"
    stanza: 916
  - 
    role: "code"
    lines: 
      - "element 6 (vector 8 1 6 2 0 5);"
    code: "21110000321103221000032100032132110321032032101332233"
    stanza: 917
  - 
    role: "code"
    lines: 
      - "element 5 (vector 8 1 6 2 0 5);"
    code: "21110000321013221000032100032132110321032032101332233"
    stanza: 918
  - 
    role: "code"
    lines: 
      - "element 5 (vector 5 3 8 6 2 9);"
    code: "211100003210132210000321013211321000321103210321001332233"
    stanza: 919
  - 
    role: "code"
    lines: 
      - "element 5 (vector 5 3 8 6 2 9);"
    code: "211100003210132210000321013211321000321103210321001332233"
    stanza: 920
  - 
    role: "code"
    lines: 
      - "element 9 (vector 5 3 8 6 2 9);"
    code: "2111000032100132210000321013211321000321103210321001332233"
    stanza: 921
  - 
    role: "code"
    lines: 
      - "element 7 (vector 1 7 2 6 4 5);"
    code: "211100003211132210000321321113210321103210032101332233"
    stanza: 922
  - 
    role: "code"
    lines: 
      - "element 2 (vector 1 7 2 6 4 5);"
    code: "21110000321032210000321321113210321103210032101332233"
    stanza: 923
  - 
    role: "code"
    lines: 
      - "element 6 (vector 1 7 2 6 4 5);"
    code: "211100003211032210000321321113210321103210032101332233"
    stanza: 924
  - 
    role: "code"
    lines: 
      - "not / element 7 (vector 8 3 9 6);"
    code: "21003023211100003211132210000321000321132100132110332233"
    stanza: 925
  - 
    role: "code"
    lines: 
      - "not / element 1 (vector 8 6 3 5 4);"
    code: "2100302321110000321322100003210003211032113210132100332233"
    stanza: 926
  - 
    role: "code"
    lines: 
      - "not / element 2 (vector 9 5 6);"
    code: "21003023211100003210322100003210013210132110332233"
    stanza: 927
  - 
    role: "code"
    lines: 
      - "not / element 5 (vector 2 0 7);"
    code: "21003023211100003210132210000321032032111332233"
    stanza: 928
  - 
    role: "code"
    lines: 
      - "not / element 6 (vector 3 5);"
    code: "21003023211100003211032210000321132101332233"
    stanza: 929
  - 
    role: "comment"
    lines: 
      - "# rules for set equality"
    stanza: 930
  - 
    role: "code"
    lines: 
      - "define set-subset / ? x / ? y / if (> (list-length / x) 0) (and (element (head / x) (y)) (set-subset (tail / x) (y))) (true);"
    code: "2110132111000130232110032100101302321100321001003023211113221132211110130232100101332033221013221110000322111010302321001013322100100333221110001322111100302321001013322100100333322101011332233"
    stanza: 931
  - 
    role: "code"
    lines: 
      - "define set= / ? x / ? y / and (set-subset (x) (y)) (set-subset (y) (x));"
    code: "211013211100103023211003210010130232110032100100302321013221110001322100101332210010033322111000132210010033221001013332233"
    stanza: 932
  - 
    role: "code"
    lines: 
      - "set= (vector 1 5 9) (vector 5 1 9);"
    code: "21110010322100003213210132100133221000032101321321001332233"
    stanza: 933
  - 
    role: "code"
    lines: 
      - "set= (vector 1 5 9) (vector 9 1 5);"
    code: "21110010322100003213210132100133221000032100132132101332233"
    stanza: 934
  - 
    role: "code"
    lines: 
      - "not / set= (vector 1 5 9) (vector 1 5);"
    code: "2100302321110010322100003213210132100133221000032132101332233"
    stanza: 935
  - 
    role: "comment"
    lines: 
      - "# let's go leave ourselves wide open to Russell's paradox"
      - "# ... by using characteristic functions"
      - "# ... since it doesn't really matter for communication purposes"
      - "# ... and so far this is just used/tested with sets of integers really"
    stanza: 936
  - 
    role: "code"
    lines: 
      - "element 5 (all (? x / = (+ (x) 10) 15));"
    code: "21110000321013221111032211003210010130232103221010322100101332101033211113332233"
    stanza: 937
  - 
    role: "code"
    lines: 
      - "element 3 (all (? x / = (* (x) 3) (+ (x) 6)));"
    code: "2111000032113221111032211003210010130232103221001322100101332113322101032210010133211033332233"
    stanza: 938
  - 
    role: "code"
    lines: 
      - "define empty-set / vector;"
    code: "21101321110011302321000032233"
    stanza: 939
  - 
    role: "code"
    lines: 
      - "element 0 (natural-set);"
    code: "2111000032032211111332233"
    stanza: 940
  - 
    role: "code"
    lines: 
      - "forall (? x / => (element (x) (natural-set)) (element (+ (x) 1) (natural-set)));"
    code: "21001132211003210010130232110111132211100003221001013322111113332211100003221010322100101332133221111133332233"
    stanza: 941
  - 
    role: "code"
    lines: 
      - "element 1 (natural-set);"
    code: "2111000032132211111332233"
    stanza: 942
  - 
    role: "code"
    lines: 
      - "element 2 (natural-set);"
    code: "21110000321032211111332233"
    stanza: 943
  - 
    role: "code"
    lines: 
      - "element 3 (natural-set);"
    code: "21110000321132211111332233"
    stanza: 944
  - 
    role: "code"
    lines: 
      - "element 4 (natural-set);"
    code: "211100003210032211111332233"
    stanza: 945
  - 
    role: "code"
    lines: 
      - "element 5 (natural-set);"
    code: "211100003210132211111332233"
    stanza: 946
  - 
    role: "code"
    lines: 
      - "element 6 (natural-set);"
    code: "211100003211032211111332233"
    stanza: 947
  - 
    role: "code"
    lines: 
      - "element 7 (natural-set);"
    code: "211100003211132211111332233"
    stanza: 948
  - 
    role: "code"
    lines: 
      - "element 8 (natural-set);"
    code: "2111000032100032211111332233"
    stanza: 949
  - 
    role: "code"
    lines: 
      - "element 9 (natural-set);"
    code: "2111000032100132211111332233"
    stanza: 950
  - 
    role: "code"
    lines: 
      - "define boolean-set / vector (true) (false);"
    code: "2110132111010030232100003221010113322101100332233"
    stanza: 951
  - 
    role: "code"
    lines: 
      - "element (true) (boolean-set);"
    code: "2111000032210101133221110100332233"
    stanza: 952
  - 
    role: "code"
    lines: 
      - "element (false) (boolean-set);"
    code: "2111000032210110033221110100332233"
    stanza: 953
  - 
    role: "comment"
    lines: 
      - "# actually, to simplify semantics elsewhere, true and false"
      - "# are now just 0 and 1 so they are not distinct from ints"
    stanza: 954
  - 
    role: "code"
    lines: 
      - "define even-natural-set / all / ? x / exists / ? y / and (element (y) (natural-set)) (= (* 2 (y)) (x));"
    code: "21101321110101302321111030232110032100101302321010030232110032100100302321013221110000322100100332211111333221032210013210322100100333221001013332233"
    stanza: 955
  - 
    role: "code"
    lines: 
      - "element 0 (natural-set);"
    code: "2111000032032211111332233"
    stanza: 956
  - 
    role: "code"
    lines: 
      - "element 0 (even-natural-set);"
    code: "211100003203221110101332233"
    stanza: 957
  - 
    role: "code"
    lines: 
      - "element 1 (natural-set);"
    code: "2111000032132211111332233"
    stanza: 958
  - 
    role: "code"
    lines: 
      - "not / element 1 (even-natural-set);"
    code: "21003023211100003213221110101332233"
    stanza: 959
  - 
    role: "code"
    lines: 
      - "element 2 (natural-set);"
    code: "21110000321032211111332233"
    stanza: 960
  - 
    role: "code"
    lines: 
      - "element 2 (even-natural-set);"
    code: "2111000032103221110101332233"
    stanza: 961
  - 
    role: "code"
    lines: 
      - "element 3 (natural-set);"
    code: "21110000321132211111332233"
    stanza: 962
  - 
    role: "code"
    lines: 
      - "not / element 3 (even-natural-set);"
    code: "210030232111000032113221110101332233"
    stanza: 963
  - 
    role: "code"
    lines: 
      - "element 4 (natural-set);"
    code: "211100003210032211111332233"
    stanza: 964
  - 
    role: "code"
    lines: 
      - "element 4 (even-natural-set);"
    code: "21110000321003221110101332233"
    stanza: 965
  - 
    role: "code"
    lines: 
      - "element 5 (natural-set);"
    code: "211100003210132211111332233"
    stanza: 966
  - 
    role: "code"
    lines: 
      - "not / element 5 (even-natural-set);"
    code: "2100302321110000321013221110101332233"
    stanza: 967
  - 
    role: "code"
    lines: 
      - "element 6 (natural-set);"
    code: "211100003211032211111332233"
    stanza: 968
  - 
    role: "code"
    lines: 
      - "element 6 (even-natural-set);"
    code: "21110000321103221110101332233"
    stanza: 969
  - 
    role: "file"
    lines: 
      - "== COS_Graph =="
    stanza: 970
  - 
    role: "comment"
    lines: 
      - "# MATH introduce graph structures"
    section_description: "introduce graph structures"
    section_category: "MATH"
    section_index: 28
    stanza: 971
  - 
    role: "code"
    lines: 
      - "define make-graph / lambda (nodes links) (pair (nodes) (links));"
    code: "211013211101103023211010322111011132111100033221101003221110111332211110003332233"
    stanza: 972
  - 
    role: "code"
    lines: 
      - "define test-graph / make-graph (vector 1 2 3 4) (vector (vector 1 2) (vector 2 3) (vector 1 4));"
    code: "2110132111100130232111011032210000321321032113210033221000032210000321321033221000032103211332210000321321003332233"
    stanza: 973
  - 
    role: "code"
    lines: 
      - "define graph-linked / lambda (g n1 n2) (exists / ? idx / if (and (>= (idx) 0) (< (idx) (list-length / list-ref (g) 1))) (list= (list-ref (list-ref (g) 1) (idx)) (vector (n1) (n2))) (false));"
    code: "211013211110103023211010322111101132111110032111110133221010030232110032100011030232111132210132211000132210001103320332213221000110332211110130232111110322111101133213333221000000322111110322111110322111101133213322100011033322100003221111100332211111013333221011003332233"
    stanza: 974
  - 
    role: "code"
    lines: 
      - "= (graph-linked (test-graph) 1 2) (true);"
    code: "21032211110103221111001332132103322101011332233"
    stanza: 975
  - 
    role: "code"
    lines: 
      - "= (graph-linked (test-graph) 1 3) (false);"
    code: "21032211110103221111001332132113322101100332233"
    stanza: 976
  - 
    role: "code"
    lines: 
      - "= (graph-linked (test-graph) 2 4) (false);"
    code: "2103221111010322111100133210321003322101100332233"
    stanza: 977
  - 
    role: "comment"
    lines: 
      - "# 'if' is used a lot in the next definition in place of and/or"
      - "# this is because I haven't established lazy evaluation forms for and/or"
      - "# so this very inefficient algorithm completely bogs down when combined"
      - "# ... during testing with a dumb implementation for 'exists'."
    stanza: 978
  - 
    role: "code"
    lines: 
      - "define graph-linked* / lambda (g n1 n2) (if (= (n1) (n2)) (true) (if (graph-linked (g) (n1) (n2)) (true) (exists (? n3 / if (graph-linked (g) (n1) (n3)) (graph-linked* (g) (n3) (n2)) (false)))));"
    code: "21101321111110302321101032211110113211111003211111013322111132210322111110033221111101333221010113322111132211110103221111011332211111003322111110133322101011332210100322110032111111130232111132211110103221111011332211111003322111111133322111111032211110113322111111133221111101333221011003333332233"
    stanza: 979
  - 
    role: "code"
    lines: 
      - "= (graph-linked* (test-graph) 1 2) (true);"
    code: "21032211111103221111001332132103322101011332233"
    stanza: 980
  - 
    role: "code"
    lines: 
      - "= (graph-linked* (test-graph) 1 3) (true);"
    code: "21032211111103221111001332132113322101011332233"
    stanza: 981
  - 
    role: "code"
    lines: 
      - "= (graph-linked* (test-graph) 2 4) (false);"
    code: "2103221111110322111100133210321003322101100332233"
    stanza: 982
  - 
    role: "file"
    lines: 
      - "== COS_Begin =="
    stanza: 983
  - 
    role: "comment"
    lines: 
      - "# MATH show how to execute a sequence of instructions"
    section_description: "show how to execute a sequence of instructions"
    section_category: "MATH"
    section_index: 29
    stanza: 984
  - 
    role: "code"
    lines: 
      - "intro begin;"
    code: "20321000000032233"
    stanza: 985
  - 
    role: "code"
    lines: 
      - "define prev-translate / translate;"
    code: "21101321010001302321100132233"
    stanza: 986
  - 
    role: "code"
    lines: 
      - "define reverse / ? x / if (>= (list-length / x) 1) (prepend (last / x) (reverse / except-last / x)) (x);"
    code: "2110132100000013023211003210010130232111132211000132211110130232100101332133221111113221001111302321001013322100000013023210100003023210010133322100101332233"
    stanza: 987
  - 
    role: "comment"
    lines: 
      - "# test reverse"
    stanza: 988
  - 
    role: "code"
    lines: 
      - "list= (vector 1 2 3) (reverse / vector 3 2 1);"
    code: "210000003221000032132103211332210000001302321000032113210321332233"
    stanza: 989
  - 
    role: "code"
    lines: 
      - "define translate / let ((prev (prev-translate))) (? x / if (number? / x) (prev / x) (if (= (head / x) begin) (translate (vector (vector ? x (vector last (vector x))) (prepend vector (tail / x)))) (prev / x)));"
    code: "2110132110013023210011013222101001032210100013333221100321001013023211113221100030232100101332210100103023210010133221111322103221110103023210010133210000000332211001322100003221000032110032100101322100003210011113221000032100101333322111111321000032211110030232100101333332210100103023210010133332233"
    stanza: 990
  - 
    role: "code"
    lines: 
      - "= (begin 1 7 2 4) 4;"
    code: "210322100000003213211132103210033210032233"
    stanza: 991
  - 
    role: "code"
    lines: 
      - "= (begin (set! (demo-mut1) 88) (set! (demo-mut1) 6) (get! / demo-mut1)) 6;"
    code: "2103221000000032211100322110101332101100033221110032211010133211033221110130232110101333211032233"
    stanza: 992
  - 
    role: "code"
    lines: 
      - "= (begin (set! (demo-mut2) 88) (set! (demo-mut1) 6) (get! / demo-mut2)) 88;"
    code: "21032210000000322111003221101103321011000332211100322110101332110332211101302321101103332101100032233"
    stanza: 993
  - 
    role: "code"
    lines: 
      - "= (begin (set! (demo-mut1) 88) (set! (demo-mut1) 6) (get! / demo-mut1) 4) 4;"
    code: "210322100000003221110032211010133210110003322111003221101013321103322111013023211010133210033210032233"
    stanza: 994
  - 
    role: "file"
    lines: 
      - "== COS_Hash =="
    stanza: 995
  - 
    role: "comment"
    lines: 
      - "# MATH introduce environment/hashmap structure"
      - "# this section needs a LOT more examples :-)"
      - "# note that at the time of writing (h 1 2) is same as ((h) 1 2)"
    section_description: "introduce environment/hashmap structure"
    section_category: "MATH"
    section_index: 30
    stanza: 996
  - 
    role: "code"
    lines: 
      - "define hash-add / lambda (h x y z) (if (equal (z) (x)) (y) (h (z)));"
    code: "21101321000001030232110103221000001132100101321001003210011033221111322100032210011033221001013332210010033221000001132210011033332233"
    stanza: 997
  - 
    role: "code"
    lines: 
      - "define hash-ref / lambda (h x) (h (x));"
    code: "211013210000100302321101032210000011321001013322100000113221001013332233"
    stanza: 998
  - 
    role: "code"
    lines: 
      - "define hash-null / ? x / undefined;"
    code: "211013210000101302321100321001013023210000032233"
    stanza: 999
  - 
    role: "code"
    lines: 
      - "define hash-default / ? default / ? x / default;"
    code: "211013210000110302321100321000011130232110032100101302321000011132233"
    stanza: 1000
  - 
    role: "code"
    lines: 
      - "define test-hash / hash-add (hash-add (hash-null) 3 2) 4 9;"
    code: "2110132100010003023210000010322100000103221000010133211321033210032100132233"
    stanza: 1001
  - 
    role: "code"
    lines: 
      - "= (hash-ref (test-hash) 4) 9;"
    code: "2103221000010032210001000332100332100132233"
    stanza: 1002
  - 
    role: "code"
    lines: 
      - "= (hash-ref (test-hash) 3) 2;"
    code: "2103221000010032210001000332113321032233"
    stanza: 1003
  - 
    role: "code"
    lines: 
      - "= (hash-ref (test-hash) 8) (undefined);"
    code: "210322100001003221000100033210003322100000332233"
    stanza: 1004
  - 
    role: "code"
    lines: 
      - "= (hash-ref (test-hash) 15) (undefined);"
    code: "210322100001003221000100033211113322100000332233"
    stanza: 1005
  - 
    role: "code"
    lines: 
      - "= (hash-ref (hash-add (test-hash) 15 33) 15) 33;"
    code: "210322100001003221000001032210001000332111132100001332111133210000132233"
    stanza: 1006
  - 
    role: "code"
    lines: 
      - "= (hash-ref (test-hash) 15) (undefined);"
    code: "210322100001003221000100033211113322100000332233"
    stanza: 1007
  - 
    role: "code"
    lines: 
      - "define make-hash / ? x / if (list= (x) (vector)) (hash-null) (hash-add (make-hash (tail / x)) (first / head / x) (second / head / x));"
    code: "2110132100010013023211003210010130232111132210000003221001013322100003332210000101332210000010322100010013221111003023210010133322100000130232111010302321001013322100001030232111010302321001013332233"
    stanza: 1008
  - 
    role: "code"
    lines: 
      - "= (hash-ref (make-hash / vector (pair 3 10) (pair 2 20) (pair 1 30)) 3) 10;"
    code: "21032210000100322100010013023210000322110100321132101033221101003210321010033221101003213211110333211332101032233"
    stanza: 1009
  - 
    role: "code"
    lines: 
      - "= (hash-ref (make-hash / vector (pair 3 10) (pair 2 20) (pair 1 30)) 1) 30;"
    code: "21032210000100322100010013023210000322110100321132101033221101003210321010033221101003213211110333213321111032233"
    stanza: 1010
  - 
    role: "file"
    lines: 
      - "== COS_MutableStructure =="
    stanza: 1011
  - 
    role: "comment"
    lines: 
      - "# OBJECT introduce simple mutable structures"
    section_description: "introduce simple mutable structures"
    section_category: "OBJECT"
    section_index: 31
    stanza: 1012
  - 
    role: "code"
    lines: 
      - "define mutable-struct / ? lst / let ((data (map (? x / make-cell 0) (lst)))) (? key / list-ref (data) (list-find (lst) (key) (? x 0)));"
    code: "211013210001010302321100321110113023210011013222100010113221010101322110032100101302321101132033221110113333322110032100010030232111110322100010113322100011132211101133221000100332211003210010132033332233"
    stanza: 1013
  - 
    role: "code"
    lines: 
      - "define test-struct1 / mutable-struct / vector item1 item2 item3;"
    code: "2110132100011003023210001010302321000032100011013210001110321000111132233"
    stanza: 1014
  - 
    role: "code"
    lines: 
      - "set! (test-struct1 item1) 15;"
    code: "211100322100011003210001101332111132233"
    stanza: 1015
  - 
    role: "code"
    lines: 
      - "= (get! / test-struct1 item1) 15;"
    code: "2103221110130232100011003210001101332111132233"
    stanza: 1016
  - 
    role: "file"
    lines: 
      - "== COS_Method =="
    stanza: 1017
  - 
    role: "comment"
    lines: 
      - "# OBJECT introduce method handler wrappers"
    section_description: "introduce method handler wrappers"
    section_category: "OBJECT"
    section_index: 32
    stanza: 1018
  - 
    role: "code"
    lines: 
      - "define add-method / lambda (object name method) (hash-add (object) (name) (? dummy / method / object));"
    code: "211013210010000302321101032210010001321001001032100100113322100000103221001000133221001001033221100321101010302321001001130232100100013332233"
    stanza: 1019
  - 
    role: "code"
    lines: 
      - "define call / ? x / x 0;"
    code: "211013210010100302321100321001013023210010132032233"
    stanza: 1020
  - 
    role: "code"
    lines: 
      - "define test-struct2 / mutable-struct / vector x y;"
    code: "21101321001010130232100010103023210000321001013210010032233"
    stanza: 1021
  - 
    role: "code"
    lines: 
      - "set! (test-struct2 x) 10;"
    code: "2111003221001010132100101332101032233"
    stanza: 1022
  - 
    role: "code"
    lines: 
      - "set! (test-struct2 y) 20;"
    code: "21110032210010101321001003321010032233"
    stanza: 1023
  - 
    role: "code"
    lines: 
      - "= (get! / test-struct2 x) 10;"
    code: "21032211101302321001010132100101332101032233"
    stanza: 1024
  - 
    role: "code"
    lines: 
      - "= (get! / test-struct2 y) 20;"
    code: "210322111013023210010101321001003321010032233"
    stanza: 1025
  - 
    role: "code"
    lines: 
      - "define test-struct3 / add-method (test-struct2) sum (? self / + (get! / self x) (get! / self y));"
    code: "2110132100101103023210010000322100101013321001011132211003210011000302321010322111013023210011000321001013322111013023210011000321001003332233"
    stanza: 1026
  - 
    role: "code"
    lines: 
      - "= (get! / test-struct3 x) 10;"
    code: "21032211101302321001011032100101332101032233"
    stanza: 1027
  - 
    role: "code"
    lines: 
      - "= (get! / test-struct3 y) 20;"
    code: "210322111013023210010110321001003321010032233"
    stanza: 1028
  - 
    role: "code"
    lines: 
      - "= (call / test-struct3 sum) 30;"
    code: "21032210010100302321001011032100101113321111032233"
    stanza: 1029
  - 
    role: "code"
    lines: 
      - "set! (test-struct3 y) 10;"
    code: "2111003221001011032100100332101032233"
    stanza: 1030
  - 
    role: "code"
    lines: 
      - "= (call / test-struct3 sum) 20;"
    code: "21032210010100302321001011032100101113321010032233"
    stanza: 1031
  - 
    role: "code"
    lines: 
      - "set! (test-struct2 y) 5;"
    code: "211100322100101013210010033210132233"
    stanza: 1032
  - 
    role: "code"
    lines: 
      - "= (call / test-struct3 sum) 15;"
    code: "2103221001010030232100101103210010111332111132233"
    stanza: 1033
  - 
    role: "file"
    lines: 
      - "== COS_Turing =="
    stanza: 1034
  - 
    role: "comment"
    lines: 
      - "# TURING introduce turing machine model"
      - "# just for fun!"
    section_description: "introduce turing machine model"
    section_category: "TURING"
    section_index: 33
    stanza: 1035
  - 
    role: "code"
    lines: 
      - "define safe-tail / ? x / if (> (list-length / x) 0) (if (> (list-length / x) 1) (tail / x) (vector / vector)) (vector / vector);"
    code: "21101321001100130232110032100101302321111322113221111013023210010133203322111132211322111101302321001013321332211110030232100101332210000302321000033322100003023210000332233"
    stanza: 1036
  - 
    role: "code"
    lines: 
      - "define safe-head / ? x / if (> (list-length / x) 0) (head / x) (vector);"
    code: "2110132100110103023211003210010130232111132211322111101302321001013320332211101030232100101332210000332233"
    stanza: 1037
  - 
    role: "code"
    lines: 
      - "define tape-read / ? tape / let ((x (second / tape))) (if (> (list-length / x) 0) (head / x) (vector));"
    code: "21101321001101130232110032100111003023210011013222100101322100001030232100111003333221111322113221111013023210010133203322111010302321001013322100003332233"
    stanza: 1038
  - 
    role: "code"
    lines: 
      - "define tape-transition / lambda (tape shift value) (if (= (shift) 1) (pair (prepend (value) (first / tape)) (safe-tail / second / tape)) (if (= (shift) 0) (pair (safe-tail / first / tape) (prepend (safe-head / first / tape) (prepend (value) (safe-tail / second / tape)))) (pair (first / tape) (prepend (value) (safe-tail / second / tape)))));"
    code: "211013210011101302321101032210011100321001111032100111113322111132210322100111103321332211010032211111132210011111332210000013023210011100333221001100130232100001030232100111003332211113221032210011110332033221101003221001100130232100000130232100111003322111111322100110103023210000013023210011100332211111132210011111332210011001302321000010302321001110033333221101003221000001302321001110033221111113221001111133221001100130232100001030232100111003333332233"
    stanza: 1039
  - 
    role: "code"
    lines: 
      - "define turing / lambda (machine current last tape) (if (= (current) (last)) (tape) (let ((next (machine (current) (tape-read / tape)))) (turing (machine) (list-ref (next) 0) (last) (tape-transition (tape) (list-ref (next) 1) (list-ref (next) 2)))));"
    code: "21101321010000030232110103221010000132101000103210011113210011100332211113221032210100010332210011113332210011100332210011013222101000113221010000132210100010332210011011302321001110033333221010000032210100001332211111032210100011332033221001111332210011101322100111003322111110322101000113321332211111032210100011332103333332233"
    stanza: 1040
  - 
    role: "code"
    lines: 
      - "define make-tape / ? x / pair (vector) (x);"
    code: "2110132101001003023211003210010130232110100322100003322100101332233"
    stanza: 1041
  - 
    role: "code"
    lines: 
      - "define remove-trail / ? x / ? lst / if (> (list-length / lst) 0) (if (equal (last / lst) (x)) (remove-trail (x) (except-last / lst)) (lst)) (lst);"
    code: "2110132101001013023211003210010130232110032111011302321111322113221111013023211101133203322111132210003221001111302321110113322100101333221010010132210010133221010000302321110113332211101133322111011332233"
    stanza: 1042
  - 
    role: "code"
    lines: 
      - "define extract-tape / ? x / remove-trail (vector) (second / x);"
    code: "211013210100110302321100321001013023210100101322100003322100001030232100101332233"
    stanza: 1043
  - 
    role: "code"
    lines: 
      - "define tm-binary-increment / make-hash / vector (pair right (make-hash / vector (pair 0 (vector right 1 0)) (pair 1 (vector right 1 1)) (pair (vector) (vector inc 0 (vector))))) (pair inc (make-hash / vector (pair 0 (vector noinc 0 1)) (pair 1 (vector inc 0 0)) (pair (vector) (vector halt 2 1)))) (pair noinc (make-hash / vector (pair 0 (vector noinc 0 0)) (pair 1 (vector noinc 0 1)) (pair (vector) (vector halt 1 (vector))))) (pair halt (make-hash / vector));"
    code
    stanza: 1044
  - 
    role: "code"
    lines: 
      - "list= (extract-tape / turing (tm-binary-increment) right halt (make-tape / vector 1 0 0 1)) (vector 1 0 1 0);"
    code: "21000000322101001103023210100000322101001113321010100032101010113221010010030232100003213203203213332210000321320321320332233"
    stanza: 1045
  - 
    role: "code"
    lines: 
      - "list= (extract-tape / turing (tm-binary-increment) right halt (make-tape / vector 1 1 1)) (vector 1 0 0 0);"
    code: "21000000322101001103023210100000322101001113321010100032101010113221010010030232100003213213213332210000321320320320332233"
    stanza: 1046
  - 
    role: "code"
    lines: 
      - "list= (extract-tape / turing (tm-binary-increment) right halt (make-tape / vector 1 1 1 0 0 0 1 1 1)) (vector 1 1 1 0 0 1 0 0 0);"
    code: "21000000322101001103023210100000322101001113321010100032101010113221010010030232100003213213213203203203213213213332210000321321321320320321320320320332233"
    stanza: 1047
  - 
    role: "file"
    lines: 
      - "== COS_NewType =="
    stanza: 1048
  - 
    role: "comment"
    lines: 
      - "# OBJECT introduce simple form of typing, for ease of documentation."
      - "# An object is simply a function that takes an argument."
      - "# The argument is the method to call on the object."
      - "# Types are here taken to be just the existence of a particular method,"
      - "# with that method returning an object of the appropriate type."
    section_description: "introduce simple form of typing, for ease of documentation."
    section_category: "OBJECT"
    section_index: 34
    stanza: 1049
  - 
    role: "code"
    lines: 
      - "define make-integer"
      - "  (lambda (v)"
      - "    (lambda (x)"
      - "      (if (= (x) int)"
      - "      (v)"
      - "      0)));"
    code: "2110132101011003221101032210101101332211010322100101332211113221032210010133210101110332210101101332033332233"
    stanza: 1050
  - 
    role: "code"
    lines: 
      - "define objectify"
      - "  (? x "
      - "     (if (number? (x))"
      - "     (make-integer (x))"
      - "     (x)));"
    code: "21101321010111132211003210010132211113221100032210010133322101011003221001013332210010133332233"
    stanza: 1051
  - 
    role: "code"
    lines: 
      - "define instanceof"
      - "  (lambda (T t)"
      - "    (if (number? (t))"
      - "    (= (T) int)"
      - "    (not (number? ((objectify (t)) (T))))));"
    code: "211013210110000322110103221011000132101100103322111132211000322101100103332210322101100013321010111033221003221100032221010111132210110010333221011000133333332233"
    stanza: 1052
  - 
    role: "comment"
    lines: 
      - "# add version of lambda that allows types to be declared"
    stanza: 1053
  - 
    role: "code"
    lines: 
      - "define prev-translate (translate);"
    code: "2110132101000132211001332233"
    stanza: 1054
  - 
    role: "code"
    lines: 
      - "define translate"
      - "  (let ((prev (prev-translate)))"
      - "    (? x"
      - "      (if (number? (x))"
      - "        (prev (x))"
      - "        (if (= (head (x)) lambda)"
      - "          (let ((formals (head (tail (x))))"
      - "                (body (head (tail (tail (x))))))"
      - "            (if (> (list-length (formals)) 0)"
      - "        (if (number? (last (formals)))"
      - "            (translate"
      - "             (vector"
      - "              lambda"
      - "              (except-last (formals))"
      - "              (vector ? (last (formals)) (body))))"
      - "            (let ((formal-name (first (last (formals))))"
      - "              (formal-type (second (last (formals)))))"
      - "              (translate"
      - "               (vector"
      - "            lambda"
      - "            (except-last (formals))"
      - "            (vector "
      - "             ? "
      - "             (formal-name) "
      - "             (vector "
      - "              let"
      - "              (vector (vector "
      - "                   (formal-name) "
      - "                   (vector"
      - "                    (vector objectify (vector (formal-name)))"
      - "                    (formal-type))))"
      - "              (body)))))))"
      - "        (translate (body))))"
      - "          (prev (x))))));"
    code
    stanza: 1055
  - 
    role: "comment"
    lines: 
      - "# add conditional form"
    stanza: 1056
  - 
    role: "code"
    lines: 
      - "define prev-translate (translate);"
    code: "2110132101000132211001332233"
    stanza: 1057
  - 
    role: "code"
    lines: 
      - "define translate"
      - "  (let ((prev (prev-translate)))"
      - "    (? x"
      - "      (if (number? (x))"
      - "        (prev (x))"
      - "        (if (= (head (x)) cond)"
      - "          (let ((cnd (head (tail (x))))"
      - "                (rem (tail (tail (x)))))"
      - "            (if (> (list-length (rem)) 0)"
      - "        (translate"
      - "         (vector"
      - "                  if"
      - "          (first (cnd))"
      - "          (second (cnd))"
      - "          (prepend cond (rem))))"
      - "        (translate (cnd))))"
      - "          (prev (x))))));"
    code: "21101321100132210011013222101001032210100013333221100321001013221111322110003221001013332210100103221001013332211113221032211101032210010133321011010133221001101322210110110322111010322111100322100101333332210110111322111100322111100322100101333333221111322113221111013221011011133320332211001322100003211113221000001322101101103332210000103221011011033322111111321011010132210110111333332211001322101101103333322101001032210010133333332233"
    stanza: 1058
  - 
    role: "code"
    lines: 
      - "= 99 (cond 99);"
    code: "21032110001132210110101321100011332233"
    stanza: 1059
  - 
    role: "code"
    lines: 
      - "= 8 (cond ((true) 8) 11);"
    code: "21032100032210110101322210101133210003321011332233"
    stanza: 1060
  - 
    role: "code"
    lines: 
      - "= 11 (cond ((false) 8) 11);"
    code: "21032101132210110101322210110033210003321011332233"
    stanza: 1061
  - 
    role: "code"
    lines: 
      - "= 7 (cond ((false) 3) ((true) 7) 11);"
    code: "2103211132210110101322210110033211332221010113321113321011332233"
    stanza: 1062
  - 
    role: "code"
    lines: 
      - "= 3 (cond ((true) 3) ((true) 7) 11);"
    code: "210321132210110101322210101133211332221010113321113321011332233"
    stanza: 1063
  - 
    role: "code"
    lines: 
      - "= 11 (cond ((false) 3) ((false) 7) 11);"
    code: "21032101132210110101322210110033211332221011003321113321011332233"
    stanza: 1064
  - 
    role: "code"
    lines: 
      - "define remove-match "
      - "  (lambda (test lst)"
      - "    (if (> (list-length (lst)) 0)"
      - "    (if (test (head (lst)))"
      - "        (remove-match (test) (tail (lst)))"
      - "        (prepend (head (lst)) (remove-match (test) (tail (lst)))))"
      - "    (lst)));"
    code: "21101321011100032211010322101110013211101133221111322113221111013221110113332033221111322101110013221110103221110113333221011100032210111001332211110032211101133332211111132211101032211101133322101110003221011100133221111003221110113333332211101133332233"
    stanza: 1065
  - 
    role: "code"
    lines: 
      - "define remove-element"
      - "  (lambda (x) "
      - "    (remove-match (lambda (y) (= (y) (x)))));"
    code: "211013210111010322110103221001013322101110003221101032210010033221032210010033221001013333332233"
    stanza: 1066
  - 
    role: "code"
    lines: 
      - "list= (vector 1 2 3 5) (remove-element 4 (vector 1 2 3 4 5));"
    code: "2100000032210000321321032113210133221011101032100322100003213210321132100321013332233"
    stanza: 1067
  - 
    role: "code"
    lines: 
      - "list= (vector 1 2 3 5) (remove-element 4 (vector 1 4 2 4 3 4 5));"
    code: "21000000322100003213210321132101332210111010321003221000032132100321032100321132100321013332233"
    stanza: 1068
  - 
    role: "code"
    lines: 
      - "define return"
      - "  (lambda (T t)"
      - "    (let ((obj (objectify (t))))"
      - "      (obj (T))));"
    code: "2110132101110113221101032210110001321011001033221001101322210111100322101011113221011001033333221011110032210110001333332233"
    stanza: 1069
  - 
    role: "code"
    lines: 
      - "define tester"
      - "  (lambda ((x int) (y int))"
      - "    (return int (+ (x) (y))));"
    code: "2110132101111013221101032221001013210101110332210010032101011103332210111011321010111032210103221001013322100100333332233"
    stanza: 1070
  - 
    role: "code"
    lines: 
      - "= 42 (tester (make-integer 10) (make-integer 32));"
    code: "210321010103221011110132210101100321010332210101100321000003332233"
    stanza: 1071
  - 
    role: "code"
    lines: 
      - "= 42 (tester 10 32);"
    code: "210321010103221011110132101032100000332233"
    stanza: 1072
  - 
    role: "code"
    lines: 
      - "define reflective"
      - "  (lambda (f)"
      - "    ((lambda (x)"
      - "       (f (lambda (y) ((x (x)) (y)))))"
      - "     (lambda (x)"
      - "       (f (lambda (y) ((x (x)) (y)))))));"
    code: "211013210111110322110103221100113322211010322100101332211001132211010322100100332221001013221001013332210010033333322110103221001013322110011322110103221001003322210010132210010133322100100333333332233"
    stanza: 1073
  - 
    role: "comment"
    lines: 
      - "# OBJECT an example object -- a 2D point"
    section_description: "an example object -- a 2D point"
    section_category: "OBJECT"
    section_index: 35
    stanza: 1074
  - 
    role: "code"
    lines: 
      - "define point"
      - "  (lambda (x y)"
      - "    (reflective"
      - "     (lambda (self msg)"
      - "       (cond ((= (msg) x) (x))"
      - "         ((= (msg) y) (y))"
      - "         ((= (msg) point) (self))"
      - "         ((= (msg) +) "
      - "          (lambda ((p point))"
      - "        (point (+ (x) (p x))"
      - "               (+ (y) (p y)))))"
      - "         ((= (msg) =) "
      - "          (lambda ((p point))"
      - "        (and (= (x) (p x))"
      - "             (= (y) (p y)))))"
      - "         0))));"
    code
    stanza: 1075
  - 
    role: "code"
    lines: 
      - "define point1 (point 1 11);"
    code: "21101321100000132210111111321321011332233"
    stanza: 1076
  - 
    role: "code"
    lines: 
      - "define point2 (point 2 22);"
    code: "2110132110000103221011111132103210110332233"
    stanza: 1077
  - 
    role: "code"
    lines: 
      - "= 1 (point1 x);"
    code: "2103213221100000132100101332233"
    stanza: 1078
  - 
    role: "code"
    lines: 
      - "= 22 (point2 y);"
    code: "21032101103221100001032100100332233"
    stanza: 1079
  - 
    role: "code"
    lines: 
      - "= 11 ((point 11 12) x);"
    code: "210321011322210111111321011321100332100101332233"
    stanza: 1080
  - 
    role: "code"
    lines: 
      - "= 11 (((point 11 12) point) x);"
    code: "210321011322221011111132101132110033210111111332100101332233"
    stanza: 1081
  - 
    role: "code"
    lines: 
      - "= 16 (((point 16 17) point) x);"
    code: "210321000032222101111113210000321000133210111111332100101332233"
    stanza: 1082
  - 
    role: "code"
    lines: 
      - "= 33 (point1 + (point2) y);"
    code: "210321000013221100000132101032211000010332100100332233"
    stanza: 1083
  - 
    role: "code"
    lines: 
      - "point1 + (point2) = (point 3 33);"
    code: "211000001321010322110000103321032210111111321132100001332233"
    stanza: 1084
  - 
    role: "code"
    lines: 
      - "point2 + (point1) = (point 3 33);"
    code: "211000010321010322110000013321032210111111321132100001332233"
    stanza: 1085
  - 
    role: "code"
    lines: 
      - "(point 100 200) + (point 200 100) = (point 300 300);"
    code: "22101111113211001003211001000332101032210111111321100100032110010033210322101111113210010110032100101100332233"
    stanza: 1086
  - 
    role: "code"
    lines: 
      - "instanceof point (point1);"
    code: "210110000321011111132211000001332233"
    stanza: 1087
  - 
    role: "code"
    lines: 
      - "not (instanceof int (point1));"
    code: "2100322101100003210101110322110000013332233"
    stanza: 1088
  - 
    role: "code"
    lines: 
      - "instanceof int 5;"
    code: "21011000032101011103210132233"
    stanza: 1089
  - 
    role: "code"
    lines: 
      - "not (instanceof point 5);"
    code: "210032210110000321011111132101332233"
    stanza: 1090
  - 
    role: "comment"
    lines: 
      - "# OBJECT an example object -- a container"
    section_description: "an example object -- a container"
    section_category: "OBJECT"
    section_index: 36
    stanza: 1091
  - 
    role: "code"
    lines: 
      - "define container"
      - "  (lambda (x)"
      - "    (let ((contents (make-cell (vector))))"
      - "      (reflective"
      - "       (lambda (self msg)"
      - "     (cond ((= (msg) container) (self))"
      - "           ((= (msg) inventory) (get! (contents)))"
      - "           ((= (msg) add)"
      - "        (lambda (x) "
      - "          (if (not (element (x) (get! (contents))))"
      - "              (set! (contents) (prepend (x) (get! (contents))))"
      - "              (false))))"
      - "           ((= (msg) remove)"
      - "        (lambda (x)"
      - "          (set! (contents) (remove-element (x) (get! (contents))))))"
      - "           ((= (msg) =)"
      - "        (lambda ((c container))"
      - "          (set= (self inventory) (c inventory))))"
      - "           0)))));"
    code
    stanza: 1092
  - 
    role: "comment"
    lines: 
      - "# Can pass anything to container function to create an object"
      - "# Should eventually use a consistent protocol for all objects,"
      - "# but all this stuff is still in flux"
    stanza: 1093
  - 
    role: "code"
    lines: 
      - "define pocket (container new);"
    code: "211013211000111322110000113211001000332233"
    stanza: 1094
  - 
    role: "code"
    lines: 
      - "pocket add 77;"
    code: "21100011132110010032100110132233"
    stanza: 1095
  - 
    role: "code"
    lines: 
      - "pocket add 88;"
    code: "21100011132110010032101100032233"
    stanza: 1096
  - 
    role: "code"
    lines: 
      - "pocket add 99;"
    code: "21100011132110010032110001132233"
    stanza: 1097
  - 
    role: "code"
    lines: 
      - "set= (pocket inventory) (vector 77 88 99);"
    code: "21110010322110001113211000101332210000321001101321011000321100011332233"
    stanza: 1098
  - 
    role: "code"
    lines: 
      - "pocket remove 88;"
    code: "211000111321100011032101100032233"
    stanza: 1099
  - 
    role: "code"
    lines: 
      - "set= (pocket inventory) (vector 77 99);"
    code: "21110010322110001113211000101332210000321001101321100011332233"
    stanza: 1100
  - 
    role: "code"
    lines: 
      - "define pocket2 (container new);"
    code: "211013211001001322110000113211001000332233"
    stanza: 1101
  - 
    role: "code"
    lines: 
      - "pocket2 add 77;"
    code: "21100100132110010032100110132233"
    stanza: 1102
  - 
    role: "code"
    lines: 
      - "pocket2 add 99;"
    code: "21100100132110010032110001132233"
    stanza: 1103
  - 
    role: "code"
    lines: 
      - "pocket2 = (pocket);"
    code: "211001001321032211000111332233"
    stanza: 1104
  - 
    role: "comment"
    lines: 
      - "# OBJECT expressing inheritance"
    section_description: "expressing inheritance"
    section_category: "OBJECT"
    section_index: 37
    stanza: 1105
  - 
    role: "comment"
    lines: 
      - "# counter-container adds one method to container: count"
    stanza: 1106
  - 
    role: "code"
    lines: 
      - "define counter-container"
      - "  (lambda (x)"
      - "    (let ((super (container new)))"
      - "      (reflective"
      - "       (lambda (self msg)"
      - "     (cond ((= (msg) counter-container) (self))"
      - "           ((= (msg) count) (list-length (super inventory)))"
      - "           (super (msg)))))));"
    code: "21101321100101032211010322100101332210011013222110010113221100001132110010003333221011111032211010322100110003211000000332210110101322210322110000003321100101033221001100033322210322110000003321100110033221111013221100101132110001013333221100101132211000000333333332233"
    stanza: 1107
  - 
    role: "code"
    lines: 
      - "define cc1 (counter-container new);"
    code: "211013211001101322110010103211001000332233"
    stanza: 1108
  - 
    role: "code"
    lines: 
      - "= 0 (cc1 count);"
    code: "210320322110011013211001100332233"
    stanza: 1109
  - 
    role: "code"
    lines: 
      - "cc1 add 4;"
    code: "2110011013211001003210032233"
    stanza: 1110
  - 
    role: "code"
    lines: 
      - "= 1 (cc1 count);"
    code: "210321322110011013211001100332233"
    stanza: 1111
  - 
    role: "code"
    lines: 
      - "cc1 add 5;"
    code: "2110011013211001003210132233"
    stanza: 1112
  - 
    role: "code"
    lines: 
      - "= 2 (cc1 count);"
    code: "2103210322110011013211001100332233"
    stanza: 1113
  - 
    role: "comment"
    lines: 
      - "# OBJECT adding a special form for classes"
    section_description: "adding a special form for classes"
    section_category: "OBJECT"
    section_index: 38
    stanza: 1114
  - 
    role: "comment"
    lines: 
      - "# need a bunch of extra machinery first, will push this"
      - "# back into previous sections eventually, and simplify"
    stanza: 1115
  - 
    role: "code"
    lines: 
      - "define list-append"
      - "  (lambda (lst1 lst2)"
      - "    (if (> (list-length (lst1)) 0)"
      - "    (list-append (except-last (lst1))"
      - "             (prepend (last (lst1)) (lst2)))"
      - "    (lst2)));"
    code: "21101321100111032211010322110011113211010000332211113221132211110132211001111333203322110011103221010000322110011113332211111132210011113221100111133322110100003333221101000033332233"
    stanza: 1116
  - 
    role: "code"
    lines: 
      - "list= (list-append (vector 1 2 3) (vector 4 5 6)) (vector 1 2 3 4 5 6);"
    code: "21000000322110011103221000032132103211332210000321003210132110333221000032132103211321003210132110332233"
    stanza: 1117
  - 
    role: "code"
    lines: 
      - "define append"
      - "  (? x"
      - "     (? lst"
      - "    (if (> (list-length (lst)) 0)"
      - "        (prepend (head (lst)) (append (x) (tail (lst))))"
      - "        (vector (x)))));"
    code: "211013211010001322110032100101322110032111011322111132211322111101322111011333203322111111322111010322111011333221101000132210010133221111003221110113333322100003221001013333332233"
    stanza: 1118
  - 
    role: "code"
    lines: 
      - "list= (append 5 (vector 1 2)) (vector 1 2 5);"
    code: "2100000032211010001321013221000032132103332210000321321032101332233"
    stanza: 1119
  - 
    role: "code"
    lines: 
      - "define select-match "
      - "  (lambda (test lst)"
      - "    (if (> (list-length (lst)) 0)"
      - "    (if (test (head (lst)))"
      - "        (prepend (head (lst)) (select-match (test) (tail (lst))))"
      - "        (select-match (test) (tail (lst))))"
      - "    (lst)));"
    code: "21101321101001032211010322101110013211101133221111322113221111013221110113332033221111322101110013221110103221110113333221111113221110103221110113332211010010322101110013322111100322111011333332211010010322101110013322111100322111011333332211101133332233"
    stanza: 1120
  - 
    role: "code"
    lines: 
      - "define unique"
      - "  (let ((store (make-cell 0)))"
      - "    (lambda (x)"
      - "      (let ((id (get! (store))))"
      - "    (begin"
      - "      (set! (store) (+ (id) 1))"
      - "      (id)))));"
    code: "2110132110100113221001101322211010100322110113203333221101032210010133221001101322211010101322111013221101010033333221000000032211100322110101003322101032211010101332133322110101013333332233"
    stanza: 1121
  - 
    role: "code"
    lines: 
      - "= (unique new) 0;"
    code: "210322110100113211001000332032233"
    stanza: 1122
  - 
    role: "code"
    lines: 
      - "= (unique new) 1;"
    code: "210322110100113211001000332132233"
    stanza: 1123
  - 
    role: "code"
    lines: 
      - "= (unique new) 2;"
    code: "2103221101001132110010003321032233"
    stanza: 1124
  - 
    role: "code"
    lines: 
      - "not (= (unique new) (unique new));"
    code: "21003221032211010011321100100033221101001132110010003332233"
    stanza: 1125
  - 
    role: "code"
    lines: 
      - "define setup-this"
      - "  (lambda (this self)"
      - "    (if (number? / this)"
      - "    (self)"
      - "    (this)));"
    code: "211013211010110322110103221101011132100110003322111132211000302321101011133221001100033221101011133332233"
    stanza: 1126
  - 
    role: "comment"
    lines: 
      - "# okay, here it comes.  don't panic!"
      - "# I need to split this up into helpers, and simplify."
      - "# It basically just writes code for classes like we saw in"
      - "# a previous section."
    stanza: 1127
  - 
    role: "code"
    lines: 
      - "define prev-translate (translate);"
    code: "2110132101000132211001332233"
    stanza: 1128
  - 
    role: "code"
    lines: 
      - "define translate"
      - "  (let ((prev (prev-translate)))"
      - "    (? x"
      - "       (if (number? (x))"
      - "       (prev (x))"
      - "       (if (= (head (x)) class)"
      - "           (let ((name (list-ref (x) 1))"
      - "             (args (list-ref (x) 2))"
      - "             (fields (tail (tail (tail (x))))))"
      - "         (translate"
      - "          (vector"
      - "           define"
      - "           (name)"
      - "           (vector"
      - "            lambda"
      - "            (prepend ext-this (args))"
      - "            (vector"
      - "             let"
      - "             (append"
      - "              (vector unique-id (vector unique new))"
      - "              (map "
      - "               (tail)"
      - "               (select-match (? x (= (first (x)) field)) (fields))))"
      - "             (vector"
      - "              let"
      - "              (vector"
      - "               (vector"
      - "            self"
      - "            (vector"
      - "             reflective"
      - "             (vector"
      - "              lambda"
      - "              (vector self)"
      - "              (vector"
      - "               let"
      - "               (vector "
      - "                (vector"
      - "                 this"
      - "                 (vector setup-this "
      - "                     (vector ext-this)"
      - "                     (vector self))))"
      - "               (vector "
      - "                let"
      - "                (vector (vector ignore-this 1))"
      - "                (vector"
      - "                 lambda"
      - "                 (vector method)"
      - "                 (list-append"
      - "                  (prepend"
      - "                   cond"
      - "                   (list-append"
      - "                (map"
      - "                 (? x "
      - "                    (vector"
      - "                     (vector = (vector method) (first (x)))"
      - "                     (second (x))))"
      - "                 (map (tail)"
      - "                      (select-match "
      - "                       (? x (= (first (x)) method)) "
      - "                       (fields))))"
      - "                (map"
      - "                 (? x "
      - "                    (vector"
      - "                     (vector = (vector method) (x))"
      - "                     (vector (x))))"
      - "                 (map (second)"
      - "                      (select-match "
      - "                       (? x (= (first (x)) field)) "
      - "                       (fields))))))"
      - "                  (vector"
      - "                   (vector"
      - "                (vector = (vector method) self)"
      - "                (vector self))"
      - "                   (vector"
      - "                (vector = (vector method) (name))"
      - "                (vector self self))"
      - "                   (vector"
      - "                (vector = (vector method) classname)"
      - "                (name))"
      - "                   (vector"
      - "                (vector = (vector method) unknown)"
      - "                (vector lambda (vector x) 0))"
      - "                   (vector"
      - "                (vector = (vector method) new)"
      - "                0)"
      - "                   (vector"
      - "                (vector = (vector method) unique-id)"
      - "                (vector unique-id))"
      - "                   (vector"
      - "                (vector = (vector method) ==)"
      - "                (vector"
      - "                 lambda"
      - "                 (vector x)"
      - "                 (vector = "
      - "                     (vector unique-id)"
      - "                     (vector x unique-id))))"
      - "                   (vector self unknown (vector method)))))))))))"
      - "              (vector "
      - "               begin"
      - "               (vector self new)"
      - "               (vector self))))))))"
      - "           (prev (x))))));"
    code: "2110132110013221001101322210100103221010001333322110032100101322111132211000322100101333221010010322100101333221111322103221110103221001013332110110003322100110132221001001032211111032210010133213332211011001322111110322100101332103332211011010322111100322111100322111100322100101333333322110013221000032110132210010010332210000321101032211111132110110113221101100133322100003210011013221101000132210000321101110032210000321101001132110010003332210101013221111003322110100103221100321001013221032210000013221001013332110111013332211011010333332210000321001101322100003221000032100110003221000032101111103221000032110103221000032100110003322100003210011013221000032210000321101011132210000321101011032210000321101101133221000032100110003333322100003210011013221000032210000321101111032133322100003211010322100003210010011332211001110322111111321011010132211001110322101010132211003210010132210000322100003210322100003210010011332210000013221001013333221000010322100101333332210101013221111003322110100103221100321001013221032210000013221001013332100100113332211011010333332210101013221100321001013221000032210000321032210000321001001133221001013332210000322100101333332210101013221000010332211010010322110032100101322103221000001322100101333211011101333221101101033333332210000322100003221000032103221000032100100113321001100033221000032100110003332210000322100003210322100003210010011332210010010333221000032100110003210011000333221000032210000321032210000321001001133211011111332210010010333221000032210000321032210000321001001133211100000332210000321101032210000321001013320333221000032210000321032210000321001001133211001000332033221000032210000321032210000321001001133211011100332210000321101110033322100003221000032103221000032100100113321110000133221000032110103221000032100101332210000321032210000321101110033221000032100101321101110033333221000032100110003211100000322100003210010011333333333333221000032100000003221000032100110003211001000332210000321001100033333333322101001032210010133333332233"
    stanza: 1129
  - 
    role: "comment"
    lines: 
      - "# revisit the point class example"
    stanza: 1130
  - 
    role: "code"
    lines: 
      - "class point (x y) "
      - "       (method x (x))"
      - "       (method y (y))"
      - "       (method + (lambda ((p point))"
      - "           (point new "
      - "              (+ (x) (p x))"
      - "              (+ (y) (p y)))))"
      - "       (method = (lambda ((p point))"
      - "           (and (= (x) (p x))"
      - "            (= (y) (p y)))));"
    code: "2110110003210111111322100101321001003322100100113210010132210010133322100100113210010032210010033322100100113210103221101032221010110321011111133322101111113211001000322101032210010133221010110321001013332210103221001003322101011032100100333333221001001132103221101032221010110321011111133322101322103221001013322101011032100101333221032210010033221010110321001003333332233"
    stanza: 1131
  - 
    role: "comment"
    lines: 
      - "# note the appearance of new in the next line --"
      - "# this is the only difference to previous version"
    stanza: 1132
  - 
    role: "code"
    lines: 
      - "define point1 (point new 1 11);"
    code: "211013211000001322101111113211001000321321011332233"
    stanza: 1133
  - 
    role: "code"
    lines: 
      - "define point2 (point new 2 22);"
    code: "21101321100001032210111111321100100032103210110332233"
    stanza: 1134
  - 
    role: "code"
    lines: 
      - "= 1 (point1 x);"
    code: "2103213221100000132100101332233"
    stanza: 1135
  - 
    role: "code"
    lines: 
      - "= 22 (point2 y);"
    code: "21032101103221100001032100100332233"
    stanza: 1136
  - 
    role: "code"
    lines: 
      - "= 11 ((point new 11 12) x);"
    code: "2103210113222101111113211001000321011321100332100101332233"
    stanza: 1137
  - 
    role: "code"
    lines: 
      - "= 11 (((point new 11 12) point) x);"
    code: "2103210113222210111111321100100032101132110033210111111332100101332233"
    stanza: 1138
  - 
    role: "code"
    lines: 
      - "= 16 (((point new 16 17) point) x);"
    code: "2103210000322221011111132110010003210000321000133210111111332100101332233"
    stanza: 1139
  - 
    role: "code"
    lines: 
      - "= 33 (point1 + (point2) y);"
    code: "210321000013221100000132101032211000010332100100332233"
    stanza: 1140
  - 
    role: "code"
    lines: 
      - "point1 + (point2) = (point new 3 33);"
    code: "2110000013210103221100001033210322101111113211001000321132100001332233"
    stanza: 1141
  - 
    role: "code"
    lines: 
      - "point2 + (point1) = (point new 3 33);"
    code: "2110000103210103221100000133210322101111113211001000321132100001332233"
    stanza: 1142
  - 
    role: "code"
    lines: 
      - "(point new 100 200) + (point new 200 100) = (point new 300 300);"
    code: "22101111113211001000321100100321100100033210103221011111132110010003211001000321100100332103221011111132110010003210010110032100101100332233"
    stanza: 1143
  - 
    role: "code"
    lines: 
      - "instanceof point (point1);"
    code: "210110000321011111132211000001332233"
    stanza: 1144
  - 
    role: "code"
    lines: 
      - "not (instanceof int (point1));"
    code: "2100322101100003210101110322110000013332233"
    stanza: 1145
  - 
    role: "comment"
    lines: 
      - "# Check that virtual calls can be made to work."
      - "# They are a little awkward right now."
      - "# Should they be the default?"
    stanza: 1146
  - 
    role: "code"
    lines: 
      - "class c1 ()"
      - "       (method getid 100)"
      - "       (method altid (this getid));"
    code: "21101100032111000103232210010011321110001132110010033221001001132111001003221101011132111000113332233"
    stanza: 1147
  - 
    role: "code"
    lines: 
      - "class c2 ()"
      - "       (field super-ref (make-cell 0))"
      - "       (method new (set! (super-ref) (c1 / this)))"
      - "       (method super (? x ((get! / super-ref) (x))))"
      - "       (method unknown (? x (self super / x)))"
      - "       (method getid 200);"
    code: "211011000321110010132322110111013211100110322110113203332210010011321100100032211100322111001103322111000103023211010111333322100100113211001011322110032100101322211101302321110011033221001013333322100100113211100000322110032100101322100110003211001011302321001013333221001001132111000113211001000332233"
    stanza: 1148
  - 
    role: "code"
    lines: 
      - "= 100 / c1 new altid;"
    code: "21032110010030232111000103211001000321110010032233"
    stanza: 1149
  - 
    role: "code"
    lines: 
      - "= 200 / c2 new altid;"
    code: "210321100100030232111001013211001000321110010032233"
    stanza: 1150
  - 
    role: "comment"
    lines: 
      - "# OBJECT wrapper class for cells"
    section_description: "wrapper class for cells"
    section_category: "OBJECT"
    section_index: 39
    stanza: 1151
  - 
    role: "code"
    lines: 
      - "class cell (initial-value)"
      - "       (field content (make-cell (initial-value)))"
      - "       (method get (get! (content)))"
      - "       (method set (lambda (new-value)"
      - "             (set! (content) (new-value))))"
      - "       (method reset (self set (initial-value)))"
      - "       (method unknown (lambda (x) ((objectify (self get)) (x))));"
    code: "21101100032111001113221110100033221101110132111010013221101132211101000333322100100113211101010322111013221110100133332210010011321110101132211010322111011003322111003221110100133221110110033333221001001132111011013221001100032111010113221110100033332210010011321110000032211010322100101332221010111132210011000321110101033322100101333332233"
    stanza: 1152
  - 
    role: "code"
    lines: 
      - "define cell-test1 (cell new 15);"
    code: "211013211101110322111001113211001000321111332233"
    stanza: 1153
  - 
    role: "code"
    lines: 
      - "= 15 (cell-test1 get);"
    code: "210321111322111011103211101010332233"
    stanza: 1154
  - 
    role: "code"
    lines: 
      - "cell-test1 set 82;"
    code: "211101110321110101132101001032233"
    stanza: 1155
  - 
    role: "code"
    lines: 
      - "= 82 (cell-test1 get);"
    code: "210321010010322111011103211101010332233"
    stanza: 1156
  - 
    role: "code"
    lines: 
      - "define cell-test2 (cell new (point new 120 150));"
    code: "21101321110111132211100111321100100032210111111321100100032111100032100101103332233"
    stanza: 1157
  - 
    role: "code"
    lines: 
      - "define cell-test3 (cell new (point new 300 300));"
    code: "21101321111000032211100111321100100032210111111321100100032100101100321001011003332233"
    stanza: 1158
  - 
    role: "code"
    lines: 
      - "cell-test2 + (cell-test3) = (point new 420 450);"
    code: "21110111132101032211110000332103221011111132110010003211010010032111000010332233"
    stanza: 1159
  - 
    role: "code"
    lines: 
      - "not (cell-test2 = (cell-test3));"
    code: "2100322111011113210322111100003332233"
    stanza: 1160
  - 
    role: "code"
    lines: 
      - "cell-test3 set (cell-test2);"
    code: "211110000321110101132211101111332233"
    stanza: 1161
  - 
    role: "code"
    lines: 
      - "cell-test2 = (cell-test3);"
    code: "211101111321032211110000332233"
    stanza: 1162
  - 
    role: "comment"
    lines: 
      - "# MUD playing around with doors and rooms"
    section_description: "playing around with doors and rooms"
    section_category: "MUD"
    section_index: 40
    stanza: 1163
  - 
    role: "code"
    lines: 
      - "class door ((src room) (dest room))"
      - "       (method new (begin"
      - "             (src add (self))"
      - "             (dest add (self))))"
      - "       (method access-from (lambda ((current room))"
      - "                 (cond ((current == (src)) (dest))"
      - "                   ((current == (dest)) (src))"
      - "                   0)))"
      - "       (method is-present (lambda ((current room))"
      - "                (cond ((current == (src)) (true))"
      - "                  ((current == (dest)) (true))"
      - "                  (false))));"
    code
    stanza: 1164
  - 
    role: "code"
    lines: 
      - "class room (name)"
      - "       (field content (container new))"
      - "       (method name (name))"
      - "       (method unknown (lambda (x) (content (x))));"
    code: "211011000321111001132210010010332211011101321110100132211000011321100100033322100100113210010010322100100103332210010011321110000032211010322100101332211101001322100101333332233"
    stanza: 1165
  - 
    role: "comment"
    lines: 
      - "# need to fix up containers to use object equality"
    stanza: 1166
  - 
    role: "code"
    lines: 
      - "define object-element"
      - "  (lambda (n lst)"
      - "    (> (list-length "
      - "    (select-match (lambda (x) (x == (n))) (lst))) "
      - "       0));"
    code: "21101321111011132211010322110000321110113322113221111013221101001032211010322100101332210010132111000013221100003333221110113333203332233"
    stanza: 1167
  - 
    role: "code"
    lines: 
      - "class container ()"
      - "    (field contents (cell new (vector)))"
      - "    (method inventory (contents get))"
      - "    (method add (lambda (x) "
      - "          (if (not (object-element (x) (contents get)))"
      - "              (contents set (prepend (x) (contents get)))"
      - "              (false))));"
    code: "21101100032110000113232211011101321100010032211100111321100100032210000333322100100113211000101322110001003211101010333221001001132110010032211010322100101332211113221003221111011132210010133221100010032111010103333221100010032111010113221111113221001013322110001003211101010333322101100333332233"
    stanza: 1168
  - 
    role: "code"
    lines: 
      - "define hall (room new 0);"
    code: "211013211111000322111100113211001000320332233"
    stanza: 1169
  - 
    role: "code"
    lines: 
      - "define kitchen (room new 1);"
    code: "211013211111001322111100113211001000321332233"
    stanza: 1170
  - 
    role: "code"
    lines: 
      - "define door1 (door new (hall) (kitchen));"
    code: "211013211111010322111100013211001000322111110003322111110013332233"
    stanza: 1171
  - 
    role: "code"
    lines: 
      - "(first (hall inventory)) == (door1);"
    code: "22100000132211111000321100010133321110000132211111010332233"
    stanza: 1172
  - 
    role: "code"
    lines: 
      - "(first (kitchen inventory)) == (door1);"
    code: "22100000132211111001321100010133321110000132211111010332233"
    stanza: 1173
  - 
    role: "code"
    lines: 
      - "door1 access-from (hall) == (kitchen);"
    code: "2111110103211110101322111110003321110000132211111001332233"
    stanza: 1174
  - 
    role: "code"
    lines: 
      - "not (door1 access-from (hall) == (hall));"
    code: "21003221111101032111101013221111100033211100001322111110003332233"
    stanza: 1175
  - 
    role: "code"
    lines: 
      - "door1 access-from (kitchen) == (hall);"
    code: "2111110103211110101322111110013321110000132211111000332233"
    stanza: 1176
  - 
    role: "code"
    lines: 
      - "define stairs (room new 2);"
    code: "2110132111110113221111001132110010003210332233"
    stanza: 1177
  - 
    role: "code"
    lines: 
      - "define lawn (room new 3);"
    code: "2110132111111003221111001132110010003211332233"
    stanza: 1178
  - 
    role: "code"
    lines: 
      - "define bedroom (room new 4);"
    code: "21101321111110132211110011321100100032100332233"
    stanza: 1179
  - 
    role: "code"
    lines: 
      - "define nowhere (room new 0);"
    code: "211013211111110322111100113211001000320332233"
    stanza: 1180
  - 
    role: "code"
    lines: 
      - "define door2 (door new (hall) (lawn));"
    code: "211013211111111322111100013211001000322111110003322111111003332233"
    stanza: 1181
  - 
    role: "code"
    lines: 
      - "define door3 (door new (hall) (stairs));"
    code: "2110132100000000322111100013211001000322111110003322111110113332233"
    stanza: 1182
  - 
    role: "code"
    lines: 
      - "define door4 (door new (stairs) (bedroom));"
    code: "2110132100000001322111100013211001000322111110113322111111013332233"
    stanza: 1183
  - 
    role: "code"
    lines: 
      - "class character ()"
      - "       (field location (cell new 0))"
      - "       (field name (cell new 0))"
      - "       (method set-room (lambda ((r room)) "
      - "              (begin"
      - "                (if (not (number? / location get))"
      - "                (location get remove (self))"
      - "                0)"
      - "                (r add (self))"
      - "                (location set (r)))))"
      - "       (method get-room (location get))"
      - "       (method set-name (lambda (n) (name set / n)))"
      - "       (method get-name (name get))"
      - "       (method update 0);"
    code
    stanza: 1184
  - 
    role: "code"
    lines: 
      - "define find-max-helper"
      - "  (lambda (test max idx n lst)"
      - "    (if (> (list-length (lst)) 0)"
      - "    (if (> (test (head (lst))) (max))"
      - "        (find-max-helper (test) (test (head (lst))) (n) (+ (n) 1) (tail (lst)))"
      - "        (find-max-helper (test) (max) (idx) (+ (n) 1) (tail (lst))))"
      - "    (idx)));"
    code: "21101321000010103221101032210111001321011013210001103211000032111011332211113221132211110132211101133320332211113221132210111001322111010322111011333322101101333221000010103221011100133221011100132211101032211101133332211000033221010322110000332133221111003221110113333221000010103221011100133221011013322100011033221010322110000332133221111003221110113333322100011033332233"
    stanza: 1185
  - 
    role: "code"
    lines: 
      - "define find-max-idx"
      - "  (lambda (test lst)"
      - "    (find-max-helper (test) (test (head (lst))) 0 0 (lst)));"
    code: "211013210000101132211010322101110013211101133221000010103221011100133221011100132211101032211101133332032032211101133332233"
    stanza: 1186
  - 
    role: "code"
    lines: 
      - "define find-min-helper"
      - "  (lambda (test max idx n lst)"
      - "    (if (> (list-length (lst)) 0)"
      - "    (if (< (test (head (lst))) (max))"
      - "        (find-min-helper (test) (test (head (lst))) (n) (+ (n) 1) (tail (lst)))"
      - "        (find-min-helper (test) (max) (idx) (+ (n) 1) (tail (lst))))"
      - "    (idx)));"
    code: "2110132100001100322110103221011100132101101321000110321100003211101133221111322113221111013221110113332033221111322132210111001322111010322111011333322101101333221000011003221011100133221011100132211101032211101133332211000033221010322110000332133221111003221110113333221000011003221011100133221011013322100011033221010322110000332133221111003221110113333322100011033332233"
    stanza: 1187
  - 
    role: "code"
    lines: 
      - "define find-min-idx"
      - "  (lambda (test lst)"
      - "    (find-min-helper (test) (test (head (lst))) 0 0 (lst)));"
    code: "211013210000110132211010322101110013211101133221000011003221011100133221011100132211101032211101133332032032211101133332233"
    stanza: 1188
  - 
    role: "code"
    lines: 
      - "= 2 (find-max-idx (lambda (x) (x)) (vector 3 4 5 0));"
    code: "21032103221000010113221101032210010133221001013332210000321132100321013203332233"
    stanza: 1189
  - 
    role: "code"
    lines: 
      - "= 1 (find-max-idx (lambda (x) (x)) (vector 3 5 4 0));"
    code: "2103213221000010113221101032210010133221001013332210000321132101321003203332233"
    stanza: 1190
  - 
    role: "code"
    lines: 
      - "= 0 (find-max-idx (lambda (x) (x)) (vector 5 3 4 0));"
    code: "2103203221000010113221101032210010133221001013332210000321013211321003203332233"
    stanza: 1191
  - 
    role: "comment"
    lines: 
      - "# the robo class makes a character that patrols from room to room"
    stanza: 1192
  - 
    role: "code"
    lines: 
      - "class robo ()"
      - "       (field super (character new))"
      - "       (field timestamp (cell new 1))"
      - "       (field timestamp-map (cell new (lambda (x) 0)))"
      - "       (method unknown (lambda (x) (super (x))))"
      - "       (method update "
      - "           (let ((exits "
      - "              (select-match (lambda (x) (instanceof door (x)))"
      - "                    (self location inventory))))"
      - "         (let ((timestamps"
      - "            (map (lambda (x) (timestamp-map get (x)))"
      - "                 (exits))))"
      - "           (let ((chosen-exit (list-ref "
      - "                       (exits)"
      - "                       (find-min-idx (lambda (x) (x))"
      - "                             (timestamps))))"
      - "             (current-tmap (timestamp-map get))"
      - "             (current-t (timestamp get)))"
      - "             (begin"
      - "               (self location set (chosen-exit "
      - "                       access-from "
      - "                       (self location get)))"
      - "               (timestamp-map set "
      - "                      (lambda ((d door))"
      - "                    (if (d == (chosen-exit))"
      - "                        (current-t)"
      - "                        (current-tmap (d)))))"
      - "               (timestamp set (+ (timestamp get) 1)))))));"
    code
    stanza: 1193
  - 
    role: "code"
    lines: 
      - "define myrobo (robo new);"
    code: "21101321000101113221000011103211001000332233"
    stanza: 1194
  - 
    role: "code"
    lines: 
      - "myrobo set-room (stairs);"
    code: "21000101113210000010032211111011332233"
    stanza: 1195
  - 
    role: "code"
    lines: 
      - "define which-room"
      - "  (lambda ((rr robo))"
      - "    (find-max-idx "
      - "     (lambda ((r room)) (if (r == (rr get-room)) 1 0))"
      - "     (vector (hall) (kitchen) (stairs) (lawn) (bedroom))));"
    code: "21101321000110003221101032221000110013210000111033322100001011322110103222100000101321111001133322111132210000010132111000013221000110013210000011033321320333221000032211111000332211111001332211111011332211111100332211111101333332233"
    stanza: 1196
  - 
    role: "code"
    lines: 
      - "define sequencer"
      - "  (lambda (n current lst)"
      - "    (if (< (current) (n))"
      - "    (begin"
      - "      (myrobo update)"
      - "      (sequencer"
      - "       (n)"
      - "       (+ (current) 1)"
      - "       (append"
      - "        (which-room (myrobo))"
      - "        (lst))))"
      - "    (lst)));"
    code: "21101321000110103221101032211000032101000103211101133221111322132210100010332211000033322100000003221000101113210000100133221000110103221100003322101032210100010332133221101000132210001100032210001011133322111011333332211101133332233"
    stanza: 1197
  - 
    role: "comment"
    lines: 
      - "# here is a list of the first 30 rooms the robot character visits"
      - "# 0=hall, 1=kitchen, 2=stairs, 3=lawn, 4=bedroom"
    stanza: 1198
  - 
    role: "code"
    lines: 
      - "list= (sequencer 30 0 (vector)) (vector 4 2 0 3 0 1 0 2 4 2 0 3 0 1 0 2 4 2 0 3 0 1 0 2 4 2 0 3 0 1);"
    code: "2100000032210001101032111103203221000033322100003210032103203211320321320321032100321032032113203213203210321003210320321132032132032103210032103203211320321332233"
    stanza: 1199
  - 
    role: "comment"
    lines: 
      - "# Now should start to introduce a language to talk about what is"
      - "# going on in the simulated world, and start to move away from"
      - "# detailed mechanism"
    stanza: 1200
  - 
    role: "file"
    lines: 
      - "== COS_CommentBase2 =="
    stanza: 1201
  - 
    role: "comment"
    lines: 
      - "# NOTE end of part 2, start of part 3"
      - "# The following parts of the message are the beginnings"
      - "# of embedding an alternate visual primer"
    section_description: "end of part 2, start of part 3"
    section_category: "NOTE"
    section_index: 41
    stanza: 1202
  - 
    role: "code"
    lines: 
      - "intro part3;"
    code: "203210001101132233"
    stanza: 1203
  - 
    role: "file"
    lines: 
      - "== COS_Unless =="
    stanza: 1204
  - 
    role: "comment"
    lines: 
      - "# GATE simulating unless gates"
      - "# for embedded image-and-logic-based primer"
    section_description: "simulating unless gates"
    section_category: "GATE"
    section_index: 42
    stanza: 1205
  - 
    role: "comment"
    lines: 
      - "# practice with pure logic gate"
    stanza: 1206
  - 
    role: "comment"
    lines: 
      - "# X unless Y = (X if Y=0, otherwise 0)"
    stanza: 1207
  - 
    role: "code"
    lines: 
      - "define unless /"
      - "  ? x / ? y /"
      - "  and (x) (not (y));"
    code: "211013210001110030232110032100101302321100321001003023210132210010133221003221001003332233"
    stanza: 1208
  - 
    role: "comment"
    lines: 
      - "# if second input is true, output is blocked (false)"
      - "# if second input is false, output copies first input"
    stanza: 1209
  - 
    role: "code"
    lines: 
      - "= (false) (unless (false) (false));"
    code: "210322101100332210001110032210110033221011003332233"
    stanza: 1210
  - 
    role: "code"
    lines: 
      - "= (true) (unless (true) (false));"
    code: "210322101011332210001110032210101133221011003332233"
    stanza: 1211
  - 
    role: "code"
    lines: 
      - "= (false) (unless (false) (true));"
    code: "210322101100332210001110032210110033221010113332233"
    stanza: 1212
  - 
    role: "code"
    lines: 
      - "= (false) (unless (true) (true));"
    code: "210322101100332210001110032210101133221010113332233"
    stanza: 1213
  - 
    role: "comment"
    lines: 
      - "# To do: add a simple simulator for non-grid-based"
      - "# logic -- much simpler to understand than"
      - "# grid-based"
    stanza: 1214
  - 
    role: "comment"
    lines: 
      - "# On to a grid-based logic simulation"
      - "# first, need unbounded, mutable matrices"
    stanza: 1215
  - 
    role: "code"
    lines: 
      - "define make-matrix /"
      - "  ? default /"
      - "  (make-cell (hash-default (default)));"
    code: "2110132100011101302321100321000011130232211011322100001103221000011133332233"
    stanza: 1216
  - 
    role: "code"
    lines: 
      - "define matrix-set /"
      - "  ? m /"
      - "  ? x /"
      - "  ? addr /"
      - "  set! (m) / hash-add (get! (m)) (addr) (x);"
    code: "211013210001111030232110032100011111302321100321001013023211003210010000030232111003221000111113302321000001032211101322100011111333221001000003322100101332233"
    stanza: 1217
  - 
    role: "code"
    lines: 
      - "define matrix-get /"
      - "  ? m /"
      - "  ? addr /"
      - "  hash-ref (get! (m)) (addr);"
    code: "2110132100100001302321100321000111113023211003210010000030232100001003221110132210001111133322100100000332233"
    stanza: 1218
  - 
    role: "code"
    lines: 
      - "define test-matrix"
      - "  (make-matrix 0);"
    code: "2110132100100010322100011101320332233"
    stanza: 1219
  - 
    role: "code"
    lines: 
      - "= 0 / matrix-get (test-matrix) / vector 1 2 3;"
    code: "21032030232100100001322100100010330232100003213210321132233"
    stanza: 1220
  - 
    role: "code"
    lines: 
      - "matrix-set (test-matrix) 10 / vector 1 2 3;"
    code: "2100011110322100100010332101030232100003213210321132233"
    stanza: 1221
  - 
    role: "code"
    lines: 
      - "= 10 / matrix-get (test-matrix) / vector 1 2 3;"
    code: "21032101030232100100001322100100010330232100003213210321132233"
    stanza: 1222
  - 
    role: "comment"
    lines: 
      - "# go through a circuit of unless gates and analyze data flow"
    stanza: 1223
  - 
    role: "code"
    lines: 
      - "define unless-phase-1 /"
      - "  ? circuit /"
      - "  assign state (make-matrix (false))"
      - "  (begin"
      - "    (map "
      - "     (? gate /"
      - "    assign x1 (list-ref (gate) 0) /"
      - "    assign y1 (list-ref (gate) 1) /"
      - "    assign x2 (list-ref (gate) 2) /"
      - "    assign y2 (list-ref (gate) 3) /"
      - "    assign v (list-ref (gate) 4) /"
      - "    (if (= (x1) (x2))"
      - "        (begin"
      - "          (matrix-set (state) (v) / vector (x2) (y2) vert-value)"
      - "          (matrix-set (state) (true) / vector (x2) (y2) vert-have)"
      - "          (matrix-set (state) (true) / vector (x1) (y1) vert-want)"
      - "          (gate))"
      - "        (begin"
      - "          (matrix-set (state) (v) / vector (x2) (y2) horiz-value)"
      - "          (matrix-set (state) (true) / vector (x2) (y2) horiz-have)"
      - "          (matrix-set (state) (true) / vector (x1) (y1) horiz-want)"
      - "          (gate))))"
      - "     (circuit))"
      - "    (state));"
    code
    stanza: 1224
  - 
    role: "comment"
    lines: 
      - "# move forward one simulation step"
    stanza: 1225
  - 
    role: "code"
    lines: 
      - "define unless-phase-2 /"
      - "  ? circuit /"
      - "  ? state"
      - "  (map "
      - "   (? gate /"
      - "      assign x1 (list-ref (gate) 0) /"
      - "      assign y1 (list-ref (gate) 1) /"
      - "      assign x2 (list-ref (gate) 2) /"
      - "      assign y2 (list-ref (gate) 3) /"
      - "      assign v (list-ref (gate) 4) /"
      - "      assign nv (if (= (x1) (x2))"
      - "            (if (matrix-get (state) / vector (x1) (y1) vert-have)"
      - "            (and (matrix-get (state) /"
      - "                     vector (x1) (y1) vert-value)"
      - "                 (not (and (matrix-get (state) /"
      - "                           vector (x1) (y1) horiz-value)"
      - "                       (not (matrix-get (state) /"
      - "                            vector (x1) (y1) horiz-want)))))"
      - "            (if (matrix-get (state) / vector (x1) (y1) horiz-have)"
      - "                (matrix-get (state) / vector (x1) (y1) horiz-value)"
      - "                (true)))"
      - "            (if (matrix-get (state) / vector (x1) (y1) horiz-have)"
      - "            (and (matrix-get (state) / vector (x1) (y1) horiz-value)"
      - "                 (not (and (matrix-get (state) /"
      - "                           vector (x1) (y1) vert-value)"
      - "                       (not (matrix-get (state) /"
      - "                            vector (x1) (y1) vert-want)))))"
      - "            (if (matrix-get (state) / vector (x1) (y1) vert-have)"
      - "                (matrix-get (state) / vector (x1) (y1) vert-value)"
      - "                (true)))) /"
      - "                vector (x1) (y1) (x2) (y2) (nv))"
      - "   (circuit));"
    code
    stanza: 1226
  - 
    role: "comment"
    lines: 
      - "# wrap up both phases of simulation"
    stanza: 1227
  - 
    role: "code"
    lines: 
      - "define simulate-unless /"
      - "  ? circuit /"
      - "  assign state (unless-phase-1 (circuit)) /"
      - "  unless-phase-2 (circuit) (state);"
    code: "2110132100110011302321100321001001003023211103210010010132210010001132210010010033302321001100013221001001003322100100101332233"
    stanza: 1228
  - 
    role: "comment"
    lines: 
      - "# A circuit is a list of gates"
      - "# Each gate is a list (x1 y1 x2 y2 v)"
      - "# where the coordinates (x1,y1) and (x2,y2) represent"
      - "# start and end points of a wire on a plane, carrying a "
      - "# logic value v."
      - "# Wires copy values from their start point."
      - "#   |  "
      - "#   | (A)"
      - "#   V        "
      - "# -->-->"
      - "# (B)(C)"
      - "#"
      - "# Wire C here copies from wire B."
      - "# If wire A is on, it blocks (sets to 0) C."
    stanza: 1229
  - 
    role: "code"
    lines: 
      - "assign circuit1"
      - "    (vector"
      - "     (vector 2 2 4 2 (true))"
      - "     (vector 4 2 6 2 (true))"
      - "     (vector 6 2 8 2 (true))"
      - "     (vector 6 4 6 2 (true))) /"
      - "     assign circuit2"
      - "     (vector"
      - "      (vector 2 2 4 2 (true))"
      - "      (vector 4 2 6 2 (true))"
      - "      (vector 6 2 8 2 (false))"
      - "      (vector 6 4 6 2 (true))) /"
      - "      equal (simulate-unless (circuit1)) (circuit2);"
    code: "211103210011010032210000322100003210321032100321032210101133322100003210032103211032103221010113332210000321103210321000321032210101133322100003211032100321103210322101011333302321110321001101013221000032210000321032103210032103221010113332210000321003210321103210322101011333221000032110321032100032103221011003332210000321103210032110321032210101133330232100032210011001132210011010033322100110101332233"
    stanza: 1230
  - 
    role: "comment"
    lines: 
      - "# okay, now let us make a simple image class"
      - "# we are going to encode each row as a single binary number,"
      - "# rather than a vector, so that images will be pretty"
      - "# obvious in the raw, uninterpreted message"
    stanza: 1231
  - 
    role: "code"
    lines: 
      - "define bit-get /"
      - "  lambda (n offset) /"
      - "  assign div2 (div (n) 2) "
      - "  (if (= 0 / offset)"
      - "      (not / = (n) / * 2 / div2)"
      - "      (bit-get (div2) / - (offset) 1));"
    code: "2110132100110110302321101032211000032100110111330232111032100111000322100010322110000332103322111132210320302321001101113322100302321032211000033023210013210302321001110003322100110110322100111000330232101132210011011133213332233"
    stanza: 1232
  - 
    role: "code"
    lines: 
      - "= 0 / bit-get (::.) 0;"
    code: "210320302321001101103211032032233"
    stanza: 1233
  - 
    role: "code"
    lines: 
      - "= 1 / bit-get (::.) 1;"
    code: "210321302321001101103211032132233"
    stanza: 1234
  - 
    role: "code"
    lines: 
      - "= 1 / bit-get (::.) 2;"
    code: "2103213023210011011032110321032233"
    stanza: 1235
  - 
    role: "code"
    lines: 
      - "= 0 / bit-get (::.) 3;"
    code: "2103203023210011011032110321132233"
    stanza: 1236
  - 
    role: "code"
    lines: 
      - "= 0 / bit-get (::.) 4;"
    code: "21032030232100110110321103210032233"
    stanza: 1237
  - 
    role: "code"
    lines: 
      - "= 0 / bit-get 8 0;"
    code: "2103203023210011011032100032032233"
    stanza: 1238
  - 
    role: "code"
    lines: 
      - "= 0 / bit-get 8 1;"
    code: "2103203023210011011032100032132233"
    stanza: 1239
  - 
    role: "code"
    lines: 
      - "= 0 / bit-get 8 2;"
    code: "21032030232100110110321000321032233"
    stanza: 1240
  - 
    role: "code"
    lines: 
      - "= 1 / bit-get 8 3;"
    code: "21032130232100110110321000321132233"
    stanza: 1241
  - 
    role: "code"
    lines: 
      - "define make-image /"
      - "  lambda (h w lst) /"
      - "  vector (h) (w) (lst);"
    code: "21101321001110013023211010322100000113210011132111011330232100003221000001133221001113322111011332233"
    stanza: 1242
  - 
    role: "code"
    lines: 
      - "define image-get /"
      - "  lambda (image row col) /"
      - "  assign h (list-ref (image) 0) /"
      - "  assign w (list-ref (image) 1) /"
      - "  assign lst (list-ref (image) 2) /"
      - "  assign bits (list-ref (lst) (row)) /"
      - "  bit-get (bits) (- (- (w) (col)) 1);"
    code: "21101321001110103023211010322100111011321001111003210011110133023211103210000011322111110322100111011332033023211103210011132211111032210011101133213302321110321110113221111103221001110113321033023211103210011111032211111032211101133221001111003330232100110110322100111110332210113221011322100111332210011110133321332233"
    stanza: 1243
  - 
    role: "code"
    lines: 
      - "define image-height /"
      - "  ? image /"
      - "  list-ref (image) 0;"
    code: "21101321001111113023211003210011101130232111110322100111011332032233"
    stanza: 1244
  - 
    role: "code"
    lines: 
      - "define image-width /"
      - "  ? image /"
      - "  list-ref (image) 1;"
    code: "21101321010000003023211003210011101130232111110322100111011332132233"
    stanza: 1245
  - 
    role: "code"
    lines: 
      - "define test-image /"
      - "  make-image 3 5 /"
      - "  vector (:....) (:...:) (:....);"
    code: "211013210100000130232100111001321132101302321000032100003210001321000032233"
    stanza: 1246
  - 
    role: "code"
    lines: 
      - "= 3 (image-height / test-image);"
    code: "210321132210011111130232101000001332233"
    stanza: 1247
  - 
    role: "code"
    lines: 
      - "= 5 (image-width / test-image);"
    code: "2103210132210100000030232101000001332233"
    stanza: 1248
  - 
    role: "code"
    lines: 
      - "= (true) (image-get (test-image) 0 0);"
    code: "21032210101133221001110103221010000013320320332233"
    stanza: 1249
  - 
    role: "code"
    lines: 
      - "= (false) (image-get (test-image) 0 1);"
    code: "21032210110033221001110103221010000013320321332233"
    stanza: 1250
  - 
    role: "code"
    lines: 
      - "= (false) (image-get (test-image) 0 4);"
    code: "2103221011003322100111010322101000001332032100332233"
    stanza: 1251
  - 
    role: "code"
    lines: 
      - "= (true) (image-get (test-image) 1 0);"
    code: "21032210101133221001110103221010000013321320332233"
    stanza: 1252
  - 
    role: "code"
    lines: 
      - "= (true) (image-get (test-image) 2 0);"
    code: "210322101011332210011101032210100000133210320332233"
    stanza: 1253
  - 
    role: "code"
    lines: 
      - "= (true) (image-get (test-image) 1 4);"
    code: "2103221010113322100111010322101000001332132100332233"
    stanza: 1254
  - 
    role: "comment"
    lines: 
      - "# need a way to join two lists"
    stanza: 1255
  - 
    role: "code"
    lines: 
      - "define merge-list /"
      - "  ? lst1 /"
      - "  ? lst2 /"
      - "  (if (> (list-length / lst1) 0)"
      - "      (prepend (head / lst1) (merge-list (tail / lst1) (lst2)))"
      - "      (lst2));"
    code: "211013210100001030232110032110011113023211003211010000302322111132211322111101302321100111133203322111111322111010302321100111133221010000103221111003023211001111332211010000333322110100003332233"
    stanza: 1256
  - 
    role: "code"
    lines: 
      - "define merge-lists /"
      - "  ? lst /"
      - "  (if (> (list-length / lst) 2)"
      - "      (merge-list (head / lst) (merge-lists / tail / lst))"
      - "      (if (= (list-length / lst) 2)"
      - "      (merge-list (head / lst) / (head / tail / lst))"
      - "      (if (= (list-length / lst) 1)"
      - "          (head / lst)"
      - "          (vector))));"
    code: "2110132101000011302321100321110113023221111322113221111013023211101133210332210100001032211101030232111011332210100001130232111100302321110113332211113221032211110130232111011332103322101000010322111010302321110113302322111010302321111003023211101133322111132210322111101302321110113321332211101030232111011332210000333332233"
    stanza: 1257
  - 
    role: "code"
    lines: 
      - "equal (vector 1 2 3 4) (merge-list (vector 1 2) (vector 3 4));"
    code: "2100032210000321321032113210033221010000103221000032132103322100003211321003332233"
    stanza: 1258
  - 
    role: "code"
    lines: 
      - "equal (vector 1 2 3 4) (merge-lists (vector (vector 1 2) (vector 3) (vector 4)));"
    code: "2100032210000321321032113210033221010000113221000032210000321321033221000032113322100003210033332233"
    stanza: 1259
  - 
    role: "comment"
    lines: 
      - "# helper for pairing"
    stanza: 1260
  - 
    role: "code"
    lines: 
      - "define prefix /"
      - "  ? x / "
      - "  ? lst /"
      - "  map (? y (vector (x) (y))) (lst);"
    code: "21101321010001003023211003210010130232110032111011302321010101322110032100100322100003221001013322100100333322111011332233"
    stanza: 1261
  - 
    role: "code"
    lines: 
      - "equal (vector (vector 1 10) (vector 1 11))"
      - "       (prefix 1 (vector 10 11));"
    code: "21000322100003221000032132101033221000032132101133322101000100321322100003210103210113332233"
    stanza: 1262
  - 
    role: "comment"
    lines: 
      - "# need a way to take product of domains"
    stanza: 1263
  - 
    role: "code"
    lines: 
      - "define pairing /"
      - "  ? lst1 / "
      - "  ? lst2"
      - "  (if (> (list-length / lst1) 0)"
      - "      (merge-list (prefix (head / lst1) (lst2))"
      - "          (pairing (tail / lst1) (lst2)))"
      - "      (vector));"
    code: "2110132101000101302321100321100111130232110032110100003221111322113221111013023211001111332033221010000103221010001003221110103023211001111332211010000333221010001013221111003023211001111332211010000333322100003332233"
    stanza: 1264
  - 
    role: "code"
    lines: 
      - "equal (vector (vector 1 10) (vector 1 11) (vector 2 10) (vector 2 11))"
      - "       (pairing (vector 1 2) (vector 10 11));"
    code: "21000322100003221000032132101033221000032132101133221000032103210103322100003210321011333221010001013221000032132103322100003210103210113332233"
    stanza: 1265
  - 
    role: "comment"
    lines: 
      - "# need a way to make counting sets"
    stanza: 1266
  - 
    role: "code"
    lines: 
      - "define count /"
      - "  ? lo / ? hi"
      - "  (if (<= (lo) (hi))"
      - "      (prepend (lo) (count (+ (lo) 1) (hi)))"
      - "      (vector));"
    code: "21101321100110030232110032101000110302321100321010001113221111322110010322101000110332210100011133322111111322101000110332211001100322101032210100011033213322101000111333322100003332233"
    stanza: 1267
  - 
    role: "code"
    lines: 
      - "equal (vector 0 1 2 3 4) (count 0 4);"
    code: "2100032210000320321321032113210033221100110032032100332233"
    stanza: 1268
  - 
    role: "comment"
    lines: 
      - "# given an image of a circuit, extract a model."
      - "# wire elements are centered on multiples of 8"
    stanza: 1269
  - 
    role: "comment"
    lines: 
      - "# individual element..."
    stanza: 1270
  - 
    role: "code"
    lines: 
      - "define distill-element /"
      - "  ? image / ? xlogic / ? ylogic / ? xmid / ? ymid "
      - "  (if (image-get (image) (ymid) (xmid))"
      - "      (assign vert (image-get (image) (+ (ymid) 4) (xmid)) /"
      - "          assign dx (if (vert) 0 1) /"
      - "          assign dy (if (vert) 1 0) /"
      - "          assign pos (image-get (image) "
      - "                    (+ (ymid) / + (* 4 / dy) (* 2 / dx))"
      - "                    (+ (xmid) / - (* 4 / dx) (* 2 / dy))) /"
      - "          assign sgn (if (pos) 1 (- 0 1)) /"
      - "          assign dx (* (sgn) (dx)) /"
      - "          assign dy (* (sgn) (dy)) /"
      - "          assign active (image-get (image) (+ (ymid) (dx)) (- (xmid) (dy))) /"
      - "          (vector "
      - "           (vector (- (xlogic) (dx)) "
      - "               (- (ylogic) (dy))"
      - "               (+ (xlogic) (dx))"
      - "               (+ (ylogic) (dy))"
      - "               (active))))"
      - "      (vector));"
    code
    stanza: 1271
  - 
    role: "comment"
    lines: 
      - "# full circuit..."
    stanza: 1272
  - 
    role: "code"
    lines: 
      - "define distill-circuit /"
      - "  ? image /"
      - "  assign h (div (image-height / image) 8) /"
      - "  assign w (div (image-width / image) 8) "
      - "  (merge-lists"
      - "   (map (? v /"
      - "       assign xlogic (list-ref (v) 0) /"
      - "       assign ylogic (list-ref (v) 1) /"
      - "       assign xmid (* 8 / xlogic) /"
      - "       assign ymid (* 8 / ylogic) /"
      - "       distill-element (image) (xlogic) (ylogic) (xmid) (ymid))"
      - "    (pairing (count 1 (- (w) 1))"
      - "         (count 1 (- (h) 1)))));"
    code: "21101321010100113023211003210011101130232111032100000113221000103221001111113023210011101133210003302321110321001113221000103221010000003023210011101133210003322101000011322101010132211003210101101302321110321010010013221111103221010110133203302321110321010010103221111103221010110133213302321110321010010113221001321000302321010010013302321110321010011003221001321000302321010010103302321010010003221001110113322101001001332210100101033221010010113322101001100333221010001013221100110032132210113221001113321333221100110032132210113221000001133213333332233"
    stanza: 1273
  - 
    role: "file"
    lines: 
      - "== COS_NOT =="
    stanza: 1274
  - 
    role: "comment"
    lines: 
      - "# GATE testing alternate primer based on gates: cos_not circuit"
      - "# This section contains one or more representations of a circuit"
      - "# constructed using UNLESS gates."
    section_description: "testing alternate primer based on gates: cos_not circuit"
    section_category: "GATE"
    section_index: 43
    stanza: 1275
  - 
    role: "code"
    lines: 
      - "define cos_not_gate / vector "
      - "  (vector 0 6 2 6 (true))"
      - "  (vector 2 6 4 6 (true))"
      - "  (vector 4 6 6 6 (true))"
      - "  (vector 6 6 8 6 (true))"
      - "  (vector 8 4 8 6 (true))"
      - "  (vector 8 6 8 8 (false))"
      - "  (vector 8 8 10 8 (false))"
      - "  (vector 10 8 12 8 (false))"
      - "  (vector 12 8 12 6 (false))"
      - "  (vector 12 6 14 6 (false))"
      - "  (vector 14 6 16 6 (false))"
      - "  (vector 16 6 18 6 (false))"
      - "  (vector 18 6 20 6 (false));"
    code
    stanza: 1276
  - 
    role: "code"
    lines: 
      - "define cos_not_image / make-image 109 169 / vector "
      - "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:.............................................................:::::.....................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:...........:...............:...............:...............:...:...........................................:...............:...............:...............:...........:)"
      - "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..........:)"
      - "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)"
      - "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..........:)"
      - "  (:...........:...............:...............:...............:...................................:...........:...............:...............:...............:...........:)"
      - "  (:...............................................................:..............................:::......................................................................:)"
      - "  (:...............................................................:.............................:::::.....................................................................:)"
      - "  (:...............................................................:...............................:.......................................................................:)"
      - "  (:...............................................................:...............................:.......................................................................:)"
      - "  (:...............................................................:...............................:.......................................................................:)"
      - "  (:...............................................................:...............................:.......................................................................:)"
      - "  (:...............................................................:...............................:.......................................................................:)"
      - "  (:...............................................................:...............................:.......................................................................:)"
      - "  (:...............................................................:...............................:.......................................................................:)"
      - "  (:.............................................................:::::.............................:.......................................................................:)"
      - "  (:..............................................................:::..............................:.......................................................................:)"
      - "  (:...............................................................:...........:...............:...........................................................................:)"
      - "  (:...........................................................................::..............::..........................................................................:)"
      - "  (:..................................................................::::::::::::....::::::::::::.........................................................................:)"
      - "  (:...........................................................................::..............::..........................................................................:)"
      - "  (:...........................................................................:...............:...........................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    code: ""
    stanza: 1277
  - 
    role: "code"
    lines: 
      - "equal (cos_not_gate) (distill-circuit (cos_not_image));"
    code: "2100032210101010033221010100113221010101013332233"
    stanza: 1278
  - 
    role: "gate"
    lines: 
      - ">>> COS_NOT.gate"
      - "13 6 1 0 0"
      - "3 6 1 0 1"
      - "1 6 1 0 1"
      - "15 6 1 0 0"
      - "11 8 1 0 0"
      - "5 6 1 0 1"
      - "9 8 1 0 0"
      - "12 7 0 -1 0"
      - "17 6 1 0 0"
      - "8 7 0 1 0"
      - "19 6 1 0 0"
      - "8 5 0 1 1"
      - "7 6 1 0 1"
    thumbnail: "COS_NOT.gif"
    page: "COS_NOT.html"
    stanza: 1279
  - 
    role: "file"
    lines: 
      - "== COS_AND =="
    stanza: 1280
  - 
    role: "comment"
    lines: 
      - "# GATE testing alternate primer based on gates: cos_and circuit"
      - "# This section contains one or more representations of a circuit"
      - "# constructed using UNLESS gates."
    section_description: "testing alternate primer based on gates: cos_and circuit"
    section_category: "GATE"
    section_index: 44
    stanza: 1281
  - 
    role: "code"
    lines: 
      - "define cos_and_gate / vector "
      - "  (vector 0 2 2 2 (true))"
      - "  (vector 0 8 2 8 (true))"
      - "  (vector 2 2 4 2 (true))"
      - "  (vector 2 4 4 4 (true))"
      - "  (vector 2 6 4 6 (true))"
      - "  (vector 2 8 4 8 (true))"
      - "  (vector 4 2 4 4 (true))"
      - "  (vector 4 8 4 6 (true))"
      - "  (vector 4 4 6 4 (false))"
      - "  (vector 4 6 6 6 (false))"
      - "  (vector 6 4 8 4 (false))"
      - "  (vector 6 6 8 6 (false))"
      - "  (vector 8 4 10 4 (false))"
      - "  (vector 8 6 10 6 (false))"
      - "  (vector 10 2 10 4 (true))"
      - "  (vector 10 4 10 6 (true))"
      - "  (vector 10 6 10 8 (true))"
      - "  (vector 10 8 12 8 (true))"
      - "  (vector 12 8 14 8 (true))"
      - "  (vector 14 8 16 8 (true))"
      - "  (vector 16 8 18 8 (true));"
    code
    stanza: 1282
  - 
    role: "code"
    lines: 
      - "define cos_and_image / make-image 88 153 / vector "
      - "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:...........:...............:...........................................................................................................................:)"
      - "  (:..:::::::::::.....:::::::::::..........................................................................................................................:)"
      - "  (:..::::::::::::....::::::::::::.........................................................................................................................:)"
      - "  (:..:::::::::::.....:::::::::::..........................................................................................................................:)"
      - "  (:...........:...............:...........................................................................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:.............................:::::...........................................:::::.....................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:...........................:...:...........:...............:...............:...:.......................................................................:)"
      - "  (:..................:::::::::::..............::..............::..............::..........................................................................:)"
      - "  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)"
      - "  (:..................:::::::::::..............::..............::..............::..........................................................................:)"
      - "  (:...........................:...............:...............:...............:...........................................................................:)"
      - "  (:..............................................................................:::......................................................................:)"
      - "  (:..............................................................................:::......................................................................:)"
      - "  (:..............................................................................:::......................................................................:)"
      - "  (:..............................................................................:::......................................................................:)"
      - "  (:..............................................................................:::......................................................................:)"
      - "  (:..............................................................................:::......................................................................:)"
      - "  (:..............................................................................:::......................................................................:)"
      - "  (:..............................................................................:::......................................................................:)"
      - "  (:..............................................................................:::......................................................................:)"
      - "  (:.............................................................................:::::.....................................................................:)"
      - "  (:..............................................................................:::......................................................................:)"
      - "  (:...........................:...............:...............:...............:...:.......................................................................:)"
      - "  (:..................:::::::::::..............::..............::..............::..........................................................................:)"
      - "  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)"
      - "  (:..................:::::::::::..............::..............::..............::..........................................................................:)"
      - "  (:...........................:...:...........:...............:...............:...........................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:.............................:::::............................................:::......................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:..............................:::............................................:::::.....................................................................:)"
      - "  (:..............................:::.............................................:::......................................................................:)"
      - "  (:...........:...............:...................................................:...........:...............:...............:...............:...........:)"
      - "  (:..:::::::::::.....:::::::::::.....................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)"
      - "  (:..::::::::::::....::::::::::::....................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)"
      - "  (:..:::::::::::.....:::::::::::.....................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)"
      - "  (:...........:...............:...............................................................:...............:...............:...............:...........:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................:)"
      - "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    code
    stanza: 1283
  - 
    role: "code"
    lines: 
      - "equal (cos_and_gate) (distill-circuit (cos_and_image));"
    code: "2100032210101011033221010100113221010101113332233"
    stanza: 1284
  - 
    role: "gate"
    lines: 
      - ">>> COS_AND.gate"
      - "13 8 1 0 1"
      - "3 8 1 0 1"
      - "1 2 1 0 1"
      - "1 8 1 0 1"
      - "3 6 1 0 1"
      - "15 8 1 0 1"
      - "3 4 1 0 1"
      - "10 3 0 1 1"
      - "9 4 1 0 0"
      - "11 8 1 0 1"
      - "4 7 0 -1 1"
      - "10 5 0 1 1"
      - "5 6 1 0 0"
      - "10 7 0 1 1"
      - "9 6 1 0 0"
      - "7 4 1 0 0"
      - "17 8 1 0 1"
      - "7 6 1 0 0"
      - "5 4 1 0 0"
      - "4 3 0 1 1"
      - "3 2 1 0 1"
    thumbnail: "COS_AND.gif"
    page: "COS_AND.html"
    stanza: 1285
  - 
    role: "file"
    lines: 
      - "== COS_OR =="
    stanza: 1286
  - 
    role: "comment"
    lines: 
      - "# GATE testing alternate primer based on gates: cos_or circuit"
      - "# This section contains one or more representations of a circuit"
      - "# constructed using UNLESS gates."
    section_description: "testing alternate primer based on gates: cos_or circuit"
    section_category: "GATE"
    section_index: 45
    stanza: 1287
  - 
    role: "code"
    lines: 
      - "define cos_or_gate / vector "
      - "  (vector 2 4 4 4 (true))"
      - "  (vector 2 6 4 6 (true))"
      - "  (vector 4 4 6 4 (true))"
      - "  (vector 4 6 6 6 (true))"
      - "  (vector 6 4 8 4 (true))"
      - "  (vector 6 6 8 6 (true))"
      - "  (vector 8 4 10 4 (true))"
      - "  (vector 8 6 10 6 (true))"
      - "  (vector 8 8 10 8 (true))"
      - "  (vector 10 2 10 4 (true))"
      - "  (vector 10 4 10 6 (false))"
      - "  (vector 10 6 10 8 (false))"
      - "  (vector 10 8 12 8 (true))"
      - "  (vector 12 8 14 8 (true))"
      - "  (vector 14 8 16 8 (true))"
      - "  (vector 16 8 18 8 (true));"
    code
    stanza: 1288
  - 
    role: "code"
    lines: 
      - "define cos_or_image / make-image 93 169 / vector "
      - "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:..............................................................................:::......................................................................................:)"
      - "  (:..............................................................................:::......................................................................................:)"
      - "  (:..............................................................................:::......................................................................................:)"
      - "  (:..............................................................................:::......................................................................................:)"
      - "  (:..............................................................................:::......................................................................................:)"
      - "  (:..............................................................................:::......................................................................................:)"
      - "  (:..............................................................................:::......................................................................................:)"
      - "  (:..............................................................................:::......................................................................................:)"
      - "  (:..............................................................................:::......................................................................................:)"
      - "  (:.............................................................................:::::.....................................................................................:)"
      - "  (:..............................................................................:::......................................................................................:)"
      - "  (:...........................:...............:...............:...............:...:.......................................................................................:)"
      - "  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)"
      - "  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................:)"
      - "  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)"
      - "  (:...........................:...............:...............:...............:...........................................................................................:)"
      - "  (:...............................................................................:.......................................................................................:)"
      - "  (:...............................................................................:.......................................................................................:)"
      - "  (:...............................................................................:.......................................................................................:)"
      - "  (:...............................................................................:.......................................................................................:)"
      - "  (:...............................................................................:.......................................................................................:)"
      - "  (:...............................................................................:.......................................................................................:)"
      - "  (:...............................................................................:.......................................................................................:)"
      - "  (:...............................................................................:.......................................................................................:)"
      - "  (:...............................................................................:.......................................................................................:)"
      - "  (:.............................................................................:::::.....................................................................................:)"
      - "  (:..............................................................................:::......................................................................................:)"
      - "  (:...........................:...............:...............:...............:...:.......................................................................................:)"
      - "  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)"
      - "  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................:)"
      - "  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)"
      - "  (:...........................:...............:...............:...............:...........................................................................................:)"
      - "  (:...............................................................................:.......................................................................................:)"
      - "  (:...............................................................................:.......................................................................................:)"
      - "  (:...............................................................................:.......................................................................................:)"
      - "  (:...............................................................................:.......................................................................................:)"
      - "  (:...............................................................................:.......................................................................................:)"
      - "  (:...............................................................................:.......................................................................................:)"
      - "  (:...............................................................................:.......................................................................................:)"
      - "  (:...............................................................................:.......................................................................................:)"
      - "  (:...............................................................................:.......................................................................................:)"
      - "  (:.............................................................................:::::.....................................................................................:)"
      - "  (:..............................................................................:::......................................................................................:)"
      - "  (:...........................................................................:...:...........:...............:...............:...............:...........................:)"
      - "  (:..................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................:)"
      - "  (:..................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................:)"
      - "  (:..................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................:)"
      - "  (:...........................................................................:...............:...............:...............:...............:...........................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    code: ""
    stanza: 1289
  - 
    role: "code"
    lines: 
      - "equal (cos_or_gate) (distill-circuit (cos_or_image));"
    code: "2100032210101100033221010100113221010110013332233"
    stanza: 1290
  - 
    role: "gate"
    lines: 
      - ">>> COS_OR.gate"
      - "13 8 1 0 1"
      - "3 6 1 0 1"
      - "15 8 1 0 1"
      - "3 4 1 0 1"
      - "10 3 0 1 1"
      - "9 4 1 0 1"
      - "11 8 1 0 1"
      - "10 5 0 1 0"
      - "5 6 1 0 1"
      - "10 7 0 1 0"
      - "9 8 1 0 1"
      - "9 6 1 0 1"
      - "7 4 1 0 1"
      - "17 8 1 0 1"
      - "7 6 1 0 1"
      - "5 4 1 0 1"
    thumbnail: "COS_OR.gif"
    page: "COS_OR.html"
    stanza: 1291
  - 
    role: "file"
    lines: 
      - "== COS_NOR =="
    stanza: 1292
  - 
    role: "comment"
    lines: 
      - "# GATE testing alternate primer based on gates: cos_nor circuit"
      - "# This section contains one or more representations of a circuit"
      - "# constructed using UNLESS gates."
    section_description: "testing alternate primer based on gates: cos_nor circuit"
    section_category: "GATE"
    section_index: 46
    stanza: 1293
  - 
    role: "code"
    lines: 
      - "define cos_nor_gate / vector "
      - "  (vector 0 6 2 6 (true))"
      - "  (vector 0 8 2 8 (true))"
      - "  (vector 2 6 4 6 (true))"
      - "  (vector 2 8 4 8 (true))"
      - "  (vector 4 6 6 6 (true))"
      - "  (vector 4 8 6 8 (true))"
      - "  (vector 6 6 8 6 (true))"
      - "  (vector 6 8 8 8 (true))"
      - "  (vector 8 4 8 6 (true))"
      - "  (vector 8 6 8 8 (false))"
      - "  (vector 8 8 8 10 (false))"
      - "  (vector 8 10 10 10 (false))"
      - "  (vector 10 10 12 10 (false))"
      - "  (vector 12 10 14 10 (false))"
      - "  (vector 14 10 16 10 (false))"
      - "  (vector 16 10 18 10 (false))"
      - "  (vector 18 10 20 10 (false));"
    code
    stanza: 1294
  - 
    role: "code"
    lines: 
      - "define cos_nor_image / make-image 125 169 / vector "
      - "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:.............................................................:::::.....................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:...........:...............:...............:...............:...:.......................................................................................................:)"
      - "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)"
      - "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................................:)"
      - "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)"
      - "  (:...........:...............:...............:...............:...........................................................................................................:)"
      - "  (:...............................................................:.......................................................................................................:)"
      - "  (:...............................................................:.......................................................................................................:)"
      - "  (:...............................................................:.......................................................................................................:)"
      - "  (:...............................................................:.......................................................................................................:)"
      - "  (:...............................................................:.......................................................................................................:)"
      - "  (:...............................................................:.......................................................................................................:)"
      - "  (:...............................................................:.......................................................................................................:)"
      - "  (:...............................................................:.......................................................................................................:)"
      - "  (:...............................................................:.......................................................................................................:)"
      - "  (:.............................................................:::::.....................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:...........:...............:...............:...............:...:.......................................................................................................:)"
      - "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)"
      - "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................................:)"
      - "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)"
      - "  (:...........:...............:...............:...............:...........................................................................................................:)"
      - "  (:...............................................................:.......................................................................................................:)"
      - "  (:...............................................................:.......................................................................................................:)"
      - "  (:...............................................................:.......................................................................................................:)"
      - "  (:...............................................................:.......................................................................................................:)"
      - "  (:...............................................................:.......................................................................................................:)"
      - "  (:...............................................................:.......................................................................................................:)"
      - "  (:...............................................................:.......................................................................................................:)"
      - "  (:...............................................................:.......................................................................................................:)"
      - "  (:...............................................................:.......................................................................................................:)"
      - "  (:.............................................................:::::.....................................................................................................:)"
      - "  (:..............................................................:::......................................................................................................:)"
      - "  (:...............................................................:...........:...............:...............:...............:...............:...............:...........:)"
      - "  (:...........................................................................::..............::..............::..............::..............::..............::..........:)"
      - "  (:..................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)"
      - "  (:...........................................................................::..............::..............::..............::..............::..............::..........:)"
      - "  (:...........................................................................:...............:...............:...............:...............:...............:...........:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    code: ""
    stanza: 1295
  - 
    role: "code"
    lines: 
      - "equal (cos_nor_gate) (distill-circuit (cos_nor_image));"
    code: "2100032210101101033221010100113221010110113332233"
    stanza: 1296
  - 
    role: "gate"
    lines: 
      - ">>> COS_NOR.gate"
      - "3 8 1 0 1"
      - "15 10 1 0 0"
      - "3 6 1 0 1"
      - "1 8 1 0 1"
      - "13 10 1 0 0"
      - "1 6 1 0 1"
      - "11 10 1 0 0"
      - "5 8 1 0 1"
      - "5 6 1 0 1"
      - "7 8 1 0 1"
      - "8 7 0 1 0"
      - "9 10 1 0 0"
      - "8 5 0 1 1"
      - "7 6 1 0 1"
      - "8 9 0 1 0"
      - "19 10 1 0 0"
      - "17 10 1 0 0"
    thumbnail: "COS_NOR.gif"
    page: "COS_NOR.html"
    stanza: 1297
  - 
    role: "file"
    lines: 
      - "== COS_OSC =="
    stanza: 1298
  - 
    role: "comment"
    lines: 
      - "# GATE testing alternate primer based on gates: cos_osc circuit"
      - "# This section contains one or more representations of a circuit"
      - "# constructed using UNLESS gates."
    section_description: "testing alternate primer based on gates: cos_osc circuit"
    section_category: "GATE"
    section_index: 47
    stanza: 1299
  - 
    role: "code"
    lines: 
      - "define cos_osc_gate / vector "
      - "  (vector 4 8 6 8 (true))"
      - "  (vector 6 8 8 8 (true))"
      - "  (vector 8 6 8 8 (true))"
      - "  (vector 10 6 8 6 (true))"
      - "  (vector 8 8 10 8 (false))"
      - "  (vector 12 6 10 6 (false))"
      - "  (vector 10 8 12 8 (false))"
      - "  (vector 12 8 12 6 (false))"
      - "  (vector 12 8 14 8 (false))"
      - "  (vector 14 8 16 8 (false));"
    code: "211013210101110030232100003221000032100321000321103210003221010113332210000321103210003210003210003221010113332210000321000321103210003210003221010113332210000321010321103210003211032210101133322100003210003210003210103210003221011003332210000321100321103210103211032210110033322100003210103210003211003210003221011003332210000321100321000321100321103221011003332210000321100321000321110321000322101100333221000032111032100032100003210003221011003332233"
    stanza: 1300
  - 
    role: "code"
    lines: 
      - "define cos_osc_image / make-image 120 169 / vector "
      - "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:...................................................................:...............:...................................................................................:)"
      - "  (:..................................................................:::::::::::.....::...................................................................................:)"
      - "  (:.................................................................::::::::::::....::::::::::::..........................................................................:)"
      - "  (:..................................................................:::::::::::.....::...................................................................................:)"
      - "  (:...................................................................:...............:...........:.......................................................................:)"
      - "  (:..............................................................:::.............................:::......................................................................:)"
      - "  (:..............................................................:::............................:::::.....................................................................:)"
      - "  (:..............................................................:::..............................:.......................................................................:)"
      - "  (:..............................................................:::..............................:.......................................................................:)"
      - "  (:..............................................................:::..............................:.......................................................................:)"
      - "  (:..............................................................:::..............................:.......................................................................:)"
      - "  (:..............................................................:::..............................:.......................................................................:)"
      - "  (:..............................................................:::..............................:.......................................................................:)"
      - "  (:..............................................................:::..............................:.......................................................................:)"
      - "  (:.............................................................:::::.............................:.......................................................................:)"
      - "  (:..............................................................:::..............................:.......................................................................:)"
      - "  (:...........................................:...............:...:...........:...............:...............:...............:...........................................:)"
      - "  (:..................................:::::::::::.....:::::::::::..............::..............::..............::..............::..........................................:)"
      - "  (:..................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................:)"
      - "  (:..................................:::::::::::.....:::::::::::..............::..............::..............::..............::..........................................:)"
      - "  (:...........................................:...............:...............:...............:...............:...............:...........................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    code
    stanza: 1301
  - 
    role: "code"
    lines: 
      - "equal (cos_osc_gate) (distill-circuit (cos_osc_image));"
    code: "2100032210101110033221010100113221010111013332233"
    stanza: 1302
  - 
    role: "gate"
    lines: 
      - ">>> COS_OSC.gate"
      - "13 8 1 0 0"
      - "8 7 0 1 1"
      - "15 8 1 0 0"
      - "5 8 1 0 1"
      - "11 8 1 0 0"
      - "9 8 1 0 0"
      - "11 6 -1 0 0"
      - "7 8 1 0 1"
      - "12 7 0 -1 0"
      - "9 6 -1 0 1"
    thumbnail: "COS_OSC.gif"
    page: "COS_OSC.html"
    stanza: 1303
  - 
    role: "file"
    lines: 
      - "== COS_SR =="
    stanza: 1304
  - 
    role: "comment"
    lines: 
      - "# GATE testing alternate primer based on gates: cos_sr circuit"
      - "# This section contains one or more representations of a circuit"
      - "# constructed using UNLESS gates."
    section_description: "testing alternate primer based on gates: cos_sr circuit"
    section_category: "GATE"
    section_index: 48
    stanza: 1305
  - 
    role: "code"
    lines: 
      - "define cos_sr_gate / vector "
      - "  (vector 0 2 2 2 (true))"
      - "  (vector 0 8 2 8 (true))"
      - "  (vector 2 2 4 2 (true))"
      - "  (vector 2 8 4 8 (true))"
      - "  (vector 4 2 6 2 (true))"
      - "  (vector 4 6 6 6 (true))"
      - "  (vector 4 8 6 8 (true))"
      - "  (vector 6 8 6 6 (true))"
      - "  (vector 6 2 8 2 (true))"
      - "  (vector 6 6 8 6 (false))"
      - "  (vector 8 4 8 6 (false))"
      - "  (vector 8 2 10 2 (true))"
      - "  (vector 10 4 8 4 (false))"
      - "  (vector 8 6 10 6 (false))"
      - "  (vector 10 6 10 8 (false))"
      - "  (vector 10 2 12 2 (true))"
      - "  (vector 12 4 10 4 (false))"
      - "  (vector 10 6 12 6 (false))"
      - "  (vector 10 8 12 8 (false))"
      - "  (vector 12 6 12 4 (false))"
      - "  (vector 12 2 14 2 (true))"
      - "  (vector 14 4 12 4 (false))"
      - "  (vector 12 8 14 8 (false))"
      - "  (vector 14 2 14 4 (true))"
      - "  (vector 16 4 14 4 (true))"
      - "  (vector 14 8 16 8 (false))"
      - "  (vector 16 8 18 8 (false))"
      - "  (vector 18 8 20 8 (false));"
    code
    stanza: 1306
  - 
    role: "code"
    lines: 
      - "define cos_sr_image / make-image 88 169 / vector "
      - "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:...........:...............:...............:...............:...............:...............:...............:...........................................................:)"
      - "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................:)"
      - "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................:)"
      - "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................:)"
      - "  (:...........:...............:...............:...............:...............:...............:...............:...........................................................:)"
      - "  (:..............................................................................................................:::......................................................:)"
      - "  (:..............................................................................................................:::......................................................:)"
      - "  (:..............................................................................................................:::......................................................:)"
      - "  (:..............................................................................................................:::......................................................:)"
      - "  (:..............................................................................................................:::......................................................:)"
      - "  (:..............................................................................................................:::......................................................:)"
      - "  (:..............................................................................................................:::......................................................:)"
      - "  (:..............................................................................................................:::......................................................:)"
      - "  (:..............................................................................................................:::......................................................:)"
      - "  (:.............................................................................................................:::::.....................................................:)"
      - "  (:..............................................................................................................:::......................................................:)"
      - "  (:...................................................................:...............:...............:...........:...:...................................................:)"
      - "  (:..................................................................::..............::..............::..............:::::::::::..........................................:)"
      - "  (:.................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::..........................................:)"
      - "  (:..................................................................::..............::..............::..............:::::::::::..........................................:)"
      - "  (:...................................................................:...............:...........:...:...............:...................................................:)"
      - "  (:...............................................................:..............................:::......................................................................:)"
      - "  (:...............................................................:.............................:::::.....................................................................:)"
      - "  (:...............................................................:...............................:.......................................................................:)"
      - "  (:...............................................................:...............................:.......................................................................:)"
      - "  (:...............................................................:...............................:.......................................................................:)"
      - "  (:...............................................................:...............................:.......................................................................:)"
      - "  (:...............................................................:...............................:.......................................................................:)"
      - "  (:...............................................................:...............................:.......................................................................:)"
      - "  (:...............................................................:...............................:.......................................................................:)"
      - "  (:.............................................................:::::.............................:.......................................................................:)"
      - "  (:..............................................................:::..............................:.......................................................................:)"
      - "  (:...........................................:...............:...:...........:...............:...........................................................................:)"
      - "  (:..................................:::::::::::..............::..............::..............::..........................................................................:)"
      - "  (:..................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)"
      - "  (:..................................:::::::::::..............::..............::..............::..........................................................................:)"
      - "  (:...........................................:...:...........:...............:...............:...........................................................................:)"
      - "  (:..............................................:::..............................:.......................................................................................:)"
      - "  (:.............................................:::::.............................:.......................................................................................:)"
      - "  (:..............................................:::..............................:.......................................................................................:)"
      - "  (:..............................................:::..............................:.......................................................................................:)"
      - "  (:..............................................:::..............................:.......................................................................................:)"
      - "  (:..............................................:::..............................:.......................................................................................:)"
      - "  (:..............................................:::..............................:.......................................................................................:)"
      - "  (:..............................................:::..............................:.......................................................................................:)"
      - "  (:..............................................:::..............................:.......................................................................................:)"
      - "  (:..............................................:::............................:::::.....................................................................................:)"
      - "  (:..............................................:::.............................:::......................................................................................:)"
      - "  (:...........:...............:...............:...................................:...........:...............:...............:...............:...............:...........:)"
      - "  (:..:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..............::..........:)"
      - "  (:..::::::::::::....::::::::::::....::::::::::::....................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)"
      - "  (:..:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..............::..........:)"
      - "  (:...........:...............:...............:...............................................:...............:...............:...............:...............:...........:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    code: ""
    stanza: 1307
  - 
    role: "code"
    lines: 
      - "equal (cos_sr_gate) (distill-circuit (cos_sr_image));"
    code: "2100032210101111033221010100113221010111113332233"
    stanza: 1308
  - 
    role: "gate"
    lines: 
      - ">>> COS_SR.gate"
      - "11 2 1 0 1"
      - "13 8 1 0 0"
      - "3 8 1 0 1"
      - "1 2 1 0 1"
      - "1 8 1 0 1"
      - "15 8 1 0 0"
      - "5 8 1 0 1"
      - "9 4 -1 0 0"
      - "11 8 1 0 0"
      - "5 6 1 0 1"
      - "9 2 1 0 1"
      - "15 4 -1 0 1"
      - "10 7 0 1 0"
      - "6 7 0 -1 1"
      - "11 6 1 0 0"
      - "12 5 0 -1 0"
      - "14 3 0 1 1"
      - "13 4 -1 0 0"
      - "9 6 1 0 0"
      - "11 4 -1 0 0"
      - "13 2 1 0 1"
      - "17 8 1 0 0"
      - "7 6 1 0 0"
      - "8 5 0 1 0"
      - "19 8 1 0 0"
      - "5 2 1 0 1"
      - "7 2 1 0 1"
      - "3 2 1 0 1"
    thumbnail: "COS_SR.gif"
    page: "COS_SR.html"
    stanza: 1309
  - 
    role: "file"
    lines: 
      - "== COS_D =="
    stanza: 1310
  - 
    role: "comment"
    lines: 
      - "# GATE testing alternate primer based on gates: cos_d circuit"
      - "# This section contains one or more representations of a circuit"
      - "# constructed using UNLESS gates."
    section_description: "testing alternate primer based on gates: cos_d circuit"
    section_category: "GATE"
    section_index: 49
    stanza: 1311
  - 
    role: "code"
    lines: 
      - "define cos_d_gate / vector "
      - "  (vector 0 2 2 2 (true))"
      - "  (vector 0 6 2 6 (true))"
      - "  (vector 2 2 4 2 (true))"
      - "  (vector 2 6 4 6 (true))"
      - "  (vector 4 2 6 2 (true))"
      - "  (vector 4 6 6 6 (true))"
      - "  (vector 6 2 8 2 (true))"
      - "  (vector 6 6 8 6 (true))"
      - "  (vector 8 2 10 2 (true))"
      - "  (vector 8 6 10 6 (true))"
      - "  (vector 10 6 10 4 (true))"
      - "  (vector 10 10 10 8 (true))"
      - "  (vector 10 2 12 2 (true))"
      - "  (vector 10 4 12 4 (true))"
      - "  (vector 10 6 12 6 (true))"
      - "  (vector 10 8 12 8 (true))"
      - "  (vector 12 10 10 10 (true))"
      - "  (vector 12 0 12 2 (true))"
      - "  (vector 12 2 12 4 (false))"
      - "  (vector 12 6 12 8 (true))"
      - "  (vector 12 10 12 12 (true))"
      - "  (vector 12 4 14 4 (true))"
      - "  (vector 12 8 14 8 (false))"
      - "  (vector 14 10 12 10 (true))"
      - "  (vector 12 12 14 12 (true))"
      - "  (vector 14 0 14 2 (true))"
      - "  (vector 14 2 14 4 (true))"
      - "  (vector 14 4 14 6 (false))"
      - "  (vector 14 6 14 8 (false))"
      - "  (vector 14 8 14 10 (false))"
      - "  (vector 16 10 14 10 (true))"
      - "  (vector 14 12 16 12 (true))"
      - "  (vector 16 12 18 12 (true))"
      - "  (vector 18 12 20 12 (true));"
    code
    stanza: 1312
  - 
    role: "code"
    lines: 
      - "define cos_d_image / make-image 109 169 / vector "
      - "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:..............................................................................................:::.............:::......................................................:)"
      - "  (:..............................................................................................:::.............:::......................................................:)"
      - "  (:..............................................................................................:::.............:::......................................................:)"
      - "  (:..............................................................................................:::.............:::......................................................:)"
      - "  (:..............................................................................................:::.............:::......................................................:)"
      - "  (:..............................................................................................:::.............:::......................................................:)"
      - "  (:..............................................................................................:::.............:::......................................................:)"
      - "  (:..............................................................................................:::.............:::......................................................:)"
      - "  (:..............................................................................................:::.............:::......................................................:)"
      - "  (:.............................................................................................:::::...........:::::.....................................................:)"
      - "  (:..............................................................................................:::.............:::......................................................:)"
      - "  (:...........:...............:...............:...............:...............:...............:...:...............:.......................................................:)"
      - "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)"
      - "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)"
      - "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)"
      - "  (:...........:...............:...............:...............:...............:...............:...........................................................................:)"
      - "  (:...............................................................................................:..............:::......................................................:)"
      - "  (:...............................................................................................:..............:::......................................................:)"
      - "  (:...............................................................................................:..............:::......................................................:)"
      - "  (:...............................................................................................:..............:::......................................................:)"
      - "  (:...............................................................................................:..............:::......................................................:)"
      - "  (:...............................................................................................:..............:::......................................................:)"
      - "  (:...............................................................................................:..............:::......................................................:)"
      - "  (:...............................................................................................:..............:::......................................................:)"
      - "  (:...............................................................................................:..............:::......................................................:)"
      - "  (:.............................................................................................:::::...........:::::.....................................................:)"
      - "  (:..............................................................................................:::.............:::......................................................:)"
      - "  (:...........................................................................................:...:...........:...:.......................................................:)"
      - "  (:..................................................................................:::::::::::.....:::::::::::..........................................................:)"
      - "  (:..................................................................................::::::::::::....::::::::::::.........................................................:)"
      - "  (:..................................................................................:::::::::::.....:::::::::::..........................................................:)"
      - "  (:...............................................................................:...........:...............:...........................................................:)"
      - "  (:..............................................................................:::..............................:.......................................................:)"
      - "  (:.............................................................................:::::.............................:.......................................................:)"
      - "  (:..............................................................................:::..............................:.......................................................:)"
      - "  (:..............................................................................:::..............................:.......................................................:)"
      - "  (:..............................................................................:::..............................:.......................................................:)"
      - "  (:..............................................................................:::..............................:.......................................................:)"
      - "  (:..............................................................................:::..............................:.......................................................:)"
      - "  (:..............................................................................:::..............................:.......................................................:)"
      - "  (:..............................................................................:::..............................:.......................................................:)"
      - "  (:..............................................................................:::............................:::::.....................................................:)"
      - "  (:..............................................................................:::.............................:::......................................................:)"
      - "  (:...........:...............:...............:...............:...............:...............:...................:.......................................................:)"
      - "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)"
      - "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)"
      - "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)"
      - "  (:...........:...............:...............:...............:...............:...............:...........................................................................:)"
      - "  (:..............................................................................................:::..............:.......................................................:)"
      - "  (:..............................................................................................:::..............:.......................................................:)"
      - "  (:..............................................................................................:::..............:.......................................................:)"
      - "  (:..............................................................................................:::..............:.......................................................:)"
      - "  (:..............................................................................................:::..............:.......................................................:)"
      - "  (:..............................................................................................:::..............:.......................................................:)"
      - "  (:..............................................................................................:::..............:.......................................................:)"
      - "  (:..............................................................................................:::..............:.......................................................:)"
      - "  (:..............................................................................................:::..............:.......................................................:)"
      - "  (:.............................................................................................:::::...........:::::.....................................................:)"
      - "  (:..............................................................................................:::.............:::......................................................:)"
      - "  (:...........................................................................................:...:...........:...:.......................................................:)"
      - "  (:..................................................................................:::::::::::..............::..........................................................:)"
      - "  (:..................................................................................::::::::::::....::::::::::::.........................................................:)"
      - "  (:..................................................................................:::::::::::..............::..........................................................:)"
      - "  (:...............................................................................:...........:...............:...........................................................:)"
      - "  (:..............................................................................:::..............................:.......................................................:)"
      - "  (:.............................................................................:::::.............................:.......................................................:)"
      - "  (:..............................................................................:::..............................:.......................................................:)"
      - "  (:..............................................................................:::..............................:.......................................................:)"
      - "  (:..............................................................................:::..............................:.......................................................:)"
      - "  (:..............................................................................:::..............................:.......................................................:)"
      - "  (:..............................................................................:::..............................:.......................................................:)"
      - "  (:..............................................................................:::..............................:.......................................................:)"
      - "  (:..............................................................................:::..............................:.......................................................:)"
      - "  (:..............................................................................:::............................:::::.....................................................:)"
      - "  (:..............................................................................:::.............................:::......................................................:)"
      - "  (:...................................................................................:...............:...........:...:...................................................:)"
      - "  (:..................................................................................:::::::::::.....:::::::::::.....:::::::::::..........................................:)"
      - "  (:.................................................................................::::::::::::....::::::::::::....::::::::::::..........................................:)"
      - "  (:..................................................................................:::::::::::.....:::::::::::.....:::::::::::..........................................:)"
      - "  (:...................................................................................:...............:...............:...................................................:)"
      - "  (:..............................................................................................:::......................................................................:)"
      - "  (:..............................................................................................:::......................................................................:)"
      - "  (:..............................................................................................:::......................................................................:)"
      - "  (:..............................................................................................:::......................................................................:)"
      - "  (:..............................................................................................:::......................................................................:)"
      - "  (:..............................................................................................:::......................................................................:)"
      - "  (:..............................................................................................:::......................................................................:)"
      - "  (:..............................................................................................:::......................................................................:)"
      - "  (:..............................................................................................:::......................................................................:)"
      - "  (:.............................................................................................:::::.....................................................................:)"
      - "  (:..............................................................................................:::......................................................................:)"
      - "  (:...............................................................................................:...........:...............:...............:...............:...........:)"
      - "  (:..................................................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)"
      - "  (:..................................................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)"
      - "  (:..................................................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)"
      - "  (:...........................................................................................................:...............:...............:...............:...........:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:.......................................................................................................................................................................:)"
      - "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    code: ""
    stanza: 1313
  - 
    role: "code"
    lines: 
      - "equal (cos_d_gate) (distill-circuit (cos_d_image));"
    code: "2100032210110000033221010100113221011000013332233"
    stanza: 1314
  - 
    role: "gate"
    lines: 
      - ">>> COS_D.gate"
      - "11 2 1 0 1"
      - "13 8 1 0 0"
      - "15 12 1 0 1"
      - "13 12 1 0 1"
      - "15 10 -1 0 1"
      - "13 10 -1 0 1"
      - "11 10 -1 0 1"
      - "9 2 1 0 1"
      - "11 8 1 0 1"
      - "11 6 1 0 1"
      - "13 4 1 0 1"
      - "11 4 1 0 1"
      - "9 6 1 0 1"
      - "7 6 1 0 1"
      - "5 2 1 0 1"
      - "7 2 1 0 1"
      - "3 2 1 0 1"
      - "12 1 0 1 1"
      - "14 7 0 1 0"
      - "12 3 0 1 0"
      - "14 9 0 1 0"
      - "1 2 1 0 1"
      - "3 6 1 0 1"
      - "1 6 1 0 1"
      - "12 11 0 1 1"
      - "10 5 0 -1 1"
      - "5 6 1 0 1"
      - "14 1 0 1 1"
      - "14 3 0 1 1"
      - "10 9 0 -1 1"
      - "12 7 0 1 1"
      - "14 5 0 1 0"
      - "19 12 1 0 1"
      - "17 12 1 0 1"
    thumbnail: "COS_D.gif"
    page: "COS_D.html"
    stanza: 1315
  - 
    role: "file"
    lines: 
      - "== COS_UnlessProbe =="
    stanza: 1316
  - 
    role: "comment"
    lines: 
      - "# GATE probing networks of unless gates"
    section_description: "probing networks of unless gates"
    section_category: "GATE"
    section_index: 50
    stanza: 1317
  - 
    role: "code"
    lines: 
      - "define set-input /"
      - "  ? circuit /"
      - "  ? index /"
      - "  ? value /"
      - "  assign wire (list-ref (circuit) (index)) "
      - "  (map (? w (if (equal (w) (wire))"
      - "        (vector (list-ref (w) 0)"
      - "            (list-ref (w) 1)"
      - "            (list-ref (w) 2)            "
      - "            (list-ref (w) 3)"
      - "            (value))"
      - "        (w)))"
      - "       (circuit));"
    code: "2110132101100010302321100321001001003023211003210110001130232110032100111113023211103210110010032211111032210010010033221011000113332210101013221100321001113221111322100032210011133221011001003332210000322111110322100111332033221111103221001113321332211111032210011133210332211111032210011133211332210011111333221001113333221001001003332233"
    stanza: 1318
  - 
    role: "code"
    lines: 
      - "define read-output /"
      - "  ? circuit /"
      - "  ? index /"
      - "  assign len (list-length / circuit) /"
      - "  assign wire (list-ref (circuit) / - (- (len) 1) (index)) /"
      - "  list-ref (wire) 4;"
    code: "2110132101100101302321100321001001003023211003210110001130232111032101100110322111101302321001001003302321110321011001003221111103221001001003302321011322101132210110011033213322101100011333023211111032210110010033210032233"
    stanza: 1319
  - 
    role: "code"
    lines: 
      - "define sim /"
      - "  ? circuit / ? steps / ? setter"
      - "  (if (> (steps) 0)"
      - "      (sim (simulate-unless (setter / circuit)) (- (steps) 1) (setter))"
      - "      (circuit));"
    code: "2110132101100111302321100321001001003023211003210110100030232110032101101001322111132211322101101000332033221011001113221001100113221011010013023210010010033322101132210110100033213322101101001333221001001003332233"
    stanza: 1320
  - 
    role: "code"
    lines: 
      - "define smart-sim /"
      - "  ? circuit /"
      - "  ? setter /"
      - "  sim (circuit) (list-length / circuit) (setter);"
    code: "21101321011010103023211003210010010030232110032101101001302321011001113221001001003322111101302321001001003322101101001332233"
    stanza: 1321
  - 
    role: "comment"
    lines: 
      - "# test cos_not gate"
    stanza: 1322
  - 
    role: "code"
    lines: 
      - "define cos_not_harness /"
      - "  ? x /"
      - "  assign c (cos_not_gate) / "
      - "  assign c (smart-sim (c) (? c (set-input (c) 0 (x)))) /"
      - "  read-output (c) 0;"
    code: "2110132101101011302321100321001013023211103211011013221010101003302321110321101101322101101010322110110133221100321101101322101100010322110110133203221001013333302321011001013221101101332032233"
    stanza: 1323
  - 
    role: "code"
    lines: 
      - "= (false) / cos_not_harness / true;"
    code: "2103221011003302321011010113023210101132233"
    stanza: 1324
  - 
    role: "code"
    lines: 
      - "= (true) / cos_not_harness / false;"
    code: "2103221010113302321011010113023210110032233"
    stanza: 1325
  - 
    role: "comment"
    lines: 
      - "# test cos_and gate"
    stanza: 1326
  - 
    role: "code"
    lines: 
      - "define cos_and_harness /"
      - "  ? x / ? y /"
      - "  assign c (cos_and_gate) / "
      - "  assign c (smart-sim (c) (? c (set-input (set-input (c) 0 (x)) 1 (y)))) /"
      - "  read-output (c) 0;"
    code: "21101321011011003023211003210010130232110032100100302321110321101101322101010110330232111032110110132210110101032211011013322110032110110132210110001032210110001032211011013320322100101333213221001003333302321011001013221101101332032233"
    stanza: 1327
  - 
    role: "code"
    lines: 
      - "= (false) / cos_and_harness (false) (false);"
    code: "2103221011003302321011011003221011003322101100332233"
    stanza: 1328
  - 
    role: "code"
    lines: 
      - "= (false) / cos_and_harness (false) (true);"
    code: "2103221011003302321011011003221011003322101011332233"
    stanza: 1329
  - 
    role: "code"
    lines: 
      - "= (false) / cos_and_harness (true) (false);"
    code: "2103221011003302321011011003221010113322101100332233"
    stanza: 1330
  - 
    role: "code"
    lines: 
      - "= (true) / cos_and_harness (true) (true);"
    code: "2103221010113302321011011003221010113322101011332233"
    stanza: 1331
  - 
    role: "comment"
    lines: 
      - "# this code is more awkward than it needs to be -"
      - "# should make circuits mutable"
    stanza: 1332
  - 
    role: "file"
    lines: 
      - "== COS_CommentBase3 =="
    stanza: 1333
  - 
    role: "comment"
    lines: 
      - "# NOTE end of part 3, start of part 4"
      - "# The following parts of the message start"
      - "# to introduce some self-reference into the message"
    section_description: "end of part 3, start of part 4"
    section_category: "NOTE"
    section_index: 51
    stanza: 1334
  - 
    role: "code"
    lines: 
      - "intro part4;"
    code: "203210110110132233"
    stanza: 1335
  - 
    role: "file"
    lines: 
      - "== COS_Message =="
    stanza: 1336
  - 
    role: "comment"
    lines: 
      - "# SELF a mechanism for referring to parts of the message"
    section_description: "a mechanism for referring to parts of the message"
    section_category: "SELF"
    section_index: 52
    stanza: 1337
  - 
    role: "comment"
    lines: 
      - "# Many choices for how to do this."
      - "# Could do it without special machinery by using the"
      - "# standard A-B trick for giving e.g. a Turing machine"
      - "# access to its own description."
      - "# Instead, will simply introduce a \"primer\" function"
      - "# that gives access to every statement made so far "
      - "# (question: should future statements be included? "
      - "# tentatively assume YES: will simplify"
      - "# discussion of creating modified copies of the"
      - "# complete message)."
    stanza: 1338
  - 
    role: "comment"
    lines: 
      - "# For now, assume primer is a list of statements,"
      - "# with each statement being a list in the same"
      - "# form as \"translate\" functions expect."
      - "# This means that there is, for now, no"
      - "# distinction between unary or binary,"
      - "# and the \"/\" structure is expanded."
    stanza: 1339
  - 
    role: "code"
    lines: 
      - "intro primer;"
    code: "203210001132233"
    stanza: 1340
  - 
    role: "comment"
    lines: 
      - "# this line is referred to later - change/move carefully"
    stanza: 1341
  - 
    role: "code"
    lines: 
      - "equal (list-ref (primer) 0) (vector intro 1);"
    code: "210003221111103221000113320332210000320321332233"
    stanza: 1342
  - 
    role: "code"
    lines: 
      - "equal (list-ref (primer) 1) (vector intro 2);"
    code: "2100032211111032210001133213322100003203210332233"
    stanza: 1343
  - 
    role: "code"
    lines: 
      - "equal (list-ref (primer) 2) (vector intro 3);"
    code: "21000322111110322100011332103322100003203211332233"
    stanza: 1344
  - 
    role: "code"
    lines: 
      - "assign idx (list-find (primer) (vector intro primer) (? x 0)) "
      - "    (equal (list-ref (primer) (+ (idx) 1))"
      - "           (vector equal "
      - "               (vector list-ref (vector primer) 0)"
      - "               (vector vector intro 1)));"
    code: "21110321000110322100011132210001133221000032032100011332211003210010132033322100032211111032210001133221010322100011033213332210000321000322100003211111032210000321000113320332210000321000032032133332233"
    stanza: 1345
  - 
    role: "comment"
    lines: 
      - "# Now, we could return to the MUD, simulate an agent A"
      - "# transferring a copy of the primer to another agent B,"
      - "# and then show B making a modified copy of that primer"
      - "# and passing it back to A."
    stanza: 1346
  - 
    role: "comment"
    lines: 
      - "# We could also show agents experimenting with the"
      - "# primer in various ways."
    stanza: 1347
  - 
    role: "file"
    lines: 
      - "== COS_MARK =="
    stanza: 1348
  - 
    role: "comment"
    lines: 
      - "# Message is pretty solid up to this point."
      - "# For testing purposes, useful to save state here to disk,"
      - "# command: DISK-SAVE base"
    stanza: 1349
  - 
    role: "file"
    lines: 
      - "== COS_JavaPrep =="
    stanza: 1350
  - 
    role: "comment"
    lines: 
      - "# JAVA some preparatory work for integrating with Java code"
    section_description: "some preparatory work for integrating with Java code"
    section_category: "JAVA"
    section_index: 53
    stanza: 1351
  - 
    role: "code"
    lines: 
      - "class Object ()"
      - "       (method add-one (lambda (x) (+ (x) 1)))"
      - "       (method unknown (lambda (x) (x)))"
      - "       (method <init>-V (self))"
      - "       (method <init> (self))"
      - "       (method classname Object)"
      - "       (method equals-Object-Z (this ==))"
      - "       (method equals (self equals-Object-Z))"
      - "       (method act (true))"
      - "       (method isobj (true));"
    code: "21101100032101101110323221001001132101101111322110103221001013322101032210010133213333221001001132111000003221101032210010133221001013333221001001132101110000322100110003332210010011321011100013221001100033322100100113211011111321011011103322100100113210111001032211010111321110000133322100100113210111001132210011000321011100103332210010011321011101003221010113332210010011321011101013221010113332233"
    stanza: 1352
  - 
    role: "code"
    lines: 
      - "define java-object / Object;"
    code: "21101321011101103023210110111032233"
    stanza: 1353
  - 
    role: "code"
    lines: 
      - "define act / ? x / true;"
    code: "2110132101110100302321100321001013023210101132233"
    stanza: 1354
  - 
    role: "comment"
    lines: 
      - "#(class java-string ()"
      - "#       (field super (java-object new))"
      - "#       (method classname String)"
      - "#       (method unknown (lambda (x) (super (x)))));"
    stanza: 1355
  - 
    role: "comment"
    lines: 
      - "# inconsistency of various kinds of equality throughout message"
      - "# needs to be cleaned up"
    stanza: 1356
  - 
    role: "code"
    lines: 
      - "class Integer ()"
      - "       (field super (java-object new))"
      - "       (field value (cell new 0))"
      - "       (method <init> (self))"
      - "       (method <init>-V (self))"
      - "       (method <init>-I-V (lambda (v) "
      - "                (begin "
      - "                  (value set (v))"
      - "                  (self))))"
      - "       (method intValue-V (value get))"
      - "       (method intValue (self intValue-V))"
      - "       (method equals-Object-Z (lambda (o) (if (= (o classname) Integer)"
      - "                           (= (value get) (o value get))"
      - "                           (false))))"
      - "       (method equals (self equals-Object-Z))"
      - "       (method get (value get))"
      - "       (method set (lambda(x)"
      - "             (value set"
      - "                (if (number? / x)"
      - "                (x)"
      - "                (x intValue)))))"
      - "       (method classname Integer)"
      - "       (method unknown (lambda (x) (super (x))));"
    code
    stanza: 1357
  - 
    role: "comment"
    lines: 
      - "# string is basically the same as an integer"
    stanza: 1358
  - 
    role: "code"
    lines: 
      - "class String ()"
      - "       (field super (java-object new))"
      - "       (field value (cell new 0))"
      - "       (method <init> (self))"
      - "       (method <init>-V (self))"
      - "       (method <init>-String-V (lambda (v) "
      - "                 (begin "
      - "                   (value set (v value get))"
      - "                   (self))))"
      - "       (method int-init (lambda (x) "
      - "              (begin "
      - "                (value set (x))"
      - "                (self))))"
      - "       (method intValue-V (value get))"
      - "       (method intValue (self intValue-V))"
      - "       (method get (value get))"
      - "       (method set (lambda(x)"
      - "             (value set"
      - "                (if (number? / x)"
      - "                (x)"
      - "                (x intValue)))))"
      - "       (method equals-Object-Z (lambda (o) (if (= (o classname) String)"
      - "                           (= (value get) (o value get))"
      - "                           (false))))"
      - "       (method equals (self equals-Object-Z))"
      - "       (method classname String)"
      - "       (method unknown (lambda (x) (super (x))));"
    code
    stanza: 1359
  - 
    role: "comment"
    lines: 
      - "# will need to install class hierarchy, just hardcode a few things for now"
    stanza: 1360
  - 
    role: "code"
    lines: 
      - "define java"
      - "  (? x / ? y "
      - "     (cond ((= (y) String) (String))"
      - "       ((= (y) Object) (java-object))"
      - "       ((= (y) Integer) (Integer))"
      - "       (java-object)));"
    code: "2110132110000000322110032100101302321100321001003221011010132221032210010033210111110133221011111013332221032210010033210110111033221011101103332221032210010033210111011133221011101113332210111011033332233"
    stanza: 1361
  - 
    role: "code"
    lines: 
      - "(java util String) new isobj;"
    code: "221100000003211000000132101111101332110010003210111010132233"
    stanza: 1362
  - 
    role: "code"
    lines: 
      - "= ((java util String) new add-one 15) 16;"
    code: "2103222110000000321100000013210111110133211001000321011011113211113321000032233"
    stanza: 1363
  - 
    role: "code"
    lines: 
      - "class java-numeric ()"
      - "       (field super (java-object new))"
      - "       (method unknown (lambda (x) (super (x))))"
      - "       (field java-content (cell new 0))"
      - "       (method get (java-content get))"
      - "       (method init (lambda (v)"
      - "              (begin"
      - "            (self set (v))"
      - "            (self))))"
      - "       (method set (lambda (v) (java-content set (v))));"
    code: "211011000321100000103232211011101321100101132210111011032110010003332210010011321110000032211010322100101332211001011322100101333332211011101321100000113221110011132110010003203332210010011321110101032211000001132111010103332210010011321100001003221101032210101101332210000000322100110003211101011322101011013332210011000333332210010011321110101132211010322101011013322110000011321110101132210101101333332233"
    stanza: 1364
  - 
    role: "code"
    lines: 
      - "define byte (java-numeric);"
    code: "2110132110000101322110000010332233"
    stanza: 1365
  - 
    role: "code"
    lines: 
      - "define char (java-numeric);"
    code: "2110132110000110322110000010332233"
    stanza: 1366
  - 
    role: "code"
    lines: 
      - "define double (java-numeric);"
    code: "2110132110000111322110000010332233"
    stanza: 1367
  - 
    role: "code"
    lines: 
      - "define float (java-numeric);"
    code: "2110132110001000322110000010332233"
    stanza: 1368
  - 
    role: "code"
    lines: 
      - "define int (java-numeric);"
    code: "211013210101110322110000010332233"
    stanza: 1369
  - 
    role: "code"
    lines: 
      - "define long (java-numeric);"
    code: "2110132110001001322110000010332233"
    stanza: 1370
  - 
    role: "code"
    lines: 
      - "define short (java-numeric);"
    code: "2110132110001010322110000010332233"
    stanza: 1371
  - 
    role: "code"
    lines: 
      - "define boolean (java-numeric);"
    code: "2110132110001011322110000010332233"
    stanza: 1372
  - 
    role: "code"
    lines: 
      - "define void (java-numeric);"
    code: "2110132110001100322110000010332233"
    stanza: 1373
  - 
    role: "code"
    lines: 
      - "define java-test1 (int new);"
    code: "2110132110001101322101011103211001000332233"
    stanza: 1374
  - 
    role: "code"
    lines: 
      - "java-test1 set 15;"
    code: "2110001101321110101132111132233"
    stanza: 1375
  - 
    role: "code"
    lines: 
      - "= 15 (java-test1 get);"
    code: "2103211113221100011013211101010332233"
    stanza: 1376
  - 
    role: "code"
    lines: 
      - "define java-test2 (int new init 17);"
    code: "2110132110001110322101011103211001000321100001003210001332233"
    stanza: 1377
  - 
    role: "code"
    lines: 
      - "= 17 (java-test2 get);"
    code: "21032100013221100011103211101010332233"
    stanza: 1378
  - 
    role: "code"
    lines: 
      - "define state-machine-test1"
      - "  (? x"
      - "     (cond ((= (x) 1) 20)"
      - "       ((= (x) 2) 40)"
      - "       ((= (x) 3) 60)"
      - "       0));"
    code: "21101321100011113221100321001013221011010132221032210010133213321010033222103221001013321033210100033222103221001013321133211110033203332233"
    stanza: 1379
  - 
    role: "code"
    lines: 
      - "= (state-machine-test1 3) 60;"
    code: "210322110001111321133211110032233"
    stanza: 1380
  - 
    role: "comment"
    lines: 
      - "# really ought to go back and be clear about eager/laziness issues"
    stanza: 1381
  - 
    role: "code"
    lines: 
      - "define state-machine-test2"
      - "  (? x"
      - "     (cond ((= (x) 1) (java-test1 set 20))"
      - "       ((= (x) 2) (java-test1 set 40))"
      - "       ((= (x) 3) (java-test1 set 60))"
      - "       0));"
    code: "21101321100100003221100321001013221011010132221032210010133213322110001101321110101132101003332221032210010133210332211000110132111010113210100033322210322100101332113322110001101321110101132111100333203332233"
    stanza: 1382
  - 
    role: "code"
    lines: 
      - "state-machine-test2 2;"
    code: "2110010000321032233"
    stanza: 1383
  - 
    role: "code"
    lines: 
      - "= (java-test1 get) 40;"
    code: "210322110001101321110101033210100032233"
    stanza: 1384
  - 
    role: "code"
    lines: 
      - "define compare-object-reference"
      - "  (lambda (o1 o2)"
      - "    (if (number? / o1)"
      - "    (number? / o2)"
      - "    (= (o1 unique-id) (o2 unique-id))));"
    code: "2110132110010001322110103221100100103211001001133221111322110003023211001001033221100030232110010011332210322110010010321101110033221100100113211011100333332233"
    stanza: 1385
  - 
    role: "code"
    lines: 
      - "define jvm-maker"
      - "  (lambda (vars stack pc ret)"
      - "    (? op"
      - "     (begin"
      - "       (pc set (+ (pc get) 1)) /"
      - "     cond ((= (op) new)"
      - "        (lambda (type)"
      - "          (stack-push (stack) ((type) new))))"
      - "       ((= (op) dup)"
      - "        (stack-push (stack) (stack-peek (stack))))"
      - "       ((= (op) checkcast)"
      - "        (lambda (t)"
      - "          1))"
      - "       ((or (= (op) astore) (= (op) istore))"
      - "        (lambda (index)"
      - "          (vars set (hash-add (vars get) (index) (stack-pop (stack))))))"
      - "       ((or (= (op) aload) (= (op) iload))"
      - "        (lambda (index)"
      - "          (stack-push (stack) (hash-ref (vars get) (index)))))"
      - "       ((or (= (op) iconst) (= (op) ldc))"
      - "        (lambda (val)"
      - "          (stack-push (stack) (val))))"
      - "       ((= (op) aconst_null)"
      - "        (stack-push (stack) 0))"
      - "       ((= (op) instanceof)"
      - "        (lambda (t)"
      - "          (stack-push "
      - "           (stack)"
      - "           (not / number? / (stack-pop / stack) (t new classname)))))"
      - "       ((= (op) getfield)"
      - "        (lambda (key ignore)"
      - "          (stack-push (stack) ((stack-pop (stack)) (key) get))))"
      - "       ((= (op) putfield)"
      - "        (lambda (key ignore)"
      - "          (let ((val (stack-pop (stack))))"
      - "        ((stack-pop (stack)) (key) set (val)))))"
      - "       ((= (op) imul)"
      - "        (let ((v2 (stack-pop (stack))))"
      - "          (let ((v1 (stack-pop (stack))))"
      - "        (stack-push (stack)"
      - "                (* (v1) (v2))))))"
      - "       ((= (op) iadd)"
      - "        (let ((v2 (stack-pop (stack))))"
      - "          (let ((v1 (stack-pop (stack))))"
      - "        (stack-push (stack)"
      - "                (+ (v1) (v2))))))"
      - "       ((= (op) isub)"
      - "        (let ((v2 (stack-pop (stack))))"
      - "          (let ((v1 (stack-pop (stack))))"
      - "        (stack-push (stack)"
      - "                (- (v1) (v2))))))"
      - "       ((= (op) goto)"
      - "        (lambda (x)"
      - "          (pc set (x))))"
      - "       ((= (op) iflt)"
      - "        (lambda (x)"
      - "          (if (< (stack-pop (stack)) 0)"
      - "          (pc set (x))"
      - "          0)))"
      - "       ((= (op) ifle)"
      - "        (lambda (x)"
      - "          (if (< (stack-pop (stack)) 1)"
      - "          (pc set (x))"
      - "          0)))"
      - "       ((= (op) ifgt)"
      - "        (lambda (x)"
      - "          (if (> (stack-pop (stack)) 0)"
      - "          (pc set (x))"
      - "          0)))"
      - "       ((= (op) ifge)"
      - "        (lambda (x)"
      - "          (if (>= (stack-pop (stack)) 0)"
      - "          (pc set (x))"
      - "          0)))"
      - "       ((= (op) ifne)"
      - "        (lambda (x)"
      - "          (if (not (= (stack-pop (stack)) 0))"
      - "          (pc set (x))"
      - "          0)))"
      - "       ((= (op) ifeq)"
      - "        (lambda (x)"
      - "          (if (= (stack-pop (stack)) 0)"
      - "          (pc set (x))"
      - "          0)))"
      - "       ((= (op) if_icmpne)"
      - "        (let ((v2 (stack-pop (stack))))"
      - "          (let ((v1 (stack-pop (stack))))"
      - "        (lambda (x)"
      - "          (if (not (= (v1) (v2)))"
      - "              (pc set (x))"
      - "              0)))))"
      - "       ((= (op) if_icmpeq)"
      - "        (let ((v2 (stack-pop (stack))))"
      - "          (let ((v1 (stack-pop (stack))))"
      - "        (lambda (x)"
      - "          (if (= (v1) (v2))"
      - "              (pc set (x))"
      - "              0)))))"
      - "       ((= (op) if_acmpne)"
      - "        (let ((v2 (stack-pop (stack))))"
      - "          (let ((v1 (stack-pop (stack))))"
      - "        (lambda (x)"
      - "          (if (not (compare-object-reference (v1) (v2)))"
      - "              (pc set (x))"
      - "              0)))))"
      - "       ((= (op) if_acmpeq)"
      - "        (let ((v2 (stack-pop (stack))))"
      - "          (let ((v1 (stack-pop (stack))))"
      - "        (lambda (x)"
      - "          (if (compare-object-reference (v1) (v2))"
      - "              (pc set (x))"
      - "              0)))))"
      - "       ((= (op) if_icmpge)"
      - "        (let ((v2 (stack-pop (stack))))"
      - "          (let ((v1 (stack-pop (stack))))"
      - "        (lambda (x)"
      - "          (if (>= (v1) (v2))"
      - "              (pc set (x))"
      - "              0)))))"
      - "       ((= (op) if_icmpgt)"
      - "        (let ((v2 (stack-pop (stack))))"
      - "          (let ((v1 (stack-pop (stack))))"
      - "        (lambda (x)"
      - "          (if (> (v1) (v2))"
      - "              (pc set (x))"
      - "              0)))))"
      - "       ((= (op) if_icmple)"
      - "        (let ((v2 (stack-pop (stack))))"
      - "          (let ((v1 (stack-pop (stack))))"
      - "        (lambda (x)"
      - "          (if (<= (v1) (v2))"
      - "              (pc set (x))"
      - "              0)))))"
      - "       ((= (op) if_icmplt)"
      - "        (let ((v2 (stack-pop (stack))))"
      - "          (let ((v1 (stack-pop (stack))))"
      - "        (lambda (x)"
      - "          (if (< (v1) (v2))"
      - "              (pc set (x))"
      - "              0)))))"
      - "       ((= (op) ifnull)"
      - "        (lambda (x)"
      - "          (if (number? / stack-pop (stack))"
      - "          (pc set (x))"
      - "          0)))"
      - "       ((= (op) ifnonnull)"
      - "        (lambda (x)"
      - "          (if (not (number? / stack-pop (stack)))"
      - "          (pc set (x))"
      - "          0)))"
      - "       ((= (op) return)"
      - "        (begin (ret set (hash-ref (vars get) 0))"
      - "           (pc set -1)))"
      - "       ((= (op) ireturn)"
      - "        (begin (ret set (stack-pop (stack)))"
      - "           (pc set -1)))"
      - "       ((= (op) areturn)"
      - "        (begin (ret set (stack-pop (stack)))"
      - "           (pc set -1)))"
      - "       ((= (op) goto)"
      - "        (lambda (target)"
      - "          (pc set (target))))"
      - "       ((= (op) invokevirtual)"
      - "        (lambda (target m n)"
      - "          (let ((result (stack-call (stack) (target) (m))))"
      - "        (if (= (n) 1)"
      - "            (stack-push (stack) (result))"
      - "            0))))"
      - "       ((= (op) invokeinterface)"
      - "        (lambda (target m n ignore)"
      - "          (let ((result (stack-call (stack) (target) (m))))"
      - "        (if (= (n) 1)"
      - "            (stack-push (stack) (result))"
      - "            0))))"
      - "       ((= (op) invokespecial)"
      - "        (lambda (target m n)"
      - "          (let ((result (stack-call-special (stack) "
      - "                        (hash-ref (vars get) 0)"
      - "                        (target) "
      - "                        (m))))"
      - "        (if (= (n) 1)"
      - "            (stack-push (stack) (result))"
      - "            0))))"
      - "       0)));"
    code
    stanza: 1386
  - 
    role: "code"
    lines: 
      - "define stack-call"
      - "  (lambda (stack target ct)"
      - "    (if (= (ct) 0)"
      - "    ((stack-pop (stack)) (target))"
      - "    (let ((arg (stack-pop (stack))))"
      - "      ((stack-call (stack) (target) (- (ct) 1)) (arg)))));"
    code: "21101321110001013221101032211001011032111000010321110010013322111132210322111001001332033222110100000322110010110333221110000103332210011013222111001010322110100000322110010110333332221110001013221100101103322111000010332210113221110010013321333221110010103333332233"
    stanza: 1387
  - 
    role: "code"
    lines: 
      - "define stack-call-special"
      - "  (lambda (stack self target ct)"
      - "    (if (= (ct) 0)"
      - "    (let ((act (stack-pop / stack)))"
      - "      (if (act == (self))"
      - "          (act super (target))"
      - "          (act (target))))"
      - "    (let ((arg (stack-pop (stack))))"
      - "      ((stack-call-special (stack) (self) (target) (- (ct) 1)) (arg)))));"
    code: "211013211100100032211010322110010110321001100032111000010321110010013322111132210322111001001332033221001101322210111010032211010000030232110010110333322111132210111010032111000013221001100033322101110100321100101132211100001033322101110100322111000010333332210011013222111001010322110100000322110010110333332221110010003221100101103322100110003322111000010332210113221110010013321333221110010103333332233"
    stanza: 1388
  - 
    role: "code"
    lines: 
      - "define stack-push"
      - "  (lambda (stack x)"
      - "    (stack set (prepend (x) (stack get))));"
    code: "211013211001101032211010322110010110321001013322110010110321110101132211111132210010133221100101103211101010333332233"
    stanza: 1389
  - 
    role: "code"
    lines: 
      - "define stack-pop"
      - "  (lambda (stack)"
      - "    (let ((v (head (stack get))))"
      - "      (begin"
      - "    (stack set (tail (stack get)))"
      - "    (v))));"
    code: "2110132110100000322110103221100101103322100110132221010110132211101032211001011032111010103333322100000003221100101103211101011322111100322110010110321110101033332210101101333332233"
    stanza: 1390
  - 
    role: "code"
    lines: 
      - "define stack-peek"
      - "  (lambda (stack)"
      - "    (head (stack get)));"
    code: "2110132110011100322110103221100101103322111010322110010110321110101033332233"
    stanza: 1391
  - 
    role: "code"
    lines: 
      - "define stack-test1 (cell new (vector 5 3 1));"
    code: "2110132111001011322111001113211001000322100003210132113213332233"
    stanza: 1392
  - 
    role: "code"
    lines: 
      - "= (stack-pop (stack-test1)) 5;"
    code: "210322110100000322111001011333210132233"
    stanza: 1393
  - 
    role: "code"
    lines: 
      - "= (stack-peek (stack-test1)) 3;"
    code: "21032211001110032211100101133321132233"
    stanza: 1394
  - 
    role: "code"
    lines: 
      - "= (stack-pop (stack-test1)) 3;"
    code: "21032211010000032211100101133321132233"
    stanza: 1395
  - 
    role: "code"
    lines: 
      - "stack-push (stack-test1) 7;"
    code: "211001101032211100101133211132233"
    stanza: 1396
  - 
    role: "code"
    lines: 
      - "= (stack-pop (stack-test1)) 7;"
    code: "210322110100000322111001011333211132233"
    stanza: 1397
  - 
    role: "code"
    lines: 
      - "define vars-test1 (cell new (hash-null));"
    code: "2110132111001100322111001113211001000322100001013332233"
    stanza: 1398
  - 
    role: "code"
    lines: 
      - "define pc-test1 (cell new 0);"
    code: "2110132111001101322111001113211001000320332233"
    stanza: 1399
  - 
    role: "code"
    lines: 
      - "define ret-test1 (cell new 0);"
    code: "2110132111001110322111001113211001000320332233"
    stanza: 1400
  - 
    role: "code"
    lines: 
      - "define test-jvm (jvm-maker (vars-test1) (stack-test1) (pc-test1) (ret-test1));"
    code: "21101321110011113221100101003221110011003322111001011332211100110133221110011103332233"
    stanza: 1401
  - 
    role: "code"
    lines: 
      - "stack-push (stack-test1) 4;"
    code: "211001101032211100101133210032233"
    stanza: 1402
  - 
    role: "code"
    lines: 
      - "test-jvm dup;"
    code: "21110011113211001101132233"
    stanza: 1403
  - 
    role: "code"
    lines: 
      - "= (stack-pop (stack-test1)) 4;"
    code: "210322110100000322111001011333210032233"
    stanza: 1404
  - 
    role: "code"
    lines: 
      - "= (stack-pop (stack-test1)) 4;"
    code: "210322110100000322111001011333210032233"
    stanza: 1405
  - 
    role: "code"
    lines: 
      - "stack-push (stack-test1) 66;"
    code: "2110011010322111001011332100001032233"
    stanza: 1406
  - 
    role: "code"
    lines: 
      - "stack-push (stack-test1) 77;"
    code: "2110011010322111001011332100110132233"
    stanza: 1407
  - 
    role: "code"
    lines: 
      - "test-jvm astore 3;"
    code: "211100111132110011110321132233"
    stanza: 1408
  - 
    role: "code"
    lines: 
      - "= (stack-pop (stack-test1)) 66;"
    code: "2103221101000003221110010113332100001032233"
    stanza: 1409
  - 
    role: "code"
    lines: 
      - "test-jvm aload 3;"
    code: "211100111132110100001321132233"
    stanza: 1410
  - 
    role: "code"
    lines: 
      - "= (stack-pop (stack-test1)) 77;"
    code: "2103221101000003221110010113332100110132233"
    stanza: 1411
  - 
    role: "code"
    lines: 
      - "class test-class ()"
      - "       (field x ((int) new))"
      - "       (field y ((int) new));"
    code: "2110110003211101000032322110111013210010132221010111033211001000333221101110132100100322210101110332110010003332233"
    stanza: 1412
  - 
    role: "code"
    lines: 
      - "define test-this (test-class new);"
    code: "21101321110100013221110100003211001000332233"
    stanza: 1413
  - 
    role: "code"
    lines: 
      - "test-this x set 5;"
    code: "21110100013210010132111010113210132233"
    stanza: 1414
  - 
    role: "code"
    lines: 
      - "= (test-this x get) 5;"
    code: "21032211101000132100101321110101033210132233"
    stanza: 1415
  - 
    role: "code"
    lines: 
      - "stack-push (stack-test1) (test-this);"
    code: "21100110103221110010113322111010001332233"
    stanza: 1416
  - 
    role: "code"
    lines: 
      - "= ((stack-pop (stack-test1)) x get) 5;"
    code: "21032221101000003221110010113332100101321110101033210132233"
    stanza: 1417
  - 
    role: "code"
    lines: 
      - "stack-push (stack-test1) (test-this);"
    code: "21100110103221110010113322111010001332233"
    stanza: 1418
  - 
    role: "code"
    lines: 
      - "test-jvm astore 0;"
    code: "21110011113211001111032032233"
    stanza: 1419
  - 
    role: "code"
    lines: 
      - "test-jvm aload 0;"
    code: "21110011113211010000132032233"
    stanza: 1420
  - 
    role: "code"
    lines: 
      - "test-jvm getfield x (int);"
    code: "2111001111321101001113210010132210101110332233"
    stanza: 1421
  - 
    role: "code"
    lines: 
      - "= (stack-pop (stack-test1)) 5;"
    code: "210322110100000322111001011333210132233"
    stanza: 1422
  - 
    role: "code"
    lines: 
      - "test-jvm aload 0;"
    code: "21110011113211010000132032233"
    stanza: 1423
  - 
    role: "code"
    lines: 
      - "test-jvm iconst 15;"
    code: "21110011113211010001132111132233"
    stanza: 1424
  - 
    role: "code"
    lines: 
      - "test-jvm putfield y (int);"
    code: "2111001111321101010013210010032210101110332233"
    stanza: 1425
  - 
    role: "code"
    lines: 
      - "= (test-this y get) 15;"
    code: "210322111010001321001003211101010332111132233"
    stanza: 1426
  - 
    role: "code"
    lines: 
      - "stack-push (stack-test1) 7;"
    code: "211001101032211100101133211132233"
    stanza: 1427
  - 
    role: "code"
    lines: 
      - "stack-push (stack-test1) 10;"
    code: "2110011010322111001011332101032233"
    stanza: 1428
  - 
    role: "code"
    lines: 
      - "test-jvm imul;"
    code: "21110011113211010101032233"
    stanza: 1429
  - 
    role: "code"
    lines: 
      - "test-jvm ireturn;"
    code: "21110011113211100000032233"
    stanza: 1430
  - 
    role: "code"
    lines: 
      - "= (ret-test1 get) 70;"
    code: "2103221110011103211101010332100011032233"
    stanza: 1431
  - 
    role: "code"
    lines: 
      - "define state-machine-helper /"
      - "  ? at /"
      - "  lambda (vars stack machine) /"
      - "  let ((pc (cell new (at)))"
      - "       (ret (cell new (true)))) /"
      - "  let ((jvm (jvm-maker (vars) (stack) (pc) (ret))))"
      - "  (begin"
      - "    (machine (jvm) (pc get))"
      - "    (if (= (pc get) -1)"
      - "    (ret get)"
      - "    (state-machine-helper (pc get) (vars) (stack) (machine))));"
    code: "211013211101001030232110032111010011302321101032211001010132110010110321010000133023210011013222110010111322111001113211001000322111010011333322111000322111001113211001000322101011333330232100110132221110101003221100101003221100101013322110010110332211001011133221110003333322100000003221010000132211101010033221100101113211101010333221111322103221100101113211101010330032211100032111010103322111010010322110010111321110101033221100101013322110010110332210100001333332233"
    stanza: 1432
  - 
    role: "code"
    lines: 
      - "define state-machine"
      - "  (state-machine-helper 0);"
    code: "2110132111010101322111010010320332233"
    stanza: 1433
  - 
    role: "code"
    lines: 
      - "stack-push (stack-test1) 10;"
    code: "2110011010322111001011332101032233"
    stanza: 1434
  - 
    role: "code"
    lines: 
      - "stack-push (stack-test1) 33;"
    code: "211001101032211100101133210000132233"
    stanza: 1435
  - 
    role: "code"
    lines: 
      - "= (state-machine (vars-test1) (stack-test1) / ? jvm / ? x"
      - "          (cond ((= (x) 0) (jvm istore 4))"
      - "            ((= (x) 1) (jvm iload 4))"
      - "            (jvm ireturn)))"
      - "   33;"
    code: "210322111010101322111001100332211100101133023211003211101010030232110032100101322101101013222103221001013320332211101010032110011111321003332221032210010133213322111010100321101000103210033322111010100321110000003333210000132233"
    stanza: 1436
  - 
    role: "code"
    lines: 
      - "stack-push (stack-test1) 10;"
    code: "2110011010322111001011332101032233"
    stanza: 1437
  - 
    role: "code"
    lines: 
      - "define bytecode-test-mul"
      - "  (lambda (arg0 arg1) /"
      - "      let ((vars / cell new / make-hash / vector (pair 0 0) (pair 1 (arg0)) (pair 2 (arg1)))"
      - "           (stack / cell new / vector)) /"
      - "           state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "           ((= (x) 0) (jvm iload 1))"
      - "           ((= (x) 1) (jvm iload 2))"
      - "           ((= (x) 2) (jvm imul))"
      - "           ((= (x) 3) (jvm ireturn))"
      - "           (jvm return));"
    code
    stanza: 1438
  - 
    role: "code"
    lines: 
      - "= (bytecode-test-mul 5 9) 45;"
    code: "2103221110101103210132100133210110132233"
    stanza: 1439
  - 
    role: "file"
    lines: 
      - "== COS_JavaTest =="
    stanza: 1440
  - 
    role: "comment"
    lines: 
      - "# JAVA class translation 'COS_JavaTest'"
      - "# Sun Mar 23 02:45:09 CET 2014"
      - "# Produced by Fritzifier, based on JasminVisitor"
      - "# Using BCEL library to read Java bytecode"
      - "# Here is the original code:"
      - "# public class COS_JavaTest {"
      - "#     private int q = 0;"
      - "#     public int add(int x, int y) {"
      - "#     return x+y;"
      - "#     }"
      - "#     public int sub(int x, int y) {"
      - "#     return x-y;"
      - "#     }"
      - "#     public int mult(int x, int y) {"
      - "#     return x*y;"
      - "#     }"
      - "#     public int addmult(int x, int y, int z) {"
      - "#     return add(x,mult(y,z));"
      - "#     }"
      - "#     public void set(int x) {"
      - "#     q = x;"
      - "#     }"
      - "#     public int get() {"
      - "#     return q;"
      - "#     }"
      - "#     public int fact(int x) {"
      - "#     return (x>0)?(x*fact(sub(x,1))):1;"
      - "#     }"
      - "# }"
      - "# "
    section_description: "class translation 'COS_JavaTest'"
    section_category: "JAVA"
    section_index: 54
    stanza: 1441
  - 
    role: "code"
    lines: 
      - "class COS_JavaTest ()"
      - "   (field super-ref (make-cell 0))"
      - "   (method new (set! (super-ref) ((java lang Object) / this)))"
      - "   (method super (? x / (get! / super-ref) / x))"
      - "   (method unknown (? x / self super / x))"
      - "   (field q ((int) new))"
      - "   (method <init>-V"
      - "     (lambda () /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))"
      - "         ((= (x) 2) (jvm aload 0))"
      - "         ((= (x) 3) (jvm iconst 0))"
      - "         ((= (x) 4) (jvm putfield q (int)))"
      - "         ((= (x) 5) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method <init> (self <init>-V))"
      - ""
      - "   (method add-I-I-I"
      - "     (lambda (arg0 arg1) /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm iload 1))"
      - "         ((= (x) 1) (jvm iload 2))"
      - "         ((= (x) 2) (jvm iadd))"
      - "         ((= (x) 3) (jvm ireturn))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method add (self add-I-I-I))"
      - ""
      - "   (method sub-I-I-I"
      - "     (lambda (arg0 arg1) /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm iload 1))"
      - "         ((= (x) 1) (jvm iload 2))"
      - "         ((= (x) 2) (jvm isub))"
      - "         ((= (x) 3) (jvm ireturn))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method sub (self sub-I-I-I))"
      - ""
      - "   (method mult-I-I-I"
      - "     (lambda (arg0 arg1) /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm iload 1))"
      - "         ((= (x) 1) (jvm iload 2))"
      - "         ((= (x) 2) (jvm imul))"
      - "         ((= (x) 3) (jvm ireturn))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method mult (self mult-I-I-I))"
      - ""
      - "   (method addmult-I-I-I-I"
      - "     (lambda (arg0 arg1 arg2) /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)) (pair 3 (arg2)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm iload 1))"
      - "         ((= (x) 2) (jvm aload 0))"
      - "         ((= (x) 3) (jvm iload 2))"
      - "         ((= (x) 4) (jvm iload 3))"
      - "         ((= (x) 5) (jvm invokevirtual mult-I-I-I 2 1))"
      - "         ((= (x) 6) (jvm invokevirtual add-I-I-I 2 1))"
      - "         ((= (x) 7) (jvm ireturn))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method addmult (self addmult-I-I-I-I))"
      - ""
      - "   (method set-I-V"
      - "     (lambda (arg0) /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)) (pair 1 (arg0)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm iload 1))"
      - "         ((= (x) 2) (jvm putfield q (int)))"
      - "         ((= (x) 3) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method set (self set-I-V))"
      - ""
      - "   (method get-I"
      - "     (lambda () /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm getfield q (int)))"
      - "         ((= (x) 2) (jvm ireturn))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method get (self get-I))"
      - ""
      - "   (method fact-I-I"
      - "     (lambda (arg0) /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)) (pair 1 (arg0)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm iload 1))"
      - "         ((= (x) 1) (jvm ifle 11))"
      - "         ((= (x) 2) (jvm iload 1))"
      - "         ((= (x) 3) (jvm aload 0))"
      - "         ((= (x) 4) (jvm aload 0))"
      - "         ((= (x) 5) (jvm iload 1))"
      - "         ((= (x) 6) (jvm iconst 1))"
      - "         ((= (x) 7) (jvm invokevirtual sub-I-I-I 2 1))"
      - "         ((= (x) 8) (jvm invokevirtual fact-I-I 1 1))"
      - "         ((= (x) 9) (jvm imul))"
      - "         ((= (x) 10) (jvm goto 12))"
      - "         ((= (x) 11) (jvm iconst 1))"
      - "         ((= (x) 12) (jvm ireturn))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method fact (self fact-I-I))"
      - ""
      - " ;"
    code
    stanza: 1442
  - 
    role: "file"
    lines: 
      - "== COS_JavaValidate =="
    stanza: 1443
  - 
    role: "comment"
    lines: 
      - "# JAVA check that automatic conversion is workable"
    section_description: "check that automatic conversion is workable"
    section_category: "JAVA"
    section_index: 55
    stanza: 1444
  - 
    role: "code"
    lines: 
      - "define test1 (COS_JavaTest new);"
    code: "21101321111001113221110110013211001000332233"
    stanza: 1445
  - 
    role: "comment"
    lines: 
      - "# Note that the names of methods include type information."
      - "# This could easily be removed, but is retained so that overloading"
      - "# is possible in the Java code."
      - "# I is integer, V is void.  The last type in the name is the return type."
    stanza: 1446
  - 
    role: "code"
    lines: 
      - "= (test1 mult-I-I-I 15 10) 150;"
    code: "210322111100111321110111113211113210103321001011032233"
    stanza: 1447
  - 
    role: "comment"
    lines: 
      - "# The type information can be safely omitted if there is no ambiguity"
    stanza: 1448
  - 
    role: "code"
    lines: 
      - "= (test1 mult 15 10) 150;"
    code: "2103221111001113211001113211113210103321001011032233"
    stanza: 1449
  - 
    role: "code"
    lines: 
      - "= (test1 addmult-I-I-I-I 4 15 10) 154;"
    code: "21032211110011132111100000321003211113210103321001101032233"
    stanza: 1450
  - 
    role: "code"
    lines: 
      - "begin"
      - "  (test1 set-I-V 87)"
      - "  (= (test1 get-I) 87);"
    code: "21000000032211110011132111100011321010111332210322111100111321111001003321010111332233"
    stanza: 1451
  - 
    role: "code"
    lines: 
      - "= (test1 fact-I-I 0) 1;"
    code: "21032211110011132111100101320332132233"
    stanza: 1452
  - 
    role: "code"
    lines: 
      - "= (test1 fact-I-I 1) 1;"
    code: "21032211110011132111100101321332132233"
    stanza: 1453
  - 
    role: "code"
    lines: 
      - "= (test1 fact-I-I 5) 120;"
    code: "2103221111001113211110010132101332111100032233"
    stanza: 1454
  - 
    role: "comment"
    lines: 
      - "# Yay! testing says this works."
      - "# So structure for bytecode interpretation is in place."
      - "# Very few opcodes actually implemented yet though."
    stanza: 1455
  - 
    role: "file"
    lines: 
      - "== COS_Geo =="
    stanza: 1456
  - 
    role: "comment"
    lines: 
      - "# MUD another simple little text-adventure space"
    section_description: "another simple little text-adventure space"
    section_category: "MUD"
    section_index: 56
    stanza: 1457
  - 
    role: "comment"
    lines: 
      - "# let us try to make a slightly more interesting world"
    stanza: 1458
  - 
    role: "code"
    lines: 
      - "define make-table"
      - "  (lambda (lst)"
      - "    (crunch (? x / ? h / "
      - "           assign name (car / x) /"
      - "           assign obj (cdr / x) /"
      - "           hash-add (h) (name) (obj))"
      - "        (append (hash-null) (lst))));"
    code: "2110132111101000322110103221110113322101011132211003210010130232110032100000113023211103210010010322101103023210010133023211103210111100322101113023210010133023210000010322100000113322100100103322101111003332211010001322100001013322111011333332233"
    stanza: 1459
  - 
    role: "comment"
    lines: 
      - "# note, the quoted strings below are just represented as a big number,"
      - "# nothing special"
    stanza: 1460
  - 
    role: "code"
    lines: 
      - "define geo-map "
      - "  (make-table"
      - "   (map"
      - "    (? name (cons (name) (room new (name))))"
      - "    (vector \"boston\" \"dublin\" \"paris\" \"genoa\")));"
    code: "2110132111101001322111101000322101010132211003210010010322101013221001001033221111001132110010003221001001033333221000032100011001000101110010000100100103210011101100100111001011010010010321100001011100100110100101110011321001101010010001100100001010000133332233"
    stanza: 1461
  - 
    role: "code"
    lines: 
      - "define my-links"
      - "  (map "
      - "   (? entry (assign src (car / entry) /"
      - "            assign dest (cdr / entry) /"
      - "            door new (geo-map / src) (geo-map / dest)))"
      - "   (vector"
      - "    (cons \"boston\" \"dublin\")"
      - "    (cons \"dublin\" \"paris\")"
      - "    (cons \"boston\" \"paris\")"
      - "    (cons \"paris\" \"genoa\")));"
    code
    stanza: 1462
  - 
    role: "code"
    lines: 
      - "define myrobo (robo new);"
    code: "21101321000101113221000011103211001000332233"
    stanza: 1463
  - 
    role: "code"
    lines: 
      - "myrobo set-room (geo-map \"dublin\");"
    code: "2100010111321000001003221111010013210011101100100111001011010010010332233"
    stanza: 1464
  - 
    role: "code"
    lines: 
      - "(equal \"dublin\" / myrobo get-room name);"
    code: "2100032100111011001001110010110100100103023210001011132100000110321001001032233"
    lines_original: 
      - "demo / myrobo get-room name;"
    stanza: 1465
  - 
    role: "code"
    lines: 
      - "myrobo update;"
    code: "21000101113210000100132233"
    stanza: 1466
  - 
    role: "code"
    lines: 
      - "(equal \"paris\" / myrobo get-room name);"
    code: "210003211000010111001001101001011100113023210001011132100000110321001001032233"
    lines_original: 
      - "demo / myrobo get-room name;"
    stanza: 1467
  - 
    role: "code"
    lines: 
      - "myrobo update;"
    code: "21000101113210000100132233"
    stanza: 1468
  - 
    role: "code"
    lines: 
      - "(equal \"genoa\" / myrobo get-room name);"
    code: "2100032100110101001000110010000101000013023210001011132100000110321001001032233"
    lines_original: 
      - "demo / myrobo get-room name;"
    stanza: 1469
  - 
    role: "code"
    lines: 
      - "myrobo update;"
    code: "21000101113210000100132233"
    stanza: 1470
  - 
    role: "code"
    lines: 
      - "(equal \"paris\" / myrobo get-room name);"
    code: "210003211000010111001001101001011100113023210001011132100000110321001001032233"
    lines_original: 
      - "demo / myrobo get-room name;"
    stanza: 1471
  - 
    role: "code"
    lines: 
      - "myrobo update;"
    code: "21000101113210000100132233"
    stanza: 1472
  - 
    role: "code"
    lines: 
      - "(equal \"boston\" / myrobo get-room name);"
    code: "2100032100011001000101110010000100100103023210001011132100000110321001001032233"
    lines_original: 
      - "demo / myrobo get-room name;"
    stanza: 1473
  - 
    role: "code"
    lines: 
      - "myrobo update;"
    code: "21000101113210000100132233"
    stanza: 1474
  - 
    role: "code"
    lines: 
      - "(equal \"dublin\" / myrobo get-room name);"
    code: "2100032100111011001001110010110100100103023210001011132100000110321001001032233"
    lines_original: 
      - "demo / myrobo get-room name;"
    stanza: 1475
  - 
    role: "code"
    lines: 
      - "myrobo update;"
    code: "21000101113210000100132233"
    stanza: 1476
  - 
    role: "code"
    lines: 
      - "(equal \"paris\" / myrobo get-room name);"
    code: "210003211000010111001001101001011100113023210001011132100000110321001001032233"
    lines_original: 
      - "demo / myrobo get-room name;"
    stanza: 1477
  - 
    role: "comment"
    lines: 
      - "# all characters should update together"
    stanza: 1478
  - 
    role: "code"
    lines: 
      - "class world (the-places the-links)"
      - "       (field things (container new))"
      - "       (field names (cell new (hash-null)))"
      - "       (field places (cell new 0))"
      - "       (field links (cell new 0))"
      - "       (method new "
      - "           (begin"
      - "         (places set"
      - "            (make-table"
      - "             (map"
      - "              (? name (cons (name) (room new (name))))"
      - "              (the-places))))"
      - "         (links set"
      - "            (map "
      - "             (? entry (assign src (car / entry) /"
      - "                      assign dest (cdr / entry) /"
      - "                      door new "
      - "                      (places get / src) "
      - "                      (places get / dest)))"
      - "             (the-links)))))"
      - "       (method add (lambda (place name val) "
      - "             (begin"
      - "               (val set-room (places get / place))"
      - "               (val set-name / name)"
      - "               (names set (hash-add (names get)"
      - "                        (name)"
      - "                        (val)))"
      - "               (things add (val)))))"
      - "       (method find (lambda (n) (names get (n) get-room name)))"
      - "       (method reachable (lambda (place)"
      - "               (let ((exits"
      - "                  (select-match (lambda (x) "
      - "                          (instanceof door (x)))"
      - "                        (places get (place) inventory))))"
      - "                 (map (? door (door access-from "
      - "                        (places get / place)"
      - "                        name))"
      - "                  (exits)))))"
      - "       (method update (begin "
      - "            (map (? x (x update)) "
      - "                 (things inventory))"
      - "            (true)));"
    code
    stanza: 1479
  - 
    role: "code"
    lines: 
      - "define geo-world"
      - "  (world new "
      - "     (vector \"boston\" \"dublin\" \"paris\" \"genoa\")"
      - "     (vector"
      - "      (cons \"boston\" \"dublin\")"
      - "      (cons \"dublin\" \"paris\")"
      - "      (cons \"boston\" \"paris\")"
      - "      (cons \"paris\" \"genoa\")));"
    code
    stanza: 1480
  - 
    role: "code"
    lines: 
      - "geo-world add \"dublin\" \"robo1\" (robo new);"
    code: "211111010132110010032100111011001001110010110100100103211011110110001001101111001100013221000011103211001000332233"
    stanza: 1481
  - 
    role: "code"
    lines: 
      - "geo-world add \"genoa\" \"robo2\" (robo new);"
    code: "211111010132110010032100110101001000110010000101000013211011110110001001101111001100103221000011103211001000332233"
    stanza: 1482
  - 
    role: "code"
    lines: 
      - "(equal \"dublin\" / geo-world find \"robo1\");"
    code: "210003210011101100100111001011010010010302321111101013211111001132110111101100010011011110011000132233"
    lines_original: 
      - "demo / geo-world find \"robo1\";"
    stanza: 1483
  - 
    role: "code"
    lines: 
      - "(equal \"genoa\" / geo-world find \"robo2\");"
    code: "210003210011010100100011001000010100001302321111101013211111001132110111101100010011011110011001032233"
    lines_original: 
      - "demo / geo-world find \"robo2\";"
    stanza: 1484
  - 
    role: "code"
    lines: 
      - "geo-world update;"
    code: "21111101013210000100132233"
    stanza: 1485
  - 
    role: "code"
    lines: 
      - "(equal \"paris\" / geo-world find \"robo1\");"
    code: "21000321100001011100100110100101110011302321111101013211111001132110111101100010011011110011000132233"
    lines_original: 
      - "demo / geo-world find \"robo1\";"
    stanza: 1486
  - 
    role: "code"
    lines: 
      - "(equal \"paris\" / geo-world find \"robo2\");"
    code: "21000321100001011100100110100101110011302321111101013211111001132110111101100010011011110011001032233"
    lines_original: 
      - "demo / geo-world find \"robo2\";"
    stanza: 1487
  - 
    role: "code"
    lines: 
      - "(equal (vector \"paris\" \"dublin\") / geo-world reachable \"boston\");"
    code: "2100032210000321100001011100100110100101110011321001110110010011100101101001001033023211111010132111110100321000110010001011100100001001001032233"
    lines_original: 
      - "demo / geo-world reachable \"boston\";"
    stanza: 1488
  - 
    role: "code"
    lines: 
      - "(equal (vector \"paris\") / geo-world reachable \"genoa\");"
    code: "210003221000032110000101110010011010010111001133023211111010132111110100321001101010010001100100001010000132233"
    lines_original: 
      - "demo / geo-world reachable \"genoa\";"
    stanza: 1489
  - 
    role: "file"
    lines: 
      - "== COS_JList_impl =="
    stanza: 1490
  - 
    role: "comment"
    lines: 
      - "# JAVA native implementation of a Java list, hash classes"
    section_description: "native implementation of a Java list, hash classes"
    section_category: "JAVA"
    section_index: 57
    stanza: 1491
  - 
    role: "code"
    lines: 
      - "define flex-equals"
      - "  (lambda (x y) "
      - "    (if (number? / x)"
      - "    (if (number? / y)"
      - "        (= (x) (y))"
      - "        (false))"
      - "    (if (number? / y)"
      - "        (false)"
      - "        (x equals (y)))));"
    code: "21101321111101103221101032210010132100100332211113221100030232100101332211113221100030232100100332210322100101332210010033322101100333221111322110003023210010033221011003322100101321011100113221001003333332233"
    stanza: 1492
  - 
    role: "code"
    lines: 
      - "define remove-object"
      - "  (lambda (x) "
      - "    (remove-match (lambda (y) "
      - "            (flex-equals (x) (y)))));"
    code: "21101321111101113221101032210010133221011100032211010322100100332211111011032210010133221001003333332233"
    stanza: 1493
  - 
    role: "code"
    lines: 
      - "define contains-object"
      - "  (lambda (x lst)"
      - "    (if (> (list-length / lst) 0)"
      - "    (if (flex-equals (head / lst) (x))"
      - "        (true)"
      - "        (contains-object (x) (tail / lst)))"
      - "    (false)));"
    code: "2110132111111000322110103221001013211101133221111322113221111013023211101133203322111132211111011032211101030232111011332210010133322101011332211111100032210010133221111003023211101133332210110033332233"
    stanza: 1494
  - 
    role: "code"
    lines: 
      - "class COS_JList ()"
      - "       (field super ((java lang Object) new))"
      - "       (method unknown (lambda (x) (super (x))))"
      - "       (field contents (cell new (vector)))"
      - "       (method <init>-V (self))"
      - "       (method <init> (self <init>-V))"
      - "       (method add-Object-V (lambda (x)"
      - "             (contents set (prepend (x) (contents get)))))"
      - "       (method add (self add-Object-V))"
      - "       (method remove-Object-Z (lambda (x)"
      - "            (contents set "
      - "                  (remove-object (x) (contents get)))))"
      - "       (method remove (self remove-Object-Z))"
      - "       (method contains-Object-Z (lambda (x)"
      - "                   (contains-object (x) (contents get))))"
      - "       (method contains (self contains-Object-Z))"
      - "       (method get-I-Object (lambda (x)"
      - "             (list-ref (contents get) (x))))"
      - "       (method get (self get-I-Object))"
      - "       (method iterator-Iterator (COS_JListIterator new (self)))"
      - "       (method iterator (self iterator-Iterator))"
      - "       (method size-V-I (list-length (contents get)))"
      - "       (method size (self size-V-I));"
    code
    stanza: 1495
  - 
    role: "code"
    lines: 
      - "define test1 (COS_JList new);"
    code: "21101321111001113221111110013211001000332233"
    stanza: 1496
  - 
    role: "code"
    lines: 
      - "begin (test1 add-Object-V (test1))"
      - "       (= 1 / test1 size-V-I);"
    code: "21000000032211110011132111111010322111100111333221032130232111100111321000000010332233"
    stanza: 1497
  - 
    role: "code"
    lines: 
      - "test1 == (test1 get-I-Object 0);"
    code: "2111100111321110000132211110011132111111110320332233"
    stanza: 1498
  - 
    role: "code"
    lines: 
      - "class COS_JHashMap ()"
      - "       (field super ((java lang Object) new))"
      - "       (method unknown (lambda (x) (super (x))))"
      - "       (field contents (cell new (? x 0)))"
      - "       (method <init>-V (self))"
      - "       (method <init> (self <init>-V))"
      - "       (method put-Object-Object-V (lambda (x y)"
      - "                     (let ((prev / contents get))"
      - "                       (contents set "
      - "                         (? z "
      - "                            (if (flex-equals (z) (x))"
      - "                            (y)"
      - "                            (prev (z))))))))"
      - "       (method put (self put-Object-Object-V))"
      - "       (method get-Object-Object (lambda (x)"
      - "                   (contents get (x))))"
      - "       (method get (self get-Object-Object));"
    code
    stanza: 1499
  - 
    role: "code"
    lines: 
      - "define test2 (COS_JHashMap new);"
    code: "2110132100000100032210000001003211001000332233"
    stanza: 1500
  - 
    role: "code"
    lines: 
      - "begin (test2 put-Object-Object-V 5 10)"
      - "       (= 10 / test2 get 5);"
    code: "210000000322100000100032100000010132101321010332210321010302321000001000321110101032101332233"
    stanza: 1501
  - 
    role: "file"
    lines: 
      - "== COS_JList =="
    stanza: 1502
  - 
    role: "comment"
    lines: 
      - "# There is Java code for COS_JList available"
    stanza: 1503
  - 
    role: "file"
    lines: 
      - "== COS_JHashMap =="
    stanza: 1504
  - 
    role: "comment"
    lines: 
      - "# There is Java code for COS_JHashMap available"
    stanza: 1505
  - 
    role: "file"
    lines: 
      - "== COS_JList_test =="
    stanza: 1506
  - 
    role: "comment"
    lines: 
      - "# JAVA testing the JList class"
    section_description: "testing the JList class"
    section_category: "JAVA"
    section_index: 58
    stanza: 1507
  - 
    role: "code"
    lines: 
      - "define test1 (COS_JList new);"
    code: "21101321111001113221111110013211001000332233"
    stanza: 1508
  - 
    role: "code"
    lines: 
      - "begin (test1 add-Object-V (test1))"
      - "       (= 1 (test1 size-V-I));"
    code: "2100000003221111001113211111101032211110011133322103213221111001113210000000103332233"
    stanza: 1509
  - 
    role: "code"
    lines: 
      - "(test1 get-I-Object 0) == (test1);"
    code: "221111001113211111111032033211100001322111100111332233"
    stanza: 1510
  - 
    role: "file"
    lines: 
      - "== COS_JListIterator_impl =="
    stanza: 1511
  - 
    role: "comment"
    lines: 
      - "# JAVA basic iterator implementation"
    section_description: "basic iterator implementation"
    section_category: "JAVA"
    section_index: 59
    stanza: 1512
  - 
    role: "code"
    lines: 
      - "class COS_JListIterator (ref)"
      - "       (field pipe (cell new (ref contents get)))"
      - "       (method <init>-V (self))"
      - "       (method <init> (self <init>-V))"
      - "       (method hasNext-Z (> (list-length / pipe get) 0))"
      - "       (method hasNext (self hasNext-Z))"
      - "       (method next (self next-Object))"
      - "       (method next-Object "
      - "           (let ((result (head / pipe get)))"
      - "         (begin "
      - "           (pipe set / tail / pipe get)"
      - "           (result))));"
    code
    stanza: 1513
  - 
    role: "code"
    lines: 
      - "define test1 (COS_JList new);"
    code: "21101321111001113221111110013211001000332233"
    stanza: 1514
  - 
    role: "code"
    lines: 
      - "begin"
      - "  (test1 add 15)"
      - "  (test1 add 72)"
      - "  (test1 add 99)"
      - "  (true);"
    code: "210000000322111100111321100100321111332211110011132110010032100100033221111001113211001003211000113322101011332233"
    stanza: 1515
  - 
    role: "code"
    lines: 
      - "define iter1 (test1 iterator);"
    code: "21101321000001110322111100111321000000001332233"
    stanza: 1516
  - 
    role: "code"
    lines: 
      - "iter1 hasNext;"
    code: "2100000111032100000110032233"
    stanza: 1517
  - 
    role: "code"
    lines: 
      - "(equal 99 / iter1 next);"
    code: "21000321100011302321000001110321010001132233"
    lines_original: 
      - "demo / iter1 next;"
    stanza: 1518
  - 
    role: "code"
    lines: 
      - "iter1 hasNext;"
    code: "2100000111032100000110032233"
    stanza: 1519
  - 
    role: "code"
    lines: 
      - "(equal 72 / iter1 next);"
    code: "21000321001000302321000001110321010001132233"
    lines_original: 
      - "demo / iter1 next;"
    stanza: 1520
  - 
    role: "code"
    lines: 
      - "iter1 hasNext;"
    code: "2100000111032100000110032233"
    stanza: 1521
  - 
    role: "code"
    lines: 
      - "(equal 15 / iter1 next);"
    code: "21000321111302321000001110321010001132233"
    lines_original: 
      - "demo / iter1 next;"
    stanza: 1522
  - 
    role: "code"
    lines: 
      - "not / iter1 hasNext;"
    code: "210030232100000111032100000110032233"
    stanza: 1523
  - 
    role: "file"
    lines: 
      - "== COS_JListIterator =="
    stanza: 1524
  - 
    role: "comment"
    lines: 
      - "# There is Java code for COS_JListIterator available"
    stanza: 1525
  - 
    role: "file"
    lines: 
      - "== COS_JDoor =="
    stanza: 1526
  - 
    role: "comment"
    lines: 
      - "# JAVA class translation 'COS_JDoor'"
      - "# Sun Mar 23 02:45:10 CET 2014"
      - "# Produced by Fritzifier, based on JasminVisitor"
      - "# Using BCEL library to read Java bytecode"
      - "# Here is the original code:"
      - "# "
      - "# public class COS_JDoor {"
      - "#     private COS_JRoom src, dest;"
      - "#     private String src_cmd, dest_cmd;"
      - "# "
      - "#     public COS_JDoor(COS_JRoom src, String src_cmd,"
      - "#              COS_JRoom dest, String dest_cmd) {"
      - "#     this.src = src;"
      - "#     this.dest = dest;"
      - "#     this.src_cmd = src_cmd;"
      - "#     this.dest_cmd = dest_cmd;"
      - "#     src.addDoor(this);"
      - "#     dest.addDoor(this);"
      - "#     }"
      - "# "
      - "#     public COS_JRoom apply(COS_JRoom src, String cmd) {"
      - "#     if (src == this.src) {"
      - "#         if (src_cmd.equals(cmd)) {"
      - "#         return this.dest;"
      - "#         }"
      - "#     }"
      - "#     if (src == this.dest) {"
      - "#         if (dest_cmd.equals(cmd)) {"
      - "#         return this.src;"
      - "#         }"
      - "#     }"
      - "#     return null;"
      - "#     }"
      - "# "
      - "#     public COS_JRoom apply(COS_JRoom src) {"
      - "#     if (src==this.src) {"
      - "#         return this.dest;"
      - "#     }"
      - "#     if (src==this.dest) {"
      - "#         return this.src;"
      - "#     }"
      - "#     return null;"
      - "#     }"
      - "# }"
    section_description: "class translation 'COS_JDoor'"
    section_category: "JAVA"
    section_index: 60
    stanza: 1527
  - 
    role: "code"
    lines: 
      - "class COS_JDoor ()"
      - "   (field super-ref (make-cell 0))"
      - "   (method new (set! (super-ref) ((java lang Object) / this)))"
      - "   (method super (? x / (get! / super-ref) / x))"
      - "   (method unknown (? x / self super / x))"
      - "   (field src (cell new 0))"
      - "   (field dest (cell new 0))"
      - "   (field src_cmd (cell new 0))"
      - "   (field dest_cmd (cell new 0))"
      - "   (method <init>-COS_JRoom-String-COS_JRoom-String-V"
      - "     (lambda (arg0 arg1 arg2 arg3) /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)) (pair 3 (arg2)) (pair 4 (arg3)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))"
      - "         ((= (x) 2) (jvm aload 0))"
      - "         ((= (x) 3) (jvm aload 1))"
      - "         ((= (x) 4) (jvm putfield src (COS_JRoom)))"
      - "         ((= (x) 5) (jvm aload 0))"
      - "         ((= (x) 6) (jvm aload 3))"
      - "         ((= (x) 7) (jvm putfield dest (COS_JRoom)))"
      - "         ((= (x) 8) (jvm aload 0))"
      - "         ((= (x) 9) (jvm aload 2))"
      - "         ((= (x) 10) (jvm putfield src_cmd (java lang String)))"
      - "         ((= (x) 11) (jvm aload 0))"
      - "         ((= (x) 12) (jvm aload 4))"
      - "         ((= (x) 13) (jvm putfield dest_cmd (java lang String)))"
      - "         ((= (x) 14) (jvm aload 1))"
      - "         ((= (x) 15) (jvm aload 0))"
      - "         ((= (x) 16) (jvm invokevirtual addDoor-COS_JDoor-V 1 0))"
      - "         ((= (x) 17) (jvm aload 3))"
      - "         ((= (x) 18) (jvm aload 0))"
      - "         ((= (x) 19) (jvm invokevirtual addDoor-COS_JDoor-V 1 0))"
      - "         ((= (x) 20) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method <init> (self <init>-COS_JRoom-String-COS_JRoom-String-V))"
      - ""
      - "   (method apply-COS_JRoom-String-COS_JRoom"
      - "     (lambda (arg0 arg1) /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 1))"
      - "         ((= (x) 1) (jvm aload 0))"
      - "         ((= (x) 2) (jvm getfield src (COS_JRoom)))"
      - "         ((= (x) 3) (jvm if_acmpne 12))"
      - "         ((= (x) 4) (jvm aload 0))"
      - "         ((= (x) 5) (jvm getfield src_cmd (java lang String)))"
      - "         ((= (x) 6) (jvm aload 2))"
      - "         ((= (x) 7) (jvm invokevirtual equals-Object-Z 1 1))"
      - "         ((= (x) 8) (jvm ifeq 12))"
      - "         ((= (x) 9) (jvm aload 0))"
      - "         ((= (x) 10) (jvm getfield dest (COS_JRoom)))"
      - "         ((= (x) 11) (jvm areturn))"
      - "         ((= (x) 12) (jvm aload 1))"
      - "         ((= (x) 13) (jvm aload 0))"
      - "         ((= (x) 14) (jvm getfield dest (COS_JRoom)))"
      - "         ((= (x) 15) (jvm if_acmpne 24))"
      - "         ((= (x) 16) (jvm aload 0))"
      - "         ((= (x) 17) (jvm getfield dest_cmd (java lang String)))"
      - "         ((= (x) 18) (jvm aload 2))"
      - "         ((= (x) 19) (jvm invokevirtual equals-Object-Z 1 1))"
      - "         ((= (x) 20) (jvm ifeq 24))"
      - "         ((= (x) 21) (jvm aload 0))"
      - "         ((= (x) 22) (jvm getfield src (COS_JRoom)))"
      - "         ((= (x) 23) (jvm areturn))"
      - "         ((= (x) 24) (jvm aconst_null))"
      - "         ((= (x) 25) (jvm areturn))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method apply (self apply-COS_JRoom-String-COS_JRoom))"
      - ""
      - "   (method apply-COS_JRoom-COS_JRoom"
      - "     (lambda (arg0) /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)) (pair 1 (arg0)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 1))"
      - "         ((= (x) 1) (jvm aload 0))"
      - "         ((= (x) 2) (jvm getfield src (COS_JRoom)))"
      - "         ((= (x) 3) (jvm if_acmpne 7))"
      - "         ((= (x) 4) (jvm aload 0))"
      - "         ((= (x) 5) (jvm getfield dest (COS_JRoom)))"
      - "         ((= (x) 6) (jvm areturn))"
      - "         ((= (x) 7) (jvm aload 1))"
      - "         ((= (x) 8) (jvm aload 0))"
      - "         ((= (x) 9) (jvm getfield dest (COS_JRoom)))"
      - "         ((= (x) 10) (jvm if_acmpne 14))"
      - "         ((= (x) 11) (jvm aload 0))"
      - "         ((= (x) 12) (jvm getfield src (COS_JRoom)))"
      - "         ((= (x) 13) (jvm areturn))"
      - "         ((= (x) 14) (jvm aconst_null))"
      - "         ((= (x) 15) (jvm areturn))"
      - "         (jvm return))"
      - "   )"
      - ""
      - " ;"
    code
    stanza: 1528
  - 
    role: "file"
    lines: 
      - "== COS_JThing =="
    stanza: 1529
  - 
    role: "comment"
    lines: 
      - "# JAVA class translation 'COS_JThing'"
      - "# Sun Mar 23 02:45:11 CET 2014"
      - "# Produced by Fritzifier, based on JasminVisitor"
      - "# Using BCEL library to read Java bytecode"
      - "# Here is the original code:"
      - "# "
      - "# public class COS_JThing extends COS_JNamed {"
      - "#     private COS_JRoom location;"
      - "#     private COS_JRoom nextLocation;"
      - "# "
      - "#     public void setRoom(COS_JRoom location) {"
      - "#     if (this.location!=null) {"
      - "#         this.location.removeThing(this);"
      - "#     }"
      - "#     this.location = location;"
      - "#     location.addThing(this);"
      - "#     this.nextLocation = location;"
      - "#     }"
      - "#     "
      - "#     public COS_JRoom getRoom() {"
      - "#     return location;"
      - "#     }"
      - "# "
      - "#     public void setNextRoom(COS_JRoom location) {"
      - "#     nextLocation = location;"
      - "#     }"
      - "# "
      - "#     public void postUpdate() {"
      - "#     if (nextLocation!=location) {"
      - "#         setRoom(nextLocation);"
      - "#     }"
      - "#     }"
      - "# }"
      - "# "
    section_description: "class translation 'COS_JThing'"
    section_category: "JAVA"
    section_index: 61
    stanza: 1530
  - 
    role: "code"
    lines: 
      - "class COS_JThing ()"
      - "   (field super-ref (make-cell 0))"
      - "   (method new (set! (super-ref) ((COS_JNamed) / this)))"
      - "   (method super (? x / (get! / super-ref) / x))"
      - "   (method unknown (? x / self super / x))"
      - "   (field location (cell new 0))"
      - "   (field nextLocation (cell new 0))"
      - "   (method <init>-V"
      - "     (lambda () /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))"
      - "         ((= (x) 2) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method <init> (self <init>-V))"
      - ""
      - "   (method setRoom-COS_JRoom-V"
      - "     (lambda (arg0) /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)) (pair 1 (arg0)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm getfield location (COS_JRoom)))"
      - "         ((= (x) 2) (jvm ifnull 7))"
      - "         ((= (x) 3) (jvm aload 0))"
      - "         ((= (x) 4) (jvm getfield location (COS_JRoom)))"
      - "         ((= (x) 5) (jvm aload 0))"
      - "         ((= (x) 6) (jvm invokevirtual removeThing-COS_JThing-V 1 0))"
      - "         ((= (x) 7) (jvm aload 0))"
      - "         ((= (x) 8) (jvm aload 1))"
      - "         ((= (x) 9) (jvm putfield location (COS_JRoom)))"
      - "         ((= (x) 10) (jvm aload 1))"
      - "         ((= (x) 11) (jvm aload 0))"
      - "         ((= (x) 12) (jvm invokevirtual addThing-COS_JThing-V 1 0))"
      - "         ((= (x) 13) (jvm aload 0))"
      - "         ((= (x) 14) (jvm aload 1))"
      - "         ((= (x) 15) (jvm putfield nextLocation (COS_JRoom)))"
      - "         ((= (x) 16) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method setRoom (self setRoom-COS_JRoom-V))"
      - ""
      - "   (method getRoom-COS_JRoom"
      - "     (lambda () /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm getfield location (COS_JRoom)))"
      - "         ((= (x) 2) (jvm areturn))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method getRoom (self getRoom-COS_JRoom))"
      - ""
      - "   (method setNextRoom-COS_JRoom-V"
      - "     (lambda (arg0) /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)) (pair 1 (arg0)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm aload 1))"
      - "         ((= (x) 2) (jvm putfield nextLocation (COS_JRoom)))"
      - "         ((= (x) 3) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method setNextRoom (self setNextRoom-COS_JRoom-V))"
      - ""
      - "   (method postUpdate-V"
      - "     (lambda () /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm getfield nextLocation (COS_JRoom)))"
      - "         ((= (x) 2) (jvm aload 0))"
      - "         ((= (x) 3) (jvm getfield location (COS_JRoom)))"
      - "         ((= (x) 4) (jvm if_acmpeq 9))"
      - "         ((= (x) 5) (jvm aload 0))"
      - "         ((= (x) 6) (jvm aload 0))"
      - "         ((= (x) 7) (jvm getfield nextLocation (COS_JRoom)))"
      - "         ((= (x) 8) (jvm invokevirtual setRoom-COS_JRoom-V 1 0))"
      - "         ((= (x) 9) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method postUpdate (self postUpdate-V))"
      - ""
      - " ;"
    code
    stanza: 1531
  - 
    role: "file"
    lines: 
      - "== COS_JRoom =="
    stanza: 1532
  - 
    role: "comment"
    lines: 
      - "# JAVA class translation 'COS_JRoom'"
      - "# Sun Mar 23 02:45:12 CET 2014"
      - "# Produced by Fritzifier, based on JasminVisitor"
      - "# Using BCEL library to read Java bytecode"
      - "# Here is the original code:"
      - "# "
      - "# import java.util.Iterator;"
      - "# "
      - "# public class COS_JRoom extends COS_JNamed {"
      - "#     //private COS_JList content = new COS_JList();"
      - "#     //private COS_JList doors = new COS_JList();"
      - "# "
      - "#     private COS_JList content;"
      - "#     private COS_JList doors;"
      - "# "
      - "#     public COS_JRoom() {"
      - "#     content = new COS_JList();"
      - "#     doors = new COS_JList();"
      - "#     }"
      - "# "
      - "#     public COS_JList get() {"
      - "#     return content;"
      - "#     }"
      - "# "
      - "#     public Iterator getDoors() {"
      - "#     return doors.iterator();"
      - "#     }"
      - "# "
      - "#     public void addDoor(COS_JDoor door) {"
      - "#     //System.out.println(\"add door -> \" + getName());"
      - "#     doors.add(door);"
      - "#     }"
      - "# "
      - "#     public void addThing(COS_JThing thing) {"
      - "#     content.add(thing);"
      - "#     }"
      - "# "
      - "#     public void removeThing(COS_JThing thing) {"
      - "#     content.remove(thing);"
      - "#     }"
      - "# }"
    section_description: "class translation 'COS_JRoom'"
    section_category: "JAVA"
    section_index: 62
    stanza: 1533
  - 
    role: "code"
    lines: 
      - "class COS_JRoom ()"
      - "   (field super-ref (make-cell 0))"
      - "   (method new (set! (super-ref) ((COS_JNamed) / this)))"
      - "   (method super (? x / (get! / super-ref) / x))"
      - "   (method unknown (? x / self super / x))"
      - "   (field content (cell new 0))"
      - "   (field doors (cell new 0))"
      - "   (method <init>-V"
      - "     (lambda () /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))"
      - "         ((= (x) 2) (jvm aload 0))"
      - "         ((= (x) 3) (jvm new (COS_JList)))"
      - "         ((= (x) 4) (jvm dup))"
      - "         ((= (x) 5) (jvm invokespecial <init>-V 0 0))"
      - "         ((= (x) 6) (jvm putfield content (COS_JList)))"
      - "         ((= (x) 7) (jvm aload 0))"
      - "         ((= (x) 8) (jvm new (COS_JList)))"
      - "         ((= (x) 9) (jvm dup))"
      - "         ((= (x) 10) (jvm invokespecial <init>-V 0 0))"
      - "         ((= (x) 11) (jvm putfield doors (COS_JList)))"
      - "         ((= (x) 12) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method <init> (self <init>-V))"
      - ""
      - "   (method get-COS_JList"
      - "     (lambda () /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm getfield content (COS_JList)))"
      - "         ((= (x) 2) (jvm areturn))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method get (self get-COS_JList))"
      - ""
      - "   (method getDoors-Iterator"
      - "     (lambda () /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm getfield doors (COS_JList)))"
      - "         ((= (x) 2) (jvm invokevirtual iterator-Iterator 0 1))"
      - "         ((= (x) 3) (jvm areturn))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method getDoors (self getDoors-Iterator))"
      - ""
      - "   (method addDoor-COS_JDoor-V"
      - "     (lambda (arg0) /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)) (pair 1 (arg0)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm getfield doors (COS_JList)))"
      - "         ((= (x) 2) (jvm aload 1))"
      - "         ((= (x) 3) (jvm invokevirtual add-Object-V 1 0))"
      - "         ((= (x) 4) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method addDoor (self addDoor-COS_JDoor-V))"
      - ""
      - "   (method addThing-COS_JThing-V"
      - "     (lambda (arg0) /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)) (pair 1 (arg0)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm getfield content (COS_JList)))"
      - "         ((= (x) 2) (jvm aload 1))"
      - "         ((= (x) 3) (jvm invokevirtual add-Object-V 1 0))"
      - "         ((= (x) 4) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method addThing (self addThing-COS_JThing-V))"
      - ""
      - "   (method removeThing-COS_JThing-V"
      - "     (lambda (arg0) /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)) (pair 1 (arg0)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm getfield content (COS_JList)))"
      - "         ((= (x) 2) (jvm aload 1))"
      - "         ((= (x) 3) (jvm invokevirtual remove-Object-Z 1 1))"
      - "         ((= (x) 4) (jvm pop))"
      - "         ((= (x) 5) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method removeThing (self removeThing-COS_JThing-V))"
      - ""
      - " ;"
    code
    stanza: 1534
  - 
    role: "file"
    lines: 
      - "== COS_JNamed =="
    stanza: 1535
  - 
    role: "comment"
    lines: 
      - "# JAVA class translation 'COS_JNamed'"
      - "# Sun Mar 23 02:45:13 CET 2014"
      - "# Produced by Fritzifier, based on JasminVisitor"
      - "# Using BCEL library to read Java bytecode"
      - "# Here is the original code:"
      - "# "
      - "# public class COS_JNamed {"
      - "#     private String name = \"-\";"
      - "#     private COS_JWorld world = null;"
      - "# "
      - "#     void setName(String name) {"
      - "#     this.name = name;"
      - "#     }"
      - "# "
      - "#     String getName() {"
      - "#     return name;"
      - "#     }"
      - "# "
      - "#     void setWorld(COS_JWorld world) {"
      - "#     this.world = world;"
      - "#     }"
      - "# "
      - "#     COS_JWorld getWorld() {"
      - "#     return world;"
      - "#     }"
      - "# "
      - "#     void update() {"
      - "#     }"
      - "# "
      - "#     void postUpdate() {"
      - "#     }"
      - "# }"
    section_description: "class translation 'COS_JNamed'"
    section_category: "JAVA"
    section_index: 63
    stanza: 1536
  - 
    role: "code"
    lines: 
      - "class COS_JNamed ()"
      - "   (field super-ref (make-cell 0))"
      - "   (method new (set! (super-ref) ((java lang Object) / this)))"
      - "   (method super (? x / (get! / super-ref) / x))"
      - "   (method unknown (? x / self super / x))"
      - "   (field name (cell new 0))"
      - "   (field world (cell new 0))"
      - "   (method <init>-V"
      - "     (lambda () /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))"
      - "         ((= (x) 2) (jvm aload 0))"
      - "         ((= (x) 3) (jvm ldc (String new int-init \"-\")))"
      - "         ((= (x) 4) (jvm putfield name (java lang String)))"
      - "         ((= (x) 5) (jvm aload 0))"
      - "         ((= (x) 6) (jvm aconst_null))"
      - "         ((= (x) 7) (jvm putfield world (COS_JWorld)))"
      - "         ((= (x) 8) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method <init> (self <init>-V))"
      - ""
      - "   (method setName-String-V"
      - "     (lambda (arg0) /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)) (pair 1 (arg0)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm aload 1))"
      - "         ((= (x) 2) (jvm putfield name (java lang String)))"
      - "         ((= (x) 3) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method setName (self setName-String-V))"
      - ""
      - "   (method getName-String"
      - "     (lambda () /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm getfield name (java lang String)))"
      - "         ((= (x) 2) (jvm areturn))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method getName (self getName-String))"
      - ""
      - "   (method setWorld-COS_JWorld-V"
      - "     (lambda (arg0) /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)) (pair 1 (arg0)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm aload 1))"
      - "         ((= (x) 2) (jvm putfield world (COS_JWorld)))"
      - "         ((= (x) 3) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method setWorld (self setWorld-COS_JWorld-V))"
      - ""
      - "   (method getWorld-COS_JWorld"
      - "     (lambda () /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm getfield world (COS_JWorld)))"
      - "         ((= (x) 2) (jvm areturn))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method getWorld (self getWorld-COS_JWorld))"
      - ""
      - "   (method update-V"
      - "     (lambda () /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method update (self update-V))"
      - ""
      - "   (method postUpdate-V"
      - "     (lambda () /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method postUpdate (self postUpdate-V))"
      - ""
      - " ;"
    code
    stanza: 1537
  - 
    role: "file"
    lines: 
      - "== COS_JWorld =="
    stanza: 1538
  - 
    role: "comment"
    lines: 
      - "# JAVA class translation 'COS_JWorld'"
      - "# Sun Mar 23 02:45:14 CET 2014"
      - "# Produced by Fritzifier, based on JasminVisitor"
      - "# Using BCEL library to read Java bytecode"
      - "# Here is the original code:"
      - "# "
      - "# import java.util.Iterator;"
      - "# "
      - "# public class COS_JWorld {"
      - "#     private COS_JHashMap content;"
      - "#     private COS_JList inventory;"
      - "# "
      - "#     public COS_JWorld() {"
      - "#     content = new COS_JHashMap();"
      - "#     inventory = new COS_JList();"
      - "#     }"
      - "# "
      - "#     public void add(COS_JNamed named, String name) {"
      - "#     named.setName(name);"
      - "#     content.put(named.getName(),named);"
      - "#     inventory.add(named);"
      - "#     }"
      - "# "
      - "#     public COS_JNamed get(String name) {"
      - "#     return (COS_JNamed)content.get(new String(name));"
      - "#     }"
      - "# "
      - "#     public void update() {"
      - "#     for (Iterator i = inventory.iterator(); i.hasNext(); ) {"
      - "#         COS_JNamed o = (COS_JNamed) i.next();"
      - "#         o.update();"
      - "#     }"
      - "#     for (Iterator i = inventory.iterator(); i.hasNext(); ) {"
      - "#         COS_JNamed o = (COS_JNamed) i.next();"
      - "#         o.postUpdate();"
      - "#     }"
      - "#     }"
      - "# }"
    section_description: "class translation 'COS_JWorld'"
    section_category: "JAVA"
    section_index: 64
    stanza: 1539
  - 
    role: "code"
    lines: 
      - "class COS_JWorld ()"
      - "   (field super-ref (make-cell 0))"
      - "   (method new (set! (super-ref) ((java lang Object) / this)))"
      - "   (method super (? x / (get! / super-ref) / x))"
      - "   (method unknown (? x / self super / x))"
      - "   (field content (cell new 0))"
      - "   (field inventory (cell new 0))"
      - "   (method <init>-V"
      - "     (lambda () /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))"
      - "         ((= (x) 2) (jvm aload 0))"
      - "         ((= (x) 3) (jvm new (COS_JHashMap)))"
      - "         ((= (x) 4) (jvm dup))"
      - "         ((= (x) 5) (jvm invokespecial <init>-V 0 0))"
      - "         ((= (x) 6) (jvm putfield content (COS_JHashMap)))"
      - "         ((= (x) 7) (jvm aload 0))"
      - "         ((= (x) 8) (jvm new (COS_JList)))"
      - "         ((= (x) 9) (jvm dup))"
      - "         ((= (x) 10) (jvm invokespecial <init>-V 0 0))"
      - "         ((= (x) 11) (jvm putfield inventory (COS_JList)))"
      - "         ((= (x) 12) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method <init> (self <init>-V))"
      - ""
      - "   (method add-COS_JNamed-String-V"
      - "     (lambda (arg0 arg1) /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 1))"
      - "         ((= (x) 1) (jvm aload 2))"
      - "         ((= (x) 2) (jvm invokevirtual setName-String-V 1 0))"
      - "         ((= (x) 3) (jvm aload 0))"
      - "         ((= (x) 4) (jvm getfield content (COS_JHashMap)))"
      - "         ((= (x) 5) (jvm aload 1))"
      - "         ((= (x) 6) (jvm invokevirtual getName-String 0 1))"
      - "         ((= (x) 7) (jvm aload 1))"
      - "         ((= (x) 8) (jvm invokevirtual put-Object-Object-V 2 0))"
      - "         ((= (x) 9) (jvm aload 0))"
      - "         ((= (x) 10) (jvm getfield inventory (COS_JList)))"
      - "         ((= (x) 11) (jvm aload 1))"
      - "         ((= (x) 12) (jvm invokevirtual add-Object-V 1 0))"
      - "         ((= (x) 13) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method add (self add-COS_JNamed-String-V))"
      - ""
      - "   (method get-String-COS_JNamed"
      - "     (lambda (arg0) /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)) (pair 1 (arg0)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm getfield content (COS_JHashMap)))"
      - "         ((= (x) 2) (jvm new (java lang String)))"
      - "         ((= (x) 3) (jvm dup))"
      - "         ((= (x) 4) (jvm aload 1))"
      - "         ((= (x) 5) (jvm invokespecial <init>-String-V 1 0))"
      - "         ((= (x) 6) (jvm invokevirtual get-Object-Object 1 1))"
      - "         ((= (x) 7) (jvm checkcast (COS_JNamed)))"
      - "         ((= (x) 8) (jvm areturn))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method get (self get-String-COS_JNamed))"
      - ""
      - "   (method update-V"
      - "     (lambda () /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm getfield inventory (COS_JList)))"
      - "         ((= (x) 2) (jvm invokevirtual iterator-Iterator 0 1))"
      - "         ((= (x) 3) (jvm astore 1))"
      - "         ((= (x) 4) (jvm aload 1))"
      - "         ((= (x) 5) (jvm invokeinterface hasNext-Z 0 1 1))"
      - "         ((= (x) 6) (jvm ifeq 14))"
      - "         ((= (x) 7) (jvm aload 1))"
      - "         ((= (x) 8) (jvm invokeinterface next-Object 0 1 1))"
      - "         ((= (x) 9) (jvm checkcast (COS_JNamed)))"
      - "         ((= (x) 10) (jvm astore 2))"
      - "         ((= (x) 11) (jvm aload 2))"
      - "         ((= (x) 12) (jvm invokevirtual update-V 0 0))"
      - "         ((= (x) 13) (jvm goto 4))"
      - "         ((= (x) 14) (jvm aload 0))"
      - "         ((= (x) 15) (jvm getfield inventory (COS_JList)))"
      - "         ((= (x) 16) (jvm invokevirtual iterator-Iterator 0 1))"
      - "         ((= (x) 17) (jvm astore 1))"
      - "         ((= (x) 18) (jvm aload 1))"
      - "         ((= (x) 19) (jvm invokeinterface hasNext-Z 0 1 1))"
      - "         ((= (x) 20) (jvm ifeq 28))"
      - "         ((= (x) 21) (jvm aload 1))"
      - "         ((= (x) 22) (jvm invokeinterface next-Object 0 1 1))"
      - "         ((= (x) 23) (jvm checkcast (COS_JNamed)))"
      - "         ((= (x) 24) (jvm astore 2))"
      - "         ((= (x) 25) (jvm aload 2))"
      - "         ((= (x) 26) (jvm invokevirtual postUpdate-V 0 0))"
      - "         ((= (x) 27) (jvm goto 18))"
      - "         ((= (x) 28) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method update (self update-V))"
      - ""
      - " ;"
    code
    stanza: 1540
  - 
    role: "file"
    lines: 
      - "== COS_JRobo =="
    stanza: 1541
  - 
    role: "comment"
    lines: 
      - "# JAVA class translation 'COS_JRobo'"
      - "# Sun Mar 23 02:45:16 CET 2014"
      - "# Produced by Fritzifier, based on JasminVisitor"
      - "# Using BCEL library to read Java bytecode"
      - "# Here is the original code:"
      - "# "
      - "# import java.util.Iterator;"
      - "# "
      - "# public class COS_JRobo extends COS_JThing {"
      - "#     private COS_JHashMap times;"
      - "#     private int now;"
      - "# "
      - "#     public COS_JRobo() {"
      - "#     times = new COS_JHashMap();"
      - "#     now = 1;"
      - "#     }"
      - "# "
      - "#     public void update() {"
      - "#     COS_JRoom location = getRoom();"
      - "#     //System.out.println(\"Updating robo...\");"
      - "#     if (location!=null) {"
      - "#         int oldestTime = now;"
      - "#         COS_JDoor oldestDoor = null;"
      - "#         for (Iterator i = location.getDoors(); i.hasNext(); ) {"
      - "#         COS_JDoor door = (COS_JDoor) i.next();"
      - "#         //System.out.println(\" scanning door \");"
      - "#         Integer t = (Integer)times.get(door);"
      - "#         int v = 0;"
      - "#         if (t!=null) {"
      - "#             v = t.intValue();"
      - "#         }"
      - "#         if (v<oldestTime) {"
      - "#             oldestTime = v;"
      - "#             oldestDoor = door;"
      - "#         }"
      - "#         }"
      - "#         if (oldestDoor!=null) {"
      - "#         times.put(oldestDoor,new Integer(now));"
      - "#         setNextRoom(oldestDoor.apply(location));"
      - "#         }"
      - "#     }"
      - "#     now++;"
      - "#     }"
      - "# }"
      - "# "
    section_description: "class translation 'COS_JRobo'"
    section_category: "JAVA"
    section_index: 65
    stanza: 1542
  - 
    role: "code"
    lines: 
      - "class COS_JRobo ()"
      - "   (field super-ref (make-cell 0))"
      - "   (method new (set! (super-ref) ((COS_JThing) / this)))"
      - "   (method super (? x / (get! / super-ref) / x))"
      - "   (method unknown (? x / self super / x))"
      - "   (field times (cell new 0))"
      - "   (field now ((int) new))"
      - "   (method <init>-V"
      - "     (lambda () /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))"
      - "         ((= (x) 2) (jvm aload 0))"
      - "         ((= (x) 3) (jvm new (COS_JHashMap)))"
      - "         ((= (x) 4) (jvm dup))"
      - "         ((= (x) 5) (jvm invokespecial <init>-V 0 0))"
      - "         ((= (x) 6) (jvm putfield times (COS_JHashMap)))"
      - "         ((= (x) 7) (jvm aload 0))"
      - "         ((= (x) 8) (jvm iconst 1))"
      - "         ((= (x) 9) (jvm putfield now (int)))"
      - "         ((= (x) 10) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method <init> (self <init>-V))"
      - ""
      - "   (method update-V"
      - "     (lambda () /"
      - "      let ((vars / cell new / make-hash / vector"
      - "                    (pair 0 (self)))"
      - "           (stack / cell new / vector)) /"
      - "      state-machine (vars) (stack) / ? jvm / ? x / cond"
      - "         ((= (x) 0) (jvm aload 0))"
      - "         ((= (x) 1) (jvm invokevirtual getRoom-COS_JRoom 0 1))"
      - "         ((= (x) 2) (jvm astore 1))"
      - "         ((= (x) 3) (jvm aload 1))"
      - "         ((= (x) 4) (jvm ifnull 57))"
      - "         ((= (x) 5) (jvm aload 0))"
      - "         ((= (x) 6) (jvm getfield now (int)))"
      - "         ((= (x) 7) (jvm istore 2))"
      - "         ((= (x) 8) (jvm aconst_null))"
      - "         ((= (x) 9) (jvm astore 3))"
      - "         ((= (x) 10) (jvm aload 1))"
      - "         ((= (x) 11) (jvm invokevirtual getDoors-Iterator 0 1))"
      - "         ((= (x) 12) (jvm astore 4))"
      - "         ((= (x) 13) (jvm aload 4))"
      - "         ((= (x) 14) (jvm invokeinterface hasNext-Z 0 1 1))"
      - "         ((= (x) 15) (jvm ifeq 41))"
      - "         ((= (x) 16) (jvm aload 4))"
      - "         ((= (x) 17) (jvm invokeinterface next-Object 0 1 1))"
      - "         ((= (x) 18) (jvm checkcast (COS_JDoor)))"
      - "         ((= (x) 19) (jvm astore 5))"
      - "         ((= (x) 20) (jvm aload 0))"
      - "         ((= (x) 21) (jvm getfield times (COS_JHashMap)))"
      - "         ((= (x) 22) (jvm aload 5))"
      - "         ((= (x) 23) (jvm invokevirtual get-Object-Object 1 1))"
      - "         ((= (x) 24) (jvm checkcast (java lang Integer)))"
      - "         ((= (x) 25) (jvm astore 6))"
      - "         ((= (x) 26) (jvm iconst 0))"
      - "         ((= (x) 27) (jvm istore 7))"
      - "         ((= (x) 28) (jvm aload 6))"
      - "         ((= (x) 29) (jvm ifnull 33))"
      - "         ((= (x) 30) (jvm aload 6))"
      - "         ((= (x) 31) (jvm invokevirtual intValue-I 0 1))"
      - "         ((= (x) 32) (jvm istore 7))"
      - "         ((= (x) 33) (jvm iload 7))"
      - "         ((= (x) 34) (jvm iload 2))"
      - "         ((= (x) 35) (jvm if_icmpge 40))"
      - "         ((= (x) 36) (jvm iload 7))"
      - "         ((= (x) 37) (jvm istore 2))"
      - "         ((= (x) 38) (jvm aload 5))"
      - "         ((= (x) 39) (jvm astore 3))"
      - "         ((= (x) 40) (jvm goto 13))"
      - "         ((= (x) 41) (jvm aload 3))"
      - "         ((= (x) 42) (jvm ifnull 57))"
      - "         ((= (x) 43) (jvm aload 0))"
      - "         ((= (x) 44) (jvm getfield times (COS_JHashMap)))"
      - "         ((= (x) 45) (jvm aload 3))"
      - "         ((= (x) 46) (jvm new (java lang Integer)))"
      - "         ((= (x) 47) (jvm dup))"
      - "         ((= (x) 48) (jvm aload 0))"
      - "         ((= (x) 49) (jvm getfield now (int)))"
      - "         ((= (x) 50) (jvm invokespecial <init>-I-V 1 0))"
      - "         ((= (x) 51) (jvm invokevirtual put-Object-Object-V 2 0))"
      - "         ((= (x) 52) (jvm aload 0))"
      - "         ((= (x) 53) (jvm aload 3))"
      - "         ((= (x) 54) (jvm aload 1))"
      - "         ((= (x) 55) (jvm invokevirtual apply-COS_JRoom-COS_JRoom 1 1))"
      - "         ((= (x) 56) (jvm invokevirtual setNextRoom-COS_JRoom-V 1 0))"
      - "         ((= (x) 57) (jvm aload 0))"
      - "         ((= (x) 58) (jvm dup))"
      - "         ((= (x) 59) (jvm getfield now (int)))"
      - "         ((= (x) 60) (jvm iconst 1))"
      - "         ((= (x) 61) (jvm iadd))"
      - "         ((= (x) 62) (jvm putfield now (int)))"
      - "         ((= (x) 63) (jvm return))"
      - "         (jvm return))"
      - "   )"
      - ""
      - "   (method update (self update-V))"
      - ""
      - " ;"
    code
    stanza: 1543
  - 
    role: "file"
    lines: 
      - "== COS_JRoom_test =="
    stanza: 1544
  - 
    role: "comment"
    lines: 
      - "# JAVA test JRoom, JDoor, JThing, etc"
    section_description: "test JRoom, JDoor, JThing, etc"
    section_category: "JAVA"
    section_index: 66
    stanza: 1545
  - 
    role: "code"
    lines: 
      - "define s (? x / String new int-init / x);"
    code: "211013210001111013221100321001013023210111110132110010003210111111130232100101332233"
    stanza: 1546
  - 
    role: "code"
    lines: 
      - "define room1 (COS_JRoom new <init>);"
    code: "211013210001111103221000010100321100100032101110001332233"
    stanza: 1547
  - 
    role: "code"
    lines: 
      - "define room2 (COS_JRoom new <init>);"
    code: "211013210001111113221000010100321100100032101110001332233"
    stanza: 1548
  - 
    role: "code"
    lines: 
      - "define door12 (COS_JDoor new <init> "
      - "              (room1) (s \"south\") (room2) (s \"north\"));"
    code: "211013210010000003221000001111321100100032101110001322100011111033221000111101321001000010001010100010111001100033221000111111332210001111013211011110111001001110100011010003332233"
    stanza: 1549
  - 
    role: "code"
    lines: 
      - "define jworld (COS_JWorld new <init>);"
    code: "211013210010000013221000101101321100100032101110001332233"
    stanza: 1550
  - 
    role: "code"
    lines: 
      - "define thing1 (COS_JThing new <init>);"
    code: "211013210010000103221000011000321100100032101110001332233"
    stanza: 1551
  - 
    role: "code"
    lines: 
      - "define robo1 (COS_JRobo new <init>);"
    code: "211013210010000113221000111001321100100032101110001332233"
    stanza: 1552
  - 
    role: "code"
    lines: 
      - "act / jworld add (thing1) / s \"bus\";"
    code: "210111010030232100100000132110010032210010000103302321000111101321100010011101010111001132233"
    stanza: 1553
  - 
    role: "code"
    lines: 
      - "act / jworld add (robo1) / s \"autobus\";"
    code: "21011101003023210010000013211001003221001000011330232100011110132110111101100010011101010111010032233"
    stanza: 1554
  - 
    role: "code"
    lines: 
      - "act / jworld add (room1) / s \"boston\";"
    code: "210111010030232100100000132110010032210001111103302321000111101321000110010001011100100001001001032233"
    stanza: 1555
  - 
    role: "code"
    lines: 
      - "act / jworld add (room2) / s \"newyork\";"
    code: "210111010030232100100000132110010032210001111113302321000111101321000011010010000100011011001010032233"
    stanza: 1556
  - 
    role: "code"
    lines: 
      - "begin (room1 get add (room1))"
      - "       (= 1 / room1 get size);"
    code: "21000000032210001111103211101010321100100322100011111033322103213023210001111103211101010321000000011332233"
    stanza: 1557
  - 
    role: "code"
    lines: 
      - "= 1 / room1 get size;"
    code: "210321302321000111110321110101032100000001132233"
    stanza: 1558
  - 
    role: "code"
    lines: 
      - "= 0 / room2 get size;"
    code: "210320302321000111111321110101032100000001132233"
    stanza: 1559
  - 
    role: "code"
    lines: 
      - "act / thing1 setRoom (room1);"
    code: "21011101003023210010000103210000111103221000111110332233"
    stanza: 1560
  - 
    role: "code"
    lines: 
      - "= 2 / room1 get size;"
    code: "2103210302321000111110321110101032100000001132233"
    stanza: 1561
  - 
    role: "code"
    lines: 
      - "= 0 / room2 get size;"
    code: "210320302321000111111321110101032100000001132233"
    stanza: 1562
  - 
    role: "code"
    lines: 
      - "act / thing1 setRoom (room2);"
    code: "21011101003023210010000103210000111103221000111111332233"
    stanza: 1563
  - 
    role: "code"
    lines: 
      - "room1 get size;"
    code: "21000111110321110101032100000001132233"
    stanza: 1564
  - 
    role: "code"
    lines: 
      - "room2 get size;"
    code: "21000111111321110101032100000001132233"
    stanza: 1565
  - 
    role: "code"
    lines: 
      - "thing1 equals (thing1);"
    code: "21001000010321011100113221001000010332233"
    stanza: 1566
  - 
    role: "code"
    lines: 
      - "room1 equals (room1);"
    code: "21000111110321011100113221000111110332233"
    stanza: 1567
  - 
    role: "code"
    lines: 
      - "not / thing1 equals (room1);"
    code: "2100302321001000010321011100113221000111110332233"
    stanza: 1568
  - 
    role: "code"
    lines: 
      - "(equal \"newyork\" / door12 apply (room1) (s \"south\") getName intValue);"
    code: "210003210000110100100001000110110010100302321001000000321010100322100011111033221000111101321001000010001010100010111001100033210001100013210111101032233"
    lines_original: 
      - "demo / door12 apply (room1) (s \"south\") getName intValue;"
    stanza: 1569
  - 
    role: "code"
    lines: 
      - "(equal \"boston\" / door12 apply (room2) (s \"north\") getName intValue);"
    code: "21000321000110010001011100100001001001030232100100000032101010032210001111113322100011110132110111101110010011101000110100033210001100013210111101032233"
    lines_original: 
      - "demo / door12 apply (room2) (s \"north\") getName intValue;"
    stanza: 1570
  - 
    role: "code"
    lines: 
      - "define o"
      - "  (? x / jworld get / s / x);"
    code: "2110132101111011322110032100101302321001000001321110101030232100011110130232100101332233"
    stanza: 1571
  - 
    role: "code"
    lines: 
      - "= \"newyork\" / (o \"bus\") getRoom getName intValue;"
    code: "2103210000110100100001000110110010100302322101111011321100010011101010111001133210001000003210001100013210111101032233"
    stanza: 1572
  - 
    role: "code"
    lines: 
      - "act / robo1 setRoom (room1);"
    code: "21011101003023210010000113210000111103221000111110332233"
    stanza: 1573
  - 
    role: "code"
    lines: 
      - "(equal \"boston\" / (o \"autobus\") getRoom getName intValue);"
    code: "21000321000110010001011100100001001001030232210111101132110111101100010011101010111010033210001000003210001100013210111101032233"
    lines_original: 
      - "demo / (o \"autobus\") getRoom getName intValue;"
    stanza: 1574
  - 
    role: "code"
    lines: 
      - "act / jworld update;"
    code: "21011101003023210010000013210000100132233"
    stanza: 1575
  - 
    role: "code"
    lines: 
      - "(equal \"newyork\" / (o \"autobus\") getRoom getName intValue);"
    code: "21000321000011010010000100011011001010030232210111101132110111101100010011101010111010033210001000003210001100013210111101032233"
    lines_original: 
      - "demo / (o \"autobus\") getRoom getName intValue;"
    stanza: 1576

