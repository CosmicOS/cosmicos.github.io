[
  {
    "role": "file",
    "lines": [
      "== COS_License =="
    ],
    "stanza": 0
  },
  {
    "role": "comment",
    "lines": [
      "#   Author: Paul Fitzpatrick, paulfitz@csail.mit.edu",
      "#   Copyright (c) 2005 Paul Fitzpatrick",
      "#",
      "#   This file is part of CosmicOS.",
      "#",
      "#   CosmicOS is free software; you can redistribute it and/or modify",
      "#   it under the terms of the GNU General Public License as published by",
      "#   the Free Software Foundation; either version 2 of the License, or",
      "#   (at your option) any later version.",
      "#",
      "#   CosmicOS is distributed in the hope that it will be useful,",
      "#   but WITHOUT ANY WARRANTY; without even the implied warranty of",
      "#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
      "#   GNU General Public License for more details.",
      "#",
      "#   You should have received a copy of the GNU General Public License",
      "#   along with CosmicOS; if not, write to the Free Software",
      "#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",
      "#"
    ],
    "stanza": 1
  },
  {
    "role": "file",
    "lines": [
      "== COS_Intro =="
    ],
    "stanza": 2
  },
  {
    "role": "comment",
    "lines": [
      "# MATH introduce numbers (in unary notation)",
      "# Here we count up from zero, go through some primes, etc. There is some",
      "# syntax around the numbers, but that doesn't need to be understood at",
      "# this point. We give numbers in a tweaked unary format, rather than the",
      "# encoding used in the main body of the message."
    ],
    "section_description": "introduce numbers (in unary notation)",
    "section_category": "MATH",
    "section_index": 0,
    "stanza": 3
  },
  {
    "role": "code",
    "lines": [
      "intro is:int;"
    ],
    "code": "203210011132233",
    "parse": [
      "intro",
      "is:int"
    ],
    "stanza": 4
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 0;"
    ],
    "code": "21001113023210101032032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        0
      ]
    ],
    "stanza": 5
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 0;"
    ],
    "code": "21001113023210101032132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        1,
        0
      ]
    ],
    "stanza": 6
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 0;"
    ],
    "code": "21001113023210101032132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        1,
        1,
        0
      ]
    ],
    "stanza": 7
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 0;"
    ],
    "code": "21001113023210101032132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 8
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 0;"
    ],
    "code": "21001113023210101032132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 9
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 0;"
    ],
    "code": "21001113023210101032132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 10
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 0;"
    ],
    "code": "21001113023210101032132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 11
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 0;"
    ],
    "code": "21001113023210101032132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 12
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 0;"
    ],
    "code": "21001113023210101032132132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 13
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 0;"
    ],
    "code": "21001113023210101032132132132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 14
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "code": "21001113023210101032132132132132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 15
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "code": "21001113023210101032132132132132132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 16
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "code": "21001113023210101032132132132132132132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 17
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "code": "21001113023210101032132132132132132132132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 18
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "code": "21001113023210101032132132132132132132132132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 19
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "code": "21001113023210101032132132132132132132132132132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 20
  },
  {
    "role": "code",
    "lines": [
      "intro is:square;"
    ],
    "code": "203210111132233",
    "parse": [
      "intro",
      "is:square"
    ],
    "stanza": 21
  },
  {
    "role": "code",
    "lines": [
      "is:square | unary 0;"
    ],
    "code": "21011113023210101032032233",
    "parse": [
      "is:square",
      [
        -1,
        "unary",
        0
      ]
    ],
    "stanza": 22
  },
  {
    "role": "code",
    "lines": [
      "is:square | unary 1 0;"
    ],
    "code": "21011113023210101032132032233",
    "parse": [
      "is:square",
      [
        -1,
        "unary",
        1,
        0
      ]
    ],
    "stanza": 23
  },
  {
    "role": "code",
    "lines": [
      "is:square | unary 1 1 1 1 0;"
    ],
    "code": "21011113023210101032132132132132032233",
    "parse": [
      "is:square",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 24
  },
  {
    "role": "code",
    "lines": [
      "is:square | unary 1 1 1 1 1 1 1 1 1 0;"
    ],
    "code": "21011113023210101032132132132132132132132132132032233",
    "parse": [
      "is:square",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 25
  },
  {
    "role": "code",
    "lines": [
      "is:square | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "code": "21011113023210101032132132132132132132132132132132132132132132132132032233",
    "parse": [
      "is:square",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 26
  },
  {
    "role": "code",
    "lines": [
      "is:square | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "code": "21011113023210101032132132132132132132132132132132132132132132132132132132132132132132132132132032233",
    "parse": [
      "is:square",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 27
  },
  {
    "role": "code",
    "lines": [
      "intro is:prime;"
    ],
    "code": "203210110132233",
    "parse": [
      "intro",
      "is:prime"
    ],
    "stanza": 28
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 0;"
    ],
    "code": "21011013023210101032132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        1,
        1,
        0
      ]
    ],
    "stanza": 29
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 0;"
    ],
    "code": "21011013023210101032132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 30
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 0;"
    ],
    "code": "21011013023210101032132132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 31
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 0;"
    ],
    "code": "21011013023210101032132132132132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 32
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "code": "21011013023210101032132132132132132132132132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 33
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "code": "21011013023210101032132132132132132132132132132132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 34
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "code": "21011013023210101032132132132132132132132132132132132132132132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 35
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "code": "21011013023210101032132132132132132132132132132132132132132132132132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 36
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "code": "21011013023210101032132132132132132132132132132132132132132132132132132132132132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 37
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "code": "21011013023210101032132132132132132132132132132132132132132132132132132132132132132132132132132132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 38
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "code": "21011013023210101032132132132132132132132132132132132132132132132132132132132132132132132132132132132132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 39
  },
  {
    "role": "file",
    "lines": [
      "== COS_Compare =="
    ],
    "stanza": 40
  },
  {
    "role": "comment",
    "lines": [
      "# MATH introduce equality for unary numbers",
      "# The intro operator does nothing essential, and could be omitted - it just",
      "# tags the first use of a new operator. The = operator is introduced",
      "# alongside a duplication of unary numbers.  The meaning will not quite by",
      "# nailed down until we see other relational operators."
    ],
    "section_description": "introduce equality for unary numbers",
    "section_category": "MATH",
    "section_index": 1,
    "stanza": 41
  },
  {
    "role": "code",
    "lines": [
      "intro =;"
    ],
    "code": "20321032233",
    "parse": [
      "intro",
      "="
    ],
    "stanza": 42
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 0) (unary 1 0);"
    ],
    "code": "2103221010103213203322101010321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        0
      ],
      [
        "unary",
        1,
        0
      ]
    ],
    "stanza": 43
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 0) (unary 1 1 0);"
    ],
    "code": "2103221010103213213203322101010321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        0
      ]
    ],
    "stanza": 44
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 0) (unary 1 1 1 0);"
    ],
    "code": "2103221010103213213213203322101010321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 45
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "code": "2103221010103213213213213203322101010321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 46
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 0) (unary 1 1 1 1 1 0);"
    ],
    "code": "2103221010103213213213213213203322101010321321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 47
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);"
    ],
    "code": "2103221010103213213213213213213203322101010321321321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 48
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 1 0);"
    ],
    "code": "2103221010103213213213213213213213203322101010321321321321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 49
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "2103221010103213213213213213213213213203322101010321321321321321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 50
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 0) (unary 1 0);"
    ],
    "code": "2103221010103213203322101010321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        0
      ],
      [
        "unary",
        1,
        0
      ]
    ],
    "stanza": 51
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);"
    ],
    "code": "2103221010103213213213213213213203322101010321321321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 52
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 0) (unary 1 1 0);"
    ],
    "code": "2103221010103213213203322101010321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        0
      ]
    ],
    "stanza": 53
  },
  {
    "role": "comment",
    "lines": [
      "# MATH now introduce other relational operators",
      "# After this lesson, it should be clear what contexts < > and = are",
      "# appropriate in."
    ],
    "section_description": "now introduce other relational operators",
    "section_category": "MATH",
    "section_index": 2,
    "stanza": 54
  },
  {
    "role": "code",
    "lines": [
      "intro >;"
    ],
    "code": "20321132233",
    "parse": [
      "intro",
      ">"
    ],
    "stanza": 55
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 1 1 0);"
    ],
    "code": "2113221010103213213213213203322101010321321321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 56
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 0);"
    ],
    "code": "2113221010103213213213203322101010320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        0
      ]
    ],
    "stanza": 57
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 0) (unary 0);"
    ],
    "code": "2113221010103213203322101010320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        0
      ],
      [
        "unary",
        0
      ]
    ],
    "stanza": 58
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 1 1 1 0) (unary 0);"
    ],
    "code": "2113221010103213213213213213213213213203322101010320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        0
      ]
    ],
    "stanza": 59
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);"
    ],
    "code": "2113221010103213213213213213213213203322101010321321321321321321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 60
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 1 0) (unary 1 1 0);"
    ],
    "code": "2113221010103213213213213213213203322101010321321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        0
      ]
    ],
    "stanza": 61
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 0) (unary 0);"
    ],
    "code": "2113221010103213213213213213203322101010320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        0
      ]
    ],
    "stanza": 62
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 1 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "code": "2113221010103213213213213213213213213213203322101010321321321321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 63
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 0) (unary 1 0);"
    ],
    "code": "2113221010103213213213213213203322101010321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        0
      ]
    ],
    "stanza": 64
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 0) (unary 0);"
    ],
    "code": "2113221010103213213203322101010320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        "unary",
        0
      ]
    ],
    "stanza": 65
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 1 0);"
    ],
    "code": "2113221010103213213213203322101010321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        0
      ]
    ],
    "stanza": 66
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "213221010103213213213213213213213203322101010321321321321321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 67
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 1 0) (unary 1 1 1 1 1 1 0);"
    ],
    "code": "213221010103213213213203322101010321321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 68
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 0) (unary 1 1 1 0);"
    ],
    "code": "213221010103213213203322101010321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 69
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 0) (unary 1 1 1 1 0);"
    ],
    "code": "213221010103213213203322101010321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 70
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 0);"
    ],
    "code": "213221010103203322101010321320332233",
    "parse": [
      "<",
      [
        "unary",
        0
      ],
      [
        "unary",
        1,
        0
      ]
    ],
    "stanza": 71
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "213221010103203322101010321321321321321321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 72
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 1 1 0);"
    ],
    "code": "213221010103203322101010321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 73
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 1 1 1 0);"
    ],
    "code": "213221010103203322101010321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 74
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 1 1 0) (unary 1 1 1 1 1 1 0);"
    ],
    "code": "213221010103213213213213203322101010321321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 75
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 1 0);"
    ],
    "code": "213221010103203322101010321321320332233",
    "parse": [
      "<",
      [
        "unary",
        0
      ],
      [
        "unary",
        1,
        1,
        0
      ]
    ],
    "stanza": 76
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 0) (unary 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "213221010103213203322101010321321321321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 77
  },
  {
    "role": "comment",
    "lines": [
      "# Some mixed examples"
    ],
    "stanza": 78
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 0) (unary 1 0);"
    ],
    "code": "2103221010103213203322101010321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        0
      ],
      [
        "unary",
        1,
        0
      ]
    ],
    "stanza": 79
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 0) (unary 1 0);"
    ],
    "code": "2113221010103213213203322101010321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        0
      ]
    ],
    "stanza": 80
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 1 0);"
    ],
    "code": "2113221010103213213213203322101010321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        0
      ]
    ],
    "stanza": 81
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 0);"
    ],
    "code": "2113221010103213213213213203322101010321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        0
      ]
    ],
    "stanza": 82
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 0) (unary 1 1 0);"
    ],
    "code": "213221010103213203322101010321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        0
      ]
    ],
    "stanza": 83
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 0) (unary 1 1 0);"
    ],
    "code": "2103221010103213213203322101010321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        0
      ]
    ],
    "stanza": 84
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 1 1 0);"
    ],
    "code": "2113221010103213213213203322101010321321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        0
      ]
    ],
    "stanza": 85
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 1 0);"
    ],
    "code": "2113221010103213213213213203322101010321321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        0
      ]
    ],
    "stanza": 86
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 0) (unary 1 1 1 0);"
    ],
    "code": "213221010103213203322101010321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 87
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 0) (unary 1 1 1 0);"
    ],
    "code": "213221010103213213203322101010321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 88
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 0) (unary 1 1 1 0);"
    ],
    "code": "2103221010103213213213203322101010321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 89
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 1 1 0);"
    ],
    "code": "2113221010103213213213213203322101010321321321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 90
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 0) (unary 1 1 1 1 0);"
    ],
    "code": "213221010103213203322101010321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 91
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 0) (unary 1 1 1 1 0);"
    ],
    "code": "213221010103213213203322101010321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 92
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "code": "213221010103213213213203322101010321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 93
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "code": "2103221010103213213213213203322101010321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 94
  },
  {
    "role": "comment",
    "lines": [
      "# A few more random examples"
    ],
    "stanza": 95
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "code": "2113221010103213213213213213203322101010321321321321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 96
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 0) (unary 1 1 1 0);"
    ],
    "code": "2113221010103213213213213213203322101010321321321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 97
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 0) (unary 1 1 0);"
    ],
    "code": "213221010103213203322101010321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        0
      ]
    ],
    "stanza": 98
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 1 0);"
    ],
    "code": "2113221010103213213213213203322101010321321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        0
      ]
    ],
    "stanza": 99
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 0) (unary 0);"
    ],
    "code": "2113221010103213213213213213203322101010320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        0
      ]
    ],
    "stanza": 100
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 0);"
    ],
    "code": "2113221010103213213213213203322101010321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        0
      ]
    ],
    "stanza": 101
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 0) (unary 1 1 1 0);"
    ],
    "code": "213221010103213203322101010321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 102
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 0);"
    ],
    "code": "2113221010103213213213213203322101010320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        0
      ]
    ],
    "stanza": 103
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 0) (unary 1 0);"
    ],
    "code": "2113221010103213213203322101010321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        0
      ]
    ],
    "stanza": 104
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 1 0) (unary 1 1 1 1 1 0);"
    ],
    "code": "213221010103213213213203322101010321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 105
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 1 1 0);"
    ],
    "code": "2113221010103213213213213203322101010321321321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 106
  },
  {
    "role": "file",
    "lines": [
      "== COS_NotLogic =="
    ],
    "stanza": 107
  },
  {
    "role": "comment",
    "lines": [
      "# MATH introduce the NOT logical operator"
    ],
    "section_description": "introduce the NOT logical operator",
    "section_category": "MATH",
    "section_index": 3,
    "stanza": 108
  },
  {
    "role": "code",
    "lines": [
      "intro not;"
    ],
    "code": "203210032233",
    "parse": [
      "intro",
      "not"
    ],
    "stanza": 109
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) (unary  0);"
    ],
    "code": "2103221010103203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        "unary",
        0
      ]
    ],
    "stanza": 110
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  0) (unary  0);"
    ],
    "code": "21003023213221010103203322101010320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 111
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  0) (unary  0);"
    ],
    "code": "210030232113221010103203322101010320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 112
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) (unary  1 1 1 1 0);"
    ],
    "code": "2103221010103213213213213203322101010321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 113
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 0) (unary  1 1 1 1 0);"
    ],
    "code": "21003023213221010103213213213213203322101010321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 114
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 1 1 0) (unary  1 1 1 1 0);"
    ],
    "code": "210030232113221010103213213213213203322101010321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 115
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);"
    ],
    "code": "2103221010103213213213213213213203322101010321321321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 116
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);"
    ],
    "code": "21003023213221010103213213213213213213203322101010321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 117
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);"
    ],
    "code": "210030232113221010103213213213213213213203322101010321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 118
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) (unary  1 1 0);"
    ],
    "code": "2103221010103213213203322101010321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        0
      ]
    ],
    "stanza": 119
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 0) (unary  1 1 0);"
    ],
    "code": "21003023213221010103213213203322101010321321320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 120
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 0) (unary  1 1 0);"
    ],
    "code": "210030232113221010103213213203322101010321321320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 121
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) (unary  1 1 1 0);"
    ],
    "code": "2103221010103213213213203322101010321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 122
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 0) (unary  1 1 1 0);"
    ],
    "code": "21003023213221010103213213213203322101010321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 123
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 1 0) (unary  1 1 1 0);"
    ],
    "code": "210030232113221010103213213213203322101010321321321320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 124
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210030232103221010103213213213203322101010321321321321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 125
  },
  {
    "role": "code",
    "lines": [
      "< (unary  1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "213221010103213213213203322101010321321321321321321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 126
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210030232113221010103213213213203322101010321321321321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 127
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);"
    ],
    "code": "210030232103221010103213213213213213203322101010321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 128
  },
  {
    "role": "code",
    "lines": [
      "< (unary  1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);"
    ],
    "code": "213221010103213213213213213203322101010321321321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 129
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);"
    ],
    "code": "210030232113221010103213213213213213203322101010321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 130
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 0) (unary  1 1 0);"
    ],
    "code": "210030232103221010103213203322101010321321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 131
  },
  {
    "role": "code",
    "lines": [
      "< (unary  1 0) (unary  1 1 0);"
    ],
    "code": "213221010103213203322101010321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        0
      ]
    ],
    "stanza": 132
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 0) (unary  1 1 0);"
    ],
    "code": "210030232113221010103213203322101010321321320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 133
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  0) (unary  1 1 1 1 1 0);"
    ],
    "code": "210030232103221010103203322101010321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 134
  },
  {
    "role": "code",
    "lines": [
      "< (unary  0) (unary  1 1 1 1 1 0);"
    ],
    "code": "213221010103203322101010321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 135
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  0) (unary  1 1 1 1 1 0);"
    ],
    "code": "210030232113221010103203322101010321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 136
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210030232103221010103213213213213213213213213203322101010321321321321321321321321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 137
  },
  {
    "role": "code",
    "lines": [
      "< (unary  1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "213221010103213213213213213213213213203322101010321321321321321321321321321321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 138
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210030232113221010103213213213213213213213213203322101010321321321321321321321321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 139
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);"
    ],
    "code": "210030232103221010103213213213213213213213213213213213203322101010321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 140
  },
  {
    "role": "code",
    "lines": [
      "> (unary  1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);"
    ],
    "code": "2113221010103213213213213213213213213213213213203322101010321321321321321321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 141
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);"
    ],
    "code": "21003023213221010103213213213213213213213213213213213203322101010321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 142
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 0);"
    ],
    "code": "210030232103221010103213213213213213213213213213213213213203322101010321321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 143
  },
  {
    "role": "code",
    "lines": [
      "> (unary  1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 0);"
    ],
    "code": "2113221010103213213213213213213213213213213213213203322101010321321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        0
      ]
    ],
    "stanza": 144
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 0);"
    ],
    "code": "21003023213221010103213213213213213213213213213213213213203322101010321321320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 145
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);"
    ],
    "code": "210030232103221010103213213213213213213213213213213203322101010321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 146
  },
  {
    "role": "code",
    "lines": [
      "> (unary  1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);"
    ],
    "code": "2113221010103213213213213213213213213213213203322101010321321321321321321321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 147
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);"
    ],
    "code": "21003023213221010103213213213213213213213213213213203322101010321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 148
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 0) (unary  0);"
    ],
    "code": "210030232103221010103213213213213203322101010320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 149
  },
  {
    "role": "code",
    "lines": [
      "> (unary  1 1 1 1 0) (unary  0);"
    ],
    "code": "2113221010103213213213213203322101010320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        0
      ]
    ],
    "stanza": 150
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 0) (unary  0);"
    ],
    "code": "21003023213221010103213213213213203322101010320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 151
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210030232103221010103213213213213213213213213213213213213213213213213203322101010321321321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 152
  },
  {
    "role": "code",
    "lines": [
      "> (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "2113221010103213213213213213213213213213213213213213213213213203322101010321321321321321321321321321320332233",
    "parse": [
      ">",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 153
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "21003023213221010103213213213213213213213213213213213213213213213213203322101010321321321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 154
  },
  {
    "role": "file",
    "lines": [
      "== COS_Addition =="
    ],
    "stanza": 155
  },
  {
    "role": "comment",
    "lines": [
      "# MATH introduce addition"
    ],
    "section_description": "introduce addition",
    "section_category": "MATH",
    "section_index": 4,
    "stanza": 156
  },
  {
    "role": "code",
    "lines": [
      "intro +;"
    ],
    "code": "2032101032233",
    "parse": [
      "intro",
      "+"
    ],
    "stanza": 157
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | + (unary  0) (unary  1 1 0);"
    ],
    "code": "21032210101032132132033023210103221010103203322101010321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        -1,
        "+",
        [
          "unary",
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 158
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 1 0) | + (unary  1 1 1 1 0) (unary  1 0);"
    ],
    "code": "21032210101032132132132132132033023210103221010103213213213213203322101010321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "+",
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          0
        ]
      ]
    ],
    "stanza": 159
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | + (unary  1 1 0) (unary  0);"
    ],
    "code": "21032210101032132132033023210103221010103213213203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        -1,
        "+",
        [
          "unary",
          1,
          1,
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 160
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | + (unary  0) (unary  1 1 1 1 0);"
    ],
    "code": "21032210101032132132132132033023210103221010103203322101010321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "+",
        [
          "unary",
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 161
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | + (unary  1 1 1 0) (unary  1 0);"
    ],
    "code": "21032210101032132132132132033023210103221010103213213213203322101010321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "+",
        [
          "unary",
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          0
        ]
      ]
    ],
    "stanza": 162
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | + (unary  1 0) (unary  1 1 0);"
    ],
    "code": "21032210101032132132132033023210103221010103213203322101010321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "+",
        [
          "unary",
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 163
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | + (unary  0) (unary  0);"
    ],
    "code": "21032210101032033023210103221010103203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "+",
        [
          "unary",
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 164
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | + (unary  1 1 1 1 0) (unary  0);"
    ],
    "code": "21032210101032132132132132033023210103221010103213213213213203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "+",
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 165
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | + (unary  1 1 0) (unary  1 0);"
    ],
    "code": "21032210101032132132132033023210103221010103213213203322101010321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "+",
        [
          "unary",
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          0
        ]
      ]
    ],
    "stanza": 166
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | + (unary  1 1 1 1 0) (unary  0);"
    ],
    "code": "21032210101032132132132132033023210103221010103213213213213203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "+",
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 167
  },
  {
    "role": "file",
    "lines": [
      "== COS_Subtraction =="
    ],
    "stanza": 168
  },
  {
    "role": "comment",
    "lines": [
      "# MATH introduce subtraction"
    ],
    "section_description": "introduce subtraction",
    "section_category": "MATH",
    "section_index": 5,
    "stanza": 169
  },
  {
    "role": "code",
    "lines": [
      "intro -;"
    ],
    "code": "2032101132233",
    "parse": [
      "intro",
      "-"
    ],
    "stanza": 170
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | - (unary  1 1 0) (unary  1 1 0);"
    ],
    "code": "21032210101032033023210113221010103213213203322101010321321320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "-",
        [
          "unary",
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 171
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | - (unary  1 1 1 1 1 0) (unary  1 0);"
    ],
    "code": "21032210101032132132132132033023210113221010103213213213213213203322101010321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "-",
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          0
        ]
      ]
    ],
    "stanza": 172
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | - (unary  1 1 0) (unary  0);"
    ],
    "code": "21032210101032132132033023210113221010103213213203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        -1,
        "-",
        [
          "unary",
          1,
          1,
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 173
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | - (unary  1 1 1 1 0) (unary  1 1 1 1 0);"
    ],
    "code": "21032210101032033023210113221010103213213213213203322101010321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "-",
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 174
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | - (unary  1 1 1 1 0) (unary  1 0);"
    ],
    "code": "21032210101032132132132033023210113221010103213213213213203322101010321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "-",
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          0
        ]
      ]
    ],
    "stanza": 175
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 0) | - (unary  1 1 1 0) (unary  1 1 0);"
    ],
    "code": "21032210101032132033023210113221010103213213213203322101010321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        0
      ],
      [
        -1,
        "-",
        [
          "unary",
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 176
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | - (unary  0) (unary  0);"
    ],
    "code": "21032210101032033023210113221010103203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "-",
        [
          "unary",
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 177
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | - (unary  1 1 1 1 0) (unary  0);"
    ],
    "code": "21032210101032132132132132033023210113221010103213213213213203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "-",
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 178
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | - (unary  1 1 1 0) (unary  1 0);"
    ],
    "code": "21032210101032132132033023210113221010103213213213203322101010321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        -1,
        "-",
        [
          "unary",
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          0
        ]
      ]
    ],
    "stanza": 179
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | - (unary  1 1 1 1 0) (unary  0);"
    ],
    "code": "21032210101032132132132132033023210113221010103213213213213203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "-",
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 180
  },
  {
    "role": "file",
    "lines": [
      "== COS_Multiplication =="
    ],
    "stanza": 181
  },
  {
    "role": "comment",
    "lines": [
      "# MATH introduce multiplication"
    ],
    "section_description": "introduce multiplication",
    "section_category": "MATH",
    "section_index": 6,
    "stanza": 182
  },
  {
    "role": "code",
    "lines": [
      "intro *;"
    ],
    "code": "2032100132233",
    "parse": [
      "intro",
      "*"
    ],
    "stanza": 183
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  0);"
    ],
    "code": "21032210101032033023210013221010103203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 184
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  1 0);"
    ],
    "code": "21032210101032033023210013221010103203322101010321320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          0
        ],
        [
          "unary",
          1,
          0
        ]
      ]
    ],
    "stanza": 185
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  1 1 0);"
    ],
    "code": "21032210101032033023210013221010103203322101010321321320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 186
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  1 1 1 0);"
    ],
    "code": "21032210101032033023210013221010103203322101010321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 187
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 0) (unary  0);"
    ],
    "code": "21032210101032033023210013221010103213203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 188
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 0) | * (unary  1 0) (unary  1 0);"
    ],
    "code": "21032210101032132033023210013221010103213203322101010321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          0
        ],
        [
          "unary",
          1,
          0
        ]
      ]
    ],
    "stanza": 189
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | * (unary  1 0) (unary  1 1 0);"
    ],
    "code": "21032210101032132132033023210013221010103213203322101010321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 190
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | * (unary  1 0) (unary  1 1 1 0);"
    ],
    "code": "21032210101032132132132033023210013221010103213203322101010321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 191
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 1 0) (unary  0);"
    ],
    "code": "21032210101032033023210013221010103213213203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          1,
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 192
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | * (unary  1 1 0) (unary  1 0);"
    ],
    "code": "21032210101032132132033023210013221010103213213203322101010321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          0
        ]
      ]
    ],
    "stanza": 193
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | * (unary  1 1 0) (unary  1 1 0);"
    ],
    "code": "21032210101032132132132132033023210013221010103213213203322101010321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 194
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 1 1 0) | * (unary  1 1 0) (unary  1 1 1 0);"
    ],
    "code": "21032210101032132132132132132132033023210013221010103213213203322101010321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 195
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 1 1 0) (unary  0);"
    ],
    "code": "21032210101032033023210013221010103213213213203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 196
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | * (unary  1 1 1 0) (unary  1 0);"
    ],
    "code": "21032210101032132132132033023210013221010103213213213203322101010321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          0
        ]
      ]
    ],
    "stanza": 197
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 1 1 0) | * (unary  1 1 1 0) (unary  1 1 0);"
    ],
    "code": "21032210101032132132132132132132033023210013221010103213213213203322101010321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 198
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 1 1 1 1 1 0) | * (unary  1 1 1 0) (unary  1 1 1 0);"
    ],
    "code": "21032210101032132132132132132132132132132033023210013221010103213213213203322101010321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 199
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  1 0);"
    ],
    "code": "21032210101032033023210013221010103203322101010321320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          0
        ],
        [
          "unary",
          1,
          0
        ]
      ]
    ],
    "stanza": 200
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | * (unary  1 1 1 0) (unary  1 0);"
    ],
    "code": "21032210101032132132132033023210013221010103213213213203322101010321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          0
        ]
      ]
    ],
    "stanza": 201
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 1 0) (unary  0);"
    ],
    "code": "21032210101032033023210013221010103213213203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          1,
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 202
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  1 1 1 0);"
    ],
    "code": "21032210101032033023210013221010103203322101010321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 203
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | * (unary  1 1 1 0) (unary  1 0);"
    ],
    "code": "21032210101032132132132033023210013221010103213213213203322101010321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          0
        ]
      ]
    ],
    "stanza": 204
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | * (unary  1 0) (unary  1 1 0);"
    ],
    "code": "21032210101032132132033023210013221010103213203322101010321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 205
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  0);"
    ],
    "code": "21032210101032033023210013221010103203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 206
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 1 1 0) (unary  0);"
    ],
    "code": "21032210101032033023210013221010103213213213203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 207
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 1 0) (unary  0);"
    ],
    "code": "21032210101032033023210013221010103213213203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          1,
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 208
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 1 1 0) (unary  0);"
    ],
    "code": "21032210101032033023210013221010103213213213203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 209
  },
  {
    "role": "file",
    "lines": [
      "== COS_Binary =="
    ],
    "stanza": 210
  },
  {
    "role": "comment",
    "lines": [
      "# MATH introduce non-unary representation of numbers",
      "# Switch from unary numbers to another representation. The representation",
      "# of numbers is now medium-specific (it used to be specified as binary),",
      "# and can be fiddled with without affecting the rest of the message."
    ],
    "section_description": "introduce non-unary representation of numbers",
    "section_category": "MATH",
    "section_index": 7,
    "stanza": 211
  },
  {
    "role": "code",
    "lines": [
      "= 0 (unary 0);"
    ],
    "code": "210320322101010320332233",
    "parse": [
      "=",
      0,
      [
        "unary",
        0
      ]
    ],
    "stanza": 212
  },
  {
    "role": "code",
    "lines": [
      "= 1 (unary 1 0);"
    ],
    "code": "210321322101010321320332233",
    "parse": [
      "=",
      1,
      [
        "unary",
        1,
        0
      ]
    ],
    "stanza": 213
  },
  {
    "role": "code",
    "lines": [
      "= 2 (unary 1 1 0);"
    ],
    "code": "2103210322101010321321320332233",
    "parse": [
      "=",
      2,
      [
        "unary",
        1,
        1,
        0
      ]
    ],
    "stanza": 214
  },
  {
    "role": "code",
    "lines": [
      "= 3 (unary 1 1 1 0);"
    ],
    "code": "2103211322101010321321321320332233",
    "parse": [
      "=",
      3,
      [
        "unary",
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 215
  },
  {
    "role": "code",
    "lines": [
      "= 4 (unary 1 1 1 1 0);"
    ],
    "code": "21032100322101010321321321321320332233",
    "parse": [
      "=",
      4,
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 216
  },
  {
    "role": "code",
    "lines": [
      "= 5 (unary 1 1 1 1 1 0);"
    ],
    "code": "21032101322101010321321321321321320332233",
    "parse": [
      "=",
      5,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 217
  },
  {
    "role": "code",
    "lines": [
      "= 6 (unary 1 1 1 1 1 1 0);"
    ],
    "code": "21032110322101010321321321321321321320332233",
    "parse": [
      "=",
      6,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 218
  },
  {
    "role": "code",
    "lines": [
      "= 7 (unary 1 1 1 1 1 1 1 0);"
    ],
    "code": "21032111322101010321321321321321321321320332233",
    "parse": [
      "=",
      7,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 219
  },
  {
    "role": "code",
    "lines": [
      "= 8 (unary 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210321000322101010321321321321321321321321320332233",
    "parse": [
      "=",
      8,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 220
  },
  {
    "role": "code",
    "lines": [
      "= 9 (unary 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210321001322101010321321321321321321321321321320332233",
    "parse": [
      "=",
      9,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 221
  },
  {
    "role": "code",
    "lines": [
      "= 10 (unary 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210321010322101010321321321321321321321321321321320332233",
    "parse": [
      "=",
      10,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 222
  },
  {
    "role": "code",
    "lines": [
      "= 11 (unary 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210321011322101010321321321321321321321321321321321320332233",
    "parse": [
      "=",
      11,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 223
  },
  {
    "role": "code",
    "lines": [
      "= 12 (unary 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210321100322101010321321321321321321321321321321321321320332233",
    "parse": [
      "=",
      12,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 224
  },
  {
    "role": "code",
    "lines": [
      "= 13 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210321101322101010321321321321321321321321321321321321321320332233",
    "parse": [
      "=",
      13,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 225
  },
  {
    "role": "code",
    "lines": [
      "= 14 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210321110322101010321321321321321321321321321321321321321321320332233",
    "parse": [
      "=",
      14,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 226
  },
  {
    "role": "code",
    "lines": [
      "= 15 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210321111322101010321321321321321321321321321321321321321321321320332233",
    "parse": [
      "=",
      15,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 227
  },
  {
    "role": "code",
    "lines": [
      "= 1 (unary 1 0);"
    ],
    "code": "210321322101010321320332233",
    "parse": [
      "=",
      1,
      [
        "unary",
        1,
        0
      ]
    ],
    "stanza": 228
  },
  {
    "role": "code",
    "lines": [
      "= 2 (unary 1 1 0);"
    ],
    "code": "2103210322101010321321320332233",
    "parse": [
      "=",
      2,
      [
        "unary",
        1,
        1,
        0
      ]
    ],
    "stanza": 229
  },
  {
    "role": "code",
    "lines": [
      "= 4 (unary 1 1 1 1 0);"
    ],
    "code": "21032100322101010321321321321320332233",
    "parse": [
      "=",
      4,
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 230
  },
  {
    "role": "code",
    "lines": [
      "= 8 (unary 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210321000322101010321321321321321321321321320332233",
    "parse": [
      "=",
      8,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 231
  },
  {
    "role": "code",
    "lines": [
      "= 16 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "2103210000322101010321321321321321321321321321321321321321321321321320332233",
    "parse": [
      "=",
      16,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 232
  },
  {
    "role": "code",
    "lines": [
      "= 5 (unary 1 1 1 1 1 0);"
    ],
    "code": "21032101322101010321321321321321320332233",
    "parse": [
      "=",
      5,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 233
  },
  {
    "role": "code",
    "lines": [
      "= 14 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210321110322101010321321321321321321321321321321321321321321320332233",
    "parse": [
      "=",
      14,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 234
  },
  {
    "role": "code",
    "lines": [
      "= 2 (unary 1 1 0);"
    ],
    "code": "2103210322101010321321320332233",
    "parse": [
      "=",
      2,
      [
        "unary",
        1,
        1,
        0
      ]
    ],
    "stanza": 235
  },
  {
    "role": "code",
    "lines": [
      "= 3 (unary 1 1 1 0);"
    ],
    "code": "2103211322101010321321321320332233",
    "parse": [
      "=",
      3,
      [
        "unary",
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 236
  },
  {
    "role": "code",
    "lines": [
      "= 0 (unary 0);"
    ],
    "code": "210320322101010320332233",
    "parse": [
      "=",
      0,
      [
        "unary",
        0
      ]
    ],
    "stanza": 237
  },
  {
    "role": "code",
    "lines": [
      "= 13 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210321101322101010321321321321321321321321321321321321321320332233",
    "parse": [
      "=",
      13,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 238
  },
  {
    "role": "code",
    "lines": [
      "= 11 (unary 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210321011322101010321321321321321321321321321321321320332233",
    "parse": [
      "=",
      11,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 239
  },
  {
    "role": "code",
    "lines": [
      "= 1 (unary 1 0);"
    ],
    "code": "210321322101010321320332233",
    "parse": [
      "=",
      1,
      [
        "unary",
        1,
        0
      ]
    ],
    "stanza": 240
  },
  {
    "role": "code",
    "lines": [
      "= 9 (unary 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210321001322101010321321321321321321321321321320332233",
    "parse": [
      "=",
      9,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 241
  },
  {
    "role": "code",
    "lines": [
      "= 15 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210321111322101010321321321321321321321321321321321321321321321320332233",
    "parse": [
      "=",
      15,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 242
  },
  {
    "role": "code",
    "lines": [
      "= 8 (unary 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210321000322101010321321321321321321321321320332233",
    "parse": [
      "=",
      8,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 243
  },
  {
    "role": "code",
    "lines": [
      "= 7 (unary 1 1 1 1 1 1 1 0);"
    ],
    "code": "21032111322101010321321321321321321321320332233",
    "parse": [
      "=",
      7,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 244
  },
  {
    "role": "code",
    "lines": [
      "= 6 (unary 1 1 1 1 1 1 0);"
    ],
    "code": "21032110322101010321321321321321321320332233",
    "parse": [
      "=",
      6,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 245
  },
  {
    "role": "code",
    "lines": [
      "= 4 (unary 1 1 1 1 0);"
    ],
    "code": "21032100322101010321321321321320332233",
    "parse": [
      "=",
      4,
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 246
  },
  {
    "role": "code",
    "lines": [
      "= 12 (unary 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210321100322101010321321321321321321321321321321321321320332233",
    "parse": [
      "=",
      12,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 247
  },
  {
    "role": "code",
    "lines": [
      "= 10 (unary 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "code": "210321010322101010321321321321321321321321321321320332233",
    "parse": [
      "=",
      10,
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ]
    ],
    "stanza": 248
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 1 1 0) (unary 1 1 1 0);"
    ],
    "code": "21032210101032132132132132132132132132132033023210103221010103213213213213213213203322101010321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "+",
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 249
  },
  {
    "role": "code",
    "lines": [
      "= 9 | + 6 3;"
    ],
    "code": "21032100130232101032110321132233",
    "parse": [
      "=",
      9,
      [
        -1,
        "+",
        6,
        3
      ]
    ],
    "stanza": 250
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 0) | + (unary 0) (unary 1 1 1 1 1 1 0);"
    ],
    "code": "21032210101032132132132132132132033023210103221010103203322101010321321321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "+",
        [
          "unary",
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 251
  },
  {
    "role": "code",
    "lines": [
      "= 6 | + 0 6;"
    ],
    "code": "210321103023210103203211032233",
    "parse": [
      "=",
      6,
      [
        -1,
        "+",
        0,
        6
      ]
    ],
    "stanza": 252
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "code": "21032210101032132132132132132132132132132132033023210103221010103213213213213213213203322101010321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "+",
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 253
  },
  {
    "role": "code",
    "lines": [
      "= 10 | + 6 4;"
    ],
    "code": "210321010302321010321103210032233",
    "parse": [
      "=",
      10,
      [
        -1,
        "+",
        6,
        4
      ]
    ],
    "stanza": 254
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 0) | + (unary 1 1 1 0) (unary 1 1 0);"
    ],
    "code": "21032210101032132132132132132033023210103221010103213213213203322101010321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "+",
        [
          "unary",
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 255
  },
  {
    "role": "code",
    "lines": [
      "= 5 | + 3 2;"
    ],
    "code": "210321013023210103211321032233",
    "parse": [
      "=",
      5,
      [
        -1,
        "+",
        3,
        2
      ]
    ],
    "stanza": 256
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 0) | + (unary 1 0) (unary 0);"
    ],
    "code": "21032210101032132033023210103221010103213203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        0
      ],
      [
        -1,
        "+",
        [
          "unary",
          1,
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 257
  },
  {
    "role": "code",
    "lines": [
      "= 1 | + 1 0;"
    ],
    "code": "21032130232101032132032233",
    "parse": [
      "=",
      1,
      [
        -1,
        "+",
        1,
        0
      ]
    ],
    "stanza": 258
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 0) | + (unary 1 1 0) (unary 1 1 1 1 0);"
    ],
    "code": "21032210101032132132132132132132033023210103221010103213213203322101010321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "+",
        [
          "unary",
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 259
  },
  {
    "role": "code",
    "lines": [
      "= 6 | + 2 4;"
    ],
    "code": "2103211030232101032103210032233",
    "parse": [
      "=",
      6,
      [
        -1,
        "+",
        2,
        4
      ]
    ],
    "stanza": 260
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);"
    ],
    "code": "21032210101032132132132132132132132132132132132132033023210103221010103213213213213213213203322101010321321321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "+",
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 261
  },
  {
    "role": "code",
    "lines": [
      "= 12 | + 6 6;"
    ],
    "code": "210321100302321010321103211032233",
    "parse": [
      "=",
      12,
      [
        -1,
        "+",
        6,
        6
      ]
    ],
    "stanza": 262
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "code": "21032210101032132132132132132132132132033023210103221010103213213213213203322101010321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "+",
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 263
  },
  {
    "role": "code",
    "lines": [
      "= 8 | + 4 4;"
    ],
    "code": "210321000302321010321003210032233",
    "parse": [
      "=",
      8,
      [
        -1,
        "+",
        4,
        4
      ]
    ],
    "stanza": 264
  },
  {
    "role": "code",
    "lines": [
      "= (unary 0) | * (unary 0) (unary 1 1 0);"
    ],
    "code": "21032210101032033023210013221010103203322101010321321320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 265
  },
  {
    "role": "code",
    "lines": [
      "= 0 | * 0 2;"
    ],
    "code": "210320302321001320321032233",
    "parse": [
      "=",
      0,
      [
        -1,
        "*",
        0,
        2
      ]
    ],
    "stanza": 266
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 0) | * (unary 1 0) (unary 1 1 0);"
    ],
    "code": "21032210101032132132033023210013221010103213203322101010321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 267
  },
  {
    "role": "code",
    "lines": [
      "= 2 | * 1 2;"
    ],
    "code": "2103210302321001321321032233",
    "parse": [
      "=",
      2,
      [
        -1,
        "*",
        1,
        2
      ]
    ],
    "stanza": 268
  },
  {
    "role": "code",
    "lines": [
      "= (unary 0) | * (unary 0) (unary 1 0);"
    ],
    "code": "21032210101032033023210013221010103203322101010321320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          0
        ],
        [
          "unary",
          1,
          0
        ]
      ]
    ],
    "stanza": 269
  },
  {
    "role": "code",
    "lines": [
      "= 0 | * 0 1;"
    ],
    "code": "21032030232100132032132233",
    "parse": [
      "=",
      0,
      [
        -1,
        "*",
        0,
        1
      ]
    ],
    "stanza": 270
  },
  {
    "role": "code",
    "lines": [
      "= (unary 0) | * (unary 1 1 1 0) (unary 0);"
    ],
    "code": "21032210101032033023210013221010103213213213203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 271
  },
  {
    "role": "code",
    "lines": [
      "= 0 | * 3 0;"
    ],
    "code": "210320302321001321132032233",
    "parse": [
      "=",
      0,
      [
        -1,
        "*",
        3,
        0
      ]
    ],
    "stanza": 272
  },
  {
    "role": "code",
    "lines": [
      "= (unary 0) | * (unary 0) (unary 0);"
    ],
    "code": "21032210101032033023210013221010103203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 273
  },
  {
    "role": "code",
    "lines": [
      "= 0 | * 0 0;"
    ],
    "code": "21032030232100132032032233",
    "parse": [
      "=",
      0,
      [
        -1,
        "*",
        0,
        0
      ]
    ],
    "stanza": 274
  },
  {
    "role": "code",
    "lines": [
      "= (unary 0) | * (unary 1 0) (unary 0);"
    ],
    "code": "21032210101032033023210013221010103213203322101010320332233",
    "parse": [
      "=",
      [
        "unary",
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          0
        ],
        [
          "unary",
          0
        ]
      ]
    ],
    "stanza": 275
  },
  {
    "role": "code",
    "lines": [
      "= 0 | * 1 0;"
    ],
    "code": "21032030232100132132032233",
    "parse": [
      "=",
      0,
      [
        -1,
        "*",
        1,
        0
      ]
    ],
    "stanza": 276
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 0) | * (unary 1 1 0) (unary 1 1 0);"
    ],
    "code": "21032210101032132132132132033023210013221010103213213203322101010321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 277
  },
  {
    "role": "code",
    "lines": [
      "= 4 | * 2 2;"
    ],
    "code": "210321003023210013210321032233",
    "parse": [
      "=",
      4,
      [
        -1,
        "*",
        2,
        2
      ]
    ],
    "stanza": 278
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 1 1 0) | * (unary 1 1 1 0) (unary 1 1 1 0);"
    ],
    "code": "21032210101032132132132132132132132132132033023210013221010103213213213203322101010321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        1,
        0
      ],
      [
        -1,
        "*",
        [
          "unary",
          1,
          1,
          1,
          0
        ],
        [
          "unary",
          1,
          1,
          1,
          0
        ]
      ]
    ],
    "stanza": 279
  },
  {
    "role": "code",
    "lines": [
      "= 9 | * 3 3;"
    ],
    "code": "2103210013023210013211321132233",
    "parse": [
      "=",
      9,
      [
        -1,
        "*",
        3,
        3
      ]
    ],
    "stanza": 280
  },
  {
    "role": "file",
    "lines": [
      "== COS_Evaluation =="
    ],
    "stanza": 281
  },
  {
    "role": "comment",
    "lines": [
      "# MATH show some syntax variants"
    ],
    "section_description": "show some syntax variants",
    "section_category": "MATH",
    "section_index": 8,
    "stanza": 282
  },
  {
    "role": "code",
    "lines": [
      "= 6 6;"
    ],
    "code": "210321103211032233",
    "parse": [
      "=",
      6,
      6
    ],
    "stanza": 283
  },
  {
    "role": "code",
    "lines": [
      "= 6 (+ 1 5);"
    ],
    "code": "21032110322101032132101332233",
    "parse": [
      "=",
      6,
      [
        "+",
        1,
        5
      ]
    ],
    "stanza": 284
  },
  {
    "role": "code",
    "lines": [
      "= 6 | + 1 5;"
    ],
    "code": "210321103023210103213210132233",
    "parse": [
      "=",
      6,
      [
        -1,
        "+",
        1,
        5
      ]
    ],
    "stanza": 285
  },
  {
    "role": "code",
    "lines": [
      "= 6 | + 1 (+ 4 1);"
    ],
    "code": "21032110302321010321322101032100321332233",
    "parse": [
      "=",
      6,
      [
        -1,
        "+",
        1,
        [
          "+",
          4,
          1
        ]
      ]
    ],
    "stanza": 286
  },
  {
    "role": "code",
    "lines": [
      "= 6 | + 1 | + 4 1;"
    ],
    "code": "210321103023210103213023210103210032132233",
    "parse": [
      "=",
      6,
      [
        -1,
        "+",
        1,
        [
          -1,
          "+",
          4,
          1
        ]
      ]
    ],
    "stanza": 287
  },
  {
    "role": "code",
    "lines": [
      "= 6 (+ 1 5);"
    ],
    "code": "21032110322101032132101332233",
    "parse": [
      "=",
      6,
      [
        "+",
        1,
        5
      ]
    ],
    "stanza": 288
  },
  {
    "role": "code",
    "lines": [
      "= (+ 3 3) (+ 1 5);"
    ],
    "code": "2103221010321132113322101032132101332233",
    "parse": [
      "=",
      [
        "+",
        3,
        3
      ],
      [
        "+",
        1,
        5
      ]
    ],
    "stanza": 289
  },
  {
    "role": "code",
    "lines": [
      "= (+ 3 (- 5 2)) (+ 1 5);"
    ],
    "code": "21032210103211322101132101321033322101032132101332233",
    "parse": [
      "=",
      [
        "+",
        3,
        [
          "-",
          5,
          2
        ]
      ],
      [
        "+",
        1,
        5
      ]
    ],
    "stanza": 290
  },
  {
    "role": "code",
    "lines": [
      "= (+ 3 | - 5 2) (+ 1 5);"
    ],
    "code": "210322101032113023210113210132103322101032132101332233",
    "parse": [
      "=",
      [
        "+",
        3,
        [
          -1,
          "-",
          5,
          2
        ]
      ],
      [
        "+",
        1,
        5
      ]
    ],
    "stanza": 291
  },
  {
    "role": "code",
    "lines": [
      "= (+ 3 | - 5 2) | + 1 5;"
    ],
    "code": "2103221010321130232101132101321033023210103213210132233",
    "parse": [
      "=",
      [
        "+",
        3,
        [
          -1,
          "-",
          5,
          2
        ]
      ],
      [
        -1,
        "+",
        1,
        5
      ]
    ],
    "stanza": 292
  },
  {
    "role": "comment",
    "lines": [
      "# MATH show local assignment"
    ],
    "section_description": "show local assignment",
    "section_category": "MATH",
    "section_index": 9,
    "stanza": 293
  },
  {
    "role": "code",
    "lines": [
      "assign x 1 | = (x) 1;"
    ],
    "code": "21110321001103213023210322100110332132233",
    "parse": [
      "assign",
      "x",
      1,
      [
        -1,
        "=",
        [
          "x"
        ],
        1
      ]
    ],
    "stanza": 294
  },
  {
    "role": "code",
    "lines": [
      "assign x 2 | = (x) 2;"
    ],
    "code": "2111032100110321030232103221001103321032233",
    "parse": [
      "assign",
      "x",
      2,
      [
        -1,
        "=",
        [
          "x"
        ],
        2
      ]
    ],
    "stanza": 295
  },
  {
    "role": "code",
    "lines": [
      "assign x 3 | = (x) 3;"
    ],
    "code": "2111032100110321130232103221001103321132233",
    "parse": [
      "assign",
      "x",
      3,
      [
        -1,
        "=",
        [
          "x"
        ],
        3
      ]
    ],
    "stanza": 296
  },
  {
    "role": "code",
    "lines": [
      "assign x 3 | = 9 (* (x) (x));"
    ],
    "code": "211103210011032113023210321001322100132210011033221001103332233",
    "parse": [
      "assign",
      "x",
      3,
      [
        -1,
        "=",
        9,
        [
          "*",
          [
            "x"
          ],
          [
            "x"
          ]
        ]
      ]
    ],
    "stanza": 297
  },
  {
    "role": "code",
    "lines": [
      "assign x 4 | = 16 (* (x) (x));"
    ],
    "code": "21110321001103210030232103210000322100132210011033221001103332233",
    "parse": [
      "assign",
      "x",
      4,
      [
        -1,
        "=",
        16,
        [
          "*",
          [
            "x"
          ],
          [
            "x"
          ]
        ]
      ]
    ],
    "stanza": 298
  },
  {
    "role": "code",
    "lines": [
      "assign x (+) | = 7 (x 4 3);"
    ],
    "code": "211103210011032210103302321032111322100110321003211332233",
    "parse": [
      "assign",
      "x",
      [
        "+"
      ],
      [
        -1,
        "=",
        7,
        [
          "x",
          4,
          3
        ]
      ]
    ],
    "stanza": 299
  },
  {
    "role": "code",
    "lines": [
      "assign x (+) | = 12 (x 6 6);"
    ],
    "code": "21110321001103221010330232103211003221001103211032110332233",
    "parse": [
      "assign",
      "x",
      [
        "+"
      ],
      [
        -1,
        "=",
        12,
        [
          "x",
          6,
          6
        ]
      ]
    ],
    "stanza": 300
  },
  {
    "role": "code",
    "lines": [
      "assign x (+) | = 9 (x 7 2);"
    ],
    "code": "2111032100110322101033023210321001322100110321113210332233",
    "parse": [
      "assign",
      "x",
      [
        "+"
      ],
      [
        -1,
        "=",
        9,
        [
          "x",
          7,
          2
        ]
      ]
    ],
    "stanza": 301
  },
  {
    "role": "code",
    "lines": [
      "assign x (-) | = 1 (x 4 3);"
    ],
    "code": "2111032100110322101133023210321322100110321003211332233",
    "parse": [
      "assign",
      "x",
      [
        "-"
      ],
      [
        -1,
        "=",
        1,
        [
          "x",
          4,
          3
        ]
      ]
    ],
    "stanza": 302
  },
  {
    "role": "code",
    "lines": [
      "assign x (-) | = 0 (x 6 6);"
    ],
    "code": "21110321001103221011330232103203221001103211032110332233",
    "parse": [
      "assign",
      "x",
      [
        "-"
      ],
      [
        -1,
        "=",
        0,
        [
          "x",
          6,
          6
        ]
      ]
    ],
    "stanza": 303
  },
  {
    "role": "code",
    "lines": [
      "assign x (-) | = 5 (x 7 2);"
    ],
    "code": "211103210011032210113302321032101322100110321113210332233",
    "parse": [
      "assign",
      "x",
      [
        "-"
      ],
      [
        -1,
        "=",
        5,
        [
          "x",
          7,
          2
        ]
      ]
    ],
    "stanza": 304
  },
  {
    "role": "code",
    "lines": [
      "assign x (*) | = 12 (x 4 3);"
    ],
    "code": "2111032100110322100133023210321100322100110321003211332233",
    "parse": [
      "assign",
      "x",
      [
        "*"
      ],
      [
        -1,
        "=",
        12,
        [
          "x",
          4,
          3
        ]
      ]
    ],
    "stanza": 305
  },
  {
    "role": "code",
    "lines": [
      "assign x (*) | = 36 (x 6 6);"
    ],
    "code": "2111032100110322100133023210321001003221001103211032110332233",
    "parse": [
      "assign",
      "x",
      [
        "*"
      ],
      [
        -1,
        "=",
        36,
        [
          "x",
          6,
          6
        ]
      ]
    ],
    "stanza": 306
  },
  {
    "role": "code",
    "lines": [
      "assign x (*) | = 14 (x 7 2);"
    ],
    "code": "2111032100110322100133023210321110322100110321113210332233",
    "parse": [
      "assign",
      "x",
      [
        "*"
      ],
      [
        -1,
        "=",
        14,
        [
          "x",
          7,
          2
        ]
      ]
    ],
    "stanza": 307
  },
  {
    "role": "code",
    "lines": [
      "assign x (=) | x 4 4;"
    ],
    "code": "211103210011032210330232100110321003210032233",
    "parse": [
      "assign",
      "x",
      [
        "="
      ],
      [
        -1,
        "x",
        4,
        4
      ]
    ],
    "stanza": 308
  },
  {
    "role": "code",
    "lines": [
      "assign x (=) | x 4 (+ 2 2);"
    ],
    "code": "21110321001103221033023210011032100322101032103210332233",
    "parse": [
      "assign",
      "x",
      [
        "="
      ],
      [
        -1,
        "x",
        4,
        [
          "+",
          2,
          2
        ]
      ]
    ],
    "stanza": 309
  },
  {
    "role": "code",
    "lines": [
      "assign x 1 | assign y 2 | = 3 (+ (x) (y));"
    ],
    "code": "211103210011032130232111032110001321030232103211322101032210011033221100013332233",
    "parse": [
      "assign",
      "x",
      1,
      [
        -1,
        "assign",
        "y",
        2,
        [
          -1,
          "=",
          3,
          [
            "+",
            [
              "x"
            ],
            [
              "y"
            ]
          ]
        ]
      ]
    ],
    "stanza": 310
  },
  {
    "role": "code",
    "lines": [
      "assign x 2 | assign y 7 | = 5 (- (y) (x));"
    ],
    "code": "211103210011032103023211103211000132111302321032101322101132211000133221001103332233",
    "parse": [
      "assign",
      "x",
      2,
      [
        -1,
        "assign",
        "y",
        7,
        [
          -1,
          "=",
          5,
          [
            "-",
            [
              "y"
            ],
            [
              "x"
            ]
          ]
        ]
      ]
    ],
    "stanza": 311
  },
  {
    "role": "code",
    "lines": [
      "assign x (+) | assign y 3 | = 4 (x 1 (y));"
    ],
    "code": "2111032100110322101033023211103211000132113023210321003221001103213221100013332233",
    "parse": [
      "assign",
      "x",
      [
        "+"
      ],
      [
        -1,
        "assign",
        "y",
        3,
        [
          -1,
          "=",
          4,
          [
            "x",
            1,
            [
              "y"
            ]
          ]
        ]
      ]
    ],
    "stanza": 312
  },
  {
    "role": "comment",
    "lines": [
      "# Scoping and other odd corners."
    ],
    "stanza": 313
  },
  {
    "role": "code",
    "lines": [
      "= 2 | assign x 1 | + $x 1;"
    ],
    "code": "2103210302321110321001103213023210103221032100110332132233",
    "parse": [
      "=",
      2,
      [
        -1,
        "assign",
        "x",
        1,
        [
          -1,
          "+",
          [
            -2,
            "x"
          ],
          1
        ]
      ]
    ],
    "stanza": 314
  },
  {
    "role": "code",
    "lines": [
      "= 1 | assign x 1 $x;"
    ],
    "code": "210321302321110321001103213221032100110332233",
    "parse": [
      "=",
      1,
      [
        -1,
        "assign",
        "x",
        1,
        [
          -2,
          "x"
        ]
      ]
    ],
    "stanza": 315
  },
  {
    "role": "code",
    "lines": [
      "= 14 | assign x 1 14;"
    ],
    "code": "2103211103023211103210011032132111032233",
    "parse": [
      "=",
      14,
      [
        -1,
        "assign",
        "x",
        1,
        14
      ]
    ],
    "stanza": 316
  },
  {
    "role": "code",
    "lines": [
      "= 4 | assign x (assign y 3 | + 1 $y) $x;"
    ],
    "code": "210321003023211103210011032211103211000132113023210103213221032110001333221032100110332233",
    "parse": [
      "=",
      4,
      [
        -1,
        "assign",
        "x",
        [
          "assign",
          "y",
          3,
          [
            -1,
            "+",
            1,
            [
              -2,
              "y"
            ]
          ]
        ],
        [
          -2,
          "x"
        ]
      ]
    ],
    "stanza": 317
  },
  {
    "role": "code",
    "lines": [
      "= 4 | assign x (assign x 3 | + 1 $x) $x;"
    ],
    "code": "210321003023211103210011032211103210011032113023210103213221032100110333221032100110332233",
    "parse": [
      "=",
      4,
      [
        -1,
        "assign",
        "x",
        [
          "assign",
          "x",
          3,
          [
            -1,
            "+",
            1,
            [
              -2,
              "x"
            ]
          ]
        ],
        [
          -2,
          "x"
        ]
      ]
    ],
    "stanza": 318
  },
  {
    "role": "comment",
    "lines": [
      "# Show alternate lookup syntax."
    ],
    "stanza": 319
  },
  {
    "role": "code",
    "lines": [
      "assign x 1 | = (x) 1;"
    ],
    "code": "21110321001103213023210322100110332132233",
    "parse": [
      "assign",
      "x",
      1,
      [
        -1,
        "=",
        [
          "x"
        ],
        1
      ]
    ],
    "stanza": 320
  },
  {
    "role": "code",
    "lines": [
      "assign x 1 | = $x 1;"
    ],
    "code": "211103210011032130232103221032100110332132233",
    "parse": [
      "assign",
      "x",
      1,
      [
        -1,
        "=",
        [
          -2,
          "x"
        ],
        1
      ]
    ],
    "stanza": 321
  },
  {
    "role": "code",
    "lines": [
      "assign x 4 | = 16 (* (x) (x));"
    ],
    "code": "21110321001103210030232103210000322100132210011033221001103332233",
    "parse": [
      "assign",
      "x",
      4,
      [
        -1,
        "=",
        16,
        [
          "*",
          [
            "x"
          ],
          [
            "x"
          ]
        ]
      ]
    ],
    "stanza": 322
  },
  {
    "role": "code",
    "lines": [
      "assign x 4 | = 16 (* $x $x);"
    ],
    "code": "2111032100110321003023210321000032210013221032100110332210321001103332233",
    "parse": [
      "assign",
      "x",
      4,
      [
        -1,
        "=",
        16,
        [
          "*",
          [
            -2,
            "x"
          ],
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "stanza": 323
  },
  {
    "role": "code",
    "lines": [
      "assign x 4 | = 16 | * $x $x;"
    ],
    "code": "21110321001103210030232103210000302321001322103210011033221032100110332233",
    "parse": [
      "assign",
      "x",
      4,
      [
        -1,
        "=",
        16,
        [
          -1,
          "*",
          [
            -2,
            "x"
          ],
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "stanza": 324
  },
  {
    "role": "comment",
    "lines": [
      "# Now for functions."
    ],
    "stanza": 325
  },
  {
    "role": "code",
    "lines": [
      "= 0 | (? x $x) 0;"
    ],
    "code": "21032030232211003210011032210321001103332032233",
    "parse": [
      "=",
      0,
      [
        -1,
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        0
      ]
    ],
    "stanza": 326
  },
  {
    "role": "code",
    "lines": [
      "= 1 | (? x $x) 1;"
    ],
    "code": "21032130232211003210011032210321001103332132233",
    "parse": [
      "=",
      1,
      [
        -1,
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        1
      ]
    ],
    "stanza": 327
  },
  {
    "role": "code",
    "lines": [
      "= 2 | (? x $x) 2;"
    ],
    "code": "2103210302322110032100110322103210011033321032233",
    "parse": [
      "=",
      2,
      [
        -1,
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        2
      ]
    ],
    "stanza": 328
  },
  {
    "role": "code",
    "lines": [
      "= 3 | (? x $x) 3;"
    ],
    "code": "2103211302322110032100110322103210011033321132233",
    "parse": [
      "=",
      3,
      [
        -1,
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        3
      ]
    ],
    "stanza": 329
  },
  {
    "role": "code",
    "lines": [
      "= 4 | (? x $x) 4;"
    ],
    "code": "210321003023221100321001103221032100110333210032233",
    "parse": [
      "=",
      4,
      [
        -1,
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        4
      ]
    ],
    "stanza": 330
  },
  {
    "role": "code",
    "lines": [
      "= 5 | (? x $x) 5;"
    ],
    "code": "210321013023221100321001103221032100110333210132233",
    "parse": [
      "=",
      5,
      [
        -1,
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        5
      ]
    ],
    "stanza": 331
  },
  {
    "role": "code",
    "lines": [
      "= 1 | (? x | + 1 $x) 0;"
    ],
    "code": "21032130232211003210011030232101032132210321001103332032233",
    "parse": [
      "=",
      1,
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            1,
            [
              -2,
              "x"
            ]
          ]
        ],
        0
      ]
    ],
    "stanza": 332
  },
  {
    "role": "code",
    "lines": [
      "= 2 | (? x | + 1 $x) 1;"
    ],
    "code": "210321030232211003210011030232101032132210321001103332132233",
    "parse": [
      "=",
      2,
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            1,
            [
              -2,
              "x"
            ]
          ]
        ],
        1
      ]
    ],
    "stanza": 333
  },
  {
    "role": "code",
    "lines": [
      "= 3 | (? x | + 1 $x) 2;"
    ],
    "code": "2103211302322110032100110302321010321322103210011033321032233",
    "parse": [
      "=",
      3,
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            1,
            [
              -2,
              "x"
            ]
          ]
        ],
        2
      ]
    ],
    "stanza": 334
  },
  {
    "role": "code",
    "lines": [
      "= 4 | (? x | + 1 $x) 3;"
    ],
    "code": "21032100302322110032100110302321010321322103210011033321132233",
    "parse": [
      "=",
      4,
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            1,
            [
              -2,
              "x"
            ]
          ]
        ],
        3
      ]
    ],
    "stanza": 335
  },
  {
    "role": "code",
    "lines": [
      "= 5 | (? x | + 1 $x) 4;"
    ],
    "code": "210321013023221100321001103023210103213221032100110333210032233",
    "parse": [
      "=",
      5,
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            1,
            [
              -2,
              "x"
            ]
          ]
        ],
        4
      ]
    ],
    "stanza": 336
  },
  {
    "role": "code",
    "lines": [
      "= 6 | (? x | + 1 $x) 5;"
    ],
    "code": "210321103023221100321001103023210103213221032100110333210132233",
    "parse": [
      "=",
      6,
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            1,
            [
              -2,
              "x"
            ]
          ]
        ],
        5
      ]
    ],
    "stanza": 337
  },
  {
    "role": "code",
    "lines": [
      "= 0 | (? x | * $x $x) 0;"
    ],
    "code": "2103203023221100321001103023210013221032100110332210321001103332032233",
    "parse": [
      "=",
      0,
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -2,
              "x"
            ]
          ]
        ],
        0
      ]
    ],
    "stanza": 338
  },
  {
    "role": "code",
    "lines": [
      "= 1 | (? x | * $x $x) 1;"
    ],
    "code": "2103213023221100321001103023210013221032100110332210321001103332132233",
    "parse": [
      "=",
      1,
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -2,
              "x"
            ]
          ]
        ],
        1
      ]
    ],
    "stanza": 339
  },
  {
    "role": "code",
    "lines": [
      "= 4 | (? x | * $x $x) 2;"
    ],
    "code": "2103210030232211003210011030232100132210321001103322103210011033321032233",
    "parse": [
      "=",
      4,
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -2,
              "x"
            ]
          ]
        ],
        2
      ]
    ],
    "stanza": 340
  },
  {
    "role": "code",
    "lines": [
      "= 9 | (? x | * $x $x) 3;"
    ],
    "code": "21032100130232211003210011030232100132210321001103322103210011033321132233",
    "parse": [
      "=",
      9,
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -2,
              "x"
            ]
          ]
        ],
        3
      ]
    ],
    "stanza": 341
  },
  {
    "role": "code",
    "lines": [
      "= 16 | (? x | * $x $x) 4;"
    ],
    "code": "2103210000302322110032100110302321001322103210011033221032100110333210032233",
    "parse": [
      "=",
      16,
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -2,
              "x"
            ]
          ]
        ],
        4
      ]
    ],
    "stanza": 342
  },
  {
    "role": "code",
    "lines": [
      "= 25 | (? x | * $x $x) 5;"
    ],
    "code": "2103211001302322110032100110302321001322103210011033221032100110333210132233",
    "parse": [
      "=",
      25,
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -2,
              "x"
            ]
          ]
        ],
        5
      ]
    ],
    "stanza": 343
  },
  {
    "role": "code",
    "lines": [
      "= 0 | (? y | * $y $y) 0;"
    ],
    "code": "2103203023221100321100013023210013221032110001332210321100013332032233",
    "parse": [
      "=",
      0,
      [
        -1,
        [
          "?",
          "y",
          [
            -1,
            "*",
            [
              -2,
              "y"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        0
      ]
    ],
    "stanza": 344
  },
  {
    "role": "code",
    "lines": [
      "= 1 | (? y | * $y $y) 1;"
    ],
    "code": "2103213023221100321100013023210013221032110001332210321100013332132233",
    "parse": [
      "=",
      1,
      [
        -1,
        [
          "?",
          "y",
          [
            -1,
            "*",
            [
              -2,
              "y"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        1
      ]
    ],
    "stanza": 345
  },
  {
    "role": "code",
    "lines": [
      "= 4 | (? y | * $y $y) 2;"
    ],
    "code": "2103210030232211003211000130232100132210321100013322103211000133321032233",
    "parse": [
      "=",
      4,
      [
        -1,
        [
          "?",
          "y",
          [
            -1,
            "*",
            [
              -2,
              "y"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        2
      ]
    ],
    "stanza": 346
  },
  {
    "role": "code",
    "lines": [
      "= 9 | (? y | * $y $y) 3;"
    ],
    "code": "21032100130232211003211000130232100132210321100013322103211000133321132233",
    "parse": [
      "=",
      9,
      [
        -1,
        [
          "?",
          "y",
          [
            -1,
            "*",
            [
              -2,
              "y"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        3
      ]
    ],
    "stanza": 347
  },
  {
    "role": "code",
    "lines": [
      "= 16 | (? y | * $y $y) 4;"
    ],
    "code": "2103210000302322110032110001302321001322103211000133221032110001333210032233",
    "parse": [
      "=",
      16,
      [
        -1,
        [
          "?",
          "y",
          [
            -1,
            "*",
            [
              -2,
              "y"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        4
      ]
    ],
    "stanza": 348
  },
  {
    "role": "code",
    "lines": [
      "= 25 | (? y | * $y $y) 5;"
    ],
    "code": "2103211001302322110032110001302321001322103211000133221032110001333210132233",
    "parse": [
      "=",
      25,
      [
        -1,
        [
          "?",
          "y",
          [
            -1,
            "*",
            [
              -2,
              "y"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        5
      ]
    ],
    "stanza": 349
  },
  {
    "role": "comment",
    "lines": [
      "# Throw in a little mind-boggle."
    ],
    "stanza": 350
  },
  {
    "role": "code",
    "lines": [
      "= 0 | (? + | * $+ $+) 0;"
    ],
    "code": "2103203023221100321010302321001322103210103322103210103332032233",
    "parse": [
      "=",
      0,
      [
        -1,
        [
          "?",
          "+",
          [
            -1,
            "*",
            [
              -2,
              "+"
            ],
            [
              -2,
              "+"
            ]
          ]
        ],
        0
      ]
    ],
    "stanza": 351
  },
  {
    "role": "code",
    "lines": [
      "= 1 | (? + | * $+ $+) 1;"
    ],
    "code": "2103213023221100321010302321001322103210103322103210103332132233",
    "parse": [
      "=",
      1,
      [
        -1,
        [
          "?",
          "+",
          [
            -1,
            "*",
            [
              -2,
              "+"
            ],
            [
              -2,
              "+"
            ]
          ]
        ],
        1
      ]
    ],
    "stanza": 352
  },
  {
    "role": "code",
    "lines": [
      "= 4 | (? + | * $+ $+) 2;"
    ],
    "code": "2103210030232211003210103023210013221032101033221032101033321032233",
    "parse": [
      "=",
      4,
      [
        -1,
        [
          "?",
          "+",
          [
            -1,
            "*",
            [
              -2,
              "+"
            ],
            [
              -2,
              "+"
            ]
          ]
        ],
        2
      ]
    ],
    "stanza": 353
  },
  {
    "role": "code",
    "lines": [
      "= 9 | (? + | * $+ $+) 3;"
    ],
    "code": "21032100130232211003210103023210013221032101033221032101033321132233",
    "parse": [
      "=",
      9,
      [
        -1,
        [
          "?",
          "+",
          [
            -1,
            "*",
            [
              -2,
              "+"
            ],
            [
              -2,
              "+"
            ]
          ]
        ],
        3
      ]
    ],
    "stanza": 354
  },
  {
    "role": "code",
    "lines": [
      "= 16 | (? + | * $+ $+) 4;"
    ],
    "code": "2103210000302322110032101030232100132210321010332210321010333210032233",
    "parse": [
      "=",
      16,
      [
        -1,
        [
          "?",
          "+",
          [
            -1,
            "*",
            [
              -2,
              "+"
            ],
            [
              -2,
              "+"
            ]
          ]
        ],
        4
      ]
    ],
    "stanza": 355
  },
  {
    "role": "code",
    "lines": [
      "= 25 | (? + | * $+ $+) 5;"
    ],
    "code": "2103211001302322110032101030232100132210321010332210321010333210132233",
    "parse": [
      "=",
      25,
      [
        -1,
        [
          "?",
          "+",
          [
            -1,
            "*",
            [
              -2,
              "+"
            ],
            [
              -2,
              "+"
            ]
          ]
        ],
        5
      ]
    ],
    "stanza": 356
  },
  {
    "role": "code",
    "lines": [
      "= 0 | (? 5 | * $5 $5) 0;"
    ],
    "code": "2103203023221100321013023210013221032101332210321013332032233",
    "parse": [
      "=",
      0,
      [
        -1,
        [
          "?",
          5,
          [
            -1,
            "*",
            [
              -2,
              5
            ],
            [
              -2,
              5
            ]
          ]
        ],
        0
      ]
    ],
    "stanza": 357
  },
  {
    "role": "code",
    "lines": [
      "= 1 | (? 5 | * $5 $5) 1;"
    ],
    "code": "2103213023221100321013023210013221032101332210321013332132233",
    "parse": [
      "=",
      1,
      [
        -1,
        [
          "?",
          5,
          [
            -1,
            "*",
            [
              -2,
              5
            ],
            [
              -2,
              5
            ]
          ]
        ],
        1
      ]
    ],
    "stanza": 358
  },
  {
    "role": "code",
    "lines": [
      "= 4 | (? 5 | * $5 $5) 2;"
    ],
    "code": "2103210030232211003210130232100132210321013322103210133321032233",
    "parse": [
      "=",
      4,
      [
        -1,
        [
          "?",
          5,
          [
            -1,
            "*",
            [
              -2,
              5
            ],
            [
              -2,
              5
            ]
          ]
        ],
        2
      ]
    ],
    "stanza": 359
  },
  {
    "role": "code",
    "lines": [
      "= 9 | (? 5 | * $5 $5) 3;"
    ],
    "code": "21032100130232211003210130232100132210321013322103210133321132233",
    "parse": [
      "=",
      9,
      [
        -1,
        [
          "?",
          5,
          [
            -1,
            "*",
            [
              -2,
              5
            ],
            [
              -2,
              5
            ]
          ]
        ],
        3
      ]
    ],
    "stanza": 360
  },
  {
    "role": "code",
    "lines": [
      "= 16 | (? 5 | * $5 $5) 4;"
    ],
    "code": "2103210000302322110032101302321001322103210133221032101333210032233",
    "parse": [
      "=",
      16,
      [
        -1,
        [
          "?",
          5,
          [
            -1,
            "*",
            [
              -2,
              5
            ],
            [
              -2,
              5
            ]
          ]
        ],
        4
      ]
    ],
    "stanza": 361
  },
  {
    "role": "code",
    "lines": [
      "= 25 | (? 5 | * $5 $5) 5;"
    ],
    "code": "2103211001302322110032101302321001322103210133221032101333210132233",
    "parse": [
      "=",
      25,
      [
        -1,
        [
          "?",
          5,
          [
            -1,
            "*",
            [
              -2,
              5
            ],
            [
              -2,
              5
            ]
          ]
        ],
        5
      ]
    ],
    "stanza": 362
  },
  {
    "role": "comment",
    "lines": [
      "# Functions in a box."
    ],
    "stanza": 363
  },
  {
    "role": "code",
    "lines": [
      "assign x (? y | * $y $y) | = 25 | x 5;"
    ],
    "code": "21110321001103221100321100013023210013221032110001332210321100013330232103211001302321001103210132233",
    "parse": [
      "assign",
      "x",
      [
        "?",
        "y",
        [
          -1,
          "*",
          [
            -2,
            "y"
          ],
          [
            -2,
            "y"
          ]
        ]
      ],
      [
        -1,
        "=",
        25,
        [
          -1,
          "x",
          5
        ]
      ]
    ],
    "stanza": 364
  },
  {
    "role": "code",
    "lines": [
      "assign x (? y | + $y 1) | = 6 | x 5;"
    ],
    "code": "2111032100110322110032110001302321010322103211000133213302321032110302321001103210132233",
    "parse": [
      "assign",
      "x",
      [
        "?",
        "y",
        [
          -1,
          "+",
          [
            -2,
            "y"
          ],
          1
        ]
      ],
      [
        -1,
        "=",
        6,
        [
          -1,
          "x",
          5
        ]
      ]
    ],
    "stanza": 365
  },
  {
    "role": "code",
    "lines": [
      "assign x (? x | + $x 1) | = 6 | x 5;"
    ],
    "code": "2111032100110322110032100110302321010322103210011033213302321032110302321001103210132233",
    "parse": [
      "assign",
      "x",
      [
        "?",
        "x",
        [
          -1,
          "+",
          [
            -2,
            "x"
          ],
          1
        ]
      ],
      [
        -1,
        "=",
        6,
        [
          -1,
          "x",
          5
        ]
      ]
    ],
    "stanza": 366
  },
  {
    "role": "code",
    "lines": [
      "assign y (? x | + $x 1) | = 6 | y 5;"
    ],
    "code": "2111032110001322110032100110302321010322103210011033213302321032110302321100013210132233",
    "parse": [
      "assign",
      "y",
      [
        "?",
        "x",
        [
          -1,
          "+",
          [
            -2,
            "x"
          ],
          1
        ]
      ],
      [
        -1,
        "=",
        6,
        [
          -1,
          "y",
          5
        ]
      ]
    ],
    "stanza": 367
  },
  {
    "role": "comment",
    "lines": [
      "# Serve some curry."
    ],
    "stanza": 368
  },
  {
    "role": "code",
    "lines": [
      "= 52 | * 4 13;"
    ],
    "code": "210321101003023210013210032110132233",
    "parse": [
      "=",
      52,
      [
        -1,
        "*",
        4,
        13
      ]
    ],
    "stanza": 369
  },
  {
    "role": "code",
    "lines": [
      "= 52 | (? x | * $x 4) 13;"
    ],
    "code": "210321101003023221100321001103023210013221032100110332100332110132233",
    "parse": [
      "=",
      52,
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            4
          ]
        ],
        13
      ]
    ],
    "stanza": 370
  },
  {
    "role": "code",
    "lines": [
      "= 52 | (? x | ? y | * $x $y) 13 4;"
    ],
    "code": "2103211010030232211003210011030232110032110001302321001322103210011033221032110001333211013210032233",
    "parse": [
      "=",
      52,
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "?",
            "y",
            [
              -1,
              "*",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ],
        13,
        4
      ]
    ],
    "stanza": 371
  },
  {
    "role": "code",
    "lines": [
      "= 53 | (? x | ? y | + 1 | * $x $y) 13 4;"
    ],
    "code": "2103211010130232211003210011030232110032110001302321010321302321001322103210011033221032110001333211013210032233",
    "parse": [
      "=",
      53,
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "?",
            "y",
            [
              -1,
              "+",
              1,
              [
                -1,
                "*",
                [
                  -2,
                  "x"
                ],
                [
                  -2,
                  "y"
                ]
              ]
            ]
          ]
        ],
        13,
        4
      ]
    ],
    "stanza": 372
  },
  {
    "role": "code",
    "lines": [
      "assign z (? x | ? y | + 1 | * $x $y) | = 53 | z 13 4;"
    ],
    "code": "21110321100103221100321001103023211003211000130232101032130232100132210321001103322103211000133302321032110101302321100103211013210032233",
    "parse": [
      "assign",
      "z",
      [
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "+",
            1,
            [
              -1,
              "*",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ]
      ],
      [
        -1,
        "=",
        53,
        [
          -1,
          "z",
          13,
          4
        ]
      ]
    ],
    "stanza": 373
  },
  {
    "role": "file",
    "lines": [
      "== COS_DefineFunction =="
    ],
    "stanza": 374
  },
  {
    "role": "comment",
    "lines": [
      "# MATH demonstrate existence of memory"
    ],
    "section_description": "demonstrate existence of memory",
    "section_category": "MATH",
    "section_index": 10,
    "stanza": 375
  },
  {
    "role": "code",
    "lines": [
      "define meaning-of-life-universe-everything 39;"
    ],
    "code": "21101321100113210011132233",
    "parse": [
      "define",
      "meaning-of-life-universe-everything",
      39
    ],
    "stanza": 376
  },
  {
    "role": "code",
    "lines": [
      "= 39 $meaning-of-life-universe-everything;"
    ],
    "code": "210321001113221032110011332233",
    "parse": [
      "=",
      39,
      [
        -2,
        "meaning-of-life-universe-everything"
      ]
    ],
    "stanza": 377
  },
  {
    "role": "code",
    "lines": [
      "= $meaning-of-life-universe-everything 39;"
    ],
    "code": "210322103211001133210011132233",
    "parse": [
      "=",
      [
        -2,
        "meaning-of-life-universe-everything"
      ],
      39
    ],
    "stanza": 378
  },
  {
    "role": "code",
    "lines": [
      "define meaning-of-life-universe-everything 40;"
    ],
    "code": "21101321100113210100032233",
    "parse": [
      "define",
      "meaning-of-life-universe-everything",
      40
    ],
    "stanza": 379
  },
  {
    "role": "code",
    "lines": [
      "= $meaning-of-life-universe-everything 40;"
    ],
    "code": "210322103211001133210100032233",
    "parse": [
      "=",
      [
        -2,
        "meaning-of-life-universe-everything"
      ],
      40
    ],
    "stanza": 380
  },
  {
    "role": "code",
    "lines": [
      "define meaning-of-life-universe-everything | + 1 $meaning-of-life-universe-everything;"
    ],
    "code": "21101321100113023210103213221032110011332233",
    "parse": [
      "define",
      "meaning-of-life-universe-everything",
      [
        -1,
        "+",
        1,
        [
          -2,
          "meaning-of-life-universe-everything"
        ]
      ]
    ],
    "stanza": 381
  },
  {
    "role": "code",
    "lines": [
      "= $meaning-of-life-universe-everything 41;"
    ],
    "code": "210322103211001133210100132233",
    "parse": [
      "=",
      [
        -2,
        "meaning-of-life-universe-everything"
      ],
      41
    ],
    "stanza": 382
  },
  {
    "role": "code",
    "lines": [
      "assign x (+ 1 $meaning-of-life-universe-everything) | define meaning-of-life-universe-everything $x;"
    ],
    "code": "21110321001103221010321322103211001133302321101321100113221032100110332233",
    "parse": [
      "assign",
      "x",
      [
        "+",
        1,
        [
          -2,
          "meaning-of-life-universe-everything"
        ]
      ],
      [
        -1,
        "define",
        "meaning-of-life-universe-everything",
        [
          -2,
          "x"
        ]
      ]
    ],
    "stanza": 383
  },
  {
    "role": "code",
    "lines": [
      "= $meaning-of-life-universe-everything 42;"
    ],
    "code": "210322103211001133210101032233",
    "parse": [
      "=",
      [
        -2,
        "meaning-of-life-universe-everything"
      ],
      42
    ],
    "stanza": 384
  },
  {
    "role": "code",
    "lines": [
      "define square | ? x | * $x $x;"
    ],
    "code": "211013211010030232110032100110302321001322103210011033221032100110332233",
    "parse": [
      "define",
      "square",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "*",
          [
            -2,
            "x"
          ],
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "stanza": 385
  },
  {
    "role": "code",
    "lines": [
      "= 9 | square 3;"
    ],
    "code": "21032100130232110100321132233",
    "parse": [
      "=",
      9,
      [
        -1,
        "square",
        3
      ]
    ],
    "stanza": 386
  },
  {
    "role": "code",
    "lines": [
      "= 81 | square 9;"
    ],
    "code": "2103210100013023211010032100132233",
    "parse": [
      "=",
      81,
      [
        -1,
        "square",
        9
      ]
    ],
    "stanza": 387
  },
  {
    "role": "code",
    "lines": [
      "= 1 | square 1;"
    ],
    "code": "2103213023211010032132233",
    "parse": [
      "=",
      1,
      [
        -1,
        "square",
        1
      ]
    ],
    "stanza": 388
  },
  {
    "role": "code",
    "lines": [
      "= 4 | square 2;"
    ],
    "code": "2103210030232110100321032233",
    "parse": [
      "=",
      4,
      [
        -1,
        "square",
        2
      ]
    ],
    "stanza": 389
  },
  {
    "role": "code",
    "lines": [
      "= 0 | square 0;"
    ],
    "code": "2103203023211010032032233",
    "parse": [
      "=",
      0,
      [
        -1,
        "square",
        0
      ]
    ],
    "stanza": 390
  },
  {
    "role": "code",
    "lines": [
      "define +:+ | ? x | + $x 1;"
    ],
    "code": "2110132110101302321100321001103023210103221032100110332132233",
    "parse": [
      "define",
      "+:+",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "+",
          [
            -2,
            "x"
          ],
          1
        ]
      ]
    ],
    "stanza": 391
  },
  {
    "role": "code",
    "lines": [
      "= 4 | +:+ 3;"
    ],
    "code": "2103210030232110101321132233",
    "parse": [
      "=",
      4,
      [
        -1,
        "+:+",
        3
      ]
    ],
    "stanza": 392
  },
  {
    "role": "code",
    "lines": [
      "= 10 | +:+ 9;"
    ],
    "code": "2103210103023211010132100132233",
    "parse": [
      "=",
      10,
      [
        -1,
        "+:+",
        9
      ]
    ],
    "stanza": 393
  },
  {
    "role": "code",
    "lines": [
      "= 2 | +:+ 1;"
    ],
    "code": "21032103023211010132132233",
    "parse": [
      "=",
      2,
      [
        -1,
        "+:+",
        1
      ]
    ],
    "stanza": 394
  },
  {
    "role": "code",
    "lines": [
      "= 3 | +:+ 2;"
    ],
    "code": "210321130232110101321032233",
    "parse": [
      "=",
      3,
      [
        -1,
        "+:+",
        2
      ]
    ],
    "stanza": 395
  },
  {
    "role": "code",
    "lines": [
      "= 1 | +:+ 0;"
    ],
    "code": "2103213023211010132032233",
    "parse": [
      "=",
      1,
      [
        -1,
        "+:+",
        0
      ]
    ],
    "stanza": 396
  },
  {
    "role": "file",
    "lines": [
      "== COS_TrueFalse =="
    ],
    "stanza": 397
  },
  {
    "role": "comment",
    "lines": [
      "# MATH use equality for truth values",
      "# Not quite committing to a *type* for truth values in the message, side-stepping that issue until we really need to decide it."
    ],
    "section_description": "use equality for truth values",
    "section_category": "MATH",
    "section_index": 11,
    "stanza": 398
  },
  {
    "role": "code",
    "lines": [
      "define true | = 0 0;"
    ],
    "code": "2110132110110302321032032032233",
    "parse": [
      "define",
      "true",
      [
        -1,
        "=",
        0,
        0
      ]
    ],
    "stanza": 399
  },
  {
    "role": "code",
    "lines": [
      "define false | = 0 1;"
    ],
    "code": "2110132110111302321032032132233",
    "parse": [
      "define",
      "false",
      [
        -1,
        "=",
        0,
        1
      ]
    ],
    "stanza": 400
  },
  {
    "role": "code",
    "lines": [
      "= $true (= 2 2);"
    ],
    "code": "210322103211011033221032103210332233",
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        "=",
        2,
        2
      ]
    ],
    "stanza": 401
  },
  {
    "role": "code",
    "lines": [
      "= $true (> 4 2);"
    ],
    "code": "2103221032110110332211321003210332233",
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        ">",
        4,
        2
      ]
    ],
    "stanza": 402
  },
  {
    "role": "code",
    "lines": [
      "= $true (= 1 1);"
    ],
    "code": "2103221032110110332210321321332233",
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        "=",
        1,
        1
      ]
    ],
    "stanza": 403
  },
  {
    "role": "code",
    "lines": [
      "= $true (> 6 4);"
    ],
    "code": "21032210321101103322113211032100332233",
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        ">",
        6,
        4
      ]
    ],
    "stanza": 404
  },
  {
    "role": "code",
    "lines": [
      "= $true (< 3 4);"
    ],
    "code": "210322103211011033221321132100332233",
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        "<",
        3,
        4
      ]
    ],
    "stanza": 405
  },
  {
    "role": "code",
    "lines": [
      "= (= 5 5) $true;"
    ],
    "code": "21032210321013210133221032110110332233",
    "parse": [
      "=",
      [
        "=",
        5,
        5
      ],
      [
        -2,
        "true"
      ]
    ],
    "stanza": 406
  },
  {
    "role": "code",
    "lines": [
      "= (= 3 3) $true;"
    ],
    "code": "210322103211321133221032110110332233",
    "parse": [
      "=",
      [
        "=",
        3,
        3
      ],
      [
        -2,
        "true"
      ]
    ],
    "stanza": 407
  },
  {
    "role": "code",
    "lines": [
      "= (= 4 4) $true;"
    ],
    "code": "21032210321003210033221032110110332233",
    "parse": [
      "=",
      [
        "=",
        4,
        4
      ],
      [
        -2,
        "true"
      ]
    ],
    "stanza": 408
  },
  {
    "role": "code",
    "lines": [
      "= (= 3 3) $true;"
    ],
    "code": "210322103211321133221032110110332233",
    "parse": [
      "=",
      [
        "=",
        3,
        3
      ],
      [
        -2,
        "true"
      ]
    ],
    "stanza": 409
  },
  {
    "role": "code",
    "lines": [
      "= (= 0 0) $true;"
    ],
    "code": "2103221032032033221032110110332233",
    "parse": [
      "=",
      [
        "=",
        0,
        0
      ],
      [
        -2,
        "true"
      ]
    ],
    "stanza": 410
  },
  {
    "role": "code",
    "lines": [
      "= $false (< 6 2);"
    ],
    "code": "210322103211011133221321103210332233",
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        "<",
        6,
        2
      ]
    ],
    "stanza": 411
  },
  {
    "role": "code",
    "lines": [
      "= $false (< 4 2);"
    ],
    "code": "210322103211011133221321003210332233",
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        "<",
        4,
        2
      ]
    ],
    "stanza": 412
  },
  {
    "role": "code",
    "lines": [
      "= $false (< 4 1);"
    ],
    "code": "21032210321101113322132100321332233",
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        "<",
        4,
        1
      ]
    ],
    "stanza": 413
  },
  {
    "role": "code",
    "lines": [
      "= $false (> 0 0);"
    ],
    "code": "2103221032110111332211320320332233",
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        ">",
        0,
        0
      ]
    ],
    "stanza": 414
  },
  {
    "role": "code",
    "lines": [
      "= $false (> 0 5);"
    ],
    "code": "210322103211011133221132032101332233",
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        ">",
        0,
        5
      ]
    ],
    "stanza": 415
  },
  {
    "role": "code",
    "lines": [
      "= (= 3 2) $false;"
    ],
    "code": "210322103211321033221032110111332233",
    "parse": [
      "=",
      [
        "=",
        3,
        2
      ],
      [
        -2,
        "false"
      ]
    ],
    "stanza": 416
  },
  {
    "role": "code",
    "lines": [
      "= (> 2 3) $false;"
    ],
    "code": "210322113210321133221032110111332233",
    "parse": [
      "=",
      [
        ">",
        2,
        3
      ],
      [
        -2,
        "false"
      ]
    ],
    "stanza": 417
  },
  {
    "role": "code",
    "lines": [
      "= (> 4 5) $false;"
    ],
    "code": "21032211321003210133221032110111332233",
    "parse": [
      "=",
      [
        ">",
        4,
        5
      ],
      [
        -2,
        "false"
      ]
    ],
    "stanza": 418
  },
  {
    "role": "code",
    "lines": [
      "= (> 2 6) $false;"
    ],
    "code": "2103221132103211033221032110111332233",
    "parse": [
      "=",
      [
        ">",
        2,
        6
      ],
      [
        -2,
        "false"
      ]
    ],
    "stanza": 419
  },
  {
    "role": "code",
    "lines": [
      "= (> 1 6) $false;"
    ],
    "code": "210322113213211033221032110111332233",
    "parse": [
      "=",
      [
        ">",
        1,
        6
      ],
      [
        -2,
        "false"
      ]
    ],
    "stanza": 420
  },
  {
    "role": "code",
    "lines": [
      "= $true $true;"
    ],
    "code": "210322103211011033221032110110332233",
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        -2,
        "true"
      ]
    ],
    "stanza": 421
  },
  {
    "role": "code",
    "lines": [
      "= $false $false;"
    ],
    "code": "210322103211011133221032110111332233",
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -2,
        "false"
      ]
    ],
    "stanza": 422
  },
  {
    "role": "code",
    "lines": [
      "not | = $true $false;"
    ],
    "code": "21003023210322103211011033221032110111332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          -2,
          "true"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "stanza": 423
  },
  {
    "role": "code",
    "lines": [
      "not | = $false $true;"
    ],
    "code": "21003023210322103211011133221032110110332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          -2,
          "false"
        ],
        [
          -2,
          "true"
        ]
      ]
    ],
    "stanza": 424
  },
  {
    "role": "code",
    "lines": [
      "= (> 4 2) (< 1 4);"
    ],
    "code": "210322113210032103322132132100332233",
    "parse": [
      "=",
      [
        ">",
        4,
        2
      ],
      [
        "<",
        1,
        4
      ]
    ],
    "stanza": 425
  },
  {
    "role": "code",
    "lines": [
      "= (= 3 3) (< 3 5);"
    ],
    "code": "210322103211321133221321132101332233",
    "parse": [
      "=",
      [
        "=",
        3,
        3
      ],
      [
        "<",
        3,
        5
      ]
    ],
    "stanza": 426
  },
  {
    "role": "code",
    "lines": [
      "= (= 0 0) (= 4 4);"
    ],
    "code": "210322103203203322103210032100332233",
    "parse": [
      "=",
      [
        "=",
        0,
        0
      ],
      [
        "=",
        4,
        4
      ]
    ],
    "stanza": 427
  },
  {
    "role": "code",
    "lines": [
      "= (> 6 4) (< 3 5);"
    ],
    "code": "21032211321103210033221321132101332233",
    "parse": [
      "=",
      [
        ">",
        6,
        4
      ],
      [
        "<",
        3,
        5
      ]
    ],
    "stanza": 428
  },
  {
    "role": "code",
    "lines": [
      "= (< 5 6) (< 0 2);"
    ],
    "code": "21032213210132110332213203210332233",
    "parse": [
      "=",
      [
        "<",
        5,
        6
      ],
      [
        "<",
        0,
        2
      ]
    ],
    "stanza": 429
  },
  {
    "role": "code",
    "lines": [
      "= (= 5 1) (> 2 4);"
    ],
    "code": "2103221032101321332211321032100332233",
    "parse": [
      "=",
      [
        "=",
        5,
        1
      ],
      [
        ">",
        2,
        4
      ]
    ],
    "stanza": 430
  },
  {
    "role": "code",
    "lines": [
      "= (> 4 6) (> 1 3);"
    ],
    "code": "2103221132100321103322113213211332233",
    "parse": [
      "=",
      [
        ">",
        4,
        6
      ],
      [
        ">",
        1,
        3
      ]
    ],
    "stanza": 431
  },
  {
    "role": "code",
    "lines": [
      "= (> 2 5) (= 5 3);"
    ],
    "code": "21032211321032101332210321013211332233",
    "parse": [
      "=",
      [
        ">",
        2,
        5
      ],
      [
        "=",
        5,
        3
      ]
    ],
    "stanza": 432
  },
  {
    "role": "code",
    "lines": [
      "= (< 2 1) (< 6 4);"
    ],
    "code": "21032213210321332213211032100332233",
    "parse": [
      "=",
      [
        "<",
        2,
        1
      ],
      [
        "<",
        6,
        4
      ]
    ],
    "stanza": 433
  },
  {
    "role": "code",
    "lines": [
      "= (< 6 2) (> 4 5);"
    ],
    "code": "21032213211032103322113210032101332233",
    "parse": [
      "=",
      [
        "<",
        6,
        2
      ],
      [
        ">",
        4,
        5
      ]
    ],
    "stanza": 434
  },
  {
    "role": "code",
    "lines": [
      "not | = (> 0 1) (= 0 0);"
    ],
    "code": "2100302321032211320321332210320320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          ">",
          0,
          1
        ],
        [
          "=",
          0,
          0
        ]
      ]
    ],
    "stanza": 435
  },
  {
    "role": "code",
    "lines": [
      "not | = (< 6 4) (= 5 5);"
    ],
    "code": "21003023210322132110321003322103210132101332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "<",
          6,
          4
        ],
        [
          "=",
          5,
          5
        ]
      ]
    ],
    "stanza": 436
  },
  {
    "role": "code",
    "lines": [
      "not | = (= 4 2) (> 1 0);"
    ],
    "code": "2100302321032210321003210332211321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "=",
          4,
          2
        ],
        [
          ">",
          1,
          0
        ]
      ]
    ],
    "stanza": 437
  },
  {
    "role": "code",
    "lines": [
      "not | = (> 5 6) (< 1 3);"
    ],
    "code": "21003023210322113210132110332213213211332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          ">",
          5,
          6
        ],
        [
          "<",
          1,
          3
        ]
      ]
    ],
    "stanza": 438
  },
  {
    "role": "code",
    "lines": [
      "not | = (> 3 6) (> 5 4);"
    ],
    "code": "21003023210322113211321103322113210132100332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          ">",
          3,
          6
        ],
        [
          ">",
          5,
          4
        ]
      ]
    ],
    "stanza": 439
  },
  {
    "role": "code",
    "lines": [
      "not | = (= 2 2) (> 0 3);"
    ],
    "code": "2100302321032210321032103322113203211332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "=",
          2,
          2
        ],
        [
          ">",
          0,
          3
        ]
      ]
    ],
    "stanza": 440
  },
  {
    "role": "code",
    "lines": [
      "not | = (> 5 2) (= 2 3);"
    ],
    "code": "210030232103221132101321033221032103211332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          ">",
          5,
          2
        ],
        [
          "=",
          2,
          3
        ]
      ]
    ],
    "stanza": 441
  },
  {
    "role": "code",
    "lines": [
      "not | = (> 4 1) (< 2 0);"
    ],
    "code": "210030232103221132100321332213210320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          ">",
          4,
          1
        ],
        [
          "<",
          2,
          0
        ]
      ]
    ],
    "stanza": 442
  },
  {
    "role": "code",
    "lines": [
      "not | = (= 2 2) (< 3 2);"
    ],
    "code": "2100302321032210321032103322132113210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "=",
          2,
          2
        ],
        [
          "<",
          3,
          2
        ]
      ]
    ],
    "stanza": 443
  },
  {
    "role": "code",
    "lines": [
      "not | = (< 0 1) (> 3 4);"
    ],
    "code": "210030232103221320321332211321132100332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "<",
          0,
          1
        ],
        [
          ">",
          3,
          4
        ]
      ]
    ],
    "stanza": 444
  },
  {
    "role": "file",
    "lines": [
      "== COS_If =="
    ],
    "stanza": 445
  },
  {
    "role": "comment",
    "lines": [
      "# MATH show mechanisms for branching"
    ],
    "section_description": "show mechanisms for branching",
    "section_category": "MATH",
    "section_index": 12,
    "stanza": 446
  },
  {
    "role": "code",
    "lines": [
      "intro if;"
    ],
    "code": "2032111132233",
    "parse": [
      "intro",
      "if"
    ],
    "stanza": 447
  },
  {
    "role": "code",
    "lines": [
      "= 28 | if (< 3 0) 24 28;"
    ],
    "code": "21032111003023211113221321132033211000321110032233",
    "parse": [
      "=",
      28,
      [
        -1,
        "if",
        [
          "<",
          3,
          0
        ],
        24,
        28
      ]
    ],
    "stanza": 448
  },
  {
    "role": "code",
    "lines": [
      "= 27 | if (> 2 4) 29 27;"
    ],
    "code": "21032110113023211113221132103210033211101321101132233",
    "parse": [
      "=",
      27,
      [
        -1,
        "if",
        [
          ">",
          2,
          4
        ],
        29,
        27
      ]
    ],
    "stanza": 449
  },
  {
    "role": "code",
    "lines": [
      "= 29 | if (= 3 1) 20 29;"
    ],
    "code": "210321110130232111132210321132133210100321110132233",
    "parse": [
      "=",
      29,
      [
        -1,
        "if",
        [
          "=",
          3,
          1
        ],
        20,
        29
      ]
    ],
    "stanza": 450
  },
  {
    "role": "code",
    "lines": [
      "= 21 | if (= 0 0) 21 26;"
    ],
    "code": "21032101013023211113221032032033210101321101032233",
    "parse": [
      "=",
      21,
      [
        -1,
        "if",
        [
          "=",
          0,
          0
        ],
        21,
        26
      ]
    ],
    "stanza": 451
  },
  {
    "role": "code",
    "lines": [
      "= 29 | if (> 5 3) 29 23;"
    ],
    "code": "21032111013023211113221132101321133211101321011132233",
    "parse": [
      "=",
      29,
      [
        -1,
        "if",
        [
          ">",
          5,
          3
        ],
        29,
        23
      ]
    ],
    "stanza": 452
  },
  {
    "role": "code",
    "lines": [
      "= 26 | if (> 1 0) 26 22;"
    ],
    "code": "21032110103023211113221132132033211010321011032233",
    "parse": [
      "=",
      26,
      [
        -1,
        "if",
        [
          ">",
          1,
          0
        ],
        26,
        22
      ]
    ],
    "stanza": 453
  },
  {
    "role": "code",
    "lines": [
      "= 21 | if (= 3 3) 21 27;"
    ],
    "code": "2103210101302321111322103211321133210101321101132233",
    "parse": [
      "=",
      21,
      [
        -1,
        "if",
        [
          "=",
          3,
          3
        ],
        21,
        27
      ]
    ],
    "stanza": 454
  },
  {
    "role": "code",
    "lines": [
      "= 23 | if (> 4 4) 25 23;"
    ],
    "code": "210321011130232111132211321003210033211001321011132233",
    "parse": [
      "=",
      23,
      [
        -1,
        "if",
        [
          ">",
          4,
          4
        ],
        25,
        23
      ]
    ],
    "stanza": 455
  },
  {
    "role": "code",
    "lines": [
      "define max | ? x | ? y | if (> $x $y) $x $y;"
    ],
    "code": "211013211100030232110032100110302321100321100013023211113221132210321001103322103211000133322103210011033221032110001332233",
    "parse": [
      "define",
      "max",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              ">",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ],
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ]
      ]
    ],
    "stanza": 456
  },
  {
    "role": "code",
    "lines": [
      "define min | ? x | ? y | if (< $x $y) $x $y;"
    ],
    "code": "21101321110013023211003210011030232110032110001302321111322132210321001103322103211000133322103210011033221032110001332233",
    "parse": [
      "define",
      "min",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              "<",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ],
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ]
      ]
    ],
    "stanza": 457
  },
  {
    "role": "code",
    "lines": [
      "= 0 | max 0 0;"
    ],
    "code": "2103203023211100032032032233",
    "parse": [
      "=",
      0,
      [
        -1,
        "max",
        0,
        0
      ]
    ],
    "stanza": 458
  },
  {
    "role": "code",
    "lines": [
      "= 0 | min 0 0;"
    ],
    "code": "2103203023211100132032032233",
    "parse": [
      "=",
      0,
      [
        -1,
        "min",
        0,
        0
      ]
    ],
    "stanza": 459
  },
  {
    "role": "code",
    "lines": [
      "= 1 | max 0 1;"
    ],
    "code": "2103213023211100032032132233",
    "parse": [
      "=",
      1,
      [
        -1,
        "max",
        0,
        1
      ]
    ],
    "stanza": 460
  },
  {
    "role": "code",
    "lines": [
      "= 0 | min 0 1;"
    ],
    "code": "2103203023211100132032132233",
    "parse": [
      "=",
      0,
      [
        -1,
        "min",
        0,
        1
      ]
    ],
    "stanza": 461
  },
  {
    "role": "code",
    "lines": [
      "= 2 | max 0 2;"
    ],
    "code": "210321030232111000320321032233",
    "parse": [
      "=",
      2,
      [
        -1,
        "max",
        0,
        2
      ]
    ],
    "stanza": 462
  },
  {
    "role": "code",
    "lines": [
      "= 0 | min 0 2;"
    ],
    "code": "21032030232111001320321032233",
    "parse": [
      "=",
      0,
      [
        -1,
        "min",
        0,
        2
      ]
    ],
    "stanza": 463
  },
  {
    "role": "code",
    "lines": [
      "= 1 | max 1 0;"
    ],
    "code": "2103213023211100032132032233",
    "parse": [
      "=",
      1,
      [
        -1,
        "max",
        1,
        0
      ]
    ],
    "stanza": 464
  },
  {
    "role": "code",
    "lines": [
      "= 0 | min 1 0;"
    ],
    "code": "2103203023211100132132032233",
    "parse": [
      "=",
      0,
      [
        -1,
        "min",
        1,
        0
      ]
    ],
    "stanza": 465
  },
  {
    "role": "code",
    "lines": [
      "= 1 | max 1 1;"
    ],
    "code": "2103213023211100032132132233",
    "parse": [
      "=",
      1,
      [
        -1,
        "max",
        1,
        1
      ]
    ],
    "stanza": 466
  },
  {
    "role": "code",
    "lines": [
      "= 1 | min 1 1;"
    ],
    "code": "2103213023211100132132132233",
    "parse": [
      "=",
      1,
      [
        -1,
        "min",
        1,
        1
      ]
    ],
    "stanza": 467
  },
  {
    "role": "code",
    "lines": [
      "= 2 | max 1 2;"
    ],
    "code": "210321030232111000321321032233",
    "parse": [
      "=",
      2,
      [
        -1,
        "max",
        1,
        2
      ]
    ],
    "stanza": 468
  },
  {
    "role": "code",
    "lines": [
      "= 1 | min 1 2;"
    ],
    "code": "21032130232111001321321032233",
    "parse": [
      "=",
      1,
      [
        -1,
        "min",
        1,
        2
      ]
    ],
    "stanza": 469
  },
  {
    "role": "code",
    "lines": [
      "= 2 | max 2 0;"
    ],
    "code": "210321030232111000321032032233",
    "parse": [
      "=",
      2,
      [
        -1,
        "max",
        2,
        0
      ]
    ],
    "stanza": 470
  },
  {
    "role": "code",
    "lines": [
      "= 0 | min 2 0;"
    ],
    "code": "21032030232111001321032032233",
    "parse": [
      "=",
      0,
      [
        -1,
        "min",
        2,
        0
      ]
    ],
    "stanza": 471
  },
  {
    "role": "code",
    "lines": [
      "= 2 | max 2 1;"
    ],
    "code": "210321030232111000321032132233",
    "parse": [
      "=",
      2,
      [
        -1,
        "max",
        2,
        1
      ]
    ],
    "stanza": 472
  },
  {
    "role": "code",
    "lines": [
      "= 1 | min 2 1;"
    ],
    "code": "21032130232111001321032132233",
    "parse": [
      "=",
      1,
      [
        -1,
        "min",
        2,
        1
      ]
    ],
    "stanza": 473
  },
  {
    "role": "code",
    "lines": [
      "= 2 | max 2 2;"
    ],
    "code": "2103210302321110003210321032233",
    "parse": [
      "=",
      2,
      [
        -1,
        "max",
        2,
        2
      ]
    ],
    "stanza": 474
  },
  {
    "role": "code",
    "lines": [
      "= 2 | min 2 2;"
    ],
    "code": "2103210302321110013210321032233",
    "parse": [
      "=",
      2,
      [
        -1,
        "min",
        2,
        2
      ]
    ],
    "stanza": 475
  },
  {
    "role": "comment",
    "lines": [
      "# 'if' does not evaluate branch-not-taken, TODO show this."
    ],
    "stanza": 476
  },
  {
    "role": "code",
    "lines": [
      "define factorial | ? n | if (< $n 1) 1 | * $n | factorial | - $n 1;"
    ],
    "code": "211013211101030232110032111011302321111322132210321110113321332130232100132210321110113302321110103023210113221032111011332132233",
    "parse": [
      "define",
      "factorial",
      [
        -1,
        "?",
        "n",
        [
          -1,
          "if",
          [
            "<",
            [
              -2,
              "n"
            ],
            1
          ],
          1,
          [
            -1,
            "*",
            [
              -2,
              "n"
            ],
            [
              -1,
              "factorial",
              [
                -1,
                "-",
                [
                  -2,
                  "n"
                ],
                1
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 477
  },
  {
    "role": "code",
    "lines": [
      "= 1 | factorial 1;"
    ],
    "code": "2103213023211101032132233",
    "parse": [
      "=",
      1,
      [
        -1,
        "factorial",
        1
      ]
    ],
    "stanza": 478
  },
  {
    "role": "code",
    "lines": [
      "= 2 | factorial 2;"
    ],
    "code": "210321030232111010321032233",
    "parse": [
      "=",
      2,
      [
        -1,
        "factorial",
        2
      ]
    ],
    "stanza": 479
  },
  {
    "role": "code",
    "lines": [
      "= 6 | factorial 3;"
    ],
    "code": "2103211030232111010321132233",
    "parse": [
      "=",
      6,
      [
        -1,
        "factorial",
        3
      ]
    ],
    "stanza": 480
  },
  {
    "role": "code",
    "lines": [
      "= 24 | factorial 4;"
    ],
    "code": "2103211000302321110103210032233",
    "parse": [
      "=",
      24,
      [
        -1,
        "factorial",
        4
      ]
    ],
    "stanza": 481
  },
  {
    "role": "code",
    "lines": [
      "= 120 | factorial 5;"
    ],
    "code": "210321111000302321110103210132233",
    "parse": [
      "=",
      120,
      [
        -1,
        "factorial",
        5
      ]
    ],
    "stanza": 482
  },
  {
    "role": "file",
    "lines": [
      "== COS_AndLogic =="
    ],
    "stanza": 483
  },
  {
    "role": "comment",
    "lines": [
      "# MATH introduce the AND logical operator"
    ],
    "section_description": "introduce the AND logical operator",
    "section_category": "MATH",
    "section_index": 13,
    "stanza": 484
  },
  {
    "role": "code",
    "lines": [
      "intro and;"
    ],
    "code": "203210132233",
    "parse": [
      "intro",
      "and"
    ],
    "stanza": 485
  },
  {
    "role": "code",
    "lines": [
      "define and (? x | ? y | if (x) (if (y) (true) (false)) (false));"
    ],
    "code": "2110132101322110032100110302321100321100013023211113221001103322111132211000133221101103322110111333221101113332233",
    "parse": [
      "define",
      "and",
      [
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              "x"
            ],
            [
              "if",
              [
                "y"
              ],
              [
                "true"
              ],
              [
                "false"
              ]
            ],
            [
              "false"
            ]
          ]
        ]
      ]
    ],
    "stanza": 486
  },
  {
    "role": "code",
    "lines": [
      "and (= 2 2) (> 4 2);"
    ],
    "code": "21013221032103210332211321003210332233",
    "parse": [
      "and",
      [
        "=",
        2,
        2
      ],
      [
        ">",
        4,
        2
      ]
    ],
    "stanza": 487
  },
  {
    "role": "code",
    "lines": [
      "and (= 1 1) (> 6 4);"
    ],
    "code": "2101322103213213322113211032100332233",
    "parse": [
      "and",
      [
        "=",
        1,
        1
      ],
      [
        ">",
        6,
        4
      ]
    ],
    "stanza": 488
  },
  {
    "role": "code",
    "lines": [
      "and (< 3 4) (= 5 5);"
    ],
    "code": "210132213211321003322103210132101332233",
    "parse": [
      "and",
      [
        "<",
        3,
        4
      ],
      [
        "=",
        5,
        5
      ]
    ],
    "stanza": 489
  },
  {
    "role": "code",
    "lines": [
      "and (= 3 3) (= 4 4);"
    ],
    "code": "210132210321132113322103210032100332233",
    "parse": [
      "and",
      [
        "=",
        3,
        3
      ],
      [
        "=",
        4,
        4
      ]
    ],
    "stanza": 490
  },
  {
    "role": "code",
    "lines": [
      "and (= 3 3) (= 0 0);"
    ],
    "code": "21013221032113211332210320320332233",
    "parse": [
      "and",
      [
        "=",
        3,
        3
      ],
      [
        "=",
        0,
        0
      ]
    ],
    "stanza": 491
  },
  {
    "role": "code",
    "lines": [
      "and (< 5 7) (> 5 3);"
    ],
    "code": "210132213210132111332211321013211332233",
    "parse": [
      "and",
      [
        "<",
        5,
        7
      ],
      [
        ">",
        5,
        3
      ]
    ],
    "stanza": 492
  },
  {
    "role": "code",
    "lines": [
      "and (> 5 4) (> 1 0);"
    ],
    "code": "2101322113210132100332211321320332233",
    "parse": [
      "and",
      [
        ">",
        5,
        4
      ],
      [
        ">",
        1,
        0
      ]
    ],
    "stanza": 493
  },
  {
    "role": "code",
    "lines": [
      "and (> 3 0) (= 3 3);"
    ],
    "code": "210132211321132033221032113211332233",
    "parse": [
      "and",
      [
        ">",
        3,
        0
      ],
      [
        "=",
        3,
        3
      ]
    ],
    "stanza": 494
  },
  {
    "role": "code",
    "lines": [
      "and (< 3 4) (< 3 6);"
    ],
    "code": "2101322132113210033221321132110332233",
    "parse": [
      "and",
      [
        "<",
        3,
        4
      ],
      [
        "<",
        3,
        6
      ]
    ],
    "stanza": 495
  },
  {
    "role": "code",
    "lines": [
      "and (> 5 4) (> 5 4);"
    ],
    "code": "21013221132101321003322113210132100332233",
    "parse": [
      "and",
      [
        ">",
        5,
        4
      ],
      [
        ">",
        5,
        4
      ]
    ],
    "stanza": 496
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 6 4) (< 3 1);"
    ],
    "code": "210030232101322113211032100332213211321332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          6,
          4
        ],
        [
          "<",
          3,
          1
        ]
      ]
    ],
    "stanza": 497
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 3 1) (> 3 3);"
    ],
    "code": "21003023210132211321132133221132113211332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          3,
          1
        ],
        [
          ">",
          3,
          3
        ]
      ]
    ],
    "stanza": 498
  },
  {
    "role": "code",
    "lines": [
      "not | and (= 0 0) (= 5 4);"
    ],
    "code": "210030232101322103203203322103210132100332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "=",
          0,
          0
        ],
        [
          "=",
          5,
          4
        ]
      ]
    ],
    "stanza": 499
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 2 4) (> 4 6);"
    ],
    "code": "21003023210132213210321003322113210032110332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          2,
          4
        ],
        [
          ">",
          4,
          6
        ]
      ]
    ],
    "stanza": 500
  },
  {
    "role": "code",
    "lines": [
      "not | and (= 3 3) (= 3 1);"
    ],
    "code": "21003023210132210321132113322103211321332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "=",
          3,
          3
        ],
        [
          "=",
          3,
          1
        ]
      ]
    ],
    "stanza": 501
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 1 5) (< 3 6);"
    ],
    "code": "210030232101322113213210133221321132110332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          1,
          5
        ],
        [
          "<",
          3,
          6
        ]
      ]
    ],
    "stanza": 502
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 6 2) (= 2 2);"
    ],
    "code": "210030232101322132110321033221032103210332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          6,
          2
        ],
        [
          "=",
          2,
          2
        ]
      ]
    ],
    "stanza": 503
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 2 5) (= 5 5);"
    ],
    "code": "210030232101322113210321013322103210132101332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          2,
          5
        ],
        [
          "=",
          5,
          5
        ]
      ]
    ],
    "stanza": 504
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 6 2) (= 3 3);"
    ],
    "code": "210030232101322132110321033221032113211332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          6,
          2
        ],
        [
          "=",
          3,
          3
        ]
      ]
    ],
    "stanza": 505
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 4 3) (> 5 2);"
    ],
    "code": "2100302321013221321003211332211321013210332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          4,
          3
        ],
        [
          ">",
          5,
          2
        ]
      ]
    ],
    "stanza": 506
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 5 4) (= 1 2);"
    ],
    "code": "210030232101322132101321003322103213210332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          5,
          4
        ],
        [
          "=",
          1,
          2
        ]
      ]
    ],
    "stanza": 507
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 6 4) (= 5 1);"
    ],
    "code": "2100302321013221321103210033221032101321332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          6,
          4
        ],
        [
          "=",
          5,
          1
        ]
      ]
    ],
    "stanza": 508
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 2 6) (= 1 5);"
    ],
    "code": "2100302321013221132103211033221032132101332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          2,
          6
        ],
        [
          "=",
          1,
          5
        ]
      ]
    ],
    "stanza": 509
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 6 3) (= 2 3);"
    ],
    "code": "210030232101322132110321133221032103211332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          6,
          3
        ],
        [
          "=",
          2,
          3
        ]
      ]
    ],
    "stanza": 510
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 6 4) (> 0 1);"
    ],
    "code": "21003023210132213211032100332211320321332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          6,
          4
        ],
        [
          ">",
          0,
          1
        ]
      ]
    ],
    "stanza": 511
  },
  {
    "role": "code",
    "lines": [
      "not | and (= 3 5) (< 4 1);"
    ],
    "code": "210030232101322103211321013322132100321332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "=",
          3,
          5
        ],
        [
          "<",
          4,
          1
        ]
      ]
    ],
    "stanza": 512
  },
  {
    "role": "code",
    "lines": [
      "not | and (= 4 1) (< 4 2);"
    ],
    "code": "210030232101322103210032133221321003210332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "=",
          4,
          1
        ],
        [
          "<",
          4,
          2
        ]
      ]
    ],
    "stanza": 513
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 6 3) (= 3 0);"
    ],
    "code": "21003023210132213211032113322103211320332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          6,
          3
        ],
        [
          "=",
          3,
          0
        ]
      ]
    ],
    "stanza": 514
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 4 2) (< 4 6);"
    ],
    "code": "2100302321013221321003210332213210032110332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          4,
          2
        ],
        [
          "<",
          4,
          6
        ]
      ]
    ],
    "stanza": 515
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 4 1) (< 5 2);"
    ],
    "code": "210030232101322113210032133221321013210332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          4,
          1
        ],
        [
          "<",
          5,
          2
        ]
      ]
    ],
    "stanza": 516
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 0 1) (> 7 5);"
    ],
    "code": "210030232101322113203213322113211132101332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          0,
          1
        ],
        [
          ">",
          7,
          5
        ]
      ]
    ],
    "stanza": 517
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 3 4) (> 3 6);"
    ],
    "code": "2100302321013221321132100332211321132110332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          3,
          4
        ],
        [
          ">",
          3,
          6
        ]
      ]
    ],
    "stanza": 518
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 1 2) (> 6 4);"
    ],
    "code": "2100302321013221132132103322113211032100332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          1,
          2
        ],
        [
          ">",
          6,
          4
        ]
      ]
    ],
    "stanza": 519
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 0 1) (= 4 5);"
    ],
    "code": "21003023210132213203213322103210032101332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          0,
          1
        ],
        [
          "=",
          4,
          5
        ]
      ]
    ],
    "stanza": 520
  },
  {
    "role": "code",
    "lines": [
      "and (< 4 6) (< 5 7);"
    ],
    "code": "210132213210032110332213210132111332233",
    "parse": [
      "and",
      [
        "<",
        4,
        6
      ],
      [
        "<",
        5,
        7
      ]
    ],
    "stanza": 521
  },
  {
    "role": "file",
    "lines": [
      "== COS_OrLogic =="
    ],
    "stanza": 522
  },
  {
    "role": "comment",
    "lines": [
      "# MATH introduce the OR logical operator"
    ],
    "section_description": "introduce the OR logical operator",
    "section_category": "MATH",
    "section_index": 14,
    "stanza": 523
  },
  {
    "role": "code",
    "lines": [
      "define or (? x | ? y | if (x) (true) (if (y) (true) (false)));"
    ],
    "code": "2110132110322110032100110302321100321100013023211113221001103322110110332211113221100013322110110332211011133332233",
    "parse": [
      "define",
      "or",
      [
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              "x"
            ],
            [
              "true"
            ],
            [
              "if",
              [
                "y"
              ],
              [
                "true"
              ],
              [
                "false"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 524
  },
  {
    "role": "code",
    "lines": [
      "intro or;"
    ],
    "code": "203211032233",
    "parse": [
      "intro",
      "or"
    ],
    "stanza": 525
  },
  {
    "role": "code",
    "lines": [
      "or (= 2 2) (> 4 2);"
    ],
    "code": "21103221032103210332211321003210332233",
    "parse": [
      "or",
      [
        "=",
        2,
        2
      ],
      [
        ">",
        4,
        2
      ]
    ],
    "stanza": 526
  },
  {
    "role": "code",
    "lines": [
      "or (= 1 1) (> 6 4);"
    ],
    "code": "2110322103213213322113211032100332233",
    "parse": [
      "or",
      [
        "=",
        1,
        1
      ],
      [
        ">",
        6,
        4
      ]
    ],
    "stanza": 527
  },
  {
    "role": "code",
    "lines": [
      "or (< 3 4) (= 5 5);"
    ],
    "code": "211032213211321003322103210132101332233",
    "parse": [
      "or",
      [
        "<",
        3,
        4
      ],
      [
        "=",
        5,
        5
      ]
    ],
    "stanza": 528
  },
  {
    "role": "code",
    "lines": [
      "or (= 3 3) (= 4 4);"
    ],
    "code": "211032210321132113322103210032100332233",
    "parse": [
      "or",
      [
        "=",
        3,
        3
      ],
      [
        "=",
        4,
        4
      ]
    ],
    "stanza": 529
  },
  {
    "role": "code",
    "lines": [
      "or (= 3 3) (= 0 0);"
    ],
    "code": "21103221032113211332210320320332233",
    "parse": [
      "or",
      [
        "=",
        3,
        3
      ],
      [
        "=",
        0,
        0
      ]
    ],
    "stanza": 530
  },
  {
    "role": "code",
    "lines": [
      "or (< 5 7) (> 5 3);"
    ],
    "code": "211032213210132111332211321013211332233",
    "parse": [
      "or",
      [
        "<",
        5,
        7
      ],
      [
        ">",
        5,
        3
      ]
    ],
    "stanza": 531
  },
  {
    "role": "code",
    "lines": [
      "or (> 5 4) (> 1 0);"
    ],
    "code": "2110322113210132100332211321320332233",
    "parse": [
      "or",
      [
        ">",
        5,
        4
      ],
      [
        ">",
        1,
        0
      ]
    ],
    "stanza": 532
  },
  {
    "role": "code",
    "lines": [
      "or (> 3 0) (= 3 3);"
    ],
    "code": "211032211321132033221032113211332233",
    "parse": [
      "or",
      [
        ">",
        3,
        0
      ],
      [
        "=",
        3,
        3
      ]
    ],
    "stanza": 533
  },
  {
    "role": "code",
    "lines": [
      "or (< 3 4) (< 3 6);"
    ],
    "code": "2110322132113210033221321132110332233",
    "parse": [
      "or",
      [
        "<",
        3,
        4
      ],
      [
        "<",
        3,
        6
      ]
    ],
    "stanza": 534
  },
  {
    "role": "code",
    "lines": [
      "or (> 5 4) (> 5 4);"
    ],
    "code": "21103221132101321003322113210132100332233",
    "parse": [
      "or",
      [
        ">",
        5,
        4
      ],
      [
        ">",
        5,
        4
      ]
    ],
    "stanza": 535
  },
  {
    "role": "code",
    "lines": [
      "or (> 6 4) (< 3 1);"
    ],
    "code": "2110322113211032100332213211321332233",
    "parse": [
      "or",
      [
        ">",
        6,
        4
      ],
      [
        "<",
        3,
        1
      ]
    ],
    "stanza": 536
  },
  {
    "role": "code",
    "lines": [
      "or (> 3 1) (> 3 3);"
    ],
    "code": "211032211321132133221132113211332233",
    "parse": [
      "or",
      [
        ">",
        3,
        1
      ],
      [
        ">",
        3,
        3
      ]
    ],
    "stanza": 537
  },
  {
    "role": "code",
    "lines": [
      "or (= 0 0) (= 5 4);"
    ],
    "code": "2110322103203203322103210132100332233",
    "parse": [
      "or",
      [
        "=",
        0,
        0
      ],
      [
        "=",
        5,
        4
      ]
    ],
    "stanza": 538
  },
  {
    "role": "code",
    "lines": [
      "or (< 2 4) (> 4 6);"
    ],
    "code": "211032213210321003322113210032110332233",
    "parse": [
      "or",
      [
        "<",
        2,
        4
      ],
      [
        ">",
        4,
        6
      ]
    ],
    "stanza": 539
  },
  {
    "role": "code",
    "lines": [
      "or (= 3 3) (= 3 1);"
    ],
    "code": "211032210321132113322103211321332233",
    "parse": [
      "or",
      [
        "=",
        3,
        3
      ],
      [
        "=",
        3,
        1
      ]
    ],
    "stanza": 540
  },
  {
    "role": "code",
    "lines": [
      "or (> 1 5) (< 3 6);"
    ],
    "code": "2110322113213210133221321132110332233",
    "parse": [
      "or",
      [
        ">",
        1,
        5
      ],
      [
        "<",
        3,
        6
      ]
    ],
    "stanza": 541
  },
  {
    "role": "code",
    "lines": [
      "or (< 6 2) (= 2 2);"
    ],
    "code": "2110322132110321033221032103210332233",
    "parse": [
      "or",
      [
        "<",
        6,
        2
      ],
      [
        "=",
        2,
        2
      ]
    ],
    "stanza": 542
  },
  {
    "role": "code",
    "lines": [
      "or (> 2 5) (= 5 5);"
    ],
    "code": "2110322113210321013322103210132101332233",
    "parse": [
      "or",
      [
        ">",
        2,
        5
      ],
      [
        "=",
        5,
        5
      ]
    ],
    "stanza": 543
  },
  {
    "role": "code",
    "lines": [
      "or (< 6 2) (= 3 3);"
    ],
    "code": "2110322132110321033221032113211332233",
    "parse": [
      "or",
      [
        "<",
        6,
        2
      ],
      [
        "=",
        3,
        3
      ]
    ],
    "stanza": 544
  },
  {
    "role": "code",
    "lines": [
      "or (< 4 3) (> 5 2);"
    ],
    "code": "21103221321003211332211321013210332233",
    "parse": [
      "or",
      [
        "<",
        4,
        3
      ],
      [
        ">",
        5,
        2
      ]
    ],
    "stanza": 545
  },
  {
    "role": "code",
    "lines": [
      "not | or (< 5 4) (= 1 2);"
    ],
    "code": "210030232110322132101321003322103213210332233",
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "<",
          5,
          4
        ],
        [
          "=",
          1,
          2
        ]
      ]
    ],
    "stanza": 546
  },
  {
    "role": "code",
    "lines": [
      "not | or (< 6 4) (= 5 1);"
    ],
    "code": "2100302321103221321103210033221032101321332233",
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "<",
          6,
          4
        ],
        [
          "=",
          5,
          1
        ]
      ]
    ],
    "stanza": 547
  },
  {
    "role": "code",
    "lines": [
      "not | or (> 2 6) (= 1 5);"
    ],
    "code": "2100302321103221132103211033221032132101332233",
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          ">",
          2,
          6
        ],
        [
          "=",
          1,
          5
        ]
      ]
    ],
    "stanza": 548
  },
  {
    "role": "code",
    "lines": [
      "not | or (< 6 3) (= 2 3);"
    ],
    "code": "210030232110322132110321133221032103211332233",
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "<",
          6,
          3
        ],
        [
          "=",
          2,
          3
        ]
      ]
    ],
    "stanza": 549
  },
  {
    "role": "code",
    "lines": [
      "not | or (< 6 4) (> 0 1);"
    ],
    "code": "21003023211032213211032100332211320321332233",
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "<",
          6,
          4
        ],
        [
          ">",
          0,
          1
        ]
      ]
    ],
    "stanza": 550
  },
  {
    "role": "code",
    "lines": [
      "not | or (= 3 5) (< 4 1);"
    ],
    "code": "210030232110322103211321013322132100321332233",
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "=",
          3,
          5
        ],
        [
          "<",
          4,
          1
        ]
      ]
    ],
    "stanza": 551
  },
  {
    "role": "code",
    "lines": [
      "not | or (= 4 1) (< 4 2);"
    ],
    "code": "210030232110322103210032133221321003210332233",
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "=",
          4,
          1
        ],
        [
          "<",
          4,
          2
        ]
      ]
    ],
    "stanza": 552
  },
  {
    "role": "code",
    "lines": [
      "not | or (< 6 3) (= 3 0);"
    ],
    "code": "21003023211032213211032113322103211320332233",
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "<",
          6,
          3
        ],
        [
          "=",
          3,
          0
        ]
      ]
    ],
    "stanza": 553
  },
  {
    "role": "code",
    "lines": [
      "or (< 4 2) (< 4 6);"
    ],
    "code": "21103221321003210332213210032110332233",
    "parse": [
      "or",
      [
        "<",
        4,
        2
      ],
      [
        "<",
        4,
        6
      ]
    ],
    "stanza": 554
  },
  {
    "role": "code",
    "lines": [
      "or (> 4 1) (< 5 2);"
    ],
    "code": "2110322113210032133221321013210332233",
    "parse": [
      "or",
      [
        ">",
        4,
        1
      ],
      [
        "<",
        5,
        2
      ]
    ],
    "stanza": 555
  },
  {
    "role": "code",
    "lines": [
      "or (> 0 1) (> 7 5);"
    ],
    "code": "2110322113203213322113211132101332233",
    "parse": [
      "or",
      [
        ">",
        0,
        1
      ],
      [
        ">",
        7,
        5
      ]
    ],
    "stanza": 556
  },
  {
    "role": "code",
    "lines": [
      "or (< 3 4) (> 3 6);"
    ],
    "code": "21103221321132100332211321132110332233",
    "parse": [
      "or",
      [
        "<",
        3,
        4
      ],
      [
        ">",
        3,
        6
      ]
    ],
    "stanza": 557
  },
  {
    "role": "code",
    "lines": [
      "or (> 1 2) (> 6 4);"
    ],
    "code": "21103221132132103322113211032100332233",
    "parse": [
      "or",
      [
        ">",
        1,
        2
      ],
      [
        ">",
        6,
        4
      ]
    ],
    "stanza": 558
  },
  {
    "role": "code",
    "lines": [
      "or (< 0 1) (= 4 5);"
    ],
    "code": "211032213203213322103210032101332233",
    "parse": [
      "or",
      [
        "<",
        0,
        1
      ],
      [
        "=",
        4,
        5
      ]
    ],
    "stanza": 559
  },
  {
    "role": "code",
    "lines": [
      "or (< 4 6) (< 5 7);"
    ],
    "code": "211032213210032110332213210132111332233",
    "parse": [
      "or",
      [
        "<",
        4,
        6
      ],
      [
        "<",
        5,
        7
      ]
    ],
    "stanza": 560
  },
  {
    "role": "code",
    "lines": [
      "define >= (? x | ? y | or (> (x) (y)) (= (x) (y)));"
    ],
    "code": "211013211110032211003210011030232110032110001302321103221132210011033221100013332210322100110332211000133332233",
    "parse": [
      "define",
      ">=",
      [
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "or",
            [
              ">",
              [
                "x"
              ],
              [
                "y"
              ]
            ],
            [
              "=",
              [
                "x"
              ],
              [
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 561
  },
  {
    "role": "code",
    "lines": [
      "define <= (? x | ? y | or (< (x) (y)) (= (x) (y)));"
    ],
    "code": "21101321111013221100321001103023211003211000130232110322132210011033221100013332210322100110332211000133332233",
    "parse": [
      "define",
      "<=",
      [
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "or",
            [
              "<",
              [
                "x"
              ],
              [
                "y"
              ]
            ],
            [
              "=",
              [
                "x"
              ],
              [
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 562
  },
  {
    "role": "code",
    "lines": [
      ">= 0 0;"
    ],
    "code": "211110032032032233",
    "parse": [
      ">=",
      0,
      0
    ],
    "stanza": 563
  },
  {
    "role": "code",
    "lines": [
      "<= 0 0;"
    ],
    "code": "211110132032032233",
    "parse": [
      "<=",
      0,
      0
    ],
    "stanza": 564
  },
  {
    "role": "code",
    "lines": [
      "not | >= 0 1;"
    ],
    "code": "21003023211110032032132233",
    "parse": [
      "not",
      [
        -1,
        ">=",
        0,
        1
      ]
    ],
    "stanza": 565
  },
  {
    "role": "code",
    "lines": [
      "<= 0 1;"
    ],
    "code": "211110132032132233",
    "parse": [
      "<=",
      0,
      1
    ],
    "stanza": 566
  },
  {
    "role": "code",
    "lines": [
      "not | >= 0 2;"
    ],
    "code": "210030232111100320321032233",
    "parse": [
      "not",
      [
        -1,
        ">=",
        0,
        2
      ]
    ],
    "stanza": 567
  },
  {
    "role": "code",
    "lines": [
      "<= 0 2;"
    ],
    "code": "2111101320321032233",
    "parse": [
      "<=",
      0,
      2
    ],
    "stanza": 568
  },
  {
    "role": "code",
    "lines": [
      ">= 1 0;"
    ],
    "code": "211110032132032233",
    "parse": [
      ">=",
      1,
      0
    ],
    "stanza": 569
  },
  {
    "role": "code",
    "lines": [
      "not | <= 1 0;"
    ],
    "code": "21003023211110132132032233",
    "parse": [
      "not",
      [
        -1,
        "<=",
        1,
        0
      ]
    ],
    "stanza": 570
  },
  {
    "role": "code",
    "lines": [
      ">= 1 1;"
    ],
    "code": "211110032132132233",
    "parse": [
      ">=",
      1,
      1
    ],
    "stanza": 571
  },
  {
    "role": "code",
    "lines": [
      "<= 1 1;"
    ],
    "code": "211110132132132233",
    "parse": [
      "<=",
      1,
      1
    ],
    "stanza": 572
  },
  {
    "role": "code",
    "lines": [
      "not | >= 1 2;"
    ],
    "code": "210030232111100321321032233",
    "parse": [
      "not",
      [
        -1,
        ">=",
        1,
        2
      ]
    ],
    "stanza": 573
  },
  {
    "role": "code",
    "lines": [
      "<= 1 2;"
    ],
    "code": "2111101321321032233",
    "parse": [
      "<=",
      1,
      2
    ],
    "stanza": 574
  },
  {
    "role": "code",
    "lines": [
      ">= 2 0;"
    ],
    "code": "2111100321032032233",
    "parse": [
      ">=",
      2,
      0
    ],
    "stanza": 575
  },
  {
    "role": "code",
    "lines": [
      "not | <= 2 0;"
    ],
    "code": "210030232111101321032032233",
    "parse": [
      "not",
      [
        -1,
        "<=",
        2,
        0
      ]
    ],
    "stanza": 576
  },
  {
    "role": "code",
    "lines": [
      ">= 2 1;"
    ],
    "code": "2111100321032132233",
    "parse": [
      ">=",
      2,
      1
    ],
    "stanza": 577
  },
  {
    "role": "code",
    "lines": [
      "not | <= 2 1;"
    ],
    "code": "210030232111101321032132233",
    "parse": [
      "not",
      [
        -1,
        "<=",
        2,
        1
      ]
    ],
    "stanza": 578
  },
  {
    "role": "code",
    "lines": [
      ">= 2 2;"
    ],
    "code": "21111003210321032233",
    "parse": [
      ">=",
      2,
      2
    ],
    "stanza": 579
  },
  {
    "role": "code",
    "lines": [
      "<= 2 2;"
    ],
    "code": "21111013210321032233",
    "parse": [
      "<=",
      2,
      2
    ],
    "stanza": 580
  },
  {
    "role": "file",
    "lines": [
      "== COS_Cons =="
    ],
    "stanza": 581
  },
  {
    "role": "comment",
    "lines": [
      "# MATH illustrate pairs"
    ],
    "section_description": "illustrate pairs",
    "section_category": "MATH",
    "section_index": 15,
    "stanza": 582
  },
  {
    "role": "code",
    "lines": [
      "define cons (? x | ? y | ? f | f (x) (y));"
    ],
    "code": "21101321010132211003210011030232110032110001302321100321111103023211111032210011033221100013332233",
    "parse": [
      "define",
      "cons",
      [
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "?",
            "f",
            [
              -1,
              "f",
              [
                "x"
              ],
              [
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 583
  },
  {
    "role": "code",
    "lines": [
      "define car (? pair | pair (? x | ? y | x));"
    ],
    "code": "2110132101103221100321111113023211111132211003210011030232110032110001302321001103332233",
    "parse": [
      "define",
      "car",
      [
        "?",
        "pair",
        [
          -1,
          "pair",
          [
            "?",
            "x",
            [
              -1,
              "?",
              "y",
              [
                -1,
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 584
  },
  {
    "role": "code",
    "lines": [
      "define cdr (? pair | pair (? x | ? y | y));"
    ],
    "code": "2110132101113221100321111113023211111132211003210011030232110032110001302321100013332233",
    "parse": [
      "define",
      "cdr",
      [
        "?",
        "pair",
        [
          -1,
          "pair",
          [
            "?",
            "x",
            [
              -1,
              "?",
              "y",
              [
                -1,
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 585
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 0 4) | = (car | x) 0;"
    ],
    "code": "21110321001103221010132032100330232103221011030232100110332032233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        0,
        4
      ],
      [
        -1,
        "=",
        [
          "car",
          [
            -1,
            "x"
          ]
        ],
        0
      ]
    ],
    "stanza": 586
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 0 4) | = (cdr | x) 4;"
    ],
    "code": "2111032100110322101013203210033023210322101113023210011033210032233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        0,
        4
      ],
      [
        -1,
        "=",
        [
          "cdr",
          [
            -1,
            "x"
          ]
        ],
        4
      ]
    ],
    "stanza": 587
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 6 2) | = (car | x) 6;"
    ],
    "code": "21110321001103221010132110321033023210322101103023210011033211032233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        6,
        2
      ],
      [
        -1,
        "=",
        [
          "car",
          [
            -1,
            "x"
          ]
        ],
        6
      ]
    ],
    "stanza": 588
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 6 2) | = (cdr | x) 2;"
    ],
    "code": "2111032100110322101013211032103302321032210111302321001103321032233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        6,
        2
      ],
      [
        -1,
        "=",
        [
          "cdr",
          [
            -1,
            "x"
          ]
        ],
        2
      ]
    ],
    "stanza": 589
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 3 9) | = (car | x) 3;"
    ],
    "code": "21110321001103221010132113210013302321032210110302321001103321132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        3,
        9
      ],
      [
        -1,
        "=",
        [
          "car",
          [
            -1,
            "x"
          ]
        ],
        3
      ]
    ],
    "stanza": 590
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 3 9) | = (cdr | x) 9;"
    ],
    "code": "2111032100110322101013211321001330232103221011130232100110332100132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        3,
        9
      ],
      [
        -1,
        "=",
        [
          "cdr",
          [
            -1,
            "x"
          ]
        ],
        9
      ]
    ],
    "stanza": 591
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 7 | cons 10 2) | = (car | x) 7;"
    ],
    "code": "211103210011032210101321113023210101321010321033023210322101103023210011033211132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        7,
        [
          -1,
          "cons",
          10,
          2
        ]
      ],
      [
        -1,
        "=",
        [
          "car",
          [
            -1,
            "x"
          ]
        ],
        7
      ]
    ],
    "stanza": 592
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 7 | cons 10 2) | = (car | cdr | x) 10;"
    ],
    "code": "21110321001103221010132111302321010132101032103302321032210110302321011130232100110332101032233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        7,
        [
          -1,
          "cons",
          10,
          2
        ]
      ],
      [
        -1,
        "=",
        [
          "car",
          [
            -1,
            "cdr",
            [
              -1,
              "x"
            ]
          ]
        ],
        10
      ]
    ],
    "stanza": 593
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 7 | cons 10 2) | = (cdr | cdr | x) 2;"
    ],
    "code": "211103210011032210101321113023210101321010321033023210322101113023210111302321001103321032233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        7,
        [
          -1,
          "cons",
          10,
          2
        ]
      ],
      [
        -1,
        "=",
        [
          "cdr",
          [
            -1,
            "cdr",
            [
              -1,
              "x"
            ]
          ]
        ],
        2
      ]
    ],
    "stanza": 594
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 1 | cons 15 17) | = (car | x) 1;"
    ],
    "code": "21110321001103221010132130232101013211113210001330232103221011030232100110332132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        1,
        [
          -1,
          "cons",
          15,
          17
        ]
      ],
      [
        -1,
        "=",
        [
          "car",
          [
            -1,
            "x"
          ]
        ],
        1
      ]
    ],
    "stanza": 595
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 1 | cons 15 17) | = (car | cdr | x) 15;"
    ],
    "code": "211103210011032210101321302321010132111132100013302321032210110302321011130232100110332111132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        1,
        [
          -1,
          "cons",
          15,
          17
        ]
      ],
      [
        -1,
        "=",
        [
          "car",
          [
            -1,
            "cdr",
            [
              -1,
              "x"
            ]
          ]
        ],
        15
      ]
    ],
    "stanza": 596
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 1 | cons 15 17) | = (cdr | cdr | x) 17;"
    ],
    "code": "2111032100110322101013213023210101321111321000133023210322101113023210111302321001103321000132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        1,
        [
          -1,
          "cons",
          15,
          17
        ]
      ],
      [
        -1,
        "=",
        [
          "cdr",
          [
            -1,
            "cdr",
            [
              -1,
              "x"
            ]
          ]
        ],
        17
      ]
    ],
    "stanza": 597
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 8 | cons 14 9) | = (car | x) 8;"
    ],
    "code": "2111032100110322101013210003023210101321110321001330232103221011030232100110332100032233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        8,
        [
          -1,
          "cons",
          14,
          9
        ]
      ],
      [
        -1,
        "=",
        [
          "car",
          [
            -1,
            "x"
          ]
        ],
        8
      ]
    ],
    "stanza": 598
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 8 | cons 14 9) | = (car | cdr | x) 14;"
    ],
    "code": "21110321001103221010132100030232101013211103210013302321032210110302321011130232100110332111032233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        8,
        [
          -1,
          "cons",
          14,
          9
        ]
      ],
      [
        -1,
        "=",
        [
          "car",
          [
            -1,
            "cdr",
            [
              -1,
              "x"
            ]
          ]
        ],
        14
      ]
    ],
    "stanza": 599
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 8 | cons 14 9) | = (cdr | cdr | x) 9;"
    ],
    "code": "21110321001103221010132100030232101013211103210013302321032210111302321011130232100110332100132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        8,
        [
          -1,
          "cons",
          14,
          9
        ]
      ],
      [
        -1,
        "=",
        [
          "cdr",
          [
            -1,
            "cdr",
            [
              -1,
              "x"
            ]
          ]
        ],
        9
      ]
    ],
    "stanza": 600
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | and (= 3 | car | x) | and (= 0 | car | cdr | x) | and (= 2 | car | cdr | cdr | x) | and (= 4 | car | cdr | cdr | cdr | x) (= 1 | cdr | cdr | cdr | cdr | x);"
    ],
    "code": "2111032100110322101013211302321010132030232101013210302321010132100321330232101322103211302321011030232100110330232101322103203023210110302321011130232100110330232101322103210302321011030232101113023210111302321001103302321013221032100302321011030232101113023210111302321011130232100110332210321302321011130232101113023210111302321011130232100110332233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        3,
        [
          -1,
          "cons",
          0,
          [
            -1,
            "cons",
            2,
            [
              -1,
              "cons",
              4,
              1
            ]
          ]
        ]
      ],
      [
        -1,
        "and",
        [
          "=",
          3,
          [
            -1,
            "car",
            [
              -1,
              "x"
            ]
          ]
        ],
        [
          -1,
          "and",
          [
            "=",
            0,
            [
              -1,
              "car",
              [
                -1,
                "cdr",
                [
                  -1,
                  "x"
                ]
              ]
            ]
          ],
          [
            -1,
            "and",
            [
              "=",
              2,
              [
                -1,
                "car",
                [
                  -1,
                  "cdr",
                  [
                    -1,
                    "cdr",
                    [
                      -1,
                      "x"
                    ]
                  ]
                ]
              ]
            ],
            [
              -1,
              "and",
              [
                "=",
                4,
                [
                  -1,
                  "car",
                  [
                    -1,
                    "cdr",
                    [
                      -1,
                      "cdr",
                      [
                        -1,
                        "cdr",
                        [
                          -1,
                          "x"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "=",
                1,
                [
                  -1,
                  "cdr",
                  [
                    -1,
                    "cdr",
                    [
                      -1,
                      "cdr",
                      [
                        -1,
                        "cdr",
                        [
                          -1,
                          "x"
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 601
  },
  {
    "role": "file",
    "lines": [
      "== COS_Mutable =="
    ],
    "stanza": 602
  },
  {
    "role": "comment",
    "lines": [
      "# MATH introduce mutable objects, and side-effects"
    ],
    "section_description": "introduce mutable objects, and side-effects",
    "section_category": "MATH",
    "section_index": 16,
    "stanza": 603
  },
  {
    "role": "code",
    "lines": [
      "intro make-cell;"
    ],
    "code": "20321101132233",
    "parse": [
      "intro",
      "make-cell"
    ],
    "stanza": 604
  },
  {
    "role": "code",
    "lines": [
      "intro set!;"
    ],
    "code": "20321110032233",
    "parse": [
      "intro",
      "set!"
    ],
    "stanza": 605
  },
  {
    "role": "code",
    "lines": [
      "intro get!;"
    ],
    "code": "20321110132233",
    "parse": [
      "intro",
      "get!"
    ],
    "stanza": 606
  },
  {
    "role": "code",
    "lines": [
      "define demo-mut1 | make-cell 0;"
    ],
    "code": "21101321000000302321101132032233",
    "parse": [
      "define",
      "demo-mut1",
      [
        -1,
        "make-cell",
        0
      ]
    ],
    "stanza": 607
  },
  {
    "role": "code",
    "lines": [
      "set! (demo-mut1) 15;"
    ],
    "code": "2111003221000000332111132233",
    "parse": [
      "set!",
      [
        "demo-mut1"
      ],
      15
    ],
    "stanza": 608
  },
  {
    "role": "code",
    "lines": [
      "= (get! | demo-mut1) 15;"
    ],
    "code": "21032211101302321000000332111132233",
    "parse": [
      "=",
      [
        "get!",
        [
          -1,
          "demo-mut1"
        ]
      ],
      15
    ],
    "stanza": 609
  },
  {
    "role": "code",
    "lines": [
      "set! (demo-mut1) 5;"
    ],
    "code": "211100322100000033210132233",
    "parse": [
      "set!",
      [
        "demo-mut1"
      ],
      5
    ],
    "stanza": 610
  },
  {
    "role": "code",
    "lines": [
      "set! (demo-mut1) 7;"
    ],
    "code": "211100322100000033211132233",
    "parse": [
      "set!",
      [
        "demo-mut1"
      ],
      7
    ],
    "stanza": 611
  },
  {
    "role": "code",
    "lines": [
      "= (get! | demo-mut1) 7;"
    ],
    "code": "2103221110130232100000033211132233",
    "parse": [
      "=",
      [
        "get!",
        [
          -1,
          "demo-mut1"
        ]
      ],
      7
    ],
    "stanza": 612
  },
  {
    "role": "code",
    "lines": [
      "define demo-mut2 | make-cell 11;"
    ],
    "code": "21101321000001302321101132101132233",
    "parse": [
      "define",
      "demo-mut2",
      [
        -1,
        "make-cell",
        11
      ]
    ],
    "stanza": 613
  },
  {
    "role": "code",
    "lines": [
      "= (get! | demo-mut2) 11;"
    ],
    "code": "21032211101302321000001332101132233",
    "parse": [
      "=",
      [
        "get!",
        [
          -1,
          "demo-mut2"
        ]
      ],
      11
    ],
    "stanza": 614
  },
  {
    "role": "code",
    "lines": [
      "set! (demo-mut2) 22;"
    ],
    "code": "21110032210000013321011032233",
    "parse": [
      "set!",
      [
        "demo-mut2"
      ],
      22
    ],
    "stanza": 615
  },
  {
    "role": "code",
    "lines": [
      "= (get! | demo-mut2) 22;"
    ],
    "code": "210322111013023210000013321011032233",
    "parse": [
      "=",
      [
        "get!",
        [
          -1,
          "demo-mut2"
        ]
      ],
      22
    ],
    "stanza": 616
  },
  {
    "role": "code",
    "lines": [
      "= (get! | demo-mut1) 7;"
    ],
    "code": "2103221110130232100000033211132233",
    "parse": [
      "=",
      [
        "get!",
        [
          -1,
          "demo-mut1"
        ]
      ],
      7
    ],
    "stanza": 617
  },
  {
    "role": "code",
    "lines": [
      "= (+ (get! | demo-mut1) (get! | demo-mut2)) 29;"
    ],
    "code": "21032210103221110130232100000033221110130232100000133321110132233",
    "parse": [
      "=",
      [
        "+",
        [
          "get!",
          [
            -1,
            "demo-mut1"
          ]
        ],
        [
          "get!",
          [
            -1,
            "demo-mut2"
          ]
        ]
      ],
      29
    ],
    "stanza": 618
  },
  {
    "role": "code",
    "lines": [
      "if (= (get! | demo-mut1) 7) (set! (demo-mut1) 88) (set! (demo-mut1) 99);"
    ],
    "code": "2111132210322111013023210000003321113322111003221000000332101100033221110032210000003321100011332233",
    "parse": [
      "if",
      [
        "=",
        [
          "get!",
          [
            -1,
            "demo-mut1"
          ]
        ],
        7
      ],
      [
        "set!",
        [
          "demo-mut1"
        ],
        88
      ],
      [
        "set!",
        [
          "demo-mut1"
        ],
        99
      ]
    ],
    "stanza": 619
  },
  {
    "role": "code",
    "lines": [
      "= (get! | demo-mut1) 88;"
    ],
    "code": "21032211101302321000000332101100032233",
    "parse": [
      "=",
      [
        "get!",
        [
          -1,
          "demo-mut1"
        ]
      ],
      88
    ],
    "stanza": 620
  },
  {
    "role": "code",
    "lines": [
      "if (= (get! | demo-mut1) 7) (set! (demo-mut1) 88) (set! (demo-mut1) 99);"
    ],
    "code": "2111132210322111013023210000003321113322111003221000000332101100033221110032210000003321100011332233",
    "parse": [
      "if",
      [
        "=",
        [
          "get!",
          [
            -1,
            "demo-mut1"
          ]
        ],
        7
      ],
      [
        "set!",
        [
          "demo-mut1"
        ],
        88
      ],
      [
        "set!",
        [
          "demo-mut1"
        ],
        99
      ]
    ],
    "stanza": 621
  },
  {
    "role": "code",
    "lines": [
      "= (get! | demo-mut1) 99;"
    ],
    "code": "21032211101302321000000332110001132233",
    "parse": [
      "=",
      [
        "get!",
        [
          -1,
          "demo-mut1"
        ]
      ],
      99
    ],
    "stanza": 622
  },
  {
    "role": "file",
    "lines": [
      "== COS_ListPre =="
    ],
    "stanza": 623
  },
  {
    "role": "comment",
    "lines": [
      "# MATH illustrate lists and some list operators",
      "# to make list describable as a function, need to preceed lists",
      "# ... with an argument count",
      "# Lists keep an explicit record of their length",
      "# this is to avoid the need for using a special 'nil' symbol",
      "# ... which cannot itself be placed in the list.",
      "# pending: should introduce number? check function"
    ],
    "section_description": "illustrate lists and some list operators",
    "section_category": "MATH",
    "section_index": 17,
    "stanza": 624
  },
  {
    "role": "code",
    "lines": [
      "define list-helper | ? n | ? ret | if (> (n) 1) (? x | list-helper (- (n) 1) (? y | ? z | ret (+ 1 (y)) (cons (x) (z)))) (? x | ret 1 (x));"
    ],
    "code": "211013210000103023211003211101130232110032100001130232111132211322111011332133221100321001103023210000103221011322111011332133221100321100013023211003211001030232100001132210103213221100013332210101322100110332211001033333221100321001103023210000113213221001103332233",
    "parse": [
      "define",
      "list-helper",
      [
        -1,
        "?",
        "n",
        [
          -1,
          "?",
          "ret",
          [
            -1,
            "if",
            [
              ">",
              [
                "n"
              ],
              1
            ],
            [
              "?",
              "x",
              [
                -1,
                "list-helper",
                [
                  "-",
                  [
                    "n"
                  ],
                  1
                ],
                [
                  "?",
                  "y",
                  [
                    -1,
                    "?",
                    "z",
                    [
                      -1,
                      "ret",
                      [
                        "+",
                        1,
                        [
                          "y"
                        ]
                      ],
                      [
                        "cons",
                        [
                          "x"
                        ],
                        [
                          "z"
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ],
            [
              "?",
              "x",
              [
                -1,
                "ret",
                1,
                [
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 625
  },
  {
    "role": "code",
    "lines": [
      "define list | ? n | if (= (n) 0) (cons 0 0) (list-helper (n) (? y | ? z | cons (y) (z)));"
    ],
    "code": "2110132100010030232110032111011302321111322103221110113320332210101320320332210000103221110113322110032110001302321100321100103023210101322110001332211001033332233",
    "parse": [
      "define",
      "list",
      [
        -1,
        "?",
        "n",
        [
          -1,
          "if",
          [
            "=",
            [
              "n"
            ],
            0
          ],
          [
            "cons",
            0,
            0
          ],
          [
            "list-helper",
            [
              "n"
            ],
            [
              "?",
              "y",
              [
                -1,
                "?",
                "z",
                [
                  -1,
                  "cons",
                  [
                    "y"
                  ],
                  [
                    "z"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 626
  },
  {
    "role": "code",
    "lines": [
      "define head | ? lst | if (= (car | lst) 0) (undefined) (if (= (car | lst) 1) (cdr | lst) (car | cdr | lst));"
    ],
    "code": "21101321000101302321100321000110302321111322103221011030232100011033203322100000332211113221032210110302321000110332133221011130232100011033221011030232101113023210001103332233",
    "parse": [
      "define",
      "head",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "if",
          [
            "=",
            [
              "car",
              [
                -1,
                "lst"
              ]
            ],
            0
          ],
          [
            "undefined"
          ],
          [
            "if",
            [
              "=",
              [
                "car",
                [
                  -1,
                  "lst"
                ]
              ],
              1
            ],
            [
              "cdr",
              [
                -1,
                "lst"
              ]
            ],
            [
              "car",
              [
                -1,
                "cdr",
                [
                  -1,
                  "lst"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 627
  },
  {
    "role": "code",
    "lines": [
      "define tail | ? lst | if (= (car | lst) 0) (undefined) (if (= (car | lst) 1) (cons 0 0) (cons (- (car | lst) 1) (cdr | cdr | lst)));"
    ],
    "code": "2110132100011130232110032100011030232111132210322101103023210001103320332210000033221111322103221011030232100011033213322101013203203322101013221011322101103023210001103321332210111302321011130232100011033332233",
    "parse": [
      "define",
      "tail",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "if",
          [
            "=",
            [
              "car",
              [
                -1,
                "lst"
              ]
            ],
            0
          ],
          [
            "undefined"
          ],
          [
            "if",
            [
              "=",
              [
                "car",
                [
                  -1,
                  "lst"
                ]
              ],
              1
            ],
            [
              "cons",
              0,
              0
            ],
            [
              "cons",
              [
                "-",
                [
                  "car",
                  [
                    -1,
                    "lst"
                  ]
                ],
                1
              ],
              [
                "cdr",
                [
                  -1,
                  "cdr",
                  [
                    -1,
                    "lst"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 628
  },
  {
    "role": "code",
    "lines": [
      "define list-length | ? lst | car | lst;"
    ],
    "code": "21101321001000302321100321000110302321011030232100011032233",
    "parse": [
      "define",
      "list-length",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "car",
          [
            -1,
            "lst"
          ]
        ]
      ]
    ],
    "stanza": 629
  },
  {
    "role": "code",
    "lines": [
      "define list-ref | ? lst | ? n | if (= (list-ref | lst) 0) (undefined) (if (= (n) 0) (head | lst) (list-ref (tail | lst) (- (n) 1)));"
    ],
    "code": "211013210010013023211003210001103023211003211101130232111132210322100100130232100011033203322100000332211113221032211101133203322100010130232100011033221001001322100011130232100011033221011322111011332133332233",
    "parse": [
      "define",
      "list-ref",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "?",
          "n",
          [
            -1,
            "if",
            [
              "=",
              [
                "list-ref",
                [
                  -1,
                  "lst"
                ]
              ],
              0
            ],
            [
              "undefined"
            ],
            [
              "if",
              [
                "=",
                [
                  "n"
                ],
                0
              ],
              [
                "head",
                [
                  -1,
                  "lst"
                ]
              ],
              [
                "list-ref",
                [
                  "tail",
                  [
                    -1,
                    "lst"
                  ]
                ],
                [
                  "-",
                  [
                    "n"
                  ],
                  1
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 630
  },
  {
    "role": "code",
    "lines": [
      "define prepend | ? x | ? lst | if (= (list-length | lst) 0) (cons 1 (x)) (cons (+ (list-length | lst) 1) (cons (x) (cdr | lst)));"
    ],
    "code": "21101321001010302321100321001103023211003210001103023211113221032210010003023210001103320332210101321322100110333221010132210103221001000302321000110332133221010132210011033221011130232100011033332233",
    "parse": [
      "define",
      "prepend",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "lst",
          [
            -1,
            "if",
            [
              "=",
              [
                "list-length",
                [
                  -1,
                  "lst"
                ]
              ],
              0
            ],
            [
              "cons",
              1,
              [
                "x"
              ]
            ],
            [
              "cons",
              [
                "+",
                [
                  "list-length",
                  [
                    -1,
                    "lst"
                  ]
                ],
                1
              ],
              [
                "cons",
                [
                  "x"
                ],
                [
                  "cdr",
                  [
                    -1,
                    "lst"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 631
  },
  {
    "role": "code",
    "lines": [
      "define equal | ? x | ? y | if (= (number? (x)) (number? (y))) (if (number? (x)) (= (x) (y)) (list= (x) (y))) (false);"
    ],
    "code": "21101321000302321100321001103023211003211000130232111132210322110003221001103332211000322110001333322111132211000322100110333221032210011033221100013332210010113221001103322110001333322110111332233",
    "parse": [
      "define",
      "equal",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              "=",
              [
                "number?",
                [
                  "x"
                ]
              ],
              [
                "number?",
                [
                  "y"
                ]
              ]
            ],
            [
              "if",
              [
                "number?",
                [
                  "x"
                ]
              ],
              [
                "=",
                [
                  "x"
                ],
                [
                  "y"
                ]
              ],
              [
                "list=",
                [
                  "x"
                ],
                [
                  "y"
                ]
              ]
            ],
            [
              "false"
            ]
          ]
        ]
      ]
    ],
    "stanza": 632
  },
  {
    "role": "code",
    "lines": [
      "define list= | ? x | ? y | if (= (list-length | x) (list-length | y)) (if (> (list-length | x) 0) (and (equal (head | x) (head | y)) (list= (tail | x) (tail | y))) (true)) (false);"
    ],
    "code": "211013210010113023211003210011030232110032110001302321111322103221001000302321001103322100100030232110001333221111322113221001000302321001103320332210132210003221000101302321001103322100010130232110001333221001011322100011130232100110332210001113023211000133332211011033322110111332233",
    "parse": [
      "define",
      "list=",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              "=",
              [
                "list-length",
                [
                  -1,
                  "x"
                ]
              ],
              [
                "list-length",
                [
                  -1,
                  "y"
                ]
              ]
            ],
            [
              "if",
              [
                ">",
                [
                  "list-length",
                  [
                    -1,
                    "x"
                  ]
                ],
                0
              ],
              [
                "and",
                [
                  "equal",
                  [
                    "head",
                    [
                      -1,
                      "x"
                    ]
                  ],
                  [
                    "head",
                    [
                      -1,
                      "y"
                    ]
                  ]
                ],
                [
                  "list=",
                  [
                    "tail",
                    [
                      -1,
                      "x"
                    ]
                  ],
                  [
                    "tail",
                    [
                      -1,
                      "y"
                    ]
                  ]
                ]
              ],
              [
                "true"
              ]
            ],
            [
              "false"
            ]
          ]
        ]
      ]
    ],
    "stanza": 633
  },
  {
    "role": "code",
    "lines": [
      "= (list-length | (list 0)) 0;"
    ],
    "code": "210322100100030232210001003203332032233",
    "parse": [
      "=",
      [
        "list-length",
        [
          -1,
          [
            "list",
            0
          ]
        ]
      ],
      0
    ],
    "stanza": 634
  },
  {
    "role": "code",
    "lines": [
      "= (list-length | (list 4) 6 1 0 4) 4;"
    ],
    "code": "21032210010003023221000100321003321103213203210033210032233",
    "parse": [
      "=",
      [
        "list-length",
        [
          -1,
          [
            "list",
            4
          ],
          6,
          1,
          0,
          4
        ]
      ],
      4
    ],
    "stanza": 635
  },
  {
    "role": "code",
    "lines": [
      "= (list-length | (list 6) 6 2 7 0 9 4) 6;"
    ],
    "code": "21032210010003023221000100321103321103210321113203210013210033211032233",
    "parse": [
      "=",
      [
        "list-length",
        [
          -1,
          [
            "list",
            6
          ],
          6,
          2,
          7,
          0,
          9,
          4
        ]
      ],
      6
    ],
    "stanza": 636
  },
  {
    "role": "code",
    "lines": [
      "= (list-length | (list 2) 4 9) 2;"
    ],
    "code": "2103221001000302322100010032103321003210013321032233",
    "parse": [
      "=",
      [
        "list-length",
        [
          -1,
          [
            "list",
            2
          ],
          4,
          9
        ]
      ],
      2
    ],
    "stanza": 637
  },
  {
    "role": "code",
    "lines": [
      "= (list-length | (list 3) 6 1 7) 3;"
    ],
    "code": "210322100100030232210001003211332110321321113321132233",
    "parse": [
      "=",
      [
        "list-length",
        [
          -1,
          [
            "list",
            3
          ],
          6,
          1,
          7
        ]
      ],
      3
    ],
    "stanza": 638
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 6) 12 11 10 4 1 5) 12;"
    ],
    "code": "210322100010130232210001003211033211003210113210103210032132101332110032233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            6
          ],
          12,
          11,
          10,
          4,
          1,
          5
        ]
      ],
      12
    ],
    "stanza": 639
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 6) 12 11 10 4 1 5) ((list 5) 11 10 4 1 5);"
    ],
    "code": "210010113221000111302322100010032110332110032101132101032100321321013322210001003210133210113210103210032132101332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            6
          ],
          12,
          11,
          10,
          4,
          1,
          5
        ]
      ],
      [
        [
          "list",
          5
        ],
        11,
        10,
        4,
        1,
        5
      ]
    ],
    "stanza": 640
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 8) 15 13 12 7 10 11 13 18) 15;"
    ],
    "code": "210322100010130232210001003210003321111321101321100321113210103210113211013210010332111132233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            8
          ],
          15,
          13,
          12,
          7,
          10,
          11,
          13,
          18
        ]
      ],
      15
    ],
    "stanza": 641
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 8) 15 13 12 7 10 11 13 18) ((list 7) 13 12 7 10 11 13 18);"
    ],
    "code": "21001011322100011130232210001003210003321111321101321100321113210103210113211013210010332221000100321113321101321100321113210103210113211013210010332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            8
          ],
          15,
          13,
          12,
          7,
          10,
          11,
          13,
          18
        ]
      ],
      [
        [
          "list",
          7
        ],
        13,
        12,
        7,
        10,
        11,
        13,
        18
      ]
    ],
    "stanza": 642
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 2) 11 1) 11;"
    ],
    "code": "2103221000101302322100010032103321011321332101132233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            2
          ],
          11,
          1
        ]
      ],
      11
    ],
    "stanza": 643
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 2) 11 1) ((list 1) 1);"
    ],
    "code": "2100101132210001113023221000100321033210113213322210001003213321332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            2
          ],
          11,
          1
        ]
      ],
      [
        [
          "list",
          1
        ],
        1
      ]
    ],
    "stanza": 644
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 6) 5 19 4 16 6 11) 5;"
    ],
    "code": "210322100010130232210001003211033210132100113210032100003211032101133210132233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            6
          ],
          5,
          19,
          4,
          16,
          6,
          11
        ]
      ],
      5
    ],
    "stanza": 645
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 6) 5 19 4 16 6 11) ((list 5) 19 4 16 6 11);"
    ],
    "code": "210010113221000111302322100010032110332101321001132100321000032110321011332221000100321013321001132100321000032110321011332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            6
          ],
          5,
          19,
          4,
          16,
          6,
          11
        ]
      ],
      [
        [
          "list",
          5
        ],
        19,
        4,
        16,
        6,
        11
      ]
    ],
    "stanza": 646
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 10) 12 18 7 4 9 18 6 16 6 18) 12;"
    ],
    "code": "210322100010130232210001003210103321100321001032111321003210013210010321103210000321103210010332110032233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            10
          ],
          12,
          18,
          7,
          4,
          9,
          18,
          6,
          16,
          6,
          18
        ]
      ],
      12
    ],
    "stanza": 647
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 10) 12 18 7 4 9 18 6 16 6 18) ((list 9) 18 7 4 9 18 6 16 6 18);"
    ],
    "code": "210010113221000111302322100010032101033211003210010321113210032100132100103211032100003211032100103322210001003210013321001032111321003210013210010321103210000321103210010332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            10
          ],
          12,
          18,
          7,
          4,
          9,
          18,
          6,
          16,
          6,
          18
        ]
      ],
      [
        [
          "list",
          9
        ],
        18,
        7,
        4,
        9,
        18,
        6,
        16,
        6,
        18
      ]
    ],
    "stanza": 648
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 6) 19 7 3 10 19 13) 19;"
    ],
    "code": "21032210001013023221000100321103321001132111321132101032100113211013321001132233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            6
          ],
          19,
          7,
          3,
          10,
          19,
          13
        ]
      ],
      19
    ],
    "stanza": 649
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 6) 19 7 3 10 19 13) ((list 5) 7 3 10 19 13);"
    ],
    "code": "2100101132210001113023221000100321103321001132111321132101032100113211013322210001003210133211132113210103210011321101332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            6
          ],
          19,
          7,
          3,
          10,
          19,
          13
        ]
      ],
      [
        [
          "list",
          5
        ],
        7,
        3,
        10,
        19,
        13
      ]
    ],
    "stanza": 650
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 6) 19 7 19 12 16 13) 19;"
    ],
    "code": "21032210001013023221000100321103321001132111321001132110032100003211013321001132233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            6
          ],
          19,
          7,
          19,
          12,
          16,
          13
        ]
      ],
      19
    ],
    "stanza": 651
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 6) 19 7 19 12 16 13) ((list 5) 7 19 12 16 13);"
    ],
    "code": "2100101132210001113023221000100321103321001132111321001132110032100003211013322210001003210133211132100113211003210000321101332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            6
          ],
          19,
          7,
          19,
          12,
          16,
          13
        ]
      ],
      [
        [
          "list",
          5
        ],
        7,
        19,
        12,
        16,
        13
      ]
    ],
    "stanza": 652
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 1) 3) 3;"
    ],
    "code": "21032210001013023221000100321332113321132233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            1
          ],
          3
        ]
      ],
      3
    ],
    "stanza": 653
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 1) 3) ((list 0));"
    ],
    "code": "2100101132210001113023221000100321332113322210001003203332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            1
          ],
          3
        ]
      ],
      [
        [
          "list",
          0
        ]
      ]
    ],
    "stanza": 654
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 3) 2 19 17) 2;"
    ],
    "code": "21032210001013023221000100321133210321001132100013321032233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            3
          ],
          2,
          19,
          17
        ]
      ],
      2
    ],
    "stanza": 655
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 3) 2 19 17) ((list 2) 19 17);"
    ],
    "code": "2100101132210001113023221000100321133210321001132100013322210001003210332100113210001332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            3
          ],
          2,
          19,
          17
        ]
      ],
      [
        [
          "list",
          2
        ],
        19,
        17
      ]
    ],
    "stanza": 656
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 7) 1 16 5 14 6 19 2) 1;"
    ],
    "code": "210322100010130232210001003211133213210000321013211103211032100113210332132233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            7
          ],
          1,
          16,
          5,
          14,
          6,
          19,
          2
        ]
      ],
      1
    ],
    "stanza": 657
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 7) 1 16 5 14 6 19 2) ((list 6) 16 5 14 6 19 2);"
    ],
    "code": "210010113221000111302322100010032111332132100003210132111032110321001132103322210001003211033210000321013211103211032100113210332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            7
          ],
          1,
          16,
          5,
          14,
          6,
          19,
          2
        ]
      ],
      [
        [
          "list",
          6
        ],
        16,
        5,
        14,
        6,
        19,
        2
      ]
    ],
    "stanza": 658
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 3) 18 14 17) 1) 14;"
    ],
    "code": "21032210010013222100010032113321001032111032100013321332111032233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            3
          ],
          18,
          14,
          17
        ],
        1
      ],
      14
    ],
    "stanza": 659
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 3) 8 11 10) 2) 10;"
    ],
    "code": "2103221001001322210001003211332100032101132101033210332101032233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            3
          ],
          8,
          11,
          10
        ],
        2
      ],
      10
    ],
    "stanza": 660
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 8) 15 0 4 9 9 2 10 17) 3) 9;"
    ],
    "code": "2103221001001322210001003210003321111320321003210013210013210321010321000133211332100132233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            8
          ],
          15,
          0,
          4,
          9,
          9,
          2,
          10,
          17
        ],
        3
      ],
      9
    ],
    "stanza": 661
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 7) 4 8 8 5 14 5 13) 4) 14;"
    ],
    "code": "210322100100132221000100321113321003210003210003210132111032101321101332100332111032233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            7
          ],
          4,
          8,
          8,
          5,
          14,
          5,
          13
        ],
        4
      ],
      14
    ],
    "stanza": 662
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 4) 1 4 7 18) 2) 7;"
    ],
    "code": "210322100100132221000100321003321321003211132100103321033211132233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            4
          ],
          1,
          4,
          7,
          18
        ],
        2
      ],
      7
    ],
    "stanza": 663
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 3) 12 2 3) 1) 2;"
    ],
    "code": "210322100100132221000100321133211003210321133213321032233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            3
          ],
          12,
          2,
          3
        ],
        1
      ],
      2
    ],
    "stanza": 664
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 6) 12 5 7 15 7 16) 2) 7;"
    ],
    "code": "21032210010013222100010032110332110032101321113211113211132100003321033211132233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            6
          ],
          12,
          5,
          7,
          15,
          7,
          16
        ],
        2
      ],
      7
    ],
    "stanza": 665
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 8) 5 15 7 14 7 1 11 19) 0) 5;"
    ],
    "code": "21032210010013222100010032100033210132111132111321110321113213210113210011332033210132233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            8
          ],
          5,
          15,
          7,
          14,
          7,
          1,
          11,
          19
        ],
        0
      ],
      5
    ],
    "stanza": 666
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 3) 19 17 8) 2) 8;"
    ],
    "code": "210322100100132221000100321133210011321000132100033210332100032233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            3
          ],
          19,
          17,
          8
        ],
        2
      ],
      8
    ],
    "stanza": 667
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 4) 10 10 4 11) 1) 10;"
    ],
    "code": "210322100100132221000100321003321010321010321003210113321332101032233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            4
          ],
          10,
          10,
          4,
          11
        ],
        1
      ],
      10
    ],
    "stanza": 668
  },
  {
    "role": "code",
    "lines": [
      "list= ((list 0)) ((list 0));"
    ],
    "code": "210010113222100010032033322210001003203332233",
    "parse": [
      "list=",
      [
        [
          "list",
          0
        ]
      ],
      [
        [
          "list",
          0
        ]
      ]
    ],
    "stanza": 669
  },
  {
    "role": "code",
    "lines": [
      "list= ((list 1) 4) ((list 1) 4);"
    ],
    "code": "2100101132221000100321332100332221000100321332100332233",
    "parse": [
      "list=",
      [
        [
          "list",
          1
        ],
        4
      ],
      [
        [
          "list",
          1
        ],
        4
      ]
    ],
    "stanza": 670
  },
  {
    "role": "code",
    "lines": [
      "list= ((list 2) 7 5) ((list 2) 7 5);"
    ],
    "code": "2100101132221000100321033211132101332221000100321033211132101332233",
    "parse": [
      "list=",
      [
        [
          "list",
          2
        ],
        7,
        5
      ],
      [
        [
          "list",
          2
        ],
        7,
        5
      ]
    ],
    "stanza": 671
  },
  {
    "role": "code",
    "lines": [
      "list= ((list 3) 15 13 11) ((list 3) 15 13 11);"
    ],
    "code": "21001011322210001003211332111132110132101133222100010032113321111321101321011332233",
    "parse": [
      "list=",
      [
        [
          "list",
          3
        ],
        15,
        13,
        11
      ],
      [
        [
          "list",
          3
        ],
        15,
        13,
        11
      ]
    ],
    "stanza": 672
  },
  {
    "role": "code",
    "lines": [
      "list= ((list 4) 2 8 0 6) ((list 4) 2 8 0 6);"
    ],
    "code": "2100101132221000100321003321032100032032110332221000100321003321032100032032110332233",
    "parse": [
      "list=",
      [
        [
          "list",
          4
        ],
        2,
        8,
        0,
        6
      ],
      [
        [
          "list",
          4
        ],
        2,
        8,
        0,
        6
      ]
    ],
    "stanza": 673
  },
  {
    "role": "comment",
    "lines": [
      "# this next batch of examples are a bit misleading, should streamline"
    ],
    "stanza": 674
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 0)) ((list 1) 9);"
    ],
    "code": "21003023210010113222100010032033322210001003213321001332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            0
          ]
        ],
        [
          [
            "list",
            1
          ],
          9
        ]
      ]
    ],
    "stanza": 675
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 0)) ((list 1) 5);"
    ],
    "code": "2100302321001011322210001003203332221000100321332101332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            0
          ]
        ],
        [
          [
            "list",
            1
          ],
          5
        ]
      ]
    ],
    "stanza": 676
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 1) 18) ((list 2) 8 18);"
    ],
    "code": "21003023210010113222100010032133210010332221000100321033210003210010332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            1
          ],
          18
        ],
        [
          [
            "list",
            2
          ],
          8,
          18
        ]
      ]
    ],
    "stanza": 677
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 1) 18) ((list 2) 18 5);"
    ],
    "code": "2100302321001011322210001003213321001033222100010032103321001032101332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            1
          ],
          18
        ],
        [
          [
            "list",
            2
          ],
          18,
          5
        ]
      ]
    ],
    "stanza": 678
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 2) 11 18) ((list 3) 7 11 18);"
    ],
    "code": "21003023210010113222100010032103321011321001033222100010032113321113210113210010332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            2
          ],
          11,
          18
        ],
        [
          [
            "list",
            3
          ],
          7,
          11,
          18
        ]
      ]
    ],
    "stanza": 679
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 2) 11 18) ((list 3) 11 18 6);"
    ],
    "code": "21003023210010113222100010032103321011321001033222100010032113321011321001032110332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            2
          ],
          11,
          18
        ],
        [
          [
            "list",
            3
          ],
          11,
          18,
          6
        ]
      ]
    ],
    "stanza": 680
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 3) 7 19 17) ((list 4) 6 7 19 17);"
    ],
    "code": "210030232100101132221000100321133211132100113210001332221000100321003321103211132100113210001332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            3
          ],
          7,
          19,
          17
        ],
        [
          [
            "list",
            4
          ],
          6,
          7,
          19,
          17
        ]
      ]
    ],
    "stanza": 681
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 3) 7 19 17) ((list 4) 7 19 17 0);"
    ],
    "code": "2100302321001011322210001003211332111321001132100013322210001003210033211132100113210001320332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            3
          ],
          7,
          19,
          17
        ],
        [
          [
            "list",
            4
          ],
          7,
          19,
          17,
          0
        ]
      ]
    ],
    "stanza": 682
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 4) 10 0 11 1) ((list 5) 0 10 0 11 1);"
    ],
    "code": "210030232100101132221000100321003321010320321011321332221000100321013320321010320321011321332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            4
          ],
          10,
          0,
          11,
          1
        ],
        [
          [
            "list",
            5
          ],
          0,
          10,
          0,
          11,
          1
        ]
      ]
    ],
    "stanza": 683
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 4) 10 0 11 1) ((list 5) 10 0 11 1 8);"
    ],
    "code": "210030232100101132221000100321003321010320321011321332221000100321013321010320321011321321000332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            4
          ],
          10,
          0,
          11,
          1
        ],
        [
          [
            "list",
            5
          ],
          10,
          0,
          11,
          1,
          8
        ]
      ]
    ],
    "stanza": 684
  },
  {
    "role": "comment",
    "lines": [
      "# some helpful functions"
    ],
    "stanza": 685
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 8 ((list 0))) ((list 1) 8);"
    ],
    "code": "21001011322100101032100032221000100320333322210001003213321000332233",
    "parse": [
      "list=",
      [
        "prepend",
        8,
        [
          [
            "list",
            0
          ]
        ]
      ],
      [
        [
          "list",
          1
        ],
        8
      ]
    ],
    "stanza": 686
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 11 ((list 1) 8)) ((list 2) 11 8);"
    ],
    "code": "210010113221001010321011322210001003213321000333222100010032103321011321000332233",
    "parse": [
      "list=",
      [
        "prepend",
        11,
        [
          [
            "list",
            1
          ],
          8
        ]
      ],
      [
        [
          "list",
          2
        ],
        11,
        8
      ]
    ],
    "stanza": 687
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 13 ((list 2) 1 12)) ((list 3) 13 1 12);"
    ],
    "code": "2100101132210010103211013222100010032103321321100333222100010032113321101321321100332233",
    "parse": [
      "list=",
      [
        "prepend",
        13,
        [
          [
            "list",
            2
          ],
          1,
          12
        ]
      ],
      [
        [
          "list",
          3
        ],
        13,
        1,
        12
      ]
    ],
    "stanza": 688
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 0 ((list 3) 7 7 5)) ((list 4) 0 7 7 5);"
    ],
    "code": "21001011322100101032032221000100321133211132111321013332221000100321003320321113211132101332233",
    "parse": [
      "list=",
      [
        "prepend",
        0,
        [
          [
            "list",
            3
          ],
          7,
          7,
          5
        ]
      ],
      [
        [
          "list",
          4
        ],
        0,
        7,
        7,
        5
      ]
    ],
    "stanza": 689
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 16 ((list 4) 16 0 19 3)) ((list 5) 16 16 0 19 3);"
    ],
    "code": "21001011322100101032100003222100010032100332100003203210011321133322210001003210133210000321000032032100113211332233",
    "parse": [
      "list=",
      [
        "prepend",
        16,
        [
          [
            "list",
            4
          ],
          16,
          0,
          19,
          3
        ]
      ],
      [
        [
          "list",
          5
        ],
        16,
        16,
        0,
        19,
        3
      ]
    ],
    "stanza": 690
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 10 ((list 5) 5 6 7 9 10)) ((list 6) 10 5 6 7 9 10);"
    ],
    "code": "210010113221001010321010322210001003210133210132110321113210013210103332221000100321103321010321013211032111321001321010332233",
    "parse": [
      "list=",
      [
        "prepend",
        10,
        [
          [
            "list",
            5
          ],
          5,
          6,
          7,
          9,
          10
        ]
      ],
      [
        [
          "list",
          6
        ],
        10,
        5,
        6,
        7,
        9,
        10
      ]
    ],
    "stanza": 691
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 19 ((list 6) 3 19 18 6 10 16)) ((list 7) 19 3 19 18 6 10 16);"
    ],
    "code": "21001011322100101032100113222100010032110332113210011321001032110321010321000033322210001003211133210011321132100113210010321103210103210000332233",
    "parse": [
      "list=",
      [
        "prepend",
        19,
        [
          [
            "list",
            6
          ],
          3,
          19,
          18,
          6,
          10,
          16
        ]
      ],
      [
        [
          "list",
          7
        ],
        19,
        3,
        19,
        18,
        6,
        10,
        16
      ]
    ],
    "stanza": 692
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 19 ((list 7) 17 17 10 1 18 12 14)) ((list 8) 19 17 17 10 1 18 12 14);"
    ],
    "code": "210010113221001010321001132221000100321113321000132100013210103213210010321100321110333222100010032100033210011321000132100013210103213210010321100321110332233",
    "parse": [
      "list=",
      [
        "prepend",
        19,
        [
          [
            "list",
            7
          ],
          17,
          17,
          10,
          1,
          18,
          12,
          14
        ]
      ],
      [
        [
          "list",
          8
        ],
        19,
        17,
        17,
        10,
        1,
        18,
        12,
        14
      ]
    ],
    "stanza": 693
  },
  {
    "role": "code",
    "lines": [
      "define pair | ? x | ? y | (list 2) (x) (y);"
    ],
    "code": "211013211111130232110032100110302321100321100013023221000100321033221001103322110001332233",
    "parse": [
      "define",
      "pair",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            [
              "list",
              2
            ],
            [
              "x"
            ],
            [
              "y"
            ]
          ]
        ]
      ]
    ],
    "stanza": 694
  },
  {
    "role": "code",
    "lines": [
      "define first | ? lst | head | lst;"
    ],
    "code": "2110132100110030232110032100011030232100010130232100011032233",
    "parse": [
      "define",
      "first",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "head",
          [
            -1,
            "lst"
          ]
        ]
      ]
    ],
    "stanza": 695
  },
  {
    "role": "code",
    "lines": [
      "define second | ? lst | head | tail | lst;"
    ],
    "code": "2110132100110130232110032100011030232100010130232100011130232100011032233",
    "parse": [
      "define",
      "second",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "head",
          [
            -1,
            "tail",
            [
              -1,
              "lst"
            ]
          ]
        ]
      ]
    ],
    "stanza": 696
  },
  {
    "role": "code",
    "lines": [
      "list= (pair 3 6) ((list 2) 3 6);"
    ],
    "code": "2100101132211111132113211033222100010032103321132110332233",
    "parse": [
      "list=",
      [
        "pair",
        3,
        6
      ],
      [
        [
          "list",
          2
        ],
        3,
        6
      ]
    ],
    "stanza": 697
  },
  {
    "role": "code",
    "lines": [
      "= (first | pair 3 6) 3;"
    ],
    "code": "2103221001100302321111113211321103321132233",
    "parse": [
      "=",
      [
        "first",
        [
          -1,
          "pair",
          3,
          6
        ]
      ],
      3
    ],
    "stanza": 698
  },
  {
    "role": "code",
    "lines": [
      "= (second | pair 3 6) 6;"
    ],
    "code": "21032210011013023211111132113211033211032233",
    "parse": [
      "=",
      [
        "second",
        [
          -1,
          "pair",
          3,
          6
        ]
      ],
      6
    ],
    "stanza": 699
  },
  {
    "role": "code",
    "lines": [
      "list= (pair 4 9) ((list 2) 4 9);"
    ],
    "code": "21001011322111111321003210013322210001003210332100321001332233",
    "parse": [
      "list=",
      [
        "pair",
        4,
        9
      ],
      [
        [
          "list",
          2
        ],
        4,
        9
      ]
    ],
    "stanza": 700
  },
  {
    "role": "code",
    "lines": [
      "= (first | pair 4 9) 4;"
    ],
    "code": "2103221001100302321111113210032100133210032233",
    "parse": [
      "=",
      [
        "first",
        [
          -1,
          "pair",
          4,
          9
        ]
      ],
      4
    ],
    "stanza": 701
  },
  {
    "role": "code",
    "lines": [
      "= (second | pair 4 9) 9;"
    ],
    "code": "21032210011013023211111132100321001332100132233",
    "parse": [
      "=",
      [
        "second",
        [
          -1,
          "pair",
          4,
          9
        ]
      ],
      9
    ],
    "stanza": 702
  },
  {
    "role": "code",
    "lines": [
      "list= (pair 8 3) ((list 2) 8 3);"
    ],
    "code": "210010113221111113210003211332221000100321033210003211332233",
    "parse": [
      "list=",
      [
        "pair",
        8,
        3
      ],
      [
        [
          "list",
          2
        ],
        8,
        3
      ]
    ],
    "stanza": 703
  },
  {
    "role": "code",
    "lines": [
      "= (first | pair 8 3) 8;"
    ],
    "code": "2103221001100302321111113210003211332100032233",
    "parse": [
      "=",
      [
        "first",
        [
          -1,
          "pair",
          8,
          3
        ]
      ],
      8
    ],
    "stanza": 704
  },
  {
    "role": "code",
    "lines": [
      "= (second | pair 8 3) 3;"
    ],
    "code": "21032210011013023211111132100032113321132233",
    "parse": [
      "=",
      [
        "second",
        [
          -1,
          "pair",
          8,
          3
        ]
      ],
      3
    ],
    "stanza": 705
  },
  {
    "role": "code",
    "lines": [
      "define list-find-helper | ? lst | ? key | ? fail | ? idx | if (= (list-length | lst) 0) (fail 0) (if (equal (head | lst) (key)) (idx) (list-find-helper (tail | lst) (key) (fail) (+ (idx) 1)));"
    ],
    "code": "211013210011103023211003210001103023211003210011113023211003210100003023211003210100013023211113221032210010003023210001103320332210100003203322111132210003221000101302321000110332210011113332210100013322100111032210001113023210001103322100111133221010000332210103221010001332133332233",
    "parse": [
      "define",
      "list-find-helper",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "?",
          "key",
          [
            -1,
            "?",
            "fail",
            [
              -1,
              "?",
              "idx",
              [
                -1,
                "if",
                [
                  "=",
                  [
                    "list-length",
                    [
                      -1,
                      "lst"
                    ]
                  ],
                  0
                ],
                [
                  "fail",
                  0
                ],
                [
                  "if",
                  [
                    "equal",
                    [
                      "head",
                      [
                        -1,
                        "lst"
                      ]
                    ],
                    [
                      "key"
                    ]
                  ],
                  [
                    "idx"
                  ],
                  [
                    "list-find-helper",
                    [
                      "tail",
                      [
                        -1,
                        "lst"
                      ]
                    ],
                    [
                      "key"
                    ],
                    [
                      "fail"
                    ],
                    [
                      "+",
                      [
                        "idx"
                      ],
                      1
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 706
  },
  {
    "role": "code",
    "lines": [
      "define list-find | ? lst | ? key | ? fail | list-find-helper (lst) (key) (fail) 0;"
    ],
    "code": "2110132101001030232110032100011030232110032100111130232110032101000030232100111032210001103322100111133221010000332032233",
    "parse": [
      "define",
      "list-find",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "?",
          "key",
          [
            -1,
            "?",
            "fail",
            [
              -1,
              "list-find-helper",
              [
                "lst"
              ],
              [
                "key"
              ],
              [
                "fail"
              ],
              0
            ]
          ]
        ]
      ]
    ],
    "stanza": 707
  },
  {
    "role": "code",
    "lines": [
      "define example-fail | ? x 100;"
    ],
    "code": "211013210100113023211003210011032110010032233",
    "parse": [
      "define",
      "example-fail",
      [
        -1,
        "?",
        "x",
        100
      ]
    ],
    "stanza": 708
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 1) 13) 13 (example-fail)) 0;"
    ],
    "code": "2103221010010322210001003213321101332110132210100113332032233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            1
          ],
          13
        ],
        13,
        [
          "example-fail"
        ]
      ],
      0
    ],
    "stanza": 709
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 10) 0 9 8 16 15 14 17 5 9 2) 15 (example-fail)) 4;"
    ],
    "code": "21032210100103222100010032101033203210013210003210000321111321110321000132101321001321033211113221010011333210032233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            10
          ],
          0,
          9,
          8,
          16,
          15,
          14,
          17,
          5,
          9,
          2
        ],
        15,
        [
          "example-fail"
        ]
      ],
      4
    ],
    "stanza": 710
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 3) 7 4 10) 7 (example-fail)) 0;"
    ],
    "code": "21032210100103222100010032113321113210032101033211132210100113332032233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            3
          ],
          7,
          4,
          10
        ],
        7,
        [
          "example-fail"
        ]
      ],
      0
    ],
    "stanza": 711
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 6) 0 17 10 13 11 5) 17 (example-fail)) 1;"
    ],
    "code": "2103221010010322210001003211033203210001321010321101321011321013321000132210100113332132233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            6
          ],
          0,
          17,
          10,
          13,
          11,
          5
        ],
        17,
        [
          "example-fail"
        ]
      ],
      1
    ],
    "stanza": 712
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 3) 12 9 6) 12 (example-fail)) 0;"
    ],
    "code": "2103221010010322210001003211332110032100132110332110032210100113332032233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            3
          ],
          12,
          9,
          6
        ],
        12,
        [
          "example-fail"
        ]
      ],
      0
    ],
    "stanza": 713
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 7) 17 1 4 17 14 13 13) 14 (example-fail)) 4;"
    ],
    "code": "210322101001032221000100321113321000132132100321000132111032110132110133211103221010011333210032233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            7
          ],
          17,
          1,
          4,
          17,
          14,
          13,
          13
        ],
        14,
        [
          "example-fail"
        ]
      ],
      4
    ],
    "stanza": 714
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 3) 2 15 2) 15 (example-fail)) 1;"
    ],
    "code": "2103221010010322210001003211332103211113210332111132210100113332132233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            3
          ],
          2,
          15,
          2
        ],
        15,
        [
          "example-fail"
        ]
      ],
      1
    ],
    "stanza": 715
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 9) 6 13 10 8 10 9 6 15 18) 13 (example-fail)) 1;"
    ],
    "code": "210322101001032221000100321001332110321101321010321000321010321001321103211113210010332110132210100113332132233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            9
          ],
          6,
          13,
          10,
          8,
          10,
          9,
          6,
          15,
          18
        ],
        13,
        [
          "example-fail"
        ]
      ],
      1
    ],
    "stanza": 716
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 3) 12 16 0) 12 (example-fail)) 0;"
    ],
    "code": "210322101001032221000100321133211003210000320332110032210100113332032233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            3
          ],
          12,
          16,
          0
        ],
        12,
        [
          "example-fail"
        ]
      ],
      0
    ],
    "stanza": 717
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 1) 15) 15 (example-fail)) 0;"
    ],
    "code": "2103221010010322210001003213321111332111132210100113332032233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            1
          ],
          15
        ],
        15,
        [
          "example-fail"
        ]
      ],
      0
    ],
    "stanza": 718
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 4) 2 17 11 5) 14 (example-fail)) 100;"
    ],
    "code": "2103221010010322210001003210033210321000132101132101332111032210100113332110010032233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            4
          ],
          2,
          17,
          11,
          5
        ],
        14,
        [
          "example-fail"
        ]
      ],
      100
    ],
    "stanza": 719
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 6) 12 1 19 6 17 9) 2 (example-fail)) 100;"
    ],
    "code": "21032210100103222100010032110332110032132100113211032100013210013321032210100113332110010032233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            6
          ],
          12,
          1,
          19,
          6,
          17,
          9
        ],
        2,
        [
          "example-fail"
        ]
      ],
      100
    ],
    "stanza": 720
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 8) 11 6 17 8 13 10 9 16) 19 (example-fail)) 100;"
    ],
    "code": "210322101001032221000100321000332101132110321000132100032110132101032100132100003321001132210100113332110010032233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            8
          ],
          11,
          6,
          17,
          8,
          13,
          10,
          9,
          16
        ],
        19,
        [
          "example-fail"
        ]
      ],
      100
    ],
    "stanza": 721
  },
  {
    "role": "file",
    "lines": [
      "== COS_Translate =="
    ],
    "stanza": 722
  },
  {
    "role": "comment",
    "lines": [
      "# HACK describe changes to the implicit interpreter to allow new special forms"
    ],
    "section_description": "describe changes to the implicit interpreter to allow new special forms",
    "section_category": "HACK",
    "section_index": 18,
    "stanza": 723
  },
  {
    "role": "code",
    "lines": [
      "define base-translate | translate;"
    ],
    "code": "21101321010100302321100132233",
    "parse": [
      "define",
      "base-translate",
      [
        -1,
        "translate"
      ]
    ],
    "stanza": 724
  },
  {
    "role": "code",
    "lines": [
      "define translate | ? x | if (= (x) 32) 64 (base-translate | x);"
    ],
    "code": "21101321100130232110032100110302321111322103221001103321000003321000000322101010030232100110332233",
    "parse": [
      "define",
      "translate",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "=",
            [
              "x"
            ],
            32
          ],
          64,
          [
            "base-translate",
            [
              -1,
              "x"
            ]
          ]
        ]
      ]
    ],
    "stanza": 725
  },
  {
    "role": "code",
    "lines": [
      "= 32 64;"
    ],
    "code": "2103210000032100000032233",
    "parse": [
      "=",
      32,
      64
    ],
    "stanza": 726
  },
  {
    "role": "code",
    "lines": [
      "= (+ 32 64) 128;"
    ],
    "code": "2103221010321000003210000003321000000032233",
    "parse": [
      "=",
      [
        "+",
        32,
        64
      ],
      128
    ],
    "stanza": 727
  },
  {
    "role": "code",
    "lines": [
      "define translate | base-translate;"
    ],
    "code": "21101321100130232101010032233",
    "parse": [
      "define",
      "translate",
      [
        -1,
        "base-translate"
      ]
    ],
    "stanza": 728
  },
  {
    "role": "code",
    "lines": [
      "not | = 32 64;"
    ],
    "code": "210030232103210000032100000032233",
    "parse": [
      "not",
      [
        -1,
        "=",
        32,
        64
      ]
    ],
    "stanza": 729
  },
  {
    "role": "code",
    "lines": [
      "= (+ 32 64) 96;"
    ],
    "code": "210322101032100000321000000332110000032233",
    "parse": [
      "=",
      [
        "+",
        32,
        64
      ],
      96
    ],
    "stanza": 730
  },
  {
    "role": "comment",
    "lines": [
      "# now can create a special form for lists"
    ],
    "stanza": 731
  },
  {
    "role": "code",
    "lines": [
      "define translate | ? x | if (number? | x) (base-translate | x) (if (= (head | x) vector) (translate | prepend ((list 2) list (list-length | tail | x)) (tail | x)) (base-translate | x));"
    ],
    "code": "2110132110013023211003210011030232111132211000302321001103322101010030232100110332211113221032210001013023210011033210000332211001302321001010322210001003210332100010032210010003023210001113023210011033322100011130232100110333221010100302321001103332233",
    "parse": [
      "define",
      "translate",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "number?",
            [
              -1,
              "x"
            ]
          ],
          [
            "base-translate",
            [
              -1,
              "x"
            ]
          ],
          [
            "if",
            [
              "=",
              [
                "head",
                [
                  -1,
                  "x"
                ]
              ],
              "vector"
            ],
            [
              "translate",
              [
                -1,
                "prepend",
                [
                  [
                    "list",
                    2
                  ],
                  "list",
                  [
                    "list-length",
                    [
                      -1,
                      "tail",
                      [
                        -1,
                        "x"
                      ]
                    ]
                  ]
                ],
                [
                  "tail",
                  [
                    -1,
                    "x"
                  ]
                ]
              ]
            ],
            [
              "base-translate",
              [
                -1,
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 732
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 1 2 3) ((list 3) 1 2 3);"
    ],
    "code": "2100101132210000321321032113322210001003211332132103211332233",
    "parse": [
      "list=",
      [
        "vector",
        1,
        2,
        3
      ],
      [
        [
          "list",
          3
        ],
        1,
        2,
        3
      ]
    ],
    "stanza": 733
  },
  {
    "role": "comment",
    "lines": [
      "# now to desugar let expressions"
    ],
    "stanza": 734
  },
  {
    "role": "code",
    "lines": [
      "define translate-with-vector | translate;"
    ],
    "code": "21101321010101302321100132233",
    "parse": [
      "define",
      "translate-with-vector",
      [
        -1,
        "translate"
      ]
    ],
    "stanza": 735
  },
  {
    "role": "code",
    "lines": [
      "define translate-let-form | ? x | ? body | if (= (list-length | x) 0) (translate | body) (translate-let-form (tail | x) (vector (vector ? (head | head | x) (body)) (head | tail | head | x)));"
    ],
    "code": "21101321010110302321100321001103023211003210101113023211113221032210010003023210011033203322110013023210101113322101011032210001113023210011033221000032210000321100322100010130232100010130232100110332210101113332210001013023210001113023210001013023210011033332233",
    "parse": [
      "define",
      "translate-let-form",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "body",
          [
            -1,
            "if",
            [
              "=",
              [
                "list-length",
                [
                  -1,
                  "x"
                ]
              ],
              0
            ],
            [
              "translate",
              [
                -1,
                "body"
              ]
            ],
            [
              "translate-let-form",
              [
                "tail",
                [
                  -1,
                  "x"
                ]
              ],
              [
                "vector",
                [
                  "vector",
                  "?",
                  [
                    "head",
                    [
                      -1,
                      "head",
                      [
                        -1,
                        "x"
                      ]
                    ]
                  ],
                  [
                    "body"
                  ]
                ],
                [
                  "head",
                  [
                    -1,
                    "tail",
                    [
                      -1,
                      "head",
                      [
                        -1,
                        "x"
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 736
  },
  {
    "role": "code",
    "lines": [
      "define translate | ? x | if (number? | x) (translate-with-vector | x) (if (= (head | x) let) (translate-let-form (head | tail | x) (head | tail | tail | x)) (translate-with-vector | x));"
    ],
    "code": "211013211001302321100321001103023211113221100030232100110332210101013023210011033221111322103221000101302321001103321011000332210101103221000101302321000111302321001103322100010130232100011130232100011130232100110333221010101302321001103332233",
    "parse": [
      "define",
      "translate",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "number?",
            [
              -1,
              "x"
            ]
          ],
          [
            "translate-with-vector",
            [
              -1,
              "x"
            ]
          ],
          [
            "if",
            [
              "=",
              [
                "head",
                [
                  -1,
                  "x"
                ]
              ],
              "let"
            ],
            [
              "translate-let-form",
              [
                "head",
                [
                  -1,
                  "tail",
                  [
                    -1,
                    "x"
                  ]
                ]
              ],
              [
                "head",
                [
                  -1,
                  "tail",
                  [
                    -1,
                    "tail",
                    [
                      -1,
                      "x"
                    ]
                  ]
                ]
              ]
            ],
            [
              "translate-with-vector",
              [
                -1,
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 737
  },
  {
    "role": "code",
    "lines": [
      "let ((x 20)) (= (x) 20);"
    ],
    "code": "2101100032221001103210100333221032210011033210100332233",
    "parse": [
      "let",
      [
        [
          "x",
          20
        ]
      ],
      [
        "=",
        [
          "x"
        ],
        20
      ]
    ],
    "stanza": 738
  },
  {
    "role": "code",
    "lines": [
      "let ((x 50) (y 20)) (= (- (x) (y)) 30);"
    ],
    "code": "2101100032221001103211001033221100013210100333221032210113221001103322110001333211110332233",
    "parse": [
      "let",
      [
        [
          "x",
          50
        ],
        [
          "y",
          20
        ]
      ],
      [
        "=",
        [
          "-",
          [
            "x"
          ],
          [
            "y"
          ]
        ],
        30
      ]
    ],
    "stanza": 739
  },
  {
    "role": "file",
    "lines": [
      "== COS_List =="
    ],
    "stanza": 740
  },
  {
    "role": "comment",
    "lines": [
      "# the is-list function is now on dubious ground",
      "# this stuff will be replaced with typing ASAP"
    ],
    "stanza": 741
  },
  {
    "role": "code",
    "lines": [
      "define is-list | ? x | not | number? | x;"
    ],
    "code": "21101321011001302321100321001103023210030232110003023210011032233",
    "parse": [
      "define",
      "is-list",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "not",
          [
            -1,
            "number?",
            [
              -1,
              "x"
            ]
          ]
        ]
      ]
    ],
    "stanza": 742
  },
  {
    "role": "code",
    "lines": [
      "is-list | (list 2) 1 3;"
    ],
    "code": "21011001302322100010032103321321132233",
    "parse": [
      "is-list",
      [
        -1,
        [
          "list",
          2
        ],
        1,
        3
      ]
    ],
    "stanza": 743
  },
  {
    "role": "code",
    "lines": [
      "is-list | (list 0);"
    ],
    "code": "210110013023221000100320332233",
    "parse": [
      "is-list",
      [
        -1,
        [
          "list",
          0
        ]
      ]
    ],
    "stanza": 744
  },
  {
    "role": "code",
    "lines": [
      "not | is-list 23;"
    ],
    "code": "2100302321011001321011132233",
    "parse": [
      "not",
      [
        -1,
        "is-list",
        23
      ]
    ],
    "stanza": 745
  },
  {
    "role": "code",
    "lines": [
      "is-list | (list 3) ((list 2) 2 3) 1 (? x | + (x) 10);"
    ],
    "code": "2101100130232210001003211332221000100321033210321133213221100321001103023210103221001103321010332233",
    "parse": [
      "is-list",
      [
        -1,
        [
          "list",
          3
        ],
        [
          [
            "list",
            2
          ],
          2,
          3
        ],
        1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            [
              "x"
            ],
            10
          ]
        ]
      ]
    ],
    "stanza": 746
  },
  {
    "role": "file",
    "lines": [
      "== COS_Let =="
    ],
    "stanza": 747
  },
  {
    "role": "comment",
    "lines": [
      "# MATH introduce sugar for let",
      "# if would be good to introduce desugarings more rigorously, but for now...",
      "# ... just a very vague sketch"
    ],
    "section_description": "introduce sugar for let",
    "section_category": "MATH",
    "section_index": 19,
    "stanza": 748
  },
  {
    "role": "code",
    "lines": [
      "intro let;"
    ],
    "code": "2032101100032233",
    "parse": [
      "intro",
      "let"
    ],
    "stanza": 749
  },
  {
    "role": "code",
    "lines": [
      "= (let ((x 10)) (+ (x) 5)) ((? x | + (x) 5) 10);"
    ],
    "code": "210322101100032221001103210103332210103221001103321013332221100321001103023210103221001103321013321010332233",
    "parse": [
      "=",
      [
        "let",
        [
          [
            "x",
            10
          ]
        ],
        [
          "+",
          [
            "x"
          ],
          5
        ]
      ],
      [
        [
          "?",
          "x",
          [
            -1,
            "+",
            [
              "x"
            ],
            5
          ]
        ],
        10
      ]
    ],
    "stanza": 750
  },
  {
    "role": "code",
    "lines": [
      "= (let ((x 10) (y 5)) (+ (x) (y))) (((? x | ? y | + (x) (y)) 10) 5);"
    ],
    "code": "2103221011000322210011032101033221100013210133322101032210011033221100013333222211003210011030232110032110001302321010322100110332211000133321010332101332233",
    "parse": [
      "=",
      [
        "let",
        [
          [
            "x",
            10
          ],
          [
            "y",
            5
          ]
        ],
        [
          "+",
          [
            "x"
          ],
          [
            "y"
          ]
        ]
      ],
      [
        [
          [
            "?",
            "x",
            [
              -1,
              "?",
              "y",
              [
                -1,
                "+",
                [
                  "x"
                ],
                [
                  "y"
                ]
              ]
            ]
          ],
          10
        ],
        5
      ]
    ],
    "stanza": 751
  },
  {
    "role": "file",
    "lines": [
      "== COS_MultipleParameter =="
    ],
    "stanza": 752
  },
  {
    "role": "comment",
    "lines": [
      "# MATH build up functions of several variables"
    ],
    "section_description": "build up functions of several variables",
    "section_category": "MATH",
    "section_index": 20,
    "stanza": 753
  },
  {
    "role": "code",
    "lines": [
      "= ((? x | ? y | - (x) (y)) 4 0) 4;"
    ],
    "code": "2103222110032100110302321100321100013023210113221001103322110001333210032033210032233",
    "parse": [
      "=",
      [
        [
          "?",
          "x",
          [
            -1,
            "?",
            "y",
            [
              -1,
              "-",
              [
                "x"
              ],
              [
                "y"
              ]
            ]
          ]
        ],
        4,
        0
      ],
      4
    ],
    "stanza": 754
  },
  {
    "role": "code",
    "lines": [
      "= ((? x | ? y | - (x) (y)) 11 8) 3;"
    ],
    "code": "2103222110032100110302321100321100013023210113221001103322110001333210113210003321132233",
    "parse": [
      "=",
      [
        [
          "?",
          "x",
          [
            -1,
            "?",
            "y",
            [
              -1,
              "-",
              [
                "x"
              ],
              [
                "y"
              ]
            ]
          ]
        ],
        11,
        8
      ],
      3
    ],
    "stanza": 755
  },
  {
    "role": "code",
    "lines": [
      "= ((? x | ? y | - (x) (y)) 5 5) 0;"
    ],
    "code": "2103222110032100110302321100321100013023210113221001103322110001333210132101332032233",
    "parse": [
      "=",
      [
        [
          "?",
          "x",
          [
            -1,
            "?",
            "y",
            [
              -1,
              "-",
              [
                "x"
              ],
              [
                "y"
              ]
            ]
          ]
        ],
        5,
        5
      ],
      0
    ],
    "stanza": 756
  },
  {
    "role": "code",
    "lines": [
      "= ((? x | ? y | - (x) (y)) 10 1) 9;"
    ],
    "code": "210322211003210011030232110032110001302321011322100110332211000133321010321332100132233",
    "parse": [
      "=",
      [
        [
          "?",
          "x",
          [
            -1,
            "?",
            "y",
            [
              -1,
              "-",
              [
                "x"
              ],
              [
                "y"
              ]
            ]
          ]
        ],
        10,
        1
      ],
      9
    ],
    "stanza": 757
  },
  {
    "role": "code",
    "lines": [
      "= ((? x | ? y | - (x) (y)) 10 7) 3;"
    ],
    "code": "210322211003210011030232110032110001302321011322100110332211000133321010321113321132233",
    "parse": [
      "=",
      [
        [
          "?",
          "x",
          [
            -1,
            "?",
            "y",
            [
              -1,
              "-",
              [
                "x"
              ],
              [
                "y"
              ]
            ]
          ]
        ],
        10,
        7
      ],
      3
    ],
    "stanza": 758
  },
  {
    "role": "code",
    "lines": [
      "define last | ? x | list-ref (x) (- (list-length | x) 1);"
    ],
    "code": "2110132101101030232110032100110302321001001322100110332210113221001000302321001103321332233",
    "parse": [
      "define",
      "last",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "list-ref",
          [
            "x"
          ],
          [
            "-",
            [
              "list-length",
              [
                -1,
                "x"
              ]
            ],
            1
          ]
        ]
      ]
    ],
    "stanza": 759
  },
  {
    "role": "code",
    "lines": [
      "define except-last | ? x | if (> (list-length | x) 1) (prepend (head | x) (except-last | tail | x)) (vector);"
    ],
    "code": "21101321011011302321100321001103023211113221132210010003023210011033213322100101032210001013023210011033221011011302321000111302321001103332210000332233",
    "parse": [
      "define",
      "except-last",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            ">",
            [
              "list-length",
              [
                -1,
                "x"
              ]
            ],
            1
          ],
          [
            "prepend",
            [
              "head",
              [
                -1,
                "x"
              ]
            ],
            [
              "except-last",
              [
                -1,
                "tail",
                [
                  -1,
                  "x"
                ]
              ]
            ]
          ],
          [
            "vector"
          ]
        ]
      ]
    ],
    "stanza": 760
  },
  {
    "role": "comment",
    "lines": [
      "# test last and except-last"
    ],
    "stanza": 761
  },
  {
    "role": "code",
    "lines": [
      "= 15 (last | vector 4 5 15);"
    ],
    "code": "210321111322101101030232100003210032101321111332233",
    "parse": [
      "=",
      15,
      [
        "last",
        [
          -1,
          "vector",
          4,
          5,
          15
        ]
      ]
    ],
    "stanza": 762
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 4 5) (except-last | vector 4 5 15);"
    ],
    "code": "210010113221000032100321013322101101130232100003210032101321111332233",
    "parse": [
      "list=",
      [
        "vector",
        4,
        5
      ],
      [
        "except-last",
        [
          -1,
          "vector",
          4,
          5,
          15
        ]
      ]
    ],
    "stanza": 763
  },
  {
    "role": "code",
    "lines": [
      "intro lambda;"
    ],
    "code": "20321101032233",
    "parse": [
      "intro",
      "lambda"
    ],
    "stanza": 764
  },
  {
    "role": "code",
    "lines": [
      "define prev-translate | translate;"
    ],
    "code": "21101321011100302321100132233",
    "parse": [
      "define",
      "prev-translate",
      [
        -1,
        "translate"
      ]
    ],
    "stanza": 765
  },
  {
    "role": "code",
    "lines": [
      "define translate | let ((prev (prev-translate))) (? x | if (number? | x) (prev | x) (if (= (head | x) lambda) (let ((formals (head | tail | x)) (body (head | tail | tail | x))) (if (> (list-length | formals) 0) (translate (vector lambda (except-last | formals) (vector ? (last | formals) (body)))) (translate (body)))) (prev | x)));"
    ],
    "code": "2110132110013023210110003222101110132210111003333221100321001103023211113221100030232100110332210111013023210011033221111322103221000101302321001103321101033221011000322210111103221000101302321000111302321001103332210101113221000101302321000111302321000111302321001103333221111322113221001000302321011110332033221100132210000321101032210110113023210111103322100003211003221011010302321011110332210101113333322110013221010111333332210111013023210011033332233",
    "parse": [
      "define",
      "translate",
      [
        -1,
        "let",
        [
          [
            "prev",
            [
              "prev-translate"
            ]
          ]
        ],
        [
          "?",
          "x",
          [
            -1,
            "if",
            [
              "number?",
              [
                -1,
                "x"
              ]
            ],
            [
              "prev",
              [
                -1,
                "x"
              ]
            ],
            [
              "if",
              [
                "=",
                [
                  "head",
                  [
                    -1,
                    "x"
                  ]
                ],
                "lambda"
              ],
              [
                "let",
                [
                  [
                    "formals",
                    [
                      "head",
                      [
                        -1,
                        "tail",
                        [
                          -1,
                          "x"
                        ]
                      ]
                    ]
                  ],
                  [
                    "body",
                    [
                      "head",
                      [
                        -1,
                        "tail",
                        [
                          -1,
                          "tail",
                          [
                            -1,
                            "x"
                          ]
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  "if",
                  [
                    ">",
                    [
                      "list-length",
                      [
                        -1,
                        "formals"
                      ]
                    ],
                    0
                  ],
                  [
                    "translate",
                    [
                      "vector",
                      "lambda",
                      [
                        "except-last",
                        [
                          -1,
                          "formals"
                        ]
                      ],
                      [
                        "vector",
                        "?",
                        [
                          "last",
                          [
                            -1,
                            "formals"
                          ]
                        ],
                        [
                          "body"
                        ]
                      ]
                    ]
                  ],
                  [
                    "translate",
                    [
                      "body"
                    ]
                  ]
                ]
              ],
              [
                "prev",
                [
                  -1,
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 766
  },
  {
    "role": "comment",
    "lines": [
      "# test lambda"
    ],
    "stanza": 767
  },
  {
    "role": "code",
    "lines": [
      "= ((lambda (x y) (- (x) (y))) 8 3) 5;"
    ],
    "code": "21032221101032210011032110001332210113221001103322110001333321000321133210132233",
    "parse": [
      "=",
      [
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              "x"
            ],
            [
              "y"
            ]
          ]
        ],
        8,
        3
      ],
      5
    ],
    "stanza": 768
  },
  {
    "role": "code",
    "lines": [
      "= ((lambda (x y) (- (x) (y))) 1 1) 0;"
    ],
    "code": "21032221101032210011032110001332210113221001103322110001333321321332032233",
    "parse": [
      "=",
      [
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              "x"
            ],
            [
              "y"
            ]
          ]
        ],
        1,
        1
      ],
      0
    ],
    "stanza": 769
  },
  {
    "role": "code",
    "lines": [
      "= ((lambda (x y) (- (x) (y))) 10 9) 1;"
    ],
    "code": "21032221101032210011032110001332210113221001103322110001333321010321001332132233",
    "parse": [
      "=",
      [
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              "x"
            ],
            [
              "y"
            ]
          ]
        ],
        10,
        9
      ],
      1
    ],
    "stanza": 770
  },
  {
    "role": "code",
    "lines": [
      "= ((lambda (x y) (- (x) (y))) 7 5) 2;"
    ],
    "code": "2103222110103221001103211000133221011322100110332211000133332111321013321032233",
    "parse": [
      "=",
      [
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              "x"
            ],
            [
              "y"
            ]
          ]
        ],
        7,
        5
      ],
      2
    ],
    "stanza": 771
  },
  {
    "role": "code",
    "lines": [
      "= ((lambda (x y) (- (x) (y))) 9 8) 1;"
    ],
    "code": "21032221101032210011032110001332210113221001103322110001333321001321000332132233",
    "parse": [
      "=",
      [
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              "x"
            ],
            [
              "y"
            ]
          ]
        ],
        9,
        8
      ],
      1
    ],
    "stanza": 772
  },
  {
    "role": "code",
    "lines": [
      "define apply | lambda (x y) (if (list= (y) (vector)) (x) (apply ((x) (head | y)) (tail | y)));"
    ],
    "code": "211013210111113023211010322100110321100013322111132210010113221100013322100003332210011033221011111322210011033221000101302321100013332210001113023211000133332233",
    "parse": [
      "define",
      "apply",
      [
        -1,
        "lambda",
        [
          "x",
          "y"
        ],
        [
          "if",
          [
            "list=",
            [
              "y"
            ],
            [
              "vector"
            ]
          ],
          [
            "x"
          ],
          [
            "apply",
            [
              [
                "x"
              ],
              [
                "head",
                [
                  -1,
                  "y"
                ]
              ]
            ],
            [
              "tail",
              [
                -1,
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 773
  },
  {
    "role": "code",
    "lines": [
      "= (apply (lambda (x y) (- (x) (y))) (vector 8 6)) 2;"
    ],
    "code": "21032210111113221101032210011032110001332210113221001103322110001333322100003210003211033321032233",
    "parse": [
      "=",
      [
        "apply",
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              "x"
            ],
            [
              "y"
            ]
          ]
        ],
        [
          "vector",
          8,
          6
        ]
      ],
      2
    ],
    "stanza": 774
  },
  {
    "role": "code",
    "lines": [
      "= (apply (lambda (x y) (- (x) (y))) (vector 5 0)) 5;"
    ],
    "code": "210322101111132211010322100110321100013322101132210011033221100013333221000032101320333210132233",
    "parse": [
      "=",
      [
        "apply",
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              "x"
            ],
            [
              "y"
            ]
          ]
        ],
        [
          "vector",
          5,
          0
        ]
      ],
      5
    ],
    "stanza": 775
  },
  {
    "role": "code",
    "lines": [
      "= (apply (lambda (x y) (- (x) (y))) (vector 12 9)) 3;"
    ],
    "code": "210322101111132211010322100110321100013322101132210011033221100013333221000032110032100133321132233",
    "parse": [
      "=",
      [
        "apply",
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              "x"
            ],
            [
              "y"
            ]
          ]
        ],
        [
          "vector",
          12,
          9
        ]
      ],
      3
    ],
    "stanza": 776
  },
  {
    "role": "code",
    "lines": [
      "= (apply (lambda (x y) (- (x) (y))) (vector 13 8)) 5;"
    ],
    "code": "2103221011111322110103221001103211000133221011322100110332211000133332210000321101321000333210132233",
    "parse": [
      "=",
      [
        "apply",
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              "x"
            ],
            [
              "y"
            ]
          ]
        ],
        [
          "vector",
          13,
          8
        ]
      ],
      5
    ],
    "stanza": 777
  },
  {
    "role": "code",
    "lines": [
      "= (apply (lambda (x y) (- (x) (y))) (vector 11 3)) 8;"
    ],
    "code": "210322101111132211010322100110321100013322101132210011033221100013333221000032101132113332100032233",
    "parse": [
      "=",
      [
        "apply",
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              "x"
            ],
            [
              "y"
            ]
          ]
        ],
        [
          "vector",
          11,
          3
        ]
      ],
      8
    ],
    "stanza": 778
  },
  {
    "role": "file",
    "lines": [
      "== COS_Map =="
    ],
    "stanza": 779
  },
  {
    "role": "comment",
    "lines": [
      "# MATH show map function for applying a function across the elements of a list"
    ],
    "section_description": "show map function for applying a function across the elements of a list",
    "section_category": "MATH",
    "section_index": 21,
    "stanza": 780
  },
  {
    "role": "code",
    "lines": [
      "define map | lambda (p lst) (if (> (list-length | lst) 0) (prepend (p (head | lst)) (map (p) (tail | lst))) (vector));"
    ],
    "code": "21101321100000302321101032211000013210001103322111132211322100100030232100011033203322100101032211000013221000101302321000110333221100000322110000133221000111302321000110333322100003332233",
    "parse": [
      "define",
      "map",
      [
        -1,
        "lambda",
        [
          "p",
          "lst"
        ],
        [
          "if",
          [
            ">",
            [
              "list-length",
              [
                -1,
                "lst"
              ]
            ],
            0
          ],
          [
            "prepend",
            [
              "p",
              [
                "head",
                [
                  -1,
                  "lst"
                ]
              ]
            ],
            [
              "map",
              [
                "p"
              ],
              [
                "tail",
                [
                  -1,
                  "lst"
                ]
              ]
            ]
          ],
          [
            "vector"
          ]
        ]
      ]
    ],
    "stanza": 781
  },
  {
    "role": "code",
    "lines": [
      "list= (map (? x | * (x) 2) (vector 0 8 15)) (vector 0 16 30);"
    ],
    "code": "21001011322110000032211003210011030232100132210011033210332210000320321000321111333221000032032100003211110332233",
    "parse": [
      "list=",
      [
        "map",
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              "x"
            ],
            2
          ]
        ],
        [
          "vector",
          0,
          8,
          15
        ]
      ],
      [
        "vector",
        0,
        16,
        30
      ]
    ],
    "stanza": 782
  },
  {
    "role": "code",
    "lines": [
      "list= (map (? x | * (x) 2) (vector 12 4 0 9)) (vector 24 8 0 18);"
    ],
    "code": "2100101132211000003221100321001103023210013221001103321033221000032110032100320321001333221000032110003210003203210010332233",
    "parse": [
      "list=",
      [
        "map",
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              "x"
            ],
            2
          ]
        ],
        [
          "vector",
          12,
          4,
          0,
          9
        ]
      ],
      [
        "vector",
        24,
        8,
        0,
        18
      ]
    ],
    "stanza": 783
  },
  {
    "role": "code",
    "lines": [
      "list= (map (? x | * (x) 2) (vector 8 9 5 7 10)) (vector 16 18 10 14 20);"
    ],
    "code": "2100101132211000003221100321001103023210013221001103321033221000032100032100132101321113210103332210000321000032100103210103211103210100332233",
    "parse": [
      "list=",
      [
        "map",
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              "x"
            ],
            2
          ]
        ],
        [
          "vector",
          8,
          9,
          5,
          7,
          10
        ]
      ],
      [
        "vector",
        16,
        18,
        10,
        14,
        20
      ]
    ],
    "stanza": 784
  },
  {
    "role": "code",
    "lines": [
      "list= (map (? x | * (x) 2) (vector 10 12 19 8 3 1)) (vector 20 24 38 16 6 2);"
    ],
    "code": "2100101132211000003221100321001103023210013221001103321033221000032101032110032100113210003211321333221000032101003211000321001103210000321103210332233",
    "parse": [
      "list=",
      [
        "map",
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              "x"
            ],
            2
          ]
        ],
        [
          "vector",
          10,
          12,
          19,
          8,
          3,
          1
        ]
      ],
      [
        "vector",
        20,
        24,
        38,
        16,
        6,
        2
      ]
    ],
    "stanza": 785
  },
  {
    "role": "code",
    "lines": [
      "list= (map (? x 42) (vector 5 18 4)) (vector 42 42 42);"
    ],
    "code": "21001011322110000032211003210011032101010332210000321013210010321003332210000321010103210101032101010332233",
    "parse": [
      "list=",
      [
        "map",
        [
          "?",
          "x",
          42
        ],
        [
          "vector",
          5,
          18,
          4
        ]
      ],
      [
        "vector",
        42,
        42,
        42
      ]
    ],
    "stanza": 786
  },
  {
    "role": "code",
    "lines": [
      "list= (map (? x 42) (vector 3 10 17 11)) (vector 42 42 42 42);"
    ],
    "code": "2100101132211000003221100321001103210101033221000032113210103210001321011333221000032101010321010103210101032101010332233",
    "parse": [
      "list=",
      [
        "map",
        [
          "?",
          "x",
          42
        ],
        [
          "vector",
          3,
          10,
          17,
          11
        ]
      ],
      [
        "vector",
        42,
        42,
        42,
        42
      ]
    ],
    "stanza": 787
  },
  {
    "role": "code",
    "lines": [
      "list= (map (? x 42) (vector 5 13 6 16 2)) (vector 42 42 42 42 42);"
    ],
    "code": "2100101132211000003221100321001103210101033221000032101321101321103210000321033322100003210101032101010321010103210101032101010332233",
    "parse": [
      "list=",
      [
        "map",
        [
          "?",
          "x",
          42
        ],
        [
          "vector",
          5,
          13,
          6,
          16,
          2
        ]
      ],
      [
        "vector",
        42,
        42,
        42,
        42,
        42
      ]
    ],
    "stanza": 788
  },
  {
    "role": "code",
    "lines": [
      "list= (map (? x 42) (vector 9 1 19 14 6 10)) (vector 42 42 42 42 42 42);"
    ],
    "code": "210010113221100000322110032100110321010103322100003210013213210011321110321103210103332210000321010103210101032101010321010103210101032101010332233",
    "parse": [
      "list=",
      [
        "map",
        [
          "?",
          "x",
          42
        ],
        [
          "vector",
          9,
          1,
          19,
          14,
          6,
          10
        ]
      ],
      [
        "vector",
        42,
        42,
        42,
        42,
        42,
        42
      ]
    ],
    "stanza": 789
  },
  {
    "role": "code",
    "lines": [
      "define crunch | lambda (p lst) (if (>= (list-length | lst) 2) (p (head | lst) (crunch (p) (tail | lst))) (if (= (list-length | lst) 1) (head | lst) (undefined)));"
    ],
    "code": "211013211000103023211010322110000132100011033221111322111100322100100030232100011033210332211000013221000101302321000110332211000103221100001332210001113023210001103333221111322103221001000302321000110332133221000101302321000110332210000033332233",
    "parse": [
      "define",
      "crunch",
      [
        -1,
        "lambda",
        [
          "p",
          "lst"
        ],
        [
          "if",
          [
            ">=",
            [
              "list-length",
              [
                -1,
                "lst"
              ]
            ],
            2
          ],
          [
            "p",
            [
              "head",
              [
                -1,
                "lst"
              ]
            ],
            [
              "crunch",
              [
                "p"
              ],
              [
                "tail",
                [
                  -1,
                  "lst"
                ]
              ]
            ]
          ],
          [
            "if",
            [
              "=",
              [
                "list-length",
                [
                  -1,
                  "lst"
                ]
              ],
              1
            ],
            [
              "head",
              [
                -1,
                "lst"
              ]
            ],
            [
              "undefined"
            ]
          ]
        ]
      ]
    ],
    "stanza": 790
  },
  {
    "role": "code",
    "lines": [
      "= (crunch (+) (vector 5 12 2)) 19;"
    ],
    "code": "2103221100010322101033221000032101321100321033321001132233",
    "parse": [
      "=",
      [
        "crunch",
        [
          "+"
        ],
        [
          "vector",
          5,
          12,
          2
        ]
      ],
      19
    ],
    "stanza": 791
  },
  {
    "role": "code",
    "lines": [
      "= (crunch (+) (vector 11 18 1 4)) 34;"
    ],
    "code": "21032211000103221010332210000321011321001032132100333210001032233",
    "parse": [
      "=",
      [
        "crunch",
        [
          "+"
        ],
        [
          "vector",
          11,
          18,
          1,
          4
        ]
      ],
      34
    ],
    "stanza": 792
  },
  {
    "role": "code",
    "lines": [
      "= (crunch (+) (vector 15 13 10 12 2)) 52;"
    ],
    "code": "210322110001032210103322100003211113211013210103211003210333211010032233",
    "parse": [
      "=",
      [
        "crunch",
        [
          "+"
        ],
        [
          "vector",
          15,
          13,
          10,
          12,
          2
        ]
      ],
      52
    ],
    "stanza": 793
  },
  {
    "role": "code",
    "lines": [
      "= (crunch (+) (vector 12 6 17 15 4 10)) 64;"
    ],
    "code": "21032211000103221010332210000321100321103210001321111321003210103332100000032233",
    "parse": [
      "=",
      [
        "crunch",
        [
          "+"
        ],
        [
          "vector",
          12,
          6,
          17,
          15,
          4,
          10
        ]
      ],
      64
    ],
    "stanza": 794
  },
  {
    "role": "file",
    "lines": [
      "== COS_CommentBase =="
    ],
    "stanza": 795
  },
  {
    "role": "comment",
    "lines": [
      "# NOTE end of part 1, start of part 2",
      "# The following parts of the message are experimental, and not",
      "# carefully integrated with the main body"
    ],
    "section_description": "end of part 1, start of part 2",
    "section_category": "NOTE",
    "section_index": 22,
    "stanza": 796
  },
  {
    "role": "code",
    "lines": [
      "intro part2;"
    ],
    "code": "2032110001132233",
    "parse": [
      "intro",
      "part2"
    ],
    "stanza": 797
  },
  {
    "role": "file",
    "lines": [
      "== COS_Recursion =="
    ],
    "stanza": 798
  },
  {
    "role": "comment",
    "lines": [
      "# MATH show an example of recursive evaluation",
      "# skipping over a lot of definitions and desugarings"
    ],
    "section_description": "show an example of recursive evaluation",
    "section_category": "MATH",
    "section_index": 23,
    "stanza": 799
  },
  {
    "role": "code",
    "lines": [
      "define easy-factorial | ? f | ? x | if (> (x) 0) (* (x) | f (f) (- (x) 1)) 1;"
    ],
    "code": "211013211001003023211003211111030232110032100110302321111322113221001103320332210013221001103302321111103221111103322101132210011033213332132233",
    "parse": [
      "define",
      "easy-factorial",
      [
        -1,
        "?",
        "f",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "if",
            [
              ">",
              [
                "x"
              ],
              0
            ],
            [
              "*",
              [
                "x"
              ],
              [
                -1,
                "f",
                [
                  "f"
                ],
                [
                  "-",
                  [
                    "x"
                  ],
                  1
                ]
              ]
            ],
            1
          ]
        ]
      ]
    ],
    "stanza": 800
  },
  {
    "role": "code",
    "lines": [
      "define factorial | ? x | if (> (x) 0) (* (x) | factorial | - (x) 1) 1;"
    ],
    "code": "211013211101030232110032100110302321111322113221001103320332210013221001103302321110103023210113221001103321332132233",
    "parse": [
      "define",
      "factorial",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            ">",
            [
              "x"
            ],
            0
          ],
          [
            "*",
            [
              "x"
            ],
            [
              -1,
              "factorial",
              [
                -1,
                "-",
                [
                  "x"
                ],
                1
              ]
            ]
          ],
          1
        ]
      ]
    ],
    "stanza": 801
  },
  {
    "role": "code",
    "lines": [
      "= (easy-factorial (easy-factorial) 0) 1;"
    ],
    "code": "210322110010032211001003320332132233",
    "parse": [
      "=",
      [
        "easy-factorial",
        [
          "easy-factorial"
        ],
        0
      ],
      1
    ],
    "stanza": 802
  },
  {
    "role": "code",
    "lines": [
      "= (easy-factorial (easy-factorial) 1) 1;"
    ],
    "code": "210322110010032211001003321332132233",
    "parse": [
      "=",
      [
        "easy-factorial",
        [
          "easy-factorial"
        ],
        1
      ],
      1
    ],
    "stanza": 803
  },
  {
    "role": "code",
    "lines": [
      "= (easy-factorial (easy-factorial) 2) 2;"
    ],
    "code": "21032211001003221100100332103321032233",
    "parse": [
      "=",
      [
        "easy-factorial",
        [
          "easy-factorial"
        ],
        2
      ],
      2
    ],
    "stanza": 804
  },
  {
    "role": "code",
    "lines": [
      "= (easy-factorial (easy-factorial) 3) 6;"
    ],
    "code": "210322110010032211001003321133211032233",
    "parse": [
      "=",
      [
        "easy-factorial",
        [
          "easy-factorial"
        ],
        3
      ],
      6
    ],
    "stanza": 805
  },
  {
    "role": "code",
    "lines": [
      "= (easy-factorial (easy-factorial) 4) 24;"
    ],
    "code": "210322110010032211001003321003321100032233",
    "parse": [
      "=",
      [
        "easy-factorial",
        [
          "easy-factorial"
        ],
        4
      ],
      24
    ],
    "stanza": 806
  },
  {
    "role": "code",
    "lines": [
      "= (easy-factorial (easy-factorial) 5) 120;"
    ],
    "code": "21032211001003221100100332101332111100032233",
    "parse": [
      "=",
      [
        "easy-factorial",
        [
          "easy-factorial"
        ],
        5
      ],
      120
    ],
    "stanza": 807
  },
  {
    "role": "code",
    "lines": [
      "= (factorial 0) 1;"
    ],
    "code": "210322111010320332132233",
    "parse": [
      "=",
      [
        "factorial",
        0
      ],
      1
    ],
    "stanza": 808
  },
  {
    "role": "code",
    "lines": [
      "= (factorial 1) 1;"
    ],
    "code": "210322111010321332132233",
    "parse": [
      "=",
      [
        "factorial",
        1
      ],
      1
    ],
    "stanza": 809
  },
  {
    "role": "code",
    "lines": [
      "= (factorial 2) 2;"
    ],
    "code": "21032211101032103321032233",
    "parse": [
      "=",
      [
        "factorial",
        2
      ],
      2
    ],
    "stanza": 810
  },
  {
    "role": "code",
    "lines": [
      "= (factorial 3) 6;"
    ],
    "code": "210322111010321133211032233",
    "parse": [
      "=",
      [
        "factorial",
        3
      ],
      6
    ],
    "stanza": 811
  },
  {
    "role": "code",
    "lines": [
      "= (factorial 4) 24;"
    ],
    "code": "210322111010321003321100032233",
    "parse": [
      "=",
      [
        "factorial",
        4
      ],
      24
    ],
    "stanza": 812
  },
  {
    "role": "code",
    "lines": [
      "= (factorial 5) 120;"
    ],
    "code": "21032211101032101332111100032233",
    "parse": [
      "=",
      [
        "factorial",
        5
      ],
      120
    ],
    "stanza": 813
  },
  {
    "role": "file",
    "lines": [
      "== COS_Pure =="
    ],
    "stanza": 814
  },
  {
    "role": "comment",
    "lines": [
      "# MATH some pure lambda calculus definitions - optional",
      "# these definitions are not quite what we want",
      "# since thinking of everything as a function requires headscratching",
      "# it would be better to use these as a parallel means of evaluation",
      "# ... for expressions"
    ],
    "section_description": "some pure lambda calculus definitions - optional",
    "section_category": "MATH",
    "section_index": 24,
    "stanza": 815
  },
  {
    "role": "code",
    "lines": [
      "define pure-if | ? x | ? y | ? z | x (y) (z);"
    ],
    "code": "21101321100101302321100321001103023211003211000130232110032110010302321001103221100013322110010332233",
    "parse": [
      "define",
      "pure-if",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "?",
            "z",
            [
              -1,
              "x",
              [
                "y"
              ],
              [
                "z"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 816
  },
  {
    "role": "code",
    "lines": [
      "define pure-true | ? y | ? z | y;"
    ],
    "code": "2110132110011030232110032110001302321100321100103023211000132233",
    "parse": [
      "define",
      "pure-true",
      [
        -1,
        "?",
        "y",
        [
          -1,
          "?",
          "z",
          [
            -1,
            "y"
          ]
        ]
      ]
    ],
    "stanza": 817
  },
  {
    "role": "code",
    "lines": [
      "define pure-false | ? y | ? z | z;"
    ],
    "code": "2110132110011130232110032110001302321100321100103023211001032233",
    "parse": [
      "define",
      "pure-false",
      [
        -1,
        "?",
        "y",
        [
          -1,
          "?",
          "z",
          [
            -1,
            "z"
          ]
        ]
      ]
    ],
    "stanza": 818
  },
  {
    "role": "code",
    "lines": [
      "define pure-cons | ? x | ? y | ? z | pure-if (z) (x) (y);"
    ],
    "code": "2110132110100030232110032100110302321100321100013023211003211001030232110010132211001033221001103322110001332233",
    "parse": [
      "define",
      "pure-cons",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "?",
            "z",
            [
              -1,
              "pure-if",
              [
                "z"
              ],
              [
                "x"
              ],
              [
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 819
  },
  {
    "role": "code",
    "lines": [
      "define pure-car | ? x | x (pure-true);"
    ],
    "code": "2110132110100130232110032100110302321001103221100110332233",
    "parse": [
      "define",
      "pure-car",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "x",
          [
            "pure-true"
          ]
        ]
      ]
    ],
    "stanza": 820
  },
  {
    "role": "code",
    "lines": [
      "define pure-cdr | ? x | x (pure-false);"
    ],
    "code": "2110132110101030232110032100110302321001103221100111332233",
    "parse": [
      "define",
      "pure-cdr",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "x",
          [
            "pure-false"
          ]
        ]
      ]
    ],
    "stanza": 821
  },
  {
    "role": "code",
    "lines": [
      "define zero | ? f | ? x | x;"
    ],
    "code": "2110132110101130232110032111110302321100321001103023210011032233",
    "parse": [
      "define",
      "zero",
      [
        -1,
        "?",
        "f",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "x"
          ]
        ]
      ]
    ],
    "stanza": 822
  },
  {
    "role": "code",
    "lines": [
      "define one | ? f | ? x | f (x);"
    ],
    "code": "21101321101100302321100321111103023211003210011030232111110322100110332233",
    "parse": [
      "define",
      "one",
      [
        -1,
        "?",
        "f",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "f",
            [
              "x"
            ]
          ]
        ]
      ]
    ],
    "stanza": 823
  },
  {
    "role": "code",
    "lines": [
      "define two | ? f | ? x | f (f (x));"
    ],
    "code": "211013211011013023211003211111030232110032100110302321111103221111103221001103332233",
    "parse": [
      "define",
      "two",
      [
        -1,
        "?",
        "f",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "f",
            [
              "f",
              [
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 824
  },
  {
    "role": "code",
    "lines": [
      "define succ | ? n | ? f | ? x | f ((n (f)) (x));"
    ],
    "code": "21101321101110302321100321110113023211003211111030232110032100110302321111103222111011322111110333221001103332233",
    "parse": [
      "define",
      "succ",
      [
        -1,
        "?",
        "n",
        [
          -1,
          "?",
          "f",
          [
            -1,
            "?",
            "x",
            [
              -1,
              "f",
              [
                [
                  "n",
                  [
                    "f"
                  ]
                ],
                [
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 825
  },
  {
    "role": "code",
    "lines": [
      "define add | ? a | ? b | (a (succ)) (b);"
    ],
    "code": "2110132110111130232110032111000030232110032111000130232211100003221101110333221110001332233",
    "parse": [
      "define",
      "add",
      [
        -1,
        "?",
        "a",
        [
          -1,
          "?",
          "b",
          [
            -1,
            [
              "a",
              [
                "succ"
              ]
            ],
            [
              "b"
            ]
          ]
        ]
      ]
    ],
    "stanza": 826
  },
  {
    "role": "code",
    "lines": [
      "define mult | ? a | ? b | (a (add | b)) (zero);"
    ],
    "code": "2110132111001030232110032111000030232110032111000130232211100003221101111302321110001333221101011332233",
    "parse": [
      "define",
      "mult",
      [
        -1,
        "?",
        "a",
        [
          -1,
          "?",
          "b",
          [
            -1,
            [
              "a",
              [
                "add",
                [
                  -1,
                  "b"
                ]
              ]
            ],
            [
              "zero"
            ]
          ]
        ]
      ]
    ],
    "stanza": 827
  },
  {
    "role": "code",
    "lines": [
      "define pred | ? n | pure-cdr | (n (? p | pure-cons (succ | pure-car | p) (pure-car | p))) (pure-cons (zero) (zero));"
    ],
    "code": "2110132111001130232110032111011302321101010302322111011322110032110000130232110100032211011103023211010013023211000013322110100130232110000133332211010003221101011332211010113332233",
    "parse": [
      "define",
      "pred",
      [
        -1,
        "?",
        "n",
        [
          -1,
          "pure-cdr",
          [
            -1,
            [
              "n",
              [
                "?",
                "p",
                [
                  -1,
                  "pure-cons",
                  [
                    "succ",
                    [
                      -1,
                      "pure-car",
                      [
                        -1,
                        "p"
                      ]
                    ]
                  ],
                  [
                    "pure-car",
                    [
                      -1,
                      "p"
                    ]
                  ]
                ]
              ]
            ],
            [
              "pure-cons",
              [
                "zero"
              ],
              [
                "zero"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 828
  },
  {
    "role": "code",
    "lines": [
      "define is-zero | ? n | (n (? dummy | pure-false) (pure-true));"
    ],
    "code": "21101321110100302321100321110113023221110113221100321110101302321100111332211001103332233",
    "parse": [
      "define",
      "is-zero",
      [
        -1,
        "?",
        "n",
        [
          -1,
          [
            "n",
            [
              "?",
              "dummy",
              [
                -1,
                "pure-false"
              ]
            ],
            [
              "pure-true"
            ]
          ]
        ]
      ]
    ],
    "stanza": 829
  },
  {
    "role": "code",
    "lines": [
      "define fixed-point | ? f | (? x | f (x (x))) (? x | f (x (x)));"
    ],
    "code": "2110132111011030232110032111110302322110032100110302321111103221001103221001103333221100321001103023211111032210011032210011033332233",
    "parse": [
      "define",
      "fixed-point",
      [
        -1,
        "?",
        "f",
        [
          -1,
          [
            "?",
            "x",
            [
              -1,
              "f",
              [
                "x",
                [
                  "x"
                ]
              ]
            ]
          ],
          [
            "?",
            "x",
            [
              -1,
              "f",
              [
                "x",
                [
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 830
  },
  {
    "role": "comment",
    "lines": [
      "# .. but for rest of message will assume that define does fixed-point for us",
      "# now build a link between numbers and church number functions"
    ],
    "stanza": 831
  },
  {
    "role": "code",
    "lines": [
      "define unchurch | ? c | c (? x | + (x) 1) 0;"
    ],
    "code": "211013211101113023211003211110003023211110003221100321001103023210103221001103321332032233",
    "parse": [
      "define",
      "unchurch",
      [
        -1,
        "?",
        "c",
        [
          -1,
          "c",
          [
            "?",
            "x",
            [
              -1,
              "+",
              [
                "x"
              ],
              1
            ]
          ],
          0
        ]
      ]
    ],
    "stanza": 832
  },
  {
    "role": "code",
    "lines": [
      "= 0 (unchurch | zero);"
    ],
    "code": "2103203221110111302321101011332233",
    "parse": [
      "=",
      0,
      [
        "unchurch",
        [
          -1,
          "zero"
        ]
      ]
    ],
    "stanza": 833
  },
  {
    "role": "code",
    "lines": [
      "= 1 (unchurch | one);"
    ],
    "code": "2103213221110111302321101100332233",
    "parse": [
      "=",
      1,
      [
        "unchurch",
        [
          -1,
          "one"
        ]
      ]
    ],
    "stanza": 834
  },
  {
    "role": "code",
    "lines": [
      "= 2 (unchurch | two);"
    ],
    "code": "21032103221110111302321101101332233",
    "parse": [
      "=",
      2,
      [
        "unchurch",
        [
          -1,
          "two"
        ]
      ]
    ],
    "stanza": 835
  },
  {
    "role": "code",
    "lines": [
      "define church | ? x | if (= 0 (x)) (zero) (succ | church | - (x) 1);"
    ],
    "code": "211013211110013023211003210011030232111132210320322100110333221101011332211011103023211110013023210113221001103321332233",
    "parse": [
      "define",
      "church",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "=",
            0,
            [
              "x"
            ]
          ],
          [
            "zero"
          ],
          [
            "succ",
            [
              -1,
              "church",
              [
                -1,
                "-",
                [
                  "x"
                ],
                1
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 836
  },
  {
    "role": "file",
    "lines": [
      "== COS_Quantifier =="
    ],
    "stanza": 837
  },
  {
    "role": "comment",
    "lines": [
      "# MATH introduce universal quantifier",
      "# really need to link with sets for true correctness",
      "# and the examples here are REALLY sparse, need much more"
    ],
    "section_description": "introduce universal quantifier",
    "section_category": "MATH",
    "section_index": 25,
    "stanza": 838
  },
  {
    "role": "code",
    "lines": [
      "intro forall;"
    ],
    "code": "20321001132233",
    "parse": [
      "intro",
      "forall"
    ],
    "stanza": 839
  },
  {
    "role": "code",
    "lines": [
      "< 5 (+ 5 1);"
    ],
    "code": "2132101322101032101321332233",
    "parse": [
      "<",
      5,
      [
        "+",
        5,
        1
      ]
    ],
    "stanza": 840
  },
  {
    "role": "code",
    "lines": [
      "< 4 (+ 4 1);"
    ],
    "code": "2132100322101032100321332233",
    "parse": [
      "<",
      4,
      [
        "+",
        4,
        1
      ]
    ],
    "stanza": 841
  },
  {
    "role": "code",
    "lines": [
      "< 3 (+ 3 1);"
    ],
    "code": "21321132210103211321332233",
    "parse": [
      "<",
      3,
      [
        "+",
        3,
        1
      ]
    ],
    "stanza": 842
  },
  {
    "role": "code",
    "lines": [
      "< 2 (+ 2 1);"
    ],
    "code": "21321032210103210321332233",
    "parse": [
      "<",
      2,
      [
        "+",
        2,
        1
      ]
    ],
    "stanza": 843
  },
  {
    "role": "code",
    "lines": [
      "< 1 (+ 1 1);"
    ],
    "code": "213213221010321321332233",
    "parse": [
      "<",
      1,
      [
        "+",
        1,
        1
      ]
    ],
    "stanza": 844
  },
  {
    "role": "code",
    "lines": [
      "< 0 (+ 0 1);"
    ],
    "code": "213203221010320321332233",
    "parse": [
      "<",
      0,
      [
        "+",
        0,
        1
      ]
    ],
    "stanza": 845
  },
  {
    "role": "code",
    "lines": [
      "forall (? x | < (x) (+ (x) 1));"
    ],
    "code": "2100113221100321001103023213221001103322101032210011033213332233",
    "parse": [
      "forall",
      [
        "?",
        "x",
        [
          -1,
          "<",
          [
            "x"
          ],
          [
            "+",
            [
              "x"
            ],
            1
          ]
        ]
      ]
    ],
    "stanza": 846
  },
  {
    "role": "code",
    "lines": [
      "< 5 (* 5 2);"
    ],
    "code": "21321013221001321013210332233",
    "parse": [
      "<",
      5,
      [
        "*",
        5,
        2
      ]
    ],
    "stanza": 847
  },
  {
    "role": "code",
    "lines": [
      "< 4 (* 4 2);"
    ],
    "code": "21321003221001321003210332233",
    "parse": [
      "<",
      4,
      [
        "*",
        4,
        2
      ]
    ],
    "stanza": 848
  },
  {
    "role": "code",
    "lines": [
      "< 3 (* 3 2);"
    ],
    "code": "213211322100132113210332233",
    "parse": [
      "<",
      3,
      [
        "*",
        3,
        2
      ]
    ],
    "stanza": 849
  },
  {
    "role": "code",
    "lines": [
      "< 2 (* 2 2);"
    ],
    "code": "213210322100132103210332233",
    "parse": [
      "<",
      2,
      [
        "*",
        2,
        2
      ]
    ],
    "stanza": 850
  },
  {
    "role": "code",
    "lines": [
      "< 1 (* 1 2);"
    ],
    "code": "2132132210013213210332233",
    "parse": [
      "<",
      1,
      [
        "*",
        1,
        2
      ]
    ],
    "stanza": 851
  },
  {
    "role": "code",
    "lines": [
      "not | < 0 (* 0 2);"
    ],
    "code": "210030232132032210013203210332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        0,
        [
          "*",
          0,
          2
        ]
      ]
    ],
    "stanza": 852
  },
  {
    "role": "code",
    "lines": [
      "not | forall (? x | < (x) (* (x) 2));"
    ],
    "code": "2100302321001132211003210011030232132210011033221001322100110332103332233",
    "parse": [
      "not",
      [
        -1,
        "forall",
        [
          "?",
          "x",
          [
            -1,
            "<",
            [
              "x"
            ],
            [
              "*",
              [
                "x"
              ],
              2
            ]
          ]
        ]
      ]
    ],
    "stanza": 853
  },
  {
    "role": "comment",
    "lines": [
      "# MATH introduce existential quantifier",
      "# really need to link with sets for true correctness",
      "# and the examples here are REALLY sparse, need much more"
    ],
    "section_description": "introduce existential quantifier",
    "section_category": "MATH",
    "section_index": 26,
    "stanza": 854
  },
  {
    "role": "code",
    "lines": [
      "not | = 5 (* 2 2);"
    ],
    "code": "2100302321032101322100132103210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        5,
        [
          "*",
          2,
          2
        ]
      ]
    ],
    "stanza": 855
  },
  {
    "role": "code",
    "lines": [
      "= 4 (* 2 2);"
    ],
    "code": "21032100322100132103210332233",
    "parse": [
      "=",
      4,
      [
        "*",
        2,
        2
      ]
    ],
    "stanza": 856
  },
  {
    "role": "code",
    "lines": [
      "not | = 3 (* 2 2);"
    ],
    "code": "210030232103211322100132103210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        3,
        [
          "*",
          2,
          2
        ]
      ]
    ],
    "stanza": 857
  },
  {
    "role": "code",
    "lines": [
      "not | = 2 (* 2 2);"
    ],
    "code": "210030232103210322100132103210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        2,
        [
          "*",
          2,
          2
        ]
      ]
    ],
    "stanza": 858
  },
  {
    "role": "code",
    "lines": [
      "not | = 1 (* 2 2);"
    ],
    "code": "21003023210321322100132103210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        1,
        [
          "*",
          2,
          2
        ]
      ]
    ],
    "stanza": 859
  },
  {
    "role": "code",
    "lines": [
      "not | = 0 (* 2 2);"
    ],
    "code": "21003023210320322100132103210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        0,
        [
          "*",
          2,
          2
        ]
      ]
    ],
    "stanza": 860
  },
  {
    "role": "code",
    "lines": [
      "intro exists;"
    ],
    "code": "20321010032233",
    "parse": [
      "intro",
      "exists"
    ],
    "stanza": 861
  },
  {
    "role": "code",
    "lines": [
      "exists (? x | = (x) (* 2 2));"
    ],
    "code": "210100322110032100110302321032210011033221001321032103332233",
    "parse": [
      "exists",
      [
        "?",
        "x",
        [
          -1,
          "=",
          [
            "x"
          ],
          [
            "*",
            2,
            2
          ]
        ]
      ]
    ],
    "stanza": 862
  },
  {
    "role": "code",
    "lines": [
      "not | = 5 (+ 5 2);"
    ],
    "code": "21003023210321013221010321013210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        5,
        [
          "+",
          5,
          2
        ]
      ]
    ],
    "stanza": 863
  },
  {
    "role": "code",
    "lines": [
      "not | = 4 (+ 4 2);"
    ],
    "code": "21003023210321003221010321003210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        4,
        [
          "+",
          4,
          2
        ]
      ]
    ],
    "stanza": 864
  },
  {
    "role": "code",
    "lines": [
      "not | = 3 (+ 3 2);"
    ],
    "code": "210030232103211322101032113210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        3,
        [
          "+",
          3,
          2
        ]
      ]
    ],
    "stanza": 865
  },
  {
    "role": "code",
    "lines": [
      "not | = 2 (+ 2 2);"
    ],
    "code": "210030232103210322101032103210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        2,
        [
          "+",
          2,
          2
        ]
      ]
    ],
    "stanza": 866
  },
  {
    "role": "code",
    "lines": [
      "not | = 1 (+ 1 2);"
    ],
    "code": "2100302321032132210103213210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        1,
        [
          "+",
          1,
          2
        ]
      ]
    ],
    "stanza": 867
  },
  {
    "role": "code",
    "lines": [
      "not | = 0 (+ 0 2);"
    ],
    "code": "2100302321032032210103203210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        0,
        [
          "+",
          0,
          2
        ]
      ]
    ],
    "stanza": 868
  },
  {
    "role": "code",
    "lines": [
      "not (exists (? x | = (x) (+ (x) 2)));"
    ],
    "code": "2100322101003221100321001103023210322100110332210103221001103321033332233",
    "parse": [
      "not",
      [
        "exists",
        [
          "?",
          "x",
          [
            -1,
            "=",
            [
              "x"
            ],
            [
              "+",
              [
                "x"
              ],
              2
            ]
          ]
        ]
      ]
    ],
    "stanza": 869
  },
  {
    "role": "file",
    "lines": [
      "== COS_Implication =="
    ],
    "stanza": 870
  },
  {
    "role": "comment",
    "lines": [
      "# MATH introduce logical implication"
    ],
    "section_description": "introduce logical implication",
    "section_category": "MATH",
    "section_index": 27,
    "stanza": 871
  },
  {
    "role": "code",
    "lines": [
      "intro =>;"
    ],
    "code": "2032111101032233",
    "parse": [
      "intro",
      "=>"
    ],
    "stanza": 872
  },
  {
    "role": "code",
    "lines": [
      "define => | ? x | ? y | not | and (x) (not | y);"
    ],
    "code": "2110132111101030232110032100110302321100321100013023210030232101322100110332210030232110001332233",
    "parse": [
      "define",
      "=>",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "not",
            [
              -1,
              "and",
              [
                "x"
              ],
              [
                "not",
                [
                  -1,
                  "y"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 873
  },
  {
    "role": "code",
    "lines": [
      "=> $true $true;"
    ],
    "code": "21111010322103211011033221032110110332233",
    "parse": [
      "=>",
      [
        -2,
        "true"
      ],
      [
        -2,
        "true"
      ]
    ],
    "stanza": 874
  },
  {
    "role": "code",
    "lines": [
      "not | => $true $false;"
    ],
    "code": "2100302321111010322103211011033221032110111332233",
    "parse": [
      "not",
      [
        -1,
        "=>",
        [
          -2,
          "true"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "stanza": 875
  },
  {
    "role": "code",
    "lines": [
      "=> $false $true;"
    ],
    "code": "21111010322103211011133221032110110332233",
    "parse": [
      "=>",
      [
        -2,
        "false"
      ],
      [
        -2,
        "true"
      ]
    ],
    "stanza": 876
  },
  {
    "role": "code",
    "lines": [
      "=> $false $false;"
    ],
    "code": "21111010322103211011133221032110111332233",
    "parse": [
      "=>",
      [
        -2,
        "false"
      ],
      [
        -2,
        "false"
      ]
    ],
    "stanza": 877
  },
  {
    "role": "code",
    "lines": [
      "forall (? x | forall (? y | => (=> (x) (y)) (=> (not | y) (not | x))));"
    ],
    "code": "21001132211003210011030232100113221100321100013023211110103221111010322100110332211000133322111101032210030232110001332210030232100110333332233",
    "parse": [
      "forall",
      [
        "?",
        "x",
        [
          -1,
          "forall",
          [
            "?",
            "y",
            [
              -1,
              "=>",
              [
                "=>",
                [
                  "x"
                ],
                [
                  "y"
                ]
              ],
              [
                "=>",
                [
                  "not",
                  [
                    -1,
                    "y"
                  ]
                ],
                [
                  "not",
                  [
                    -1,
                    "x"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 878
  },
  {
    "role": "file",
    "lines": [
      "== COS_Set =="
    ],
    "stanza": 879
  },
  {
    "role": "comment",
    "lines": [
      "# MATH introduce sets and set membership"
    ],
    "section_description": "introduce sets and set membership",
    "section_category": "MATH",
    "section_index": 28,
    "stanza": 880
  },
  {
    "role": "code",
    "lines": [
      "intro element;"
    ],
    "code": "2032111101132233",
    "parse": [
      "intro",
      "element"
    ],
    "stanza": 881
  },
  {
    "role": "code",
    "lines": [
      "define element | ? x | ? lst | not | = (list-find-helper (lst) (x) (? y 0) 1) 0;"
    ],
    "code": "211013211110113023211003210011030232110032100011030232100302321032210011103221000110332210011033221100321100013203321332032233",
    "parse": [
      "define",
      "element",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "lst",
          [
            -1,
            "not",
            [
              -1,
              "=",
              [
                "list-find-helper",
                [
                  "lst"
                ],
                [
                  "x"
                ],
                [
                  "?",
                  "y",
                  0
                ],
                1
              ],
              0
            ]
          ]
        ]
      ]
    ],
    "stanza": 882
  },
  {
    "role": "code",
    "lines": [
      "element 0 (vector 0 4 8 3 5);"
    ],
    "code": "211110113203221000032032100321000321132101332233",
    "parse": [
      "element",
      0,
      [
        "vector",
        0,
        4,
        8,
        3,
        5
      ]
    ],
    "stanza": 883
  },
  {
    "role": "code",
    "lines": [
      "element 5 (vector 0 4 8 3 5);"
    ],
    "code": "21111011321013221000032032100321000321132101332233",
    "parse": [
      "element",
      5,
      [
        "vector",
        0,
        4,
        8,
        3,
        5
      ]
    ],
    "stanza": 884
  },
  {
    "role": "code",
    "lines": [
      "element 3 (vector 0 4 8 3 5);"
    ],
    "code": "2111101132113221000032032100321000321132101332233",
    "parse": [
      "element",
      3,
      [
        "vector",
        0,
        4,
        8,
        3,
        5
      ]
    ],
    "stanza": 885
  },
  {
    "role": "code",
    "lines": [
      "element 3 (vector 3 5 1 0 9);"
    ],
    "code": "21111011321132210000321132101321320321001332233",
    "parse": [
      "element",
      3,
      [
        "vector",
        3,
        5,
        1,
        0,
        9
      ]
    ],
    "stanza": 886
  },
  {
    "role": "code",
    "lines": [
      "element 1 (vector 3 5 1 0 9);"
    ],
    "code": "2111101132132210000321132101321320321001332233",
    "parse": [
      "element",
      1,
      [
        "vector",
        3,
        5,
        1,
        0,
        9
      ]
    ],
    "stanza": 887
  },
  {
    "role": "code",
    "lines": [
      "element 5 (vector 3 5 1 0 9);"
    ],
    "code": "211110113210132210000321132101321320321001332233",
    "parse": [
      "element",
      5,
      [
        "vector",
        3,
        5,
        1,
        0,
        9
      ]
    ],
    "stanza": 888
  },
  {
    "role": "code",
    "lines": [
      "element 5 (vector 8 1 6 2 0 5);"
    ],
    "code": "21111011321013221000032100032132110321032032101332233",
    "parse": [
      "element",
      5,
      [
        "vector",
        8,
        1,
        6,
        2,
        0,
        5
      ]
    ],
    "stanza": 889
  },
  {
    "role": "code",
    "lines": [
      "element 6 (vector 8 1 6 2 0 5);"
    ],
    "code": "21111011321103221000032100032132110321032032101332233",
    "parse": [
      "element",
      6,
      [
        "vector",
        8,
        1,
        6,
        2,
        0,
        5
      ]
    ],
    "stanza": 890
  },
  {
    "role": "code",
    "lines": [
      "element 5 (vector 8 1 6 2 0 5);"
    ],
    "code": "21111011321013221000032100032132110321032032101332233",
    "parse": [
      "element",
      5,
      [
        "vector",
        8,
        1,
        6,
        2,
        0,
        5
      ]
    ],
    "stanza": 891
  },
  {
    "role": "code",
    "lines": [
      "element 5 (vector 5 3 8 6 2 9);"
    ],
    "code": "211110113210132210000321013211321000321103210321001332233",
    "parse": [
      "element",
      5,
      [
        "vector",
        5,
        3,
        8,
        6,
        2,
        9
      ]
    ],
    "stanza": 892
  },
  {
    "role": "code",
    "lines": [
      "element 5 (vector 5 3 8 6 2 9);"
    ],
    "code": "211110113210132210000321013211321000321103210321001332233",
    "parse": [
      "element",
      5,
      [
        "vector",
        5,
        3,
        8,
        6,
        2,
        9
      ]
    ],
    "stanza": 893
  },
  {
    "role": "code",
    "lines": [
      "element 9 (vector 5 3 8 6 2 9);"
    ],
    "code": "2111101132100132210000321013211321000321103210321001332233",
    "parse": [
      "element",
      9,
      [
        "vector",
        5,
        3,
        8,
        6,
        2,
        9
      ]
    ],
    "stanza": 894
  },
  {
    "role": "code",
    "lines": [
      "element 7 (vector 1 7 2 6 4 5);"
    ],
    "code": "211110113211132210000321321113210321103210032101332233",
    "parse": [
      "element",
      7,
      [
        "vector",
        1,
        7,
        2,
        6,
        4,
        5
      ]
    ],
    "stanza": 895
  },
  {
    "role": "code",
    "lines": [
      "element 2 (vector 1 7 2 6 4 5);"
    ],
    "code": "21111011321032210000321321113210321103210032101332233",
    "parse": [
      "element",
      2,
      [
        "vector",
        1,
        7,
        2,
        6,
        4,
        5
      ]
    ],
    "stanza": 896
  },
  {
    "role": "code",
    "lines": [
      "element 6 (vector 1 7 2 6 4 5);"
    ],
    "code": "211110113211032210000321321113210321103210032101332233",
    "parse": [
      "element",
      6,
      [
        "vector",
        1,
        7,
        2,
        6,
        4,
        5
      ]
    ],
    "stanza": 897
  },
  {
    "role": "code",
    "lines": [
      "not | element 7 (vector 8 3 9 6);"
    ],
    "code": "21003023211110113211132210000321000321132100132110332233",
    "parse": [
      "not",
      [
        -1,
        "element",
        7,
        [
          "vector",
          8,
          3,
          9,
          6
        ]
      ]
    ],
    "stanza": 898
  },
  {
    "role": "code",
    "lines": [
      "not | element 1 (vector 8 6 3 5 4);"
    ],
    "code": "2100302321111011321322100003210003211032113210132100332233",
    "parse": [
      "not",
      [
        -1,
        "element",
        1,
        [
          "vector",
          8,
          6,
          3,
          5,
          4
        ]
      ]
    ],
    "stanza": 899
  },
  {
    "role": "code",
    "lines": [
      "not | element 2 (vector 9 5 6);"
    ],
    "code": "21003023211110113210322100003210013210132110332233",
    "parse": [
      "not",
      [
        -1,
        "element",
        2,
        [
          "vector",
          9,
          5,
          6
        ]
      ]
    ],
    "stanza": 900
  },
  {
    "role": "code",
    "lines": [
      "not | element 5 (vector 2 0 7);"
    ],
    "code": "21003023211110113210132210000321032032111332233",
    "parse": [
      "not",
      [
        -1,
        "element",
        5,
        [
          "vector",
          2,
          0,
          7
        ]
      ]
    ],
    "stanza": 901
  },
  {
    "role": "code",
    "lines": [
      "not | element 6 (vector 3 5);"
    ],
    "code": "21003023211110113211032210000321132101332233",
    "parse": [
      "not",
      [
        -1,
        "element",
        6,
        [
          "vector",
          3,
          5
        ]
      ]
    ],
    "stanza": 902
  },
  {
    "role": "comment",
    "lines": [
      "# rules for set equality"
    ],
    "stanza": 903
  },
  {
    "role": "code",
    "lines": [
      "define set-subset | ? x | ? y | if (> (list-length | x) 0) (and (element (head | x) (y)) (set-subset (tail | x) (y))) (true);"
    ],
    "code": "2110132111110030232110032100110302321100321100013023211113221132210010003023210011033203322101322111101132210001013023210011033221100013332211111003221000111302321001103322110001333322110110332233",
    "parse": [
      "define",
      "set-subset",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              ">",
              [
                "list-length",
                [
                  -1,
                  "x"
                ]
              ],
              0
            ],
            [
              "and",
              [
                "element",
                [
                  "head",
                  [
                    -1,
                    "x"
                  ]
                ],
                [
                  "y"
                ]
              ],
              [
                "set-subset",
                [
                  "tail",
                  [
                    -1,
                    "x"
                  ]
                ],
                [
                  "y"
                ]
              ]
            ],
            [
              "true"
            ]
          ]
        ]
      ]
    ],
    "stanza": 904
  },
  {
    "role": "code",
    "lines": [
      "define set= | ? x | ? y | and (set-subset (x) (y)) (set-subset (y) (x));"
    ],
    "code": "211013211111013023211003210011030232110032110001302321013221111100322100110332211000133322111110032211000133221001103332233",
    "parse": [
      "define",
      "set=",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "and",
            [
              "set-subset",
              [
                "x"
              ],
              [
                "y"
              ]
            ],
            [
              "set-subset",
              [
                "y"
              ],
              [
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 905
  },
  {
    "role": "code",
    "lines": [
      "set= (vector 1 5 9) (vector 5 1 9);"
    ],
    "code": "21111101322100003213210132100133221000032101321321001332233",
    "parse": [
      "set=",
      [
        "vector",
        1,
        5,
        9
      ],
      [
        "vector",
        5,
        1,
        9
      ]
    ],
    "stanza": 906
  },
  {
    "role": "code",
    "lines": [
      "set= (vector 1 5 9) (vector 9 1 5);"
    ],
    "code": "21111101322100003213210132100133221000032100132132101332233",
    "parse": [
      "set=",
      [
        "vector",
        1,
        5,
        9
      ],
      [
        "vector",
        9,
        1,
        5
      ]
    ],
    "stanza": 907
  },
  {
    "role": "code",
    "lines": [
      "not | set= (vector 1 5 9) (vector 1 5);"
    ],
    "code": "2100302321111101322100003213210132100133221000032132101332233",
    "parse": [
      "not",
      [
        -1,
        "set=",
        [
          "vector",
          1,
          5,
          9
        ],
        [
          "vector",
          1,
          5
        ]
      ]
    ],
    "stanza": 908
  },
  {
    "role": "comment",
    "lines": [
      "# let's go leave ourselves wide open to Russell's paradox",
      "# ... by using characteristic functions",
      "# ... since it doesn't really matter for communication purposes",
      "# ... and so far this is just used/tested with sets of integers really"
    ],
    "stanza": 909
  },
  {
    "role": "code",
    "lines": [
      "element 5 (all (? x | = (+ (x) 10) 15));"
    ],
    "code": "21111011321013221111032211003210011030232103221010322100110332101033211113332233",
    "parse": [
      "element",
      5,
      [
        "all",
        [
          "?",
          "x",
          [
            -1,
            "=",
            [
              "+",
              [
                "x"
              ],
              10
            ],
            15
          ]
        ]
      ]
    ],
    "stanza": 910
  },
  {
    "role": "code",
    "lines": [
      "element 3 (all (? x | = (* (x) 3) (+ (x) 6)));"
    ],
    "code": "2111101132113221111032211003210011030232103221001322100110332113322101032210011033211033332233",
    "parse": [
      "element",
      3,
      [
        "all",
        [
          "?",
          "x",
          [
            -1,
            "=",
            [
              "*",
              [
                "x"
              ],
              3
            ],
            [
              "+",
              [
                "x"
              ],
              6
            ]
          ]
        ]
      ]
    ],
    "stanza": 911
  },
  {
    "role": "code",
    "lines": [
      "define empty-set | vector;"
    ],
    "code": "21101321111110302321000032233",
    "parse": [
      "define",
      "empty-set",
      [
        -1,
        "vector"
      ]
    ],
    "stanza": 912
  },
  {
    "role": "code",
    "lines": [
      "element 0 (natural-set);"
    ],
    "code": "2111101132032211111332233",
    "parse": [
      "element",
      0,
      [
        "natural-set"
      ]
    ],
    "stanza": 913
  },
  {
    "role": "code",
    "lines": [
      "forall (? x | => (element (x) (natural-set)) (element (+ (x) 1) (natural-set)));"
    ],
    "code": "21001132211003210011030232111101032211110113221001103322111113332211110113221010322100110332133221111133332233",
    "parse": [
      "forall",
      [
        "?",
        "x",
        [
          -1,
          "=>",
          [
            "element",
            [
              "x"
            ],
            [
              "natural-set"
            ]
          ],
          [
            "element",
            [
              "+",
              [
                "x"
              ],
              1
            ],
            [
              "natural-set"
            ]
          ]
        ]
      ]
    ],
    "stanza": 914
  },
  {
    "role": "code",
    "lines": [
      "element 1 (natural-set);"
    ],
    "code": "2111101132132211111332233",
    "parse": [
      "element",
      1,
      [
        "natural-set"
      ]
    ],
    "stanza": 915
  },
  {
    "role": "code",
    "lines": [
      "element 2 (natural-set);"
    ],
    "code": "21111011321032211111332233",
    "parse": [
      "element",
      2,
      [
        "natural-set"
      ]
    ],
    "stanza": 916
  },
  {
    "role": "code",
    "lines": [
      "element 3 (natural-set);"
    ],
    "code": "21111011321132211111332233",
    "parse": [
      "element",
      3,
      [
        "natural-set"
      ]
    ],
    "stanza": 917
  },
  {
    "role": "code",
    "lines": [
      "element 4 (natural-set);"
    ],
    "code": "211110113210032211111332233",
    "parse": [
      "element",
      4,
      [
        "natural-set"
      ]
    ],
    "stanza": 918
  },
  {
    "role": "code",
    "lines": [
      "element 5 (natural-set);"
    ],
    "code": "211110113210132211111332233",
    "parse": [
      "element",
      5,
      [
        "natural-set"
      ]
    ],
    "stanza": 919
  },
  {
    "role": "code",
    "lines": [
      "element 6 (natural-set);"
    ],
    "code": "211110113211032211111332233",
    "parse": [
      "element",
      6,
      [
        "natural-set"
      ]
    ],
    "stanza": 920
  },
  {
    "role": "code",
    "lines": [
      "element 7 (natural-set);"
    ],
    "code": "211110113211132211111332233",
    "parse": [
      "element",
      7,
      [
        "natural-set"
      ]
    ],
    "stanza": 921
  },
  {
    "role": "code",
    "lines": [
      "element 8 (natural-set);"
    ],
    "code": "2111101132100032211111332233",
    "parse": [
      "element",
      8,
      [
        "natural-set"
      ]
    ],
    "stanza": 922
  },
  {
    "role": "code",
    "lines": [
      "element 9 (natural-set);"
    ],
    "code": "2111101132100132211111332233",
    "parse": [
      "element",
      9,
      [
        "natural-set"
      ]
    ],
    "stanza": 923
  },
  {
    "role": "code",
    "lines": [
      "define boolean-set | vector $true $false;"
    ],
    "code": "211013211111113023210000322103211011033221032110111332233",
    "parse": [
      "define",
      "boolean-set",
      [
        -1,
        "vector",
        [
          -2,
          "true"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "stanza": 924
  },
  {
    "role": "code",
    "lines": [
      "element $true (boolean-set);"
    ],
    "code": "21111011322103211011033221111111332233",
    "parse": [
      "element",
      [
        -2,
        "true"
      ],
      [
        "boolean-set"
      ]
    ],
    "stanza": 925
  },
  {
    "role": "code",
    "lines": [
      "element $false (boolean-set);"
    ],
    "code": "21111011322103211011133221111111332233",
    "parse": [
      "element",
      [
        -2,
        "false"
      ],
      [
        "boolean-set"
      ]
    ],
    "stanza": 926
  },
  {
    "role": "comment",
    "lines": [
      "# actually, to simplify semantics elsewhere, true and false",
      "# are now just 0 and 1 so they are not distinct from ints"
    ],
    "stanza": 927
  },
  {
    "role": "code",
    "lines": [
      "define even-natural-set | all | ? x | exists | ? y | and (element (y) (natural-set)) (= (* 2 (y)) (x));"
    ],
    "code": "211013210000000302321111030232110032100110302321010030232110032110001302321013221111011322110001332211111333221032210013210322110001333221001103332233",
    "parse": [
      "define",
      "even-natural-set",
      [
        -1,
        "all",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "exists",
            [
              -1,
              "?",
              "y",
              [
                -1,
                "and",
                [
                  "element",
                  [
                    "y"
                  ],
                  [
                    "natural-set"
                  ]
                ],
                [
                  "=",
                  [
                    "*",
                    2,
                    [
                      "y"
                    ]
                  ],
                  [
                    "x"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 928
  },
  {
    "role": "code",
    "lines": [
      "element 0 (natural-set);"
    ],
    "code": "2111101132032211111332233",
    "parse": [
      "element",
      0,
      [
        "natural-set"
      ]
    ],
    "stanza": 929
  },
  {
    "role": "code",
    "lines": [
      "element 0 (even-natural-set);"
    ],
    "code": "2111101132032210000000332233",
    "parse": [
      "element",
      0,
      [
        "even-natural-set"
      ]
    ],
    "stanza": 930
  },
  {
    "role": "code",
    "lines": [
      "element 1 (natural-set);"
    ],
    "code": "2111101132132211111332233",
    "parse": [
      "element",
      1,
      [
        "natural-set"
      ]
    ],
    "stanza": 931
  },
  {
    "role": "code",
    "lines": [
      "not | element 1 (even-natural-set);"
    ],
    "code": "210030232111101132132210000000332233",
    "parse": [
      "not",
      [
        -1,
        "element",
        1,
        [
          "even-natural-set"
        ]
      ]
    ],
    "stanza": 932
  },
  {
    "role": "code",
    "lines": [
      "element 2 (natural-set);"
    ],
    "code": "21111011321032211111332233",
    "parse": [
      "element",
      2,
      [
        "natural-set"
      ]
    ],
    "stanza": 933
  },
  {
    "role": "code",
    "lines": [
      "element 2 (even-natural-set);"
    ],
    "code": "21111011321032210000000332233",
    "parse": [
      "element",
      2,
      [
        "even-natural-set"
      ]
    ],
    "stanza": 934
  },
  {
    "role": "code",
    "lines": [
      "element 3 (natural-set);"
    ],
    "code": "21111011321132211111332233",
    "parse": [
      "element",
      3,
      [
        "natural-set"
      ]
    ],
    "stanza": 935
  },
  {
    "role": "code",
    "lines": [
      "not | element 3 (even-natural-set);"
    ],
    "code": "2100302321111011321132210000000332233",
    "parse": [
      "not",
      [
        -1,
        "element",
        3,
        [
          "even-natural-set"
        ]
      ]
    ],
    "stanza": 936
  },
  {
    "role": "code",
    "lines": [
      "element 4 (natural-set);"
    ],
    "code": "211110113210032211111332233",
    "parse": [
      "element",
      4,
      [
        "natural-set"
      ]
    ],
    "stanza": 937
  },
  {
    "role": "code",
    "lines": [
      "element 4 (even-natural-set);"
    ],
    "code": "211110113210032210000000332233",
    "parse": [
      "element",
      4,
      [
        "even-natural-set"
      ]
    ],
    "stanza": 938
  },
  {
    "role": "code",
    "lines": [
      "element 5 (natural-set);"
    ],
    "code": "211110113210132211111332233",
    "parse": [
      "element",
      5,
      [
        "natural-set"
      ]
    ],
    "stanza": 939
  },
  {
    "role": "code",
    "lines": [
      "not | element 5 (even-natural-set);"
    ],
    "code": "21003023211110113210132210000000332233",
    "parse": [
      "not",
      [
        -1,
        "element",
        5,
        [
          "even-natural-set"
        ]
      ]
    ],
    "stanza": 940
  },
  {
    "role": "code",
    "lines": [
      "element 6 (natural-set);"
    ],
    "code": "211110113211032211111332233",
    "parse": [
      "element",
      6,
      [
        "natural-set"
      ]
    ],
    "stanza": 941
  },
  {
    "role": "code",
    "lines": [
      "element 6 (even-natural-set);"
    ],
    "code": "211110113211032210000000332233",
    "parse": [
      "element",
      6,
      [
        "even-natural-set"
      ]
    ],
    "stanza": 942
  },
  {
    "role": "file",
    "lines": [
      "== COS_Graph =="
    ],
    "stanza": 943
  },
  {
    "role": "comment",
    "lines": [
      "# MATH introduce graph structures"
    ],
    "section_description": "introduce graph structures",
    "section_category": "MATH",
    "section_index": 29,
    "stanza": 944
  },
  {
    "role": "code",
    "lines": [
      "define make-graph | lambda (nodes links) (pair (nodes) (links));"
    ],
    "code": "21101321000000130232110103221000001032100000113322111111322100000103322100000113332233",
    "parse": [
      "define",
      "make-graph",
      [
        -1,
        "lambda",
        [
          "nodes",
          "links"
        ],
        [
          "pair",
          [
            "nodes"
          ],
          [
            "links"
          ]
        ]
      ]
    ],
    "stanza": 945
  },
  {
    "role": "code",
    "lines": [
      "define test-graph | make-graph (vector 1 2 3 4) (vector (vector 1 2) (vector 2 3) (vector 1 4));"
    ],
    "code": "211013210000100302321000000132210000321321032113210033221000032210000321321033221000032103211332210000321321003332233",
    "parse": [
      "define",
      "test-graph",
      [
        -1,
        "make-graph",
        [
          "vector",
          1,
          2,
          3,
          4
        ],
        [
          "vector",
          [
            "vector",
            1,
            2
          ],
          [
            "vector",
            2,
            3
          ],
          [
            "vector",
            1,
            4
          ]
        ]
      ]
    ],
    "stanza": 946
  },
  {
    "role": "code",
    "lines": [
      "define graph-linked | lambda (g n1 n2) (exists | ? idx | if (and (>= (idx) 0) (< (idx) (list-length | list-ref (g) 1))) (list= (list-ref (list-ref (g) 1) (idx)) (vector (n1) (n2))) (false));"
    ],
    "code": "211013210000101302321101032210000110321000011132100010003322101003023211003210100013023211113221013221111003221010001332033221322101000133221001000302321001001322100001103321333322100101132210010013221001001322100001103321332210100013332210000322100001113322100010003333221101113332233",
    "parse": [
      "define",
      "graph-linked",
      [
        -1,
        "lambda",
        [
          "g",
          "n1",
          "n2"
        ],
        [
          "exists",
          [
            -1,
            "?",
            "idx",
            [
              -1,
              "if",
              [
                "and",
                [
                  ">=",
                  [
                    "idx"
                  ],
                  0
                ],
                [
                  "<",
                  [
                    "idx"
                  ],
                  [
                    "list-length",
                    [
                      -1,
                      "list-ref",
                      [
                        "g"
                      ],
                      1
                    ]
                  ]
                ]
              ],
              [
                "list=",
                [
                  "list-ref",
                  [
                    "list-ref",
                    [
                      "g"
                    ],
                    1
                  ],
                  [
                    "idx"
                  ]
                ],
                [
                  "vector",
                  [
                    "n1"
                  ],
                  [
                    "n2"
                  ]
                ]
              ],
              [
                "false"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 947
  },
  {
    "role": "code",
    "lines": [
      "= (graph-linked (test-graph) 1 2) (true);"
    ],
    "code": "2103221000010132210000100332132103322110110332233",
    "parse": [
      "=",
      [
        "graph-linked",
        [
          "test-graph"
        ],
        1,
        2
      ],
      [
        "true"
      ]
    ],
    "stanza": 948
  },
  {
    "role": "code",
    "lines": [
      "= (graph-linked (test-graph) 1 3) (false);"
    ],
    "code": "2103221000010132210000100332132113322110111332233",
    "parse": [
      "=",
      [
        "graph-linked",
        [
          "test-graph"
        ],
        1,
        3
      ],
      [
        "false"
      ]
    ],
    "stanza": 949
  },
  {
    "role": "code",
    "lines": [
      "= (graph-linked (test-graph) 2 4) (false);"
    ],
    "code": "210322100001013221000010033210321003322110111332233",
    "parse": [
      "=",
      [
        "graph-linked",
        [
          "test-graph"
        ],
        2,
        4
      ],
      [
        "false"
      ]
    ],
    "stanza": 950
  },
  {
    "role": "comment",
    "lines": [
      "# 'if' is used a lot in the next definition in place of and/or",
      "# this is because I haven't established lazy evaluation forms for and/or",
      "# so this very inefficient algorithm completely bogs down when combined",
      "# ... during testing with a dumb implementation for 'exists'."
    ],
    "stanza": 951
  },
  {
    "role": "code",
    "lines": [
      "define graph-linked* | lambda (g n1 n2) (if (= (n1) (n2)) (true) (if (graph-linked (g) (n1) (n2)) (true) (exists (? n3 | if (graph-linked (g) (n1) (n3)) (graph-linked* (g) (n3) (n2)) (false)))));"
    ],
    "code": "211013210001001302321101032210000110321000011132100010003322111132210322100001113322100010003332211011033221111322100001013221000011033221000011133221000100033322110110332210100322110032100010103023211113221000010132210000110332210000111332210001010333221000100132210000110332210001010332210001000333221101113333332233",
    "parse": [
      "define",
      "graph-linked*",
      [
        -1,
        "lambda",
        [
          "g",
          "n1",
          "n2"
        ],
        [
          "if",
          [
            "=",
            [
              "n1"
            ],
            [
              "n2"
            ]
          ],
          [
            "true"
          ],
          [
            "if",
            [
              "graph-linked",
              [
                "g"
              ],
              [
                "n1"
              ],
              [
                "n2"
              ]
            ],
            [
              "true"
            ],
            [
              "exists",
              [
                "?",
                "n3",
                [
                  -1,
                  "if",
                  [
                    "graph-linked",
                    [
                      "g"
                    ],
                    [
                      "n1"
                    ],
                    [
                      "n3"
                    ]
                  ],
                  [
                    "graph-linked*",
                    [
                      "g"
                    ],
                    [
                      "n3"
                    ],
                    [
                      "n2"
                    ]
                  ],
                  [
                    "false"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 952
  },
  {
    "role": "code",
    "lines": [
      "= (graph-linked* (test-graph) 1 2) (true);"
    ],
    "code": "2103221000100132210000100332132103322110110332233",
    "parse": [
      "=",
      [
        "graph-linked*",
        [
          "test-graph"
        ],
        1,
        2
      ],
      [
        "true"
      ]
    ],
    "stanza": 953
  },
  {
    "role": "code",
    "lines": [
      "= (graph-linked* (test-graph) 1 3) (true);"
    ],
    "code": "2103221000100132210000100332132113322110110332233",
    "parse": [
      "=",
      [
        "graph-linked*",
        [
          "test-graph"
        ],
        1,
        3
      ],
      [
        "true"
      ]
    ],
    "stanza": 954
  },
  {
    "role": "code",
    "lines": [
      "= (graph-linked* (test-graph) 2 4) (false);"
    ],
    "code": "210322100010013221000010033210321003322110111332233",
    "parse": [
      "=",
      [
        "graph-linked*",
        [
          "test-graph"
        ],
        2,
        4
      ],
      [
        "false"
      ]
    ],
    "stanza": 955
  },
  {
    "role": "file",
    "lines": [
      "== COS_Begin =="
    ],
    "stanza": 956
  },
  {
    "role": "comment",
    "lines": [
      "# MATH show how to execute a sequence of instructions"
    ],
    "section_description": "show how to execute a sequence of instructions",
    "section_category": "MATH",
    "section_index": 30,
    "stanza": 957
  },
  {
    "role": "code",
    "lines": [
      "intro begin;"
    ],
    "code": "20321000101132233",
    "parse": [
      "intro",
      "begin"
    ],
    "stanza": 958
  },
  {
    "role": "code",
    "lines": [
      "define prev-translate | translate;"
    ],
    "code": "21101321011100302321100132233",
    "parse": [
      "define",
      "prev-translate",
      [
        -1,
        "translate"
      ]
    ],
    "stanza": 959
  },
  {
    "role": "code",
    "lines": [
      "define reverse | ? x | if (>= (list-length | x) 1) (prepend (last | x) (reverse | except-last | x)) (x);"
    ],
    "code": "211013210001100302321100321001103023211113221111003221001000302321001103321332210010103221011010302321001103322100011003023210110113023210011033322100110332233",
    "parse": [
      "define",
      "reverse",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            ">=",
            [
              "list-length",
              [
                -1,
                "x"
              ]
            ],
            1
          ],
          [
            "prepend",
            [
              "last",
              [
                -1,
                "x"
              ]
            ],
            [
              "reverse",
              [
                -1,
                "except-last",
                [
                  -1,
                  "x"
                ]
              ]
            ]
          ],
          [
            "x"
          ]
        ]
      ]
    ],
    "stanza": 960
  },
  {
    "role": "comment",
    "lines": [
      "# test reverse"
    ],
    "stanza": 961
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 1 2 3) (reverse | vector 3 2 1);"
    ],
    "code": "210010113221000032132103211332210001100302321000032113210321332233",
    "parse": [
      "list=",
      [
        "vector",
        1,
        2,
        3
      ],
      [
        "reverse",
        [
          -1,
          "vector",
          3,
          2,
          1
        ]
      ]
    ],
    "stanza": 962
  },
  {
    "role": "code",
    "lines": [
      "define translate | let ((prev (prev-translate))) (? x | if (number? | x) (prev | x) (if (= (head | x) begin) (translate (vector (vector ? x (vector last (vector x))) (prepend vector (tail | x)))) (prev | x)));"
    ],
    "code": "2110132110013023210110003222101110132210111003333221100321001103023211113221100030232100110332210111013023210011033221111322103221000101302321001103321000101133221100132210000322100003211003210011032210000321011010322100003210011033332210010103210000322100011130232100110333332210111013023210011033332233",
    "parse": [
      "define",
      "translate",
      [
        -1,
        "let",
        [
          [
            "prev",
            [
              "prev-translate"
            ]
          ]
        ],
        [
          "?",
          "x",
          [
            -1,
            "if",
            [
              "number?",
              [
                -1,
                "x"
              ]
            ],
            [
              "prev",
              [
                -1,
                "x"
              ]
            ],
            [
              "if",
              [
                "=",
                [
                  "head",
                  [
                    -1,
                    "x"
                  ]
                ],
                "begin"
              ],
              [
                "translate",
                [
                  "vector",
                  [
                    "vector",
                    "?",
                    "x",
                    [
                      "vector",
                      "last",
                      [
                        "vector",
                        "x"
                      ]
                    ]
                  ],
                  [
                    "prepend",
                    "vector",
                    [
                      "tail",
                      [
                        -1,
                        "x"
                      ]
                    ]
                  ]
                ]
              ],
              [
                "prev",
                [
                  -1,
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 963
  },
  {
    "role": "code",
    "lines": [
      "= (begin 1 7 2 4) 4;"
    ],
    "code": "210322100010113213211132103210033210032233",
    "parse": [
      "=",
      [
        "begin",
        1,
        7,
        2,
        4
      ],
      4
    ],
    "stanza": 964
  },
  {
    "role": "code",
    "lines": [
      "= (begin (set! (demo-mut1) 88) (set! (demo-mut1) 6) (get! | demo-mut1)) 6;"
    ],
    "code": "2103221000101132211100322100000033210110003322111003221000000332110332211101302321000000333211032233",
    "parse": [
      "=",
      [
        "begin",
        [
          "set!",
          [
            "demo-mut1"
          ],
          88
        ],
        [
          "set!",
          [
            "demo-mut1"
          ],
          6
        ],
        [
          "get!",
          [
            -1,
            "demo-mut1"
          ]
        ]
      ],
      6
    ],
    "stanza": 965
  },
  {
    "role": "code",
    "lines": [
      "= (begin (set! (demo-mut2) 88) (set! (demo-mut1) 6) (get! | demo-mut2)) 88;"
    ],
    "code": "21032210001011322111003221000001332101100033221110032210000003321103322111013023210000013332101100032233",
    "parse": [
      "=",
      [
        "begin",
        [
          "set!",
          [
            "demo-mut2"
          ],
          88
        ],
        [
          "set!",
          [
            "demo-mut1"
          ],
          6
        ],
        [
          "get!",
          [
            -1,
            "demo-mut2"
          ]
        ]
      ],
      88
    ],
    "stanza": 966
  },
  {
    "role": "code",
    "lines": [
      "= (begin (set! (demo-mut1) 88) (set! (demo-mut1) 6) (get! | demo-mut1) 4) 4;"
    ],
    "code": "210322100010113221110032210000003321011000332211100322100000033211033221110130232100000033210033210032233",
    "parse": [
      "=",
      [
        "begin",
        [
          "set!",
          [
            "demo-mut1"
          ],
          88
        ],
        [
          "set!",
          [
            "demo-mut1"
          ],
          6
        ],
        [
          "get!",
          [
            -1,
            "demo-mut1"
          ]
        ],
        4
      ],
      4
    ],
    "stanza": 967
  },
  {
    "role": "file",
    "lines": [
      "== COS_Hash =="
    ],
    "stanza": 968
  },
  {
    "role": "comment",
    "lines": [
      "# MATH introduce environment/hashmap structure",
      "# this section needs a LOT more examples :-)",
      "# note that at the time of writing (h 1 2) is same as ((h) 1 2)"
    ],
    "section_description": "introduce environment/hashmap structure",
    "section_category": "MATH",
    "section_index": 31,
    "stanza": 969
  },
  {
    "role": "code",
    "lines": [
      "define hash-add | lambda (h x y z) (if (equal (z) (x)) (y) (h (z)));"
    ],
    "code": "21101321000110130232110103221000111032100110321100013211001033221111322100032211001033221001103332211000133221000111032211001033332233",
    "parse": [
      "define",
      "hash-add",
      [
        -1,
        "lambda",
        [
          "h",
          "x",
          "y",
          "z"
        ],
        [
          "if",
          [
            "equal",
            [
              "z"
            ],
            [
              "x"
            ]
          ],
          [
            "y"
          ],
          [
            "h",
            [
              "z"
            ]
          ]
        ]
      ]
    ],
    "stanza": 970
  },
  {
    "role": "code",
    "lines": [
      "define hash-ref | lambda (h x) (h (x));"
    ],
    "code": "211013210001111302321101032210001110321001103322100011103221001103332233",
    "parse": [
      "define",
      "hash-ref",
      [
        -1,
        "lambda",
        [
          "h",
          "x"
        ],
        [
          "h",
          [
            "x"
          ]
        ]
      ]
    ],
    "stanza": 971
  },
  {
    "role": "code",
    "lines": [
      "define hash-null | ? x | undefined;"
    ],
    "code": "211013210010000302321100321001103023210000032233",
    "parse": [
      "define",
      "hash-null",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "undefined"
        ]
      ]
    ],
    "stanza": 972
  },
  {
    "role": "code",
    "lines": [
      "define hash-default | ? default | ? x | default;"
    ],
    "code": "211013210010001302321100321001001030232110032100110302321001001032233",
    "parse": [
      "define",
      "hash-default",
      [
        -1,
        "?",
        "default",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "default"
          ]
        ]
      ]
    ],
    "stanza": 973
  },
  {
    "role": "code",
    "lines": [
      "define test-hash | hash-add (hash-add (hash-null) 3 2) 4 9;"
    ],
    "code": "2110132100100113023210001101322100011013221001000033211321033210032100132233",
    "parse": [
      "define",
      "test-hash",
      [
        -1,
        "hash-add",
        [
          "hash-add",
          [
            "hash-null"
          ],
          3,
          2
        ],
        4,
        9
      ]
    ],
    "stanza": 974
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref (test-hash) 4) 9;"
    ],
    "code": "2103221000111132210010011332100332100132233",
    "parse": [
      "=",
      [
        "hash-ref",
        [
          "test-hash"
        ],
        4
      ],
      9
    ],
    "stanza": 975
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref (test-hash) 3) 2;"
    ],
    "code": "2103221000111132210010011332113321032233",
    "parse": [
      "=",
      [
        "hash-ref",
        [
          "test-hash"
        ],
        3
      ],
      2
    ],
    "stanza": 976
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref (test-hash) 8) (undefined);"
    ],
    "code": "210322100011113221001001133210003322100000332233",
    "parse": [
      "=",
      [
        "hash-ref",
        [
          "test-hash"
        ],
        8
      ],
      [
        "undefined"
      ]
    ],
    "stanza": 977
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref (test-hash) 15) (undefined);"
    ],
    "code": "210322100011113221001001133211113322100000332233",
    "parse": [
      "=",
      [
        "hash-ref",
        [
          "test-hash"
        ],
        15
      ],
      [
        "undefined"
      ]
    ],
    "stanza": 978
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref (hash-add (test-hash) 15 33) 15) 33;"
    ],
    "code": "210322100011113221000110132210010011332111132100001332111133210000132233",
    "parse": [
      "=",
      [
        "hash-ref",
        [
          "hash-add",
          [
            "test-hash"
          ],
          15,
          33
        ],
        15
      ],
      33
    ],
    "stanza": 979
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref (test-hash) 15) (undefined);"
    ],
    "code": "210322100011113221001001133211113322100000332233",
    "parse": [
      "=",
      [
        "hash-ref",
        [
          "test-hash"
        ],
        15
      ],
      [
        "undefined"
      ]
    ],
    "stanza": 980
  },
  {
    "role": "code",
    "lines": [
      "define make-hash | ? x | if (list= (x) (vector)) (hash-null) (hash-add (make-hash (tail | x)) (first | head | x) (second | head | x));"
    ],
    "code": "2110132100101003023211003210011030232111132210010113221001103322100003332210010000332210001101322100101003221000111302321001103332210011003023210001013023210011033221001101302321000101302321001103332233",
    "parse": [
      "define",
      "make-hash",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "list=",
            [
              "x"
            ],
            [
              "vector"
            ]
          ],
          [
            "hash-null"
          ],
          [
            "hash-add",
            [
              "make-hash",
              [
                "tail",
                [
                  -1,
                  "x"
                ]
              ]
            ],
            [
              "first",
              [
                -1,
                "head",
                [
                  -1,
                  "x"
                ]
              ]
            ],
            [
              "second",
              [
                -1,
                "head",
                [
                  -1,
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 981
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref (make-hash | vector (pair 3 10) (pair 2 20) (pair 1 30)) 3) 10;"
    ],
    "code": "21032210001111322100101003023210000322111111321132101033221111113210321010033221111113213211110333211332101032233",
    "parse": [
      "=",
      [
        "hash-ref",
        [
          "make-hash",
          [
            -1,
            "vector",
            [
              "pair",
              3,
              10
            ],
            [
              "pair",
              2,
              20
            ],
            [
              "pair",
              1,
              30
            ]
          ]
        ],
        3
      ],
      10
    ],
    "stanza": 982
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref (make-hash | vector (pair 3 10) (pair 2 20) (pair 1 30)) 1) 30;"
    ],
    "code": "21032210001111322100101003023210000322111111321132101033221111113210321010033221111113213211110333213321111032233",
    "parse": [
      "=",
      [
        "hash-ref",
        [
          "make-hash",
          [
            -1,
            "vector",
            [
              "pair",
              3,
              10
            ],
            [
              "pair",
              2,
              20
            ],
            [
              "pair",
              1,
              30
            ]
          ]
        ],
        1
      ],
      30
    ],
    "stanza": 983
  },
  {
    "role": "file",
    "lines": [
      "== COS_MutableStructure =="
    ],
    "stanza": 984
  },
  {
    "role": "comment",
    "lines": [
      "# OBJECT introduce simple mutable structures"
    ],
    "section_description": "introduce simple mutable structures",
    "section_category": "OBJECT",
    "section_index": 32,
    "stanza": 985
  },
  {
    "role": "code",
    "lines": [
      "define mutable-struct | ? lst | let ((data (map (? x | make-cell 0) (lst)))) (? key | list-ref (data) (list-find (lst) (key) (? x 0)));"
    ],
    "code": "2110132100101013023211003210001103023210110003222100101103221100000322110032100110302321101132033221000110333332211003210011113023210010013221001011033221010010322100011033221001111332211003210011032033332233",
    "parse": [
      "define",
      "mutable-struct",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "let",
          [
            [
              "data",
              [
                "map",
                [
                  "?",
                  "x",
                  [
                    -1,
                    "make-cell",
                    0
                  ]
                ],
                [
                  "lst"
                ]
              ]
            ]
          ],
          [
            "?",
            "key",
            [
              -1,
              "list-ref",
              [
                "data"
              ],
              [
                "list-find",
                [
                  "lst"
                ],
                [
                  "key"
                ],
                [
                  "?",
                  "x",
                  0
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 986
  },
  {
    "role": "code",
    "lines": [
      "define test-struct1 | mutable-struct | vector item1 item2 item3;"
    ],
    "code": "2110132100101113023210010101302321000032100110003210011001321001101032233",
    "parse": [
      "define",
      "test-struct1",
      [
        -1,
        "mutable-struct",
        [
          -1,
          "vector",
          "item1",
          "item2",
          "item3"
        ]
      ]
    ],
    "stanza": 987
  },
  {
    "role": "code",
    "lines": [
      "set! (test-struct1 item1) 15;"
    ],
    "code": "211100322100101113210011000332111132233",
    "parse": [
      "set!",
      [
        "test-struct1",
        "item1"
      ],
      15
    ],
    "stanza": 988
  },
  {
    "role": "code",
    "lines": [
      "= (get! | test-struct1 item1) 15;"
    ],
    "code": "2103221110130232100101113210011000332111132233",
    "parse": [
      "=",
      [
        "get!",
        [
          -1,
          "test-struct1",
          "item1"
        ]
      ],
      15
    ],
    "stanza": 989
  },
  {
    "role": "file",
    "lines": [
      "== COS_Method =="
    ],
    "stanza": 990
  },
  {
    "role": "comment",
    "lines": [
      "# OBJECT introduce method handler wrappers"
    ],
    "section_description": "introduce method handler wrappers",
    "section_category": "OBJECT",
    "section_index": 33,
    "stanza": 991
  },
  {
    "role": "code",
    "lines": [
      "define add-method | lambda (object name method) (hash-add (object) (name) (? dummy | method | object));"
    ],
    "code": "211013210011011302321101032210011100321001110132100111103322100011013221001110033221001110133221100321110101302321001111030232100111003332233",
    "parse": [
      "define",
      "add-method",
      [
        -1,
        "lambda",
        [
          "object",
          "name",
          "method"
        ],
        [
          "hash-add",
          [
            "object"
          ],
          [
            "name"
          ],
          [
            "?",
            "dummy",
            [
              -1,
              "method",
              [
                -1,
                "object"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 992
  },
  {
    "role": "code",
    "lines": [
      "define call | ? x | x 0;"
    ],
    "code": "211013210011111302321100321001103023210011032032233",
    "parse": [
      "define",
      "call",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "x",
          0
        ]
      ]
    ],
    "stanza": 993
  },
  {
    "role": "code",
    "lines": [
      "define test-struct2 | mutable-struct | vector x y;"
    ],
    "code": "21101321010000030232100101013023210000321001103211000132233",
    "parse": [
      "define",
      "test-struct2",
      [
        -1,
        "mutable-struct",
        [
          -1,
          "vector",
          "x",
          "y"
        ]
      ]
    ],
    "stanza": 994
  },
  {
    "role": "code",
    "lines": [
      "set! (test-struct2 x) 10;"
    ],
    "code": "2111003221010000032100110332101032233",
    "parse": [
      "set!",
      [
        "test-struct2",
        "x"
      ],
      10
    ],
    "stanza": 995
  },
  {
    "role": "code",
    "lines": [
      "set! (test-struct2 y) 20;"
    ],
    "code": "21110032210100000321100013321010032233",
    "parse": [
      "set!",
      [
        "test-struct2",
        "y"
      ],
      20
    ],
    "stanza": 996
  },
  {
    "role": "code",
    "lines": [
      "= (get! | test-struct2 x) 10;"
    ],
    "code": "21032211101302321010000032100110332101032233",
    "parse": [
      "=",
      [
        "get!",
        [
          -1,
          "test-struct2",
          "x"
        ]
      ],
      10
    ],
    "stanza": 997
  },
  {
    "role": "code",
    "lines": [
      "= (get! | test-struct2 y) 20;"
    ],
    "code": "210322111013023210100000321100013321010032233",
    "parse": [
      "=",
      [
        "get!",
        [
          -1,
          "test-struct2",
          "y"
        ]
      ],
      20
    ],
    "stanza": 998
  },
  {
    "role": "code",
    "lines": [
      "define test-struct3 | add-method (test-struct2) sum (? self | + (get! | self x) (get! | self y));"
    ],
    "code": "2110132101000013023210011011322101000003321010001032211003210100011302321010322111013023210100011321001103322111013023210100011321100013332233",
    "parse": [
      "define",
      "test-struct3",
      [
        -1,
        "add-method",
        [
          "test-struct2"
        ],
        "sum",
        [
          "?",
          "self",
          [
            -1,
            "+",
            [
              "get!",
              [
                -1,
                "self",
                "x"
              ]
            ],
            [
              "get!",
              [
                -1,
                "self",
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 999
  },
  {
    "role": "code",
    "lines": [
      "= (get! | test-struct3 x) 10;"
    ],
    "code": "21032211101302321010000132100110332101032233",
    "parse": [
      "=",
      [
        "get!",
        [
          -1,
          "test-struct3",
          "x"
        ]
      ],
      10
    ],
    "stanza": 1000
  },
  {
    "role": "code",
    "lines": [
      "= (get! | test-struct3 y) 20;"
    ],
    "code": "210322111013023210100001321100013321010032233",
    "parse": [
      "=",
      [
        "get!",
        [
          -1,
          "test-struct3",
          "y"
        ]
      ],
      20
    ],
    "stanza": 1001
  },
  {
    "role": "code",
    "lines": [
      "= (call | test-struct3 sum) 30;"
    ],
    "code": "21032210011111302321010000132101000103321111032233",
    "parse": [
      "=",
      [
        "call",
        [
          -1,
          "test-struct3",
          "sum"
        ]
      ],
      30
    ],
    "stanza": 1002
  },
  {
    "role": "code",
    "lines": [
      "set! (test-struct3 y) 10;"
    ],
    "code": "2111003221010000132110001332101032233",
    "parse": [
      "set!",
      [
        "test-struct3",
        "y"
      ],
      10
    ],
    "stanza": 1003
  },
  {
    "role": "code",
    "lines": [
      "= (call | test-struct3 sum) 20;"
    ],
    "code": "21032210011111302321010000132101000103321010032233",
    "parse": [
      "=",
      [
        "call",
        [
          -1,
          "test-struct3",
          "sum"
        ]
      ],
      20
    ],
    "stanza": 1004
  },
  {
    "role": "code",
    "lines": [
      "set! (test-struct2 y) 5;"
    ],
    "code": "211100322101000003211000133210132233",
    "parse": [
      "set!",
      [
        "test-struct2",
        "y"
      ],
      5
    ],
    "stanza": 1005
  },
  {
    "role": "code",
    "lines": [
      "= (call | test-struct3 sum) 15;"
    ],
    "code": "2103221001111130232101000013210100010332111132233",
    "parse": [
      "=",
      [
        "call",
        [
          -1,
          "test-struct3",
          "sum"
        ]
      ],
      15
    ],
    "stanza": 1006
  },
  {
    "role": "file",
    "lines": [
      "== COS_Turing =="
    ],
    "stanza": 1007
  },
  {
    "role": "comment",
    "lines": [
      "# TURING introduce turing machine model",
      "# just for fun!"
    ],
    "section_description": "introduce turing machine model",
    "section_category": "TURING",
    "section_index": 34,
    "stanza": 1008
  },
  {
    "role": "code",
    "lines": [
      "define safe-tail | ? x | if (> (list-length | x) 0) (if (> (list-length | x) 1) (tail | x) (vector | vector)) (vector | vector);"
    ],
    "code": "21101321010010030232110032100110302321111322113221001000302321001103320332211113221132210010003023210011033213322100011130232100110332210000302321000033322100003023210000332233",
    "parse": [
      "define",
      "safe-tail",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            ">",
            [
              "list-length",
              [
                -1,
                "x"
              ]
            ],
            0
          ],
          [
            "if",
            [
              ">",
              [
                "list-length",
                [
                  -1,
                  "x"
                ]
              ],
              1
            ],
            [
              "tail",
              [
                -1,
                "x"
              ]
            ],
            [
              "vector",
              [
                -1,
                "vector"
              ]
            ]
          ],
          [
            "vector",
            [
              -1,
              "vector"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1009
  },
  {
    "role": "code",
    "lines": [
      "define safe-head | ? x | if (> (list-length | x) 0) (head | x) (vector);"
    ],
    "code": "211013210100101302321100321001103023211113221132210010003023210011033203322100010130232100110332210000332233",
    "parse": [
      "define",
      "safe-head",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            ">",
            [
              "list-length",
              [
                -1,
                "x"
              ]
            ],
            0
          ],
          [
            "head",
            [
              -1,
              "x"
            ]
          ],
          [
            "vector"
          ]
        ]
      ]
    ],
    "stanza": 1010
  },
  {
    "role": "code",
    "lines": [
      "define tape-read | ? tape | let ((x (second | tape))) (if (> (list-length | x) 0) (head | x) (vector));"
    ],
    "code": "2110132101001103023211003210100111302321011000322210011032210011013023210100111333322111132211322100100030232100110332033221000101302321001103322100003332233",
    "parse": [
      "define",
      "tape-read",
      [
        -1,
        "?",
        "tape",
        [
          -1,
          "let",
          [
            [
              "x",
              [
                "second",
                [
                  -1,
                  "tape"
                ]
              ]
            ]
          ],
          [
            "if",
            [
              ">",
              [
                "list-length",
                [
                  -1,
                  "x"
                ]
              ],
              0
            ],
            [
              "head",
              [
                -1,
                "x"
              ]
            ],
            [
              "vector"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1011
  },
  {
    "role": "code",
    "lines": [
      "define tape-transition | lambda (tape shift value) (if (= (shift) 1) (pair (prepend (value) (first | tape)) (safe-tail | second | tape)) (if (= (shift) 0) (pair (safe-tail | first | tape) (prepend (safe-head | first | tape) (prepend (value) (safe-tail | second | tape)))) (pair (first | tape) (prepend (value) (safe-tail | second | tape)))));"
    ],
    "code": "2110132101010003023211010322101001113210101001321010101033221111322103221010100133213322111111322100101032210101010332210011003023210100111333221010010030232100110130232101001113332211113221032210101001332033221111113221010010030232100110030232101001113322100101032210100101302321001100302321010011133221001010322101010103322101001003023210011013023210100111333332211111132210011003023210100111332210010103221010101033221010010030232100110130232101001113333332233",
    "parse": [
      "define",
      "tape-transition",
      [
        -1,
        "lambda",
        [
          "tape",
          "shift",
          "value"
        ],
        [
          "if",
          [
            "=",
            [
              "shift"
            ],
            1
          ],
          [
            "pair",
            [
              "prepend",
              [
                "value"
              ],
              [
                "first",
                [
                  -1,
                  "tape"
                ]
              ]
            ],
            [
              "safe-tail",
              [
                -1,
                "second",
                [
                  -1,
                  "tape"
                ]
              ]
            ]
          ],
          [
            "if",
            [
              "=",
              [
                "shift"
              ],
              0
            ],
            [
              "pair",
              [
                "safe-tail",
                [
                  -1,
                  "first",
                  [
                    -1,
                    "tape"
                  ]
                ]
              ],
              [
                "prepend",
                [
                  "safe-head",
                  [
                    -1,
                    "first",
                    [
                      -1,
                      "tape"
                    ]
                  ]
                ],
                [
                  "prepend",
                  [
                    "value"
                  ],
                  [
                    "safe-tail",
                    [
                      -1,
                      "second",
                      [
                        -1,
                        "tape"
                      ]
                    ]
                  ]
                ]
              ]
            ],
            [
              "pair",
              [
                "first",
                [
                  -1,
                  "tape"
                ]
              ],
              [
                "prepend",
                [
                  "value"
                ],
                [
                  "safe-tail",
                  [
                    -1,
                    "second",
                    [
                      -1,
                      "tape"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1012
  },
  {
    "role": "code",
    "lines": [
      "define turing | lambda (machine current last tape) (if (= (current) (last)) (tape) (let ((next (machine (current) (tape-read | tape)))) (turing (machine) (list-ref (next) 0) (last) (tape-transition (tape) (list-ref (next) 1) (list-ref (next) 2)))));"
    ],
    "code": "21101321010101130232110103221010110032101011013210110103210100111332211113221032210101101332210110103332210100111332210110003222101011103221010110032210101101332210100110302321010011133333221010101132210101100332210010013221010111033203322101101033221010100032210100111332210010013221010111033213322100100132210101110332103333332233",
    "parse": [
      "define",
      "turing",
      [
        -1,
        "lambda",
        [
          "machine",
          "current",
          "last",
          "tape"
        ],
        [
          "if",
          [
            "=",
            [
              "current"
            ],
            [
              "last"
            ]
          ],
          [
            "tape"
          ],
          [
            "let",
            [
              [
                "next",
                [
                  "machine",
                  [
                    "current"
                  ],
                  [
                    "tape-read",
                    [
                      -1,
                      "tape"
                    ]
                  ]
                ]
              ]
            ],
            [
              "turing",
              [
                "machine"
              ],
              [
                "list-ref",
                [
                  "next"
                ],
                0
              ],
              [
                "last"
              ],
              [
                "tape-transition",
                [
                  "tape"
                ],
                [
                  "list-ref",
                  [
                    "next"
                  ],
                  1
                ],
                [
                  "list-ref",
                  [
                    "next"
                  ],
                  2
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1013
  },
  {
    "role": "code",
    "lines": [
      "define make-tape | ? x | pair (vector) (x);"
    ],
    "code": "2110132101011113023211003210011030232111111322100003322100110332233",
    "parse": [
      "define",
      "make-tape",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "pair",
          [
            "vector"
          ],
          [
            "x"
          ]
        ]
      ]
    ],
    "stanza": 1014
  },
  {
    "role": "code",
    "lines": [
      "define remove-trail | ? x | ? lst | if (> (list-length | lst) 0) (if (equal (last | lst) (x)) (remove-trail (x) (except-last | lst)) (lst)) (lst);"
    ],
    "code": "21101321011000030232110032100110302321100321000110302321111322113221001000302321000110332033221111322100032210110103023210001103322100110333221011000032210011033221011011302321000110333221000110333221000110332233",
    "parse": [
      "define",
      "remove-trail",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "lst",
          [
            -1,
            "if",
            [
              ">",
              [
                "list-length",
                [
                  -1,
                  "lst"
                ]
              ],
              0
            ],
            [
              "if",
              [
                "equal",
                [
                  "last",
                  [
                    -1,
                    "lst"
                  ]
                ],
                [
                  "x"
                ]
              ],
              [
                "remove-trail",
                [
                  "x"
                ],
                [
                  "except-last",
                  [
                    -1,
                    "lst"
                  ]
                ]
              ],
              [
                "lst"
              ]
            ],
            [
              "lst"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1015
  },
  {
    "role": "code",
    "lines": [
      "define extract-tape | ? x | remove-trail (vector) (second | x);"
    ],
    "code": "211013210110001302321100321001103023210110000322100003322100110130232100110332233",
    "parse": [
      "define",
      "extract-tape",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "remove-trail",
          [
            "vector"
          ],
          [
            "second",
            [
              -1,
              "x"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1016
  },
  {
    "role": "code",
    "lines": [
      "define tm-binary-increment | make-hash | vector (pair right (make-hash | vector (pair 0 (vector right 1 0)) (pair 1 (vector right 1 1)) (pair (vector) (vector inc 0 (vector))))) (pair inc (make-hash | vector (pair 0 (vector noinc 0 1)) (pair 1 (vector inc 0 0)) (pair (vector) (vector halt 2 1)))) (pair noinc (make-hash | vector (pair 0 (vector noinc 0 0)) (pair 1 (vector noinc 0 1)) (pair (vector) (vector halt 1 (vector))))) (pair halt (make-hash | vector));"
    ],
    "code
    "parse": [
      "define",
      "tm-binary-increment",
      [
        -1,
        "make-hash",
        [
          -1,
          "vector",
          [
            "pair",
            "right",
            [
              "make-hash",
              [
                -1,
                "vector",
                [
                  "pair",
                  0,
                  [
                    "vector",
                    "right",
                    1,
                    0
                  ]
                ],
                [
                  "pair",
                  1,
                  [
                    "vector",
                    "right",
                    1,
                    1
                  ]
                ],
                [
                  "pair",
                  [
                    "vector"
                  ],
                  [
                    "vector",
                    "inc",
                    0,
                    [
                      "vector"
                    ]
                  ]
                ]
              ]
            ]
          ],
          [
            "pair",
            "inc",
            [
              "make-hash",
              [
                -1,
                "vector",
                [
                  "pair",
                  0,
                  [
                    "vector",
                    "noinc",
                    0,
                    1
                  ]
                ],
                [
                  "pair",
                  1,
                  [
                    "vector",
                    "inc",
                    0,
                    0
                  ]
                ],
                [
                  "pair",
                  [
                    "vector"
                  ],
                  [
                    "vector",
                    "halt",
                    2,
                    1
                  ]
                ]
              ]
            ]
          ],
          [
            "pair",
            "noinc",
            [
              "make-hash",
              [
                -1,
                "vector",
                [
                  "pair",
                  0,
                  [
                    "vector",
                    "noinc",
                    0,
                    0
                  ]
                ],
                [
                  "pair",
                  1,
                  [
                    "vector",
                    "noinc",
                    0,
                    1
                  ]
                ],
                [
                  "pair",
                  [
                    "vector"
                  ],
                  [
                    "vector",
                    "halt",
                    1,
                    [
                      "vector"
                    ]
                  ]
                ]
              ]
            ]
          ],
          [
            "pair",
            "halt",
            [
              "make-hash",
              [
                -1,
                "vector"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1017
  },
  {
    "role": "code",
    "lines": [
      "list= (extract-tape | turing (tm-binary-increment) right halt (make-tape | vector 1 0 0 1)) (vector 1 0 1 0);"
    ],
    "code": "21001011322101100013023210101011322101100103321011001132101101103221010111130232100003213203203213332210000321320321320332233",
    "parse": [
      "list=",
      [
        "extract-tape",
        [
          -1,
          "turing",
          [
            "tm-binary-increment"
          ],
          "right",
          "halt",
          [
            "make-tape",
            [
              -1,
              "vector",
              1,
              0,
              0,
              1
            ]
          ]
        ]
      ],
      [
        "vector",
        1,
        0,
        1,
        0
      ]
    ],
    "stanza": 1018
  },
  {
    "role": "code",
    "lines": [
      "list= (extract-tape | turing (tm-binary-increment) right halt (make-tape | vector 1 1 1)) (vector 1 0 0 0);"
    ],
    "code": "21001011322101100013023210101011322101100103321011001132101101103221010111130232100003213213213332210000321320320320332233",
    "parse": [
      "list=",
      [
        "extract-tape",
        [
          -1,
          "turing",
          [
            "tm-binary-increment"
          ],
          "right",
          "halt",
          [
            "make-tape",
            [
              -1,
              "vector",
              1,
              1,
              1
            ]
          ]
        ]
      ],
      [
        "vector",
        1,
        0,
        0,
        0
      ]
    ],
    "stanza": 1019
  },
  {
    "role": "code",
    "lines": [
      "list= (extract-tape | turing (tm-binary-increment) right halt (make-tape | vector 1 1 1 0 0 0 1 1 1)) (vector 1 1 1 0 0 1 0 0 0);"
    ],
    "code": "21001011322101100013023210101011322101100103321011001132101101103221010111130232100003213213213203203203213213213332210000321321321320320321320320320332233",
    "parse": [
      "list=",
      [
        "extract-tape",
        [
          -1,
          "turing",
          [
            "tm-binary-increment"
          ],
          "right",
          "halt",
          [
            "make-tape",
            [
              -1,
              "vector",
              1,
              1,
              1,
              0,
              0,
              0,
              1,
              1,
              1
            ]
          ]
        ]
      ],
      [
        "vector",
        1,
        1,
        1,
        0,
        0,
        1,
        0,
        0,
        0
      ]
    ],
    "stanza": 1020
  },
  {
    "role": "file",
    "lines": [
      "== COS_NewType =="
    ],
    "stanza": 1021
  },
  {
    "role": "comment",
    "lines": [
      "# OBJECT introduce simple form of typing, for ease of documentation.",
      "# An object is simply a function that takes an argument.",
      "# The argument is the method to call on the object.",
      "# Types are here taken to be just the existence of a particular method,",
      "# with that method returning an object of the appropriate type."
    ],
    "section_description": "introduce simple form of typing, for ease of documentation.",
    "section_category": "OBJECT",
    "section_index": 35,
    "stanza": 1022
  },
  {
    "role": "code",
    "lines": [
      "define make-integer",
      "  (lambda (v)",
      "    (lambda (x)",
      "      (if (= (x) int)",
      "      (v)",
      "      0)));"
    ],
    "code": "211013210110111322110103221010013322110103221001103322111132210322100110332101110003322101001332033332233",
    "parse": [
      "define",
      "make-integer",
      [
        "lambda",
        [
          "v"
        ],
        [
          "lambda",
          [
            "x"
          ],
          [
            "if",
            [
              "=",
              [
                "x"
              ],
              "int"
            ],
            [
              "v"
            ],
            0
          ]
        ]
      ]
    ],
    "stanza": 1023
  },
  {
    "role": "code",
    "lines": [
      "define objectify",
      "  (? x ",
      "     (if (number? (x))",
      "     (make-integer (x))",
      "     (x)));"
    ],
    "code": "21101321011100132211003210011032211113221100032210011033322101101113221001103332210011033332233",
    "parse": [
      "define",
      "objectify",
      [
        "?",
        "x",
        [
          "if",
          [
            "number?",
            [
              "x"
            ]
          ],
          [
            "make-integer",
            [
              "x"
            ]
          ],
          [
            "x"
          ]
        ]
      ]
    ],
    "stanza": 1024
  },
  {
    "role": "code",
    "lines": [
      "define instanceof",
      "  (lambda (T t)",
      "    (if (number? (t))",
      "    (= (T) int)",
      "    (not (number? ((objectify (t)) (T))))));"
    ],
    "code": "211013210111010322110103221011101132101111003322111132211000322101111003332210322101110113321011100033221003221100032221011100132210111100333221011101133333332233",
    "parse": [
      "define",
      "instanceof",
      [
        "lambda",
        [
          "T",
          "t"
        ],
        [
          "if",
          [
            "number?",
            [
              "t"
            ]
          ],
          [
            "=",
            [
              "T"
            ],
            "int"
          ],
          [
            "not",
            [
              "number?",
              [
                [
                  "objectify",
                  [
                    "t"
                  ]
                ],
                [
                  "T"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1025
  },
  {
    "role": "comment",
    "lines": [
      "# add version of lambda that allows types to be declared"
    ],
    "stanza": 1026
  },
  {
    "role": "code",
    "lines": [
      "define prev-translate (translate);"
    ],
    "code": "2110132101110032211001332233",
    "parse": [
      "define",
      "prev-translate",
      [
        "translate"
      ]
    ],
    "stanza": 1027
  },
  {
    "role": "code",
    "lines": [
      "define translate",
      "  (let ((prev (prev-translate)))",
      "    (? x",
      "      (if (number? (x))",
      "        (prev (x))",
      "        (if (= (head (x)) lambda)",
      "          (let ((formals (head (tail (x))))",
      "                (body (head (tail (tail (x))))))",
      "            (if (> (list-length (formals)) 0)",
      "        (if (number? (last (formals)))",
      "            (translate",
      "             (vector",
      "              lambda",
      "              (except-last (formals))",
      "              (vector ? (last (formals)) (body))))",
      "            (let ((formal-name (first (last (formals))))",
      "              (formal-type (second (last (formals)))))",
      "              (translate",
      "               (vector",
      "            lambda",
      "            (except-last (formals))",
      "            (vector ",
      "             ? ",
      "             (formal-name) ",
      "             (vector ",
      "              let",
      "              (vector (vector ",
      "                   (formal-name) ",
      "                   (vector",
      "                    (vector objectify (vector (formal-name)))",
      "                    (formal-type))))",
      "              (body)))))))",
      "        (translate (body))))",
      "          (prev (x))))));"
    ],
    "code": "21101321100132210110003222101110132210111003333221100321001103221111322110003221001103332210111013221001103332211113221032210001013221001103332110103322101100032221011110322100010132210001113221001103333322101011132210001013221000111322100011132210011033333332211113221132210010003221011110333203322111132211000322101101032210111103333221100132210000321101032210110113221011110333221000032110032210110103221011110333221010111333332210110003222101111013221001100322101101032210111103333322101111103221001101322101101032210111103333332211001322100003211010322101101132210111103332210000321100322101111013322100003210110003221000032210000322101111013322100003221000032101110013221000032210111101333322101111103333322101011133333333221100132210101113333322101110132210011033333332233",
    "parse": [
      "define",
      "translate",
      [
        "let",
        [
          [
            "prev",
            [
              "prev-translate"
            ]
          ]
        ],
        [
          "?",
          "x",
          [
            "if",
            [
              "number?",
              [
                "x"
              ]
            ],
            [
              "prev",
              [
                "x"
              ]
            ],
            [
              "if",
              [
                "=",
                [
                  "head",
                  [
                    "x"
                  ]
                ],
                "lambda"
              ],
              [
                "let",
                [
                  [
                    "formals",
                    [
                      "head",
                      [
                        "tail",
                        [
                          "x"
                        ]
                      ]
                    ]
                  ],
                  [
                    "body",
                    [
                      "head",
                      [
                        "tail",
                        [
                          "tail",
                          [
                            "x"
                          ]
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  "if",
                  [
                    ">",
                    [
                      "list-length",
                      [
                        "formals"
                      ]
                    ],
                    0
                  ],
                  [
                    "if",
                    [
                      "number?",
                      [
                        "last",
                        [
                          "formals"
                        ]
                      ]
                    ],
                    [
                      "translate",
                      [
                        "vector",
                        "lambda",
                        [
                          "except-last",
                          [
                            "formals"
                          ]
                        ],
                        [
                          "vector",
                          "?",
                          [
                            "last",
                            [
                              "formals"
                            ]
                          ],
                          [
                            "body"
                          ]
                        ]
                      ]
                    ],
                    [
                      "let",
                      [
                        [
                          "formal-name",
                          [
                            "first",
                            [
                              "last",
                              [
                                "formals"
                              ]
                            ]
                          ]
                        ],
                        [
                          "formal-type",
                          [
                            "second",
                            [
                              "last",
                              [
                                "formals"
                              ]
                            ]
                          ]
                        ]
                      ],
                      [
                        "translate",
                        [
                          "vector",
                          "lambda",
                          [
                            "except-last",
                            [
                              "formals"
                            ]
                          ],
                          [
                            "vector",
                            "?",
                            [
                              "formal-name"
                            ],
                            [
                              "vector",
                              "let",
                              [
                                "vector",
                                [
                                  "vector",
                                  [
                                    "formal-name"
                                  ],
                                  [
                                    "vector",
                                    [
                                      "vector",
                                      "objectify",
                                      [
                                        "vector",
                                        [
                                          "formal-name"
                                        ]
                                      ]
                                    ],
                                    [
                                      "formal-type"
                                    ]
                                  ]
                                ]
                              ],
                              [
                                "body"
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ],
                  [
                    "translate",
                    [
                      "body"
                    ]
                  ]
                ]
              ],
              [
                "prev",
                [
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1028
  },
  {
    "role": "comment",
    "lines": [
      "# add conditional form"
    ],
    "stanza": 1029
  },
  {
    "role": "code",
    "lines": [
      "define prev-translate (translate);"
    ],
    "code": "2110132101110032211001332233",
    "parse": [
      "define",
      "prev-translate",
      [
        "translate"
      ]
    ],
    "stanza": 1030
  },
  {
    "role": "code",
    "lines": [
      "define translate",
      "  (let ((prev (prev-translate)))",
      "    (? x",
      "      (if (number? (x))",
      "        (prev (x))",
      "        (if (= (head (x)) cond)",
      "          (let ((cnd (head (tail (x))))",
      "                (rem (tail (tail (x)))))",
      "            (if (> (list-length (rem)) 0)",
      "        (translate",
      "         (vector",
      "                  if",
      "          (first (cnd))",
      "          (second (cnd))",
      "          (prepend cond (rem))))",
      "        (translate (cnd))))",
      "          (prev (x))))));"
    ],
    "code": "211013211001322101100032221011101322101110033332211003210011032211113221100032210011033322101110132210011033322111132210322100010132210011033321011111133221011000322211000000322100010132210001113221001103333322110000013221000111322100011132210011033333322111132211322100100032211000001333203322110013221000032111132210011003221100000033322100110132211000000333221001010321011111132211000001333332211001322110000003333322101110132210011033333332233",
    "parse": [
      "define",
      "translate",
      [
        "let",
        [
          [
            "prev",
            [
              "prev-translate"
            ]
          ]
        ],
        [
          "?",
          "x",
          [
            "if",
            [
              "number?",
              [
                "x"
              ]
            ],
            [
              "prev",
              [
                "x"
              ]
            ],
            [
              "if",
              [
                "=",
                [
                  "head",
                  [
                    "x"
                  ]
                ],
                "cond"
              ],
              [
                "let",
                [
                  [
                    "cnd",
                    [
                      "head",
                      [
                        "tail",
                        [
                          "x"
                        ]
                      ]
                    ]
                  ],
                  [
                    "rem",
                    [
                      "tail",
                      [
                        "tail",
                        [
                          "x"
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  "if",
                  [
                    ">",
                    [
                      "list-length",
                      [
                        "rem"
                      ]
                    ],
                    0
                  ],
                  [
                    "translate",
                    [
                      "vector",
                      "if",
                      [
                        "first",
                        [
                          "cnd"
                        ]
                      ],
                      [
                        "second",
                        [
                          "cnd"
                        ]
                      ],
                      [
                        "prepend",
                        "cond",
                        [
                          "rem"
                        ]
                      ]
                    ]
                  ],
                  [
                    "translate",
                    [
                      "cnd"
                    ]
                  ]
                ]
              ],
              [
                "prev",
                [
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1031
  },
  {
    "role": "code",
    "lines": [
      "= 99 (cond 99);"
    ],
    "code": "21032110001132210111111321100011332233",
    "parse": [
      "=",
      99,
      [
        "cond",
        99
      ]
    ],
    "stanza": 1032
  },
  {
    "role": "code",
    "lines": [
      "= 8 (cond ((true) 8) 11);"
    ],
    "code": "21032100032210111111322211011033210003321011332233",
    "parse": [
      "=",
      8,
      [
        "cond",
        [
          [
            "true"
          ],
          8
        ],
        11
      ]
    ],
    "stanza": 1033
  },
  {
    "role": "code",
    "lines": [
      "= 11 (cond ((false) 8) 11);"
    ],
    "code": "21032101132210111111322211011133210003321011332233",
    "parse": [
      "=",
      11,
      [
        "cond",
        [
          [
            "false"
          ],
          8
        ],
        11
      ]
    ],
    "stanza": 1034
  },
  {
    "role": "code",
    "lines": [
      "= 7 (cond ((false) 3) ((true) 7) 11);"
    ],
    "code": "2103211132210111111322211011133211332221101103321113321011332233",
    "parse": [
      "=",
      7,
      [
        "cond",
        [
          [
            "false"
          ],
          3
        ],
        [
          [
            "true"
          ],
          7
        ],
        11
      ]
    ],
    "stanza": 1035
  },
  {
    "role": "code",
    "lines": [
      "= 3 (cond ((true) 3) ((true) 7) 11);"
    ],
    "code": "210321132210111111322211011033211332221101103321113321011332233",
    "parse": [
      "=",
      3,
      [
        "cond",
        [
          [
            "true"
          ],
          3
        ],
        [
          [
            "true"
          ],
          7
        ],
        11
      ]
    ],
    "stanza": 1036
  },
  {
    "role": "code",
    "lines": [
      "= 11 (cond ((false) 3) ((false) 7) 11);"
    ],
    "code": "21032101132210111111322211011133211332221101113321113321011332233",
    "parse": [
      "=",
      11,
      [
        "cond",
        [
          [
            "false"
          ],
          3
        ],
        [
          [
            "false"
          ],
          7
        ],
        11
      ]
    ],
    "stanza": 1037
  },
  {
    "role": "code",
    "lines": [
      "define remove-match ",
      "  (lambda (test lst)",
      "    (if (> (list-length (lst)) 0)",
      "    (if (test (head (lst)))",
      "        (remove-match (test) (tail (lst)))",
      "        (prepend (head (lst)) (remove-match (test) (tail (lst)))))",
      "    (lst)));"
    ],
    "code": "211013211000010322110103221100001132100011033221111322113221001000322100011033320332211113221100001132210001013221000110333322110000103221100001133221000111322100011033332210010103221000101322100011033322110000103221100001133221000111322100011033333322100011033332233",
    "parse": [
      "define",
      "remove-match",
      [
        "lambda",
        [
          "test",
          "lst"
        ],
        [
          "if",
          [
            ">",
            [
              "list-length",
              [
                "lst"
              ]
            ],
            0
          ],
          [
            "if",
            [
              "test",
              [
                "head",
                [
                  "lst"
                ]
              ]
            ],
            [
              "remove-match",
              [
                "test"
              ],
              [
                "tail",
                [
                  "lst"
                ]
              ]
            ],
            [
              "prepend",
              [
                "head",
                [
                  "lst"
                ]
              ],
              [
                "remove-match",
                [
                  "test"
                ],
                [
                  "tail",
                  [
                    "lst"
                  ]
                ]
              ]
            ]
          ],
          [
            "lst"
          ]
        ]
      ]
    ],
    "stanza": 1038
  },
  {
    "role": "code",
    "lines": [
      "define remove-element",
      "  (lambda (x) ",
      "    (remove-match (lambda (y) (= (y) (x)))));"
    ],
    "code": "211013211000100322110103221001103322110000103221101032211000133221032211000133221001103333332233",
    "parse": [
      "define",
      "remove-element",
      [
        "lambda",
        [
          "x"
        ],
        [
          "remove-match",
          [
            "lambda",
            [
              "y"
            ],
            [
              "=",
              [
                "y"
              ],
              [
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1039
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 1 2 3 5) (remove-element 4 (vector 1 2 3 4 5));"
    ],
    "code": "2100101132210000321321032113210133221100010032100322100003213210321132100321013332233",
    "parse": [
      "list=",
      [
        "vector",
        1,
        2,
        3,
        5
      ],
      [
        "remove-element",
        4,
        [
          "vector",
          1,
          2,
          3,
          4,
          5
        ]
      ]
    ],
    "stanza": 1040
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 1 2 3 5) (remove-element 4 (vector 1 4 2 4 3 4 5));"
    ],
    "code": "21001011322100003213210321132101332211000100321003221000032132100321032100321132100321013332233",
    "parse": [
      "list=",
      [
        "vector",
        1,
        2,
        3,
        5
      ],
      [
        "remove-element",
        4,
        [
          "vector",
          1,
          4,
          2,
          4,
          3,
          4,
          5
        ]
      ]
    ],
    "stanza": 1041
  },
  {
    "role": "code",
    "lines": [
      "define return",
      "  (lambda (T t)",
      "    (let ((obj (objectify (t))))",
      "      (obj (T))));"
    ],
    "code": "2110132110001013221101032210111011321011110033221011000322211000110322101110013221011110033333221100011032210111011333332233",
    "parse": [
      "define",
      "return",
      [
        "lambda",
        [
          "T",
          "t"
        ],
        [
          "let",
          [
            [
              "obj",
              [
                "objectify",
                [
                  "t"
                ]
              ]
            ]
          ],
          [
            "obj",
            [
              "T"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1042
  },
  {
    "role": "code",
    "lines": [
      "define tester",
      "  (lambda ((x int) (y int))",
      "    (return int (+ (x) (y))));"
    ],
    "code": "2110132110001113221101032221001103210111000332211000132101110003332211000101321011100032210103221001103322110001333332233",
    "parse": [
      "define",
      "tester",
      [
        "lambda",
        [
          [
            "x",
            "int"
          ],
          [
            "y",
            "int"
          ]
        ],
        [
          "return",
          "int",
          [
            "+",
            [
              "x"
            ],
            [
              "y"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1043
  },
  {
    "role": "code",
    "lines": [
      "= 42 (tester (make-integer 10) (make-integer 32));"
    ],
    "code": "210321010103221100011132210110111321010332210110111321000003332233",
    "parse": [
      "=",
      42,
      [
        "tester",
        [
          "make-integer",
          10
        ],
        [
          "make-integer",
          32
        ]
      ]
    ],
    "stanza": 1044
  },
  {
    "role": "code",
    "lines": [
      "= 42 (tester 10 32);"
    ],
    "code": "210321010103221100011132101032100000332233",
    "parse": [
      "=",
      42,
      [
        "tester",
        10,
        32
      ]
    ],
    "stanza": 1045
  },
  {
    "role": "code",
    "lines": [
      "define reflective",
      "  (lambda (f)",
      "    ((lambda (x)",
      "       (f (lambda (y) ((x (x)) (y)))))",
      "     (lambda (x)",
      "       (f (lambda (y) ((x (x)) (y)))))));"
    ],
    "code": "211013211001000322110103221111103322211010322100110332211111032211010322110001332221001103221001103332211000133333322110103221001103322111110322110103221100013322210011032210011033322110001333333332233",
    "parse": [
      "define",
      "reflective",
      [
        "lambda",
        [
          "f"
        ],
        [
          [
            "lambda",
            [
              "x"
            ],
            [
              "f",
              [
                "lambda",
                [
                  "y"
                ],
                [
                  [
                    "x",
                    [
                      "x"
                    ]
                  ],
                  [
                    "y"
                  ]
                ]
              ]
            ]
          ],
          [
            "lambda",
            [
              "x"
            ],
            [
              "f",
              [
                "lambda",
                [
                  "y"
                ],
                [
                  [
                    "x",
                    [
                      "x"
                    ]
                  ],
                  [
                    "y"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1046
  },
  {
    "role": "comment",
    "lines": [
      "# OBJECT an example object -- a 2D point"
    ],
    "section_description": "an example object -- a 2D point",
    "section_category": "OBJECT",
    "section_index": 36,
    "stanza": 1047
  },
  {
    "role": "code",
    "lines": [
      "define point",
      "  (lambda (x y)",
      "    (reflective",
      "     (lambda (self msg)",
      "       (cond ((= (msg) x) (x))",
      "         ((= (msg) y) (y))",
      "         ((= (msg) point) (self))",
      "         ((= (msg) +) ",
      "          (lambda ((p point))",
      "        (point (+ (x) (p x))",
      "               (+ (y) (p y)))))",
      "         ((= (msg) =) ",
      "          (lambda ((p point))",
      "        (and (= (x) (p x))",
      "             (= (y) (p y)))))",
      "         0))));"
    ],
    "code": "21101321100100132211010322100110321100013322110010003221101032210100011321100101033221011111132221032211001010332100110332210011033322210322110010103321100013322110001333222103221100101033211001001332210100011333222103221100101033210103322110103222110000132110010013332211001001322101032210011033221100001321001103332210103221100013322110000132110001333333222103221100101033210332211010322211000013211001001333221013221032210011033221100001321001103332210322110001332211000013211000133333320333332233",
    "parse": [
      "define",
      "point",
      [
        "lambda",
        [
          "x",
          "y"
        ],
        [
          "reflective",
          [
            "lambda",
            [
              "self",
              "msg"
            ],
            [
              "cond",
              [
                [
                  "=",
                  [
                    "msg"
                  ],
                  "x"
                ],
                [
                  "x"
                ]
              ],
              [
                [
                  "=",
                  [
                    "msg"
                  ],
                  "y"
                ],
                [
                  "y"
                ]
              ],
              [
                [
                  "=",
                  [
                    "msg"
                  ],
                  "point"
                ],
                [
                  "self"
                ]
              ],
              [
                [
                  "=",
                  [
                    "msg"
                  ],
                  "+"
                ],
                [
                  "lambda",
                  [
                    [
                      "p",
                      "point"
                    ]
                  ],
                  [
                    "point",
                    [
                      "+",
                      [
                        "x"
                      ],
                      [
                        "p",
                        "x"
                      ]
                    ],
                    [
                      "+",
                      [
                        "y"
                      ],
                      [
                        "p",
                        "y"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "msg"
                  ],
                  "="
                ],
                [
                  "lambda",
                  [
                    [
                      "p",
                      "point"
                    ]
                  ],
                  [
                    "and",
                    [
                      "=",
                      [
                        "x"
                      ],
                      [
                        "p",
                        "x"
                      ]
                    ],
                    [
                      "=",
                      [
                        "y"
                      ],
                      [
                        "p",
                        "y"
                      ]
                    ]
                  ]
                ]
              ],
              0
            ]
          ]
        ]
      ]
    ],
    "stanza": 1048
  },
  {
    "role": "code",
    "lines": [
      "define point1 (point 1 11);"
    ],
    "code": "21101321100101132211001001321321011332233",
    "parse": [
      "define",
      "point1",
      [
        "point",
        1,
        11
      ]
    ],
    "stanza": 1049
  },
  {
    "role": "code",
    "lines": [
      "define point2 (point 2 22);"
    ],
    "code": "2110132110011003221100100132103210110332233",
    "parse": [
      "define",
      "point2",
      [
        "point",
        2,
        22
      ]
    ],
    "stanza": 1050
  },
  {
    "role": "code",
    "lines": [
      "= 1 (point1 x);"
    ],
    "code": "2103213221100101132100110332233",
    "parse": [
      "=",
      1,
      [
        "point1",
        "x"
      ]
    ],
    "stanza": 1051
  },
  {
    "role": "code",
    "lines": [
      "= 22 (point2 y);"
    ],
    "code": "21032101103221100110032110001332233",
    "parse": [
      "=",
      22,
      [
        "point2",
        "y"
      ]
    ],
    "stanza": 1052
  },
  {
    "role": "code",
    "lines": [
      "= 11 ((point 11 12) x);"
    ],
    "code": "210321011322211001001321011321100332100110332233",
    "parse": [
      "=",
      11,
      [
        [
          "point",
          11,
          12
        ],
        "x"
      ]
    ],
    "stanza": 1053
  },
  {
    "role": "code",
    "lines": [
      "= 11 (((point 11 12) point) x);"
    ],
    "code": "210321011322221100100132101132110033211001001332100110332233",
    "parse": [
      "=",
      11,
      [
        [
          [
            "point",
            11,
            12
          ],
          "point"
        ],
        "x"
      ]
    ],
    "stanza": 1054
  },
  {
    "role": "code",
    "lines": [
      "= 16 (((point 16 17) point) x);"
    ],
    "code": "210321000032222110010013210000321000133211001001332100110332233",
    "parse": [
      "=",
      16,
      [
        [
          [
            "point",
            16,
            17
          ],
          "point"
        ],
        "x"
      ]
    ],
    "stanza": 1055
  },
  {
    "role": "code",
    "lines": [
      "= 33 (point1 + (point2) y);"
    ],
    "code": "210321000013221100101132101032211001100332110001332233",
    "parse": [
      "=",
      33,
      [
        "point1",
        "+",
        [
          "point2"
        ],
        "y"
      ]
    ],
    "stanza": 1056
  },
  {
    "role": "code",
    "lines": [
      "point1 + (point2) = (point 3 33);"
    ],
    "code": "211001011321010322110011003321032211001001321132100001332233",
    "parse": [
      "point1",
      "+",
      [
        "point2"
      ],
      "=",
      [
        "point",
        3,
        33
      ]
    ],
    "stanza": 1057
  },
  {
    "role": "code",
    "lines": [
      "point2 + (point1) = (point 3 33);"
    ],
    "code": "211001100321010322110010113321032211001001321132100001332233",
    "parse": [
      "point2",
      "+",
      [
        "point1"
      ],
      "=",
      [
        "point",
        3,
        33
      ]
    ],
    "stanza": 1058
  },
  {
    "role": "code",
    "lines": [
      "(point 100 200) + (point 200 100) = (point 300 300);"
    ],
    "code": "22110010013211001003211001000332101032211001001321100100032110010033210322110010013210010110032100101100332233",
    "parse": [
      [
        "point",
        100,
        200
      ],
      "+",
      [
        "point",
        200,
        100
      ],
      "=",
      [
        "point",
        300,
        300
      ]
    ],
    "stanza": 1059
  },
  {
    "role": "code",
    "lines": [
      "instanceof point (point1);"
    ],
    "code": "210111010321100100132211001011332233",
    "parse": [
      "instanceof",
      "point",
      [
        "point1"
      ]
    ],
    "stanza": 1060
  },
  {
    "role": "code",
    "lines": [
      "not (instanceof int (point1));"
    ],
    "code": "2100322101110103210111000322110010113332233",
    "parse": [
      "not",
      [
        "instanceof",
        "int",
        [
          "point1"
        ]
      ]
    ],
    "stanza": 1061
  },
  {
    "role": "code",
    "lines": [
      "instanceof int 5;"
    ],
    "code": "21011101032101110003210132233",
    "parse": [
      "instanceof",
      "int",
      5
    ],
    "stanza": 1062
  },
  {
    "role": "code",
    "lines": [
      "not (instanceof point 5);"
    ],
    "code": "210032210111010321100100132101332233",
    "parse": [
      "not",
      [
        "instanceof",
        "point",
        5
      ]
    ],
    "stanza": 1063
  },
  {
    "role": "comment",
    "lines": [
      "# OBJECT an example object -- a container"
    ],
    "section_description": "an example object -- a container",
    "section_category": "OBJECT",
    "section_index": 37,
    "stanza": 1064
  },
  {
    "role": "code",
    "lines": [
      "define container",
      "  (lambda (x)",
      "    (let ((contents (make-cell (vector))))",
      "      (reflective",
      "       (lambda (self msg)",
      "     (cond ((= (msg) container) (self))",
      "           ((= (msg) inventory) (get! (contents)))",
      "           ((= (msg) add)",
      "        (lambda (x) ",
      "          (if (not (element (x) (get! (contents))))",
      "              (set! (contents) (prepend (x) (get! (contents))))",
      "              (false))))",
      "           ((= (msg) remove)",
      "        (lambda (x)",
      "          (set! (contents) (remove-element (x) (get! (contents))))))",
      "           ((= (msg) =)",
      "        (lambda ((c container))",
      "          (set= (self inventory) (c inventory))))",
      "           0)))));"
    ],
    "code
    "parse": [
      "define",
      "container",
      [
        "lambda",
        [
          "x"
        ],
        [
          "let",
          [
            [
              "contents",
              [
                "make-cell",
                [
                  "vector"
                ]
              ]
            ]
          ],
          [
            "reflective",
            [
              "lambda",
              [
                "self",
                "msg"
              ],
              [
                "cond",
                [
                  [
                    "=",
                    [
                      "msg"
                    ],
                    "container"
                  ],
                  [
                    "self"
                  ]
                ],
                [
                  [
                    "=",
                    [
                      "msg"
                    ],
                    "inventory"
                  ],
                  [
                    "get!",
                    [
                      "contents"
                    ]
                  ]
                ],
                [
                  [
                    "=",
                    [
                      "msg"
                    ],
                    "add"
                  ],
                  [
                    "lambda",
                    [
                      "x"
                    ],
                    [
                      "if",
                      [
                        "not",
                        [
                          "element",
                          [
                            "x"
                          ],
                          [
                            "get!",
                            [
                              "contents"
                            ]
                          ]
                        ]
                      ],
                      [
                        "set!",
                        [
                          "contents"
                        ],
                        [
                          "prepend",
                          [
                            "x"
                          ],
                          [
                            "get!",
                            [
                              "contents"
                            ]
                          ]
                        ]
                      ],
                      [
                        "false"
                      ]
                    ]
                  ]
                ],
                [
                  [
                    "=",
                    [
                      "msg"
                    ],
                    "remove"
                  ],
                  [
                    "lambda",
                    [
                      "x"
                    ],
                    [
                      "set!",
                      [
                        "contents"
                      ],
                      [
                        "remove-element",
                        [
                          "x"
                        ],
                        [
                          "get!",
                          [
                            "contents"
                          ]
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  [
                    "=",
                    [
                      "msg"
                    ],
                    "="
                  ],
                  [
                    "lambda",
                    [
                      [
                        "c",
                        "container"
                      ]
                    ],
                    [
                      "set=",
                      [
                        "self",
                        "inventory"
                      ],
                      [
                        "c",
                        "inventory"
                      ]
                    ]
                  ]
                ],
                0
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1065
  },
  {
    "role": "comment",
    "lines": [
      "# Can pass anything to container function to create an object",
      "# Should eventually use a consistent protocol for all objects,",
      "# but all this stuff is still in flux"
    ],
    "stanza": 1066
  },
  {
    "role": "code",
    "lines": [
      "define pocket (container new);"
    ],
    "code": "211013211010001322110011013211010010332233",
    "parse": [
      "define",
      "pocket",
      [
        "container",
        "new"
      ]
    ],
    "stanza": 1067
  },
  {
    "role": "code",
    "lines": [
      "pocket add 77;"
    ],
    "code": "21101000132110111132100110132233",
    "parse": [
      "pocket",
      "add",
      77
    ],
    "stanza": 1068
  },
  {
    "role": "code",
    "lines": [
      "pocket add 88;"
    ],
    "code": "21101000132110111132101100032233",
    "parse": [
      "pocket",
      "add",
      88
    ],
    "stanza": 1069
  },
  {
    "role": "code",
    "lines": [
      "pocket add 99;"
    ],
    "code": "21101000132110111132110001132233",
    "parse": [
      "pocket",
      "add",
      99
    ],
    "stanza": 1070
  },
  {
    "role": "code",
    "lines": [
      "set= (pocket inventory) (vector 77 88 99);"
    ],
    "code": "21111101322110100013211001111332210000321001101321011000321100011332233",
    "parse": [
      "set=",
      [
        "pocket",
        "inventory"
      ],
      [
        "vector",
        77,
        88,
        99
      ]
    ],
    "stanza": 1071
  },
  {
    "role": "code",
    "lines": [
      "pocket remove 88;"
    ],
    "code": "211010001321101000032101100032233",
    "parse": [
      "pocket",
      "remove",
      88
    ],
    "stanza": 1072
  },
  {
    "role": "code",
    "lines": [
      "set= (pocket inventory) (vector 77 99);"
    ],
    "code": "21111101322110100013211001111332210000321001101321100011332233",
    "parse": [
      "set=",
      [
        "pocket",
        "inventory"
      ],
      [
        "vector",
        77,
        99
      ]
    ],
    "stanza": 1073
  },
  {
    "role": "code",
    "lines": [
      "define pocket2 (container new);"
    ],
    "code": "211013211010011322110011013211010010332233",
    "parse": [
      "define",
      "pocket2",
      [
        "container",
        "new"
      ]
    ],
    "stanza": 1074
  },
  {
    "role": "code",
    "lines": [
      "pocket2 add 77;"
    ],
    "code": "21101001132110111132100110132233",
    "parse": [
      "pocket2",
      "add",
      77
    ],
    "stanza": 1075
  },
  {
    "role": "code",
    "lines": [
      "pocket2 add 99;"
    ],
    "code": "21101001132110111132110001132233",
    "parse": [
      "pocket2",
      "add",
      99
    ],
    "stanza": 1076
  },
  {
    "role": "code",
    "lines": [
      "pocket2 = (pocket);"
    ],
    "code": "211010011321032211010001332233",
    "parse": [
      "pocket2",
      "=",
      [
        "pocket"
      ]
    ],
    "stanza": 1077
  },
  {
    "role": "comment",
    "lines": [
      "# OBJECT expressing inheritance"
    ],
    "section_description": "expressing inheritance",
    "section_category": "OBJECT",
    "section_index": 38,
    "stanza": 1078
  },
  {
    "role": "comment",
    "lines": [
      "# counter-container adds one method to container: count"
    ],
    "stanza": 1079
  },
  {
    "role": "code",
    "lines": [
      "define counter-container",
      "  (lambda (x)",
      "    (let ((super (container new)))",
      "      (reflective",
      "       (lambda (self msg)",
      "     (cond ((= (msg) counter-container) (self))",
      "           ((= (msg) count) (list-length (super inventory)))",
      "           (super (msg)))))));"
    ],
    "code": "211013211010100322110103221001103322101100032221101010132211001101321101001033332211001000322110103221010001132110010103322101111113222103221100101033211010100332210100011333222103221100101033211010110332210010003221101010132110011113333221101010132211001010333333332233",
    "parse": [
      "define",
      "counter-container",
      [
        "lambda",
        [
          "x"
        ],
        [
          "let",
          [
            [
              "super",
              [
                "container",
                "new"
              ]
            ]
          ],
          [
            "reflective",
            [
              "lambda",
              [
                "self",
                "msg"
              ],
              [
                "cond",
                [
                  [
                    "=",
                    [
                      "msg"
                    ],
                    "counter-container"
                  ],
                  [
                    "self"
                  ]
                ],
                [
                  [
                    "=",
                    [
                      "msg"
                    ],
                    "count"
                  ],
                  [
                    "list-length",
                    [
                      "super",
                      "inventory"
                    ]
                  ]
                ],
                [
                  "super",
                  [
                    "msg"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1080
  },
  {
    "role": "code",
    "lines": [
      "define cc1 (counter-container new);"
    ],
    "code": "211013211010111322110101003211010010332233",
    "parse": [
      "define",
      "cc1",
      [
        "counter-container",
        "new"
      ]
    ],
    "stanza": 1081
  },
  {
    "role": "code",
    "lines": [
      "= 0 (cc1 count);"
    ],
    "code": "210320322110101113211010110332233",
    "parse": [
      "=",
      0,
      [
        "cc1",
        "count"
      ]
    ],
    "stanza": 1082
  },
  {
    "role": "code",
    "lines": [
      "cc1 add 4;"
    ],
    "code": "2110101113211011113210032233",
    "parse": [
      "cc1",
      "add",
      4
    ],
    "stanza": 1083
  },
  {
    "role": "code",
    "lines": [
      "= 1 (cc1 count);"
    ],
    "code": "210321322110101113211010110332233",
    "parse": [
      "=",
      1,
      [
        "cc1",
        "count"
      ]
    ],
    "stanza": 1084
  },
  {
    "role": "code",
    "lines": [
      "cc1 add 5;"
    ],
    "code": "2110101113211011113210132233",
    "parse": [
      "cc1",
      "add",
      5
    ],
    "stanza": 1085
  },
  {
    "role": "code",
    "lines": [
      "= 2 (cc1 count);"
    ],
    "code": "2103210322110101113211010110332233",
    "parse": [
      "=",
      2,
      [
        "cc1",
        "count"
      ]
    ],
    "stanza": 1086
  },
  {
    "role": "comment",
    "lines": [
      "# OBJECT adding a special form for classes"
    ],
    "section_description": "adding a special form for classes",
    "section_category": "OBJECT",
    "section_index": 39,
    "stanza": 1087
  },
  {
    "role": "comment",
    "lines": [
      "# need a bunch of extra machinery first, will push this",
      "# back into previous sections eventually, and simplify"
    ],
    "stanza": 1088
  },
  {
    "role": "code",
    "lines": [
      "define list-append",
      "  (lambda (lst1 lst2)",
      "    (if (> (list-length (lst1)) 0)",
      "    (list-append (except-last (lst1))",
      "             (prepend (last (lst1)) (lst2)))",
      "    (lst2)));"
    ],
    "code": "2110132110110003221101032211011001321101101033221111322113221001000322110110013332033221101100032210110113221101100133322100101032210110103221101100133322110110103333221101101033332233",
    "parse": [
      "define",
      "list-append",
      [
        "lambda",
        [
          "lst1",
          "lst2"
        ],
        [
          "if",
          [
            ">",
            [
              "list-length",
              [
                "lst1"
              ]
            ],
            0
          ],
          [
            "list-append",
            [
              "except-last",
              [
                "lst1"
              ]
            ],
            [
              "prepend",
              [
                "last",
                [
                  "lst1"
                ]
              ],
              [
                "lst2"
              ]
            ]
          ],
          [
            "lst2"
          ]
        ]
      ]
    ],
    "stanza": 1089
  },
  {
    "role": "code",
    "lines": [
      "list= (list-append (vector 1 2 3) (vector 4 5 6)) (vector 1 2 3 4 5 6);"
    ],
    "code": "21001011322110110003221000032132103211332210000321003210132110333221000032132103211321003210132110332233",
    "parse": [
      "list=",
      [
        "list-append",
        [
          "vector",
          1,
          2,
          3
        ],
        [
          "vector",
          4,
          5,
          6
        ]
      ],
      [
        "vector",
        1,
        2,
        3,
        4,
        5,
        6
      ]
    ],
    "stanza": 1090
  },
  {
    "role": "code",
    "lines": [
      "define append",
      "  (? x",
      "     (? lst",
      "    (if (> (list-length (lst)) 0)",
      "        (prepend (head (lst)) (append (x) (tail (lst))))",
      "        (vector (x)))));"
    ],
    "code": "21101321101101132211003210011032211003210001103221111322113221001000322100011033320332210010103221000101322100011033322110110113221001103322100011132210001103333322100003221001103333332233",
    "parse": [
      "define",
      "append",
      [
        "?",
        "x",
        [
          "?",
          "lst",
          [
            "if",
            [
              ">",
              [
                "list-length",
                [
                  "lst"
                ]
              ],
              0
            ],
            [
              "prepend",
              [
                "head",
                [
                  "lst"
                ]
              ],
              [
                "append",
                [
                  "x"
                ],
                [
                  "tail",
                  [
                    "lst"
                  ]
                ]
              ]
            ],
            [
              "vector",
              [
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1091
  },
  {
    "role": "code",
    "lines": [
      "list= (append 5 (vector 1 2)) (vector 1 2 5);"
    ],
    "code": "2100101132211011011321013221000032132103332210000321321032101332233",
    "parse": [
      "list=",
      [
        "append",
        5,
        [
          "vector",
          1,
          2
        ]
      ],
      [
        "vector",
        1,
        2,
        5
      ]
    ],
    "stanza": 1092
  },
  {
    "role": "code",
    "lines": [
      "define select-match ",
      "  (lambda (test lst)",
      "    (if (> (list-length (lst)) 0)",
      "    (if (test (head (lst)))",
      "        (prepend (head (lst)) (select-match (test) (tail (lst))))",
      "        (select-match (test) (tail (lst))))",
      "    (lst)));"
    ],
    "code": "211013211011100322110103221100001132100011033221111322113221001000322100011033320332211113221100001132210001013221000110333322100101032210001013221000110333221101110032211000011332210001113221000110333332211011100322110000113322100011132210001103333322100011033332233",
    "parse": [
      "define",
      "select-match",
      [
        "lambda",
        [
          "test",
          "lst"
        ],
        [
          "if",
          [
            ">",
            [
              "list-length",
              [
                "lst"
              ]
            ],
            0
          ],
          [
            "if",
            [
              "test",
              [
                "head",
                [
                  "lst"
                ]
              ]
            ],
            [
              "prepend",
              [
                "head",
                [
                  "lst"
                ]
              ],
              [
                "select-match",
                [
                  "test"
                ],
                [
                  "tail",
                  [
                    "lst"
                  ]
                ]
              ]
            ],
            [
              "select-match",
              [
                "test"
              ],
              [
                "tail",
                [
                  "lst"
                ]
              ]
            ]
          ],
          [
            "lst"
          ]
        ]
      ]
    ],
    "stanza": 1093
  },
  {
    "role": "code",
    "lines": [
      "define unique",
      "  (let ((store (make-cell 0)))",
      "    (lambda (x)",
      "      (let ((id (get! (store))))",
      "    (begin",
      "      (set! (store) (+ (id) 1))",
      "      (id)))));"
    ],
    "code": "2110132110111013221011000322211011110322110113203333221101032210011033221011000322211011111322111013221101111033333221000101132211100322110111103322101032211011111332133322110111113333332233",
    "parse": [
      "define",
      "unique",
      [
        "let",
        [
          [
            "store",
            [
              "make-cell",
              0
            ]
          ]
        ],
        [
          "lambda",
          [
            "x"
          ],
          [
            "let",
            [
              [
                "id",
                [
                  "get!",
                  [
                    "store"
                  ]
                ]
              ]
            ],
            [
              "begin",
              [
                "set!",
                [
                  "store"
                ],
                [
                  "+",
                  [
                    "id"
                  ],
                  1
                ]
              ],
              [
                "id"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1094
  },
  {
    "role": "code",
    "lines": [
      "= (unique new) 0;"
    ],
    "code": "210322110111013211010010332032233",
    "parse": [
      "=",
      [
        "unique",
        "new"
      ],
      0
    ],
    "stanza": 1095
  },
  {
    "role": "code",
    "lines": [
      "= (unique new) 1;"
    ],
    "code": "210322110111013211010010332132233",
    "parse": [
      "=",
      [
        "unique",
        "new"
      ],
      1
    ],
    "stanza": 1096
  },
  {
    "role": "code",
    "lines": [
      "= (unique new) 2;"
    ],
    "code": "2103221101110132110100103321032233",
    "parse": [
      "=",
      [
        "unique",
        "new"
      ],
      2
    ],
    "stanza": 1097
  },
  {
    "role": "code",
    "lines": [
      "not (= (unique new) (unique new));"
    ],
    "code": "21003221032211011101321101001033221101110132110100103332233",
    "parse": [
      "not",
      [
        "=",
        [
          "unique",
          "new"
        ],
        [
          "unique",
          "new"
        ]
      ]
    ],
    "stanza": 1098
  },
  {
    "role": "code",
    "lines": [
      "define setup-this",
      "  (lambda (this self)",
      "    (if (number? | this)",
      "    (self)",
      "    (this)));"
    ],
    "code": "211013211100000322110103221110000132101000113322111132211000302321110000133221010001133221110000133332233",
    "parse": [
      "define",
      "setup-this",
      [
        "lambda",
        [
          "this",
          "self"
        ],
        [
          "if",
          [
            "number?",
            [
              -1,
              "this"
            ]
          ],
          [
            "self"
          ],
          [
            "this"
          ]
        ]
      ]
    ],
    "stanza": 1099
  },
  {
    "role": "comment",
    "lines": [
      "# okay, here it comes.  don't panic!",
      "# I need to split this up into helpers, and simplify.",
      "# It basically just writes code for classes like we saw in",
      "# a previous section."
    ],
    "stanza": 1100
  },
  {
    "role": "code",
    "lines": [
      "define prev-translate (translate);"
    ],
    "code": "2110132101110032211001332233",
    "parse": [
      "define",
      "prev-translate",
      [
        "translate"
      ]
    ],
    "stanza": 1101
  },
  {
    "role": "code",
    "lines": [
      "define translate",
      "  (let ((prev (prev-translate)))",
      "    (? x",
      "       (if (number? (x))",
      "       (prev (x))",
      "       (if (= (head (x)) class)",
      "           (let ((name (list-ref (x) 1))",
      "             (args (list-ref (x) 2))",
      "             (fields (tail (tail (tail (x))))))",
      "         (translate",
      "          (vector",
      "           define",
      "           (name)",
      "           (vector",
      "            lambda",
      "            (prepend ext-this (args))",
      "            (vector",
      "             let",
      "             (append",
      "              (vector unique-id (vector unique new))",
      "              (map ",
      "               (tail)",
      "               (select-match (? x (= (first (x)) field)) (fields))))",
      "             (vector",
      "              let",
      "              (vector",
      "               (vector",
      "            self",
      "            (vector",
      "             reflective",
      "             (vector",
      "              lambda",
      "              (vector self)",
      "              (vector",
      "               let",
      "               (vector ",
      "                (vector",
      "                 this",
      "                 (vector setup-this ",
      "                     (vector ext-this)",
      "                     (vector self))))",
      "               (vector ",
      "                let",
      "                (vector (vector ignore-this 1))",
      "                (vector",
      "                 lambda",
      "                 (vector method)",
      "                 (list-append",
      "                  (prepend",
      "                   cond",
      "                   (list-append",
      "                (map",
      "                 (? x ",
      "                    (vector",
      "                     (vector = (vector method) (first (x)))",
      "                     (second (x))))",
      "                 (map (tail)",
      "                      (select-match ",
      "                       (? x (= (first (x)) method)) ",
      "                       (fields))))",
      "                (map",
      "                 (? x ",
      "                    (vector",
      "                     (vector = (vector method) (x))",
      "                     (vector (x))))",
      "                 (map (second)",
      "                      (select-match ",
      "                       (? x (= (first (x)) field)) ",
      "                       (fields))))))",
      "                  (vector",
      "                   (vector",
      "                (vector = (vector method) self)",
      "                (vector self))",
      "                   (vector",
      "                (vector = (vector method) (name))",
      "                (vector self self))",
      "                   (vector",
      "                (vector = (vector method) classname)",
      "                (name))",
      "                   (vector",
      "                (vector = (vector method) unknown)",
      "                (vector lambda (vector x) 0))",
      "                   (vector",
      "                (vector = (vector method) new)",
      "                0)",
      "                   (vector",
      "                (vector = (vector method) unique-id)",
      "                (vector unique-id))",
      "                   (vector",
      "                (vector = (vector method) ==)",
      "                (vector",
      "                 lambda",
      "                 (vector x)",
      "                 (vector = ",
      "                     (vector unique-id)",
      "                     (vector x unique-id))))",
      "                   (vector self unknown (vector method)))))))))))",
      "              (vector ",
      "               begin",
      "               (vector self new)",
      "               (vector self))))))))",
      "           (prev (x))))));"
    ],
    "code
    "parse": [
      "define",
      "translate",
      [
        "let",
        [
          [
            "prev",
            [
              "prev-translate"
            ]
          ]
        ],
        [
          "?",
          "x",
          [
            "if",
            [
              "number?",
              [
                "x"
              ]
            ],
            [
              "prev",
              [
                "x"
              ]
            ],
            [
              "if",
              [
                "=",
                [
                  "head",
                  [
                    "x"
                  ]
                ],
                "class"
              ],
              [
                "let",
                [
                  [
                    "name",
                    [
                      "list-ref",
                      [
                        "x"
                      ],
                      1
                    ]
                  ],
                  [
                    "args",
                    [
                      "list-ref",
                      [
                        "x"
                      ],
                      2
                    ]
                  ],
                  [
                    "fields",
                    [
                      "tail",
                      [
                        "tail",
                        [
                          "tail",
                          [
                            "x"
                          ]
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  "translate",
                  [
                    "vector",
                    "define",
                    [
                      "name"
                    ],
                    [
                      "vector",
                      "lambda",
                      [
                        "prepend",
                        "ext-this",
                        [
                          "args"
                        ]
                      ],
                      [
                        "vector",
                        "let",
                        [
                          "append",
                          [
                            "vector",
                            "unique-id",
                            [
                              "vector",
                              "unique",
                              "new"
                            ]
                          ],
                          [
                            "map",
                            [
                              "tail"
                            ],
                            [
                              "select-match",
                              [
                                "?",
                                "x",
                                [
                                  "=",
                                  [
                                    "first",
                                    [
                                      "x"
                                    ]
                                  ],
                                  "field"
                                ]
                              ],
                              [
                                "fields"
                              ]
                            ]
                          ]
                        ],
                        [
                          "vector",
                          "let",
                          [
                            "vector",
                            [
                              "vector",
                              "self",
                              [
                                "vector",
                                "reflective",
                                [
                                  "vector",
                                  "lambda",
                                  [
                                    "vector",
                                    "self"
                                  ],
                                  [
                                    "vector",
                                    "let",
                                    [
                                      "vector",
                                      [
                                        "vector",
                                        "this",
                                        [
                                          "vector",
                                          "setup-this",
                                          [
                                            "vector",
                                            "ext-this"
                                          ],
                                          [
                                            "vector",
                                            "self"
                                          ]
                                        ]
                                      ]
                                    ],
                                    [
                                      "vector",
                                      "let",
                                      [
                                        "vector",
                                        [
                                          "vector",
                                          "ignore-this",
                                          1
                                        ]
                                      ],
                                      [
                                        "vector",
                                        "lambda",
                                        [
                                          "vector",
                                          "method"
                                        ],
                                        [
                                          "list-append",
                                          [
                                            "prepend",
                                            "cond",
                                            [
                                              "list-append",
                                              [
                                                "map",
                                                [
                                                  "?",
                                                  "x",
                                                  [
                                                    "vector",
                                                    [
                                                      "vector",
                                                      "=",
                                                      [
                                                        "vector",
                                                        "method"
                                                      ],
                                                      [
                                                        "first",
                                                        [
                                                          "x"
                                                        ]
                                                      ]
                                                    ],
                                                    [
                                                      "second",
                                                      [
                                                        "x"
                                                      ]
                                                    ]
                                                  ]
                                                ],
                                                [
                                                  "map",
                                                  [
                                                    "tail"
                                                  ],
                                                  [
                                                    "select-match",
                                                    [
                                                      "?",
                                                      "x",
                                                      [
                                                        "=",
                                                        [
                                                          "first",
                                                          [
                                                            "x"
                                                          ]
                                                        ],
                                                        "method"
                                                      ]
                                                    ],
                                                    [
                                                      "fields"
                                                    ]
                                                  ]
                                                ]
                                              ],
                                              [
                                                "map",
                                                [
                                                  "?",
                                                  "x",
                                                  [
                                                    "vector",
                                                    [
                                                      "vector",
                                                      "=",
                                                      [
                                                        "vector",
                                                        "method"
                                                      ],
                                                      [
                                                        "x"
                                                      ]
                                                    ],
                                                    [
                                                      "vector",
                                                      [
                                                        "x"
                                                      ]
                                                    ]
                                                  ]
                                                ],
                                                [
                                                  "map",
                                                  [
                                                    "second"
                                                  ],
                                                  [
                                                    "select-match",
                                                    [
                                                      "?",
                                                      "x",
                                                      [
                                                        "=",
                                                        [
                                                          "first",
                                                          [
                                                            "x"
                                                          ]
                                                        ],
                                                        "field"
                                                      ]
                                                    ],
                                                    [
                                                      "fields"
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ],
                                          [
                                            "vector",
                                            [
                                              "vector",
                                              [
                                                "vector",
                                                "=",
                                                [
                                                  "vector",
                                                  "method"
                                                ],
                                                "self"
                                              ],
                                              [
                                                "vector",
                                                "self"
                                              ]
                                            ],
                                            [
                                              "vector",
                                              [
                                                "vector",
                                                "=",
                                                [
                                                  "vector",
                                                  "method"
                                                ],
                                                [
                                                  "name"
                                                ]
                                              ],
                                              [
                                                "vector",
                                                "self",
                                                "self"
                                              ]
                                            ],
                                            [
                                              "vector",
                                              [
                                                "vector",
                                                "=",
                                                [
                                                  "vector",
                                                  "method"
                                                ],
                                                "classname"
                                              ],
                                              [
                                                "name"
                                              ]
                                            ],
                                            [
                                              "vector",
                                              [
                                                "vector",
                                                "=",
                                                [
                                                  "vector",
                                                  "method"
                                                ],
                                                "unknown"
                                              ],
                                              [
                                                "vector",
                                                "lambda",
                                                [
                                                  "vector",
                                                  "x"
                                                ],
                                                0
                                              ]
                                            ],
                                            [
                                              "vector",
                                              [
                                                "vector",
                                                "=",
                                                [
                                                  "vector",
                                                  "method"
                                                ],
                                                "new"
                                              ],
                                              0
                                            ],
                                            [
                                              "vector",
                                              [
                                                "vector",
                                                "=",
                                                [
                                                  "vector",
                                                  "method"
                                                ],
                                                "unique-id"
                                              ],
                                              [
                                                "vector",
                                                "unique-id"
                                              ]
                                            ],
                                            [
                                              "vector",
                                              [
                                                "vector",
                                                "=",
                                                [
                                                  "vector",
                                                  "method"
                                                ],
                                                "=="
                                              ],
                                              [
                                                "vector",
                                                "lambda",
                                                [
                                                  "vector",
                                                  "x"
                                                ],
                                                [
                                                  "vector",
                                                  "=",
                                                  [
                                                    "vector",
                                                    "unique-id"
                                                  ],
                                                  [
                                                    "vector",
                                                    "x",
                                                    "unique-id"
                                                  ]
                                                ]
                                              ]
                                            ],
                                            [
                                              "vector",
                                              "self",
                                              "unknown",
                                              [
                                                "vector",
                                                "method"
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ],
                          [
                            "vector",
                            "begin",
                            [
                              "vector",
                              "self",
                              "new"
                            ],
                            [
                              "vector",
                              "self"
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "prev",
                [
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1102
  },
  {
    "role": "comment",
    "lines": [
      "# revisit the point class example"
    ],
    "stanza": 1103
  },
  {
    "role": "code",
    "lines": [
      "class point (x y) ",
      "       (method x (x))",
      "       (method y (y))",
      "       (method + (lambda ((p point))",
      "           (point new ",
      "              (+ (x) (p x))",
      "              (+ (y) (p y)))))",
      "       (method = (lambda ((p point))",
      "           (and (= (x) (p x))",
      "            (= (y) (p y)))));"
    ],
    "code": "2111000103211001001322100110321100013322100111103210011032210011033322100111103211000132211000133322100111103210103221101032221100001321100100133322110010013211010010322101032210011033221100001321001103332210103221100013322110000132110001333333221001111032103221101032221100001321100100133322101322103221001103322110000132100110333221032211000133221100001321100013333332233",
    "parse": [
      "class",
      "point",
      [
        "x",
        "y"
      ],
      [
        "method",
        "x",
        [
          "x"
        ]
      ],
      [
        "method",
        "y",
        [
          "y"
        ]
      ],
      [
        "method",
        "+",
        [
          "lambda",
          [
            [
              "p",
              "point"
            ]
          ],
          [
            "point",
            "new",
            [
              "+",
              [
                "x"
              ],
              [
                "p",
                "x"
              ]
            ],
            [
              "+",
              [
                "y"
              ],
              [
                "p",
                "y"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "=",
        [
          "lambda",
          [
            [
              "p",
              "point"
            ]
          ],
          [
            "and",
            [
              "=",
              [
                "x"
              ],
              [
                "p",
                "x"
              ]
            ],
            [
              "=",
              [
                "y"
              ],
              [
                "p",
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1104
  },
  {
    "role": "comment",
    "lines": [
      "# note the appearance of new in the next line --",
      "# this is the only difference to previous version"
    ],
    "stanza": 1105
  },
  {
    "role": "code",
    "lines": [
      "define point1 (point new 1 11);"
    ],
    "code": "211013211001011322110010013211010010321321011332233",
    "parse": [
      "define",
      "point1",
      [
        "point",
        "new",
        1,
        11
      ]
    ],
    "stanza": 1106
  },
  {
    "role": "code",
    "lines": [
      "define point2 (point new 2 22);"
    ],
    "code": "21101321100110032211001001321101001032103210110332233",
    "parse": [
      "define",
      "point2",
      [
        "point",
        "new",
        2,
        22
      ]
    ],
    "stanza": 1107
  },
  {
    "role": "code",
    "lines": [
      "= 1 (point1 x);"
    ],
    "code": "2103213221100101132100110332233",
    "parse": [
      "=",
      1,
      [
        "point1",
        "x"
      ]
    ],
    "stanza": 1108
  },
  {
    "role": "code",
    "lines": [
      "= 22 (point2 y);"
    ],
    "code": "21032101103221100110032110001332233",
    "parse": [
      "=",
      22,
      [
        "point2",
        "y"
      ]
    ],
    "stanza": 1109
  },
  {
    "role": "code",
    "lines": [
      "= 11 ((point new 11 12) x);"
    ],
    "code": "2103210113222110010013211010010321011321100332100110332233",
    "parse": [
      "=",
      11,
      [
        [
          "point",
          "new",
          11,
          12
        ],
        "x"
      ]
    ],
    "stanza": 1110
  },
  {
    "role": "code",
    "lines": [
      "= 11 (((point new 11 12) point) x);"
    ],
    "code": "2103210113222211001001321101001032101132110033211001001332100110332233",
    "parse": [
      "=",
      11,
      [
        [
          [
            "point",
            "new",
            11,
            12
          ],
          "point"
        ],
        "x"
      ]
    ],
    "stanza": 1111
  },
  {
    "role": "code",
    "lines": [
      "= 16 (((point new 16 17) point) x);"
    ],
    "code": "2103210000322221100100132110100103210000321000133211001001332100110332233",
    "parse": [
      "=",
      16,
      [
        [
          [
            "point",
            "new",
            16,
            17
          ],
          "point"
        ],
        "x"
      ]
    ],
    "stanza": 1112
  },
  {
    "role": "code",
    "lines": [
      "= 33 (point1 + (point2) y);"
    ],
    "code": "210321000013221100101132101032211001100332110001332233",
    "parse": [
      "=",
      33,
      [
        "point1",
        "+",
        [
          "point2"
        ],
        "y"
      ]
    ],
    "stanza": 1113
  },
  {
    "role": "code",
    "lines": [
      "point1 + (point2) = (point new 3 33);"
    ],
    "code": "2110010113210103221100110033210322110010013211010010321132100001332233",
    "parse": [
      "point1",
      "+",
      [
        "point2"
      ],
      "=",
      [
        "point",
        "new",
        3,
        33
      ]
    ],
    "stanza": 1114
  },
  {
    "role": "code",
    "lines": [
      "point2 + (point1) = (point new 3 33);"
    ],
    "code": "2110011003210103221100101133210322110010013211010010321132100001332233",
    "parse": [
      "point2",
      "+",
      [
        "point1"
      ],
      "=",
      [
        "point",
        "new",
        3,
        33
      ]
    ],
    "stanza": 1115
  },
  {
    "role": "code",
    "lines": [
      "(point new 100 200) + (point new 200 100) = (point new 300 300);"
    ],
    "code": "22110010013211010010321100100321100100033210103221100100132110100103211001000321100100332103221100100132110100103210010110032100101100332233",
    "parse": [
      [
        "point",
        "new",
        100,
        200
      ],
      "+",
      [
        "point",
        "new",
        200,
        100
      ],
      "=",
      [
        "point",
        "new",
        300,
        300
      ]
    ],
    "stanza": 1116
  },
  {
    "role": "code",
    "lines": [
      "instanceof point (point1);"
    ],
    "code": "210111010321100100132211001011332233",
    "parse": [
      "instanceof",
      "point",
      [
        "point1"
      ]
    ],
    "stanza": 1117
  },
  {
    "role": "code",
    "lines": [
      "not (instanceof int (point1));"
    ],
    "code": "2100322101110103210111000322110010113332233",
    "parse": [
      "not",
      [
        "instanceof",
        "int",
        [
          "point1"
        ]
      ]
    ],
    "stanza": 1118
  },
  {
    "role": "comment",
    "lines": [
      "# Check that virtual calls can be made to work.",
      "# They are a little awkward right now.",
      "# Should they be the default?"
    ],
    "stanza": 1119
  },
  {
    "role": "code",
    "lines": [
      "class c1 ()",
      "       (method getid 100)",
      "       (method altid (this getid));"
    ],
    "code": "21110001032111011003232210011110321110110132110010033221001111032111011103221110000132111011013332233",
    "parse": [
      "class",
      "c1",
      [],
      [
        "method",
        "getid",
        100
      ],
      [
        "method",
        "altid",
        [
          "this",
          "getid"
        ]
      ]
    ],
    "stanza": 1120
  },
  {
    "role": "code",
    "lines": [
      "class c2 ()",
      "       (field super-ref (make-cell 0))",
      "       (method new (set! (super-ref) (c1 | this)))",
      "       (method super (? x ((get! | super-ref) (x))))",
      "       (method unknown (? x (self super | x)))",
      "       (method getid 200);"
    ],
    "code": "211100010321110111132322111001113211110000322110113203332210011110321101001032211100322111100003322111011003023211100001333322100111103211010101322110032100110322211101302321111000033221001103333322100111103211101010322110032100110322101000113211010101302321001103333221001111032111011013211001000332233",
    "parse": [
      "class",
      "c2",
      [],
      [
        "field",
        "super-ref",
        [
          "make-cell",
          0
        ]
      ],
      [
        "method",
        "new",
        [
          "set!",
          [
            "super-ref"
          ],
          [
            "c1",
            [
              -1,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          "?",
          "x",
          [
            [
              "get!",
              [
                -1,
                "super-ref"
              ]
            ],
            [
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "?",
          "x",
          [
            "self",
            "super",
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "getid",
        200
      ]
    ],
    "stanza": 1121
  },
  {
    "role": "code",
    "lines": [
      "= 100 | c1 new altid;"
    ],
    "code": "21032110010030232111011003211010010321110111032233",
    "parse": [
      "=",
      100,
      [
        -1,
        "c1",
        "new",
        "altid"
      ]
    ],
    "stanza": 1122
  },
  {
    "role": "code",
    "lines": [
      "= 200 | c2 new altid;"
    ],
    "code": "210321100100030232111011113211010010321110111032233",
    "parse": [
      "=",
      200,
      [
        -1,
        "c2",
        "new",
        "altid"
      ]
    ],
    "stanza": 1123
  },
  {
    "role": "comment",
    "lines": [
      "# OBJECT wrapper class for cells"
    ],
    "section_description": "wrapper class for cells",
    "section_category": "OBJECT",
    "section_index": 40,
    "stanza": 1124
  },
  {
    "role": "code",
    "lines": [
      "class cell (initial-value)",
      "       (field content (make-cell (initial-value)))",
      "       (method get (get! (content)))",
      "       (method set (lambda (new-value)",
      "             (set! (content) (new-value))))",
      "       (method reset (self set (initial-value)))",
      "       (method unknown (lambda (x) ((objectify (self get)) (x))));"
    ],
    "code": "21110001032111100013221111001033221110011132111100113221101132211110010333322100111103211110100322111013221111001133332210011110321111010132211010322111101103322111003221111001133221111011033333221001111032111101113221010001132111101013221111001033332210011110321110101032211010322100110332221011100132210100011321111010033322100110333332233",
    "parse": [
      "class",
      "cell",
      [
        "initial-value"
      ],
      [
        "field",
        "content",
        [
          "make-cell",
          [
            "initial-value"
          ]
        ]
      ],
      [
        "method",
        "get",
        [
          "get!",
          [
            "content"
          ]
        ]
      ],
      [
        "method",
        "set",
        [
          "lambda",
          [
            "new-value"
          ],
          [
            "set!",
            [
              "content"
            ],
            [
              "new-value"
            ]
          ]
        ]
      ],
      [
        "method",
        "reset",
        [
          "self",
          "set",
          [
            "initial-value"
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            [
              "objectify",
              [
                "self",
                "get"
              ]
            ],
            [
              "x"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1125
  },
  {
    "role": "code",
    "lines": [
      "define cell-test1 (cell new 15);"
    ],
    "code": "211013211111000322111100013211010010321111332233",
    "parse": [
      "define",
      "cell-test1",
      [
        "cell",
        "new",
        15
      ]
    ],
    "stanza": 1126
  },
  {
    "role": "code",
    "lines": [
      "= 15 (cell-test1 get);"
    ],
    "code": "210321111322111110003211110100332233",
    "parse": [
      "=",
      15,
      [
        "cell-test1",
        "get"
      ]
    ],
    "stanza": 1127
  },
  {
    "role": "code",
    "lines": [
      "cell-test1 set 82;"
    ],
    "code": "211111000321111010132101001032233",
    "parse": [
      "cell-test1",
      "set",
      82
    ],
    "stanza": 1128
  },
  {
    "role": "code",
    "lines": [
      "= 82 (cell-test1 get);"
    ],
    "code": "210321010010322111110003211110100332233",
    "parse": [
      "=",
      82,
      [
        "cell-test1",
        "get"
      ]
    ],
    "stanza": 1129
  },
  {
    "role": "code",
    "lines": [
      "define cell-test2 (cell new (point new 120 150));"
    ],
    "code": "21101321111100132211110001321101001032211001001321101001032111100032100101103332233",
    "parse": [
      "define",
      "cell-test2",
      [
        "cell",
        "new",
        [
          "point",
          "new",
          120,
          150
        ]
      ]
    ],
    "stanza": 1130
  },
  {
    "role": "code",
    "lines": [
      "define cell-test3 (cell new (point new 300 300));"
    ],
    "code": "21101321111101032211110001321101001032211001001321101001032100101100321001011003332233",
    "parse": [
      "define",
      "cell-test3",
      [
        "cell",
        "new",
        [
          "point",
          "new",
          300,
          300
        ]
      ]
    ],
    "stanza": 1131
  },
  {
    "role": "code",
    "lines": [
      "cell-test2 + (cell-test3) = (point new 420 450);"
    ],
    "code": "21111100132101032211111010332103221100100132110100103211010010032111000010332233",
    "parse": [
      "cell-test2",
      "+",
      [
        "cell-test3"
      ],
      "=",
      [
        "point",
        "new",
        420,
        450
      ]
    ],
    "stanza": 1132
  },
  {
    "role": "code",
    "lines": [
      "not (cell-test2 = (cell-test3));"
    ],
    "code": "2100322111110013210322111110103332233",
    "parse": [
      "not",
      [
        "cell-test2",
        "=",
        [
          "cell-test3"
        ]
      ]
    ],
    "stanza": 1133
  },
  {
    "role": "code",
    "lines": [
      "cell-test3 set (cell-test2);"
    ],
    "code": "211111010321111010132211111001332233",
    "parse": [
      "cell-test3",
      "set",
      [
        "cell-test2"
      ]
    ],
    "stanza": 1134
  },
  {
    "role": "code",
    "lines": [
      "cell-test2 = (cell-test3);"
    ],
    "code": "211111001321032211111010332233",
    "parse": [
      "cell-test2",
      "=",
      [
        "cell-test3"
      ]
    ],
    "stanza": 1135
  },
  {
    "role": "comment",
    "lines": [
      "# MUD playing around with doors and rooms"
    ],
    "section_description": "playing around with doors and rooms",
    "section_category": "MUD",
    "section_index": 41,
    "stanza": 1136
  },
  {
    "role": "code",
    "lines": [
      "class door ((src room) (dest room))",
      "       (method new (begin",
      "             (src add (self))",
      "             (dest add (self))))",
      "       (method access-from (lambda ((current room))",
      "                 (cond ((current == (src)) (dest))",
      "                   ((current == (dest)) (src))",
      "                   0)))",
      "       (method is-present (lambda ((current room))",
      "                (cond ((current == (src)) (true))",
      "                  ((current == (dest)) (true))",
      "                  (false))));"
    ],
    "code": "21110001032111110113222111111003211111101332211111110321111110133322100111103211010010322100010113221111110032110111132210100011333221111111032110111132210100011333332210011110321111111132211010322210101101321111110133322101111113222101011013211101011322111111003332211111110333222101011013211101011322111111103332211111100333203333221001111032100000000322110103222101011013211111101333221011111132221010110132111010113221111110033322110110333222101011013211101011322111111103332211011033322110111333332233",
    "parse": [
      "class",
      "door",
      [
        [
          "src",
          "room"
        ],
        [
          "dest",
          "room"
        ]
      ],
      [
        "method",
        "new",
        [
          "begin",
          [
            "src",
            "add",
            [
              "self"
            ]
          ],
          [
            "dest",
            "add",
            [
              "self"
            ]
          ]
        ]
      ],
      [
        "method",
        "access-from",
        [
          "lambda",
          [
            [
              "current",
              "room"
            ]
          ],
          [
            "cond",
            [
              [
                "current",
                "==",
                [
                  "src"
                ]
              ],
              [
                "dest"
              ]
            ],
            [
              [
                "current",
                "==",
                [
                  "dest"
                ]
              ],
              [
                "src"
              ]
            ],
            0
          ]
        ]
      ],
      [
        "method",
        "is-present",
        [
          "lambda",
          [
            [
              "current",
              "room"
            ]
          ],
          [
            "cond",
            [
              [
                "current",
                "==",
                [
                  "src"
                ]
              ],
              [
                "true"
              ]
            ],
            [
              [
                "current",
                "==",
                [
                  "dest"
                ]
              ],
              [
                "true"
              ]
            ],
            [
              "false"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1137
  },
  {
    "role": "code",
    "lines": [
      "class room (name)",
      "       (field content (container new))",
      "       (method name (name))",
      "       (method unknown (lambda (x) (content (x))));"
    ],
    "code": "211100010321111110132210011101332211100111321111001132211001101321101001033322100111103210011101322100111013332210011110321110101032211010322100110332211110011322100110333332233",
    "parse": [
      "class",
      "room",
      [
        "name"
      ],
      [
        "field",
        "content",
        [
          "container",
          "new"
        ]
      ],
      [
        "method",
        "name",
        [
          "name"
        ]
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            "content",
            [
              "x"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1138
  },
  {
    "role": "comment",
    "lines": [
      "# need to fix up containers to use object equality"
    ],
    "stanza": 1139
  },
  {
    "role": "code",
    "lines": [
      "define object-element",
      "  (lambda (n lst)",
      "    (> (list-length ",
      "    (select-match (lambda (x) (x == (n))) (lst))) ",
      "       0));"
    ],
    "code": "211013210000000132211010322111011321000110332211322100100032211011100322110103221001103322100110321110101132211101133332210001103333203332233",
    "parse": [
      "define",
      "object-element",
      [
        "lambda",
        [
          "n",
          "lst"
        ],
        [
          ">",
          [
            "list-length",
            [
              "select-match",
              [
                "lambda",
                [
                  "x"
                ],
                [
                  "x",
                  "==",
                  [
                    "n"
                  ]
                ]
              ],
              [
                "lst"
              ]
            ]
          ],
          0
        ]
      ]
    ],
    "stanza": 1140
  },
  {
    "role": "code",
    "lines": [
      "class container ()",
      "    (field contents (cell new (vector)))",
      "    (method inventory (contents get))",
      "    (method add (lambda (x) ",
      "          (if (not (object-element (x) (contents get)))",
      "              (contents set (prepend (x) (contents get)))",
      "              (false))));"
    ],
    "code": "2111000103211001101323221110011132110011103221111000132110100103221000033332210011110321100111132211001110321111010033322100111103211011113221101032210011033221111322100322100000001322100110332211001110321111010033332211001110321111010132210010103221001103322110011103211110100333322110111333332233",
    "parse": [
      "class",
      "container",
      [],
      [
        "field",
        "contents",
        [
          "cell",
          "new",
          [
            "vector"
          ]
        ]
      ],
      [
        "method",
        "inventory",
        [
          "contents",
          "get"
        ]
      ],
      [
        "method",
        "add",
        [
          "lambda",
          [
            "x"
          ],
          [
            "if",
            [
              "not",
              [
                "object-element",
                [
                  "x"
                ],
                [
                  "contents",
                  "get"
                ]
              ]
            ],
            [
              "contents",
              "set",
              [
                "prepend",
                [
                  "x"
                ],
                [
                  "contents",
                  "get"
                ]
              ]
            ],
            [
              "false"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1141
  },
  {
    "role": "code",
    "lines": [
      "define hall (room new 0);"
    ],
    "code": "2110132100000010322111111013211010010320332233",
    "parse": [
      "define",
      "hall",
      [
        "room",
        "new",
        0
      ]
    ],
    "stanza": 1142
  },
  {
    "role": "code",
    "lines": [
      "define kitchen (room new 1);"
    ],
    "code": "2110132100000011322111111013211010010321332233",
    "parse": [
      "define",
      "kitchen",
      [
        "room",
        "new",
        1
      ]
    ],
    "stanza": 1143
  },
  {
    "role": "code",
    "lines": [
      "define door1 (door new (hall) (kitchen));"
    ],
    "code": "211013210000010032211111011321101001032210000001033221000000113332233",
    "parse": [
      "define",
      "door1",
      [
        "door",
        "new",
        [
          "hall"
        ],
        [
          "kitchen"
        ]
      ]
    ],
    "stanza": 1144
  },
  {
    "role": "code",
    "lines": [
      "(first (hall inventory)) == (door1);"
    ],
    "code": "2210011003221000000103211001111333211101011322100000100332233",
    "parse": [
      [
        "first",
        [
          "hall",
          "inventory"
        ]
      ],
      "==",
      [
        "door1"
      ]
    ],
    "stanza": 1145
  },
  {
    "role": "code",
    "lines": [
      "(first (kitchen inventory)) == (door1);"
    ],
    "code": "2210011003221000000113211001111333211101011322100000100332233",
    "parse": [
      [
        "first",
        [
          "kitchen",
          "inventory"
        ]
      ],
      "==",
      [
        "door1"
      ]
    ],
    "stanza": 1146
  },
  {
    "role": "code",
    "lines": [
      "door1 access-from (hall) == (kitchen);"
    ],
    "code": "2100000100321111111132210000001033211101011322100000011332233",
    "parse": [
      "door1",
      "access-from",
      [
        "hall"
      ],
      "==",
      [
        "kitchen"
      ]
    ],
    "stanza": 1147
  },
  {
    "role": "code",
    "lines": [
      "not (door1 access-from (hall) == (hall));"
    ],
    "code": "21003221000001003211111111322100000010332111010113221000000103332233",
    "parse": [
      "not",
      [
        "door1",
        "access-from",
        [
          "hall"
        ],
        "==",
        [
          "hall"
        ]
      ]
    ],
    "stanza": 1148
  },
  {
    "role": "code",
    "lines": [
      "door1 access-from (kitchen) == (hall);"
    ],
    "code": "2100000100321111111132210000001133211101011322100000010332233",
    "parse": [
      "door1",
      "access-from",
      [
        "kitchen"
      ],
      "==",
      [
        "hall"
      ]
    ],
    "stanza": 1149
  },
  {
    "role": "code",
    "lines": [
      "define stairs (room new 2);"
    ],
    "code": "21101321000001013221111110132110100103210332233",
    "parse": [
      "define",
      "stairs",
      [
        "room",
        "new",
        2
      ]
    ],
    "stanza": 1150
  },
  {
    "role": "code",
    "lines": [
      "define lawn (room new 3);"
    ],
    "code": "21101321000001103221111110132110100103211332233",
    "parse": [
      "define",
      "lawn",
      [
        "room",
        "new",
        3
      ]
    ],
    "stanza": 1151
  },
  {
    "role": "code",
    "lines": [
      "define bedroom (room new 4);"
    ],
    "code": "211013210000011132211111101321101001032100332233",
    "parse": [
      "define",
      "bedroom",
      [
        "room",
        "new",
        4
      ]
    ],
    "stanza": 1152
  },
  {
    "role": "code",
    "lines": [
      "define nowhere (room new 0);"
    ],
    "code": "2110132100001000322111111013211010010320332233",
    "parse": [
      "define",
      "nowhere",
      [
        "room",
        "new",
        0
      ]
    ],
    "stanza": 1153
  },
  {
    "role": "code",
    "lines": [
      "define door2 (door new (hall) (lawn));"
    ],
    "code": "211013210000100132211111011321101001032210000001033221000001103332233",
    "parse": [
      "define",
      "door2",
      [
        "door",
        "new",
        [
          "hall"
        ],
        [
          "lawn"
        ]
      ]
    ],
    "stanza": 1154
  },
  {
    "role": "code",
    "lines": [
      "define door3 (door new (hall) (stairs));"
    ],
    "code": "211013210000101032211111011321101001032210000001033221000001013332233",
    "parse": [
      "define",
      "door3",
      [
        "door",
        "new",
        [
          "hall"
        ],
        [
          "stairs"
        ]
      ]
    ],
    "stanza": 1155
  },
  {
    "role": "code",
    "lines": [
      "define door4 (door new (stairs) (bedroom));"
    ],
    "code": "211013210000101132211111011321101001032210000010133221000001113332233",
    "parse": [
      "define",
      "door4",
      [
        "door",
        "new",
        [
          "stairs"
        ],
        [
          "bedroom"
        ]
      ]
    ],
    "stanza": 1156
  },
  {
    "role": "code",
    "lines": [
      "class character ()",
      "       (field location (cell new 0))",
      "       (field name (cell new 0))",
      "       (method set-room (lambda ((r room)) ",
      "              (begin",
      "                (if (not (number? | location get))",
      "                (location get remove (self))",
      "                0)",
      "                (r add (self))",
      "                (location set (r)))))",
      "       (method get-room (location get))",
      "       (method set-name (lambda (n) (name set | n)))",
      "       (method get-name (name get))",
      "       (method update 0);"
    ],
    "code": "211100010321000011003232211100111321000011013221111000132110100103203332211100111321001110132211110001321101001032033322100111103210000111032211010322210000111132111111013332210001011322111132210032211000302321000011013211110100333221000011013211110100321101000032210100011333203322100001111321101111322101000113332210000110132111101013221000011113333332210011110321000100003221000011013211110100333221001111032100010001322110103221110113322100111013211110101302321110113333221001111032100010010322100111013211110100333221001111032100010011320332233",
    "parse": [
      "class",
      "character",
      [],
      [
        "field",
        "location",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "field",
        "name",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "method",
        "set-room",
        [
          "lambda",
          [
            [
              "r",
              "room"
            ]
          ],
          [
            "begin",
            [
              "if",
              [
                "not",
                [
                  "number?",
                  [
                    -1,
                    "location",
                    "get"
                  ]
                ]
              ],
              [
                "location",
                "get",
                "remove",
                [
                  "self"
                ]
              ],
              0
            ],
            [
              "r",
              "add",
              [
                "self"
              ]
            ],
            [
              "location",
              "set",
              [
                "r"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "get-room",
        [
          "location",
          "get"
        ]
      ],
      [
        "method",
        "set-name",
        [
          "lambda",
          [
            "n"
          ],
          [
            "name",
            "set",
            [
              -1,
              "n"
            ]
          ]
        ]
      ],
      [
        "method",
        "get-name",
        [
          "name",
          "get"
        ]
      ],
      [
        "method",
        "update",
        0
      ]
    ],
    "stanza": 1157
  },
  {
    "role": "code",
    "lines": [
      "define find-max-helper",
      "  (lambda (test max idx n lst)",
      "    (if (> (list-length (lst)) 0)",
      "    (if (> (test (head (lst))) (max))",
      "        (find-max-helper (test) (test (head (lst))) (n) (+ (n) 1) (tail (lst)))",
      "        (find-max-helper (test) (max) (idx) (+ (n) 1) (tail (lst))))",
      "    (idx)));"
    ],
    "code": "2110132100010100322110103221100001132111000321010001321110113210001103322111132211322100100032210001103332033221111322113221100001132210001013221000110333322111000333221000101003221100001133221100001132210001013221000110333322111011332210103221110113321332210001113221000110333322100010100322110000113322111000332210100013322101032211101133213322100011132210001103333322101000133332233",
    "parse": [
      "define",
      "find-max-helper",
      [
        "lambda",
        [
          "test",
          "max",
          "idx",
          "n",
          "lst"
        ],
        [
          "if",
          [
            ">",
            [
              "list-length",
              [
                "lst"
              ]
            ],
            0
          ],
          [
            "if",
            [
              ">",
              [
                "test",
                [
                  "head",
                  [
                    "lst"
                  ]
                ]
              ],
              [
                "max"
              ]
            ],
            [
              "find-max-helper",
              [
                "test"
              ],
              [
                "test",
                [
                  "head",
                  [
                    "lst"
                  ]
                ]
              ],
              [
                "n"
              ],
              [
                "+",
                [
                  "n"
                ],
                1
              ],
              [
                "tail",
                [
                  "lst"
                ]
              ]
            ],
            [
              "find-max-helper",
              [
                "test"
              ],
              [
                "max"
              ],
              [
                "idx"
              ],
              [
                "+",
                [
                  "n"
                ],
                1
              ],
              [
                "tail",
                [
                  "lst"
                ]
              ]
            ]
          ],
          [
            "idx"
          ]
        ]
      ]
    ],
    "stanza": 1158
  },
  {
    "role": "code",
    "lines": [
      "define find-max-idx",
      "  (lambda (test lst)",
      "    (find-max-helper (test) (test (head (lst))) 0 0 (lst)));"
    ],
    "code": "2110132100010101322110103221100001132100011033221000101003221100001133221100001132210001013221000110333320320322100011033332233",
    "parse": [
      "define",
      "find-max-idx",
      [
        "lambda",
        [
          "test",
          "lst"
        ],
        [
          "find-max-helper",
          [
            "test"
          ],
          [
            "test",
            [
              "head",
              [
                "lst"
              ]
            ]
          ],
          0,
          0,
          [
            "lst"
          ]
        ]
      ]
    ],
    "stanza": 1159
  },
  {
    "role": "code",
    "lines": [
      "define find-min-helper",
      "  (lambda (test max idx n lst)",
      "    (if (> (list-length (lst)) 0)",
      "    (if (< (test (head (lst))) (max))",
      "        (find-min-helper (test) (test (head (lst))) (n) (+ (n) 1) (tail (lst)))",
      "        (find-min-helper (test) (max) (idx) (+ (n) 1) (tail (lst))))",
      "    (idx)));"
    ],
    "code": "211013210001011032211010322110000113211100032101000132111011321000110332211113221132210010003221000110333203322111132213221100001132210001013221000110333322111000333221000101103221100001133221100001132210001013221000110333322111011332210103221110113321332210001113221000110333322100010110322110000113322111000332210100013322101032211101133213322100011132210001103333322101000133332233",
    "parse": [
      "define",
      "find-min-helper",
      [
        "lambda",
        [
          "test",
          "max",
          "idx",
          "n",
          "lst"
        ],
        [
          "if",
          [
            ">",
            [
              "list-length",
              [
                "lst"
              ]
            ],
            0
          ],
          [
            "if",
            [
              "<",
              [
                "test",
                [
                  "head",
                  [
                    "lst"
                  ]
                ]
              ],
              [
                "max"
              ]
            ],
            [
              "find-min-helper",
              [
                "test"
              ],
              [
                "test",
                [
                  "head",
                  [
                    "lst"
                  ]
                ]
              ],
              [
                "n"
              ],
              [
                "+",
                [
                  "n"
                ],
                1
              ],
              [
                "tail",
                [
                  "lst"
                ]
              ]
            ],
            [
              "find-min-helper",
              [
                "test"
              ],
              [
                "max"
              ],
              [
                "idx"
              ],
              [
                "+",
                [
                  "n"
                ],
                1
              ],
              [
                "tail",
                [
                  "lst"
                ]
              ]
            ]
          ],
          [
            "idx"
          ]
        ]
      ]
    ],
    "stanza": 1160
  },
  {
    "role": "code",
    "lines": [
      "define find-min-idx",
      "  (lambda (test lst)",
      "    (find-min-helper (test) (test (head (lst))) 0 0 (lst)));"
    ],
    "code": "2110132100010111322110103221100001132100011033221000101103221100001133221100001132210001013221000110333320320322100011033332233",
    "parse": [
      "define",
      "find-min-idx",
      [
        "lambda",
        [
          "test",
          "lst"
        ],
        [
          "find-min-helper",
          [
            "test"
          ],
          [
            "test",
            [
              "head",
              [
                "lst"
              ]
            ]
          ],
          0,
          0,
          [
            "lst"
          ]
        ]
      ]
    ],
    "stanza": 1161
  },
  {
    "role": "code",
    "lines": [
      "= 2 (find-max-idx (lambda (x) (x)) (vector 3 4 5 0));"
    ],
    "code": "21032103221000101013221101032210011033221001103332210000321132100321013203332233",
    "parse": [
      "=",
      2,
      [
        "find-max-idx",
        [
          "lambda",
          [
            "x"
          ],
          [
            "x"
          ]
        ],
        [
          "vector",
          3,
          4,
          5,
          0
        ]
      ]
    ],
    "stanza": 1162
  },
  {
    "role": "code",
    "lines": [
      "= 1 (find-max-idx (lambda (x) (x)) (vector 3 5 4 0));"
    ],
    "code": "2103213221000101013221101032210011033221001103332210000321132101321003203332233",
    "parse": [
      "=",
      1,
      [
        "find-max-idx",
        [
          "lambda",
          [
            "x"
          ],
          [
            "x"
          ]
        ],
        [
          "vector",
          3,
          5,
          4,
          0
        ]
      ]
    ],
    "stanza": 1163
  },
  {
    "role": "code",
    "lines": [
      "= 0 (find-max-idx (lambda (x) (x)) (vector 5 3 4 0));"
    ],
    "code": "2103203221000101013221101032210011033221001103332210000321013211321003203332233",
    "parse": [
      "=",
      0,
      [
        "find-max-idx",
        [
          "lambda",
          [
            "x"
          ],
          [
            "x"
          ]
        ],
        [
          "vector",
          5,
          3,
          4,
          0
        ]
      ]
    ],
    "stanza": 1164
  },
  {
    "role": "comment",
    "lines": [
      "# the robo class makes a character that patrols from room to room"
    ],
    "stanza": 1165
  },
  {
    "role": "code",
    "lines": [
      "class robo ()",
      "       (field super (character new))",
      "       (field timestamp (cell new 1))",
      "       (field timestamp-map (cell new (lambda (x) 0)))",
      "       (method unknown (lambda (x) (super (x))))",
      "       (method update ",
      "           (let ((exits ",
      "              (select-match (lambda (x) (instanceof door (x)))",
      "                    (self location inventory))))",
      "         (let ((timestamps",
      "            (map (lambda (x) (timestamp-map get (x)))",
      "                 (exits))))",
      "           (let ((chosen-exit (list-ref ",
      "                       (exits)",
      "                       (find-min-idx (lambda (x) (x))",
      "                             (timestamps))))",
      "             (current-tmap (timestamp-map get))",
      "             (current-t (timestamp get)))",
      "             (begin",
      "               (self location set (chosen-exit ",
      "                       access-from ",
      "                       (self location get)))",
      "               (timestamp-map set ",
      "                      (lambda ((d door))",
      "                    (if (d == (chosen-exit))",
      "                        (current-t)",
      "                        (current-tmap (d)))))",
      "               (timestamp set (+ (timestamp get) 1)))))));"
    ],
    "code
    "parse": [
      "class",
      "robo",
      [],
      [
        "field",
        "super",
        [
          "character",
          "new"
        ]
      ],
      [
        "field",
        "timestamp",
        [
          "cell",
          "new",
          1
        ]
      ],
      [
        "field",
        "timestamp-map",
        [
          "cell",
          "new",
          [
            "lambda",
            [
              "x"
            ],
            0
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            "super",
            [
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "update",
        [
          "let",
          [
            [
              "exits",
              [
                "select-match",
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "instanceof",
                    "door",
                    [
                      "x"
                    ]
                  ]
                ],
                [
                  "self",
                  "location",
                  "inventory"
                ]
              ]
            ]
          ],
          [
            "let",
            [
              [
                "timestamps",
                [
                  "map",
                  [
                    "lambda",
                    [
                      "x"
                    ],
                    [
                      "timestamp-map",
                      "get",
                      [
                        "x"
                      ]
                    ]
                  ],
                  [
                    "exits"
                  ]
                ]
              ]
            ],
            [
              "let",
              [
                [
                  "chosen-exit",
                  [
                    "list-ref",
                    [
                      "exits"
                    ],
                    [
                      "find-min-idx",
                      [
                        "lambda",
                        [
                          "x"
                        ],
                        [
                          "x"
                        ]
                      ],
                      [
                        "timestamps"
                      ]
                    ]
                  ]
                ],
                [
                  "current-tmap",
                  [
                    "timestamp-map",
                    "get"
                  ]
                ],
                [
                  "current-t",
                  [
                    "timestamp",
                    "get"
                  ]
                ]
              ],
              [
                "begin",
                [
                  "self",
                  "location",
                  "set",
                  [
                    "chosen-exit",
                    "access-from",
                    [
                      "self",
                      "location",
                      "get"
                    ]
                  ]
                ],
                [
                  "timestamp-map",
                  "set",
                  [
                    "lambda",
                    [
                      [
                        "d",
                        "door"
                      ]
                    ],
                    [
                      "if",
                      [
                        "d",
                        "==",
                        [
                          "chosen-exit"
                        ]
                      ],
                      [
                        "current-t"
                      ],
                      [
                        "current-tmap",
                        [
                          "d"
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  "timestamp",
                  "set",
                  [
                    "+",
                    [
                      "timestamp",
                      "get"
                    ],
                    1
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1166
  },
  {
    "role": "code",
    "lines": [
      "define myrobo (robo new);"
    ],
    "code": "21101321001000013221000110003211010010332233",
    "parse": [
      "define",
      "myrobo",
      [
        "robo",
        "new"
      ]
    ],
    "stanza": 1167
  },
  {
    "role": "code",
    "lines": [
      "myrobo set-room (stairs);"
    ],
    "code": "210010000132100001110322100000101332233",
    "parse": [
      "myrobo",
      "set-room",
      [
        "stairs"
      ]
    ],
    "stanza": 1168
  },
  {
    "role": "code",
    "lines": [
      "define which-room",
      "  (lambda ((rr robo))",
      "    (find-max-idx ",
      "     (lambda ((r room)) (if (r == (rr get-room)) 1 0))",
      "     (vector (hall) (kitchen) (stairs) (lawn) (bedroom))));"
    ],
    "code": "2110132100100010322110103222100100011321000110003332210001010132211010322210000111132111111013332211113221000011113211101011322100100011321000100003332132033322100003221000000103322100000011332210000010133221000001103322100000111333332233",
    "parse": [
      "define",
      "which-room",
      [
        "lambda",
        [
          [
            "rr",
            "robo"
          ]
        ],
        [
          "find-max-idx",
          [
            "lambda",
            [
              [
                "r",
                "room"
              ]
            ],
            [
              "if",
              [
                "r",
                "==",
                [
                  "rr",
                  "get-room"
                ]
              ],
              1,
              0
            ]
          ],
          [
            "vector",
            [
              "hall"
            ],
            [
              "kitchen"
            ],
            [
              "stairs"
            ],
            [
              "lawn"
            ],
            [
              "bedroom"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1169
  },
  {
    "role": "code",
    "lines": [
      "define sequencer",
      "  (lambda (n current lst)",
      "    (if (< (current) (n))",
      "    (begin",
      "      (myrobo update)",
      "      (sequencer",
      "       (n)",
      "       (+ (current) 1)",
      "       (append",
      "        (which-room (myrobo))",
      "        (lst))))",
      "    (lst)));"
    ],
    "code": "21101321001001003221101032211101132101011013210001103322111132213221010110133221110113332210001011322100100001321000100113322100100100322111011332210103221010110133213322110110113221001000103221001000013332210001103333322100011033332233",
    "parse": [
      "define",
      "sequencer",
      [
        "lambda",
        [
          "n",
          "current",
          "lst"
        ],
        [
          "if",
          [
            "<",
            [
              "current"
            ],
            [
              "n"
            ]
          ],
          [
            "begin",
            [
              "myrobo",
              "update"
            ],
            [
              "sequencer",
              [
                "n"
              ],
              [
                "+",
                [
                  "current"
                ],
                1
              ],
              [
                "append",
                [
                  "which-room",
                  [
                    "myrobo"
                  ]
                ],
                [
                  "lst"
                ]
              ]
            ]
          ],
          [
            "lst"
          ]
        ]
      ]
    ],
    "stanza": 1170
  },
  {
    "role": "comment",
    "lines": [
      "# here is a list of the first 30 rooms the robot character visits",
      "# 0=hall, 1=kitchen, 2=stairs, 3=lawn, 4=bedroom"
    ],
    "stanza": 1171
  },
  {
    "role": "code",
    "lines": [
      "list= (sequencer 30 0 (vector)) (vector 4 2 0 3 0 1 0 2 4 2 0 3 0 1 0 2 4 2 0 3 0 1 0 2 4 2 0 3 0 1);"
    ],
    "code": "2100101132210010010032111103203221000033322100003210032103203211320321320321032100321032032113203213203210321003210320321132032132032103210032103203211320321332233",
    "parse": [
      "list=",
      [
        "sequencer",
        30,
        0,
        [
          "vector"
        ]
      ],
      [
        "vector",
        4,
        2,
        0,
        3,
        0,
        1,
        0,
        2,
        4,
        2,
        0,
        3,
        0,
        1,
        0,
        2,
        4,
        2,
        0,
        3,
        0,
        1,
        0,
        2,
        4,
        2,
        0,
        3,
        0,
        1
      ]
    ],
    "stanza": 1172
  },
  {
    "role": "comment",
    "lines": [
      "# Now should start to introduce a language to talk about what is",
      "# going on in the simulated world, and start to move away from",
      "# detailed mechanism"
    ],
    "stanza": 1173
  },
  {
    "role": "file",
    "lines": [
      "== COS_CommentBase2 =="
    ],
    "stanza": 1174
  },
  {
    "role": "comment",
    "lines": [
      "# NOTE end of part 2, start of part 3",
      "# The following parts of the message are the beginnings",
      "# of embedding an alternate visual primer"
    ],
    "section_description": "end of part 2, start of part 3",
    "section_category": "NOTE",
    "section_index": 42,
    "stanza": 1175
  },
  {
    "role": "code",
    "lines": [
      "intro part3;"
    ],
    "code": "203210010010132233",
    "parse": [
      "intro",
      "part3"
    ],
    "stanza": 1176
  },
  {
    "role": "file",
    "lines": [
      "== COS_Unless =="
    ],
    "stanza": 1177
  },
  {
    "role": "comment",
    "lines": [
      "# GATE simulating unless gates",
      "# for embedded image-and-logic-based primer"
    ],
    "section_description": "simulating unless gates",
    "section_category": "GATE",
    "section_index": 43,
    "stanza": 1178
  },
  {
    "role": "comment",
    "lines": [
      "# practice with pure logic gate"
    ],
    "stanza": 1179
  },
  {
    "role": "comment",
    "lines": [
      "# X unless Y = (X if Y=0, otherwise 0)"
    ],
    "stanza": 1180
  },
  {
    "role": "code",
    "lines": [
      "define unless |",
      "  ? x | ? y |",
      "  and (x) (not (y));"
    ],
    "code": "211013210010011030232110032100110302321100321100013023210132210011033221003221100013332233",
    "parse": [
      "define",
      "unless",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "and",
            [
              "x"
            ],
            [
              "not",
              [
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1181
  },
  {
    "role": "comment",
    "lines": [
      "# if second input is true, output is blocked (false)",
      "# if second input is false, output copies first input"
    ],
    "stanza": 1182
  },
  {
    "role": "code",
    "lines": [
      "= (false) (unless (false) (false));"
    ],
    "code": "210322110111332210010011032211011133221101113332233",
    "parse": [
      "=",
      [
        "false"
      ],
      [
        "unless",
        [
          "false"
        ],
        [
          "false"
        ]
      ]
    ],
    "stanza": 1183
  },
  {
    "role": "code",
    "lines": [
      "= (true) (unless (true) (false));"
    ],
    "code": "210322110110332210010011032211011033221101113332233",
    "parse": [
      "=",
      [
        "true"
      ],
      [
        "unless",
        [
          "true"
        ],
        [
          "false"
        ]
      ]
    ],
    "stanza": 1184
  },
  {
    "role": "code",
    "lines": [
      "= (false) (unless (false) (true));"
    ],
    "code": "210322110111332210010011032211011133221101103332233",
    "parse": [
      "=",
      [
        "false"
      ],
      [
        "unless",
        [
          "false"
        ],
        [
          "true"
        ]
      ]
    ],
    "stanza": 1185
  },
  {
    "role": "code",
    "lines": [
      "= (false) (unless (true) (true));"
    ],
    "code": "210322110111332210010011032211011033221101103332233",
    "parse": [
      "=",
      [
        "false"
      ],
      [
        "unless",
        [
          "true"
        ],
        [
          "true"
        ]
      ]
    ],
    "stanza": 1186
  },
  {
    "role": "comment",
    "lines": [
      "# To do: add a simple simulator for non-grid-based",
      "# logic -- much simpler to understand than",
      "# grid-based"
    ],
    "stanza": 1187
  },
  {
    "role": "comment",
    "lines": [
      "# On to a grid-based logic simulation",
      "# first, need unbounded, mutable matrices"
    ],
    "stanza": 1188
  },
  {
    "role": "code",
    "lines": [
      "define make-matrix |",
      "  ? default |",
      "  (make-cell (hash-default (default)));"
    ],
    "code": "2110132100100111302321100321001001030232211011322100100013221001001033332233",
    "parse": [
      "define",
      "make-matrix",
      [
        -1,
        "?",
        "default",
        [
          -1,
          [
            "make-cell",
            [
              "hash-default",
              [
                "default"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1189
  },
  {
    "role": "code",
    "lines": [
      "define matrix-set |",
      "  ? m |",
      "  ? x |",
      "  ? addr |",
      "  set! (m) | hash-add (get! (m)) (addr) (x);"
    ],
    "code": "211013210010100030232110032100101001302321100321001103023211003210010101030232111003221001010013302321000110132211101322100101001333221001010103322100110332233",
    "parse": [
      "define",
      "matrix-set",
      [
        -1,
        "?",
        "m",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "?",
            "addr",
            [
              -1,
              "set!",
              [
                "m"
              ],
              [
                -1,
                "hash-add",
                [
                  "get!",
                  [
                    "m"
                  ]
                ],
                [
                  "addr"
                ],
                [
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1190
  },
  {
    "role": "code",
    "lines": [
      "define matrix-get |",
      "  ? m |",
      "  ? addr |",
      "  hash-ref (get! (m)) (addr);"
    ],
    "code": "2110132100101011302321100321001010013023211003210010101030232100011113221110132210010100133322100101010332233",
    "parse": [
      "define",
      "matrix-get",
      [
        -1,
        "?",
        "m",
        [
          -1,
          "?",
          "addr",
          [
            -1,
            "hash-ref",
            [
              "get!",
              [
                "m"
              ]
            ],
            [
              "addr"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1191
  },
  {
    "role": "code",
    "lines": [
      "define test-matrix",
      "  (make-matrix 0);"
    ],
    "code": "2110132100101100322100100111320332233",
    "parse": [
      "define",
      "test-matrix",
      [
        "make-matrix",
        0
      ]
    ],
    "stanza": 1192
  },
  {
    "role": "code",
    "lines": [
      "= 0 | matrix-get (test-matrix) | vector 1 2 3;"
    ],
    "code": "21032030232100101011322100101100330232100003213210321132233",
    "parse": [
      "=",
      0,
      [
        -1,
        "matrix-get",
        [
          "test-matrix"
        ],
        [
          -1,
          "vector",
          1,
          2,
          3
        ]
      ]
    ],
    "stanza": 1193
  },
  {
    "role": "code",
    "lines": [
      "matrix-set (test-matrix) 10 | vector 1 2 3;"
    ],
    "code": "2100101000322100101100332101030232100003213210321132233",
    "parse": [
      "matrix-set",
      [
        "test-matrix"
      ],
      10,
      [
        -1,
        "vector",
        1,
        2,
        3
      ]
    ],
    "stanza": 1194
  },
  {
    "role": "code",
    "lines": [
      "= 10 | matrix-get (test-matrix) | vector 1 2 3;"
    ],
    "code": "21032101030232100101011322100101100330232100003213210321132233",
    "parse": [
      "=",
      10,
      [
        -1,
        "matrix-get",
        [
          "test-matrix"
        ],
        [
          -1,
          "vector",
          1,
          2,
          3
        ]
      ]
    ],
    "stanza": 1195
  },
  {
    "role": "comment",
    "lines": [
      "# go through a circuit of unless gates and analyze data flow"
    ],
    "stanza": 1196
  },
  {
    "role": "code",
    "lines": [
      "define unless-phase-1 |",
      "  ? circuit |",
      "  assign state (make-matrix (false))",
      "  (begin",
      "    (map ",
      "     (? gate |",
      "    assign x1 (list-ref (gate) 0) |",
      "    assign y1 (list-ref (gate) 1) |",
      "    assign x2 (list-ref (gate) 2) |",
      "    assign y2 (list-ref (gate) 3) |",
      "    assign v (list-ref (gate) 4) |",
      "    (if (= (x1) (x2))",
      "        (begin",
      "          (matrix-set (state) (v) | vector (x2) (y2) vert-value)",
      "          (matrix-set (state) (true) | vector (x2) (y2) vert-have)",
      "          (matrix-set (state) (true) | vector (x1) (y1) vert-want)",
      "          (gate))",
      "        (begin",
      "          (matrix-set (state) (v) | vector (x2) (y2) horiz-value)",
      "          (matrix-set (state) (true) | vector (x2) (y2) horiz-have)",
      "          (matrix-set (state) (true) | vector (x1) (y1) horiz-want)",
      "          (gate))))",
      "     (circuit))",
      "    (state));"
    ],
    "code
    "parse": [
      "define",
      "unless-phase-1",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "assign",
          "state",
          [
            "make-matrix",
            [
              "false"
            ]
          ],
          [
            "begin",
            [
              "map",
              [
                "?",
                "gate",
                [
                  -1,
                  "assign",
                  "x1",
                  [
                    "list-ref",
                    [
                      "gate"
                    ],
                    0
                  ],
                  [
                    -1,
                    "assign",
                    "y1",
                    [
                      "list-ref",
                      [
                        "gate"
                      ],
                      1
                    ],
                    [
                      -1,
                      "assign",
                      "x2",
                      [
                        "list-ref",
                        [
                          "gate"
                        ],
                        2
                      ],
                      [
                        -1,
                        "assign",
                        "y2",
                        [
                          "list-ref",
                          [
                            "gate"
                          ],
                          3
                        ],
                        [
                          -1,
                          "assign",
                          "v",
                          [
                            "list-ref",
                            [
                              "gate"
                            ],
                            4
                          ],
                          [
                            -1,
                            [
                              "if",
                              [
                                "=",
                                [
                                  "x1"
                                ],
                                [
                                  "x2"
                                ]
                              ],
                              [
                                "begin",
                                [
                                  "matrix-set",
                                  [
                                    "state"
                                  ],
                                  [
                                    "v"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x2"
                                    ],
                                    [
                                      "y2"
                                    ],
                                    "vert-value"
                                  ]
                                ],
                                [
                                  "matrix-set",
                                  [
                                    "state"
                                  ],
                                  [
                                    "true"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x2"
                                    ],
                                    [
                                      "y2"
                                    ],
                                    "vert-have"
                                  ]
                                ],
                                [
                                  "matrix-set",
                                  [
                                    "state"
                                  ],
                                  [
                                    "true"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x1"
                                    ],
                                    [
                                      "y1"
                                    ],
                                    "vert-want"
                                  ]
                                ],
                                [
                                  "gate"
                                ]
                              ],
                              [
                                "begin",
                                [
                                  "matrix-set",
                                  [
                                    "state"
                                  ],
                                  [
                                    "v"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x2"
                                    ],
                                    [
                                      "y2"
                                    ],
                                    "horiz-value"
                                  ]
                                ],
                                [
                                  "matrix-set",
                                  [
                                    "state"
                                  ],
                                  [
                                    "true"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x2"
                                    ],
                                    [
                                      "y2"
                                    ],
                                    "horiz-have"
                                  ]
                                ],
                                [
                                  "matrix-set",
                                  [
                                    "state"
                                  ],
                                  [
                                    "true"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x1"
                                    ],
                                    [
                                      "y1"
                                    ],
                                    "horiz-want"
                                  ]
                                ],
                                [
                                  "gate"
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "circuit"
              ]
            ],
            [
              "state"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1197
  },
  {
    "role": "comment",
    "lines": [
      "# move forward one simulation step"
    ],
    "stanza": 1198
  },
  {
    "role": "code",
    "lines": [
      "define unless-phase-2 |",
      "  ? circuit |",
      "  ? state",
      "  (map ",
      "   (? gate |",
      "      assign x1 (list-ref (gate) 0) |",
      "      assign y1 (list-ref (gate) 1) |",
      "      assign x2 (list-ref (gate) 2) |",
      "      assign y2 (list-ref (gate) 3) |",
      "      assign v (list-ref (gate) 4) |",
      "      assign nv (if (= (x1) (x2))",
      "            (if (matrix-get (state) | vector (x1) (y1) vert-have)",
      "            (and (matrix-get (state) |",
      "                     vector (x1) (y1) vert-value)",
      "                 (not (and (matrix-get (state) |",
      "                           vector (x1) (y1) horiz-value)",
      "                       (not (matrix-get (state) |",
      "                            vector (x1) (y1) horiz-want)))))",
      "            (if (matrix-get (state) | vector (x1) (y1) horiz-have)",
      "                (matrix-get (state) | vector (x1) (y1) horiz-value)",
      "                (true)))",
      "            (if (matrix-get (state) | vector (x1) (y1) horiz-have)",
      "            (and (matrix-get (state) | vector (x1) (y1) horiz-value)",
      "                 (not (and (matrix-get (state) |",
      "                           vector (x1) (y1) vert-value)",
      "                       (not (matrix-get (state) |",
      "                            vector (x1) (y1) vert-want)))))",
      "            (if (matrix-get (state) | vector (x1) (y1) vert-have)",
      "                (matrix-get (state) | vector (x1) (y1) vert-value)",
      "                (true)))) |",
      "                vector (x1) (y1) (x2) (y2) (nv))",
      "   (circuit));"
    ],
    "code
    "parse": [
      "define",
      "unless-phase-2",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "?",
          "state",
          [
            "map",
            [
              "?",
              "gate",
              [
                -1,
                "assign",
                "x1",
                [
                  "list-ref",
                  [
                    "gate"
                  ],
                  0
                ],
                [
                  -1,
                  "assign",
                  "y1",
                  [
                    "list-ref",
                    [
                      "gate"
                    ],
                    1
                  ],
                  [
                    -1,
                    "assign",
                    "x2",
                    [
                      "list-ref",
                      [
                        "gate"
                      ],
                      2
                    ],
                    [
                      -1,
                      "assign",
                      "y2",
                      [
                        "list-ref",
                        [
                          "gate"
                        ],
                        3
                      ],
                      [
                        -1,
                        "assign",
                        "v",
                        [
                          "list-ref",
                          [
                            "gate"
                          ],
                          4
                        ],
                        [
                          -1,
                          "assign",
                          "nv",
                          [
                            "if",
                            [
                              "=",
                              [
                                "x1"
                              ],
                              [
                                "x2"
                              ]
                            ],
                            [
                              "if",
                              [
                                "matrix-get",
                                [
                                  "state"
                                ],
                                [
                                  -1,
                                  "vector",
                                  [
                                    "x1"
                                  ],
                                  [
                                    "y1"
                                  ],
                                  "vert-have"
                                ]
                              ],
                              [
                                "and",
                                [
                                  "matrix-get",
                                  [
                                    "state"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x1"
                                    ],
                                    [
                                      "y1"
                                    ],
                                    "vert-value"
                                  ]
                                ],
                                [
                                  "not",
                                  [
                                    "and",
                                    [
                                      "matrix-get",
                                      [
                                        "state"
                                      ],
                                      [
                                        -1,
                                        "vector",
                                        [
                                          "x1"
                                        ],
                                        [
                                          "y1"
                                        ],
                                        "horiz-value"
                                      ]
                                    ],
                                    [
                                      "not",
                                      [
                                        "matrix-get",
                                        [
                                          "state"
                                        ],
                                        [
                                          -1,
                                          "vector",
                                          [
                                            "x1"
                                          ],
                                          [
                                            "y1"
                                          ],
                                          "horiz-want"
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ],
                              [
                                "if",
                                [
                                  "matrix-get",
                                  [
                                    "state"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x1"
                                    ],
                                    [
                                      "y1"
                                    ],
                                    "horiz-have"
                                  ]
                                ],
                                [
                                  "matrix-get",
                                  [
                                    "state"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x1"
                                    ],
                                    [
                                      "y1"
                                    ],
                                    "horiz-value"
                                  ]
                                ],
                                [
                                  "true"
                                ]
                              ]
                            ],
                            [
                              "if",
                              [
                                "matrix-get",
                                [
                                  "state"
                                ],
                                [
                                  -1,
                                  "vector",
                                  [
                                    "x1"
                                  ],
                                  [
                                    "y1"
                                  ],
                                  "horiz-have"
                                ]
                              ],
                              [
                                "and",
                                [
                                  "matrix-get",
                                  [
                                    "state"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x1"
                                    ],
                                    [
                                      "y1"
                                    ],
                                    "horiz-value"
                                  ]
                                ],
                                [
                                  "not",
                                  [
                                    "and",
                                    [
                                      "matrix-get",
                                      [
                                        "state"
                                      ],
                                      [
                                        -1,
                                        "vector",
                                        [
                                          "x1"
                                        ],
                                        [
                                          "y1"
                                        ],
                                        "vert-value"
                                      ]
                                    ],
                                    [
                                      "not",
                                      [
                                        "matrix-get",
                                        [
                                          "state"
                                        ],
                                        [
                                          -1,
                                          "vector",
                                          [
                                            "x1"
                                          ],
                                          [
                                            "y1"
                                          ],
                                          "vert-want"
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ],
                              [
                                "if",
                                [
                                  "matrix-get",
                                  [
                                    "state"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x1"
                                    ],
                                    [
                                      "y1"
                                    ],
                                    "vert-have"
                                  ]
                                ],
                                [
                                  "matrix-get",
                                  [
                                    "state"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x1"
                                    ],
                                    [
                                      "y1"
                                    ],
                                    "vert-value"
                                  ]
                                ],
                                [
                                  "true"
                                ]
                              ]
                            ]
                          ],
                          [
                            -1,
                            "vector",
                            [
                              "x1"
                            ],
                            [
                              "y1"
                            ],
                            [
                              "x2"
                            ],
                            [
                              "y2"
                            ],
                            [
                              "nv"
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ],
            [
              "circuit"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1199
  },
  {
    "role": "comment",
    "lines": [
      "# wrap up both phases of simulation"
    ],
    "stanza": 1200
  },
  {
    "role": "code",
    "lines": [
      "define simulate-unless |",
      "  ? circuit |",
      "  assign state (unless-phase-1 (circuit)) |",
      "  unless-phase-2 (circuit) (state);"
    ],
    "code": "2110132100111101302321100321001011103023211103210010111132210010110132210010111033302321001110113221001011103322100101111332233",
    "parse": [
      "define",
      "simulate-unless",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "assign",
          "state",
          [
            "unless-phase-1",
            [
              "circuit"
            ]
          ],
          [
            -1,
            "unless-phase-2",
            [
              "circuit"
            ],
            [
              "state"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1201
  },
  {
    "role": "comment",
    "lines": [
      "# A circuit is a list of gates",
      "# Each gate is a list (x1 y1 x2 y2 v)",
      "# where the coordinates (x1,y1) and (x2,y2) represent",
      "# start and end points of a wire on a plane, carrying a ",
      "# logic value v.",
      "# Wires copy values from their start point.",
      "#   |  ",
      "#   | (A)",
      "#   V        ",
      "# -->-->",
      "# (B)(C)",
      "#",
      "# Wire C here copies from wire B.",
      "# If wire A is on, it blocks (sets to 0) C."
    ],
    "stanza": 1202
  },
  {
    "role": "code",
    "lines": [
      "assign circuit1",
      "    (vector",
      "     (vector 2 2 4 2 (true))",
      "     (vector 4 2 6 2 (true))",
      "     (vector 6 2 8 2 (true))",
      "     (vector 6 4 6 2 (true))) |",
      "     assign circuit2",
      "     (vector",
      "      (vector 2 2 4 2 (true))",
      "      (vector 4 2 6 2 (true))",
      "      (vector 6 2 8 2 (false))",
      "      (vector 6 4 6 2 (true))) |",
      "      equal (simulate-unless (circuit1)) (circuit2);"
    ],
    "code": "211103210011111032210000322100003210321032100321032211011033322100003210032103211032103221101103332210000321103210321000321032211011033322100003211032100321103210322110110333302321110321001111113221000032210000321032103210032103221101103332210000321003210321103210322110110333221000032110321032100032103221101113332210000321103210032110321032211011033330232100032210011110132210011111033322100111111332233",
    "parse": [
      "assign",
      "circuit1",
      [
        "vector",
        [
          "vector",
          2,
          2,
          4,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          4,
          2,
          6,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          6,
          2,
          8,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          6,
          4,
          6,
          2,
          [
            "true"
          ]
        ]
      ],
      [
        -1,
        "assign",
        "circuit2",
        [
          "vector",
          [
            "vector",
            2,
            2,
            4,
            2,
            [
              "true"
            ]
          ],
          [
            "vector",
            4,
            2,
            6,
            2,
            [
              "true"
            ]
          ],
          [
            "vector",
            6,
            2,
            8,
            2,
            [
              "false"
            ]
          ],
          [
            "vector",
            6,
            4,
            6,
            2,
            [
              "true"
            ]
          ]
        ],
        [
          -1,
          "equal",
          [
            "simulate-unless",
            [
              "circuit1"
            ]
          ],
          [
            "circuit2"
          ]
        ]
      ]
    ],
    "stanza": 1203
  },
  {
    "role": "comment",
    "lines": [
      "# okay, now let us make a simple image class",
      "# we are going to encode each row as a single binary number,",
      "# rather than a vector, so that images will be pretty",
      "# obvious in the raw, uninterpreted message"
    ],
    "stanza": 1204
  },
  {
    "role": "code",
    "lines": [
      "define bit-get |",
      "  lambda (n offset) |",
      "  assign div2 (div (n) 2) ",
      "  (if (= 0 | offset)",
      "      (not | = (n) | * 2 | div2)",
      "      (bit-get (div2) | - (offset) 1));"
    ],
    "code": "2110132101000000302321101032211101132101000001330232111032101000010322100010322111011332103322111132210320302321010000013322100302321032211101133023210013210302321010000103322101000000322101000010330232101132210100000133213332233",
    "parse": [
      "define",
      "bit-get",
      [
        -1,
        "lambda",
        [
          "n",
          "offset"
        ],
        [
          -1,
          "assign",
          "div2",
          [
            "div",
            [
              "n"
            ],
            2
          ],
          [
            "if",
            [
              "=",
              0,
              [
                -1,
                "offset"
              ]
            ],
            [
              "not",
              [
                -1,
                "=",
                [
                  "n"
                ],
                [
                  -1,
                  "*",
                  2,
                  [
                    -1,
                    "div2"
                  ]
                ]
              ]
            ],
            [
              "bit-get",
              [
                "div2"
              ],
              [
                -1,
                "-",
                [
                  "offset"
                ],
                1
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1205
  },
  {
    "role": "code",
    "lines": [
      "= 0 | bit-get (::.) 0;"
    ],
    "code": "210320302321010000003211032032233",
    "parse": [
      "=",
      0,
      [
        -1,
        "bit-get",
        [
          "::."
        ],
        0
      ]
    ],
    "stanza": 1206
  },
  {
    "role": "code",
    "lines": [
      "= 1 | bit-get (::.) 1;"
    ],
    "code": "210321302321010000003211032132233",
    "parse": [
      "=",
      1,
      [
        -1,
        "bit-get",
        [
          "::."
        ],
        1
      ]
    ],
    "stanza": 1207
  },
  {
    "role": "code",
    "lines": [
      "= 1 | bit-get (::.) 2;"
    ],
    "code": "2103213023210100000032110321032233",
    "parse": [
      "=",
      1,
      [
        -1,
        "bit-get",
        [
          "::."
        ],
        2
      ]
    ],
    "stanza": 1208
  },
  {
    "role": "code",
    "lines": [
      "= 0 | bit-get (::.) 3;"
    ],
    "code": "2103203023210100000032110321132233",
    "parse": [
      "=",
      0,
      [
        -1,
        "bit-get",
        [
          "::."
        ],
        3
      ]
    ],
    "stanza": 1209
  },
  {
    "role": "code",
    "lines": [
      "= 0 | bit-get (::.) 4;"
    ],
    "code": "21032030232101000000321103210032233",
    "parse": [
      "=",
      0,
      [
        -1,
        "bit-get",
        [
          "::."
        ],
        4
      ]
    ],
    "stanza": 1210
  },
  {
    "role": "code",
    "lines": [
      "= 0 | bit-get 8 0;"
    ],
    "code": "2103203023210100000032100032032233",
    "parse": [
      "=",
      0,
      [
        -1,
        "bit-get",
        8,
        0
      ]
    ],
    "stanza": 1211
  },
  {
    "role": "code",
    "lines": [
      "= 0 | bit-get 8 1;"
    ],
    "code": "2103203023210100000032100032132233",
    "parse": [
      "=",
      0,
      [
        -1,
        "bit-get",
        8,
        1
      ]
    ],
    "stanza": 1212
  },
  {
    "role": "code",
    "lines": [
      "= 0 | bit-get 8 2;"
    ],
    "code": "21032030232101000000321000321032233",
    "parse": [
      "=",
      0,
      [
        -1,
        "bit-get",
        8,
        2
      ]
    ],
    "stanza": 1213
  },
  {
    "role": "code",
    "lines": [
      "= 1 | bit-get 8 3;"
    ],
    "code": "21032130232101000000321000321132233",
    "parse": [
      "=",
      1,
      [
        -1,
        "bit-get",
        8,
        3
      ]
    ],
    "stanza": 1214
  },
  {
    "role": "code",
    "lines": [
      "define make-image |",
      "  lambda (h w lst) |",
      "  vector (h) (w) (lst);"
    ],
    "code": "2110132101000011302321101032210001110321010001003210001103302321000032210001110332210100010033221000110332233",
    "parse": [
      "define",
      "make-image",
      [
        -1,
        "lambda",
        [
          "h",
          "w",
          "lst"
        ],
        [
          -1,
          "vector",
          [
            "h"
          ],
          [
            "w"
          ],
          [
            "lst"
          ]
        ]
      ]
    ],
    "stanza": 1215
  },
  {
    "role": "code",
    "lines": [
      "define image-get |",
      "  lambda (image row col) |",
      "  assign h (list-ref (image) 0) |",
      "  assign w (list-ref (image) 1) |",
      "  assign lst (list-ref (image) 2) |",
      "  assign bits (list-ref (lst) (row)) |",
      "  bit-get (bits) (- (- (w) (col)) 1);"
    ],
    "code": "21101321010001013023211010322101000110321010001113210100100033023211103210001110322100100132210100011033203302321110321010001003221001001322101000110332133023211103210001103221001001322101000110332103302321110321010010013221001001322100011033221010001113330232101000000322101001001332210113221011322101000100332210100100033321332233",
    "parse": [
      "define",
      "image-get",
      [
        -1,
        "lambda",
        [
          "image",
          "row",
          "col"
        ],
        [
          -1,
          "assign",
          "h",
          [
            "list-ref",
            [
              "image"
            ],
            0
          ],
          [
            -1,
            "assign",
            "w",
            [
              "list-ref",
              [
                "image"
              ],
              1
            ],
            [
              -1,
              "assign",
              "lst",
              [
                "list-ref",
                [
                  "image"
                ],
                2
              ],
              [
                -1,
                "assign",
                "bits",
                [
                  "list-ref",
                  [
                    "lst"
                  ],
                  [
                    "row"
                  ]
                ],
                [
                  -1,
                  "bit-get",
                  [
                    "bits"
                  ],
                  [
                    "-",
                    [
                      "-",
                      [
                        "w"
                      ],
                      [
                        "col"
                      ]
                    ],
                    1
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1216
  },
  {
    "role": "code",
    "lines": [
      "define image-height |",
      "  ? image |",
      "  list-ref (image) 0;"
    ],
    "code": "211013210100101030232110032101000110302321001001322101000110332032233",
    "parse": [
      "define",
      "image-height",
      [
        -1,
        "?",
        "image",
        [
          -1,
          "list-ref",
          [
            "image"
          ],
          0
        ]
      ]
    ],
    "stanza": 1217
  },
  {
    "role": "code",
    "lines": [
      "define image-width |",
      "  ? image |",
      "  list-ref (image) 1;"
    ],
    "code": "211013210100101130232110032101000110302321001001322101000110332132233",
    "parse": [
      "define",
      "image-width",
      [
        -1,
        "?",
        "image",
        [
          -1,
          "list-ref",
          [
            "image"
          ],
          1
        ]
      ]
    ],
    "stanza": 1218
  },
  {
    "role": "code",
    "lines": [
      "define test-image |",
      "  make-image 3 5 |",
      "  vector (:....) (:...:) (:....);"
    ],
    "code": "211013210100110030232101000011321132101302321000032100003210001321000032233",
    "parse": [
      "define",
      "test-image",
      [
        -1,
        "make-image",
        3,
        5,
        [
          -1,
          "vector",
          [
            ":...."
          ],
          [
            ":...:"
          ],
          [
            ":...."
          ]
        ]
      ]
    ],
    "stanza": 1219
  },
  {
    "role": "code",
    "lines": [
      "= 3 (image-height | test-image);"
    ],
    "code": "210321132210100101030232101001100332233",
    "parse": [
      "=",
      3,
      [
        "image-height",
        [
          -1,
          "test-image"
        ]
      ]
    ],
    "stanza": 1220
  },
  {
    "role": "code",
    "lines": [
      "= 5 (image-width | test-image);"
    ],
    "code": "2103210132210100101130232101001100332233",
    "parse": [
      "=",
      5,
      [
        "image-width",
        [
          -1,
          "test-image"
        ]
      ]
    ],
    "stanza": 1221
  },
  {
    "role": "code",
    "lines": [
      "= (true) (image-get (test-image) 0 0);"
    ],
    "code": "21032211011033221010001013221010011003320320332233",
    "parse": [
      "=",
      [
        "true"
      ],
      [
        "image-get",
        [
          "test-image"
        ],
        0,
        0
      ]
    ],
    "stanza": 1222
  },
  {
    "role": "code",
    "lines": [
      "= (false) (image-get (test-image) 0 1);"
    ],
    "code": "21032211011133221010001013221010011003320321332233",
    "parse": [
      "=",
      [
        "false"
      ],
      [
        "image-get",
        [
          "test-image"
        ],
        0,
        1
      ]
    ],
    "stanza": 1223
  },
  {
    "role": "code",
    "lines": [
      "= (false) (image-get (test-image) 0 4);"
    ],
    "code": "2103221101113322101000101322101001100332032100332233",
    "parse": [
      "=",
      [
        "false"
      ],
      [
        "image-get",
        [
          "test-image"
        ],
        0,
        4
      ]
    ],
    "stanza": 1224
  },
  {
    "role": "code",
    "lines": [
      "= (true) (image-get (test-image) 1 0);"
    ],
    "code": "21032211011033221010001013221010011003321320332233",
    "parse": [
      "=",
      [
        "true"
      ],
      [
        "image-get",
        [
          "test-image"
        ],
        1,
        0
      ]
    ],
    "stanza": 1225
  },
  {
    "role": "code",
    "lines": [
      "= (true) (image-get (test-image) 2 0);"
    ],
    "code": "210322110110332210100010132210100110033210320332233",
    "parse": [
      "=",
      [
        "true"
      ],
      [
        "image-get",
        [
          "test-image"
        ],
        2,
        0
      ]
    ],
    "stanza": 1226
  },
  {
    "role": "code",
    "lines": [
      "= (true) (image-get (test-image) 1 4);"
    ],
    "code": "2103221101103322101000101322101001100332132100332233",
    "parse": [
      "=",
      [
        "true"
      ],
      [
        "image-get",
        [
          "test-image"
        ],
        1,
        4
      ]
    ],
    "stanza": 1227
  },
  {
    "role": "comment",
    "lines": [
      "# need a way to join two lists"
    ],
    "stanza": 1228
  },
  {
    "role": "code",
    "lines": [
      "define merge-list |",
      "  ? lst1 |",
      "  ? lst2 |",
      "  (if (> (list-length | lst1) 0)",
      "      (prepend (head | lst1) (merge-list (tail | lst1) (lst2)))",
      "      (lst2));"
    ],
    "code": "2110132101001101302321100321101100130232110032110110103023221111322113221001000302321101100133203322100101032210001013023211011001332210100110132210001113023211011001332211011010333322110110103332233",
    "parse": [
      "define",
      "merge-list",
      [
        -1,
        "?",
        "lst1",
        [
          -1,
          "?",
          "lst2",
          [
            -1,
            [
              "if",
              [
                ">",
                [
                  "list-length",
                  [
                    -1,
                    "lst1"
                  ]
                ],
                0
              ],
              [
                "prepend",
                [
                  "head",
                  [
                    -1,
                    "lst1"
                  ]
                ],
                [
                  "merge-list",
                  [
                    "tail",
                    [
                      -1,
                      "lst1"
                    ]
                  ],
                  [
                    "lst2"
                  ]
                ]
              ],
              [
                "lst2"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1229
  },
  {
    "role": "code",
    "lines": [
      "define merge-lists |",
      "  ? lst |",
      "  (if (> (list-length | lst) 2)",
      "      (merge-list (head | lst) (merge-lists | tail | lst))",
      "      (if (= (list-length | lst) 2)",
      "      (merge-list (head | lst) | (head | tail | lst))",
      "      (if (= (list-length | lst) 1)",
      "          (head | lst)",
      "          (vector))));"
    ],
    "code": "2110132101001110302321100321000110302322111132211322100100030232100011033210332210100110132210001013023210001103322101001110302321000111302321000110333221111322103221001000302321000110332103322101001101322100010130232100011033023221000101302321000111302321000110333221111322103221001000302321000110332133221000101302321000110332210000333332233",
    "parse": [
      "define",
      "merge-lists",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          [
            "if",
            [
              ">",
              [
                "list-length",
                [
                  -1,
                  "lst"
                ]
              ],
              2
            ],
            [
              "merge-list",
              [
                "head",
                [
                  -1,
                  "lst"
                ]
              ],
              [
                "merge-lists",
                [
                  -1,
                  "tail",
                  [
                    -1,
                    "lst"
                  ]
                ]
              ]
            ],
            [
              "if",
              [
                "=",
                [
                  "list-length",
                  [
                    -1,
                    "lst"
                  ]
                ],
                2
              ],
              [
                "merge-list",
                [
                  "head",
                  [
                    -1,
                    "lst"
                  ]
                ],
                [
                  -1,
                  [
                    "head",
                    [
                      -1,
                      "tail",
                      [
                        -1,
                        "lst"
                      ]
                    ]
                  ]
                ]
              ],
              [
                "if",
                [
                  "=",
                  [
                    "list-length",
                    [
                      -1,
                      "lst"
                    ]
                  ],
                  1
                ],
                [
                  "head",
                  [
                    -1,
                    "lst"
                  ]
                ],
                [
                  "vector"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1230
  },
  {
    "role": "code",
    "lines": [
      "equal (vector 1 2 3 4) (merge-list (vector 1 2) (vector 3 4));"
    ],
    "code": "2100032210000321321032113210033221010011013221000032132103322100003211321003332233",
    "parse": [
      "equal",
      [
        "vector",
        1,
        2,
        3,
        4
      ],
      [
        "merge-list",
        [
          "vector",
          1,
          2
        ],
        [
          "vector",
          3,
          4
        ]
      ]
    ],
    "stanza": 1231
  },
  {
    "role": "code",
    "lines": [
      "equal (vector 1 2 3 4) (merge-lists (vector (vector 1 2) (vector 3) (vector 4)));"
    ],
    "code": "2100032210000321321032113210033221010011103221000032210000321321033221000032113322100003210033332233",
    "parse": [
      "equal",
      [
        "vector",
        1,
        2,
        3,
        4
      ],
      [
        "merge-lists",
        [
          "vector",
          [
            "vector",
            1,
            2
          ],
          [
            "vector",
            3
          ],
          [
            "vector",
            4
          ]
        ]
      ]
    ],
    "stanza": 1232
  },
  {
    "role": "comment",
    "lines": [
      "# helper for pairing"
    ],
    "stanza": 1233
  },
  {
    "role": "code",
    "lines": [
      "define prefix |",
      "  ? x | ",
      "  ? lst |",
      "  map (? y (vector (x) (y))) (lst);"
    ],
    "code": "2110132101001111302321100321001103023211003210001103023211000003221100321100013221000032210011033221100013333221000110332233",
    "parse": [
      "define",
      "prefix",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "lst",
          [
            -1,
            "map",
            [
              "?",
              "y",
              [
                "vector",
                [
                  "x"
                ],
                [
                  "y"
                ]
              ]
            ],
            [
              "lst"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1234
  },
  {
    "role": "code",
    "lines": [
      "equal (vector (vector 1 10) (vector 1 11))",
      "       (prefix 1 (vector 10 11));"
    ],
    "code": "21000322100003221000032132101033221000032132101133322101001111321322100003210103210113332233",
    "parse": [
      "equal",
      [
        "vector",
        [
          "vector",
          1,
          10
        ],
        [
          "vector",
          1,
          11
        ]
      ],
      [
        "prefix",
        1,
        [
          "vector",
          10,
          11
        ]
      ]
    ],
    "stanza": 1235
  },
  {
    "role": "comment",
    "lines": [
      "# need a way to take product of domains"
    ],
    "stanza": 1236
  },
  {
    "role": "code",
    "lines": [
      "define pairing |",
      "  ? lst1 | ",
      "  ? lst2",
      "  (if (> (list-length | lst1) 0)",
      "      (merge-list (prefix (head | lst1) (lst2))",
      "          (pairing (tail | lst1) (lst2)))",
      "      (vector));"
    ],
    "code": "2110132101010000302321100321101100130232110032110110103221111322113221001000302321101100133203322101001101322101001111322100010130232110110013322110110103332210101000032210001113023211011001332211011010333322100003332233",
    "parse": [
      "define",
      "pairing",
      [
        -1,
        "?",
        "lst1",
        [
          -1,
          "?",
          "lst2",
          [
            "if",
            [
              ">",
              [
                "list-length",
                [
                  -1,
                  "lst1"
                ]
              ],
              0
            ],
            [
              "merge-list",
              [
                "prefix",
                [
                  "head",
                  [
                    -1,
                    "lst1"
                  ]
                ],
                [
                  "lst2"
                ]
              ],
              [
                "pairing",
                [
                  "tail",
                  [
                    -1,
                    "lst1"
                  ]
                ],
                [
                  "lst2"
                ]
              ]
            ],
            [
              "vector"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1237
  },
  {
    "role": "code",
    "lines": [
      "equal (vector (vector 1 10) (vector 1 11) (vector 2 10) (vector 2 11))",
      "       (pairing (vector 1 2) (vector 10 11));"
    ],
    "code": "21000322100003221000032132101033221000032132101133221000032103210103322100003210321011333221010100003221000032132103322100003210103210113332233",
    "parse": [
      "equal",
      [
        "vector",
        [
          "vector",
          1,
          10
        ],
        [
          "vector",
          1,
          11
        ],
        [
          "vector",
          2,
          10
        ],
        [
          "vector",
          2,
          11
        ]
      ],
      [
        "pairing",
        [
          "vector",
          1,
          2
        ],
        [
          "vector",
          10,
          11
        ]
      ]
    ],
    "stanza": 1238
  },
  {
    "role": "comment",
    "lines": [
      "# need a way to make counting sets"
    ],
    "stanza": 1239
  },
  {
    "role": "code",
    "lines": [
      "define count |",
      "  ? lo | ? hi",
      "  (if (<= (lo) (hi))",
      "      (prepend (lo) (count (+ (lo) 1) (hi)))",
      "      (vector));"
    ],
    "code": "211013211010110302321100321010100013023211003210101001032211113221111013221010100013322101010010333221001010322101010001332211010110322101032210101000133213322101010010333322100003332233",
    "parse": [
      "define",
      "count",
      [
        -1,
        "?",
        "lo",
        [
          -1,
          "?",
          "hi",
          [
            "if",
            [
              "<=",
              [
                "lo"
              ],
              [
                "hi"
              ]
            ],
            [
              "prepend",
              [
                "lo"
              ],
              [
                "count",
                [
                  "+",
                  [
                    "lo"
                  ],
                  1
                ],
                [
                  "hi"
                ]
              ]
            ],
            [
              "vector"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1240
  },
  {
    "role": "code",
    "lines": [
      "equal (vector 0 1 2 3 4) (count 0 4);"
    ],
    "code": "2100032210000320321321032113210033221101011032032100332233",
    "parse": [
      "equal",
      [
        "vector",
        0,
        1,
        2,
        3,
        4
      ],
      [
        "count",
        0,
        4
      ]
    ],
    "stanza": 1241
  },
  {
    "role": "comment",
    "lines": [
      "# given an image of a circuit, extract a model.",
      "# wire elements are centered on multiples of 8"
    ],
    "stanza": 1242
  },
  {
    "role": "comment",
    "lines": [
      "# individual element..."
    ],
    "stanza": 1243
  },
  {
    "role": "code",
    "lines": [
      "define distill-element |",
      "  ? image | ? xlogic | ? ylogic | ? xmid | ? ymid ",
      "  (if (image-get (image) (ymid) (xmid))",
      "      (assign vert (image-get (image) (+ (ymid) 4) (xmid)) |",
      "          assign dx (if (vert) 0 1) |",
      "          assign dy (if (vert) 1 0) |",
      "          assign pos (image-get (image) ",
      "                    (+ (ymid) | + (* 4 | dy) (* 2 | dx))",
      "                    (+ (xmid) | - (* 4 | dx) (* 2 | dy))) |",
      "          assign sgn (if (pos) 1 (- 0 1)) |",
      "          assign dx (* (sgn) (dx)) |",
      "          assign dy (* (sgn) (dy)) |",
      "          assign active (image-get (image) (+ (ymid) (dx)) (- (xmid) (dy))) |",
      "          (vector ",
      "           (vector (- (xlogic) (dx)) ",
      "               (- (ylogic) (dy))",
      "               (+ (xlogic) (dx))",
      "               (+ (ylogic) (dy))",
      "               (active))))",
      "      (vector));"
    ],
    "code
    "parse": [
      "define",
      "distill-element",
      [
        -1,
        "?",
        "image",
        [
          -1,
          "?",
          "xlogic",
          [
            -1,
            "?",
            "ylogic",
            [
              -1,
              "?",
              "xmid",
              [
                -1,
                "?",
                "ymid",
                [
                  "if",
                  [
                    "image-get",
                    [
                      "image"
                    ],
                    [
                      "ymid"
                    ],
                    [
                      "xmid"
                    ]
                  ],
                  [
                    "assign",
                    "vert",
                    [
                      "image-get",
                      [
                        "image"
                      ],
                      [
                        "+",
                        [
                          "ymid"
                        ],
                        4
                      ],
                      [
                        "xmid"
                      ]
                    ],
                    [
                      -1,
                      "assign",
                      "dx",
                      [
                        "if",
                        [
                          "vert"
                        ],
                        0,
                        1
                      ],
                      [
                        -1,
                        "assign",
                        "dy",
                        [
                          "if",
                          [
                            "vert"
                          ],
                          1,
                          0
                        ],
                        [
                          -1,
                          "assign",
                          "pos",
                          [
                            "image-get",
                            [
                              "image"
                            ],
                            [
                              "+",
                              [
                                "ymid"
                              ],
                              [
                                -1,
                                "+",
                                [
                                  "*",
                                  4,
                                  [
                                    -1,
                                    "dy"
                                  ]
                                ],
                                [
                                  "*",
                                  2,
                                  [
                                    -1,
                                    "dx"
                                  ]
                                ]
                              ]
                            ],
                            [
                              "+",
                              [
                                "xmid"
                              ],
                              [
                                -1,
                                "-",
                                [
                                  "*",
                                  4,
                                  [
                                    -1,
                                    "dx"
                                  ]
                                ],
                                [
                                  "*",
                                  2,
                                  [
                                    -1,
                                    "dy"
                                  ]
                                ]
                              ]
                            ]
                          ],
                          [
                            -1,
                            "assign",
                            "sgn",
                            [
                              "if",
                              [
                                "pos"
                              ],
                              1,
                              [
                                "-",
                                0,
                                1
                              ]
                            ],
                            [
                              -1,
                              "assign",
                              "dx",
                              [
                                "*",
                                [
                                  "sgn"
                                ],
                                [
                                  "dx"
                                ]
                              ],
                              [
                                -1,
                                "assign",
                                "dy",
                                [
                                  "*",
                                  [
                                    "sgn"
                                  ],
                                  [
                                    "dy"
                                  ]
                                ],
                                [
                                  -1,
                                  "assign",
                                  "active",
                                  [
                                    "image-get",
                                    [
                                      "image"
                                    ],
                                    [
                                      "+",
                                      [
                                        "ymid"
                                      ],
                                      [
                                        "dx"
                                      ]
                                    ],
                                    [
                                      "-",
                                      [
                                        "xmid"
                                      ],
                                      [
                                        "dy"
                                      ]
                                    ]
                                  ],
                                  [
                                    -1,
                                    [
                                      "vector",
                                      [
                                        "vector",
                                        [
                                          "-",
                                          [
                                            "xlogic"
                                          ],
                                          [
                                            "dx"
                                          ]
                                        ],
                                        [
                                          "-",
                                          [
                                            "ylogic"
                                          ],
                                          [
                                            "dy"
                                          ]
                                        ],
                                        [
                                          "+",
                                          [
                                            "xlogic"
                                          ],
                                          [
                                            "dx"
                                          ]
                                        ],
                                        [
                                          "+",
                                          [
                                            "ylogic"
                                          ],
                                          [
                                            "dy"
                                          ]
                                        ],
                                        [
                                          "active"
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ],
                  [
                    "vector"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1244
  },
  {
    "role": "comment",
    "lines": [
      "# full circuit..."
    ],
    "stanza": 1245
  },
  {
    "role": "code",
    "lines": [
      "define distill-circuit |",
      "  ? image |",
      "  assign h (div (image-height | image) 8) |",
      "  assign w (div (image-width | image) 8) ",
      "  (merge-lists",
      "   (map (? v |",
      "       assign xlogic (list-ref (v) 0) |",
      "       assign ylogic (list-ref (v) 1) |",
      "       assign xmid (* 8 | xlogic) |",
      "       assign ymid (* 8 | ylogic) |",
      "       distill-element (image) (xlogic) (ylogic) (xmid) (ymid))",
      "    (pairing (count 1 (- (w) 1))",
      "         (count 1 (- (h) 1)))));"
    ],
    "code": "2110132101011110302321100321010001103023211103210001110322100010322101001010302321010001103321000330232111032101000100322100010322101001011302321010001103321000332210100111032211000003221100321010013023211103210101010032210010013221010013320330232111032101010101322100100132210100133213302321110321010101103221001321000302321010101003302321110321010101113221001321000302321010101013302321010100113221010001103322101010100332210101010133221010101103322101010111333221010100003221101011032132210113221010001003321333221101011032132210113221000111033213333332233",
    "parse": [
      "define",
      "distill-circuit",
      [
        -1,
        "?",
        "image",
        [
          -1,
          "assign",
          "h",
          [
            "div",
            [
              "image-height",
              [
                -1,
                "image"
              ]
            ],
            8
          ],
          [
            -1,
            "assign",
            "w",
            [
              "div",
              [
                "image-width",
                [
                  -1,
                  "image"
                ]
              ],
              8
            ],
            [
              "merge-lists",
              [
                "map",
                [
                  "?",
                  "v",
                  [
                    -1,
                    "assign",
                    "xlogic",
                    [
                      "list-ref",
                      [
                        "v"
                      ],
                      0
                    ],
                    [
                      -1,
                      "assign",
                      "ylogic",
                      [
                        "list-ref",
                        [
                          "v"
                        ],
                        1
                      ],
                      [
                        -1,
                        "assign",
                        "xmid",
                        [
                          "*",
                          8,
                          [
                            -1,
                            "xlogic"
                          ]
                        ],
                        [
                          -1,
                          "assign",
                          "ymid",
                          [
                            "*",
                            8,
                            [
                              -1,
                              "ylogic"
                            ]
                          ],
                          [
                            -1,
                            "distill-element",
                            [
                              "image"
                            ],
                            [
                              "xlogic"
                            ],
                            [
                              "ylogic"
                            ],
                            [
                              "xmid"
                            ],
                            [
                              "ymid"
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  "pairing",
                  [
                    "count",
                    1,
                    [
                      "-",
                      [
                        "w"
                      ],
                      1
                    ]
                  ],
                  [
                    "count",
                    1,
                    [
                      "-",
                      [
                        "h"
                      ],
                      1
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1246
  },
  {
    "role": "file",
    "lines": [
      "== COS_NOT =="
    ],
    "stanza": 1247
  },
  {
    "role": "comment",
    "lines": [
      "# GATE testing alternate primer based on gates: cos_not circuit",
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_not circuit",
    "section_category": "GATE",
    "section_index": 44,
    "stanza": 1248
  },
  {
    "role": "code",
    "lines": [
      "define cos_not_gate | vector ",
      "  (vector 0 6 2 6 (true))",
      "  (vector 2 6 4 6 (true))",
      "  (vector 4 6 6 6 (true))",
      "  (vector 6 6 8 6 (true))",
      "  (vector 8 4 8 6 (true))",
      "  (vector 8 6 8 8 (false))",
      "  (vector 8 8 10 8 (false))",
      "  (vector 10 8 12 8 (false))",
      "  (vector 12 8 12 6 (false))",
      "  (vector 12 6 14 6 (false))",
      "  (vector 14 6 16 6 (false))",
      "  (vector 16 6 18 6 (false))",
      "  (vector 18 6 20 6 (false));"
    ],
    "code
    "parse": [
      "define",
      "cos_not_gate",
      [
        -1,
        "vector",
        [
          "vector",
          0,
          6,
          2,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          2,
          6,
          4,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          4,
          6,
          6,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          6,
          6,
          8,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          8,
          4,
          8,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          8,
          6,
          8,
          8,
          [
            "false"
          ]
        ],
        [
          "vector",
          8,
          8,
          10,
          8,
          [
            "false"
          ]
        ],
        [
          "vector",
          10,
          8,
          12,
          8,
          [
            "false"
          ]
        ],
        [
          "vector",
          12,
          8,
          12,
          6,
          [
            "false"
          ]
        ],
        [
          "vector",
          12,
          6,
          14,
          6,
          [
            "false"
          ]
        ],
        [
          "vector",
          14,
          6,
          16,
          6,
          [
            "false"
          ]
        ],
        [
          "vector",
          16,
          6,
          18,
          6,
          [
            "false"
          ]
        ],
        [
          "vector",
          18,
          6,
          20,
          6,
          [
            "false"
          ]
        ]
      ]
    ],
    "stanza": 1249
  },
  {
    "role": "code",
    "lines": [
      "define cos_not_image | make-image 109 169 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:.............................................................:::::.....................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:...........:...............:...............:...............:...:...........................................:...............:...............:...............:...........:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..........:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..........:)",
      "  (:...........:...............:...............:...............:...................................:...........:...............:...............:...............:...........:)",
      "  (:...............................................................:..............................:::......................................................................:)",
      "  (:...............................................................:.............................:::::.....................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:.............................................................:::::.............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:...............................................................:...........:...............:...........................................................................:)",
      "  (:...........................................................................::..............::..........................................................................:)",
      "  (:..................................................................::::::::::::....::::::::::::.........................................................................:)",
      "  (:...........................................................................::..............::..........................................................................:)",
      "  (:...........................................................................:...............:...........................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "code": "",
    "parse": [
      "define",
      "cos_not_image",
      [
        -1,
        "make-image",
        109,
        169,
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":.............................................................:::::.....................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...:...........................................:...............:...............:...............:...........:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..........:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....::::::::::::....................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..........:"
          ],
          [
            ":...........:...............:...............:...............:...................................:...........:...............:...............:...............:...........:"
          ],
          [
            ":...............................................................:..............................:::......................................................................:"
          ],
          [
            ":...............................................................:.............................:::::.....................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":.............................................................:::::.............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":...............................................................:...........:...............:...........................................................................:"
          ],
          [
            ":...........................................................................::..............::..........................................................................:"
          ],
          [
            ":..................................................................::::::::::::....::::::::::::.........................................................................:"
          ],
          [
            ":...........................................................................::..............::..........................................................................:"
          ],
          [
            ":...........................................................................:...............:...........................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "stanza": 1250
  },
  {
    "role": "code",
    "lines": [
      "equal (cos_not_gate) (distill-circuit (cos_not_image));"
    ],
    "code": "2100032210101111133221010111103221011000003332233",
    "parse": [
      "equal",
      [
        "cos_not_gate"
      ],
      [
        "distill-circuit",
        [
          "cos_not_image"
        ]
      ]
    ],
    "stanza": 1251
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_NOT.gate",
      "13 6 1 0 0",
      "3 6 1 0 1",
      "1 6 1 0 1",
      "15 6 1 0 0",
      "11 8 1 0 0",
      "5 6 1 0 1",
      "9 8 1 0 0",
      "12 7 0 -1 0",
      "17 6 1 0 0",
      "8 7 0 1 0",
      "19 6 1 0 0",
      "8 5 0 1 1",
      "7 6 1 0 1"
    ],
    "thumbnail": "COS_NOT.gif",
    "page": "COS_NOT.html",
    "stanza": 1252
  },
  {
    "role": "file",
    "lines": [
      "== COS_AND =="
    ],
    "stanza": 1253
  },
  {
    "role": "comment",
    "lines": [
      "# GATE testing alternate primer based on gates: cos_and circuit",
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_and circuit",
    "section_category": "GATE",
    "section_index": 45,
    "stanza": 1254
  },
  {
    "role": "code",
    "lines": [
      "define cos_and_gate | vector ",
      "  (vector 0 2 2 2 (true))",
      "  (vector 0 8 2 8 (true))",
      "  (vector 2 2 4 2 (true))",
      "  (vector 2 4 4 4 (true))",
      "  (vector 2 6 4 6 (true))",
      "  (vector 2 8 4 8 (true))",
      "  (vector 4 2 4 4 (true))",
      "  (vector 4 8 4 6 (true))",
      "  (vector 4 4 6 4 (false))",
      "  (vector 4 6 6 6 (false))",
      "  (vector 6 4 8 4 (false))",
      "  (vector 6 6 8 6 (false))",
      "  (vector 8 4 10 4 (false))",
      "  (vector 8 6 10 6 (false))",
      "  (vector 10 2 10 4 (true))",
      "  (vector 10 4 10 6 (true))",
      "  (vector 10 6 10 8 (true))",
      "  (vector 10 8 12 8 (true))",
      "  (vector 12 8 14 8 (true))",
      "  (vector 14 8 16 8 (true))",
      "  (vector 16 8 18 8 (true));"
    ],
    "code
    "parse": [
      "define",
      "cos_and_gate",
      [
        -1,
        "vector",
        [
          "vector",
          0,
          2,
          2,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          0,
          8,
          2,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          2,
          2,
          4,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          2,
          4,
          4,
          4,
          [
            "true"
          ]
        ],
        [
          "vector",
          2,
          6,
          4,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          2,
          8,
          4,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          4,
          2,
          4,
          4,
          [
            "true"
          ]
        ],
        [
          "vector",
          4,
          8,
          4,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          4,
          4,
          6,
          4,
          [
            "false"
          ]
        ],
        [
          "vector",
          4,
          6,
          6,
          6,
          [
            "false"
          ]
        ],
        [
          "vector",
          6,
          4,
          8,
          4,
          [
            "false"
          ]
        ],
        [
          "vector",
          6,
          6,
          8,
          6,
          [
            "false"
          ]
        ],
        [
          "vector",
          8,
          4,
          10,
          4,
          [
            "false"
          ]
        ],
        [
          "vector",
          8,
          6,
          10,
          6,
          [
            "false"
          ]
        ],
        [
          "vector",
          10,
          2,
          10,
          4,
          [
            "true"
          ]
        ],
        [
          "vector",
          10,
          4,
          10,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          10,
          6,
          10,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          10,
          8,
          12,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          12,
          8,
          14,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          14,
          8,
          16,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          16,
          8,
          18,
          8,
          [
            "true"
          ]
        ]
      ]
    ],
    "stanza": 1255
  },
  {
    "role": "code",
    "lines": [
      "define cos_and_image | make-image 88 153 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:...........:...............:...........................................................................................................................:)",
      "  (:..:::::::::::.....:::::::::::..........................................................................................................................:)",
      "  (:..::::::::::::....::::::::::::.........................................................................................................................:)",
      "  (:..:::::::::::.....:::::::::::..........................................................................................................................:)",
      "  (:...........:...............:...........................................................................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:.............................:::::...........................................:::::.....................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:...........................:...:...........:...............:...............:...:.......................................................................:)",
      "  (:..................:::::::::::..............::..............::..............::..........................................................................:)",
      "  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)",
      "  (:..................:::::::::::..............::..............::..............::..........................................................................:)",
      "  (:...........................:...............:...............:...............:...........................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:.............................................................................:::::.....................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:...........................:...............:...............:...............:...:.......................................................................:)",
      "  (:..................:::::::::::..............::..............::..............::..........................................................................:)",
      "  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)",
      "  (:..................:::::::::::..............::..............::..............::..........................................................................:)",
      "  (:...........................:...:...........:...............:...............:...........................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:.............................:::::............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::............................................:::::.....................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:...........:...............:...................................................:...........:...............:...............:...............:...........:)",
      "  (:..:::::::::::.....:::::::::::.....................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)",
      "  (:..::::::::::::....::::::::::::....................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)",
      "  (:..:::::::::::.....:::::::::::.....................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)",
      "  (:...........:...............:...............................................................:...............:...............:...............:...........:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "code
    "parse": [
      "define",
      "cos_and_image",
      [
        -1,
        "make-image",
        88,
        153,
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":...........:...............:...........................................................................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::..........................................................................................................................:"
          ],
          [
            ":..::::::::::::....::::::::::::.........................................................................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::..........................................................................................................................:"
          ],
          [
            ":...........:...............:...........................................................................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":.............................:::::...........................................:::::.....................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":...........................:...:...........:...............:...............:...:.......................................................................:"
          ],
          [
            ":..................:::::::::::..............::..............::..............::..........................................................................:"
          ],
          [
            ":..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:"
          ],
          [
            ":..................:::::::::::..............::..............::..............::..........................................................................:"
          ],
          [
            ":...........................:...............:...............:...............:...........................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":.............................................................................:::::.....................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":...........................:...............:...............:...............:...:.......................................................................:"
          ],
          [
            ":..................:::::::::::..............::..............::..............::..........................................................................:"
          ],
          [
            ":..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:"
          ],
          [
            ":..................:::::::::::..............::..............::..............::..........................................................................:"
          ],
          [
            ":...........................:...:...........:...............:...............:...........................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":.............................:::::............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::............................................:::::.....................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":...........:...............:...................................................:...........:...............:...............:...............:...........:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:"
          ],
          [
            ":..::::::::::::....::::::::::::....................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:"
          ],
          [
            ":...........:...............:...............................................................:...............:...............:...............:...........:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "stanza": 1256
  },
  {
    "role": "code",
    "lines": [
      "equal (cos_and_gate) (distill-circuit (cos_and_image));"
    ],
    "code": "2100032210110000133221010111103221011000103332233",
    "parse": [
      "equal",
      [
        "cos_and_gate"
      ],
      [
        "distill-circuit",
        [
          "cos_and_image"
        ]
      ]
    ],
    "stanza": 1257
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_AND.gate",
      "13 8 1 0 1",
      "3 8 1 0 1",
      "1 2 1 0 1",
      "1 8 1 0 1",
      "3 6 1 0 1",
      "15 8 1 0 1",
      "3 4 1 0 1",
      "10 3 0 1 1",
      "9 4 1 0 0",
      "11 8 1 0 1",
      "4 7 0 -1 1",
      "10 5 0 1 1",
      "5 6 1 0 0",
      "10 7 0 1 1",
      "9 6 1 0 0",
      "7 4 1 0 0",
      "17 8 1 0 1",
      "7 6 1 0 0",
      "5 4 1 0 0",
      "4 3 0 1 1",
      "3 2 1 0 1"
    ],
    "thumbnail": "COS_AND.gif",
    "page": "COS_AND.html",
    "stanza": 1258
  },
  {
    "role": "file",
    "lines": [
      "== COS_OR =="
    ],
    "stanza": 1259
  },
  {
    "role": "comment",
    "lines": [
      "# GATE testing alternate primer based on gates: cos_or circuit",
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_or circuit",
    "section_category": "GATE",
    "section_index": 46,
    "stanza": 1260
  },
  {
    "role": "code",
    "lines": [
      "define cos_or_gate | vector ",
      "  (vector 2 4 4 4 (true))",
      "  (vector 2 6 4 6 (true))",
      "  (vector 4 4 6 4 (true))",
      "  (vector 4 6 6 6 (true))",
      "  (vector 6 4 8 4 (true))",
      "  (vector 6 6 8 6 (true))",
      "  (vector 8 4 10 4 (true))",
      "  (vector 8 6 10 6 (true))",
      "  (vector 8 8 10 8 (true))",
      "  (vector 10 2 10 4 (true))",
      "  (vector 10 4 10 6 (false))",
      "  (vector 10 6 10 8 (false))",
      "  (vector 10 8 12 8 (true))",
      "  (vector 12 8 14 8 (true))",
      "  (vector 14 8 16 8 (true))",
      "  (vector 16 8 18 8 (true));"
    ],
    "code
    "parse": [
      "define",
      "cos_or_gate",
      [
        -1,
        "vector",
        [
          "vector",
          2,
          4,
          4,
          4,
          [
            "true"
          ]
        ],
        [
          "vector",
          2,
          6,
          4,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          4,
          4,
          6,
          4,
          [
            "true"
          ]
        ],
        [
          "vector",
          4,
          6,
          6,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          6,
          4,
          8,
          4,
          [
            "true"
          ]
        ],
        [
          "vector",
          6,
          6,
          8,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          8,
          4,
          10,
          4,
          [
            "true"
          ]
        ],
        [
          "vector",
          8,
          6,
          10,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          8,
          8,
          10,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          10,
          2,
          10,
          4,
          [
            "true"
          ]
        ],
        [
          "vector",
          10,
          4,
          10,
          6,
          [
            "false"
          ]
        ],
        [
          "vector",
          10,
          6,
          10,
          8,
          [
            "false"
          ]
        ],
        [
          "vector",
          10,
          8,
          12,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          12,
          8,
          14,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          14,
          8,
          16,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          16,
          8,
          18,
          8,
          [
            "true"
          ]
        ]
      ]
    ],
    "stanza": 1261
  },
  {
    "role": "code",
    "lines": [
      "define cos_or_image | make-image 93 169 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:.............................................................................:::::.....................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:...........................:...............:...............:...............:...:.......................................................................................:)",
      "  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)",
      "  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................:)",
      "  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)",
      "  (:...........................:...............:...............:...............:...........................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:.............................................................................:::::.....................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:...........................:...............:...............:...............:...:.......................................................................................:)",
      "  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)",
      "  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................:)",
      "  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)",
      "  (:...........................:...............:...............:...............:...........................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:.............................................................................:::::.....................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:...........................................................................:...:...........:...............:...............:...............:...........................:)",
      "  (:..................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................:)",
      "  (:..................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................:)",
      "  (:..................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................:)",
      "  (:...........................................................................:...............:...............:...............:...............:...........................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "code": "",
    "parse": [
      "define",
      "cos_or_image",
      [
        -1,
        "make-image",
        93,
        169,
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":.............................................................................:::::.....................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":...........................:...............:...............:...............:...:.......................................................................................:"
          ],
          [
            ":..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:"
          ],
          [
            ":..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................:"
          ],
          [
            ":..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:"
          ],
          [
            ":...........................:...............:...............:...............:...........................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":.............................................................................:::::.....................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":...........................:...............:...............:...............:...:.......................................................................................:"
          ],
          [
            ":..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:"
          ],
          [
            ":..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................:"
          ],
          [
            ":..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:"
          ],
          [
            ":...........................:...............:...............:...............:...........................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":.............................................................................:::::.....................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":...........................................................................:...:...........:...............:...............:...............:...........................:"
          ],
          [
            ":..................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................:"
          ],
          [
            ":..................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................:"
          ],
          [
            ":..................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................:"
          ],
          [
            ":...........................................................................:...............:...............:...............:...............:...........................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "stanza": 1262
  },
  {
    "role": "code",
    "lines": [
      "equal (cos_or_gate) (distill-circuit (cos_or_image));"
    ],
    "code": "2100032210110001133221010111103221011001003332233",
    "parse": [
      "equal",
      [
        "cos_or_gate"
      ],
      [
        "distill-circuit",
        [
          "cos_or_image"
        ]
      ]
    ],
    "stanza": 1263
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_OR.gate",
      "13 8 1 0 1",
      "3 6 1 0 1",
      "15 8 1 0 1",
      "3 4 1 0 1",
      "10 3 0 1 1",
      "9 4 1 0 1",
      "11 8 1 0 1",
      "10 5 0 1 0",
      "5 6 1 0 1",
      "10 7 0 1 0",
      "9 8 1 0 1",
      "9 6 1 0 1",
      "7 4 1 0 1",
      "17 8 1 0 1",
      "7 6 1 0 1",
      "5 4 1 0 1"
    ],
    "thumbnail": "COS_OR.gif",
    "page": "COS_OR.html",
    "stanza": 1264
  },
  {
    "role": "file",
    "lines": [
      "== COS_NOR =="
    ],
    "stanza": 1265
  },
  {
    "role": "comment",
    "lines": [
      "# GATE testing alternate primer based on gates: cos_nor circuit",
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_nor circuit",
    "section_category": "GATE",
    "section_index": 47,
    "stanza": 1266
  },
  {
    "role": "code",
    "lines": [
      "define cos_nor_gate | vector ",
      "  (vector 0 6 2 6 (true))",
      "  (vector 0 8 2 8 (true))",
      "  (vector 2 6 4 6 (true))",
      "  (vector 2 8 4 8 (true))",
      "  (vector 4 6 6 6 (true))",
      "  (vector 4 8 6 8 (true))",
      "  (vector 6 6 8 6 (true))",
      "  (vector 6 8 8 8 (true))",
      "  (vector 8 4 8 6 (true))",
      "  (vector 8 6 8 8 (false))",
      "  (vector 8 8 8 10 (false))",
      "  (vector 8 10 10 10 (false))",
      "  (vector 10 10 12 10 (false))",
      "  (vector 12 10 14 10 (false))",
      "  (vector 14 10 16 10 (false))",
      "  (vector 16 10 18 10 (false))",
      "  (vector 18 10 20 10 (false));"
    ],
    "code
    "parse": [
      "define",
      "cos_nor_gate",
      [
        -1,
        "vector",
        [
          "vector",
          0,
          6,
          2,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          0,
          8,
          2,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          2,
          6,
          4,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          2,
          8,
          4,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          4,
          6,
          6,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          4,
          8,
          6,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          6,
          6,
          8,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          6,
          8,
          8,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          8,
          4,
          8,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          8,
          6,
          8,
          8,
          [
            "false"
          ]
        ],
        [
          "vector",
          8,
          8,
          8,
          10,
          [
            "false"
          ]
        ],
        [
          "vector",
          8,
          10,
          10,
          10,
          [
            "false"
          ]
        ],
        [
          "vector",
          10,
          10,
          12,
          10,
          [
            "false"
          ]
        ],
        [
          "vector",
          12,
          10,
          14,
          10,
          [
            "false"
          ]
        ],
        [
          "vector",
          14,
          10,
          16,
          10,
          [
            "false"
          ]
        ],
        [
          "vector",
          16,
          10,
          18,
          10,
          [
            "false"
          ]
        ],
        [
          "vector",
          18,
          10,
          20,
          10,
          [
            "false"
          ]
        ]
      ]
    ],
    "stanza": 1267
  },
  {
    "role": "code",
    "lines": [
      "define cos_nor_image | make-image 125 169 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:.............................................................:::::.....................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:...........:...............:...............:...............:...:.......................................................................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)",
      "  (:...........:...............:...............:...............:...........................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:.............................................................:::::.....................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:...........:...............:...............:...............:...:.......................................................................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)",
      "  (:...........:...............:...............:...............:...........................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:.............................................................:::::.....................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:...............................................................:...........:...............:...............:...............:...............:...............:...........:)",
      "  (:...........................................................................::..............::..............::..............::..............::..............::..........:)",
      "  (:..................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)",
      "  (:...........................................................................::..............::..............::..............::..............::..............::..........:)",
      "  (:...........................................................................:...............:...............:...............:...............:...............:...........:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "code": "",
    "parse": [
      "define",
      "cos_nor_image",
      [
        -1,
        "make-image",
        125,
        169,
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":.............................................................:::::.....................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...:.......................................................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...........................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":.............................................................:::::.....................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...:.......................................................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...........................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":.............................................................:::::.....................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":...............................................................:...........:...............:...............:...............:...............:...............:...........:"
          ],
          [
            ":...........................................................................::..............::..............::..............::..............::..............::..........:"
          ],
          [
            ":..................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:"
          ],
          [
            ":...........................................................................::..............::..............::..............::..............::..............::..........:"
          ],
          [
            ":...........................................................................:...............:...............:...............:...............:...............:...........:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "stanza": 1268
  },
  {
    "role": "code",
    "lines": [
      "equal (cos_nor_gate) (distill-circuit (cos_nor_image));"
    ],
    "code": "2100032210110010133221010111103221011001103332233",
    "parse": [
      "equal",
      [
        "cos_nor_gate"
      ],
      [
        "distill-circuit",
        [
          "cos_nor_image"
        ]
      ]
    ],
    "stanza": 1269
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_NOR.gate",
      "3 8 1 0 1",
      "15 10 1 0 0",
      "3 6 1 0 1",
      "1 8 1 0 1",
      "13 10 1 0 0",
      "1 6 1 0 1",
      "11 10 1 0 0",
      "5 8 1 0 1",
      "5 6 1 0 1",
      "7 8 1 0 1",
      "8 7 0 1 0",
      "9 10 1 0 0",
      "8 5 0 1 1",
      "7 6 1 0 1",
      "8 9 0 1 0",
      "19 10 1 0 0",
      "17 10 1 0 0"
    ],
    "thumbnail": "COS_NOR.gif",
    "page": "COS_NOR.html",
    "stanza": 1270
  },
  {
    "role": "file",
    "lines": [
      "== COS_OSC =="
    ],
    "stanza": 1271
  },
  {
    "role": "comment",
    "lines": [
      "# GATE testing alternate primer based on gates: cos_osc circuit",
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_osc circuit",
    "section_category": "GATE",
    "section_index": 48,
    "stanza": 1272
  },
  {
    "role": "code",
    "lines": [
      "define cos_osc_gate | vector ",
      "  (vector 4 8 6 8 (true))",
      "  (vector 6 8 8 8 (true))",
      "  (vector 8 6 8 8 (true))",
      "  (vector 10 6 8 6 (true))",
      "  (vector 8 8 10 8 (false))",
      "  (vector 12 6 10 6 (false))",
      "  (vector 10 8 12 8 (false))",
      "  (vector 12 8 12 6 (false))",
      "  (vector 12 8 14 8 (false))",
      "  (vector 14 8 16 8 (false));"
    ],
    "code": "211013210110011130232100003221000032100321000321103210003221101103332210000321103210003210003210003221101103332210000321000321103210003210003221101103332210000321010321103210003211032211011033322100003210003210003210103210003221101113332210000321100321103210103211032211011133322100003210103210003211003210003221101113332210000321100321000321100321103221101113332210000321100321000321110321000322110111333221000032111032100032100003210003221101113332233",
    "parse": [
      "define",
      "cos_osc_gate",
      [
        -1,
        "vector",
        [
          "vector",
          4,
          8,
          6,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          6,
          8,
          8,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          8,
          6,
          8,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          10,
          6,
          8,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          8,
          8,
          10,
          8,
          [
            "false"
          ]
        ],
        [
          "vector",
          12,
          6,
          10,
          6,
          [
            "false"
          ]
        ],
        [
          "vector",
          10,
          8,
          12,
          8,
          [
            "false"
          ]
        ],
        [
          "vector",
          12,
          8,
          12,
          6,
          [
            "false"
          ]
        ],
        [
          "vector",
          12,
          8,
          14,
          8,
          [
            "false"
          ]
        ],
        [
          "vector",
          14,
          8,
          16,
          8,
          [
            "false"
          ]
        ]
      ]
    ],
    "stanza": 1273
  },
  {
    "role": "code",
    "lines": [
      "define cos_osc_image | make-image 120 169 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:...................................................................:...............:...................................................................................:)",
      "  (:..................................................................:::::::::::.....::...................................................................................:)",
      "  (:.................................................................::::::::::::....::::::::::::..........................................................................:)",
      "  (:..................................................................:::::::::::.....::...................................................................................:)",
      "  (:...................................................................:...............:...........:.......................................................................:)",
      "  (:..............................................................:::.............................:::......................................................................:)",
      "  (:..............................................................:::............................:::::.....................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:.............................................................:::::.............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:...........................................:...............:...:...........:...............:...............:...............:...........................................:)",
      "  (:..................................:::::::::::.....:::::::::::..............::..............::..............::..............::..........................................:)",
      "  (:..................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................:)",
      "  (:..................................:::::::::::.....:::::::::::..............::..............::..............::..............::..........................................:)",
      "  (:...........................................:...............:...............:...............:...............:...............:...........................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "code": "",
    "parse": [
      "define",
      "cos_osc_image",
      [
        -1,
        "make-image",
        120,
        169,
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":...................................................................:...............:...................................................................................:"
          ],
          [
            ":..................................................................:::::::::::.....::...................................................................................:"
          ],
          [
            ":.................................................................::::::::::::....::::::::::::..........................................................................:"
          ],
          [
            ":..................................................................:::::::::::.....::...................................................................................:"
          ],
          [
            ":...................................................................:...............:...........:.......................................................................:"
          ],
          [
            ":..............................................................:::.............................:::......................................................................:"
          ],
          [
            ":..............................................................:::............................:::::.....................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":.............................................................:::::.............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":...........................................:...............:...:...........:...............:...............:...............:...........................................:"
          ],
          [
            ":..................................:::::::::::.....:::::::::::..............::..............::..............::..............::..........................................:"
          ],
          [
            ":..................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................:"
          ],
          [
            ":..................................:::::::::::.....:::::::::::..............::..............::..............::..............::..........................................:"
          ],
          [
            ":...........................................:...............:...............:...............:...............:...............:...........................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "stanza": 1274
  },
  {
    "role": "code",
    "lines": [
      "equal (cos_osc_gate) (distill-circuit (cos_osc_image));"
    ],
    "code": "2100032210110011133221010111103221011010003332233",
    "parse": [
      "equal",
      [
        "cos_osc_gate"
      ],
      [
        "distill-circuit",
        [
          "cos_osc_image"
        ]
      ]
    ],
    "stanza": 1275
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_OSC.gate",
      "13 8 1 0 0",
      "8 7 0 1 1",
      "15 8 1 0 0",
      "5 8 1 0 1",
      "11 8 1 0 0",
      "9 8 1 0 0",
      "11 6 -1 0 0",
      "7 8 1 0 1",
      "12 7 0 -1 0",
      "9 6 -1 0 1"
    ],
    "thumbnail": "COS_OSC.gif",
    "page": "COS_OSC.html",
    "stanza": 1276
  },
  {
    "role": "file",
    "lines": [
      "== COS_SR =="
    ],
    "stanza": 1277
  },
  {
    "role": "comment",
    "lines": [
      "# GATE testing alternate primer based on gates: cos_sr circuit",
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_sr circuit",
    "section_category": "GATE",
    "section_index": 49,
    "stanza": 1278
  },
  {
    "role": "code",
    "lines": [
      "define cos_sr_gate | vector ",
      "  (vector 0 2 2 2 (true))",
      "  (vector 0 8 2 8 (true))",
      "  (vector 2 2 4 2 (true))",
      "  (vector 2 8 4 8 (true))",
      "  (vector 4 2 6 2 (true))",
      "  (vector 4 6 6 6 (true))",
      "  (vector 4 8 6 8 (true))",
      "  (vector 6 8 6 6 (true))",
      "  (vector 6 2 8 2 (true))",
      "  (vector 6 6 8 6 (false))",
      "  (vector 8 4 8 6 (false))",
      "  (vector 8 2 10 2 (true))",
      "  (vector 10 4 8 4 (false))",
      "  (vector 8 6 10 6 (false))",
      "  (vector 10 6 10 8 (false))",
      "  (vector 10 2 12 2 (true))",
      "  (vector 12 4 10 4 (false))",
      "  (vector 10 6 12 6 (false))",
      "  (vector 10 8 12 8 (false))",
      "  (vector 12 6 12 4 (false))",
      "  (vector 12 2 14 2 (true))",
      "  (vector 14 4 12 4 (false))",
      "  (vector 12 8 14 8 (false))",
      "  (vector 14 2 14 4 (true))",
      "  (vector 16 4 14 4 (true))",
      "  (vector 14 8 16 8 (false))",
      "  (vector 16 8 18 8 (false))",
      "  (vector 18 8 20 8 (false));"
    ],
    "code
    "parse": [
      "define",
      "cos_sr_gate",
      [
        -1,
        "vector",
        [
          "vector",
          0,
          2,
          2,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          0,
          8,
          2,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          2,
          2,
          4,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          2,
          8,
          4,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          4,
          2,
          6,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          4,
          6,
          6,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          4,
          8,
          6,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          6,
          8,
          6,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          6,
          2,
          8,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          6,
          6,
          8,
          6,
          [
            "false"
          ]
        ],
        [
          "vector",
          8,
          4,
          8,
          6,
          [
            "false"
          ]
        ],
        [
          "vector",
          8,
          2,
          10,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          10,
          4,
          8,
          4,
          [
            "false"
          ]
        ],
        [
          "vector",
          8,
          6,
          10,
          6,
          [
            "false"
          ]
        ],
        [
          "vector",
          10,
          6,
          10,
          8,
          [
            "false"
          ]
        ],
        [
          "vector",
          10,
          2,
          12,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          12,
          4,
          10,
          4,
          [
            "false"
          ]
        ],
        [
          "vector",
          10,
          6,
          12,
          6,
          [
            "false"
          ]
        ],
        [
          "vector",
          10,
          8,
          12,
          8,
          [
            "false"
          ]
        ],
        [
          "vector",
          12,
          6,
          12,
          4,
          [
            "false"
          ]
        ],
        [
          "vector",
          12,
          2,
          14,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          14,
          4,
          12,
          4,
          [
            "false"
          ]
        ],
        [
          "vector",
          12,
          8,
          14,
          8,
          [
            "false"
          ]
        ],
        [
          "vector",
          14,
          2,
          14,
          4,
          [
            "true"
          ]
        ],
        [
          "vector",
          16,
          4,
          14,
          4,
          [
            "true"
          ]
        ],
        [
          "vector",
          14,
          8,
          16,
          8,
          [
            "false"
          ]
        ],
        [
          "vector",
          16,
          8,
          18,
          8,
          [
            "false"
          ]
        ],
        [
          "vector",
          18,
          8,
          20,
          8,
          [
            "false"
          ]
        ]
      ]
    ],
    "stanza": 1279
  },
  {
    "role": "code",
    "lines": [
      "define cos_sr_image | make-image 88 169 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:...........:...............:...............:...............:...............:...............:...............:...........................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................:)",
      "  (:...........:...............:...............:...............:...............:...............:...............:...........................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:.............................................................................................................:::::.....................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:...................................................................:...............:...............:...........:...:...................................................:)",
      "  (:..................................................................::..............::..............::..............:::::::::::..........................................:)",
      "  (:.................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::..........................................:)",
      "  (:..................................................................::..............::..............::..............:::::::::::..........................................:)",
      "  (:...................................................................:...............:...........:...:...............:...................................................:)",
      "  (:...............................................................:..............................:::......................................................................:)",
      "  (:...............................................................:.............................:::::.....................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:.............................................................:::::.............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:...........................................:...............:...:...........:...............:...........................................................................:)",
      "  (:..................................:::::::::::..............::..............::..............::..........................................................................:)",
      "  (:..................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)",
      "  (:..................................:::::::::::..............::..............::..............::..........................................................................:)",
      "  (:...........................................:...:...........:...............:...............:...........................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:.............................................:::::.............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::............................:::::.....................................................................................:)",
      "  (:..............................................:::.............................:::......................................................................................:)",
      "  (:...........:...............:...............:...................................:...........:...............:...............:...............:...............:...........:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..............::..........:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..............::..........:)",
      "  (:...........:...............:...............:...............................................:...............:...............:...............:...............:...........:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "code
    "parse": [
      "define",
      "cos_sr_image",
      [
        -1,
        "make-image",
        88,
        169,
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...............:...............:...............:...........................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................:"
          ],
          [
            ":...........:...............:...............:...............:...............:...............:...............:...........................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":.............................................................................................................:::::.....................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":...................................................................:...............:...............:...........:...:...................................................:"
          ],
          [
            ":..................................................................::..............::..............::..............:::::::::::..........................................:"
          ],
          [
            ":.................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::..........................................:"
          ],
          [
            ":..................................................................::..............::..............::..............:::::::::::..........................................:"
          ],
          [
            ":...................................................................:...............:...........:...:...............:...................................................:"
          ],
          [
            ":...............................................................:..............................:::......................................................................:"
          ],
          [
            ":...............................................................:.............................:::::.....................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":.............................................................:::::.............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":...........................................:...............:...:...........:...............:...........................................................................:"
          ],
          [
            ":..................................:::::::::::..............::..............::..............::..........................................................................:"
          ],
          [
            ":..................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:"
          ],
          [
            ":..................................:::::::::::..............::..............::..............::..........................................................................:"
          ],
          [
            ":...........................................:...:...........:...............:...............:...........................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":.............................................:::::.............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::............................:::::.....................................................................................:"
          ],
          [
            ":..............................................:::.............................:::......................................................................................:"
          ],
          [
            ":...........:...............:...............:...................................:...........:...............:...............:...............:...............:...........:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..............::..........:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..............::..........:"
          ],
          [
            ":...........:...............:...............:...............................................:...............:...............:...............:...............:...........:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "stanza": 1280
  },
  {
    "role": "code",
    "lines": [
      "equal (cos_sr_gate) (distill-circuit (cos_sr_image));"
    ],
    "code": "2100032210110100133221010111103221011010103332233",
    "parse": [
      "equal",
      [
        "cos_sr_gate"
      ],
      [
        "distill-circuit",
        [
          "cos_sr_image"
        ]
      ]
    ],
    "stanza": 1281
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_SR.gate",
      "11 2 1 0 1",
      "13 8 1 0 0",
      "3 8 1 0 1",
      "1 2 1 0 1",
      "1 8 1 0 1",
      "15 8 1 0 0",
      "5 8 1 0 1",
      "9 4 -1 0 0",
      "11 8 1 0 0",
      "5 6 1 0 1",
      "9 2 1 0 1",
      "15 4 -1 0 1",
      "10 7 0 1 0",
      "6 7 0 -1 1",
      "11 6 1 0 0",
      "12 5 0 -1 0",
      "14 3 0 1 1",
      "13 4 -1 0 0",
      "9 6 1 0 0",
      "11 4 -1 0 0",
      "13 2 1 0 1",
      "17 8 1 0 0",
      "7 6 1 0 0",
      "8 5 0 1 0",
      "19 8 1 0 0",
      "5 2 1 0 1",
      "7 2 1 0 1",
      "3 2 1 0 1"
    ],
    "thumbnail": "COS_SR.gif",
    "page": "COS_SR.html",
    "stanza": 1282
  },
  {
    "role": "file",
    "lines": [
      "== COS_D =="
    ],
    "stanza": 1283
  },
  {
    "role": "comment",
    "lines": [
      "# GATE testing alternate primer based on gates: cos_d circuit",
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_d circuit",
    "section_category": "GATE",
    "section_index": 50,
    "stanza": 1284
  },
  {
    "role": "code",
    "lines": [
      "define cos_d_gate | vector ",
      "  (vector 0 2 2 2 (true))",
      "  (vector 0 6 2 6 (true))",
      "  (vector 2 2 4 2 (true))",
      "  (vector 2 6 4 6 (true))",
      "  (vector 4 2 6 2 (true))",
      "  (vector 4 6 6 6 (true))",
      "  (vector 6 2 8 2 (true))",
      "  (vector 6 6 8 6 (true))",
      "  (vector 8 2 10 2 (true))",
      "  (vector 8 6 10 6 (true))",
      "  (vector 10 6 10 4 (true))",
      "  (vector 10 10 10 8 (true))",
      "  (vector 10 2 12 2 (true))",
      "  (vector 10 4 12 4 (true))",
      "  (vector 10 6 12 6 (true))",
      "  (vector 10 8 12 8 (true))",
      "  (vector 12 10 10 10 (true))",
      "  (vector 12 0 12 2 (true))",
      "  (vector 12 2 12 4 (false))",
      "  (vector 12 6 12 8 (true))",
      "  (vector 12 10 12 12 (true))",
      "  (vector 12 4 14 4 (true))",
      "  (vector 12 8 14 8 (false))",
      "  (vector 14 10 12 10 (true))",
      "  (vector 12 12 14 12 (true))",
      "  (vector 14 0 14 2 (true))",
      "  (vector 14 2 14 4 (true))",
      "  (vector 14 4 14 6 (false))",
      "  (vector 14 6 14 8 (false))",
      "  (vector 14 8 14 10 (false))",
      "  (vector 16 10 14 10 (true))",
      "  (vector 14 12 16 12 (true))",
      "  (vector 16 12 18 12 (true))",
      "  (vector 18 12 20 12 (true));"
    ],
    "code": "21101321011010113023210000322100003203210321032103221101103332210000320321103210321103221101103332210000321032103210032103221101103332210000321032110321003211032211011033322100003210032103211032103221101103332210000321003211032110321103221101103332210000321103210321000321032211011033322100003211032110321000321103221101103332210000321000321032101032103221101103332210000321000321103210103211032211011033322100003210103211032101032100322110110333221000032101032101032101032100032211011033322100003210103210321100321032211011033322100003210103210032110032100322110110333221000032101032110321100321103221101103332210000321010321000321100321000322110110333221000032110032101032101032101032211011033322100003211003203211003210322110110333221000032110032103211003210032211011133322100003211003211032110032100032211011033322100003211003210103211003211003221101103332210000321100321003211103210032211011033322100003211003210003211103210003221101113332210000321110321010321100321010322110110333221000032110032110032111032110032211011033322100003211103203211103210322110110333221000032111032103211103210032211011033322100003211103210032111032110322110111333221000032111032110321110321000322110111333221000032111032100032111032101032211011133322100003210000321010321110321010322110110333221000032111032110032100003211003221101103332210000321000032110032100103211003221101103332210000321001032110032101003211003221101103332233",
    "parse": [
      "define",
      "cos_d_gate",
      [
        -1,
        "vector",
        [
          "vector",
          0,
          2,
          2,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          0,
          6,
          2,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          2,
          2,
          4,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          2,
          6,
          4,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          4,
          2,
          6,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          4,
          6,
          6,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          6,
          2,
          8,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          6,
          6,
          8,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          8,
          2,
          10,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          8,
          6,
          10,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          10,
          6,
          10,
          4,
          [
            "true"
          ]
        ],
        [
          "vector",
          10,
          10,
          10,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          10,
          2,
          12,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          10,
          4,
          12,
          4,
          [
            "true"
          ]
        ],
        [
          "vector",
          10,
          6,
          12,
          6,
          [
            "true"
          ]
        ],
        [
          "vector",
          10,
          8,
          12,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          12,
          10,
          10,
          10,
          [
            "true"
          ]
        ],
        [
          "vector",
          12,
          0,
          12,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          12,
          2,
          12,
          4,
          [
            "false"
          ]
        ],
        [
          "vector",
          12,
          6,
          12,
          8,
          [
            "true"
          ]
        ],
        [
          "vector",
          12,
          10,
          12,
          12,
          [
            "true"
          ]
        ],
        [
          "vector",
          12,
          4,
          14,
          4,
          [
            "true"
          ]
        ],
        [
          "vector",
          12,
          8,
          14,
          8,
          [
            "false"
          ]
        ],
        [
          "vector",
          14,
          10,
          12,
          10,
          [
            "true"
          ]
        ],
        [
          "vector",
          12,
          12,
          14,
          12,
          [
            "true"
          ]
        ],
        [
          "vector",
          14,
          0,
          14,
          2,
          [
            "true"
          ]
        ],
        [
          "vector",
          14,
          2,
          14,
          4,
          [
            "true"
          ]
        ],
        [
          "vector",
          14,
          4,
          14,
          6,
          [
            "false"
          ]
        ],
        [
          "vector",
          14,
          6,
          14,
          8,
          [
            "false"
          ]
        ],
        [
          "vector",
          14,
          8,
          14,
          10,
          [
            "false"
          ]
        ],
        [
          "vector",
          16,
          10,
          14,
          10,
          [
            "true"
          ]
        ],
        [
          "vector",
          14,
          12,
          16,
          12,
          [
            "true"
          ]
        ],
        [
          "vector",
          16,
          12,
          18,
          12,
          [
            "true"
          ]
        ],
        [
          "vector",
          18,
          12,
          20,
          12,
          [
            "true"
          ]
        ]
      ]
    ],
    "stanza": 1285
  },
  {
    "role": "code",
    "lines": [
      "define cos_d_image | make-image 109 169 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:.............................................................................................:::::...........:::::.....................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:...........:...............:...............:...............:...............:...............:...:...............:.......................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)",
      "  (:...........:...............:...............:...............:...............:...............:...........................................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:.............................................................................................:::::...........:::::.....................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:...........................................................................................:...:...........:...:.......................................................:)",
      "  (:..................................................................................:::::::::::.....:::::::::::..........................................................:)",
      "  (:..................................................................................::::::::::::....::::::::::::.........................................................:)",
      "  (:..................................................................................:::::::::::.....:::::::::::..........................................................:)",
      "  (:...............................................................................:...........:...............:...........................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:.............................................................................:::::.............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::............................:::::.....................................................:)",
      "  (:..............................................................................:::.............................:::......................................................:)",
      "  (:...........:...............:...............:...............:...............:...............:...................:.......................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)",
      "  (:...........:...............:...............:...............:...............:...............:...........................................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:.............................................................................................:::::...........:::::.....................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:...........................................................................................:...:...........:...:.......................................................:)",
      "  (:..................................................................................:::::::::::..............::..........................................................:)",
      "  (:..................................................................................::::::::::::....::::::::::::.........................................................:)",
      "  (:..................................................................................:::::::::::..............::..........................................................:)",
      "  (:...............................................................................:...........:...............:...........................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:.............................................................................:::::.............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::............................:::::.....................................................:)",
      "  (:..............................................................................:::.............................:::......................................................:)",
      "  (:...................................................................................:...............:...........:...:...................................................:)",
      "  (:..................................................................................:::::::::::.....:::::::::::.....:::::::::::..........................................:)",
      "  (:.................................................................................::::::::::::....::::::::::::....::::::::::::..........................................:)",
      "  (:..................................................................................:::::::::::.....:::::::::::.....:::::::::::..........................................:)",
      "  (:...................................................................................:...............:...............:...................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:.............................................................................................:::::.....................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:...............................................................................................:...........:...............:...............:...............:...........:)",
      "  (:..................................................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)",
      "  (:..................................................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)",
      "  (:..................................................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)",
      "  (:...........................................................................................................:...............:...............:...............:...........:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "code": "",
    "parse": [
      "define",
      "cos_d_image",
      [
        -1,
        "make-image",
        109,
        169,
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":.............................................................................................:::::...........:::::.....................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":...........:...............:...............:...............:...............:...............:...:...............:.......................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...............:...............:...........................................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":.............................................................................................:::::...........:::::.....................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":...........................................................................................:...:...........:...:.......................................................:"
          ],
          [
            ":..................................................................................:::::::::::.....:::::::::::..........................................................:"
          ],
          [
            ":..................................................................................::::::::::::....::::::::::::.........................................................:"
          ],
          [
            ":..................................................................................:::::::::::.....:::::::::::..........................................................:"
          ],
          [
            ":...............................................................................:...........:...............:...........................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":.............................................................................:::::.............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::............................:::::.....................................................:"
          ],
          [
            ":..............................................................................:::.............................:::......................................................:"
          ],
          [
            ":...........:...............:...............:...............:...............:...............:...................:.......................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...............:...............:...........................................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":.............................................................................................:::::...........:::::.....................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":...........................................................................................:...:...........:...:.......................................................:"
          ],
          [
            ":..................................................................................:::::::::::..............::..........................................................:"
          ],
          [
            ":..................................................................................::::::::::::....::::::::::::.........................................................:"
          ],
          [
            ":..................................................................................:::::::::::..............::..........................................................:"
          ],
          [
            ":...............................................................................:...........:...............:...........................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":.............................................................................:::::.............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::............................:::::.....................................................:"
          ],
          [
            ":..............................................................................:::.............................:::......................................................:"
          ],
          [
            ":...................................................................................:...............:...........:...:...................................................:"
          ],
          [
            ":..................................................................................:::::::::::.....:::::::::::.....:::::::::::..........................................:"
          ],
          [
            ":.................................................................................::::::::::::....::::::::::::....::::::::::::..........................................:"
          ],
          [
            ":..................................................................................:::::::::::.....:::::::::::.....:::::::::::..........................................:"
          ],
          [
            ":...................................................................................:...............:...............:...................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":.............................................................................................:::::.....................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":...............................................................................................:...........:...............:...............:...............:...........:"
          ],
          [
            ":..................................................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:"
          ],
          [
            ":..................................................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:"
          ],
          [
            ":..................................................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:"
          ],
          [
            ":...........................................................................................................:...............:...............:...............:...........:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "stanza": 1286
  },
  {
    "role": "code",
    "lines": [
      "equal (cos_d_gate) (distill-circuit (cos_d_image));"
    ],
    "code": "2100032210110101133221010111103221011011003332233",
    "parse": [
      "equal",
      [
        "cos_d_gate"
      ],
      [
        "distill-circuit",
        [
          "cos_d_image"
        ]
      ]
    ],
    "stanza": 1287
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_D.gate",
      "11 2 1 0 1",
      "13 8 1 0 0",
      "15 12 1 0 1",
      "13 12 1 0 1",
      "15 10 -1 0 1",
      "13 10 -1 0 1",
      "11 10 -1 0 1",
      "9 2 1 0 1",
      "11 8 1 0 1",
      "11 6 1 0 1",
      "13 4 1 0 1",
      "11 4 1 0 1",
      "9 6 1 0 1",
      "7 6 1 0 1",
      "5 2 1 0 1",
      "7 2 1 0 1",
      "3 2 1 0 1",
      "12 1 0 1 1",
      "14 7 0 1 0",
      "12 3 0 1 0",
      "14 9 0 1 0",
      "1 2 1 0 1",
      "3 6 1 0 1",
      "1 6 1 0 1",
      "12 11 0 1 1",
      "10 5 0 -1 1",
      "5 6 1 0 1",
      "14 1 0 1 1",
      "14 3 0 1 1",
      "10 9 0 -1 1",
      "12 7 0 1 1",
      "14 5 0 1 0",
      "19 12 1 0 1",
      "17 12 1 0 1"
    ],
    "thumbnail": "COS_D.gif",
    "page": "COS_D.html",
    "stanza": 1288
  },
  {
    "role": "file",
    "lines": [
      "== COS_UnlessProbe =="
    ],
    "stanza": 1289
  },
  {
    "role": "comment",
    "lines": [
      "# GATE probing networks of unless gates"
    ],
    "section_description": "probing networks of unless gates",
    "section_category": "GATE",
    "section_index": 51,
    "stanza": 1290
  },
  {
    "role": "code",
    "lines": [
      "define set-input |",
      "  ? circuit |",
      "  ? index |",
      "  ? value |",
      "  assign wire (list-ref (circuit) (index)) ",
      "  (map (? w (if (equal (w) (wire))",
      "        (vector (list-ref (w) 0)",
      "            (list-ref (w) 1)",
      "            (list-ref (w) 2)            ",
      "            (list-ref (w) 3)",
      "            (value))",
      "        (w)))",
      "       (circuit));"
    ],
    "code": "211013210110110130232110032100101110302321100321011011103023211003210101010302321110321011011113221001001322100101110332210110111033322110000032211003210100010032211113221000322101000100332210110111133322100003221001001322101000100332033221001001322101000100332133221001001322101000100332103322100100132210100010033211332210101010333221010001003333221001011103332233",
    "parse": [
      "define",
      "set-input",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "?",
          "index",
          [
            -1,
            "?",
            "value",
            [
              -1,
              "assign",
              "wire",
              [
                "list-ref",
                [
                  "circuit"
                ],
                [
                  "index"
                ]
              ],
              [
                "map",
                [
                  "?",
                  "w",
                  [
                    "if",
                    [
                      "equal",
                      [
                        "w"
                      ],
                      [
                        "wire"
                      ]
                    ],
                    [
                      "vector",
                      [
                        "list-ref",
                        [
                          "w"
                        ],
                        0
                      ],
                      [
                        "list-ref",
                        [
                          "w"
                        ],
                        1
                      ],
                      [
                        "list-ref",
                        [
                          "w"
                        ],
                        2
                      ],
                      [
                        "list-ref",
                        [
                          "w"
                        ],
                        3
                      ],
                      [
                        "value"
                      ]
                    ],
                    [
                      "w"
                    ]
                  ]
                ],
                [
                  "circuit"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1291
  },
  {
    "role": "code",
    "lines": [
      "define read-output |",
      "  ? circuit |",
      "  ? index |",
      "  assign len (list-length | circuit) |",
      "  assign wire (list-ref (circuit) | - (- (len) 1) (index)) |",
      "  list-ref (wire) 4;"
    ],
    "code": "2110132101110000302321100321001011103023211003210110111030232111032101110001322100100030232100101110330232111032101101111322100100132210010111033023210113221011322101110001332133221011011103330232100100132210110111133210032233",
    "parse": [
      "define",
      "read-output",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "?",
          "index",
          [
            -1,
            "assign",
            "len",
            [
              "list-length",
              [
                -1,
                "circuit"
              ]
            ],
            [
              -1,
              "assign",
              "wire",
              [
                "list-ref",
                [
                  "circuit"
                ],
                [
                  -1,
                  "-",
                  [
                    "-",
                    [
                      "len"
                    ],
                    1
                  ],
                  [
                    "index"
                  ]
                ]
              ],
              [
                -1,
                "list-ref",
                [
                  "wire"
                ],
                4
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1292
  },
  {
    "role": "code",
    "lines": [
      "define sim |",
      "  ? circuit | ? steps | ? setter",
      "  (if (> (steps) 0)",
      "      (sim (simulate-unless (setter | circuit)) (- (steps) 1) (setter))",
      "      (circuit));"
    ],
    "code": "2110132101110010302321100321001011103023211003210111001130232110032101110100322111132211322101110011332033221011100103221001111013221011101003023210010111033322101132210111001133213322101110100333221001011103332233",
    "parse": [
      "define",
      "sim",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "?",
          "steps",
          [
            -1,
            "?",
            "setter",
            [
              "if",
              [
                ">",
                [
                  "steps"
                ],
                0
              ],
              [
                "sim",
                [
                  "simulate-unless",
                  [
                    "setter",
                    [
                      -1,
                      "circuit"
                    ]
                  ]
                ],
                [
                  "-",
                  [
                    "steps"
                  ],
                  1
                ],
                [
                  "setter"
                ]
              ],
              [
                "circuit"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1293
  },
  {
    "role": "code",
    "lines": [
      "define smart-sim |",
      "  ? circuit |",
      "  ? setter |",
      "  sim (circuit) (list-length | circuit) (setter);"
    ],
    "code": "211013210111010130232110032100101110302321100321011101003023210111001032210010111033221001000302321001011103322101110100332233",
    "parse": [
      "define",
      "smart-sim",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "?",
          "setter",
          [
            -1,
            "sim",
            [
              "circuit"
            ],
            [
              "list-length",
              [
                -1,
                "circuit"
              ]
            ],
            [
              "setter"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1294
  },
  {
    "role": "comment",
    "lines": [
      "# test cos_not gate"
    ],
    "stanza": 1295
  },
  {
    "role": "code",
    "lines": [
      "define cos_not_harness |",
      "  ? x |",
      "  assign c (cos_not_gate) | ",
      "  assign c (smart-sim (c) (? c (set-input (c) 0 (x)))) |",
      "  read-output (c) 0;"
    ],
    "code": "2110132101110110302321100321001103023211103211110003221010111113302321110321111000322101110101322111100033221100321111000322101101101322111100033203221001103333302321011100003221111000332032233",
    "parse": [
      "define",
      "cos_not_harness",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "assign",
          "c",
          [
            "cos_not_gate"
          ],
          [
            -1,
            "assign",
            "c",
            [
              "smart-sim",
              [
                "c"
              ],
              [
                "?",
                "c",
                [
                  "set-input",
                  [
                    "c"
                  ],
                  0,
                  [
                    "x"
                  ]
                ]
              ]
            ],
            [
              -1,
              "read-output",
              [
                "c"
              ],
              0
            ]
          ]
        ]
      ]
    ],
    "stanza": 1296
  },
  {
    "role": "code",
    "lines": [
      "= (false) | cos_not_harness | true;"
    ],
    "code": "2103221101113302321011101103023211011032233",
    "parse": [
      "=",
      [
        "false"
      ],
      [
        -1,
        "cos_not_harness",
        [
          -1,
          "true"
        ]
      ]
    ],
    "stanza": 1297
  },
  {
    "role": "code",
    "lines": [
      "= (true) | cos_not_harness | false;"
    ],
    "code": "2103221101103302321011101103023211011132233",
    "parse": [
      "=",
      [
        "true"
      ],
      [
        -1,
        "cos_not_harness",
        [
          -1,
          "false"
        ]
      ]
    ],
    "stanza": 1298
  },
  {
    "role": "comment",
    "lines": [
      "# test cos_and gate"
    ],
    "stanza": 1299
  },
  {
    "role": "code",
    "lines": [
      "define cos_and_harness |",
      "  ? x | ? y |",
      "  assign c (cos_and_gate) | ",
      "  assign c (smart-sim (c) (? c (set-input (set-input (c) 0 (x)) 1 (y)))) |",
      "  read-output (c) 0;"
    ],
    "code": "21101321011101113023211003210011030232110032110001302321110321111000322101100001330232111032111100032210111010132211110003322110032111100032210110110132210110110132211110003320322100110333213221100013333302321011100003221111000332032233",
    "parse": [
      "define",
      "cos_and_harness",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "assign",
            "c",
            [
              "cos_and_gate"
            ],
            [
              -1,
              "assign",
              "c",
              [
                "smart-sim",
                [
                  "c"
                ],
                [
                  "?",
                  "c",
                  [
                    "set-input",
                    [
                      "set-input",
                      [
                        "c"
                      ],
                      0,
                      [
                        "x"
                      ]
                    ],
                    1,
                    [
                      "y"
                    ]
                  ]
                ]
              ],
              [
                -1,
                "read-output",
                [
                  "c"
                ],
                0
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1300
  },
  {
    "role": "code",
    "lines": [
      "= (false) | cos_and_harness (false) (false);"
    ],
    "code": "2103221101113302321011101113221101113322110111332233",
    "parse": [
      "=",
      [
        "false"
      ],
      [
        -1,
        "cos_and_harness",
        [
          "false"
        ],
        [
          "false"
        ]
      ]
    ],
    "stanza": 1301
  },
  {
    "role": "code",
    "lines": [
      "= (false) | cos_and_harness (false) (true);"
    ],
    "code": "2103221101113302321011101113221101113322110110332233",
    "parse": [
      "=",
      [
        "false"
      ],
      [
        -1,
        "cos_and_harness",
        [
          "false"
        ],
        [
          "true"
        ]
      ]
    ],
    "stanza": 1302
  },
  {
    "role": "code",
    "lines": [
      "= (false) | cos_and_harness (true) (false);"
    ],
    "code": "2103221101113302321011101113221101103322110111332233",
    "parse": [
      "=",
      [
        "false"
      ],
      [
        -1,
        "cos_and_harness",
        [
          "true"
        ],
        [
          "false"
        ]
      ]
    ],
    "stanza": 1303
  },
  {
    "role": "code",
    "lines": [
      "= (true) | cos_and_harness (true) (true);"
    ],
    "code": "2103221101103302321011101113221101103322110110332233",
    "parse": [
      "=",
      [
        "true"
      ],
      [
        -1,
        "cos_and_harness",
        [
          "true"
        ],
        [
          "true"
        ]
      ]
    ],
    "stanza": 1304
  },
  {
    "role": "comment",
    "lines": [
      "# this code is more awkward than it needs to be -",
      "# should make circuits mutable"
    ],
    "stanza": 1305
  },
  {
    "role": "file",
    "lines": [
      "== COS_CommentBase3 =="
    ],
    "stanza": 1306
  },
  {
    "role": "comment",
    "lines": [
      "# NOTE end of part 3, start of part 4",
      "# The following parts of the message start",
      "# to introduce some self-reference into the message"
    ],
    "section_description": "end of part 3, start of part 4",
    "section_category": "NOTE",
    "section_index": 52,
    "stanza": 1307
  },
  {
    "role": "code",
    "lines": [
      "intro part4;"
    ],
    "code": "203210111100032233",
    "parse": [
      "intro",
      "part4"
    ],
    "stanza": 1308
  },
  {
    "role": "file",
    "lines": [
      "== COS_Message =="
    ],
    "stanza": 1309
  },
  {
    "role": "comment",
    "lines": [
      "# SELF a mechanism for referring to parts of the message"
    ],
    "section_description": "a mechanism for referring to parts of the message",
    "section_category": "SELF",
    "section_index": 53,
    "stanza": 1310
  },
  {
    "role": "comment",
    "lines": [
      "# Many choices for how to do this.",
      "# Could do it without special machinery by using the",
      "# standard A-B trick for giving e.g. a Turing machine",
      "# access to its own description.",
      "# Instead, will simply introduce a \"primer\" function",
      "# that gives access to every statement made so far ",
      "# (question: should future statements be included? ",
      "# tentatively assume YES: will simplify",
      "# discussion of creating modified copies of the",
      "# complete message)."
    ],
    "stanza": 1311
  },
  {
    "role": "comment",
    "lines": [
      "# For now, assume primer is a list of statements,",
      "# with each statement being a list in the same",
      "# form as \"translate\" functions expect.",
      "# This means that there is, for now, no",
      "# distinction between unary or binary,",
      "# and the \"/\" structure is expanded."
    ],
    "stanza": 1312
  },
  {
    "role": "code",
    "lines": [
      "intro primer;"
    ],
    "code": "203210001132233",
    "parse": [
      "intro",
      "primer"
    ],
    "stanza": 1313
  },
  {
    "role": "comment",
    "lines": [
      "# this line is referred to later - change/move carefully"
    ],
    "stanza": 1314
  },
  {
    "role": "code",
    "lines": [
      "equal (list-ref (primer) 0) (vector intro is:int);"
    ],
    "code": "210003221001001322100011332033221000032032100111332233",
    "parse": [
      "equal",
      [
        "list-ref",
        [
          "primer"
        ],
        0
      ],
      [
        "vector",
        "intro",
        "is:int"
      ]
    ],
    "stanza": 1315
  },
  {
    "role": "code",
    "lines": [
      "equal (list-ref (primer) 1) (vector is:int (vector unary 0));"
    ],
    "code": "21000322100100132210001133213322100003210011132210000321010103203332233",
    "parse": [
      "equal",
      [
        "list-ref",
        [
          "primer"
        ],
        1
      ],
      [
        "vector",
        "is:int",
        [
          "vector",
          "unary",
          0
        ]
      ]
    ],
    "stanza": 1316
  },
  {
    "role": "code",
    "lines": [
      "equal (list-ref (primer) 2) (vector is:int (vector unary 1 0));"
    ],
    "code": "210003221001001322100011332103322100003210011132210000321010103213203332233",
    "parse": [
      "equal",
      [
        "list-ref",
        [
          "primer"
        ],
        2
      ],
      [
        "vector",
        "is:int",
        [
          "vector",
          "unary",
          1,
          0
        ]
      ]
    ],
    "stanza": 1317
  },
  {
    "role": "code",
    "lines": [
      "assign idx (list-find (primer) (vector intro primer) (? x 0)) ",
      "    (equal (list-ref (primer) (+ (idx) 1))",
      "           (vector equal ",
      "               (vector list-ref (vector primer) 0)",
      "               (vector vector intro is:int)));"
    ],
    "code": "211103210100013221010010322100011332210000320321000113322110032100110320333221000322100100132210001133221010322101000133213332210000321000322100003210010013221000032100011332033221000032100003203210011133332233",
    "parse": [
      "assign",
      "idx",
      [
        "list-find",
        [
          "primer"
        ],
        [
          "vector",
          "intro",
          "primer"
        ],
        [
          "?",
          "x",
          0
        ]
      ],
      [
        "equal",
        [
          "list-ref",
          [
            "primer"
          ],
          [
            "+",
            [
              "idx"
            ],
            1
          ]
        ],
        [
          "vector",
          "equal",
          [
            "vector",
            "list-ref",
            [
              "vector",
              "primer"
            ],
            0
          ],
          [
            "vector",
            "vector",
            "intro",
            "is:int"
          ]
        ]
      ]
    ],
    "stanza": 1318
  },
  {
    "role": "comment",
    "lines": [
      "# Now, we could return to the MUD, simulate an agent A",
      "# transferring a copy of the primer to another agent B,",
      "# and then show B making a modified copy of that primer",
      "# and passing it back to A."
    ],
    "stanza": 1319
  },
  {
    "role": "comment",
    "lines": [
      "# We could also show agents experimenting with the",
      "# primer in various ways."
    ],
    "stanza": 1320
  },
  {
    "role": "file",
    "lines": [
      "== COS_MARK =="
    ],
    "stanza": 1321
  },
  {
    "role": "comment",
    "lines": [
      "# Message is pretty solid up to this point.",
      "# For testing purposes, useful to save state here to disk,",
      "# command: DISK-SAVE base"
    ],
    "stanza": 1322
  },
  {
    "role": "file",
    "lines": [
      "== COS_JavaPrep =="
    ],
    "stanza": 1323
  },
  {
    "role": "comment",
    "lines": [
      "# JAVA some preparatory work for integrating with Java code"
    ],
    "section_description": "some preparatory work for integrating with Java code",
    "section_category": "JAVA",
    "section_index": 54,
    "stanza": 1324
  },
  {
    "role": "code",
    "lines": [
      "class Object ()",
      "       (method add-one (lambda (x) (+ (x) 1)))",
      "       (method unknown (lambda (x) (x)))",
      "       (method <init>-V (self))",
      "       (method <init> (self))",
      "       (method classname Object)",
      "       (method equals-Object-Z (this ==))",
      "       (method equals (self equals-Object-Z))",
      "       (method act (true))",
      "       (method isobj (true));"
    ],
    "code": "21110001032101111001323221001111032101111010322110103221001103322101032210011033213333221001111032111010103221101032210011033221001103333221001111032101111011322101000113332210011110321011111003221010001133322100111103211101001321011110013322100111103210111110132211100001321110101133322100111103210111111032210100011321011111013332210011110321011111113221101103332210011110321100000003221101103332233",
    "parse": [
      "class",
      "Object",
      [],
      [
        "method",
        "add-one",
        [
          "lambda",
          [
            "x"
          ],
          [
            "+",
            [
              "x"
            ],
            1
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            "x"
          ]
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self"
        ]
      ],
      [
        "method",
        "classname",
        "Object"
      ],
      [
        "method",
        "equals-Object-Z",
        [
          "this",
          "=="
        ]
      ],
      [
        "method",
        "equals",
        [
          "self",
          "equals-Object-Z"
        ]
      ],
      [
        "method",
        "act",
        [
          "true"
        ]
      ],
      [
        "method",
        "isobj",
        [
          "true"
        ]
      ]
    ],
    "stanza": 1325
  },
  {
    "role": "code",
    "lines": [
      "define java-object | Object;"
    ],
    "code": "21101321100000013023210111100132233",
    "parse": [
      "define",
      "java-object",
      [
        -1,
        "Object"
      ]
    ],
    "stanza": 1326
  },
  {
    "role": "code",
    "lines": [
      "define act | ? x | true;"
    ],
    "code": "2110132101111111302321100321001103023211011032233",
    "parse": [
      "define",
      "act",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "true"
        ]
      ]
    ],
    "stanza": 1327
  },
  {
    "role": "comment",
    "lines": [
      "#(class java-string ()",
      "#       (field super (java-object new))",
      "#       (method classname String)",
      "#       (method unknown (lambda (x) (super (x)))));"
    ],
    "stanza": 1328
  },
  {
    "role": "comment",
    "lines": [
      "# inconsistency of various kinds of equality throughout message",
      "# needs to be cleaned up"
    ],
    "stanza": 1329
  },
  {
    "role": "code",
    "lines": [
      "class Integer ()",
      "       (field super (java-object new))",
      "       (field value (cell new 0))",
      "       (method <init> (self))",
      "       (method <init>-V (self))",
      "       (method <init>-I-V (lambda (v) ",
      "                (begin ",
      "                  (value set (v))",
      "                  (self))))",
      "       (method intValue-V (value get))",
      "       (method intValue (self intValue-V))",
      "       (method equals-Object-Z (lambda (o) (if (= (o classname) Integer)",
      "                           (= (value get) (o value get))",
      "                           (false))))",
      "       (method equals (self equals-Object-Z))",
      "       (method get (value get))",
      "       (method set (lambda(x)",
      "             (value set",
      "                (if (number? | x)",
      "                (x)",
      "                (x intValue)))))",
      "       (method classname Integer)",
      "       (method unknown (lambda (x) (super (x))));"
    ],
    "code
    "parse": [
      "class",
      "Integer",
      [],
      [
        "field",
        "super",
        [
          "java-object",
          "new"
        ]
      ],
      [
        "field",
        "value",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>-I-V",
        [
          "lambda",
          [
            "v"
          ],
          [
            "begin",
            [
              "value",
              "set",
              [
                "v"
              ]
            ],
            [
              "self"
            ]
          ]
        ]
      ],
      [
        "method",
        "intValue-V",
        [
          "value",
          "get"
        ]
      ],
      [
        "method",
        "intValue",
        [
          "self",
          "intValue-V"
        ]
      ],
      [
        "method",
        "equals-Object-Z",
        [
          "lambda",
          [
            "o"
          ],
          [
            "if",
            [
              "=",
              [
                "o",
                "classname"
              ],
              "Integer"
            ],
            [
              "=",
              [
                "value",
                "get"
              ],
              [
                "o",
                "value",
                "get"
              ]
            ],
            [
              "false"
            ]
          ]
        ]
      ],
      [
        "method",
        "equals",
        [
          "self",
          "equals-Object-Z"
        ]
      ],
      [
        "method",
        "get",
        [
          "value",
          "get"
        ]
      ],
      [
        "method",
        "set",
        [
          [
            "lambdax"
          ],
          [
            "value",
            "set",
            [
              "if",
              [
                "number?",
                [
                  -1,
                  "x"
                ]
              ],
              [
                "x"
              ],
              [
                "x",
                "intValue"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "classname",
        "Integer"
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            "super",
            [
              "x"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1330
  },
  {
    "role": "comment",
    "lines": [
      "# string is basically the same as an integer"
    ],
    "stanza": 1331
  },
  {
    "role": "code",
    "lines": [
      "class String ()",
      "       (field super (java-object new))",
      "       (field value (cell new 0))",
      "       (method <init> (self))",
      "       (method <init>-V (self))",
      "       (method <init>-String-V (lambda (v) ",
      "                 (begin ",
      "                   (value set (v value get))",
      "                   (self))))",
      "       (method int-init (lambda (x) ",
      "              (begin ",
      "                (value set (x))",
      "                (self))))",
      "       (method intValue-V (value get))",
      "       (method intValue (self intValue-V))",
      "       (method get (value get))",
      "       (method set (lambda(x)",
      "             (value set",
      "                (if (number? | x)",
      "                (x)",
      "                (x intValue)))))",
      "       (method equals-Object-Z (lambda (o) (if (= (o classname) String)",
      "                           (= (value get) (o value get))",
      "                           (false))))",
      "       (method equals (self equals-Object-Z))",
      "       (method classname String)",
      "       (method unknown (lambda (x) (super (x))));"
    ],
    "code
    "parse": [
      "class",
      "String",
      [],
      [
        "field",
        "super",
        [
          "java-object",
          "new"
        ]
      ],
      [
        "field",
        "value",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>-String-V",
        [
          "lambda",
          [
            "v"
          ],
          [
            "begin",
            [
              "value",
              "set",
              [
                "v",
                "value",
                "get"
              ]
            ],
            [
              "self"
            ]
          ]
        ]
      ],
      [
        "method",
        "int-init",
        [
          "lambda",
          [
            "x"
          ],
          [
            "begin",
            [
              "value",
              "set",
              [
                "x"
              ]
            ],
            [
              "self"
            ]
          ]
        ]
      ],
      [
        "method",
        "intValue-V",
        [
          "value",
          "get"
        ]
      ],
      [
        "method",
        "intValue",
        [
          "self",
          "intValue-V"
        ]
      ],
      [
        "method",
        "get",
        [
          "value",
          "get"
        ]
      ],
      [
        "method",
        "set",
        [
          [
            "lambdax"
          ],
          [
            "value",
            "set",
            [
              "if",
              [
                "number?",
                [
                  -1,
                  "x"
                ]
              ],
              [
                "x"
              ],
              [
                "x",
                "intValue"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "equals-Object-Z",
        [
          "lambda",
          [
            "o"
          ],
          [
            "if",
            [
              "=",
              [
                "o",
                "classname"
              ],
              "String"
            ],
            [
              "=",
              [
                "value",
                "get"
              ],
              [
                "o",
                "value",
                "get"
              ]
            ],
            [
              "false"
            ]
          ]
        ]
      ],
      [
        "method",
        "equals",
        [
          "self",
          "equals-Object-Z"
        ]
      ],
      [
        "method",
        "classname",
        "String"
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            "super",
            [
              "x"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1332
  },
  {
    "role": "comment",
    "lines": [
      "# will need to install class hierarchy, just hardcode a few things for now"
    ],
    "stanza": 1333
  },
  {
    "role": "code",
    "lines": [
      "define java",
      "  (? x | ? y ",
      "     (cond ((= (y) String) (String))",
      "       ((= (y) Object) (java-object))",
      "       ((= (y) Integer) (Integer))",
      "       (java-object)));"
    ],
    "code": "2110132110001011322110032100110302321100321100013221011111132221032211000133211000100033221100010003332221032211000133210111100133221100000013332221032211000133211000001033221100000103332211000000133332233",
    "parse": [
      "define",
      "java",
      [
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            "cond",
            [
              [
                "=",
                [
                  "y"
                ],
                "String"
              ],
              [
                "String"
              ]
            ],
            [
              [
                "=",
                [
                  "y"
                ],
                "Object"
              ],
              [
                "java-object"
              ]
            ],
            [
              [
                "=",
                [
                  "y"
                ],
                "Integer"
              ],
              [
                "Integer"
              ]
            ],
            [
              "java-object"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1334
  },
  {
    "role": "code",
    "lines": [
      "(java util String) new isobj;"
    ],
    "code": "221100010113211000110032110001000332110100103211000000032233",
    "parse": [
      [
        "java",
        "util",
        "String"
      ],
      "new",
      "isobj"
    ],
    "stanza": 1335
  },
  {
    "role": "code",
    "lines": [
      "= ((java util String) new add-one 15) 16;"
    ],
    "code": "2103222110001011321100011003211000100033211010010321011110103211113321000032233",
    "parse": [
      "=",
      [
        [
          "java",
          "util",
          "String"
        ],
        "new",
        "add-one",
        15
      ],
      16
    ],
    "stanza": 1336
  },
  {
    "role": "code",
    "lines": [
      "class java-numeric ()",
      "       (field super (java-object new))",
      "       (method unknown (lambda (x) (super (x))))",
      "       (field java-content (cell new 0))",
      "       (method get (java-content get))",
      "       (method init (lambda (v)",
      "              (begin",
      "            (self set (v))",
      "            (self))))",
      "       (method set (lambda (v) (java-content set (v))));"
    ],
    "code": "2111000103211000110132322111001113211010101322110000001321101001033322100111103211101010322110103221001103322110101013221001103333322111001113211000111032211110001321101001032033322100111103211110100322110001110321111010033322100111103211000111132211010322101001332210001011322101000113211110101322101001333221010001133333221001111032111101013221101032210100133221100011103211110101322101001333332233",
    "parse": [
      "class",
      "java-numeric",
      [],
      [
        "field",
        "super",
        [
          "java-object",
          "new"
        ]
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            "super",
            [
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "java-content",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "method",
        "get",
        [
          "java-content",
          "get"
        ]
      ],
      [
        "method",
        "init",
        [
          "lambda",
          [
            "v"
          ],
          [
            "begin",
            [
              "self",
              "set",
              [
                "v"
              ]
            ],
            [
              "self"
            ]
          ]
        ]
      ],
      [
        "method",
        "set",
        [
          "lambda",
          [
            "v"
          ],
          [
            "java-content",
            "set",
            [
              "v"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1337
  },
  {
    "role": "code",
    "lines": [
      "define byte (java-numeric);"
    ],
    "code": "2110132110010000322110001101332233",
    "parse": [
      "define",
      "byte",
      [
        "java-numeric"
      ]
    ],
    "stanza": 1338
  },
  {
    "role": "code",
    "lines": [
      "define char (java-numeric);"
    ],
    "code": "2110132110010001322110001101332233",
    "parse": [
      "define",
      "char",
      [
        "java-numeric"
      ]
    ],
    "stanza": 1339
  },
  {
    "role": "code",
    "lines": [
      "define double (java-numeric);"
    ],
    "code": "2110132110010010322110001101332233",
    "parse": [
      "define",
      "double",
      [
        "java-numeric"
      ]
    ],
    "stanza": 1340
  },
  {
    "role": "code",
    "lines": [
      "define float (java-numeric);"
    ],
    "code": "2110132110010011322110001101332233",
    "parse": [
      "define",
      "float",
      [
        "java-numeric"
      ]
    ],
    "stanza": 1341
  },
  {
    "role": "code",
    "lines": [
      "define int (java-numeric);"
    ],
    "code": "211013210111000322110001101332233",
    "parse": [
      "define",
      "int",
      [
        "java-numeric"
      ]
    ],
    "stanza": 1342
  },
  {
    "role": "code",
    "lines": [
      "define long (java-numeric);"
    ],
    "code": "2110132110010100322110001101332233",
    "parse": [
      "define",
      "long",
      [
        "java-numeric"
      ]
    ],
    "stanza": 1343
  },
  {
    "role": "code",
    "lines": [
      "define short (java-numeric);"
    ],
    "code": "2110132110010101322110001101332233",
    "parse": [
      "define",
      "short",
      [
        "java-numeric"
      ]
    ],
    "stanza": 1344
  },
  {
    "role": "code",
    "lines": [
      "define boolean (java-numeric);"
    ],
    "code": "2110132110010110322110001101332233",
    "parse": [
      "define",
      "boolean",
      [
        "java-numeric"
      ]
    ],
    "stanza": 1345
  },
  {
    "role": "code",
    "lines": [
      "define void (java-numeric);"
    ],
    "code": "2110132110010111322110001101332233",
    "parse": [
      "define",
      "void",
      [
        "java-numeric"
      ]
    ],
    "stanza": 1346
  },
  {
    "role": "code",
    "lines": [
      "define java-test1 (int new);"
    ],
    "code": "2110132110011000322101110003211010010332233",
    "parse": [
      "define",
      "java-test1",
      [
        "int",
        "new"
      ]
    ],
    "stanza": 1347
  },
  {
    "role": "code",
    "lines": [
      "java-test1 set 15;"
    ],
    "code": "2110011000321111010132111132233",
    "parse": [
      "java-test1",
      "set",
      15
    ],
    "stanza": 1348
  },
  {
    "role": "code",
    "lines": [
      "= 15 (java-test1 get);"
    ],
    "code": "2103211113221100110003211110100332233",
    "parse": [
      "=",
      15,
      [
        "java-test1",
        "get"
      ]
    ],
    "stanza": 1349
  },
  {
    "role": "code",
    "lines": [
      "define java-test2 (int new init 17);"
    ],
    "code": "2110132110011001322101110003211010010321100011113210001332233",
    "parse": [
      "define",
      "java-test2",
      [
        "int",
        "new",
        "init",
        17
      ]
    ],
    "stanza": 1350
  },
  {
    "role": "code",
    "lines": [
      "= 17 (java-test2 get);"
    ],
    "code": "21032100013221100110013211110100332233",
    "parse": [
      "=",
      17,
      [
        "java-test2",
        "get"
      ]
    ],
    "stanza": 1351
  },
  {
    "role": "code",
    "lines": [
      "define state-machine-test1",
      "  (? x",
      "     (cond ((= (x) 1) 20)",
      "       ((= (x) 2) 40)",
      "       ((= (x) 3) 60)",
      "       0));"
    ],
    "code": "21101321100110103221100321001103221011111132221032210011033213321010033222103221001103321033210100033222103221001103321133211110033203332233",
    "parse": [
      "define",
      "state-machine-test1",
      [
        "?",
        "x",
        [
          "cond",
          [
            [
              "=",
              [
                "x"
              ],
              1
            ],
            20
          ],
          [
            [
              "=",
              [
                "x"
              ],
              2
            ],
            40
          ],
          [
            [
              "=",
              [
                "x"
              ],
              3
            ],
            60
          ],
          0
        ]
      ]
    ],
    "stanza": 1352
  },
  {
    "role": "code",
    "lines": [
      "= (state-machine-test1 3) 60;"
    ],
    "code": "210322110011010321133211110032233",
    "parse": [
      "=",
      [
        "state-machine-test1",
        3
      ],
      60
    ],
    "stanza": 1353
  },
  {
    "role": "comment",
    "lines": [
      "# really ought to go back and be clear about eager/laziness issues"
    ],
    "stanza": 1354
  },
  {
    "role": "code",
    "lines": [
      "define state-machine-test2",
      "  (? x",
      "     (cond ((= (x) 1) (java-test1 set 20))",
      "       ((= (x) 2) (java-test1 set 40))",
      "       ((= (x) 3) (java-test1 set 60))",
      "       0));"
    ],
    "code": "21101321100110113221100321001103221011111132221032210011033213322110011000321111010132101003332221032210011033210332211001100032111101013210100033322210322100110332113322110011000321111010132111100333203332233",
    "parse": [
      "define",
      "state-machine-test2",
      [
        "?",
        "x",
        [
          "cond",
          [
            [
              "=",
              [
                "x"
              ],
              1
            ],
            [
              "java-test1",
              "set",
              20
            ]
          ],
          [
            [
              "=",
              [
                "x"
              ],
              2
            ],
            [
              "java-test1",
              "set",
              40
            ]
          ],
          [
            [
              "=",
              [
                "x"
              ],
              3
            ],
            [
              "java-test1",
              "set",
              60
            ]
          ],
          0
        ]
      ]
    ],
    "stanza": 1355
  },
  {
    "role": "code",
    "lines": [
      "state-machine-test2 2;"
    ],
    "code": "2110011011321032233",
    "parse": [
      "state-machine-test2",
      2
    ],
    "stanza": 1356
  },
  {
    "role": "code",
    "lines": [
      "= (java-test1 get) 40;"
    ],
    "code": "210322110011000321111010033210100032233",
    "parse": [
      "=",
      [
        "java-test1",
        "get"
      ],
      40
    ],
    "stanza": 1357
  },
  {
    "role": "code",
    "lines": [
      "define compare-object-reference",
      "  (lambda (o1 o2)",
      "    (if (number? | o1)",
      "    (number? | o2)",
      "    (= (o1 unique-id) (o2 unique-id))));"
    ],
    "code": "2110132110011100322110103221100111013211001111033221111322110003023211001110133221100030232110011110332210322110011101321110011033221100111103211100110333332233",
    "parse": [
      "define",
      "compare-object-reference",
      [
        "lambda",
        [
          "o1",
          "o2"
        ],
        [
          "if",
          [
            "number?",
            [
              -1,
              "o1"
            ]
          ],
          [
            "number?",
            [
              -1,
              "o2"
            ]
          ],
          [
            "=",
            [
              "o1",
              "unique-id"
            ],
            [
              "o2",
              "unique-id"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1358
  },
  {
    "role": "code",
    "lines": [
      "define jvm-maker",
      "  (lambda (vars stack pc ret)",
      "    (? op",
      "     (begin",
      "       (pc set (+ (pc get) 1)) |",
      "     cond ((= (op) new)",
      "        (lambda (type)",
      "          (stack-push (stack) ((type) new))))",
      "       ((= (op) dup)",
      "        (stack-push (stack) (stack-peek (stack))))",
      "       ((= (op) checkcast)",
      "        (lambda (t)",
      "          1))",
      "       ((or (= (op) astore) (= (op) istore))",
      "        (lambda (index)",
      "          (vars set (hash-add (vars get) (index) (stack-pop (stack))))))",
      "       ((or (= (op) aload) (= (op) iload))",
      "        (lambda (index)",
      "          (stack-push (stack) (hash-ref (vars get) (index)))))",
      "       ((or (= (op) iconst) (= (op) ldc))",
      "        (lambda (val)",
      "          (stack-push (stack) (val))))",
      "       ((= (op) aconst_null)",
      "        (stack-push (stack) 0))",
      "       ((= (op) instanceof)",
      "        (lambda (t)",
      "          (stack-push ",
      "           (stack)",
      "           (not | number? | (stack-pop | stack) (t new classname)))))",
      "       ((= (op) getfield)",
      "        (lambda (key ignore)",
      "          (stack-push (stack) ((stack-pop (stack)) (key) get))))",
      "       ((= (op) putfield)",
      "        (lambda (key ignore)",
      "          (let ((val (stack-pop (stack))))",
      "        ((stack-pop (stack)) (key) set (val)))))",
      "       ((= (op) imul)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (stack-push (stack)",
      "                (* (v1) (v2))))))",
      "       ((= (op) iadd)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (stack-push (stack)",
      "                (+ (v1) (v2))))))",
      "       ((= (op) isub)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (stack-push (stack)",
      "                (- (v1) (v2))))))",
      "       ((= (op) goto)",
      "        (lambda (x)",
      "          (pc set (x))))",
      "       ((= (op) iflt)",
      "        (lambda (x)",
      "          (if (< (stack-pop (stack)) 0)",
      "          (pc set (x))",
      "          0)))",
      "       ((= (op) ifle)",
      "        (lambda (x)",
      "          (if (< (stack-pop (stack)) 1)",
      "          (pc set (x))",
      "          0)))",
      "       ((= (op) ifgt)",
      "        (lambda (x)",
      "          (if (> (stack-pop (stack)) 0)",
      "          (pc set (x))",
      "          0)))",
      "       ((= (op) ifge)",
      "        (lambda (x)",
      "          (if (>= (stack-pop (stack)) 0)",
      "          (pc set (x))",
      "          0)))",
      "       ((= (op) ifne)",
      "        (lambda (x)",
      "          (if (not (= (stack-pop (stack)) 0))",
      "          (pc set (x))",
      "          0)))",
      "       ((= (op) ifeq)",
      "        (lambda (x)",
      "          (if (= (stack-pop (stack)) 0)",
      "          (pc set (x))",
      "          0)))",
      "       ((= (op) if_icmpne)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (lambda (x)",
      "          (if (not (= (v1) (v2)))",
      "              (pc set (x))",
      "              0)))))",
      "       ((= (op) if_icmpeq)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (lambda (x)",
      "          (if (= (v1) (v2))",
      "              (pc set (x))",
      "              0)))))",
      "       ((= (op) if_acmpne)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (lambda (x)",
      "          (if (not (compare-object-reference (v1) (v2)))",
      "              (pc set (x))",
      "              0)))))",
      "       ((= (op) if_acmpeq)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (lambda (x)",
      "          (if (compare-object-reference (v1) (v2))",
      "              (pc set (x))",
      "              0)))))",
      "       ((= (op) if_icmpge)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (lambda (x)",
      "          (if (>= (v1) (v2))",
      "              (pc set (x))",
      "              0)))))",
      "       ((= (op) if_icmpgt)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (lambda (x)",
      "          (if (> (v1) (v2))",
      "              (pc set (x))",
      "              0)))))",
      "       ((= (op) if_icmple)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (lambda (x)",
      "          (if (<= (v1) (v2))",
      "              (pc set (x))",
      "              0)))))",
      "       ((= (op) if_icmplt)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (lambda (x)",
      "          (if (< (v1) (v2))",
      "              (pc set (x))",
      "              0)))))",
      "       ((= (op) ifnull)",
      "        (lambda (x)",
      "          (if (number? | stack-pop (stack))",
      "          (pc set (x))",
      "          0)))",
      "       ((= (op) ifnonnull)",
      "        (lambda (x)",
      "          (if (not (number? | stack-pop (stack)))",
      "          (pc set (x))",
      "          0)))",
      "       ((= (op) return)",
      "        (begin (ret set (hash-ref (vars get) 0))",
      "           (pc set -1)))",
      "       ((= (op) ireturn)",
      "        (begin (ret set (stack-pop (stack)))",
      "           (pc set -1)))",
      "       ((= (op) areturn)",
      "        (begin (ret set (stack-pop (stack)))",
      "           (pc set -1)))",
      "       ((= (op) goto)",
      "        (lambda (target)",
      "          (pc set (target))))",
      "       ((= (op) invokevirtual)",
      "        (lambda (target m n)",
      "          (let ((result (stack-call (stack) (target) (m))))",
      "        (if (= (n) 1)",
      "            (stack-push (stack) (result))",
      "            0))))",
      "       ((= (op) invokeinterface)",
      "        (lambda (target m n ignore)",
      "          (let ((result (stack-call (stack) (target) (m))))",
      "        (if (= (n) 1)",
      "            (stack-push (stack) (result))",
      "            0))))",
      "       ((= (op) invokespecial)",
      "        (lambda (target m n)",
      "          (let ((result (stack-call-special (stack) ",
      "                        (hash-ref (vars get) 0)",
      "                        (target) ",
      "                        (m))))",
      "        (if (= (n) 1)",
      "            (stack-push (stack) (result))",
      "            0))))",
      "       0)));"
    ],
    "code
    "parse": [
      "define",
      "jvm-maker",
      [
        "lambda",
        [
          "vars",
          "stack",
          "pc",
          "ret"
        ],
        [
          "?",
          "op",
          [
            "begin",
            [
              "pc",
              "set",
              [
                "+",
                [
                  "pc",
                  "get"
                ],
                1
              ]
            ],
            [
              -1,
              "cond",
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "new"
                ],
                [
                  "lambda",
                  [
                    "type"
                  ],
                  [
                    "stack-push",
                    [
                      "stack"
                    ],
                    [
                      [
                        "type"
                      ],
                      "new"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "dup"
                ],
                [
                  "stack-push",
                  [
                    "stack"
                  ],
                  [
                    "stack-peek",
                    [
                      "stack"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "checkcast"
                ],
                [
                  "lambda",
                  [
                    "t"
                  ],
                  1
                ]
              ],
              [
                [
                  "or",
                  [
                    "=",
                    [
                      "op"
                    ],
                    "astore"
                  ],
                  [
                    "=",
                    [
                      "op"
                    ],
                    "istore"
                  ]
                ],
                [
                  "lambda",
                  [
                    "index"
                  ],
                  [
                    "vars",
                    "set",
                    [
                      "hash-add",
                      [
                        "vars",
                        "get"
                      ],
                      [
                        "index"
                      ],
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "or",
                  [
                    "=",
                    [
                      "op"
                    ],
                    "aload"
                  ],
                  [
                    "=",
                    [
                      "op"
                    ],
                    "iload"
                  ]
                ],
                [
                  "lambda",
                  [
                    "index"
                  ],
                  [
                    "stack-push",
                    [
                      "stack"
                    ],
                    [
                      "hash-ref",
                      [
                        "vars",
                        "get"
                      ],
                      [
                        "index"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "or",
                  [
                    "=",
                    [
                      "op"
                    ],
                    "iconst"
                  ],
                  [
                    "=",
                    [
                      "op"
                    ],
                    "ldc"
                  ]
                ],
                [
                  "lambda",
                  [
                    "val"
                  ],
                  [
                    "stack-push",
                    [
                      "stack"
                    ],
                    [
                      "val"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "aconst_null"
                ],
                [
                  "stack-push",
                  [
                    "stack"
                  ],
                  0
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "instanceof"
                ],
                [
                  "lambda",
                  [
                    "t"
                  ],
                  [
                    "stack-push",
                    [
                      "stack"
                    ],
                    [
                      "not",
                      [
                        -1,
                        "number?",
                        [
                          -1,
                          [
                            "stack-pop",
                            [
                              -1,
                              "stack"
                            ]
                          ],
                          [
                            "t",
                            "new",
                            "classname"
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "getfield"
                ],
                [
                  "lambda",
                  [
                    "key",
                    "ignore"
                  ],
                  [
                    "stack-push",
                    [
                      "stack"
                    ],
                    [
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ],
                      [
                        "key"
                      ],
                      "get"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "putfield"
                ],
                [
                  "lambda",
                  [
                    "key",
                    "ignore"
                  ],
                  [
                    "let",
                    [
                      [
                        "val",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ],
                      [
                        "key"
                      ],
                      "set",
                      [
                        "val"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "imul"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "stack-push",
                      [
                        "stack"
                      ],
                      [
                        "*",
                        [
                          "v1"
                        ],
                        [
                          "v2"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "iadd"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "stack-push",
                      [
                        "stack"
                      ],
                      [
                        "+",
                        [
                          "v1"
                        ],
                        [
                          "v2"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "isub"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "stack-push",
                      [
                        "stack"
                      ],
                      [
                        "-",
                        [
                          "v1"
                        ],
                        [
                          "v2"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "goto"
                ],
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "pc",
                    "set",
                    [
                      "x"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "iflt"
                ],
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "if",
                    [
                      "<",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ],
                      0
                    ],
                    [
                      "pc",
                      "set",
                      [
                        "x"
                      ]
                    ],
                    0
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "ifle"
                ],
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "if",
                    [
                      "<",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ],
                      1
                    ],
                    [
                      "pc",
                      "set",
                      [
                        "x"
                      ]
                    ],
                    0
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "ifgt"
                ],
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "if",
                    [
                      ">",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ],
                      0
                    ],
                    [
                      "pc",
                      "set",
                      [
                        "x"
                      ]
                    ],
                    0
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "ifge"
                ],
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "if",
                    [
                      ">=",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ],
                      0
                    ],
                    [
                      "pc",
                      "set",
                      [
                        "x"
                      ]
                    ],
                    0
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "ifne"
                ],
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "if",
                    [
                      "not",
                      [
                        "=",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ],
                        0
                      ]
                    ],
                    [
                      "pc",
                      "set",
                      [
                        "x"
                      ]
                    ],
                    0
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "ifeq"
                ],
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "if",
                    [
                      "=",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ],
                      0
                    ],
                    [
                      "pc",
                      "set",
                      [
                        "x"
                      ]
                    ],
                    0
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "if_icmpne"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "lambda",
                      [
                        "x"
                      ],
                      [
                        "if",
                        [
                          "not",
                          [
                            "=",
                            [
                              "v1"
                            ],
                            [
                              "v2"
                            ]
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            "x"
                          ]
                        ],
                        0
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "if_icmpeq"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "lambda",
                      [
                        "x"
                      ],
                      [
                        "if",
                        [
                          "=",
                          [
                            "v1"
                          ],
                          [
                            "v2"
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            "x"
                          ]
                        ],
                        0
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "if_acmpne"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "lambda",
                      [
                        "x"
                      ],
                      [
                        "if",
                        [
                          "not",
                          [
                            "compare-object-reference",
                            [
                              "v1"
                            ],
                            [
                              "v2"
                            ]
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            "x"
                          ]
                        ],
                        0
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "if_acmpeq"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "lambda",
                      [
                        "x"
                      ],
                      [
                        "if",
                        [
                          "compare-object-reference",
                          [
                            "v1"
                          ],
                          [
                            "v2"
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            "x"
                          ]
                        ],
                        0
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "if_icmpge"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "lambda",
                      [
                        "x"
                      ],
                      [
                        "if",
                        [
                          ">=",
                          [
                            "v1"
                          ],
                          [
                            "v2"
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            "x"
                          ]
                        ],
                        0
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "if_icmpgt"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "lambda",
                      [
                        "x"
                      ],
                      [
                        "if",
                        [
                          ">",
                          [
                            "v1"
                          ],
                          [
                            "v2"
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            "x"
                          ]
                        ],
                        0
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "if_icmple"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "lambda",
                      [
                        "x"
                      ],
                      [
                        "if",
                        [
                          "<=",
                          [
                            "v1"
                          ],
                          [
                            "v2"
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            "x"
                          ]
                        ],
                        0
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "if_icmplt"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "lambda",
                      [
                        "x"
                      ],
                      [
                        "if",
                        [
                          "<",
                          [
                            "v1"
                          ],
                          [
                            "v2"
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            "x"
                          ]
                        ],
                        0
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "ifnull"
                ],
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "if",
                    [
                      "number?",
                      [
                        -1,
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ],
                    [
                      "pc",
                      "set",
                      [
                        "x"
                      ]
                    ],
                    0
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "ifnonnull"
                ],
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "if",
                    [
                      "not",
                      [
                        "number?",
                        [
                          -1,
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "pc",
                      "set",
                      [
                        "x"
                      ]
                    ],
                    0
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "return"
                ],
                [
                  "begin",
                  [
                    "ret",
                    "set",
                    [
                      "hash-ref",
                      [
                        "vars",
                        "get"
                      ],
                      0
                    ]
                  ],
                  [
                    "pc",
                    "set",
                    "-1"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "ireturn"
                ],
                [
                  "begin",
                  [
                    "ret",
                    "set",
                    [
                      "stack-pop",
                      [
                        "stack"
                      ]
                    ]
                  ],
                  [
                    "pc",
                    "set",
                    "-1"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "areturn"
                ],
                [
                  "begin",
                  [
                    "ret",
                    "set",
                    [
                      "stack-pop",
                      [
                        "stack"
                      ]
                    ]
                  ],
                  [
                    "pc",
                    "set",
                    "-1"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "goto"
                ],
                [
                  "lambda",
                  [
                    "target"
                  ],
                  [
                    "pc",
                    "set",
                    [
                      "target"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "invokevirtual"
                ],
                [
                  "lambda",
                  [
                    "target",
                    "m",
                    "n"
                  ],
                  [
                    "let",
                    [
                      [
                        "result",
                        [
                          "stack-call",
                          [
                            "stack"
                          ],
                          [
                            "target"
                          ],
                          [
                            "m"
                          ]
                        ]
                      ]
                    ],
                    [
                      "if",
                      [
                        "=",
                        [
                          "n"
                        ],
                        1
                      ],
                      [
                        "stack-push",
                        [
                          "stack"
                        ],
                        [
                          "result"
                        ]
                      ],
                      0
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "invokeinterface"
                ],
                [
                  "lambda",
                  [
                    "target",
                    "m",
                    "n",
                    "ignore"
                  ],
                  [
                    "let",
                    [
                      [
                        "result",
                        [
                          "stack-call",
                          [
                            "stack"
                          ],
                          [
                            "target"
                          ],
                          [
                            "m"
                          ]
                        ]
                      ]
                    ],
                    [
                      "if",
                      [
                        "=",
                        [
                          "n"
                        ],
                        1
                      ],
                      [
                        "stack-push",
                        [
                          "stack"
                        ],
                        [
                          "result"
                        ]
                      ],
                      0
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "invokespecial"
                ],
                [
                  "lambda",
                  [
                    "target",
                    "m",
                    "n"
                  ],
                  [
                    "let",
                    [
                      [
                        "result",
                        [
                          "stack-call-special",
                          [
                            "stack"
                          ],
                          [
                            "hash-ref",
                            [
                              "vars",
                              "get"
                            ],
                            0
                          ],
                          [
                            "target"
                          ],
                          [
                            "m"
                          ]
                        ]
                      ]
                    ],
                    [
                      "if",
                      [
                        "=",
                        [
                          "n"
                        ],
                        1
                      ],
                      [
                        "stack-push",
                        [
                          "stack"
                        ],
                        [
                          "result"
                        ]
                      ],
                      0
                    ]
                  ]
                ]
              ],
              0
            ]
          ]
        ]
      ]
    ],
    "stanza": 1359
  },
  {
    "role": "code",
    "lines": [
      "define stack-call",
      "  (lambda (stack target ct)",
      "    (if (= (ct) 0)",
      "    ((stack-pop (stack)) (target))",
      "    (let ((arg (stack-pop (stack))))",
      "      ((stack-call (stack) (target) (- (ct) 1)) (arg)))));"
    ],
    "code": "21101321110100003221101032211010000132111001101321110101003322111132210322111010100332033222110101011322110100001333221110011013332210110003222111010101322110101011322110100001333332221110100003221101000013322111001101332210113221110101003321333221110101013333332233",
    "parse": [
      "define",
      "stack-call",
      [
        "lambda",
        [
          "stack",
          "target",
          "ct"
        ],
        [
          "if",
          [
            "=",
            [
              "ct"
            ],
            0
          ],
          [
            [
              "stack-pop",
              [
                "stack"
              ]
            ],
            [
              "target"
            ]
          ],
          [
            "let",
            [
              [
                "arg",
                [
                  "stack-pop",
                  [
                    "stack"
                  ]
                ]
              ]
            ],
            [
              [
                "stack-call",
                [
                  "stack"
                ],
                [
                  "target"
                ],
                [
                  "-",
                  [
                    "ct"
                  ],
                  1
                ]
              ],
              [
                "arg"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1360
  },
  {
    "role": "code",
    "lines": [
      "define stack-call-special",
      "  (lambda (stack self target ct)",
      "    (if (= (ct) 0)",
      "    (let ((act (stack-pop | stack)))",
      "      (if (act == (self))",
      "          (act super (target))",
      "          (act (target))))",
      "    (let ((arg (stack-pop (stack))))",
      "      ((stack-call-special (stack) (self) (target) (- (ct) 1)) (arg)))));"
    ],
    "code": "211013211101001132211010322110100001321010001132111001101321110101003322111132210322111010100332033221011000322210111111132211010101130232110100001333322111132210111111132111010113221010001133322101111111321101010132211100110133322101111111322111001101333332210110003222111010101322110101011322110100001333332221110100113221101000013322101000113322111001101332210113221110101003321333221110101013333332233",
    "parse": [
      "define",
      "stack-call-special",
      [
        "lambda",
        [
          "stack",
          "self",
          "target",
          "ct"
        ],
        [
          "if",
          [
            "=",
            [
              "ct"
            ],
            0
          ],
          [
            "let",
            [
              [
                "act",
                [
                  "stack-pop",
                  [
                    -1,
                    "stack"
                  ]
                ]
              ]
            ],
            [
              "if",
              [
                "act",
                "==",
                [
                  "self"
                ]
              ],
              [
                "act",
                "super",
                [
                  "target"
                ]
              ],
              [
                "act",
                [
                  "target"
                ]
              ]
            ]
          ],
          [
            "let",
            [
              [
                "arg",
                [
                  "stack-pop",
                  [
                    "stack"
                  ]
                ]
              ]
            ],
            [
              [
                "stack-call-special",
                [
                  "stack"
                ],
                [
                  "self"
                ],
                [
                  "target"
                ],
                [
                  "-",
                  [
                    "ct"
                  ],
                  1
                ]
              ],
              [
                "arg"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1361
  },
  {
    "role": "code",
    "lines": [
      "define stack-push",
      "  (lambda (stack x)",
      "    (stack set (prepend (x) (stack get))));"
    ],
    "code": "2110132110100101322110103221101000013210011033221101000013211110101322100101032210011033221101000013211110100333332233",
    "parse": [
      "define",
      "stack-push",
      [
        "lambda",
        [
          "stack",
          "x"
        ],
        [
          "stack",
          "set",
          [
            "prepend",
            [
              "x"
            ],
            [
              "stack",
              "get"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1362
  },
  {
    "role": "code",
    "lines": [
      "define stack-pop",
      "  (lambda (stack)",
      "    (let ((v (head (stack get))))",
      "      (begin",
      "    (stack set (tail (stack get)))",
      "    (v))));"
    ],
    "code": "21101321101010113221101032211010000133221011000322210100132210001013221101000013211110100333332210001011322110100001321111010132210001113221101000013211110100333322101001333332233",
    "parse": [
      "define",
      "stack-pop",
      [
        "lambda",
        [
          "stack"
        ],
        [
          "let",
          [
            [
              "v",
              [
                "head",
                [
                  "stack",
                  "get"
                ]
              ]
            ]
          ],
          [
            "begin",
            [
              "stack",
              "set",
              [
                "tail",
                [
                  "stack",
                  "get"
                ]
              ]
            ],
            [
              "v"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1363
  },
  {
    "role": "code",
    "lines": [
      "define stack-peek",
      "  (lambda (stack)",
      "    (head (stack get)));"
    ],
    "code": "21101321101001113221101032211010000133221000101322110100001321111010033332233",
    "parse": [
      "define",
      "stack-peek",
      [
        "lambda",
        [
          "stack"
        ],
        [
          "head",
          [
            "stack",
            "get"
          ]
        ]
      ]
    ],
    "stanza": 1364
  },
  {
    "role": "code",
    "lines": [
      "define stack-test1 (cell new (vector 5 3 1));"
    ],
    "code": "2110132111010110322111100013211010010322100003210132113213332233",
    "parse": [
      "define",
      "stack-test1",
      [
        "cell",
        "new",
        [
          "vector",
          5,
          3,
          1
        ]
      ]
    ],
    "stanza": 1365
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop (stack-test1)) 5;"
    ],
    "code": "210322110101011322111010110333210132233",
    "parse": [
      "=",
      [
        "stack-pop",
        [
          "stack-test1"
        ]
      ],
      5
    ],
    "stanza": 1366
  },
  {
    "role": "code",
    "lines": [
      "= (stack-peek (stack-test1)) 3;"
    ],
    "code": "21032211010011132211101011033321132233",
    "parse": [
      "=",
      [
        "stack-peek",
        [
          "stack-test1"
        ]
      ],
      3
    ],
    "stanza": 1367
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop (stack-test1)) 3;"
    ],
    "code": "21032211010101132211101011033321132233",
    "parse": [
      "=",
      [
        "stack-pop",
        [
          "stack-test1"
        ]
      ],
      3
    ],
    "stanza": 1368
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) 7;"
    ],
    "code": "211010010132211101011033211132233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      7
    ],
    "stanza": 1369
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop (stack-test1)) 7;"
    ],
    "code": "210322110101011322111010110333211132233",
    "parse": [
      "=",
      [
        "stack-pop",
        [
          "stack-test1"
        ]
      ],
      7
    ],
    "stanza": 1370
  },
  {
    "role": "code",
    "lines": [
      "define vars-test1 (cell new (hash-null));"
    ],
    "code": "2110132111010111322111100013211010010322100100003332233",
    "parse": [
      "define",
      "vars-test1",
      [
        "cell",
        "new",
        [
          "hash-null"
        ]
      ]
    ],
    "stanza": 1371
  },
  {
    "role": "code",
    "lines": [
      "define pc-test1 (cell new 0);"
    ],
    "code": "2110132111011000322111100013211010010320332233",
    "parse": [
      "define",
      "pc-test1",
      [
        "cell",
        "new",
        0
      ]
    ],
    "stanza": 1372
  },
  {
    "role": "code",
    "lines": [
      "define ret-test1 (cell new 0);"
    ],
    "code": "2110132111011001322111100013211010010320332233",
    "parse": [
      "define",
      "ret-test1",
      [
        "cell",
        "new",
        0
      ]
    ],
    "stanza": 1373
  },
  {
    "role": "code",
    "lines": [
      "define test-jvm (jvm-maker (vars-test1) (stack-test1) (pc-test1) (ret-test1));"
    ],
    "code": "21101321110110103221100111113221110101113322111010110332211101100033221110110013332233",
    "parse": [
      "define",
      "test-jvm",
      [
        "jvm-maker",
        [
          "vars-test1"
        ],
        [
          "stack-test1"
        ],
        [
          "pc-test1"
        ],
        [
          "ret-test1"
        ]
      ]
    ],
    "stanza": 1374
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) 4;"
    ],
    "code": "211010010132211101011033210032233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      4
    ],
    "stanza": 1375
  },
  {
    "role": "code",
    "lines": [
      "test-jvm dup;"
    ],
    "code": "21110110103211010011032233",
    "parse": [
      "test-jvm",
      "dup"
    ],
    "stanza": 1376
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop (stack-test1)) 4;"
    ],
    "code": "210322110101011322111010110333210032233",
    "parse": [
      "=",
      [
        "stack-pop",
        [
          "stack-test1"
        ]
      ],
      4
    ],
    "stanza": 1377
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop (stack-test1)) 4;"
    ],
    "code": "210322110101011322111010110333210032233",
    "parse": [
      "=",
      [
        "stack-pop",
        [
          "stack-test1"
        ]
      ],
      4
    ],
    "stanza": 1378
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) 66;"
    ],
    "code": "2110100101322111010110332100001032233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      66
    ],
    "stanza": 1379
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) 77;"
    ],
    "code": "2110100101322111010110332100110132233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      77
    ],
    "stanza": 1380
  },
  {
    "role": "code",
    "lines": [
      "test-jvm astore 3;"
    ],
    "code": "211101101032110101001321132233",
    "parse": [
      "test-jvm",
      "astore",
      3
    ],
    "stanza": 1381
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop (stack-test1)) 66;"
    ],
    "code": "2103221101010113221110101103332100001032233",
    "parse": [
      "=",
      [
        "stack-pop",
        [
          "stack-test1"
        ]
      ],
      66
    ],
    "stanza": 1382
  },
  {
    "role": "code",
    "lines": [
      "test-jvm aload 3;"
    ],
    "code": "211101101032110101100321132233",
    "parse": [
      "test-jvm",
      "aload",
      3
    ],
    "stanza": 1383
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop (stack-test1)) 77;"
    ],
    "code": "2103221101010113221110101103332100110132233",
    "parse": [
      "=",
      [
        "stack-pop",
        [
          "stack-test1"
        ]
      ],
      77
    ],
    "stanza": 1384
  },
  {
    "role": "code",
    "lines": [
      "class test-class ()",
      "       (field x ((int) new))",
      "       (field y ((int) new));"
    ],
    "code": "2111000103211101101132322111001113210011032221011100033211010010333221110011132110001322210111000332110100103332233",
    "parse": [
      "class",
      "test-class",
      [],
      [
        "field",
        "x",
        [
          [
            "int"
          ],
          "new"
        ]
      ],
      [
        "field",
        "y",
        [
          [
            "int"
          ],
          "new"
        ]
      ]
    ],
    "stanza": 1385
  },
  {
    "role": "code",
    "lines": [
      "define test-this (test-class new);"
    ],
    "code": "21101321110111003221110110113211010010332233",
    "parse": [
      "define",
      "test-this",
      [
        "test-class",
        "new"
      ]
    ],
    "stanza": 1386
  },
  {
    "role": "code",
    "lines": [
      "test-this x set 5;"
    ],
    "code": "21110111003210011032111101013210132233",
    "parse": [
      "test-this",
      "x",
      "set",
      5
    ],
    "stanza": 1387
  },
  {
    "role": "code",
    "lines": [
      "= (test-this x get) 5;"
    ],
    "code": "21032211101110032100110321111010033210132233",
    "parse": [
      "=",
      [
        "test-this",
        "x",
        "get"
      ],
      5
    ],
    "stanza": 1388
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) (test-this);"
    ],
    "code": "21101001013221110101103322111011100332233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      [
        "test-this"
      ]
    ],
    "stanza": 1389
  },
  {
    "role": "code",
    "lines": [
      "= ((stack-pop (stack-test1)) x get) 5;"
    ],
    "code": "21032221101010113221110101103332100110321111010033210132233",
    "parse": [
      "=",
      [
        [
          "stack-pop",
          [
            "stack-test1"
          ]
        ],
        "x",
        "get"
      ],
      5
    ],
    "stanza": 1390
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) (test-this);"
    ],
    "code": "21101001013221110101103322111011100332233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      [
        "test-this"
      ]
    ],
    "stanza": 1391
  },
  {
    "role": "code",
    "lines": [
      "test-jvm astore 0;"
    ],
    "code": "21110110103211010100132032233",
    "parse": [
      "test-jvm",
      "astore",
      0
    ],
    "stanza": 1392
  },
  {
    "role": "code",
    "lines": [
      "test-jvm aload 0;"
    ],
    "code": "21110110103211010110032032233",
    "parse": [
      "test-jvm",
      "aload",
      0
    ],
    "stanza": 1393
  },
  {
    "role": "code",
    "lines": [
      "test-jvm getfield x (int);"
    ],
    "code": "2111011010321101100103210011032210111000332233",
    "parse": [
      "test-jvm",
      "getfield",
      "x",
      [
        "int"
      ]
    ],
    "stanza": 1394
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop (stack-test1)) 5;"
    ],
    "code": "210322110101011322111010110333210132233",
    "parse": [
      "=",
      [
        "stack-pop",
        [
          "stack-test1"
        ]
      ],
      5
    ],
    "stanza": 1395
  },
  {
    "role": "code",
    "lines": [
      "test-jvm aload 0;"
    ],
    "code": "21110110103211010110032032233",
    "parse": [
      "test-jvm",
      "aload",
      0
    ],
    "stanza": 1396
  },
  {
    "role": "code",
    "lines": [
      "test-jvm iconst 15;"
    ],
    "code": "21110110103211010111032111132233",
    "parse": [
      "test-jvm",
      "iconst",
      15
    ],
    "stanza": 1397
  },
  {
    "role": "code",
    "lines": [
      "test-jvm putfield y (int);"
    ],
    "code": "2111011010321101101003211000132210111000332233",
    "parse": [
      "test-jvm",
      "putfield",
      "y",
      [
        "int"
      ]
    ],
    "stanza": 1398
  },
  {
    "role": "code",
    "lines": [
      "= (test-this y get) 15;"
    ],
    "code": "210322111011100321100013211110100332111132233",
    "parse": [
      "=",
      [
        "test-this",
        "y",
        "get"
      ],
      15
    ],
    "stanza": 1399
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) 7;"
    ],
    "code": "211010010132211101011033211132233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      7
    ],
    "stanza": 1400
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) 10;"
    ],
    "code": "2110100101322111010110332101032233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      10
    ],
    "stanza": 1401
  },
  {
    "role": "code",
    "lines": [
      "test-jvm imul;"
    ],
    "code": "21110110103211011010132233",
    "parse": [
      "test-jvm",
      "imul"
    ],
    "stanza": 1402
  },
  {
    "role": "code",
    "lines": [
      "test-jvm ireturn;"
    ],
    "code": "21110110103211100101132233",
    "parse": [
      "test-jvm",
      "ireturn"
    ],
    "stanza": 1403
  },
  {
    "role": "code",
    "lines": [
      "= (ret-test1 get) 70;"
    ],
    "code": "2103221110110013211110100332100011032233",
    "parse": [
      "=",
      [
        "ret-test1",
        "get"
      ],
      70
    ],
    "stanza": 1404
  },
  {
    "role": "code",
    "lines": [
      "define state-machine-helper |",
      "  ? at |",
      "  lambda (vars stack machine) |",
      "  let ((pc (cell new (at)))",
      "       (ret (cell new (true)))) |",
      "  let ((jvm (jvm-maker (vars) (stack) (pc) (ret))))",
      "  (begin",
      "    (machine (jvm) (pc get))",
      "    (if (= (pc get) -1)",
      "    (ret get)",
      "    (state-machine-helper (pc get) (vars) (stack) (machine))));"
    ],
    "code": "211013211101110130232110032111011110302321101032211010000032110100001321010110033023210110003222110100010322111100013211010010322111011110333322100001132211110001321101001032211011033333023210110003222111011111322110011111322110100000332211010000133221101000103322100001133333221000101132210101100322111011111332211010001032111101003332211113221032211010001032111101003300322100001132111101003322111011101322110100010321111010033221101000003322110100001332210101100333332233",
    "parse": [
      "define",
      "state-machine-helper",
      [
        -1,
        "?",
        "at",
        [
          -1,
          "lambda",
          [
            "vars",
            "stack",
            "machine"
          ],
          [
            -1,
            "let",
            [
              [
                "pc",
                [
                  "cell",
                  "new",
                  [
                    "at"
                  ]
                ]
              ],
              [
                "ret",
                [
                  "cell",
                  "new",
                  [
                    "true"
                  ]
                ]
              ]
            ],
            [
              -1,
              "let",
              [
                [
                  "jvm",
                  [
                    "jvm-maker",
                    [
                      "vars"
                    ],
                    [
                      "stack"
                    ],
                    [
                      "pc"
                    ],
                    [
                      "ret"
                    ]
                  ]
                ]
              ],
              [
                "begin",
                [
                  "machine",
                  [
                    "jvm"
                  ],
                  [
                    "pc",
                    "get"
                  ]
                ],
                [
                  "if",
                  [
                    "=",
                    [
                      "pc",
                      "get"
                    ],
                    "-1"
                  ],
                  [
                    "ret",
                    "get"
                  ],
                  [
                    "state-machine-helper",
                    [
                      "pc",
                      "get"
                    ],
                    [
                      "vars"
                    ],
                    [
                      "stack"
                    ],
                    [
                      "machine"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1405
  },
  {
    "role": "code",
    "lines": [
      "define state-machine",
      "  (state-machine-helper 0);"
    ],
    "code": "2110132111100000322111011101320332233",
    "parse": [
      "define",
      "state-machine",
      [
        "state-machine-helper",
        0
      ]
    ],
    "stanza": 1406
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) 10;"
    ],
    "code": "2110100101322111010110332101032233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      10
    ],
    "stanza": 1407
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) 33;"
    ],
    "code": "211010010132211101011033210000132233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      33
    ],
    "stanza": 1408
  },
  {
    "role": "code",
    "lines": [
      "= (state-machine (vars-test1) (stack-test1) | ? jvm | ? x",
      "          (cond ((= (x) 0) (jvm istore 4))",
      "            ((= (x) 1) (jvm iload 4))",
      "            (jvm ireturn)))",
      "   33;"
    ],
    "code": "210322111100000322111010111332211101011033023211003211101111130232110032100110322101111113222103221001103320332211101111132110101010321003332221032210011033213322111011111321101011013210033322111011111321110010113333210000132233",
    "parse": [
      "=",
      [
        "state-machine",
        [
          "vars-test1"
        ],
        [
          "stack-test1"
        ],
        [
          -1,
          "?",
          "jvm",
          [
            -1,
            "?",
            "x",
            [
              "cond",
              [
                [
                  "=",
                  [
                    "x"
                  ],
                  0
                ],
                [
                  "jvm",
                  "istore",
                  4
                ]
              ],
              [
                [
                  "=",
                  [
                    "x"
                  ],
                  1
                ],
                [
                  "jvm",
                  "iload",
                  4
                ]
              ],
              [
                "jvm",
                "ireturn"
              ]
            ]
          ]
        ]
      ],
      33
    ],
    "stanza": 1409
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) 10;"
    ],
    "code": "2110100101322111010110332101032233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      10
    ],
    "stanza": 1410
  },
  {
    "role": "code",
    "lines": [
      "define bytecode-test-mul",
      "  (lambda (arg0 arg1) |",
      "      let ((vars | cell new | make-hash | vector (pair 0 0) (pair 1 (arg0)) (pair 2 (arg1)))",
      "           (stack | cell new | vector)) |",
      "           state-machine (vars) (stack) | ? jvm | ? x | cond",
      "           ((= (x) 0) (jvm iload 1))",
      "           ((= (x) 1) (jvm iload 2))",
      "           ((= (x) 2) (jvm imul))",
      "           ((= (x) 3) (jvm ireturn))",
      "           (jvm return));"
    ],
    "code": "2110132111100001322110103221111000103211110001133023210110003222110100000302321111000132110100103023210010100302321000032211111132032033221111113213221111000103332211111132103221111000113333221101000013023211110001321101001030232100003330232111100000322110100000332211010000133023211003211101111130232110032100110302321011111132221032210011033203322111011111321101011013213332221032210011033213322111011111321101011013210333222103221001103321033221110111113211011010133322210322100110332113322111011111321110010113332211101111132110001013332233",
    "parse": [
      "define",
      "bytecode-test-mul",
      [
        "lambda",
        [
          "arg0",
          "arg1"
        ],
        [
          -1,
          "let",
          [
            [
              "vars",
              [
                -1,
                "cell",
                "new",
                [
                  -1,
                  "make-hash",
                  [
                    -1,
                    "vector",
                    [
                      "pair",
                      0,
                      0
                    ],
                    [
                      "pair",
                      1,
                      [
                        "arg0"
                      ]
                    ],
                    [
                      "pair",
                      2,
                      [
                        "arg1"
                      ]
                    ]
                  ]
                ]
              ]
            ],
            [
              "stack",
              [
                -1,
                "cell",
                "new",
                [
                  -1,
                  "vector"
                ]
              ]
            ]
          ],
          [
            -1,
            "state-machine",
            [
              "vars"
            ],
            [
              "stack"
            ],
            [
              -1,
              "?",
              "jvm",
              [
                -1,
                "?",
                "x",
                [
                  -1,
                  "cond",
                  [
                    [
                      "=",
                      [
                        "x"
                      ],
                      0
                    ],
                    [
                      "jvm",
                      "iload",
                      1
                    ]
                  ],
                  [
                    [
                      "=",
                      [
                        "x"
                      ],
                      1
                    ],
                    [
                      "jvm",
                      "iload",
                      2
                    ]
                  ],
                  [
                    [
                      "=",
                      [
                        "x"
                      ],
                      2
                    ],
                    [
                      "jvm",
                      "imul"
                    ]
                  ],
                  [
                    [
                      "=",
                      [
                        "x"
                      ],
                      3
                    ],
                    [
                      "jvm",
                      "ireturn"
                    ]
                  ],
                  [
                    "jvm",
                    "return"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1411
  },
  {
    "role": "code",
    "lines": [
      "= (bytecode-test-mul 5 9) 45;"
    ],
    "code": "2103221111000013210132100133210110132233",
    "parse": [
      "=",
      [
        "bytecode-test-mul",
        5,
        9
      ],
      45
    ],
    "stanza": 1412
  },
  {
    "role": "file",
    "lines": [
      "== COS_JavaTest =="
    ],
    "stanza": 1413
  },
  {
    "role": "comment",
    "lines": [
      "# JAVA class translation 'COS_JavaTest'",
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# public class COS_JavaTest {",
      "#     private int q = 0;",
      "#     public int add(int x, int y) {",
      "#     return x+y;",
      "#     }",
      "#     public int sub(int x, int y) {",
      "#     return x-y;",
      "#     }",
      "#     public int mult(int x, int y) {",
      "#     return x*y;",
      "#     }",
      "#     public int addmult(int x, int y, int z) {",
      "#     return add(x,mult(y,z));",
      "#     }",
      "#     public void set(int x) {",
      "#     q = x;",
      "#     }",
      "#     public int get() {",
      "#     return q;",
      "#     }",
      "#     public int fact(int x) {",
      "#     return (x>0)?(x*fact(sub(x,1))):1;",
      "#     }",
      "# }",
      "# "
    ],
    "section_description": "class translation 'COS_JavaTest'",
    "section_category": "JAVA",
    "section_index": 55,
    "stanza": 1414
  },
  {
    "role": "code",
    "lines": [
      "class COS_JavaTest ()",
      "   (field super-ref (make-cell 0))",
      "   (method new (set! (super-ref) ((java lang Object) | this)))",
      "   (method super (? x | (get! | super-ref) | x))",
      "   (method unknown (? x | self super | x))",
      "   (field q ((int) new))",
      "   (method <init>-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 2) (jvm aload 0))",
      "         ((= (x) 3) (jvm iconst 0))",
      "         ((= (x) 4) (jvm putfield q (int)))",
      "         ((= (x) 5) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> (self <init>-V))",
      "",
      "   (method add-I-I-I",
      "     (lambda (arg0 arg1) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm iload 1))",
      "         ((= (x) 1) (jvm iload 2))",
      "         ((= (x) 2) (jvm iadd))",
      "         ((= (x) 3) (jvm ireturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method add (self add-I-I-I))",
      "",
      "   (method sub-I-I-I",
      "     (lambda (arg0 arg1) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm iload 1))",
      "         ((= (x) 1) (jvm iload 2))",
      "         ((= (x) 2) (jvm isub))",
      "         ((= (x) 3) (jvm ireturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method sub (self sub-I-I-I))",
      "",
      "   (method mult-I-I-I",
      "     (lambda (arg0 arg1) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm iload 1))",
      "         ((= (x) 1) (jvm iload 2))",
      "         ((= (x) 2) (jvm imul))",
      "         ((= (x) 3) (jvm ireturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method mult (self mult-I-I-I))",
      "",
      "   (method addmult-I-I-I-I",
      "     (lambda (arg0 arg1 arg2) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)) (pair 3 (arg2)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm iload 1))",
      "         ((= (x) 2) (jvm aload 0))",
      "         ((= (x) 3) (jvm iload 2))",
      "         ((= (x) 4) (jvm iload 3))",
      "         ((= (x) 5) (jvm invokevirtual mult-I-I-I 2 1))",
      "         ((= (x) 6) (jvm invokevirtual add-I-I-I 2 1))",
      "         ((= (x) 7) (jvm ireturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method addmult (self addmult-I-I-I-I))",
      "",
      "   (method set-I-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm iload 1))",
      "         ((= (x) 2) (jvm putfield q (int)))",
      "         ((= (x) 3) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method set (self set-I-V))",
      "",
      "   (method get-I",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield q (int)))",
      "         ((= (x) 2) (jvm ireturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method get (self get-I))",
      "",
      "   (method fact-I-I",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm iload 1))",
      "         ((= (x) 1) (jvm ifle 11))",
      "         ((= (x) 2) (jvm iload 1))",
      "         ((= (x) 3) (jvm aload 0))",
      "         ((= (x) 4) (jvm aload 0))",
      "         ((= (x) 5) (jvm iload 1))",
      "         ((= (x) 6) (jvm iconst 1))",
      "         ((= (x) 7) (jvm invokevirtual sub-I-I-I 2 1))",
      "         ((= (x) 8) (jvm invokevirtual fact-I-I 1 1))",
      "         ((= (x) 9) (jvm imul))",
      "         ((= (x) 10) (jvm goto 12))",
      "         ((= (x) 11) (jvm iconst 1))",
      "         ((= (x) 12) (jvm ireturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method fact (self fact-I-I))",
      "",
      " ;"
    ],
    "code
    "parse": [
      "class",
      "COS_JavaTest",
      [],
      [
        "field",
        "super-ref",
        [
          "make-cell",
          0
        ]
      ],
      [
        "method",
        "new",
        [
          "set!",
          [
            "super-ref"
          ],
          [
            [
              "java",
              "lang",
              "Object"
            ],
            [
              -1,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -1,
                "super-ref"
              ]
            ],
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "q",
        [
          [
            "int"
          ],
          "new"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        0,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "iconst",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "putfield",
                        "q",
                        [
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        5
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "add-I-I-I",
        [
          "lambda",
          [
            "arg0",
            "arg1"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        1,
                        [
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        2,
                        [
                          "arg1"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "iload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "iload",
                        2
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "iadd"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "ireturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "add",
        [
          "self",
          "add-I-I-I"
        ]
      ],
      [
        "method",
        "sub-I-I-I",
        [
          "lambda",
          [
            "arg0",
            "arg1"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        1,
                        [
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        2,
                        [
                          "arg1"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "iload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "iload",
                        2
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "isub"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "ireturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "sub",
        [
          "self",
          "sub-I-I-I"
        ]
      ],
      [
        "method",
        "mult-I-I-I",
        [
          "lambda",
          [
            "arg0",
            "arg1"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        1,
                        [
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        2,
                        [
                          "arg1"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "iload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "iload",
                        2
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "imul"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "ireturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "mult",
        [
          "self",
          "mult-I-I-I"
        ]
      ],
      [
        "method",
        "addmult-I-I-I-I",
        [
          "lambda",
          [
            "arg0",
            "arg1",
            "arg2"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        1,
                        [
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        2,
                        [
                          "arg1"
                        ]
                      ],
                      [
                        "pair",
                        3,
                        [
                          "arg2"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "iload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "iload",
                        2
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "iload",
                        3
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        5
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "mult-I-I-I",
                        2,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        6
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "add-I-I-I",
                        2,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        7
                      ],
                      [
                        "jvm",
                        "ireturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "addmult",
        [
          "self",
          "addmult-I-I-I-I"
        ]
      ],
      [
        "method",
        "set-I-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        1,
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "iload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "putfield",
                        "q",
                        [
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "set",
        [
          "self",
          "set-I-V"
        ]
      ],
      [
        "method",
        "get-I",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "getfield",
                        "q",
                        [
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "ireturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "get",
        [
          "self",
          "get-I"
        ]
      ],
      [
        "method",
        "fact-I-I",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        1,
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "iload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "ifle",
                        11
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "iload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        5
                      ],
                      [
                        "jvm",
                        "iload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        6
                      ],
                      [
                        "jvm",
                        "iconst",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        7
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "sub-I-I-I",
                        2,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        8
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "fact-I-I",
                        1,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        9
                      ],
                      [
                        "jvm",
                        "imul"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        10
                      ],
                      [
                        "jvm",
                        "goto",
                        12
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        11
                      ],
                      [
                        "jvm",
                        "iconst",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        12
                      ],
                      [
                        "jvm",
                        "ireturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "fact",
        [
          "self",
          "fact-I-I"
        ]
      ]
    ],
    "stanza": 1415
  },
  {
    "role": "file",
    "lines": [
      "== COS_JavaValidate =="
    ],
    "stanza": 1416
  },
  {
    "role": "comment",
    "lines": [
      "# JAVA check that automatic conversion is workable"
    ],
    "section_description": "check that automatic conversion is workable",
    "section_category": "JAVA",
    "section_index": 56,
    "stanza": 1417
  },
  {
    "role": "code",
    "lines": [
      "define test1 (COS_JavaTest new);"
    ],
    "code": "21101321111100103221111001003211010010332233",
    "parse": [
      "define",
      "test1",
      [
        "COS_JavaTest",
        "new"
      ]
    ],
    "stanza": 1418
  },
  {
    "role": "comment",
    "lines": [
      "# Note that the names of methods include type information.",
      "# This could easily be removed, but is retained so that overloading",
      "# is possible in the Java code.",
      "# I is integer, V is void.  The last type in the name is the return type."
    ],
    "stanza": 1419
  },
  {
    "role": "code",
    "lines": [
      "= (test1 mult-I-I-I 15 10) 150;"
    ],
    "code": "210322111110010321111010103211113210103321001011032233",
    "parse": [
      "=",
      [
        "test1",
        "mult-I-I-I",
        15,
        10
      ],
      150
    ],
    "stanza": 1420
  },
  {
    "role": "comment",
    "lines": [
      "# The type information can be safely omitted if there is no ambiguity"
    ],
    "stanza": 1421
  },
  {
    "role": "code",
    "lines": [
      "= (test1 mult 15 10) 150;"
    ],
    "code": "2103221111100103211100103211113210103321001011032233",
    "parse": [
      "=",
      [
        "test1",
        "mult",
        15,
        10
      ],
      150
    ],
    "stanza": 1422
  },
  {
    "role": "code",
    "lines": [
      "= (test1 addmult-I-I-I-I 4 15 10) 154;"
    ],
    "code": "21032211111001032111101011321003211113210103321001101032233",
    "parse": [
      "=",
      [
        "test1",
        "addmult-I-I-I-I",
        4,
        15,
        10
      ],
      154
    ],
    "stanza": 1423
  },
  {
    "role": "code",
    "lines": [
      "begin",
      "  (test1 set-I-V 87)",
      "  (= (test1 get-I) 87);"
    ],
    "code": "21000101132211111001032111101110321010111332210322111110010321111011113321010111332233",
    "parse": [
      "begin",
      [
        "test1",
        "set-I-V",
        87
      ],
      [
        "=",
        [
          "test1",
          "get-I"
        ],
        87
      ]
    ],
    "stanza": 1424
  },
  {
    "role": "code",
    "lines": [
      "= (test1 fact-I-I 0) 1;"
    ],
    "code": "21032211111001032111110000320332132233",
    "parse": [
      "=",
      [
        "test1",
        "fact-I-I",
        0
      ],
      1
    ],
    "stanza": 1425
  },
  {
    "role": "code",
    "lines": [
      "= (test1 fact-I-I 1) 1;"
    ],
    "code": "21032211111001032111110000321332132233",
    "parse": [
      "=",
      [
        "test1",
        "fact-I-I",
        1
      ],
      1
    ],
    "stanza": 1426
  },
  {
    "role": "code",
    "lines": [
      "= (test1 fact-I-I 5) 120;"
    ],
    "code": "2103221111100103211111000032101332111100032233",
    "parse": [
      "=",
      [
        "test1",
        "fact-I-I",
        5
      ],
      120
    ],
    "stanza": 1427
  },
  {
    "role": "comment",
    "lines": [
      "# Yay! testing says this works.",
      "# So structure for bytecode interpretation is in place.",
      "# Very few opcodes actually implemented yet though."
    ],
    "stanza": 1428
  },
  {
    "role": "file",
    "lines": [
      "== COS_Geo =="
    ],
    "stanza": 1429
  },
  {
    "role": "comment",
    "lines": [
      "# MUD another simple little text-adventure space"
    ],
    "section_description": "another simple little text-adventure space",
    "section_category": "MUD",
    "section_index": 57,
    "stanza": 1430
  },
  {
    "role": "comment",
    "lines": [
      "# let us try to make a slightly more interesting world"
    ],
    "stanza": 1431
  },
  {
    "role": "code",
    "lines": [
      "define make-table",
      "  (lambda (lst)",
      "    (crunch (? x | ? h | ",
      "           assign name (car | x) |",
      "           assign obj (cdr | x) |",
      "           hash-add (h) (name) (obj))",
      "        (append (hash-null) (lst))));"
    ],
    "code": "211013211111001132211010322100011033221100010322110032100110302321100321000111030232111032100111013221011030232100110330232111032110001103221011130232100110330232100011013221000111033221001110133221100011033322110110113221001000033221000110333332233",
    "parse": [
      "define",
      "make-table",
      [
        "lambda",
        [
          "lst"
        ],
        [
          "crunch",
          [
            "?",
            "x",
            [
              -1,
              "?",
              "h",
              [
                -1,
                "assign",
                "name",
                [
                  "car",
                  [
                    -1,
                    "x"
                  ]
                ],
                [
                  -1,
                  "assign",
                  "obj",
                  [
                    "cdr",
                    [
                      -1,
                      "x"
                    ]
                  ],
                  [
                    -1,
                    "hash-add",
                    [
                      "h"
                    ],
                    [
                      "name"
                    ],
                    [
                      "obj"
                    ]
                  ]
                ]
              ]
            ]
          ],
          [
            "append",
            [
              "hash-null"
            ],
            [
              "lst"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1432
  },
  {
    "role": "comment",
    "lines": [
      "# note, the quoted strings below are just represented as a big number,",
      "# nothing special"
    ],
    "stanza": 1433
  },
  {
    "role": "code",
    "lines": [
      "define geo-map ",
      "  (make-table",
      "   (map",
      "    (? name (cons (name) (room new (name))))",
      "    (vector \"boston\" \"dublin\" \"paris\" \"genoa\")));"
    ],
    "code": "2110132111110100322111110011322110000032211003210011101322101013221001110133221111110132110100103221001110133333221000032100011001000101110010000100100103210011101100100111001011010010010321100001011100100110100101110011321001101010010001100100001010000133332233",
    "parse": [
      "define",
      "geo-map",
      [
        "make-table",
        [
          "map",
          [
            "?",
            "name",
            [
              "cons",
              [
                "name"
              ],
              [
                "room",
                "new",
                [
                  "name"
                ]
              ]
            ]
          ],
          [
            "vector",
            "\"boston\"",
            "\"dublin\"",
            "\"paris\"",
            "\"genoa\""
          ]
        ]
      ]
    ],
    "stanza": 1434
  },
  {
    "role": "code",
    "lines": [
      "define my-links",
      "  (map ",
      "   (? entry (assign src (car | entry) |",
      "            assign dest (cdr | entry) |",
      "            door new (geo-map | src) (geo-map | dest)))",
      "   (vector",
      "    (cons \"boston\" \"dublin\")",
      "    (cons \"dublin\" \"paris\")",
      "    (cons \"boston\" \"paris\")",
      "    (cons \"paris\" \"genoa\")));"
    ],
    "code": "2110132111110101322110000032211003211111011032211103211111100322101103023211111011033023211103211111110322101113023211111011033023211111011321101001032211111010030232111111003322111110100302321111111033332210000322101013210001100100010111001000010010010321001110110010011100101101001001033221010132100111011001001110010110100100103211000010111001001101001011100113322101013210001100100010111001000010010010321100001011100100110100101110011332210101321100001011100100110100101110011321001101010010001100100001010000133332233",
    "parse": [
      "define",
      "my-links",
      [
        "map",
        [
          "?",
          "entry",
          [
            "assign",
            "src",
            [
              "car",
              [
                -1,
                "entry"
              ]
            ],
            [
              -1,
              "assign",
              "dest",
              [
                "cdr",
                [
                  -1,
                  "entry"
                ]
              ],
              [
                -1,
                "door",
                "new",
                [
                  "geo-map",
                  [
                    -1,
                    "src"
                  ]
                ],
                [
                  "geo-map",
                  [
                    -1,
                    "dest"
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          "vector",
          [
            "cons",
            "\"boston\"",
            "\"dublin\""
          ],
          [
            "cons",
            "\"dublin\"",
            "\"paris\""
          ],
          [
            "cons",
            "\"boston\"",
            "\"paris\""
          ],
          [
            "cons",
            "\"paris\"",
            "\"genoa\""
          ]
        ]
      ]
    ],
    "stanza": 1435
  },
  {
    "role": "code",
    "lines": [
      "define myrobo (robo new);"
    ],
    "code": "21101321001000013221000110003211010010332233",
    "parse": [
      "define",
      "myrobo",
      [
        "robo",
        "new"
      ]
    ],
    "stanza": 1436
  },
  {
    "role": "code",
    "lines": [
      "myrobo set-room (geo-map \"dublin\");"
    ],
    "code": "2100100001321000011103221111101003210011101100100111001011010010010332233",
    "parse": [
      "myrobo",
      "set-room",
      [
        "geo-map",
        "\"dublin\""
      ]
    ],
    "stanza": 1437
  },
  {
    "role": "code",
    "lines": [
      "(equal \"dublin\" | myrobo get-room name);"
    ],
    "code": "2100032100111011001001110010110100100103023210010000132100010000321001110132233",
    "parse": [
      "equal",
      "\"dublin\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1438
  },
  {
    "role": "code",
    "lines": [
      "myrobo update;"
    ],
    "code": "21001000013210001001132233",
    "parse": [
      "myrobo",
      "update"
    ],
    "stanza": 1439
  },
  {
    "role": "code",
    "lines": [
      "(equal \"paris\" | myrobo get-room name);"
    ],
    "code": "210003211000010111001001101001011100113023210010000132100010000321001110132233",
    "parse": [
      "equal",
      "\"paris\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1440
  },
  {
    "role": "code",
    "lines": [
      "myrobo update;"
    ],
    "code": "21001000013210001001132233",
    "parse": [
      "myrobo",
      "update"
    ],
    "stanza": 1441
  },
  {
    "role": "code",
    "lines": [
      "(equal \"genoa\" | myrobo get-room name);"
    ],
    "code": "2100032100110101001000110010000101000013023210010000132100010000321001110132233",
    "parse": [
      "equal",
      "\"genoa\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1442
  },
  {
    "role": "code",
    "lines": [
      "myrobo update;"
    ],
    "code": "21001000013210001001132233",
    "parse": [
      "myrobo",
      "update"
    ],
    "stanza": 1443
  },
  {
    "role": "code",
    "lines": [
      "(equal \"paris\" | myrobo get-room name);"
    ],
    "code": "210003211000010111001001101001011100113023210010000132100010000321001110132233",
    "parse": [
      "equal",
      "\"paris\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1444
  },
  {
    "role": "code",
    "lines": [
      "myrobo update;"
    ],
    "code": "21001000013210001001132233",
    "parse": [
      "myrobo",
      "update"
    ],
    "stanza": 1445
  },
  {
    "role": "code",
    "lines": [
      "(equal \"boston\" | myrobo get-room name);"
    ],
    "code": "2100032100011001000101110010000100100103023210010000132100010000321001110132233",
    "parse": [
      "equal",
      "\"boston\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1446
  },
  {
    "role": "code",
    "lines": [
      "myrobo update;"
    ],
    "code": "21001000013210001001132233",
    "parse": [
      "myrobo",
      "update"
    ],
    "stanza": 1447
  },
  {
    "role": "code",
    "lines": [
      "(equal \"dublin\" | myrobo get-room name);"
    ],
    "code": "2100032100111011001001110010110100100103023210010000132100010000321001110132233",
    "parse": [
      "equal",
      "\"dublin\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1448
  },
  {
    "role": "code",
    "lines": [
      "myrobo update;"
    ],
    "code": "21001000013210001001132233",
    "parse": [
      "myrobo",
      "update"
    ],
    "stanza": 1449
  },
  {
    "role": "code",
    "lines": [
      "(equal \"paris\" | myrobo get-room name);"
    ],
    "code": "210003211000010111001001101001011100113023210010000132100010000321001110132233",
    "parse": [
      "equal",
      "\"paris\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1450
  },
  {
    "role": "comment",
    "lines": [
      "# all characters should update together"
    ],
    "stanza": 1451
  },
  {
    "role": "code",
    "lines": [
      "class world (the-places the-links)",
      "       (field things (container new))",
      "       (field names (cell new (hash-null)))",
      "       (field places (cell new 0))",
      "       (field links (cell new 0))",
      "       (method new ",
      "           (begin",
      "         (places set",
      "            (make-table",
      "             (map",
      "              (? name (cons (name) (room new (name))))",
      "              (the-places))))",
      "         (links set",
      "            (map ",
      "             (? entry (assign src (car | entry) |",
      "                      assign dest (cdr | entry) |",
      "                      door new ",
      "                      (places get | src) ",
      "                      (places get | dest)))",
      "             (the-links)))))",
      "       (method add (lambda (place name val) ",
      "             (begin",
      "               (val set-room (places get | place))",
      "               (val set-name | name)",
      "               (names set (hash-add (names get)",
      "                        (name)",
      "                        (val)))",
      "               (things add (val)))))",
      "       (method find (lambda (n) (names get (n) get-room name)))",
      "       (method reachable (lambda (place)",
      "               (let ((exits",
      "                  (select-match (lambda (x) ",
      "                          (instanceof door (x)))",
      "                        (places get (place) inventory))))",
      "                 (map (? door (door access-from ",
      "                        (places get | place)",
      "                        name))",
      "                  (exits)))))",
      "       (method update (begin ",
      "            (map (? x (x update)) ",
      "                 (things inventory))",
      "            (true)));"
    ],
    "code
    "parse": [
      "class",
      "world",
      [
        "the-places",
        "the-links"
      ],
      [
        "field",
        "things",
        [
          "container",
          "new"
        ]
      ],
      [
        "field",
        "names",
        [
          "cell",
          "new",
          [
            "hash-null"
          ]
        ]
      ],
      [
        "field",
        "places",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "field",
        "links",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "method",
        "new",
        [
          "begin",
          [
            "places",
            "set",
            [
              "make-table",
              [
                "map",
                [
                  "?",
                  "name",
                  [
                    "cons",
                    [
                      "name"
                    ],
                    [
                      "room",
                      "new",
                      [
                        "name"
                      ]
                    ]
                  ]
                ],
                [
                  "the-places"
                ]
              ]
            ]
          ],
          [
            "links",
            "set",
            [
              "map",
              [
                "?",
                "entry",
                [
                  "assign",
                  "src",
                  [
                    "car",
                    [
                      -1,
                      "entry"
                    ]
                  ],
                  [
                    -1,
                    "assign",
                    "dest",
                    [
                      "cdr",
                      [
                        -1,
                        "entry"
                      ]
                    ],
                    [
                      -1,
                      "door",
                      "new",
                      [
                        "places",
                        "get",
                        [
                          -1,
                          "src"
                        ]
                      ],
                      [
                        "places",
                        "get",
                        [
                          -1,
                          "dest"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "the-links"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "add",
        [
          "lambda",
          [
            "place",
            "name",
            "val"
          ],
          [
            "begin",
            [
              "val",
              "set-room",
              [
                "places",
                "get",
                [
                  -1,
                  "place"
                ]
              ]
            ],
            [
              "val",
              "set-name",
              [
                -1,
                "name"
              ]
            ],
            [
              "names",
              "set",
              [
                "hash-add",
                [
                  "names",
                  "get"
                ],
                [
                  "name"
                ],
                [
                  "val"
                ]
              ]
            ],
            [
              "things",
              "add",
              [
                "val"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "find",
        [
          "lambda",
          [
            "n"
          ],
          [
            "names",
            "get",
            [
              "n"
            ],
            "get-room",
            "name"
          ]
        ]
      ],
      [
        "method",
        "reachable",
        [
          "lambda",
          [
            "place"
          ],
          [
            "let",
            [
              [
                "exits",
                [
                  "select-match",
                  [
                    "lambda",
                    [
                      "x"
                    ],
                    [
                      "instanceof",
                      "door",
                      [
                        "x"
                      ]
                    ]
                  ],
                  [
                    "places",
                    "get",
                    [
                      "place"
                    ],
                    "inventory"
                  ]
                ]
              ]
            ],
            [
              "map",
              [
                "?",
                "door",
                [
                  "door",
                  "access-from",
                  [
                    "places",
                    "get",
                    [
                      -1,
                      "place"
                    ]
                  ],
                  "name"
                ]
              ],
              [
                "exits"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "update",
        [
          "begin",
          [
            "map",
            [
              "?",
              "x",
              [
                "x",
                "update"
              ]
            ],
            [
              "things",
              "inventory"
            ]
          ],
          [
            "true"
          ]
        ]
      ]
    ],
    "stanza": 1452
  },
  {
    "role": "code",
    "lines": [
      "define geo-world",
      "  (world new ",
      "     (vector \"boston\" \"dublin\" \"paris\" \"genoa\")",
      "     (vector",
      "      (cons \"boston\" \"dublin\")",
      "      (cons \"dublin\" \"paris\")",
      "      (cons \"boston\" \"paris\")",
      "      (cons \"paris\" \"genoa\")));"
    ],
    "code": "21101321000000000322111110111321101001032210000321000110010001011100100001001001032100111011001001110010110100100103211000010111001001101001011100113210011010100100011001000010100001332210000322101013210001100100010111001000010010010321001110110010011100101101001001033221010132100111011001001110010110100100103211000010111001001101001011100113322101013210001100100010111001000010010010321100001011100100110100101110011332210101321100001011100100110100101110011321001101010010001100100001010000133332233",
    "parse": [
      "define",
      "geo-world",
      [
        "world",
        "new",
        [
          "vector",
          "\"boston\"",
          "\"dublin\"",
          "\"paris\"",
          "\"genoa\""
        ],
        [
          "vector",
          [
            "cons",
            "\"boston\"",
            "\"dublin\""
          ],
          [
            "cons",
            "\"dublin\"",
            "\"paris\""
          ],
          [
            "cons",
            "\"boston\"",
            "\"paris\""
          ],
          [
            "cons",
            "\"paris\"",
            "\"genoa\""
          ]
        ]
      ]
    ],
    "stanza": 1453
  },
  {
    "role": "code",
    "lines": [
      "geo-world add \"dublin\" \"robo1\" (robo new);"
    ],
    "code": "2100000000032110111132100111011001001110010110100100103211011110110001001101111001100013221000110003211010010332233",
    "parse": [
      "geo-world",
      "add",
      "\"dublin\"",
      "\"robo1\"",
      [
        "robo",
        "new"
      ]
    ],
    "stanza": 1454
  },
  {
    "role": "code",
    "lines": [
      "geo-world add \"genoa\" \"robo2\" (robo new);"
    ],
    "code": "2100000000032110111132100110101001000110010000101000013211011110110001001101111001100103221000110003211010010332233",
    "parse": [
      "geo-world",
      "add",
      "\"genoa\"",
      "\"robo2\"",
      [
        "robo",
        "new"
      ]
    ],
    "stanza": 1455
  },
  {
    "role": "code",
    "lines": [
      "(equal \"dublin\" | geo-world find \"robo1\");"
    ],
    "code": "2100032100111011001001110010110100100103023210000000003211111111032110111101100010011011110011000132233",
    "parse": [
      "equal",
      "\"dublin\"",
      [
        -1,
        "geo-world",
        "find",
        "\"robo1\""
      ]
    ],
    "lines_original": [
      "demo | geo-world find \"robo1\";"
    ],
    "stanza": 1456
  },
  {
    "role": "code",
    "lines": [
      "(equal \"genoa\" | geo-world find \"robo2\");"
    ],
    "code": "2100032100110101001000110010000101000013023210000000003211111111032110111101100010011011110011001032233",
    "parse": [
      "equal",
      "\"genoa\"",
      [
        -1,
        "geo-world",
        "find",
        "\"robo2\""
      ]
    ],
    "lines_original": [
      "demo | geo-world find \"robo2\";"
    ],
    "stanza": 1457
  },
  {
    "role": "code",
    "lines": [
      "geo-world update;"
    ],
    "code": "210000000003210001001132233",
    "parse": [
      "geo-world",
      "update"
    ],
    "stanza": 1458
  },
  {
    "role": "code",
    "lines": [
      "(equal \"paris\" | geo-world find \"robo1\");"
    ],
    "code": "210003211000010111001001101001011100113023210000000003211111111032110111101100010011011110011000132233",
    "parse": [
      "equal",
      "\"paris\"",
      [
        -1,
        "geo-world",
        "find",
        "\"robo1\""
      ]
    ],
    "lines_original": [
      "demo | geo-world find \"robo1\";"
    ],
    "stanza": 1459
  },
  {
    "role": "code",
    "lines": [
      "(equal \"paris\" | geo-world find \"robo2\");"
    ],
    "code": "210003211000010111001001101001011100113023210000000003211111111032110111101100010011011110011001032233",
    "parse": [
      "equal",
      "\"paris\"",
      [
        -1,
        "geo-world",
        "find",
        "\"robo2\""
      ]
    ],
    "lines_original": [
      "demo | geo-world find \"robo2\";"
    ],
    "stanza": 1460
  },
  {
    "role": "code",
    "lines": [
      "(equal (vector \"paris\" \"dublin\") | geo-world reachable \"boston\");"
    ],
    "code": "21000322100003211000010111001001101001011100113210011101100100111001011010010010330232100000000032111111111321000110010001011100100001001001032233",
    "parse": [
      "equal",
      [
        "vector",
        "\"paris\"",
        "\"dublin\""
      ],
      [
        -1,
        "geo-world",
        "reachable",
        "\"boston\""
      ]
    ],
    "lines_original": [
      "demo | geo-world reachable \"boston\";"
    ],
    "stanza": 1461
  },
  {
    "role": "code",
    "lines": [
      "(equal (vector \"paris\") | geo-world reachable \"genoa\");"
    ],
    "code": "2100032210000321100001011100100110100101110011330232100000000032111111111321001101010010001100100001010000132233",
    "parse": [
      "equal",
      [
        "vector",
        "\"paris\""
      ],
      [
        -1,
        "geo-world",
        "reachable",
        "\"genoa\""
      ]
    ],
    "lines_original": [
      "demo | geo-world reachable \"genoa\";"
    ],
    "stanza": 1462
  },
  {
    "role": "file",
    "lines": [
      "== COS_JList_impl =="
    ],
    "stanza": 1463
  },
  {
    "role": "comment",
    "lines": [
      "# JAVA native implementation of a Java list, hash classes"
    ],
    "section_description": "native implementation of a Java list, hash classes",
    "section_category": "JAVA",
    "section_index": 58,
    "stanza": 1464
  },
  {
    "role": "code",
    "lines": [
      "define flex-equals",
      "  (lambda (x y) ",
      "    (if (number? | x)",
      "    (if (number? | y)",
      "        (= (x) (y))",
      "        (false))",
      "    (if (number? | y)",
      "        (false)",
      "        (x equals (y)))));"
    ],
    "code": "211013210000000013221101032210011032110001332211113221100030232100110332211113221100030232110001332210322100110332211000133322110111333221111322110003023211000133221101113322100110321011111103221100013333332233",
    "parse": [
      "define",
      "flex-equals",
      [
        "lambda",
        [
          "x",
          "y"
        ],
        [
          "if",
          [
            "number?",
            [
              -1,
              "x"
            ]
          ],
          [
            "if",
            [
              "number?",
              [
                -1,
                "y"
              ]
            ],
            [
              "=",
              [
                "x"
              ],
              [
                "y"
              ]
            ],
            [
              "false"
            ]
          ],
          [
            "if",
            [
              "number?",
              [
                -1,
                "y"
              ]
            ],
            [
              "false"
            ],
            [
              "x",
              "equals",
              [
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1465
  },
  {
    "role": "code",
    "lines": [
      "define remove-object",
      "  (lambda (x) ",
      "    (remove-match (lambda (y) ",
      "            (flex-equals (x) (y)))));"
    ],
    "code": "2110132100000001032211010322100110332211000010322110103221100013322100000000132210011033221100013333332233",
    "parse": [
      "define",
      "remove-object",
      [
        "lambda",
        [
          "x"
        ],
        [
          "remove-match",
          [
            "lambda",
            [
              "y"
            ],
            [
              "flex-equals",
              [
                "x"
              ],
              [
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1466
  },
  {
    "role": "code",
    "lines": [
      "define contains-object",
      "  (lambda (x lst)",
      "    (if (> (list-length | lst) 0)",
      "    (if (flex-equals (head | lst) (x))",
      "        (true)",
      "        (contains-object (x) (tail | lst)))",
      "    (false)));"
    ],
    "code": "21101321000000011322110103221001103210001103322111132211322100100030232100011033203322111132210000000013221000101302321000110332210011033322110110332210000000113221001103322100011130232100011033332211011133332233",
    "parse": [
      "define",
      "contains-object",
      [
        "lambda",
        [
          "x",
          "lst"
        ],
        [
          "if",
          [
            ">",
            [
              "list-length",
              [
                -1,
                "lst"
              ]
            ],
            0
          ],
          [
            "if",
            [
              "flex-equals",
              [
                "head",
                [
                  -1,
                  "lst"
                ]
              ],
              [
                "x"
              ]
            ],
            [
              "true"
            ],
            [
              "contains-object",
              [
                "x"
              ],
              [
                "tail",
                [
                  -1,
                  "lst"
                ]
              ]
            ]
          ],
          [
            "false"
          ]
        ]
      ]
    ],
    "stanza": 1467
  },
  {
    "role": "code",
    "lines": [
      "class COS_JList ()",
      "       (field super ((java lang Object) new))",
      "       (method unknown (lambda (x) (super (x))))",
      "       (field contents (cell new (vector)))",
      "       (method <init>-V (self))",
      "       (method <init> (self <init>-V))",
      "       (method add-Object-V (lambda (x)",
      "             (contents set (prepend (x) (contents get)))))",
      "       (method add (self add-Object-V))",
      "       (method remove-Object-Z (lambda (x)",
      "            (contents set ",
      "                  (remove-object (x) (contents get)))))",
      "       (method remove (self remove-Object-Z))",
      "       (method contains-Object-Z (lambda (x)",
      "                   (contains-object (x) (contents get))))",
      "       (method contains (self contains-Object-Z))",
      "       (method get-I-Object (lambda (x)",
      "             (list-ref (contents get) (x))))",
      "       (method get (self get-I-Object))",
      "       (method iterator-Iterator (COS_JListIterator new (self)))",
      "       (method iterator (self iterator-Iterator))",
      "       (method size-V-I (list-length (contents get)))",
      "       (method size (self size-V-I));"
    ],
    "code
    "parse": [
      "class",
      "COS_JList",
      [],
      [
        "field",
        "super",
        [
          [
            "java",
            "lang",
            "Object"
          ],
          "new"
        ]
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            "super",
            [
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "contents",
        [
          "cell",
          "new",
          [
            "vector"
          ]
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "add-Object-V",
        [
          "lambda",
          [
            "x"
          ],
          [
            "contents",
            "set",
            [
              "prepend",
              [
                "x"
              ],
              [
                "contents",
                "get"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "add",
        [
          "self",
          "add-Object-V"
        ]
      ],
      [
        "method",
        "remove-Object-Z",
        [
          "lambda",
          [
            "x"
          ],
          [
            "contents",
            "set",
            [
              "remove-object",
              [
                "x"
              ],
              [
                "contents",
                "get"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "remove",
        [
          "self",
          "remove-Object-Z"
        ]
      ],
      [
        "method",
        "contains-Object-Z",
        [
          "lambda",
          [
            "x"
          ],
          [
            "contains-object",
            [
              "x"
            ],
            [
              "contents",
              "get"
            ]
          ]
        ]
      ],
      [
        "method",
        "contains",
        [
          "self",
          "contains-Object-Z"
        ]
      ],
      [
        "method",
        "get-I-Object",
        [
          "lambda",
          [
            "x"
          ],
          [
            "list-ref",
            [
              "contents",
              "get"
            ],
            [
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "get",
        [
          "self",
          "get-I-Object"
        ]
      ],
      [
        "method",
        "iterator-Iterator",
        [
          "COS_JListIterator",
          "new",
          [
            "self"
          ]
        ]
      ],
      [
        "method",
        "iterator",
        [
          "self",
          "iterator-Iterator"
        ]
      ],
      [
        "method",
        "size-V-I",
        [
          "list-length",
          [
            "contents",
            "get"
          ]
        ]
      ],
      [
        "method",
        "size",
        [
          "self",
          "size-V-I"
        ]
      ]
    ],
    "stanza": 1468
  },
  {
    "role": "code",
    "lines": [
      "define test1 (COS_JList new);"
    ],
    "code": "211013211111001032210000001003211010010332233",
    "parse": [
      "define",
      "test1",
      [
        "COS_JList",
        "new"
      ]
    ],
    "stanza": 1469
  },
  {
    "role": "code",
    "lines": [
      "begin (test1 add-Object-V (test1))",
      "       (= 1 | test1 size-V-I);"
    ],
    "code": "210001011322111110010321000000101322111110010333221032130232111110010321000001101332233",
    "parse": [
      "begin",
      [
        "test1",
        "add-Object-V",
        [
          "test1"
        ]
      ],
      [
        "=",
        1,
        [
          -1,
          "test1",
          "size-V-I"
        ]
      ]
    ],
    "stanza": 1470
  },
  {
    "role": "code",
    "lines": [
      "test1 == (test1 get-I-Object 0);"
    ],
    "code": "21111100103211101011322111110010321000001001320332233",
    "parse": [
      "test1",
      "==",
      [
        "test1",
        "get-I-Object",
        0
      ]
    ],
    "stanza": 1471
  },
  {
    "role": "code",
    "lines": [
      "class COS_JHashMap ()",
      "       (field super ((java lang Object) new))",
      "       (method unknown (lambda (x) (super (x))))",
      "       (field contents (cell new (? x 0)))",
      "       (method <init>-V (self))",
      "       (method <init> (self <init>-V))",
      "       (method put-Object-Object-V (lambda (x y)",
      "                     (let ((prev | contents get))",
      "                       (contents set ",
      "                         (? z ",
      "                            (if (flex-equals (z) (x))",
      "                            (y)",
      "                            (prev (z))))))))",
      "       (method put (self put-Object-Object-V))",
      "       (method get-Object-Object (lambda (x)",
      "                   (contents get (x))))",
      "       (method get (self get-Object-Object));"
    ],
    "code
    "parse": [
      "class",
      "COS_JHashMap",
      [],
      [
        "field",
        "super",
        [
          [
            "java",
            "lang",
            "Object"
          ],
          "new"
        ]
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            "super",
            [
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "contents",
        [
          "cell",
          "new",
          [
            "?",
            "x",
            0
          ]
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "put-Object-Object-V",
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "let",
            [
              [
                "prev",
                [
                  -1,
                  "contents",
                  "get"
                ]
              ]
            ],
            [
              "contents",
              "set",
              [
                "?",
                "z",
                [
                  "if",
                  [
                    "flex-equals",
                    [
                      "z"
                    ],
                    [
                      "x"
                    ]
                  ],
                  [
                    "y"
                  ],
                  [
                    "prev",
                    [
                      "z"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "put",
        [
          "self",
          "put-Object-Object-V"
        ]
      ],
      [
        "method",
        "get-Object-Object",
        [
          "lambda",
          [
            "x"
          ],
          [
            "contents",
            "get",
            [
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "get",
        [
          "self",
          "get-Object-Object"
        ]
      ]
    ],
    "stanza": 1472
  },
  {
    "role": "code",
    "lines": [
      "define test2 (COS_JHashMap new);"
    ],
    "code": "2110132100001001132210000011113211010010332233",
    "parse": [
      "define",
      "test2",
      [
        "COS_JHashMap",
        "new"
      ]
    ],
    "stanza": 1473
  },
  {
    "role": "code",
    "lines": [
      "begin (test2 put-Object-Object-V 5 10)",
      "       (= 10 | test2 get 5);"
    ],
    "code": "210001011322100001001132100001000032101321010332210321010302321000010011321111010032101332233",
    "parse": [
      "begin",
      [
        "test2",
        "put-Object-Object-V",
        5,
        10
      ],
      [
        "=",
        10,
        [
          -1,
          "test2",
          "get",
          5
        ]
      ]
    ],
    "stanza": 1474
  },
  {
    "role": "file",
    "lines": [
      "== COS_JList =="
    ],
    "stanza": 1475
  },
  {
    "role": "comment",
    "lines": [
      "# There is Java code for COS_JList available"
    ],
    "stanza": 1476
  },
  {
    "role": "file",
    "lines": [
      "== COS_JHashMap =="
    ],
    "stanza": 1477
  },
  {
    "role": "comment",
    "lines": [
      "# There is Java code for COS_JHashMap available"
    ],
    "stanza": 1478
  },
  {
    "role": "file",
    "lines": [
      "== COS_JList_test =="
    ],
    "stanza": 1479
  },
  {
    "role": "comment",
    "lines": [
      "# JAVA testing the JList class"
    ],
    "section_description": "testing the JList class",
    "section_category": "JAVA",
    "section_index": 59,
    "stanza": 1480
  },
  {
    "role": "code",
    "lines": [
      "define test1 (COS_JList new);"
    ],
    "code": "211013211111001032210000001003211010010332233",
    "parse": [
      "define",
      "test1",
      [
        "COS_JList",
        "new"
      ]
    ],
    "stanza": 1481
  },
  {
    "role": "code",
    "lines": [
      "begin (test1 add-Object-V (test1))",
      "       (= 1 (test1 size-V-I));"
    ],
    "code": "21000101132211111001032100000010132211111001033322103213221111100103210000011013332233",
    "parse": [
      "begin",
      [
        "test1",
        "add-Object-V",
        [
          "test1"
        ]
      ],
      [
        "=",
        1,
        [
          "test1",
          "size-V-I"
        ]
      ]
    ],
    "stanza": 1482
  },
  {
    "role": "code",
    "lines": [
      "(test1 get-I-Object 0) == (test1);"
    ],
    "code": "2211111001032100000100132033211101011322111110010332233",
    "parse": [
      [
        "test1",
        "get-I-Object",
        0
      ],
      "==",
      [
        "test1"
      ]
    ],
    "stanza": 1483
  },
  {
    "role": "file",
    "lines": [
      "== COS_JListIterator_impl =="
    ],
    "stanza": 1484
  },
  {
    "role": "comment",
    "lines": [
      "# JAVA basic iterator implementation"
    ],
    "section_description": "basic iterator implementation",
    "section_category": "JAVA",
    "section_index": 60,
    "stanza": 1485
  },
  {
    "role": "code",
    "lines": [
      "class COS_JListIterator (ref)",
      "       (field pipe (cell new (ref contents get)))",
      "       (method <init>-V (self))",
      "       (method <init> (self <init>-V))",
      "       (method hasNext-Z (> (list-length | pipe get) 0))",
      "       (method hasNext (self hasNext-Z))",
      "       (method next (self next-Object))",
      "       (method next-Object ",
      "           (let ((result (head | pipe get)))",
      "         (begin ",
      "           (pipe set | tail | pipe get)",
      "           (result))));"
    ],
    "code": "21110001032100000101132210000101003322111001113210000101013221111000132110100103221000010100321100111032111101003333221001111032101111011322101000113332210011110321011111003221010001132101111011333221001111032100001011032211322100100030232100001010132111101003320333221001111032100001011132210100011321000010110333221001111032101011103221010001132100001100033322100111103210000110003221011000322211100111132210001013023210000101013211110100333322100010113221000010101321111010130232100011130232100001010132111101003322111001111333332233",
    "parse": [
      "class",
      "COS_JListIterator",
      [
        "ref"
      ],
      [
        "field",
        "pipe",
        [
          "cell",
          "new",
          [
            "ref",
            "contents",
            "get"
          ]
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "hasNext-Z",
        [
          ">",
          [
            "list-length",
            [
              -1,
              "pipe",
              "get"
            ]
          ],
          0
        ]
      ],
      [
        "method",
        "hasNext",
        [
          "self",
          "hasNext-Z"
        ]
      ],
      [
        "method",
        "next",
        [
          "self",
          "next-Object"
        ]
      ],
      [
        "method",
        "next-Object",
        [
          "let",
          [
            [
              "result",
              [
                "head",
                [
                  -1,
                  "pipe",
                  "get"
                ]
              ]
            ]
          ],
          [
            "begin",
            [
              "pipe",
              "set",
              [
                -1,
                "tail",
                [
                  -1,
                  "pipe",
                  "get"
                ]
              ]
            ],
            [
              "result"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1486
  },
  {
    "role": "code",
    "lines": [
      "define test1 (COS_JList new);"
    ],
    "code": "211013211111001032210000001003211010010332233",
    "parse": [
      "define",
      "test1",
      [
        "COS_JList",
        "new"
      ]
    ],
    "stanza": 1487
  },
  {
    "role": "code",
    "lines": [
      "begin",
      "  (test1 add 15)",
      "  (test1 add 72)",
      "  (test1 add 99)",
      "  (true);"
    ],
    "code": "210001011322111110010321101111321111332211111001032110111132100100033221111100103211011113211000113322110110332233",
    "parse": [
      "begin",
      [
        "test1",
        "add",
        15
      ],
      [
        "test1",
        "add",
        72
      ],
      [
        "test1",
        "add",
        99
      ],
      [
        "true"
      ]
    ],
    "stanza": 1488
  },
  {
    "role": "code",
    "lines": [
      "define iter1 (test1 iterator);"
    ],
    "code": "21101321000011001322111110010321000001100332233",
    "parse": [
      "define",
      "iter1",
      [
        "test1",
        "iterator"
      ]
    ],
    "stanza": 1489
  },
  {
    "role": "code",
    "lines": [
      "iter1 hasNext;"
    ],
    "code": "2100001100132100001011132233",
    "parse": [
      "iter1",
      "hasNext"
    ],
    "stanza": 1490
  },
  {
    "role": "code",
    "lines": [
      "(equal 99 | iter1 next);"
    ],
    "code": "21000321100011302321000011001321010111032233",
    "parse": [
      "equal",
      99,
      [
        -1,
        "iter1",
        "next"
      ]
    ],
    "lines_original": [
      "demo | iter1 next;"
    ],
    "stanza": 1491
  },
  {
    "role": "code",
    "lines": [
      "iter1 hasNext;"
    ],
    "code": "2100001100132100001011132233",
    "parse": [
      "iter1",
      "hasNext"
    ],
    "stanza": 1492
  },
  {
    "role": "code",
    "lines": [
      "(equal 72 | iter1 next);"
    ],
    "code": "21000321001000302321000011001321010111032233",
    "parse": [
      "equal",
      72,
      [
        -1,
        "iter1",
        "next"
      ]
    ],
    "lines_original": [
      "demo | iter1 next;"
    ],
    "stanza": 1493
  },
  {
    "role": "code",
    "lines": [
      "iter1 hasNext;"
    ],
    "code": "2100001100132100001011132233",
    "parse": [
      "iter1",
      "hasNext"
    ],
    "stanza": 1494
  },
  {
    "role": "code",
    "lines": [
      "(equal 15 | iter1 next);"
    ],
    "code": "21000321111302321000011001321010111032233",
    "parse": [
      "equal",
      15,
      [
        -1,
        "iter1",
        "next"
      ]
    ],
    "lines_original": [
      "demo | iter1 next;"
    ],
    "stanza": 1495
  },
  {
    "role": "code",
    "lines": [
      "not | iter1 hasNext;"
    ],
    "code": "210030232100001100132100001011132233",
    "parse": [
      "not",
      [
        -1,
        "iter1",
        "hasNext"
      ]
    ],
    "stanza": 1496
  },
  {
    "role": "file",
    "lines": [
      "== COS_JListIterator =="
    ],
    "stanza": 1497
  },
  {
    "role": "comment",
    "lines": [
      "# There is Java code for COS_JListIterator available"
    ],
    "stanza": 1498
  },
  {
    "role": "file",
    "lines": [
      "== COS_JDoor =="
    ],
    "stanza": 1499
  },
  {
    "role": "comment",
    "lines": [
      "# JAVA class translation 'COS_JDoor'",
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# ",
      "# public class COS_JDoor {",
      "#     private COS_JRoom src, dest;",
      "#     private String src_cmd, dest_cmd;",
      "# ",
      "#     public COS_JDoor(COS_JRoom src, String src_cmd,",
      "#              COS_JRoom dest, String dest_cmd) {",
      "#     this.src = src;",
      "#     this.dest = dest;",
      "#     this.src_cmd = src_cmd;",
      "#     this.dest_cmd = dest_cmd;",
      "#     src.addDoor(this);",
      "#     dest.addDoor(this);",
      "#     }",
      "# ",
      "#     public COS_JRoom apply(COS_JRoom src, String cmd) {",
      "#     if (src == this.src) {",
      "#         if (src_cmd.equals(cmd)) {",
      "#         return this.dest;",
      "#         }",
      "#     }",
      "#     if (src == this.dest) {",
      "#         if (dest_cmd.equals(cmd)) {",
      "#         return this.src;",
      "#         }",
      "#     }",
      "#     return null;",
      "#     }",
      "# ",
      "#     public COS_JRoom apply(COS_JRoom src) {",
      "#     if (src==this.src) {",
      "#         return this.dest;",
      "#     }",
      "#     if (src==this.dest) {",
      "#         return this.src;",
      "#     }",
      "#     return null;",
      "#     }",
      "# }"
    ],
    "section_description": "class translation 'COS_JDoor'",
    "section_category": "JAVA",
    "section_index": 61,
    "stanza": 1500
  },
  {
    "role": "code",
    "lines": [
      "class COS_JDoor ()",
      "   (field super-ref (make-cell 0))",
      "   (method new (set! (super-ref) ((java lang Object) | this)))",
      "   (method super (? x | (get! | super-ref) | x))",
      "   (method unknown (? x | self super | x))",
      "   (field src (cell new 0))",
      "   (field dest (cell new 0))",
      "   (field src_cmd (cell new 0))",
      "   (field dest_cmd (cell new 0))",
      "   (method <init>-COS_JRoom-String-COS_JRoom-String-V",
      "     (lambda (arg0 arg1 arg2 arg3) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)) (pair 3 (arg2)) (pair 4 (arg3)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 2) (jvm aload 0))",
      "         ((= (x) 3) (jvm aload 1))",
      "         ((= (x) 4) (jvm putfield src (COS_JRoom)))",
      "         ((= (x) 5) (jvm aload 0))",
      "         ((= (x) 6) (jvm aload 3))",
      "         ((= (x) 7) (jvm putfield dest (COS_JRoom)))",
      "         ((= (x) 8) (jvm aload 0))",
      "         ((= (x) 9) (jvm aload 2))",
      "         ((= (x) 10) (jvm putfield src_cmd (java lang String)))",
      "         ((= (x) 11) (jvm aload 0))",
      "         ((= (x) 12) (jvm aload 4))",
      "         ((= (x) 13) (jvm putfield dest_cmd (java lang String)))",
      "         ((= (x) 14) (jvm aload 1))",
      "         ((= (x) 15) (jvm aload 0))",
      "         ((= (x) 16) (jvm invokevirtual addDoor-COS_JDoor-V 1 0))",
      "         ((= (x) 17) (jvm aload 3))",
      "         ((= (x) 18) (jvm aload 0))",
      "         ((= (x) 19) (jvm invokevirtual addDoor-COS_JDoor-V 1 0))",
      "         ((= (x) 20) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> (self <init>-COS_JRoom-String-COS_JRoom-String-V))",
      "",
      "   (method apply-COS_JRoom-String-COS_JRoom",
      "     (lambda (arg0 arg1) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 1))",
      "         ((= (x) 1) (jvm aload 0))",
      "         ((= (x) 2) (jvm getfield src (COS_JRoom)))",
      "         ((= (x) 3) (jvm if_acmpne 12))",
      "         ((= (x) 4) (jvm aload 0))",
      "         ((= (x) 5) (jvm getfield src_cmd (java lang String)))",
      "         ((= (x) 6) (jvm aload 2))",
      "         ((= (x) 7) (jvm invokevirtual equals-Object-Z 1 1))",
      "         ((= (x) 8) (jvm ifeq 12))",
      "         ((= (x) 9) (jvm aload 0))",
      "         ((= (x) 10) (jvm getfield dest (COS_JRoom)))",
      "         ((= (x) 11) (jvm areturn))",
      "         ((= (x) 12) (jvm aload 1))",
      "         ((= (x) 13) (jvm aload 0))",
      "         ((= (x) 14) (jvm getfield dest (COS_JRoom)))",
      "         ((= (x) 15) (jvm if_acmpne 24))",
      "         ((= (x) 16) (jvm aload 0))",
      "         ((= (x) 17) (jvm getfield dest_cmd (java lang String)))",
      "         ((= (x) 18) (jvm aload 2))",
      "         ((= (x) 19) (jvm invokevirtual equals-Object-Z 1 1))",
      "         ((= (x) 20) (jvm ifeq 24))",
      "         ((= (x) 21) (jvm aload 0))",
      "         ((= (x) 22) (jvm getfield src (COS_JRoom)))",
      "         ((= (x) 23) (jvm areturn))",
      "         ((= (x) 24) (jvm aconst_null))",
      "         ((= (x) 25) (jvm areturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method apply (self apply-COS_JRoom-String-COS_JRoom))",
      "",
      "   (method apply-COS_JRoom-COS_JRoom",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 1))",
      "         ((= (x) 1) (jvm aload 0))",
      "         ((= (x) 2) (jvm getfield src (COS_JRoom)))",
      "         ((= (x) 3) (jvm if_acmpne 7))",
      "         ((= (x) 4) (jvm aload 0))",
      "         ((= (x) 5) (jvm getfield dest (COS_JRoom)))",
      "         ((= (x) 6) (jvm areturn))",
      "         ((= (x) 7) (jvm aload 1))",
      "         ((= (x) 8) (jvm aload 0))",
      "         ((= (x) 9) (jvm getfield dest (COS_JRoom)))",
      "         ((= (x) 10) (jvm if_acmpne 14))",
      "         ((= (x) 11) (jvm aload 0))",
      "         ((= (x) 12) (jvm getfield src (COS_JRoom)))",
      "         ((= (x) 13) (jvm areturn))",
      "         ((= (x) 14) (jvm aconst_null))",
      "         ((= (x) 15) (jvm areturn))",
      "         (jvm return))",
      "   )",
      "",
      " ;"
    ],
    "code
    "parse": [
      "class",
      "COS_JDoor",
      [],
      [
        "field",
        "super-ref",
        [
          "make-cell",
          0
        ]
      ],
      [
        "method",
        "new",
        [
          "set!",
          [
            "super-ref"
          ],
          [
            [
              "java",
              "lang",
              "Object"
            ],
            [
              -1,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -1,
                "super-ref"
              ]
            ],
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "src",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "field",
        "dest",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "field",
        "src_cmd",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "field",
        "dest_cmd",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "method",
        "<init>-COS_JRoom-String-COS_JRoom-String-V",
        [
          "lambda",
          [
            "arg0",
            "arg1",
            "arg2",
            "arg3"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        1,
                        [
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        2,
                        [
                          "arg1"
                        ]
                      ],
                      [
                        "pair",
                        3,
                        [
                          "arg2"
                        ]
                      ],
                      [
                        "pair",
                        4,
                        [
                          "arg3"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        0,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "putfield",
                        "src",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        5
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        6
                      ],
                      [
                        "jvm",
                        "aload",
                        3
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        7
                      ],
                      [
                        "jvm",
                        "putfield",
                        "dest",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        8
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        9
                      ],
                      [
                        "jvm",
                        "aload",
                        2
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        10
                      ],
                      [
                        "jvm",
                        "putfield",
                        "src_cmd",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        11
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        12
                      ],
                      [
                        "jvm",
                        "aload",
                        4
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        13
                      ],
                      [
                        "jvm",
                        "putfield",
                        "dest_cmd",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        14
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        15
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        16
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "addDoor-COS_JDoor-V",
                        1,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        17
                      ],
                      [
                        "jvm",
                        "aload",
                        3
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        18
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        19
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "addDoor-COS_JDoor-V",
                        1,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        20
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-COS_JRoom-String-COS_JRoom-String-V"
        ]
      ],
      [
        "method",
        "apply-COS_JRoom-String-COS_JRoom",
        [
          "lambda",
          [
            "arg0",
            "arg1"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        1,
                        [
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        2,
                        [
                          "arg1"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "getfield",
                        "src",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "if_acmpne",
                        12
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        5
                      ],
                      [
                        "jvm",
                        "getfield",
                        "src_cmd",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        6
                      ],
                      [
                        "jvm",
                        "aload",
                        2
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        7
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "equals-Object-Z",
                        1,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        8
                      ],
                      [
                        "jvm",
                        "ifeq",
                        12
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        9
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        10
                      ],
                      [
                        "jvm",
                        "getfield",
                        "dest",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        11
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        12
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        13
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        14
                      ],
                      [
                        "jvm",
                        "getfield",
                        "dest",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        15
                      ],
                      [
                        "jvm",
                        "if_acmpne",
                        24
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        16
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        17
                      ],
                      [
                        "jvm",
                        "getfield",
                        "dest_cmd",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        18
                      ],
                      [
                        "jvm",
                        "aload",
                        2
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        19
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "equals-Object-Z",
                        1,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        20
                      ],
                      [
                        "jvm",
                        "ifeq",
                        24
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        21
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        22
                      ],
                      [
                        "jvm",
                        "getfield",
                        "src",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        23
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        24
                      ],
                      [
                        "jvm",
                        "aconst_null"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        25
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "apply",
        [
          "self",
          "apply-COS_JRoom-String-COS_JRoom"
        ]
      ],
      [
        "method",
        "apply-COS_JRoom-COS_JRoom",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        1,
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "getfield",
                        "src",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "if_acmpne",
                        7
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        5
                      ],
                      [
                        "jvm",
                        "getfield",
                        "dest",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        6
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        7
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        8
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        9
                      ],
                      [
                        "jvm",
                        "getfield",
                        "dest",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        10
                      ],
                      [
                        "jvm",
                        "if_acmpne",
                        14
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        11
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        12
                      ],
                      [
                        "jvm",
                        "getfield",
                        "src",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        13
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        14
                      ],
                      [
                        "jvm",
                        "aconst_null"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        15
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "stanza": 1501
  },
  {
    "role": "file",
    "lines": [
      "== COS_JThing =="
    ],
    "stanza": 1502
  },
  {
    "role": "comment",
    "lines": [
      "# JAVA class translation 'COS_JThing'",
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# ",
      "# public class COS_JThing extends COS_JNamed {",
      "#     private COS_JRoom location;",
      "#     private COS_JRoom nextLocation;",
      "# ",
      "#     public void setRoom(COS_JRoom location) {",
      "#     if (this.location!=null) {",
      "#         this.location.removeThing(this);",
      "#     }",
      "#     this.location = location;",
      "#     location.addThing(this);",
      "#     this.nextLocation = location;",
      "#     }",
      "#     ",
      "#     public COS_JRoom getRoom() {",
      "#     return location;",
      "#     }",
      "# ",
      "#     public void setNextRoom(COS_JRoom location) {",
      "#     nextLocation = location;",
      "#     }",
      "# ",
      "#     public void postUpdate() {",
      "#     if (nextLocation!=location) {",
      "#         setRoom(nextLocation);",
      "#     }",
      "#     }",
      "# }",
      "# "
    ],
    "section_description": "class translation 'COS_JThing'",
    "section_category": "JAVA",
    "section_index": 62,
    "stanza": 1503
  },
  {
    "role": "code",
    "lines": [
      "class COS_JThing ()",
      "   (field super-ref (make-cell 0))",
      "   (method new (set! (super-ref) ((COS_JNamed) | this)))",
      "   (method super (? x | (get! | super-ref) | x))",
      "   (method unknown (? x | self super | x))",
      "   (field location (cell new 0))",
      "   (field nextLocation (cell new 0))",
      "   (method <init>-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 2) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> (self <init>-V))",
      "",
      "   (method setRoom-COS_JRoom-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield location (COS_JRoom)))",
      "         ((= (x) 2) (jvm ifnull 7))",
      "         ((= (x) 3) (jvm aload 0))",
      "         ((= (x) 4) (jvm getfield location (COS_JRoom)))",
      "         ((= (x) 5) (jvm aload 0))",
      "         ((= (x) 6) (jvm invokevirtual removeThing-COS_JThing-V 1 0))",
      "         ((= (x) 7) (jvm aload 0))",
      "         ((= (x) 8) (jvm aload 1))",
      "         ((= (x) 9) (jvm putfield location (COS_JRoom)))",
      "         ((= (x) 10) (jvm aload 1))",
      "         ((= (x) 11) (jvm aload 0))",
      "         ((= (x) 12) (jvm invokevirtual addThing-COS_JThing-V 1 0))",
      "         ((= (x) 13) (jvm aload 0))",
      "         ((= (x) 14) (jvm aload 1))",
      "         ((= (x) 15) (jvm putfield nextLocation (COS_JRoom)))",
      "         ((= (x) 16) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method setRoom (self setRoom-COS_JRoom-V))",
      "",
      "   (method getRoom-COS_JRoom",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield location (COS_JRoom)))",
      "         ((= (x) 2) (jvm areturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method getRoom (self getRoom-COS_JRoom))",
      "",
      "   (method setNextRoom-COS_JRoom-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm aload 1))",
      "         ((= (x) 2) (jvm putfield nextLocation (COS_JRoom)))",
      "         ((= (x) 3) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method setNextRoom (self setNextRoom-COS_JRoom-V))",
      "",
      "   (method postUpdate-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield nextLocation (COS_JRoom)))",
      "         ((= (x) 2) (jvm aload 0))",
      "         ((= (x) 3) (jvm getfield location (COS_JRoom)))",
      "         ((= (x) 4) (jvm if_acmpeq 9))",
      "         ((= (x) 5) (jvm aload 0))",
      "         ((= (x) 6) (jvm aload 0))",
      "         ((= (x) 7) (jvm getfield nextLocation (COS_JRoom)))",
      "         ((= (x) 8) (jvm invokevirtual setRoom-COS_JRoom-V 1 0))",
      "         ((= (x) 9) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method postUpdate (self postUpdate-V))",
      "",
      " ;"
    ],
    "code
    "parse": [
      "class",
      "COS_JThing",
      [],
      [
        "field",
        "super-ref",
        [
          "make-cell",
          0
        ]
      ],
      [
        "method",
        "new",
        [
          "set!",
          [
            "super-ref"
          ],
          [
            [
              "COS_JNamed"
            ],
            [
              -1,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -1,
                "super-ref"
              ]
            ],
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "location",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "field",
        "nextLocation",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        0,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "setRoom-COS_JRoom-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        1,
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "getfield",
                        "location",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "ifnull",
                        7
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "getfield",
                        "location",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        5
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        6
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "removeThing-COS_JThing-V",
                        1,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        7
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        8
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        9
                      ],
                      [
                        "jvm",
                        "putfield",
                        "location",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        10
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        11
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        12
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "addThing-COS_JThing-V",
                        1,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        13
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        14
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        15
                      ],
                      [
                        "jvm",
                        "putfield",
                        "nextLocation",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        16
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "setRoom",
        [
          "self",
          "setRoom-COS_JRoom-V"
        ]
      ],
      [
        "method",
        "getRoom-COS_JRoom",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "getfield",
                        "location",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "getRoom",
        [
          "self",
          "getRoom-COS_JRoom"
        ]
      ],
      [
        "method",
        "setNextRoom-COS_JRoom-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        1,
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "putfield",
                        "nextLocation",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "setNextRoom",
        [
          "self",
          "setNextRoom-COS_JRoom-V"
        ]
      ],
      [
        "method",
        "postUpdate-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "getfield",
                        "nextLocation",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "getfield",
                        "location",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "if_acmpeq",
                        9
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        5
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        6
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        7
                      ],
                      [
                        "jvm",
                        "getfield",
                        "nextLocation",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        8
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "setRoom-COS_JRoom-V",
                        1,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        9
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "postUpdate",
        [
          "self",
          "postUpdate-V"
        ]
      ]
    ],
    "stanza": 1504
  },
  {
    "role": "file",
    "lines": [
      "== COS_JRoom =="
    ],
    "stanza": 1505
  },
  {
    "role": "comment",
    "lines": [
      "# JAVA class translation 'COS_JRoom'",
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# ",
      "# import java.util.Iterator;",
      "# ",
      "# public class COS_JRoom extends COS_JNamed {",
      "#     //private COS_JList content = new COS_JList();",
      "#     //private COS_JList doors = new COS_JList();",
      "# ",
      "#     private COS_JList content;",
      "#     private COS_JList doors;",
      "# ",
      "#     public COS_JRoom() {",
      "#     content = new COS_JList();",
      "#     doors = new COS_JList();",
      "#     }",
      "# ",
      "#     public COS_JList get() {",
      "#     return content;",
      "#     }",
      "# ",
      "#     public Iterator getDoors() {",
      "#     return doors.iterator();",
      "#     }",
      "# ",
      "#     public void addDoor(COS_JDoor door) {",
      "#     //System.out.println(\"add door -> \" + getName());",
      "#     doors.add(door);",
      "#     }",
      "# ",
      "#     public void addThing(COS_JThing thing) {",
      "#     content.add(thing);",
      "#     }",
      "# ",
      "#     public void removeThing(COS_JThing thing) {",
      "#     content.remove(thing);",
      "#     }",
      "# }"
    ],
    "section_description": "class translation 'COS_JRoom'",
    "section_category": "JAVA",
    "section_index": 63,
    "stanza": 1506
  },
  {
    "role": "code",
    "lines": [
      "class COS_JRoom ()",
      "   (field super-ref (make-cell 0))",
      "   (method new (set! (super-ref) ((COS_JNamed) | this)))",
      "   (method super (? x | (get! | super-ref) | x))",
      "   (method unknown (? x | self super | x))",
      "   (field content (cell new 0))",
      "   (field doors (cell new 0))",
      "   (method <init>-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 2) (jvm aload 0))",
      "         ((= (x) 3) (jvm new (COS_JList)))",
      "         ((= (x) 4) (jvm dup))",
      "         ((= (x) 5) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 6) (jvm putfield content (COS_JList)))",
      "         ((= (x) 7) (jvm aload 0))",
      "         ((= (x) 8) (jvm new (COS_JList)))",
      "         ((= (x) 9) (jvm dup))",
      "         ((= (x) 10) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 11) (jvm putfield doors (COS_JList)))",
      "         ((= (x) 12) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> (self <init>-V))",
      "",
      "   (method get-COS_JList",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield content (COS_JList)))",
      "         ((= (x) 2) (jvm areturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method get (self get-COS_JList))",
      "",
      "   (method getDoors-Iterator",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield doors (COS_JList)))",
      "         ((= (x) 2) (jvm invokevirtual iterator-Iterator 0 1))",
      "         ((= (x) 3) (jvm areturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method getDoors (self getDoors-Iterator))",
      "",
      "   (method addDoor-COS_JDoor-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield doors (COS_JList)))",
      "         ((= (x) 2) (jvm aload 1))",
      "         ((= (x) 3) (jvm invokevirtual add-Object-V 1 0))",
      "         ((= (x) 4) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method addDoor (self addDoor-COS_JDoor-V))",
      "",
      "   (method addThing-COS_JThing-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield content (COS_JList)))",
      "         ((= (x) 2) (jvm aload 1))",
      "         ((= (x) 3) (jvm invokevirtual add-Object-V 1 0))",
      "         ((= (x) 4) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method addThing (self addThing-COS_JThing-V))",
      "",
      "   (method removeThing-COS_JThing-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield content (COS_JList)))",
      "         ((= (x) 2) (jvm aload 1))",
      "         ((= (x) 3) (jvm invokevirtual remove-Object-Z 1 1))",
      "         ((= (x) 4) (jvm pop))",
      "         ((= (x) 5) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method removeThing (self removeThing-COS_JThing-V))",
      "",
      " ;"
    ],
    "code
    "parse": [
      "class",
      "COS_JRoom",
      [],
      [
        "field",
        "super-ref",
        [
          "make-cell",
          0
        ]
      ],
      [
        "method",
        "new",
        [
          "set!",
          [
            "super-ref"
          ],
          [
            [
              "COS_JNamed"
            ],
            [
              -1,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -1,
                "super-ref"
              ]
            ],
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "content",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "field",
        "doors",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        0,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "new",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        5
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        0,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        6
                      ],
                      [
                        "jvm",
                        "putfield",
                        "content",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        7
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        8
                      ],
                      [
                        "jvm",
                        "new",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        9
                      ],
                      [
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        10
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        0,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        11
                      ],
                      [
                        "jvm",
                        "putfield",
                        "doors",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        12
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "get-COS_JList",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "getfield",
                        "content",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "get",
        [
          "self",
          "get-COS_JList"
        ]
      ],
      [
        "method",
        "getDoors-Iterator",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "getfield",
                        "doors",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "iterator-Iterator",
                        0,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "getDoors",
        [
          "self",
          "getDoors-Iterator"
        ]
      ],
      [
        "method",
        "addDoor-COS_JDoor-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        1,
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "getfield",
                        "doors",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "add-Object-V",
                        1,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "addDoor",
        [
          "self",
          "addDoor-COS_JDoor-V"
        ]
      ],
      [
        "method",
        "addThing-COS_JThing-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        1,
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "getfield",
                        "content",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "add-Object-V",
                        1,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "addThing",
        [
          "self",
          "addThing-COS_JThing-V"
        ]
      ],
      [
        "method",
        "removeThing-COS_JThing-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        1,
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "getfield",
                        "content",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "remove-Object-Z",
                        1,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "pop"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        5
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "removeThing",
        [
          "self",
          "removeThing-COS_JThing-V"
        ]
      ]
    ],
    "stanza": 1507
  },
  {
    "role": "file",
    "lines": [
      "== COS_JNamed =="
    ],
    "stanza": 1508
  },
  {
    "role": "comment",
    "lines": [
      "# JAVA class translation 'COS_JNamed'",
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# ",
      "# public class COS_JNamed {",
      "#     private String name = \"-\";",
      "#     private COS_JWorld world = null;",
      "# ",
      "#     void setName(String name) {",
      "#     this.name = name;",
      "#     }",
      "# ",
      "#     String getName() {",
      "#     return name;",
      "#     }",
      "# ",
      "#     void setWorld(COS_JWorld world) {",
      "#     this.world = world;",
      "#     }",
      "# ",
      "#     COS_JWorld getWorld() {",
      "#     return world;",
      "#     }",
      "# ",
      "#     void update() {",
      "#     }",
      "# ",
      "#     void postUpdate() {",
      "#     }",
      "# }"
    ],
    "section_description": "class translation 'COS_JNamed'",
    "section_category": "JAVA",
    "section_index": 64,
    "stanza": 1509
  },
  {
    "role": "code",
    "lines": [
      "class COS_JNamed ()",
      "   (field super-ref (make-cell 0))",
      "   (method new (set! (super-ref) ((java lang Object) | this)))",
      "   (method super (? x | (get! | super-ref) | x))",
      "   (method unknown (? x | self super | x))",
      "   (field name (cell new 0))",
      "   (field world (cell new 0))",
      "   (method <init>-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 2) (jvm aload 0))",
      "         ((= (x) 3) (jvm ldc (String new int-init \"-\")))",
      "         ((= (x) 4) (jvm putfield name (java lang String)))",
      "         ((= (x) 5) (jvm aload 0))",
      "         ((= (x) 6) (jvm aconst_null))",
      "         ((= (x) 7) (jvm putfield world (COS_JWorld)))",
      "         ((= (x) 8) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> (self <init>-V))",
      "",
      "   (method setName-String-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm aload 1))",
      "         ((= (x) 2) (jvm putfield name (java lang String)))",
      "         ((= (x) 3) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method setName (self setName-String-V))",
      "",
      "   (method getName-String",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield name (java lang String)))",
      "         ((= (x) 2) (jvm areturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method getName (self getName-String))",
      "",
      "   (method setWorld-COS_JWorld-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm aload 1))",
      "         ((= (x) 2) (jvm putfield world (COS_JWorld)))",
      "         ((= (x) 3) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method setWorld (self setWorld-COS_JWorld-V))",
      "",
      "   (method getWorld-COS_JWorld",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield world (COS_JWorld)))",
      "         ((= (x) 2) (jvm areturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method getWorld (self getWorld-COS_JWorld))",
      "",
      "   (method update-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method update (self update-V))",
      "",
      "   (method postUpdate-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method postUpdate (self postUpdate-V))",
      "",
      " ;"
    ],
    "code
    "parse": [
      "class",
      "COS_JNamed",
      [],
      [
        "field",
        "super-ref",
        [
          "make-cell",
          0
        ]
      ],
      [
        "method",
        "new",
        [
          "set!",
          [
            "super-ref"
          ],
          [
            [
              "java",
              "lang",
              "Object"
            ],
            [
              -1,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -1,
                "super-ref"
              ]
            ],
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "name",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "field",
        "world",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        0,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "ldc",
                        [
                          "String",
                          "new",
                          "int-init",
                          "\"-\""
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "putfield",
                        "name",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        5
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        6
                      ],
                      [
                        "jvm",
                        "aconst_null"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        7
                      ],
                      [
                        "jvm",
                        "putfield",
                        "world",
                        [
                          "COS_JWorld"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        8
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "setName-String-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        1,
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "putfield",
                        "name",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "setName",
        [
          "self",
          "setName-String-V"
        ]
      ],
      [
        "method",
        "getName-String",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "getfield",
                        "name",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "getName",
        [
          "self",
          "getName-String"
        ]
      ],
      [
        "method",
        "setWorld-COS_JWorld-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        1,
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "putfield",
                        "world",
                        [
                          "COS_JWorld"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "setWorld",
        [
          "self",
          "setWorld-COS_JWorld-V"
        ]
      ],
      [
        "method",
        "getWorld-COS_JWorld",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "getfield",
                        "world",
                        [
                          "COS_JWorld"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "getWorld",
        [
          "self",
          "getWorld-COS_JWorld"
        ]
      ],
      [
        "method",
        "update-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "update",
        [
          "self",
          "update-V"
        ]
      ],
      [
        "method",
        "postUpdate-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "postUpdate",
        [
          "self",
          "postUpdate-V"
        ]
      ]
    ],
    "stanza": 1510
  },
  {
    "role": "file",
    "lines": [
      "== COS_JWorld =="
    ],
    "stanza": 1511
  },
  {
    "role": "comment",
    "lines": [
      "# JAVA class translation 'COS_JWorld'",
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# ",
      "# import java.util.Iterator;",
      "# ",
      "# public class COS_JWorld {",
      "#     private COS_JHashMap content;",
      "#     private COS_JList inventory;",
      "# ",
      "#     public COS_JWorld() {",
      "#     content = new COS_JHashMap();",
      "#     inventory = new COS_JList();",
      "#     }",
      "# ",
      "#     public void add(COS_JNamed named, String name) {",
      "#     named.setName(name);",
      "#     content.put(named.getName(),named);",
      "#     inventory.add(named);",
      "#     }",
      "# ",
      "#     public COS_JNamed get(String name) {",
      "#     return (COS_JNamed)content.get(new String(name));",
      "#     }",
      "# ",
      "#     public void update() {",
      "#     for (Iterator i = inventory.iterator(); i.hasNext(); ) {",
      "#         COS_JNamed o = (COS_JNamed) i.next();",
      "#         o.update();",
      "#     }",
      "#     for (Iterator i = inventory.iterator(); i.hasNext(); ) {",
      "#         COS_JNamed o = (COS_JNamed) i.next();",
      "#         o.postUpdate();",
      "#     }",
      "#     }",
      "# }"
    ],
    "section_description": "class translation 'COS_JWorld'",
    "section_category": "JAVA",
    "section_index": 65,
    "stanza": 1512
  },
  {
    "role": "code",
    "lines": [
      "class COS_JWorld ()",
      "   (field super-ref (make-cell 0))",
      "   (method new (set! (super-ref) ((java lang Object) | this)))",
      "   (method super (? x | (get! | super-ref) | x))",
      "   (method unknown (? x | self super | x))",
      "   (field content (cell new 0))",
      "   (field inventory (cell new 0))",
      "   (method <init>-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 2) (jvm aload 0))",
      "         ((= (x) 3) (jvm new (COS_JHashMap)))",
      "         ((= (x) 4) (jvm dup))",
      "         ((= (x) 5) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 6) (jvm putfield content (COS_JHashMap)))",
      "         ((= (x) 7) (jvm aload 0))",
      "         ((= (x) 8) (jvm new (COS_JList)))",
      "         ((= (x) 9) (jvm dup))",
      "         ((= (x) 10) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 11) (jvm putfield inventory (COS_JList)))",
      "         ((= (x) 12) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> (self <init>-V))",
      "",
      "   (method add-COS_JNamed-String-V",
      "     (lambda (arg0 arg1) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 1))",
      "         ((= (x) 1) (jvm aload 2))",
      "         ((= (x) 2) (jvm invokevirtual setName-String-V 1 0))",
      "         ((= (x) 3) (jvm aload 0))",
      "         ((= (x) 4) (jvm getfield content (COS_JHashMap)))",
      "         ((= (x) 5) (jvm aload 1))",
      "         ((= (x) 6) (jvm invokevirtual getName-String 0 1))",
      "         ((= (x) 7) (jvm aload 1))",
      "         ((= (x) 8) (jvm invokevirtual put-Object-Object-V 2 0))",
      "         ((= (x) 9) (jvm aload 0))",
      "         ((= (x) 10) (jvm getfield inventory (COS_JList)))",
      "         ((= (x) 11) (jvm aload 1))",
      "         ((= (x) 12) (jvm invokevirtual add-Object-V 1 0))",
      "         ((= (x) 13) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method add (self add-COS_JNamed-String-V))",
      "",
      "   (method get-String-COS_JNamed",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield content (COS_JHashMap)))",
      "         ((= (x) 2) (jvm new (java lang String)))",
      "         ((= (x) 3) (jvm dup))",
      "         ((= (x) 4) (jvm aload 1))",
      "         ((= (x) 5) (jvm invokespecial <init>-String-V 1 0))",
      "         ((= (x) 6) (jvm invokevirtual get-Object-Object 1 1))",
      "         ((= (x) 7) (jvm checkcast (COS_JNamed)))",
      "         ((= (x) 8) (jvm areturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method get (self get-String-COS_JNamed))",
      "",
      "   (method update-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield inventory (COS_JList)))",
      "         ((= (x) 2) (jvm invokevirtual iterator-Iterator 0 1))",
      "         ((= (x) 3) (jvm astore 1))",
      "         ((= (x) 4) (jvm aload 1))",
      "         ((= (x) 5) (jvm invokeinterface hasNext-Z 0 1 1))",
      "         ((= (x) 6) (jvm ifeq 14))",
      "         ((= (x) 7) (jvm aload 1))",
      "         ((= (x) 8) (jvm invokeinterface next-Object 0 1 1))",
      "         ((= (x) 9) (jvm checkcast (COS_JNamed)))",
      "         ((= (x) 10) (jvm astore 2))",
      "         ((= (x) 11) (jvm aload 2))",
      "         ((= (x) 12) (jvm invokevirtual update-V 0 0))",
      "         ((= (x) 13) (jvm goto 4))",
      "         ((= (x) 14) (jvm aload 0))",
      "         ((= (x) 15) (jvm getfield inventory (COS_JList)))",
      "         ((= (x) 16) (jvm invokevirtual iterator-Iterator 0 1))",
      "         ((= (x) 17) (jvm astore 1))",
      "         ((= (x) 18) (jvm aload 1))",
      "         ((= (x) 19) (jvm invokeinterface hasNext-Z 0 1 1))",
      "         ((= (x) 20) (jvm ifeq 28))",
      "         ((= (x) 21) (jvm aload 1))",
      "         ((= (x) 22) (jvm invokeinterface next-Object 0 1 1))",
      "         ((= (x) 23) (jvm checkcast (COS_JNamed)))",
      "         ((= (x) 24) (jvm astore 2))",
      "         ((= (x) 25) (jvm aload 2))",
      "         ((= (x) 26) (jvm invokevirtual postUpdate-V 0 0))",
      "         ((= (x) 27) (jvm goto 18))",
      "         ((= (x) 28) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method update (self update-V))",
      "",
      " ;"
    ],
    "code
    "parse": [
      "class",
      "COS_JWorld",
      [],
      [
        "field",
        "super-ref",
        [
          "make-cell",
          0
        ]
      ],
      [
        "method",
        "new",
        [
          "set!",
          [
            "super-ref"
          ],
          [
            [
              "java",
              "lang",
              "Object"
            ],
            [
              -1,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -1,
                "super-ref"
              ]
            ],
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "content",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "field",
        "inventory",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        0,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "new",
                        [
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        5
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        0,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        6
                      ],
                      [
                        "jvm",
                        "putfield",
                        "content",
                        [
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        7
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        8
                      ],
                      [
                        "jvm",
                        "new",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        9
                      ],
                      [
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        10
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        0,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        11
                      ],
                      [
                        "jvm",
                        "putfield",
                        "inventory",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        12
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "add-COS_JNamed-String-V",
        [
          "lambda",
          [
            "arg0",
            "arg1"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        1,
                        [
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        2,
                        [
                          "arg1"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "aload",
                        2
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "setName-String-V",
                        1,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "getfield",
                        "content",
                        [
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        5
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        6
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "getName-String",
                        0,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        7
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        8
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "put-Object-Object-V",
                        2,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        9
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        10
                      ],
                      [
                        "jvm",
                        "getfield",
                        "inventory",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        11
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        12
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "add-Object-V",
                        1,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        13
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "add",
        [
          "self",
          "add-COS_JNamed-String-V"
        ]
      ],
      [
        "method",
        "get-String-COS_JNamed",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        1,
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "getfield",
                        "content",
                        [
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "new",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        5
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-String-V",
                        1,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        6
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "get-Object-Object",
                        1,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        7
                      ],
                      [
                        "jvm",
                        "checkcast",
                        [
                          "COS_JNamed"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        8
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "get",
        [
          "self",
          "get-String-COS_JNamed"
        ]
      ],
      [
        "method",
        "update-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "getfield",
                        "inventory",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "iterator-Iterator",
                        0,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "astore",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        5
                      ],
                      [
                        "jvm",
                        "invokeinterface",
                        "hasNext-Z",
                        0,
                        1,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        6
                      ],
                      [
                        "jvm",
                        "ifeq",
                        14
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        7
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        8
                      ],
                      [
                        "jvm",
                        "invokeinterface",
                        "next-Object",
                        0,
                        1,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        9
                      ],
                      [
                        "jvm",
                        "checkcast",
                        [
                          "COS_JNamed"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        10
                      ],
                      [
                        "jvm",
                        "astore",
                        2
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        11
                      ],
                      [
                        "jvm",
                        "aload",
                        2
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        12
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "update-V",
                        0,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        13
                      ],
                      [
                        "jvm",
                        "goto",
                        4
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        14
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        15
                      ],
                      [
                        "jvm",
                        "getfield",
                        "inventory",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        16
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "iterator-Iterator",
                        0,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        17
                      ],
                      [
                        "jvm",
                        "astore",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        18
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        19
                      ],
                      [
                        "jvm",
                        "invokeinterface",
                        "hasNext-Z",
                        0,
                        1,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        20
                      ],
                      [
                        "jvm",
                        "ifeq",
                        28
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        21
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        22
                      ],
                      [
                        "jvm",
                        "invokeinterface",
                        "next-Object",
                        0,
                        1,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        23
                      ],
                      [
                        "jvm",
                        "checkcast",
                        [
                          "COS_JNamed"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        24
                      ],
                      [
                        "jvm",
                        "astore",
                        2
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        25
                      ],
                      [
                        "jvm",
                        "aload",
                        2
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        26
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "postUpdate-V",
                        0,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        27
                      ],
                      [
                        "jvm",
                        "goto",
                        18
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        28
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "update",
        [
          "self",
          "update-V"
        ]
      ]
    ],
    "stanza": 1513
  },
  {
    "role": "file",
    "lines": [
      "== COS_JRobo =="
    ],
    "stanza": 1514
  },
  {
    "role": "comment",
    "lines": [
      "# JAVA class translation 'COS_JRobo'",
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# ",
      "# import java.util.Iterator;",
      "# ",
      "# public class COS_JRobo extends COS_JThing {",
      "#     private COS_JHashMap times;",
      "#     private int now;",
      "# ",
      "#     public COS_JRobo() {",
      "#     times = new COS_JHashMap();",
      "#     now = 1;",
      "#     }",
      "# ",
      "#     public void update() {",
      "#     COS_JRoom location = getRoom();",
      "#     //System.out.println(\"Updating robo...\");",
      "#     if (location!=null) {",
      "#         int oldestTime = now;",
      "#         COS_JDoor oldestDoor = null;",
      "#         for (Iterator i = location.getDoors(); i.hasNext(); ) {",
      "#         COS_JDoor door = (COS_JDoor) i.next();",
      "#         //System.out.println(\" scanning door \");",
      "#         Integer t = (Integer)times.get(door);",
      "#         int v = 0;",
      "#         if (t!=null) {",
      "#             v = t.intValue();",
      "#         }",
      "#         if (v<oldestTime) {",
      "#             oldestTime = v;",
      "#             oldestDoor = door;",
      "#         }",
      "#         }",
      "#         if (oldestDoor!=null) {",
      "#         times.put(oldestDoor,new Integer(now));",
      "#         setNextRoom(oldestDoor.apply(location));",
      "#         }",
      "#     }",
      "#     now++;",
      "#     }",
      "# }",
      "# "
    ],
    "section_description": "class translation 'COS_JRobo'",
    "section_category": "JAVA",
    "section_index": 66,
    "stanza": 1515
  },
  {
    "role": "code",
    "lines": [
      "class COS_JRobo ()",
      "   (field super-ref (make-cell 0))",
      "   (method new (set! (super-ref) ((COS_JThing) | this)))",
      "   (method super (? x | (get! | super-ref) | x))",
      "   (method unknown (? x | self super | x))",
      "   (field times (cell new 0))",
      "   (field now ((int) new))",
      "   (method <init>-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 2) (jvm aload 0))",
      "         ((= (x) 3) (jvm new (COS_JHashMap)))",
      "         ((= (x) 4) (jvm dup))",
      "         ((= (x) 5) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 6) (jvm putfield times (COS_JHashMap)))",
      "         ((= (x) 7) (jvm aload 0))",
      "         ((= (x) 8) (jvm iconst 1))",
      "         ((= (x) 9) (jvm putfield now (int)))",
      "         ((= (x) 10) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> (self <init>-V))",
      "",
      "   (method update-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm invokevirtual getRoom-COS_JRoom 0 1))",
      "         ((= (x) 2) (jvm astore 1))",
      "         ((= (x) 3) (jvm aload 1))",
      "         ((= (x) 4) (jvm ifnull 57))",
      "         ((= (x) 5) (jvm aload 0))",
      "         ((= (x) 6) (jvm getfield now (int)))",
      "         ((= (x) 7) (jvm istore 2))",
      "         ((= (x) 8) (jvm aconst_null))",
      "         ((= (x) 9) (jvm astore 3))",
      "         ((= (x) 10) (jvm aload 1))",
      "         ((= (x) 11) (jvm invokevirtual getDoors-Iterator 0 1))",
      "         ((= (x) 12) (jvm astore 4))",
      "         ((= (x) 13) (jvm aload 4))",
      "         ((= (x) 14) (jvm invokeinterface hasNext-Z 0 1 1))",
      "         ((= (x) 15) (jvm ifeq 41))",
      "         ((= (x) 16) (jvm aload 4))",
      "         ((= (x) 17) (jvm invokeinterface next-Object 0 1 1))",
      "         ((= (x) 18) (jvm checkcast (COS_JDoor)))",
      "         ((= (x) 19) (jvm astore 5))",
      "         ((= (x) 20) (jvm aload 0))",
      "         ((= (x) 21) (jvm getfield times (COS_JHashMap)))",
      "         ((= (x) 22) (jvm aload 5))",
      "         ((= (x) 23) (jvm invokevirtual get-Object-Object 1 1))",
      "         ((= (x) 24) (jvm checkcast (java lang Integer)))",
      "         ((= (x) 25) (jvm astore 6))",
      "         ((= (x) 26) (jvm iconst 0))",
      "         ((= (x) 27) (jvm istore 7))",
      "         ((= (x) 28) (jvm aload 6))",
      "         ((= (x) 29) (jvm ifnull 33))",
      "         ((= (x) 30) (jvm aload 6))",
      "         ((= (x) 31) (jvm invokevirtual intValue-I 0 1))",
      "         ((= (x) 32) (jvm istore 7))",
      "         ((= (x) 33) (jvm iload 7))",
      "         ((= (x) 34) (jvm iload 2))",
      "         ((= (x) 35) (jvm if_icmpge 40))",
      "         ((= (x) 36) (jvm iload 7))",
      "         ((= (x) 37) (jvm istore 2))",
      "         ((= (x) 38) (jvm aload 5))",
      "         ((= (x) 39) (jvm astore 3))",
      "         ((= (x) 40) (jvm goto 13))",
      "         ((= (x) 41) (jvm aload 3))",
      "         ((= (x) 42) (jvm ifnull 57))",
      "         ((= (x) 43) (jvm aload 0))",
      "         ((= (x) 44) (jvm getfield times (COS_JHashMap)))",
      "         ((= (x) 45) (jvm aload 3))",
      "         ((= (x) 46) (jvm new (java lang Integer)))",
      "         ((= (x) 47) (jvm dup))",
      "         ((= (x) 48) (jvm aload 0))",
      "         ((= (x) 49) (jvm getfield now (int)))",
      "         ((= (x) 50) (jvm invokespecial <init>-I-V 1 0))",
      "         ((= (x) 51) (jvm invokevirtual put-Object-Object-V 2 0))",
      "         ((= (x) 52) (jvm aload 0))",
      "         ((= (x) 53) (jvm aload 3))",
      "         ((= (x) 54) (jvm aload 1))",
      "         ((= (x) 55) (jvm invokevirtual apply-COS_JRoom-COS_JRoom 1 1))",
      "         ((= (x) 56) (jvm invokevirtual setNextRoom-COS_JRoom-V 1 0))",
      "         ((= (x) 57) (jvm aload 0))",
      "         ((= (x) 58) (jvm dup))",
      "         ((= (x) 59) (jvm getfield now (int)))",
      "         ((= (x) 60) (jvm iconst 1))",
      "         ((= (x) 61) (jvm iadd))",
      "         ((= (x) 62) (jvm putfield now (int)))",
      "         ((= (x) 63) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method update (self update-V))",
      "",
      " ;"
    ],
    "code": "21110001032100100010032322111001113211110000322110113203332210011110321101001032211100322111100003322210001000113302321110000133332210011110321101010132211003210011030232211101302321111000033023210011033322100111103211101010322110032100110302321010001132110101013023210011033322111001113210010001013221111000132110100103203332211100111321001000110322210111000332110100103332210011110321011110113221101032302321011000322211010000030232111100013211010010302321001010030232100003221111113203221010001133332211010000130232111100013211010010302321000033302321111000003221101000003322110100001330232110032111011111302321100321001103023210111111322210322100110332033221110111113211010110032033322210322100110332133221110111113211101001032101111011320320333222103221001103321033221110111113211010110032033322210322100110332113322111011111321101001032210000011113333222103221001103321003322111011111321101001103332221032210011033210133221110111113211101001032101111011320320333222103221001103321103322111011111321101101003210010001013221000001111333322210322100110332111332211101111132110101100320333222103221001103321000332211101111132110101110321333222103221001103321001332211101111132110110100321001000110322101110003333222103221001103321010332211101111132110001013332211101111132110001013333221001111032101111100322101000113210111101133322100111103210010000013221101032302321011000322211010000030232111100013211010010302321001010030232100003221111113203221010001133332211010000130232111100013211010010302321000033302321111000003221101000003322110100001330232110032111011111302321100321001103023210111111322210322100110332033221110111113211010110032033322210322100110332133221110111113211100111032100010101032032133322210322100110332103322111011111321101010013213332221032210011033211332211101111132110101100321333222103221001103321003322111011111321110010013211100133322210322100110332101332211101111132110101100320333222103221001103321103322111011111321101100103210010001103221011100033332221032210011033211133221110111113211010101032103332221032210011033210003322111011111321101100013332221032210011033210013322111011111321101010013211333222103221001103321010332211101111132110101100321333222103221001103321011332211101111132111001110321000110010320321333222103221001103321100332211101111132110101001321003332221032210011033211013322111011111321101011003210033322210322100110332111033221110111113211101000132100001011032032132133322210322100110332111133221110111113211100000032101001333222103221001103321000033221110111113211010110032100333222103221001103321000133221110111113211101000132100001100032032132133322210322100110332100103322111011111321101010003221000011010333322210322100110332100113322111011111321101010013210133322210322100110332101003322111011111321101011003203332221032210011033210101332211101111132110110010321001000101322100000111133332221032210011033210110332211101111132110101100321013332221032210011033210111332211101111132111001110321000010010321321333222103221001103321100033221110111113211010100032211000101132111100101321100000103333222103221001103321100133221110111113211010100132110333222103221001103321101033221110111113211010111032033322210322100110332110113322111011111321101010103211133322210322100110332111003322111011111321101011003211033322210322100110332111013322111011111321110010013210000133322210322100110332111103322111011111321101011003211033322210322100110332111113322111011111321110011103210010001113203213332221032210011033210000033221110111113211010101032111333222103221001103321000013322111011111321101011013211133322210322100110332100010332211101111132110101101321033322210322100110332100011332211101111132111000101321010003332221032210011033210010033221110111113211010110132111333222103221001103321001013322111011111321101010103210333222103221001103321001103322111011111321101011003210133322210322100110332100111332211101111132110101001321133322210322100110332101000332211101111132110111010321101333222103221001103321010013322111011111321101011003211333222103221001103321010103322111011111321110010013211100133322210322100110332101011332211101111132110101100320333222103221001103321011003322111011111321101100103210010001013221000001111333322210322100110332101101332211101111132110101100321133322210322100110332101110332211101111132110100103221100010113211110010132110000010333322210322100110332101111332211101111132110100110333222103221001103321100003322111011111321101011003203332221032210011033211000133221110111113211011001032100100011032210111000333322210322100110332110010332211101111132111010010321100000113213203332221032210011033211001133221110111113211100111032100001000032103203332221032210011033211010033221110111113211010110032033322210322100110332110101332211101111132110101100321133322210322100110332110110332211101111132110101100321333222103221001103321101113322111011111321110011103210001000103213213332221032210011033211100033221110111113211100111032100010110032132033322210322100110332111001332211101111132110101100320333222103221001103321110103322111011111321101001103332221032210011033211101133221110111113211011001032100100011032210111000333322210322100110332111100332211101111132110101110321333222103221001103321111013322111011111321101110003332221032210011033211111033221110111113211011010032100100011032210111000333322210322100110332111111332211101111132110001013332211101111132110001013333221001111032100010011322101000113210010000013332233",
    "parse": [
      "class",
      "COS_JRobo",
      [],
      [
        "field",
        "super-ref",
        [
          "make-cell",
          0
        ]
      ],
      [
        "method",
        "new",
        [
          "set!",
          [
            "super-ref"
          ],
          [
            [
              "COS_JThing"
            ],
            [
              -1,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -1,
                "super-ref"
              ]
            ],
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "times",
        [
          "cell",
          "new",
          0
        ]
      ],
      [
        "field",
        "now",
        [
          [
            "int"
          ],
          "new"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        0,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "new",
                        [
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        5
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        0,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        6
                      ],
                      [
                        "jvm",
                        "putfield",
                        "times",
                        [
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        7
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        8
                      ],
                      [
                        "jvm",
                        "iconst",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        9
                      ],
                      [
                        "jvm",
                        "putfield",
                        "now",
                        [
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        10
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "update-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        0,
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        0
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        1
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "getRoom-COS_JRoom",
                        0,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        2
                      ],
                      [
                        "jvm",
                        "astore",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        3
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        4
                      ],
                      [
                        "jvm",
                        "ifnull",
                        57
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        5
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        6
                      ],
                      [
                        "jvm",
                        "getfield",
                        "now",
                        [
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        7
                      ],
                      [
                        "jvm",
                        "istore",
                        2
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        8
                      ],
                      [
                        "jvm",
                        "aconst_null"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        9
                      ],
                      [
                        "jvm",
                        "astore",
                        3
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        10
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        11
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "getDoors-Iterator",
                        0,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        12
                      ],
                      [
                        "jvm",
                        "astore",
                        4
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        13
                      ],
                      [
                        "jvm",
                        "aload",
                        4
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        14
                      ],
                      [
                        "jvm",
                        "invokeinterface",
                        "hasNext-Z",
                        0,
                        1,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        15
                      ],
                      [
                        "jvm",
                        "ifeq",
                        41
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        16
                      ],
                      [
                        "jvm",
                        "aload",
                        4
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        17
                      ],
                      [
                        "jvm",
                        "invokeinterface",
                        "next-Object",
                        0,
                        1,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        18
                      ],
                      [
                        "jvm",
                        "checkcast",
                        [
                          "COS_JDoor"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        19
                      ],
                      [
                        "jvm",
                        "astore",
                        5
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        20
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        21
                      ],
                      [
                        "jvm",
                        "getfield",
                        "times",
                        [
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        22
                      ],
                      [
                        "jvm",
                        "aload",
                        5
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        23
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "get-Object-Object",
                        1,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        24
                      ],
                      [
                        "jvm",
                        "checkcast",
                        [
                          "java",
                          "lang",
                          "Integer"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        25
                      ],
                      [
                        "jvm",
                        "astore",
                        6
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        26
                      ],
                      [
                        "jvm",
                        "iconst",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        27
                      ],
                      [
                        "jvm",
                        "istore",
                        7
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        28
                      ],
                      [
                        "jvm",
                        "aload",
                        6
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        29
                      ],
                      [
                        "jvm",
                        "ifnull",
                        33
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        30
                      ],
                      [
                        "jvm",
                        "aload",
                        6
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        31
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "intValue-I",
                        0,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        32
                      ],
                      [
                        "jvm",
                        "istore",
                        7
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        33
                      ],
                      [
                        "jvm",
                        "iload",
                        7
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        34
                      ],
                      [
                        "jvm",
                        "iload",
                        2
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        35
                      ],
                      [
                        "jvm",
                        "if_icmpge",
                        40
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        36
                      ],
                      [
                        "jvm",
                        "iload",
                        7
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        37
                      ],
                      [
                        "jvm",
                        "istore",
                        2
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        38
                      ],
                      [
                        "jvm",
                        "aload",
                        5
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        39
                      ],
                      [
                        "jvm",
                        "astore",
                        3
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        40
                      ],
                      [
                        "jvm",
                        "goto",
                        13
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        41
                      ],
                      [
                        "jvm",
                        "aload",
                        3
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        42
                      ],
                      [
                        "jvm",
                        "ifnull",
                        57
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        43
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        44
                      ],
                      [
                        "jvm",
                        "getfield",
                        "times",
                        [
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        45
                      ],
                      [
                        "jvm",
                        "aload",
                        3
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        46
                      ],
                      [
                        "jvm",
                        "new",
                        [
                          "java",
                          "lang",
                          "Integer"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        47
                      ],
                      [
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        48
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        49
                      ],
                      [
                        "jvm",
                        "getfield",
                        "now",
                        [
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        50
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-I-V",
                        1,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        51
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "put-Object-Object-V",
                        2,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        52
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        53
                      ],
                      [
                        "jvm",
                        "aload",
                        3
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        54
                      ],
                      [
                        "jvm",
                        "aload",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        55
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "apply-COS_JRoom-COS_JRoom",
                        1,
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        56
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "setNextRoom-COS_JRoom-V",
                        1,
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        57
                      ],
                      [
                        "jvm",
                        "aload",
                        0
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        58
                      ],
                      [
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        59
                      ],
                      [
                        "jvm",
                        "getfield",
                        "now",
                        [
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        60
                      ],
                      [
                        "jvm",
                        "iconst",
                        1
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        61
                      ],
                      [
                        "jvm",
                        "iadd"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        62
                      ],
                      [
                        "jvm",
                        "putfield",
                        "now",
                        [
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        63
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "update",
        [
          "self",
          "update-V"
        ]
      ]
    ],
    "stanza": 1516
  },
  {
    "role": "file",
    "lines": [
      "== COS_JRoom_test =="
    ],
    "stanza": 1517
  },
  {
    "role": "comment",
    "lines": [
      "# JAVA test JRoom, JDoor, JThing, etc"
    ],
    "section_description": "test JRoom, JDoor, JThing, etc",
    "section_category": "JAVA",
    "section_index": 67,
    "stanza": 1518
  },
  {
    "role": "code",
    "lines": [
      "define s (? x | String new int-init | x);"
    ],
    "code": "211013210010010003221100321001103023211000100032110100103211000101030232100110332233",
    "parse": [
      "define",
      "s",
      [
        "?",
        "x",
        [
          -1,
          "String",
          "new",
          "int-init",
          [
            -1,
            "x"
          ]
        ]
      ]
    ],
    "stanza": 1519
  },
  {
    "role": "code",
    "lines": [
      "define room1 (COS_JRoom new <init>);"
    ],
    "code": "211013210010010013221000011111321101001032101111100332233",
    "parse": [
      "define",
      "room1",
      [
        "COS_JRoom",
        "new",
        "<init>"
      ]
    ],
    "stanza": 1520
  },
  {
    "role": "code",
    "lines": [
      "define room2 (COS_JRoom new <init>);"
    ],
    "code": "211013210010010103221000011111321101001032101111100332233",
    "parse": [
      "define",
      "room2",
      [
        "COS_JRoom",
        "new",
        "<init>"
      ]
    ],
    "stanza": 1521
  },
  {
    "role": "code",
    "lines": [
      "define door12 (COS_JDoor new <init> ",
      "              (room1) (s \"south\") (room2) (s \"north\"));"
    ],
    "code": "211013210010010113221000011010321101001032101111100322100100100133221001001000321001000010001010100010111001100033221001001010332210010010003211011110111001001110100011010003332233",
    "parse": [
      "define",
      "door12",
      [
        "COS_JDoor",
        "new",
        "<init>",
        [
          "room1"
        ],
        [
          "s",
          "\"south\""
        ],
        [
          "room2"
        ],
        [
          "s",
          "\"north\""
        ]
      ]
    ],
    "stanza": 1522
  },
  {
    "role": "code",
    "lines": [
      "define jworld (COS_JWorld new <init>);"
    ],
    "code": "211013210010011003221000111000321101001032101111100332233",
    "parse": [
      "define",
      "jworld",
      [
        "COS_JWorld",
        "new",
        "<init>"
      ]
    ],
    "stanza": 1523
  },
  {
    "role": "code",
    "lines": [
      "define thing1 (COS_JThing new <init>);"
    ],
    "code": "211013210010011013221000100011321101001032101111100332233",
    "parse": [
      "define",
      "thing1",
      [
        "COS_JThing",
        "new",
        "<init>"
      ]
    ],
    "stanza": 1524
  },
  {
    "role": "code",
    "lines": [
      "define robo1 (COS_JRobo new <init>);"
    ],
    "code": "211013210010011103221001000100321101001032101111100332233",
    "parse": [
      "define",
      "robo1",
      [
        "COS_JRobo",
        "new",
        "<init>"
      ]
    ],
    "stanza": 1525
  },
  {
    "role": "code",
    "lines": [
      "act | jworld add (thing1) | s \"bus\";"
    ],
    "code": "210111111130232100100110032110111132210010011013302321001001000321100010011101010111001132233",
    "parse": [
      "act",
      [
        -1,
        "jworld",
        "add",
        [
          "thing1"
        ],
        [
          -1,
          "s",
          "\"bus\""
        ]
      ]
    ],
    "stanza": 1526
  },
  {
    "role": "code",
    "lines": [
      "act | jworld add (robo1) | s \"autobus\";"
    ],
    "code": "21011111113023210010011003211011113221001001110330232100100100032110111101100010011101010111010032233",
    "parse": [
      "act",
      [
        -1,
        "jworld",
        "add",
        [
          "robo1"
        ],
        [
          -1,
          "s",
          "\"autobus\""
        ]
      ]
    ],
    "stanza": 1527
  },
  {
    "role": "code",
    "lines": [
      "act | jworld add (room1) | s \"boston\";"
    ],
    "code": "210111111130232100100110032110111132210010010013302321001001000321000110010001011100100001001001032233",
    "parse": [
      "act",
      [
        -1,
        "jworld",
        "add",
        [
          "room1"
        ],
        [
          -1,
          "s",
          "\"boston\""
        ]
      ]
    ],
    "stanza": 1528
  },
  {
    "role": "code",
    "lines": [
      "act | jworld add (room2) | s \"newyork\";"
    ],
    "code": "210111111130232100100110032110111132210010010103302321001001000321000011010010000100011011001010032233",
    "parse": [
      "act",
      [
        -1,
        "jworld",
        "add",
        [
          "room2"
        ],
        [
          -1,
          "s",
          "\"newyork\""
        ]
      ]
    ],
    "stanza": 1529
  },
  {
    "role": "code",
    "lines": [
      "begin (room1 get add (room1))",
      "       (= 1 | room1 get size);"
    ],
    "code": "21000101132210010010013211110100321101111322100100100133322103213023210010010013211110100321000001110332233",
    "parse": [
      "begin",
      [
        "room1",
        "get",
        "add",
        [
          "room1"
        ]
      ],
      [
        "=",
        1,
        [
          -1,
          "room1",
          "get",
          "size"
        ]
      ]
    ],
    "stanza": 1530
  },
  {
    "role": "code",
    "lines": [
      "= 1 | room1 get size;"
    ],
    "code": "210321302321001001001321111010032100000111032233",
    "parse": [
      "=",
      1,
      [
        -1,
        "room1",
        "get",
        "size"
      ]
    ],
    "stanza": 1531
  },
  {
    "role": "code",
    "lines": [
      "= 0 | room2 get size;"
    ],
    "code": "210320302321001001010321111010032100000111032233",
    "parse": [
      "=",
      0,
      [
        -1,
        "room2",
        "get",
        "size"
      ]
    ],
    "stanza": 1532
  },
  {
    "role": "code",
    "lines": [
      "act | thing1 setRoom (room1);"
    ],
    "code": "21011111113023210010011013210001010013221001001001332233",
    "parse": [
      "act",
      [
        -1,
        "thing1",
        "setRoom",
        [
          "room1"
        ]
      ]
    ],
    "stanza": 1533
  },
  {
    "role": "code",
    "lines": [
      "= 2 | room1 get size;"
    ],
    "code": "2103210302321001001001321111010032100000111032233",
    "parse": [
      "=",
      2,
      [
        -1,
        "room1",
        "get",
        "size"
      ]
    ],
    "stanza": 1534
  },
  {
    "role": "code",
    "lines": [
      "= 0 | room2 get size;"
    ],
    "code": "210320302321001001010321111010032100000111032233",
    "parse": [
      "=",
      0,
      [
        -1,
        "room2",
        "get",
        "size"
      ]
    ],
    "stanza": 1535
  },
  {
    "role": "code",
    "lines": [
      "act | thing1 setRoom (room2);"
    ],
    "code": "21011111113023210010011013210001010013221001001010332233",
    "parse": [
      "act",
      [
        -1,
        "thing1",
        "setRoom",
        [
          "room2"
        ]
      ]
    ],
    "stanza": 1536
  },
  {
    "role": "code",
    "lines": [
      "room1 get size;"
    ],
    "code": "21001001001321111010032100000111032233",
    "parse": [
      "room1",
      "get",
      "size"
    ],
    "stanza": 1537
  },
  {
    "role": "code",
    "lines": [
      "room2 get size;"
    ],
    "code": "21001001010321111010032100000111032233",
    "parse": [
      "room2",
      "get",
      "size"
    ],
    "stanza": 1538
  },
  {
    "role": "code",
    "lines": [
      "thing1 equals (thing1);"
    ],
    "code": "21001001101321011111103221001001101332233",
    "parse": [
      "thing1",
      "equals",
      [
        "thing1"
      ]
    ],
    "stanza": 1539
  },
  {
    "role": "code",
    "lines": [
      "room1 equals (room1);"
    ],
    "code": "21001001001321011111103221001001001332233",
    "parse": [
      "room1",
      "equals",
      [
        "room1"
      ]
    ],
    "stanza": 1540
  },
  {
    "role": "code",
    "lines": [
      "not | thing1 equals (room1);"
    ],
    "code": "2100302321001001101321011111103221001001001332233",
    "parse": [
      "not",
      [
        -1,
        "thing1",
        "equals",
        [
          "room1"
        ]
      ]
    ],
    "stanza": 1541
  },
  {
    "role": "code",
    "lines": [
      "(equal \"newyork\" | door12 apply (room1) (s \"south\") getName intValue);"
    ],
    "code": "210003210000110100100001000110110010100302321001001011321011111322100100100133221001001000321001000010001010100010111001100033210001111003211000010132233",
    "parse": [
      "equal",
      "\"newyork\"",
      [
        -1,
        "door12",
        "apply",
        [
          "room1"
        ],
        [
          "s",
          "\"south\""
        ],
        "getName",
        "intValue"
      ]
    ],
    "lines_original": [
      "demo | door12 apply (room1) (s \"south\") getName intValue;"
    ],
    "stanza": 1542
  },
  {
    "role": "code",
    "lines": [
      "(equal \"boston\" | door12 apply (room2) (s \"north\") getName intValue);"
    ],
    "code": "21000321000110010001011100100001001001030232100100101132101111132210010010103322100100100032110111101110010011101000110100033210001111003211000010132233",
    "parse": [
      "equal",
      "\"boston\"",
      [
        -1,
        "door12",
        "apply",
        [
          "room2"
        ],
        [
          "s",
          "\"north\""
        ],
        "getName",
        "intValue"
      ]
    ],
    "lines_original": [
      "demo | door12 apply (room2) (s \"north\") getName intValue;"
    ],
    "stanza": 1543
  },
  {
    "role": "code",
    "lines": [
      "define o",
      "  (? x | jworld get | s | x);"
    ],
    "code": "2110132110000110322110032100110302321001001100321111010030232100100100030232100110332233",
    "parse": [
      "define",
      "o",
      [
        "?",
        "x",
        [
          -1,
          "jworld",
          "get",
          [
            -1,
            "s",
            [
              -1,
              "x"
            ]
          ]
        ]
      ]
    ],
    "stanza": 1544
  },
  {
    "role": "code",
    "lines": [
      "= \"newyork\" | (o \"bus\") getRoom getName intValue;"
    ],
    "code": "2103210000110100100001000110110010100302322110000110321100010011101010111001133210001010113210001111003211000010132233",
    "parse": [
      "=",
      "\"newyork\"",
      [
        -1,
        [
          "o",
          "\"bus\""
        ],
        "getRoom",
        "getName",
        "intValue"
      ]
    ],
    "stanza": 1545
  },
  {
    "role": "code",
    "lines": [
      "act | robo1 setRoom (room1);"
    ],
    "code": "21011111113023210010011103210001010013221001001001332233",
    "parse": [
      "act",
      [
        -1,
        "robo1",
        "setRoom",
        [
          "room1"
        ]
      ]
    ],
    "stanza": 1546
  },
  {
    "role": "code",
    "lines": [
      "(equal \"boston\" | (o \"autobus\") getRoom getName intValue);"
    ],
    "code": "21000321000110010001011100100001001001030232211000011032110111101100010011101010111010033210001010113210001111003211000010132233",
    "parse": [
      "equal",
      "\"boston\"",
      [
        -1,
        [
          "o",
          "\"autobus\""
        ],
        "getRoom",
        "getName",
        "intValue"
      ]
    ],
    "lines_original": [
      "demo | (o \"autobus\") getRoom getName intValue;"
    ],
    "stanza": 1547
  },
  {
    "role": "code",
    "lines": [
      "act | jworld update;"
    ],
    "code": "21011111113023210010011003210001001132233",
    "parse": [
      "act",
      [
        -1,
        "jworld",
        "update"
      ]
    ],
    "stanza": 1548
  },
  {
    "role": "code",
    "lines": [
      "(equal \"newyork\" | (o \"autobus\") getRoom getName intValue);"
    ],
    "code": "21000321000011010010000100011011001010030232211000011032110111101100010011101010111010033210001010113210001111003211000010132233",
    "parse": [
      "equal",
      "\"newyork\"",
      [
        -1,
        [
          "o",
          "\"autobus\""
        ],
        "getRoom",
        "getName",
        "intValue"
      ]
    ],
    "lines_original": [
      "demo | (o \"autobus\") getRoom getName intValue;"
    ],
    "stanza": 1549
  }
]