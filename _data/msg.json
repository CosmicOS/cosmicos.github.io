[
  {
    "role": "file",
    "lines": [
      "== COS_License =="
    ],
    "stanza": 0
  },
  {
    "role": "comment",
    "lines": [
      "#   Author: Paul Fitzpatrick, paulfitz@alum.mit.edu",
      "#   Copyright (c) 2018 Paul Fitzpatrick",
      "#",
      "#   This file is part of CosmicOS.",
      "#",
      "#   CosmicOS is free software; you can redistribute it and/or modify",
      "#   it under the terms of the GNU General Public License as published by",
      "#   the Free Software Foundation; either version 2 of the License, or",
      "#   (at your option) any later version.",
      "#",
      "#   CosmicOS is distributed in the hope that it will be useful,",
      "#   but WITHOUT ANY WARRANTY; without even the implied warranty of",
      "#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
      "#   GNU General Public License for more details.",
      "#",
      "#   You should have received a copy of the GNU General Public License",
      "#   along with CosmicOS; if not, write to the Free Software",
      "#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",
      "#"
    ],
    "stanza": 1
  },
  {
    "role": "file",
    "lines": [
      "== COS_Intro =="
    ],
    "stanza": 2
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Here we count up from zero, go through some primes, that sort of",
      "thing.  Just like in the movies!  There is some syntax around the",
      "numbers, and a structure to the \"lesson,\" but it will be fine for the",
      "listener to ignore all that for now.  Hopefully what they will pick up",
      "on is:",
      "",
      " * There are some repeating patterns.",
      " * Between those patterns, there's a specific short unit repeating",
      "   a varying number of times (we count in unary).",
      " * The number of times it varies smells like math.",
      "",
      "We'll get to a more compact representation of numbers later, once",
      "we've established the basics.",
      ""
    ],
    "section_description": "introduce numbers (in unary notation)",
    "section_category": "MATH",
    "section_index": 0,
    "stanza": 3
  },
  {
    "role": "code",
    "lines": [
      "intro unary;"
    ],
    "preprocessed": "intro unary;",
    "code": "210010321111111132233",
    "parse": [
      "intro",
      "unary"
    ],
    "spider": "&#xF123;&#xF113;&#xF131;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 4
  },
  {
    "role": "code",
    "lines": [
      "intro is:int;"
    ],
    "preprocessed": "intro is:int;",
    "code": "2100103210100032233",
    "parse": [
      "intro",
      "is:int"
    ],
    "spider": "&#xF123;&#xF113;&#xF124;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 5
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 0;"
    ],
    "preprocessed": "is:int | unary 0;",
    "code": "2101000312321111111132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF119;&#xF101;&#xF143;&#xF131;&#xF120;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 6
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 0;"
    ],
    "preprocessed": "is:int | unary 1 0;",
    "code": "2101000312321111111132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF119;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 7
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 0;",
    "code": "2101000312321111111132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF119;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 8
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 0;",
    "code": "2101000312321111111132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF119;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 9
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 0;",
    "code": "2101000312321111111132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF119;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 10
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 0;",
    "code": "2101000312321111111132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF119;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 11
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 0;",
    "code": "2101000312321111111132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF119;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 12
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 1 0;",
    "code": "2101000312321111111132132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF119;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 13
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 1 1 0;",
    "code": "2101000312321111111132132132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF119;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 14
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 1 1 1 0;",
    "code": "2101000312321111111132132132132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF119;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 15
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 1 1 1 1 0;",
    "code": "2101000312321111111132132132132132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF119;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 16
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 0;",
    "code": "2101000312321111111132132132132132132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF119;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 17
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "code": "2101000312321111111132132132132132132132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF119;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 18
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "code": "2101000312321111111132132132132132132132132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF119;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 19
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "code": "2101000312321111111132132132132132132132132132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF119;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 20
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "code": "2101000312321111111132132132132132132132132132132132132132132132132032233",
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF119;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 21
  },
  {
    "role": "code",
    "lines": [
      "intro is:square;"
    ],
    "preprocessed": "intro is:square;",
    "code": "2100103211000132233",
    "parse": [
      "intro",
      "is:square"
    ],
    "spider": "&#xF123;&#xF113;&#xF125;&#xF112;&#xF132;&#xF143;&#xF121;",
    "stanza": 22
  },
  {
    "role": "code",
    "lines": [
      "is:square | unary 0;"
    ],
    "preprocessed": "is:square | unary 0;",
    "code": "2110001312321111111132032233",
    "parse": [
      "is:square",
      [
        -1,
        "unary",
        "0"
      ]
    ],
    "spider": "&#xF125;&#xF112;&#xF101;&#xF143;&#xF131;&#xF120;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 23
  },
  {
    "role": "code",
    "lines": [
      "is:square | unary 1 0;"
    ],
    "preprocessed": "is:square | unary 1 0;",
    "code": "2110001312321111111132132032233",
    "parse": [
      "is:square",
      [
        -1,
        "unary",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF125;&#xF112;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 24
  },
  {
    "role": "code",
    "lines": [
      "is:square | unary 1 1 1 1 0;"
    ],
    "preprocessed": "is:square | unary 1 1 1 1 0;",
    "code": "2110001312321111111132132132132132032233",
    "parse": [
      "is:square",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF125;&#xF112;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 25
  },
  {
    "role": "code",
    "lines": [
      "is:square | unary 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:square | unary 1 1 1 1 1 1 1 1 1 0;",
    "code": "2110001312321111111132132132132132132132132132132032233",
    "parse": [
      "is:square",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF125;&#xF112;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 26
  },
  {
    "role": "code",
    "lines": [
      "is:square | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:square | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "code": "2110001312321111111132132132132132132132132132132132132132132132132132032233",
    "parse": [
      "is:square",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF125;&#xF112;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 27
  },
  {
    "role": "code",
    "lines": [
      "is:square | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:square | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "code": "2110001312321111111132132132132132132132132132132132132132132132132132132132132132132132132132132032233",
    "parse": [
      "is:square",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF125;&#xF112;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 28
  },
  {
    "role": "code",
    "lines": [
      "intro is:prime;"
    ],
    "preprocessed": "intro is:prime;",
    "code": "2100103210111132233",
    "parse": [
      "intro",
      "is:prime"
    ],
    "spider": "&#xF123;&#xF113;&#xF124;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 29
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 0;",
    "code": "2101111312321111111132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF120;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 30
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 0;",
    "code": "2101111312321111111132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF120;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 31
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 1 1 0;",
    "code": "2101111312321111111132132132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF120;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 32
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 1 1 1 1 0;",
    "code": "2101111312321111111132132132132132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF120;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 33
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 0;",
    "code": "2101111312321111111132132132132132132132132132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF120;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 34
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "code": "2101111312321111111132132132132132132132132132132132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF120;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 35
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "code": "2101111312321111111132132132132132132132132132132132132132132132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF120;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 36
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "code": "2101111312321111111132132132132132132132132132132132132132132132132132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF120;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 37
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "code": "2101111312321111111132132132132132132132132132132132132132132132132132132132132132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF120;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 38
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "code": "2101111312321111111132132132132132132132132132132132132132132132132132132132132132132132132132132132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF120;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 39
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "code": "2101111312321111111132132132132132132132132132132132132132132132132132132132132132132132132132132132132132132132132032233",
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF120;&#xF101;&#xF143;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 40
  },
  {
    "role": "file",
    "lines": [
      "== COS_Compare =="
    ],
    "stanza": 41
  },
  {
    "role": "doc",
    "lines": [
      "",
      "We've hopefully cued our listeners to be looking for mathematical",
      "patterns.  So let's give them some more.  It doesn't matter so much",
      "what patterns we give, as long as they are clear, and that there are",
      "several of them.  Eventually we'll want the listener to start turning",
      "things around, and use the parts of the message they understand (the",
      "mathematical patterns) to learn something about the parts they don't",
      "(the message structure and syntax).",
      "",
      "Let's take a shot at introducing ways of comparing numbers.",
      "No doubt we're revealing a feudal, reductive mindset in which",
      "all things must be ranked in a hierachy.  ¯\\\\\\_(ツ)_/¯.",
      "",
      "Equality is introduced by a series of true statements of the form `X = X` ",
      "(the syntax is a little different than regular math, more like ",
      "`= X X`, but that isn't important yet).  The listener will hopefully",
      "discern a number getting repeated twice within the \"sentence\"",
      "structure they've been seeing, but won't be sure yet what we are",
      "driving at until we introduce non-equality and contrast with it.",
      "",
      ""
    ],
    "section_description": "introduce equality and inequality of numbers",
    "section_category": "MATH",
    "section_index": 1,
    "stanza": 42
  },
  {
    "role": "code",
    "lines": [
      "intro =;"
    ],
    "preprocessed": "intro =;",
    "code": "210010321132233",
    "parse": [
      "intro",
      "="
    ],
    "spider": "&#xF123;&#xF113;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 43
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 0) (unary 1 0);"
    ],
    "preprocessed": "= (unary 1 0) (unary 1 0);",
    "code": "21132211111111321320332211111111321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 44
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 0) (unary 1 1 0);",
    "code": "21132211111111321321320332211111111321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 45
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 0) (unary 1 1 1 0);",
    "code": "21132211111111321321321320332211111111321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 46
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 0) (unary 1 1 1 1 0);",
    "code": "21132211111111321321321321320332211111111321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 47
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 0) (unary 1 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 0) (unary 1 1 1 1 1 0);",
    "code": "21132211111111321321321321321320332211111111321321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 48
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);",
    "code": "21132211111111321321321321321321320332211111111321321321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 49
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 1 0);",
    "code": "21132211111111321321321321321321321320332211111111321321321321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 50
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 1 1 0);",
    "code": "21132211111111321321321321321321321321320332211111111321321321321321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 51
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 0) (unary 1 0);"
    ],
    "preprocessed": "= (unary 1 0) (unary 1 0);",
    "code": "21132211111111321320332211111111321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 52
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);",
    "code": "21132211111111321321321321321321320332211111111321321321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 53
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 0) (unary 1 1 0);",
    "code": "21132211111111321321320332211111111321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 54
  },
  {
    "role": "doc",
    "lines": [
      "Now introduce symbols for 'greater than' and 'less than,' and contrast with equality.",
      "Hopefully the listener will start to understand what part of the sentences are numbers, what part is a function of the relationship between the numbers, and what parts are just meaningless (for now) scaffolding around all that.",
      "There's an ambiguity between the 'greater than' and 'less than' symbols, depending on how you interpret the sentences, but it doesn't matter yet."
    ],
    "stanza": 55
  },
  {
    "role": "code",
    "lines": [
      "intro >;"
    ],
    "preprocessed": "intro >;",
    "code": "2100103210032233",
    "parse": [
      "intro",
      ">"
    ],
    "spider": "&#xF123;&#xF113;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 56
  },
  {
    "role": "code",
    "lines": [
      "intro <;"
    ],
    "preprocessed": "intro <;",
    "code": "210010321032233",
    "parse": [
      "intro",
      "<"
    ],
    "spider": "&#xF123;&#xF113;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 57
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 0) (unary 1 0);"
    ],
    "preprocessed": "= (unary 1 0) (unary 1 0);",
    "code": "21132211111111321320332211111111321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 58
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "< (unary 1 0) (unary 1 1 0);",
    "code": "21032211111111321320332211111111321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 59
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 0) (unary 1 1 1 0);",
    "code": "21032211111111321320332211111111321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 60
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 0) (unary 1 1 1 1 0);",
    "code": "21032211111111321320332211111111321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 61
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 0) (unary 1 0);"
    ],
    "preprocessed": "> (unary 1 1 0) (unary 1 0);",
    "code": "210032211111111321321320332211111111321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 62
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 0) (unary 1 1 0);",
    "code": "21132211111111321321320332211111111321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 63
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 0) (unary 1 1 1 0);",
    "code": "21032211111111321321320332211111111321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 64
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 0) (unary 1 1 1 1 0);",
    "code": "21032211111111321321320332211111111321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 65
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 0) (unary 1 0);",
    "code": "210032211111111321321321320332211111111321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 66
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 0) (unary 1 1 0);",
    "code": "210032211111111321321321320332211111111321321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 67
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 0) (unary 1 1 1 0);",
    "code": "21132211111111321321321320332211111111321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 68
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 1 0) (unary 1 1 1 1 0);",
    "code": "21032211111111321321321320332211111111321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 69
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 0) (unary 1 0);",
    "code": "210032211111111321321321321320332211111111321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 70
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 0) (unary 1 1 0);",
    "code": "210032211111111321321321321320332211111111321321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 71
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 0) (unary 1 1 1 0);",
    "code": "210032211111111321321321321320332211111111321321321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 72
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 0) (unary 1 1 1 1 0);",
    "code": "21132211111111321321321321320332211111111321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 73
  },
  {
    "role": "doc",
    "lines": [
      "Add some random examples."
    ],
    "stanza": 74
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 0) (unary 1 1 1 0);",
    "code": "210032211111111321321321321320332211111111321321321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 75
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 0);"
    ],
    "preprocessed": "> (unary 1 1 1 0) (unary 0);",
    "code": "210032211111111321321321320332211111111320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 76
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 0) (unary 0);"
    ],
    "preprocessed": "> (unary 1 0) (unary 0);",
    "code": "210032211111111321320332211111111320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 77
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 1 1 1 0) (unary 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 1 1 1 1 0) (unary 0);",
    "code": "210032211111111321321321321321321321321320332211111111320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 78
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);",
    "code": "210032211111111321321321321321321321320332211111111321321321321321321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 79
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 1 1 0) (unary 1 1 0);",
    "code": "210032211111111321321321321321321320332211111111321321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 80
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 0) (unary 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 1 0) (unary 0);",
    "code": "210032211111111321321321321321320332211111111320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 81
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 1 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 1 1 1 1 1 0) (unary 1 1 1 1 0);",
    "code": "210032211111111321321321321321321321321321320332211111111321321321321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 82
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 0) (unary 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 1 0) (unary 1 0);",
    "code": "210032211111111321321321321321320332211111111321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 83
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 0) (unary 0);"
    ],
    "preprocessed": "> (unary 1 1 0) (unary 0);",
    "code": "210032211111111321321320332211111111320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 84
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 0) (unary 1 0);",
    "code": "210032211111111321321321320332211111111321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 85
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 1 1 1 0);",
    "code": "21032211111111321321321321321321321320332211111111321321321321321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 86
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 1 0) (unary 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 1 0) (unary 1 1 1 1 1 1 0);",
    "code": "21032211111111321321321320332211111111321321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 87
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 0) (unary 1 1 1 0);",
    "code": "21032211111111321321320332211111111321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 88
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 0) (unary 1 1 1 1 0);",
    "code": "21032211111111321321320332211111111321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 89
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 0);"
    ],
    "preprocessed": "< (unary 0) (unary 1 0);",
    "code": "21032211111111320332211111111321320332233",
    "parse": [
      "<",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 90
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 0) (unary 1 1 1 1 1 1 1 1 1 1 0);",
    "code": "21032211111111320332211111111321321321321321321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 91
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "< (unary 0) (unary 1 1 1 0);",
    "code": "21032211111111320332211111111321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 92
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 0) (unary 1 1 1 1 0);",
    "code": "21032211111111320332211111111321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 93
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 1 1 0) (unary 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 1 1 0) (unary 1 1 1 1 1 1 0);",
    "code": "21032211111111321321321321320332211111111321321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 94
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 1 0);"
    ],
    "preprocessed": "< (unary 0) (unary 1 1 0);",
    "code": "21032211111111320332211111111321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 95
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 0) (unary 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 0) (unary 1 1 1 1 1 1 1 1 0);",
    "code": "21032211111111321320332211111111321321321321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 96
  },
  {
    "role": "doc",
    "lines": [
      "Even more random examples.  We shouldn't be shy about piling on examples at this early stage of the message.  Even just the repetition of the sentence structure with many small variations could help guide the listener at a more fundamental level than what we're ostensibly trying to communicate here."
    ],
    "stanza": 97
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 0) (unary 1 1 1 1 0);",
    "code": "21132211111111321321321321320332211111111321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 98
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 0) (unary 1 1 0);",
    "code": "210032211111111321321321321320332211111111321321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 99
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "< (unary 1 0) (unary 1 1 0);",
    "code": "21032211111111321320332211111111321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 100
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 0) (unary 1 1 0);",
    "code": "210032211111111321321321320332211111111321321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 101
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 0) (unary 0);",
    "code": "210032211111111321321321321320332211111111320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 102
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 0) (unary 1 0);",
    "code": "210032211111111321321321320332211111111321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 103
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 1 0);"
    ],
    "preprocessed": "< (unary 0) (unary 1 1 0);",
    "code": "21032211111111320332211111111321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 104
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 0);"
    ],
    "preprocessed": "> (unary 1 1 1 0) (unary 0);",
    "code": "210032211111111321321321320332211111111320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 105
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 0) (unary 1 0);"
    ],
    "preprocessed": "> (unary 1 1 0) (unary 1 0);",
    "code": "210032211111111321321320332211111111321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 106
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 1 0) (unary 1 1 1 1 0);",
    "code": "21032211111111321321321320332211111111321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 107
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 0) (unary 1 1 0);",
    "code": "210032211111111321321321320332211111111321321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 108
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 0) (unary 1 1 0);",
    "code": "210032211111111321321321321320332211111111321321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 109
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 0) (unary 1 1 0);",
    "code": "21132211111111321321320332211111111321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 110
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 1 0);"
    ],
    "preprocessed": "< (unary 0) (unary 1 1 0);",
    "code": "21032211111111320332211111111321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 111
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 0) (unary 0);",
    "code": "210032211111111321321321321320332211111111320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 112
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 0) (unary 1 1 1 1 0);",
    "code": "21032211111111321321320332211111111321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 113
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 0) (unary 1 1 1 1 0);",
    "code": "21032211111111321320332211111111321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 114
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 0) (unary 1 1 1 0);",
    "code": "210032211111111321321321321320332211111111321321321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 115
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 0) (unary 1 1 1 1 0);",
    "code": "21032211111111320332211111111321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 116
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 0) (unary 1 1 1 1 0);",
    "code": "21032211111111321321320332211111111321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 117
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 0) (unary 1 1 1 1 0);",
    "code": "21032211111111321321320332211111111321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 118
  },
  {
    "role": "file",
    "lines": [
      "== COS_NotLogic =="
    ],
    "stanza": 119
  },
  {
    "role": "doc",
    "lines": [
      "",
      "At this point, the listener can find numbers in our sentences, and has some",
      "idea of symbols related to equality and inequality.  But the structure of the",
      "sentences remains a mystery.  Let's introduce more math, so that we can show",
      "different sentence structures.  First, let's introduce logical negation.",
      "We construct some sentences the listener should know are wrong, and put \"not\"",
      "in front of them.",
      "",
      ""
    ],
    "section_description": "introduce logical negation",
    "section_category": "MATH",
    "section_index": 2,
    "stanza": 120
  },
  {
    "role": "code",
    "lines": [
      "intro not;"
    ],
    "preprocessed": "intro not;",
    "code": "2100103210132233",
    "parse": [
      "intro",
      "not"
    ],
    "spider": "&#xF123;&#xF113;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 121
  },
  {
    "role": "doc",
    "lines": [
      "Show an equality, then negate two conflicting inequalities."
    ],
    "stanza": 122
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) (unary  0);",
    "code": "21132211111111320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 123
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  0) (unary  0);"
    ],
    "preprocessed": "not | < (unary  0) (unary  0);",
    "code": "2101312321032211111111320332211111111320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF135;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 124
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  0) (unary  0);"
    ],
    "preprocessed": "not | > (unary  0) (unary  0);",
    "code": "21013123210032211111111320332211111111320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF137;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 125
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) (unary  1 1 1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 0) (unary  1 1 1 1 0);",
    "code": "21132211111111321321321321320332211111111321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 126
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 0) (unary  1 1 1 1 0);"
    ],
    "preprocessed": "not | < (unary  1 1 1 1 0) (unary  1 1 1 1 0);",
    "code": "2101312321032211111111321321321321320332211111111321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 127
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 1 1 0) (unary  1 1 1 1 0);"
    ],
    "preprocessed": "not | > (unary  1 1 1 1 0) (unary  1 1 1 1 0);",
    "code": "21013123210032211111111321321321321320332211111111321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 128
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);",
    "code": "21132211111111321321321321321321320332211111111321321321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 129
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | < (unary  1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);",
    "code": "2101312321032211111111321321321321321321320332211111111321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 130
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | > (unary  1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);",
    "code": "21013123210032211111111321321321321321321320332211111111321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 131
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 0) (unary  1 1 0);",
    "code": "21132211111111321321320332211111111321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 132
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "not | < (unary  1 1 0) (unary  1 1 0);",
    "code": "2101312321032211111111321321320332211111111321321320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 133
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "not | > (unary  1 1 0) (unary  1 1 0);",
    "code": "21013123210032211111111321321320332211111111321321320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 134
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) (unary  1 1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 0) (unary  1 1 1 0);",
    "code": "21132211111111321321321320332211111111321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 135
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 0) (unary  1 1 1 0);"
    ],
    "preprocessed": "not | < (unary  1 1 1 0) (unary  1 1 1 0);",
    "code": "2101312321032211111111321321321320332211111111321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 136
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 1 0) (unary  1 1 1 0);"
    ],
    "preprocessed": "not | > (unary  1 1 1 0) (unary  1 1 1 0);",
    "code": "21013123210032211111111321321321320332211111111321321321320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 137
  },
  {
    "role": "doc",
    "lines": [
      "Show an inequality, then two negations."
    ],
    "stanza": 138
  },
  {
    "role": "code",
    "lines": [
      "< (unary  1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary  1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 0);",
    "code": "21032211111111321321321320332211111111321321321321321321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 139
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | = (unary  1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 0);",
    "code": "2101312321132211111111321321321320332211111111321321321321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 140
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | > (unary  1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 0);",
    "code": "21013123210032211111111321321321320332211111111321321321321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 141
  },
  {
    "role": "code",
    "lines": [
      "< (unary  1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary  1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);",
    "code": "21032211111111321321321321321320332211111111321321321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 142
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | = (unary  1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);",
    "code": "2101312321132211111111321321321321321320332211111111321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 143
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | > (unary  1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);",
    "code": "21013123210032211111111321321321321321320332211111111321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 144
  },
  {
    "role": "code",
    "lines": [
      "< (unary  1 0) (unary  1 1 0);"
    ],
    "preprocessed": "< (unary  1 0) (unary  1 1 0);",
    "code": "21032211111111321320332211111111321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 145
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 0) (unary  1 1 0);"
    ],
    "preprocessed": "not | = (unary  1 0) (unary  1 1 0);",
    "code": "2101312321132211111111321320332211111111321321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 146
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 0) (unary  1 1 0);"
    ],
    "preprocessed": "not | > (unary  1 0) (unary  1 1 0);",
    "code": "21013123210032211111111321320332211111111321321320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 147
  },
  {
    "role": "code",
    "lines": [
      "< (unary  0) (unary  1 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary  0) (unary  1 1 1 1 1 0);",
    "code": "21032211111111320332211111111321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 148
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  0) (unary  1 1 1 1 1 0);"
    ],
    "preprocessed": "not | = (unary  0) (unary  1 1 1 1 1 0);",
    "code": "2101312321132211111111320332211111111321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 149
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  0) (unary  1 1 1 1 1 0);"
    ],
    "preprocessed": "not | > (unary  0) (unary  1 1 1 1 1 0);",
    "code": "21013123210032211111111320332211111111321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF137;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 150
  },
  {
    "role": "code",
    "lines": [
      "< (unary  1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary  1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "code": "21032211111111321321321321321321321321320332211111111321321321321321321321321321321321321321321320332233",
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 151
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | = (unary  1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "code": "2101312321132211111111321321321321321321321321320332211111111321321321321321321321321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 152
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | > (unary  1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "code": "21013123210032211111111321321321321321321321321320332211111111321321321321321321321321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 153
  },
  {
    "role": "doc",
    "lines": [
      "Show another batch of inequalities with negations."
    ],
    "stanza": 154
  },
  {
    "role": "code",
    "lines": [
      "> (unary  1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);"
    ],
    "preprocessed": "> (unary  1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);",
    "code": "210032211111111321321321321321321321321321321321320332211111111321321321321321321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 155
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | = (unary  1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);",
    "code": "2101312321132211111111321321321321321321321321321321321320332211111111321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 156
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | < (unary  1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);",
    "code": "2101312321032211111111321321321321321321321321321321321320332211111111321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 157
  },
  {
    "role": "code",
    "lines": [
      "> (unary  1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "> (unary  1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 0);",
    "code": "210032211111111321321321321321321321321321321321321320332211111111321321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 158
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "not | = (unary  1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 0);",
    "code": "2101312321132211111111321321321321321321321321321321321321320332211111111321321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 159
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "not | < (unary  1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 0);",
    "code": "2101312321032211111111321321321321321321321321321321321321320332211111111321321320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 160
  },
  {
    "role": "code",
    "lines": [
      "> (unary  1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "> (unary  1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);",
    "code": "210032211111111321321321321321321321321321321320332211111111321321321321321321321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 161
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | = (unary  1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);",
    "code": "2101312321132211111111321321321321321321321321321321320332211111111321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 162
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | < (unary  1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);",
    "code": "2101312321032211111111321321321321321321321321321321320332211111111321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 163
  },
  {
    "role": "code",
    "lines": [
      "> (unary  1 1 1 1 0) (unary  0);"
    ],
    "preprocessed": "> (unary  1 1 1 1 0) (unary  0);",
    "code": "210032211111111321321321321320332211111111320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 164
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 0) (unary  0);"
    ],
    "preprocessed": "not | = (unary  1 1 1 1 0) (unary  0);",
    "code": "2101312321132211111111321321321321320332211111111320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 165
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 0) (unary  0);"
    ],
    "preprocessed": "not | < (unary  1 1 1 1 0) (unary  0);",
    "code": "2101312321032211111111321321321321320332211111111320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 166
  },
  {
    "role": "code",
    "lines": [
      "> (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "> (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 0);",
    "code": "210032211111111321321321321321321321321321321321321321321321321320332211111111321321321321321321321321321320332233",
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 167
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | = (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 0);",
    "code": "2101312321132211111111321321321321321321321321321321321321321321321321320332211111111321321321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 168
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | < (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 0);",
    "code": "2101312321032211111111321321321321321321321321321321321321321321321321320332211111111321321321321321321321321321320332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 169
  },
  {
    "role": "file",
    "lines": [
      "== COS_Addition =="
    ],
    "stanza": 170
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Let's introduce some arithmetic, to show off still more sentence structure.",
      "We show sentences of the mathematical form `X = Y + Z`, which in our message look like",
      "`= X | + Y Z`.  From this, and the negation lesson, the listener will hopefully",
      "start picking up on how to chain operations.",
      "",
      "If the listener didn't already have a pretty clear idea of what `=` is,",
      "then these sentences could just as easily be interpreted as being about subtraction.",
      "Even having an idea of `=`, syntax is still fuzzy enough that this lesson may not",
      "be unambiguous by itself.",
      ""
    ],
    "section_description": "introduce addition",
    "section_category": "MATH",
    "section_index": 3,
    "stanza": 171
  },
  {
    "role": "code",
    "lines": [
      "intro +;"
    ],
    "preprocessed": "intro +;",
    "code": "21001032101032233",
    "parse": [
      "intro",
      "+"
    ],
    "spider": "&#xF123;&#xF113;&#xF13D;&#xF132;&#xF143;&#xF121;",
    "stanza": 172
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | + (unary  0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 0) | + (unary  0) (unary  1 1 0);",
    "code": "21132211111111321321320331232101032211111111320332211111111321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 173
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 1 0) | + (unary  1 1 1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 1 0) | + (unary  1 1 1 1 0) (unary  1 0);",
    "code": "21132211111111321321321321321320331232101032211111111321321321321320332211111111321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 174
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | + (unary  1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  1 1 0) | + (unary  1 1 0) (unary  0);",
    "code": "21132211111111321321320331232101032211111111321321320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 175
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | + (unary  0) (unary  1 1 1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 0) | + (unary  0) (unary  1 1 1 1 0);",
    "code": "21132211111111321321321321320331232101032211111111320332211111111321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 176
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | + (unary  1 1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 0) | + (unary  1 1 1 0) (unary  1 0);",
    "code": "21132211111111321321321321320331232101032211111111321321321320332211111111321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 177
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | + (unary  1 0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 0) | + (unary  1 0) (unary  1 1 0);",
    "code": "21132211111111321321321320331232101032211111111321320332211111111321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 178
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | + (unary  0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | + (unary  0) (unary  0);",
    "code": "21132211111111320331232101032211111111320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 179
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | + (unary  1 1 1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 0) | + (unary  1 1 1 1 0) (unary  0);",
    "code": "21132211111111321321321321320331232101032211111111321321321321320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 180
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | + (unary  1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 0) | + (unary  1 1 0) (unary  1 0);",
    "code": "21132211111111321321321320331232101032211111111321321320332211111111321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 181
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | + (unary  1 1 1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 0) | + (unary  1 1 1 1 0) (unary  0);",
    "code": "21132211111111321321321321320331232101032211111111321321321321320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 182
  },
  {
    "role": "file",
    "lines": [
      "== COS_Subtraction =="
    ],
    "stanza": 183
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Introduce subtraction via `= X | - Y Z` sentences.  Until syntax is fully understood,",
      "an ambiguity may remain between this and addition.",
      ""
    ],
    "section_description": "introduce subtraction",
    "section_category": "MATH",
    "section_index": 4,
    "stanza": 184
  },
  {
    "role": "code",
    "lines": [
      "intro -;"
    ],
    "preprocessed": "intro -;",
    "code": "21001032101132233",
    "parse": [
      "intro",
      "-"
    ],
    "spider": "&#xF123;&#xF113;&#xF13E;&#xF132;&#xF143;&#xF121;",
    "stanza": 185
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | - (unary  1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  0) | - (unary  1 1 0) (unary  1 1 0);",
    "code": "21132211111111320331232101132211111111321321320332211111111321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13E;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 186
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | - (unary  1 1 1 1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 0) | - (unary  1 1 1 1 1 0) (unary  1 0);",
    "code": "21132211111111321321321321320331232101132211111111321321321321321320332211111111321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13E;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 187
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | - (unary  1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  1 1 0) | - (unary  1 1 0) (unary  0);",
    "code": "21132211111111321321320331232101132211111111321321320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13E;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 188
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | - (unary  1 1 1 1 0) (unary  1 1 1 1 0);"
    ],
    "preprocessed": "= (unary  0) | - (unary  1 1 1 1 0) (unary  1 1 1 1 0);",
    "code": "21132211111111320331232101132211111111321321321321320332211111111321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13E;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 189
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | - (unary  1 1 1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 0) | - (unary  1 1 1 1 0) (unary  1 0);",
    "code": "21132211111111321321321320331232101132211111111321321321321320332211111111321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13E;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 190
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 0) | - (unary  1 1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  1 0) | - (unary  1 1 1 0) (unary  1 1 0);",
    "code": "21132211111111321320331232101132211111111321321321320332211111111321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13E;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 191
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | - (unary  0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | - (unary  0) (unary  0);",
    "code": "21132211111111320331232101132211111111320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13E;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 192
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | - (unary  1 1 1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 0) | - (unary  1 1 1 1 0) (unary  0);",
    "code": "21132211111111321321321321320331232101132211111111321321321321320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13E;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 193
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | - (unary  1 1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 0) | - (unary  1 1 1 0) (unary  1 0);",
    "code": "21132211111111321321320331232101132211111111321321321320332211111111321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13E;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 194
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | - (unary  1 1 1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 0) | - (unary  1 1 1 1 0) (unary  0);",
    "code": "21132211111111321321321321320331232101132211111111321321321321320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13E;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 195
  },
  {
    "role": "file",
    "lines": [
      "== COS_Multiplication =="
    ],
    "stanza": 196
  },
  {
    "role": "doc",
    "lines": [
      "",
      "While we're at it, let's introduce multiplication with `= X | * Y Z` sentences.",
      "As for addition and subtraction, there will be some ambiguity as to whether we are",
      "presenting multiplication or division here, until syntax is clearly understood.",
      ""
    ],
    "section_description": "introduce multiplication",
    "section_category": "MATH",
    "section_index": 5,
    "stanza": 197
  },
  {
    "role": "code",
    "lines": [
      "intro *;"
    ],
    "preprocessed": "intro *;",
    "code": "21001032100132233",
    "parse": [
      "intro",
      "*"
    ],
    "spider": "&#xF123;&#xF113;&#xF13C;&#xF132;&#xF143;&#xF121;",
    "stanza": 198
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  0) (unary  0);",
    "code": "21132211111111320331232100132211111111320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 199
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  0) (unary  1 0);",
    "code": "21132211111111320331232100132211111111320332211111111321320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 200
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  0) (unary  1 1 0);",
    "code": "21132211111111320331232100132211111111320332211111111321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 201
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  1 1 1 0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  0) (unary  1 1 1 0);",
    "code": "21132211111111320331232100132211111111320332211111111321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 202
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  1 0) (unary  0);",
    "code": "21132211111111320331232100132211111111321320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 203
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 0) | * (unary  1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 0) | * (unary  1 0) (unary  1 0);",
    "code": "21132211111111321320331232100132211111111321320332211111111321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 204
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | * (unary  1 0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 0) | * (unary  1 0) (unary  1 1 0);",
    "code": "21132211111111321321320331232100132211111111321320332211111111321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 205
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | * (unary  1 0) (unary  1 1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 0) | * (unary  1 0) (unary  1 1 1 0);",
    "code": "21132211111111321321321320331232100132211111111321320332211111111321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 206
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  1 1 0) (unary  0);",
    "code": "21132211111111320331232100132211111111321321320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 207
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | * (unary  1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 0) | * (unary  1 1 0) (unary  1 0);",
    "code": "21132211111111321321320331232100132211111111321321320332211111111321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 208
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | * (unary  1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 0) | * (unary  1 1 0) (unary  1 1 0);",
    "code": "21132211111111321321321321320331232100132211111111321321320332211111111321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 209
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 1 1 0) | * (unary  1 1 0) (unary  1 1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 1 1 0) | * (unary  1 1 0) (unary  1 1 1 0);",
    "code": "21132211111111321321321321321321320331232100132211111111321321320332211111111321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 210
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  1 1 1 0) (unary  0);",
    "code": "21132211111111320331232100132211111111321321321320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 211
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | * (unary  1 1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 0) | * (unary  1 1 1 0) (unary  1 0);",
    "code": "21132211111111321321321320331232100132211111111321321321320332211111111321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 212
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 1 1 0) | * (unary  1 1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 1 1 0) | * (unary  1 1 1 0) (unary  1 1 0);",
    "code": "21132211111111321321321321321321320331232100132211111111321321321320332211111111321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 213
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 1 1 1 1 1 0) | * (unary  1 1 1 0) (unary  1 1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 1 1 1 1 1 0) | * (unary  1 1 1 0) (unary  1 1 1 0);",
    "code": "21132211111111321321321321321321321321321320331232100132211111111321321321320332211111111321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 214
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  0) (unary  1 0);",
    "code": "21132211111111320331232100132211111111320332211111111321320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 215
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | * (unary  1 1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 0) | * (unary  1 1 1 0) (unary  1 0);",
    "code": "21132211111111321321321320331232100132211111111321321321320332211111111321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 216
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  1 1 0) (unary  0);",
    "code": "21132211111111320331232100132211111111321321320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 217
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  1 1 1 0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  0) (unary  1 1 1 0);",
    "code": "21132211111111320331232100132211111111320332211111111321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 218
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | * (unary  1 1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 0) | * (unary  1 1 1 0) (unary  1 0);",
    "code": "21132211111111321321321320331232100132211111111321321321320332211111111321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 219
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | * (unary  1 0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 0) | * (unary  1 0) (unary  1 1 0);",
    "code": "21132211111111321321320331232100132211111111321320332211111111321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 220
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  0) (unary  0);",
    "code": "21132211111111320331232100132211111111320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 221
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  1 1 1 0) (unary  0);",
    "code": "21132211111111320331232100132211111111321321321320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 222
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  1 1 0) (unary  0);",
    "code": "21132211111111320331232100132211111111321321320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 223
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  1 1 1 0) (unary  0);",
    "code": "21132211111111320331232100132211111111321321321320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 224
  },
  {
    "role": "file",
    "lines": [
      "== COS_Binary =="
    ],
    "stanza": 225
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Switch from unary numbers to another representation.  The best representation",
      "will depend on the details of how the message is being transmitted, and the",
      "rest of the message doesn't depend on that choice for correctness (though the",
      "choice will have implications for how easy the message will be to interpret).",
      "As a base-line, imagine we use a binary representation.",
      "",
      "It isn't important for the listener to understand, but it might be worth explaining",
      "at this point how the unary representation worked.  In fact there's no special",
      "syntax used, just three objects:",
      "",
      " * The number `0`.",
      " * The number `1`.",
      " * A function (called `unary` in English) that takes a value and:",
      "   - If passed `0`, the function returns `0`",
      "   - If passed `1`, the function returns another function, just like itself,",
      "     except with any ultimate return value increased by `1`.",
      "",
      "Using syntax defined later in the message, `unary` could be defined as:",
      "",
      "```",
      "@ unary-v | ? v | ? x | if (= $x 0) $v (unary-v | + $v 1)",
      "@ unary | unary-v 0",
      "```",
      "",
      "If you know Lisp/Scheme/etc, just read `@` as `define`, `?` as",
      "`lambda`, and `|` as opening a parenthesis that gets closed at the end",
      "of the statement.",
      "",
      "Anyway, all of this is a digression, but it is worth knowing that as much as possible",
      "the message is built from itself, so that in the end everything dovetails nicely.",
      "",
      ""
    ],
    "section_description": "introduce non-unary representation of numbers",
    "section_category": "MATH",
    "section_index": 6,
    "stanza": 226
  },
  {
    "role": "code",
    "lines": [
      "= 0 (unary 0);"
    ],
    "preprocessed": "= 0 (unary 0);",
    "code": "21132032211111111320332233",
    "parse": [
      "=",
      "0",
      [
        "unary",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 227
  },
  {
    "role": "code",
    "lines": [
      "= 1 (unary 1 0);"
    ],
    "preprocessed": "= 1 (unary 1 0);",
    "code": "21132132211111111321320332233",
    "parse": [
      "=",
      "1",
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 228
  },
  {
    "role": "code",
    "lines": [
      "= 2 (unary 1 1 0);"
    ],
    "preprocessed": "= 2 (unary 1 1 0);",
    "code": "211321032211111111321321320332233",
    "parse": [
      "=",
      "2",
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 229
  },
  {
    "role": "code",
    "lines": [
      "= 3 (unary 1 1 1 0);"
    ],
    "preprocessed": "= 3 (unary 1 1 1 0);",
    "code": "211321132211111111321321321320332233",
    "parse": [
      "=",
      "3",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 230
  },
  {
    "role": "code",
    "lines": [
      "= 4 (unary 1 1 1 1 0);"
    ],
    "preprocessed": "= 4 (unary 1 1 1 1 0);",
    "code": "2113210032211111111321321321321320332233",
    "parse": [
      "=",
      "4",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 231
  },
  {
    "role": "code",
    "lines": [
      "= 5 (unary 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 5 (unary 1 1 1 1 1 0);",
    "code": "2113210132211111111321321321321321320332233",
    "parse": [
      "=",
      "5",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF138;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 232
  },
  {
    "role": "code",
    "lines": [
      "= 6 (unary 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 6 (unary 1 1 1 1 1 1 0);",
    "code": "2113211032211111111321321321321321321320332233",
    "parse": [
      "=",
      "6",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF139;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 233
  },
  {
    "role": "code",
    "lines": [
      "= 7 (unary 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 7 (unary 1 1 1 1 1 1 1 0);",
    "code": "2113211132211111111321321321321321321321320332233",
    "parse": [
      "=",
      "7",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF13A;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 234
  },
  {
    "role": "code",
    "lines": [
      "= 8 (unary 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 8 (unary 1 1 1 1 1 1 1 1 0);",
    "code": "21132100032211111111321321321321321321321321320332233",
    "parse": [
      "=",
      "8",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF13B;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 235
  },
  {
    "role": "code",
    "lines": [
      "= 9 (unary 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 9 (unary 1 1 1 1 1 1 1 1 1 0);",
    "code": "21132100132211111111321321321321321321321321321320332233",
    "parse": [
      "=",
      "9",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 236
  },
  {
    "role": "code",
    "lines": [
      "= 10 (unary 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 10 (unary 1 1 1 1 1 1 1 1 1 1 0);",
    "code": "21132101032211111111321321321321321321321321321321320332233",
    "parse": [
      "=",
      "10",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 237
  },
  {
    "role": "code",
    "lines": [
      "= 11 (unary 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 11 (unary 1 1 1 1 1 1 1 1 1 1 1 0);",
    "code": "21132101132211111111321321321321321321321321321321321320332233",
    "parse": [
      "=",
      "11",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF13E;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 238
  },
  {
    "role": "code",
    "lines": [
      "= 12 (unary 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 12 (unary 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "code": "21132110032211111111321321321321321321321321321321321321320332233",
    "parse": [
      "=",
      "12",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF13F;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 239
  },
  {
    "role": "code",
    "lines": [
      "= 13 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 13 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "code": "21132110132211111111321321321321321321321321321321321321321320332233",
    "parse": [
      "=",
      "13",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF140;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 240
  },
  {
    "role": "code",
    "lines": [
      "= 14 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 14 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "code": "21132111032211111111321321321321321321321321321321321321321321320332233",
    "parse": [
      "=",
      "14",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF141;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 241
  },
  {
    "role": "code",
    "lines": [
      "= 15 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 15 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "code": "21132111132211111111321321321321321321321321321321321321321321321320332233",
    "parse": [
      "=",
      "15",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF142;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 242
  },
  {
    "role": "code",
    "lines": [
      "= 1 (unary 1 0);"
    ],
    "preprocessed": "= 1 (unary 1 0);",
    "code": "21132132211111111321320332233",
    "parse": [
      "=",
      "1",
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 243
  },
  {
    "role": "code",
    "lines": [
      "= 2 (unary 1 1 0);"
    ],
    "preprocessed": "= 2 (unary 1 1 0);",
    "code": "211321032211111111321321320332233",
    "parse": [
      "=",
      "2",
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 244
  },
  {
    "role": "code",
    "lines": [
      "= 4 (unary 1 1 1 1 0);"
    ],
    "preprocessed": "= 4 (unary 1 1 1 1 0);",
    "code": "2113210032211111111321321321321320332233",
    "parse": [
      "=",
      "4",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 245
  },
  {
    "role": "code",
    "lines": [
      "= 8 (unary 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 8 (unary 1 1 1 1 1 1 1 1 0);",
    "code": "21132100032211111111321321321321321321321321320332233",
    "parse": [
      "=",
      "8",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF13B;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 246
  },
  {
    "role": "code",
    "lines": [
      "= 16 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 16 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "code": "211321000032211111111321321321321321321321321321321321321321321321321320332233",
    "parse": [
      "=",
      "16",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF111;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 247
  },
  {
    "role": "code",
    "lines": [
      "= 5 (unary 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 5 (unary 1 1 1 1 1 0);",
    "code": "2113210132211111111321321321321321320332233",
    "parse": [
      "=",
      "5",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF138;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 248
  },
  {
    "role": "code",
    "lines": [
      "= 14 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 14 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "code": "21132111032211111111321321321321321321321321321321321321321321320332233",
    "parse": [
      "=",
      "14",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF141;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 249
  },
  {
    "role": "code",
    "lines": [
      "= 2 (unary 1 1 0);"
    ],
    "preprocessed": "= 2 (unary 1 1 0);",
    "code": "211321032211111111321321320332233",
    "parse": [
      "=",
      "2",
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 250
  },
  {
    "role": "code",
    "lines": [
      "= 3 (unary 1 1 1 0);"
    ],
    "preprocessed": "= 3 (unary 1 1 1 0);",
    "code": "211321132211111111321321321320332233",
    "parse": [
      "=",
      "3",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 251
  },
  {
    "role": "code",
    "lines": [
      "= 0 (unary 0);"
    ],
    "preprocessed": "= 0 (unary 0);",
    "code": "21132032211111111320332233",
    "parse": [
      "=",
      "0",
      [
        "unary",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 252
  },
  {
    "role": "code",
    "lines": [
      "= 13 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 13 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "code": "21132110132211111111321321321321321321321321321321321321321320332233",
    "parse": [
      "=",
      "13",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF140;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 253
  },
  {
    "role": "code",
    "lines": [
      "= 11 (unary 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 11 (unary 1 1 1 1 1 1 1 1 1 1 1 0);",
    "code": "21132101132211111111321321321321321321321321321321321320332233",
    "parse": [
      "=",
      "11",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF13E;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 254
  },
  {
    "role": "code",
    "lines": [
      "= 1 (unary 1 0);"
    ],
    "preprocessed": "= 1 (unary 1 0);",
    "code": "21132132211111111321320332233",
    "parse": [
      "=",
      "1",
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 255
  },
  {
    "role": "code",
    "lines": [
      "= 9 (unary 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 9 (unary 1 1 1 1 1 1 1 1 1 0);",
    "code": "21132100132211111111321321321321321321321321321320332233",
    "parse": [
      "=",
      "9",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 256
  },
  {
    "role": "code",
    "lines": [
      "= 15 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 15 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "code": "21132111132211111111321321321321321321321321321321321321321321321320332233",
    "parse": [
      "=",
      "15",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF142;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 257
  },
  {
    "role": "code",
    "lines": [
      "= 8 (unary 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 8 (unary 1 1 1 1 1 1 1 1 0);",
    "code": "21132100032211111111321321321321321321321321320332233",
    "parse": [
      "=",
      "8",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF13B;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 258
  },
  {
    "role": "code",
    "lines": [
      "= 7 (unary 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 7 (unary 1 1 1 1 1 1 1 0);",
    "code": "2113211132211111111321321321321321321321320332233",
    "parse": [
      "=",
      "7",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF13A;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 259
  },
  {
    "role": "code",
    "lines": [
      "= 6 (unary 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 6 (unary 1 1 1 1 1 1 0);",
    "code": "2113211032211111111321321321321321321320332233",
    "parse": [
      "=",
      "6",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF139;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 260
  },
  {
    "role": "code",
    "lines": [
      "= 4 (unary 1 1 1 1 0);"
    ],
    "preprocessed": "= 4 (unary 1 1 1 1 0);",
    "code": "2113210032211111111321321321321320332233",
    "parse": [
      "=",
      "4",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF137;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 261
  },
  {
    "role": "code",
    "lines": [
      "= 12 (unary 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 12 (unary 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "code": "21132110032211111111321321321321321321321321321321321321320332233",
    "parse": [
      "=",
      "12",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF13F;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 262
  },
  {
    "role": "code",
    "lines": [
      "= 10 (unary 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 10 (unary 1 1 1 1 1 1 1 1 1 1 0);",
    "code": "21132101032211111111321321321321321321321321321321320332233",
    "parse": [
      "=",
      "10",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 263
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 1 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 1 1 0) (unary 1 1 1 0);",
    "code": "21132211111111321321321321321321321321321320331232101032211111111321321321321321321320332211111111321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 264
  },
  {
    "role": "code",
    "lines": [
      "= 9 | + 6 3;"
    ],
    "preprocessed": "= 9 | + 6 3;",
    "code": "21132100131232101032110321132233",
    "parse": [
      "=",
      "9",
      [
        -1,
        "+",
        "6",
        "3"
      ]
    ],
    "spider": "&#xF136;&#xF13C;&#xF101;&#xF143;&#xF13D;&#xF139;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 265
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 0) | + (unary 0) (unary 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 0) | + (unary 0) (unary 1 1 1 1 1 1 0);",
    "code": "21132211111111321321321321321321320331232101032211111111320332211111111321321321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 266
  },
  {
    "role": "code",
    "lines": [
      "= 6 | + 0 6;"
    ],
    "preprocessed": "= 6 | + 0 6;",
    "code": "211321103123210103203211032233",
    "parse": [
      "=",
      "6",
      [
        -1,
        "+",
        "0",
        "6"
      ]
    ],
    "spider": "&#xF136;&#xF139;&#xF101;&#xF143;&#xF13D;&#xF133;&#xF139;&#xF132;&#xF143;&#xF121;",
    "stanza": 267
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 0);",
    "code": "21132211111111321321321321321321321321321321320331232101032211111111321321321321321321320332211111111321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 268
  },
  {
    "role": "code",
    "lines": [
      "= 10 | + 6 4;"
    ],
    "preprocessed": "= 10 | + 6 4;",
    "code": "211321010312321010321103210032233",
    "parse": [
      "=",
      "10",
      [
        -1,
        "+",
        "6",
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF13D;&#xF101;&#xF143;&#xF13D;&#xF139;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 269
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 0) | + (unary 1 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 0) | + (unary 1 1 1 0) (unary 1 1 0);",
    "code": "21132211111111321321321321321320331232101032211111111321321321320332211111111321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 270
  },
  {
    "role": "code",
    "lines": [
      "= 5 | + 3 2;"
    ],
    "preprocessed": "= 5 | + 3 2;",
    "code": "211321013123210103211321032233",
    "parse": [
      "=",
      "5",
      [
        -1,
        "+",
        "3",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF138;&#xF101;&#xF143;&#xF13D;&#xF136;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 271
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 0) | + (unary 1 0) (unary 0);"
    ],
    "preprocessed": "= (unary 1 0) | + (unary 1 0) (unary 0);",
    "code": "21132211111111321320331232101032211111111321320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 272
  },
  {
    "role": "code",
    "lines": [
      "= 1 | + 1 0;"
    ],
    "preprocessed": "= 1 | + 1 0;",
    "code": "21132131232101032132032233",
    "parse": [
      "=",
      "1",
      [
        -1,
        "+",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF13D;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 273
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 0) | + (unary 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 0) | + (unary 1 1 0) (unary 1 1 1 1 0);",
    "code": "21132211111111321321321321321321320331232101032211111111321321320332211111111321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 274
  },
  {
    "role": "code",
    "lines": [
      "= 6 | + 2 4;"
    ],
    "preprocessed": "= 6 | + 2 4;",
    "code": "2113211031232101032103210032233",
    "parse": [
      "=",
      "6",
      [
        -1,
        "+",
        "2",
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF139;&#xF101;&#xF143;&#xF13D;&#xF135;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 275
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);",
    "code": "21132211111111321321321321321321321321321321321321320331232101032211111111321321321321321321320332211111111321321321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 276
  },
  {
    "role": "code",
    "lines": [
      "= 12 | + 6 6;"
    ],
    "preprocessed": "= 12 | + 6 6;",
    "code": "211321100312321010321103211032233",
    "parse": [
      "=",
      "12",
      [
        -1,
        "+",
        "6",
        "6"
      ]
    ],
    "spider": "&#xF136;&#xF13F;&#xF101;&#xF143;&#xF13D;&#xF139;&#xF139;&#xF132;&#xF143;&#xF121;",
    "stanza": 277
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 0) (unary 1 1 1 1 0);",
    "code": "21132211111111321321321321321321321321320331232101032211111111321321321321320332211111111321321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 278
  },
  {
    "role": "code",
    "lines": [
      "= 8 | + 4 4;"
    ],
    "preprocessed": "= 8 | + 4 4;",
    "code": "211321000312321010321003210032233",
    "parse": [
      "=",
      "8",
      [
        -1,
        "+",
        "4",
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF13B;&#xF101;&#xF143;&#xF13D;&#xF137;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 279
  },
  {
    "role": "code",
    "lines": [
      "= (unary 0) | * (unary 0) (unary 1 1 0);"
    ],
    "preprocessed": "= (unary 0) | * (unary 0) (unary 1 1 0);",
    "code": "21132211111111320331232100132211111111320332211111111321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 280
  },
  {
    "role": "code",
    "lines": [
      "= 0 | * 0 2;"
    ],
    "preprocessed": "= 0 | * 0 2;",
    "code": "211320312321001320321032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "*",
        "0",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF13C;&#xF133;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 281
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 0) | * (unary 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 0) | * (unary 1 0) (unary 1 1 0);",
    "code": "21132211111111321321320331232100132211111111321320332211111111321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 282
  },
  {
    "role": "code",
    "lines": [
      "= 2 | * 1 2;"
    ],
    "preprocessed": "= 2 | * 1 2;",
    "code": "2113210312321001321321032233",
    "parse": [
      "=",
      "2",
      [
        -1,
        "*",
        "1",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF101;&#xF143;&#xF13C;&#xF134;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 283
  },
  {
    "role": "code",
    "lines": [
      "= (unary 0) | * (unary 0) (unary 1 0);"
    ],
    "preprocessed": "= (unary 0) | * (unary 0) (unary 1 0);",
    "code": "21132211111111320331232100132211111111320332211111111321320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 284
  },
  {
    "role": "code",
    "lines": [
      "= 0 | * 0 1;"
    ],
    "preprocessed": "= 0 | * 0 1;",
    "code": "21132031232100132032132233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "*",
        "0",
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF13C;&#xF133;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 285
  },
  {
    "role": "code",
    "lines": [
      "= (unary 0) | * (unary 1 1 1 0) (unary 0);"
    ],
    "preprocessed": "= (unary 0) | * (unary 1 1 1 0) (unary 0);",
    "code": "21132211111111320331232100132211111111321321321320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 286
  },
  {
    "role": "code",
    "lines": [
      "= 0 | * 3 0;"
    ],
    "preprocessed": "= 0 | * 3 0;",
    "code": "211320312321001321132032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "*",
        "3",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF13C;&#xF136;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 287
  },
  {
    "role": "code",
    "lines": [
      "= (unary 0) | * (unary 0) (unary 0);"
    ],
    "preprocessed": "= (unary 0) | * (unary 0) (unary 0);",
    "code": "21132211111111320331232100132211111111320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 288
  },
  {
    "role": "code",
    "lines": [
      "= 0 | * 0 0;"
    ],
    "preprocessed": "= 0 | * 0 0;",
    "code": "21132031232100132032032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "*",
        "0",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF13C;&#xF133;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 289
  },
  {
    "role": "code",
    "lines": [
      "= (unary 0) | * (unary 1 0) (unary 0);"
    ],
    "preprocessed": "= (unary 0) | * (unary 1 0) (unary 0);",
    "code": "21132211111111320331232100132211111111321320332211111111320332233",
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 290
  },
  {
    "role": "code",
    "lines": [
      "= 0 | * 1 0;"
    ],
    "preprocessed": "= 0 | * 1 0;",
    "code": "21132031232100132132032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "*",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF13C;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 291
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 0) | * (unary 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 0) | * (unary 1 1 0) (unary 1 1 0);",
    "code": "21132211111111321321321321320331232100132211111111321321320332211111111321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 292
  },
  {
    "role": "code",
    "lines": [
      "= 4 | * 2 2;"
    ],
    "preprocessed": "= 4 | * 2 2;",
    "code": "211321003123210013210321032233",
    "parse": [
      "=",
      "4",
      [
        -1,
        "*",
        "2",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF137;&#xF101;&#xF143;&#xF13C;&#xF135;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 293
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 1 1 0) | * (unary 1 1 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 1 1 1 0) | * (unary 1 1 1 0) (unary 1 1 1 0);",
    "code": "21132211111111321321321321321321321321321320331232100132211111111321321321320332211111111321321321320332233",
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF131;&#xF120;&#xF134;&#xF134;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 294
  },
  {
    "role": "code",
    "lines": [
      "= 9 | * 3 3;"
    ],
    "preprocessed": "= 9 | * 3 3;",
    "code": "2113210013123210013211321132233",
    "parse": [
      "=",
      "9",
      [
        -1,
        "*",
        "3",
        "3"
      ]
    ],
    "spider": "&#xF136;&#xF13C;&#xF101;&#xF143;&#xF13C;&#xF136;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 295
  },
  {
    "role": "file",
    "lines": [
      "== COS_Evaluation =="
    ],
    "stanza": 296
  },
  {
    "role": "doc",
    "lines": [
      "",
      "We've advanced enough that we're starting to have choices about how",
      "something is expressed.  Let's pause to acknowledge that, and",
      "reinforce some syntactic equivalences so the listener can be confident",
      "of them.",
      "",
      "Parentheses play a role in grouping expressions, just like in regular",
      "math.  To reduce the mental burden of tracking nesting, we use a `|` shortcut",
      "that means \"add parentheses between this point and as far as you can go.\"  So for",
      "example `(= 7 | + 3 4)` is equivalent to `(= 7 (+ 3 4))`.",
      ""
    ],
    "section_description": "show alternative groupings",
    "section_category": "MATH",
    "section_index": 7,
    "stanza": 297
  },
  {
    "role": "code",
    "lines": [
      "= 6 6;"
    ],
    "preprocessed": "= 6 6;",
    "code": "211321103211032233",
    "parse": [
      "=",
      "6",
      "6"
    ],
    "spider": "&#xF136;&#xF139;&#xF139;&#xF132;&#xF143;&#xF121;",
    "stanza": 298
  },
  {
    "role": "code",
    "lines": [
      "= 6 (+ 1 5);"
    ],
    "preprocessed": "= 6 (+ 1 5);",
    "code": "21132110322101032132101332233",
    "parse": [
      "=",
      "6",
      [
        "+",
        "1",
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF139;&#xF132;&#xF13D;&#xF134;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 299
  },
  {
    "role": "code",
    "lines": [
      "= 6 | + 1 5;"
    ],
    "preprocessed": "= 6 | + 1 5;",
    "code": "211321103123210103213210132233",
    "parse": [
      "=",
      "6",
      [
        -1,
        "+",
        "1",
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF139;&#xF101;&#xF143;&#xF13D;&#xF134;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 300
  },
  {
    "role": "code",
    "lines": [
      "= 6 | + 1 (+ 4 1);"
    ],
    "preprocessed": "= 6 | + 1 (+ 4 1);",
    "code": "21132110312321010321322101032100321332233",
    "parse": [
      "=",
      "6",
      [
        -1,
        "+",
        "1",
        [
          "+",
          "4",
          "1"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF139;&#xF101;&#xF143;&#xF13D;&#xF134;&#xF132;&#xF13D;&#xF137;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 301
  },
  {
    "role": "code",
    "lines": [
      "= 6 | + 1 | + 4 1;"
    ],
    "preprocessed": "= 6 | + 1 | + 4 1;",
    "code": "211321103123210103213123210103210032132233",
    "parse": [
      "=",
      "6",
      [
        -1,
        "+",
        "1",
        [
          -1,
          "+",
          "4",
          "1"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF139;&#xF101;&#xF143;&#xF13D;&#xF134;&#xF101;&#xF143;&#xF13D;&#xF137;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 302
  },
  {
    "role": "code",
    "lines": [
      "= 6 (+ 1 5);"
    ],
    "preprocessed": "= 6 (+ 1 5);",
    "code": "21132110322101032132101332233",
    "parse": [
      "=",
      "6",
      [
        "+",
        "1",
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF139;&#xF132;&#xF13D;&#xF134;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 303
  },
  {
    "role": "code",
    "lines": [
      "= (+ 3 3) (+ 1 5);"
    ],
    "preprocessed": "= (+ 3 3) (+ 1 5);",
    "code": "2113221010321132113322101032132101332233",
    "parse": [
      "=",
      [
        "+",
        "3",
        "3"
      ],
      [
        "+",
        "1",
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF13D;&#xF136;&#xF136;&#xF121;&#xF132;&#xF13D;&#xF134;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 304
  },
  {
    "role": "code",
    "lines": [
      "= (+ 3 (- 5 2)) (+ 1 5);"
    ],
    "preprocessed": "= (+ 3 (- 5 2)) (+ 1 5);",
    "code": "21132210103211322101132101321033322101032132101332233",
    "parse": [
      "=",
      [
        "+",
        "3",
        [
          "-",
          "5",
          "2"
        ]
      ],
      [
        "+",
        "1",
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF13D;&#xF136;&#xF132;&#xF13E;&#xF138;&#xF135;&#xF121;&#xF121;&#xF132;&#xF13D;&#xF134;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 305
  },
  {
    "role": "code",
    "lines": [
      "= (+ 3 | - 5 2) (+ 1 5);"
    ],
    "preprocessed": "= (+ 3 | - 5 2) (+ 1 5);",
    "code": "211322101032113123210113210132103322101032132101332233",
    "parse": [
      "=",
      [
        "+",
        "3",
        [
          -1,
          "-",
          "5",
          "2"
        ]
      ],
      [
        "+",
        "1",
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF13D;&#xF136;&#xF101;&#xF143;&#xF13E;&#xF138;&#xF135;&#xF121;&#xF132;&#xF13D;&#xF134;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 306
  },
  {
    "role": "code",
    "lines": [
      "= (+ 3 | - 5 2) | + 1 5;"
    ],
    "preprocessed": "= (+ 3 | - 5 2) | + 1 5;",
    "code": "2113221010321131232101132101321033123210103213210132233",
    "parse": [
      "=",
      [
        "+",
        "3",
        [
          -1,
          "-",
          "5",
          "2"
        ]
      ],
      [
        -1,
        "+",
        "1",
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF13D;&#xF136;&#xF101;&#xF143;&#xF13E;&#xF138;&#xF135;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF134;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 307
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "show local assignment",
    "section_category": "MATH",
    "section_index": 8,
    "stanza": 308
  },
  {
    "role": "doc",
    "lines": [
      "An expression starting with `assign` is a way to name values for use within that expression. To use the assigned value, simply place its name at the beginning of an expression.  For example, a value assigned to `x` can be used by writing `(x)`. The name is entirely arbitrary, and can be just an integer."
    ],
    "stanza": 309
  },
  {
    "role": "code",
    "lines": [
      "assign x 1 | = (x) 1;"
    ],
    "preprocessed": "assign x 1 | = (x) 1;",
    "code": "21110321001113213123211322100111332132233",
    "parse": [
      "assign",
      "x",
      "1",
      [
        -1,
        "=",
        [
          "x"
        ],
        "1"
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF134;&#xF101;&#xF143;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 310
  },
  {
    "role": "code",
    "lines": [
      "assign x 2 | = (x) 2;"
    ],
    "preprocessed": "assign x 2 | = (x) 2;",
    "code": "2111032100111321031232113221001113321032233",
    "parse": [
      "assign",
      "x",
      "2",
      [
        -1,
        "=",
        [
          "x"
        ],
        "2"
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF135;&#xF101;&#xF143;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 311
  },
  {
    "role": "code",
    "lines": [
      "assign x 3 | = (x) 3;"
    ],
    "preprocessed": "assign x 3 | = (x) 3;",
    "code": "2111032100111321131232113221001113321132233",
    "parse": [
      "assign",
      "x",
      "3",
      [
        -1,
        "=",
        [
          "x"
        ],
        "3"
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF136;&#xF101;&#xF143;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 312
  },
  {
    "role": "code",
    "lines": [
      "assign y 1 | = (y) 1;"
    ],
    "preprocessed": "assign y 1 | = (y) 1;",
    "code": "21110321100113213123211322110011332132233",
    "parse": [
      "assign",
      "y",
      "1",
      [
        -1,
        "=",
        [
          "y"
        ],
        "1"
      ]
    ],
    "spider": "&#xF141;&#xF125;&#xF114;&#xF134;&#xF101;&#xF143;&#xF136;&#xF132;&#xF125;&#xF114;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 313
  },
  {
    "role": "code",
    "lines": [
      "assign y 2 | = (y) 2;"
    ],
    "preprocessed": "assign y 2 | = (y) 2;",
    "code": "2111032110011321031232113221100113321032233",
    "parse": [
      "assign",
      "y",
      "2",
      [
        -1,
        "=",
        [
          "y"
        ],
        "2"
      ]
    ],
    "spider": "&#xF141;&#xF125;&#xF114;&#xF135;&#xF101;&#xF143;&#xF136;&#xF132;&#xF125;&#xF114;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 314
  },
  {
    "role": "code",
    "lines": [
      "assign y 3 | = (y) 3;"
    ],
    "preprocessed": "assign y 3 | = (y) 3;",
    "code": "2111032110011321131232113221100113321132233",
    "parse": [
      "assign",
      "y",
      "3",
      [
        -1,
        "=",
        [
          "y"
        ],
        "3"
      ]
    ],
    "spider": "&#xF141;&#xF125;&#xF114;&#xF136;&#xF101;&#xF143;&#xF136;&#xF132;&#xF125;&#xF114;&#xF121;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 315
  },
  {
    "role": "code",
    "lines": [
      "assign x 3 | = 9 (* (x) (x));"
    ],
    "preprocessed": "assign x 3 | = 9 (* (x) (x));",
    "code": "211103210011132113123211321001322100132210011133221001113332233",
    "parse": [
      "assign",
      "x",
      "3",
      [
        -1,
        "=",
        "9",
        [
          "*",
          [
            "x"
          ],
          [
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF136;&#xF101;&#xF143;&#xF136;&#xF13C;&#xF132;&#xF13C;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 316
  },
  {
    "role": "code",
    "lines": [
      "assign x 4 | = 16 (* (x) (x));"
    ],
    "preprocessed": "assign x 4 | = 16 (* (x) (x));",
    "code": "21110321001113210031232113210000322100132210011133221001113332233",
    "parse": [
      "assign",
      "x",
      "4",
      [
        -1,
        "=",
        "16",
        [
          "*",
          [
            "x"
          ],
          [
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF137;&#xF101;&#xF143;&#xF136;&#xF123;&#xF111;&#xF132;&#xF13C;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 317
  },
  {
    "role": "code",
    "lines": [
      "assign z 3 | = 9 (* (z) (z));"
    ],
    "preprocessed": "assign z 3 | = 9 (* (z) (z));",
    "code": "211103211010032113123211321001322100132211010033221101003332233",
    "parse": [
      "assign",
      "z",
      "3",
      [
        -1,
        "=",
        "9",
        [
          "*",
          [
            "z"
          ],
          [
            "z"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF125;&#xF115;&#xF136;&#xF101;&#xF143;&#xF136;&#xF13C;&#xF132;&#xF13C;&#xF132;&#xF125;&#xF115;&#xF121;&#xF132;&#xF125;&#xF115;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 318
  },
  {
    "role": "code",
    "lines": [
      "assign z 4 | = 16 (* (z) (z));"
    ],
    "preprocessed": "assign z 4 | = 16 (* (z) (z));",
    "code": "21110321101003210031232113210000322100132211010033221101003332233",
    "parse": [
      "assign",
      "z",
      "4",
      [
        -1,
        "=",
        "16",
        [
          "*",
          [
            "z"
          ],
          [
            "z"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF125;&#xF115;&#xF137;&#xF101;&#xF143;&#xF136;&#xF123;&#xF111;&#xF132;&#xF13C;&#xF132;&#xF125;&#xF115;&#xF121;&#xF132;&#xF125;&#xF115;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 319
  },
  {
    "role": "code",
    "lines": [
      "assign x (+) | = 7 (x 4 3);"
    ],
    "preprocessed": "assign x (+) | = 7 (x 4 3);",
    "code": "211103210011132210103312321132111322100111321003211332233",
    "parse": [
      "assign",
      "x",
      [
        "+"
      ],
      [
        -1,
        "=",
        "7",
        [
          "x",
          "4",
          "3"
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF13D;&#xF121;&#xF101;&#xF143;&#xF136;&#xF13A;&#xF132;&#xF124;&#xF118;&#xF137;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 320
  },
  {
    "role": "code",
    "lines": [
      "assign y (+) | = 12 (y 6 6);"
    ],
    "preprocessed": "assign y (+) | = 12 (y 6 6);",
    "code": "21110321100113221010331232113211003221100113211032110332233",
    "parse": [
      "assign",
      "y",
      [
        "+"
      ],
      [
        -1,
        "=",
        "12",
        [
          "y",
          "6",
          "6"
        ]
      ]
    ],
    "spider": "&#xF141;&#xF125;&#xF114;&#xF132;&#xF13D;&#xF121;&#xF101;&#xF143;&#xF136;&#xF13F;&#xF132;&#xF125;&#xF114;&#xF139;&#xF139;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 321
  },
  {
    "role": "code",
    "lines": [
      "assign z (+) | = 9 (z 7 2);"
    ],
    "preprocessed": "assign z (+) | = 9 (z 7 2);",
    "code": "2111032110100322101033123211321001322110100321113210332233",
    "parse": [
      "assign",
      "z",
      [
        "+"
      ],
      [
        -1,
        "=",
        "9",
        [
          "z",
          "7",
          "2"
        ]
      ]
    ],
    "spider": "&#xF141;&#xF125;&#xF115;&#xF132;&#xF13D;&#xF121;&#xF101;&#xF143;&#xF136;&#xF13C;&#xF132;&#xF125;&#xF115;&#xF13A;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 322
  },
  {
    "role": "code",
    "lines": [
      "assign a (-) | = 1 (a 4 3);"
    ],
    "preprocessed": "assign a (-) | = 1 (a 4 3);",
    "code": "2111032110101322101133123211321322110101321003211332233",
    "parse": [
      "assign",
      "a",
      [
        "-"
      ],
      [
        -1,
        "=",
        "1",
        [
          "a",
          "4",
          "3"
        ]
      ]
    ],
    "spider": "&#xF141;&#xF125;&#xF116;&#xF132;&#xF13E;&#xF121;&#xF101;&#xF143;&#xF136;&#xF134;&#xF132;&#xF125;&#xF116;&#xF137;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 323
  },
  {
    "role": "code",
    "lines": [
      "assign b (-) | = 0 (b 6 6);"
    ],
    "preprocessed": "assign b (-) | = 0 (b 6 6);",
    "code": "21110321101103221011331232113203221101103211032110332233",
    "parse": [
      "assign",
      "b",
      [
        "-"
      ],
      [
        -1,
        "=",
        "0",
        [
          "b",
          "6",
          "6"
        ]
      ]
    ],
    "spider": "&#xF141;&#xF125;&#xF117;&#xF132;&#xF13E;&#xF121;&#xF101;&#xF143;&#xF136;&#xF133;&#xF132;&#xF125;&#xF117;&#xF139;&#xF139;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 324
  },
  {
    "role": "code",
    "lines": [
      "assign c (-) | = 5 (c 7 2);"
    ],
    "preprocessed": "assign c (-) | = 5 (c 7 2);",
    "code": "211103211011132210113312321132101322110111321113210332233",
    "parse": [
      "assign",
      "c",
      [
        "-"
      ],
      [
        -1,
        "=",
        "5",
        [
          "c",
          "7",
          "2"
        ]
      ]
    ],
    "spider": "&#xF141;&#xF125;&#xF118;&#xF132;&#xF13E;&#xF121;&#xF101;&#xF143;&#xF136;&#xF138;&#xF132;&#xF125;&#xF118;&#xF13A;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 325
  },
  {
    "role": "code",
    "lines": [
      "assign z (*) | = 12 (z 4 3);"
    ],
    "preprocessed": "assign z (*) | = 12 (z 4 3);",
    "code": "2111032110100322100133123211321100322110100321003211332233",
    "parse": [
      "assign",
      "z",
      [
        "*"
      ],
      [
        -1,
        "=",
        "12",
        [
          "z",
          "4",
          "3"
        ]
      ]
    ],
    "spider": "&#xF141;&#xF125;&#xF115;&#xF132;&#xF13C;&#xF121;&#xF101;&#xF143;&#xF136;&#xF13F;&#xF132;&#xF125;&#xF115;&#xF137;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 326
  },
  {
    "role": "code",
    "lines": [
      "assign y (*) | = 36 (y 6 6);"
    ],
    "preprocessed": "assign y (*) | = 36 (y 6 6);",
    "code": "2111032110011322100133123211321001003221100113211032110332233",
    "parse": [
      "assign",
      "y",
      [
        "*"
      ],
      [
        -1,
        "=",
        "36",
        [
          "y",
          "6",
          "6"
        ]
      ]
    ],
    "spider": "&#xF141;&#xF125;&#xF114;&#xF132;&#xF13C;&#xF121;&#xF101;&#xF143;&#xF136;&#xF124;&#xF115;&#xF132;&#xF125;&#xF114;&#xF139;&#xF139;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 327
  },
  {
    "role": "code",
    "lines": [
      "assign x (*) | = 14 (x 7 2);"
    ],
    "preprocessed": "assign x (*) | = 14 (x 7 2);",
    "code": "2111032100111322100133123211321110322100111321113210332233",
    "parse": [
      "assign",
      "x",
      [
        "*"
      ],
      [
        -1,
        "=",
        "14",
        [
          "x",
          "7",
          "2"
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF13C;&#xF121;&#xF101;&#xF143;&#xF136;&#xF141;&#xF132;&#xF124;&#xF118;&#xF13A;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 328
  },
  {
    "role": "code",
    "lines": [
      "assign x (=) | x 4 4;"
    ],
    "preprocessed": "assign x (=) | x 4 4;",
    "code": "211103210011132211331232100111321003210032233",
    "parse": [
      "assign",
      "x",
      [
        "="
      ],
      [
        -1,
        "x",
        "4",
        "4"
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF136;&#xF121;&#xF101;&#xF143;&#xF124;&#xF118;&#xF137;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 329
  },
  {
    "role": "code",
    "lines": [
      "assign x (=) | x 4 (+ 2 2);"
    ],
    "preprocessed": "assign x (=) | x 4 (+ 2 2);",
    "code": "21110321001113221133123210011132100322101032103210332233",
    "parse": [
      "assign",
      "x",
      [
        "="
      ],
      [
        -1,
        "x",
        "4",
        [
          "+",
          "2",
          "2"
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF136;&#xF121;&#xF101;&#xF143;&#xF124;&#xF118;&#xF137;&#xF132;&#xF13D;&#xF135;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 330
  },
  {
    "role": "code",
    "lines": [
      "assign x 1 | assign y 2 | = 3 (+ (x) (y));"
    ],
    "preprocessed": "assign x 1 | assign y 2 | = 3 (+ (x) (y));",
    "code": "211103210011132131232111032110011321031232113211322101032210011133221100113332233",
    "parse": [
      "assign",
      "x",
      "1",
      [
        -1,
        "assign",
        "y",
        "2",
        [
          -1,
          "=",
          "3",
          [
            "+",
            [
              "x"
            ],
            [
              "y"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF134;&#xF101;&#xF143;&#xF141;&#xF125;&#xF114;&#xF135;&#xF101;&#xF143;&#xF136;&#xF136;&#xF132;&#xF13D;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF125;&#xF114;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 331
  },
  {
    "role": "code",
    "lines": [
      "assign x 2 | assign y 7 | = 5 (- (y) (x));"
    ],
    "preprocessed": "assign x 2 | assign y 7 | = 5 (- (y) (x));",
    "code": "211103210011132103123211103211001132111312321132101322101132211001133221001113332233",
    "parse": [
      "assign",
      "x",
      "2",
      [
        -1,
        "assign",
        "y",
        "7",
        [
          -1,
          "=",
          "5",
          [
            "-",
            [
              "y"
            ],
            [
              "x"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF135;&#xF101;&#xF143;&#xF141;&#xF125;&#xF114;&#xF13A;&#xF101;&#xF143;&#xF136;&#xF138;&#xF132;&#xF13E;&#xF132;&#xF125;&#xF114;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 332
  },
  {
    "role": "code",
    "lines": [
      "assign x (+) | assign y 3 | = 4 (x 1 (y));"
    ],
    "preprocessed": "assign x (+) | assign y 3 | = 4 (x 1 (y));",
    "code": "2111032100111322101033123211103211001132113123211321003221001113213221100113332233",
    "parse": [
      "assign",
      "x",
      [
        "+"
      ],
      [
        -1,
        "assign",
        "y",
        "3",
        [
          -1,
          "=",
          "4",
          [
            "x",
            "1",
            [
              "y"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF13D;&#xF121;&#xF101;&#xF143;&#xF141;&#xF125;&#xF114;&#xF136;&#xF101;&#xF143;&#xF136;&#xF137;&#xF132;&#xF124;&#xF118;&#xF134;&#xF132;&#xF125;&#xF114;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 333
  },
  {
    "role": "doc",
    "lines": [
      "We are pretty ruthless about adding syntax to reduce parentheses.  So let's allow writing `(x)` as `$x` (or equivalent in other renderings).  This and `|` are in fact global options for the message that you can turn off if they are not to your taste."
    ],
    "stanza": 334
  },
  {
    "role": "code",
    "lines": [
      "assign x 1 | = (x) 1;"
    ],
    "preprocessed": "assign x 1 | = (x) 1;",
    "code": "21110321001113213123211322100111332132233",
    "parse": [
      "assign",
      "x",
      "1",
      [
        -1,
        "=",
        [
          "x"
        ],
        "1"
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF134;&#xF101;&#xF143;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 335
  },
  {
    "role": "code",
    "lines": [
      "assign x 1 | = $x 1;"
    ],
    "preprocessed": "assign x 1 | = $x 1;",
    "code": "211103210011132131232113023210011132132233",
    "parse": [
      "assign",
      "x",
      "1",
      [
        -1,
        "=",
        [
          -2,
          "x"
        ],
        "1"
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF134;&#xF101;&#xF143;&#xF136;&#xF100;&#xF143;&#xF124;&#xF118;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 336
  },
  {
    "role": "code",
    "lines": [
      "assign x 4 | = 16 (* (x) (x));"
    ],
    "preprocessed": "assign x 4 | = 16 (* (x) (x));",
    "code": "21110321001113210031232113210000322100132210011133221001113332233",
    "parse": [
      "assign",
      "x",
      "4",
      [
        -1,
        "=",
        "16",
        [
          "*",
          [
            "x"
          ],
          [
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF137;&#xF101;&#xF143;&#xF136;&#xF123;&#xF111;&#xF132;&#xF13C;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 337
  },
  {
    "role": "code",
    "lines": [
      "assign x 4 | = 16 (* $x $x);"
    ],
    "preprocessed": "assign x 4 | = 16 (* $x $x);",
    "code": "2111032100111321003123211321000032210013023210011130232100111332233",
    "parse": [
      "assign",
      "x",
      "4",
      [
        -1,
        "=",
        "16",
        [
          "*",
          [
            -2,
            "x"
          ],
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF137;&#xF101;&#xF143;&#xF136;&#xF123;&#xF111;&#xF132;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 338
  },
  {
    "role": "code",
    "lines": [
      "assign x 4 | = 16 | * $x $x;"
    ],
    "preprocessed": "assign x 4 | = 16 | * $x $x;",
    "code": "21110321001113210031232113210000312321001302321001113023210011132233",
    "parse": [
      "assign",
      "x",
      "4",
      [
        -1,
        "=",
        "16",
        [
          -1,
          "*",
          [
            -2,
            "x"
          ],
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF137;&#xF101;&#xF143;&#xF136;&#xF123;&#xF111;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 339
  },
  {
    "role": "doc",
    "lines": [
      "Add more examples to give hints about scoping and other odd corners."
    ],
    "stanza": 340
  },
  {
    "role": "code",
    "lines": [
      "= 2 | assign x 1 | + $x 1;"
    ],
    "preprocessed": "= 2 | assign x 1 | + $x 1;",
    "code": "2113210312321110321001113213123210103023210011132132233",
    "parse": [
      "=",
      "2",
      [
        -1,
        "assign",
        "x",
        "1",
        [
          -1,
          "+",
          [
            -2,
            "x"
          ],
          "1"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF101;&#xF143;&#xF141;&#xF124;&#xF118;&#xF134;&#xF101;&#xF143;&#xF13D;&#xF100;&#xF143;&#xF124;&#xF118;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 341
  },
  {
    "role": "code",
    "lines": [
      "= 1 | assign x 1 $x;"
    ],
    "preprocessed": "= 1 | assign x 1 $x;",
    "code": "211321312321110321001113213023210011132233",
    "parse": [
      "=",
      "1",
      [
        -1,
        "assign",
        "x",
        "1",
        [
          -2,
          "x"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF141;&#xF124;&#xF118;&#xF134;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 342
  },
  {
    "role": "code",
    "lines": [
      "= 14 | assign x 1 14;"
    ],
    "preprocessed": "= 14 | assign x 1 14;",
    "code": "2113211103123211103210011132132111032233",
    "parse": [
      "=",
      "14",
      [
        -1,
        "assign",
        "x",
        "1",
        "14"
      ]
    ],
    "spider": "&#xF136;&#xF141;&#xF101;&#xF143;&#xF141;&#xF124;&#xF118;&#xF134;&#xF141;&#xF132;&#xF143;&#xF121;",
    "stanza": 343
  },
  {
    "role": "code",
    "lines": [
      "= 4 | assign x (assign y 3 | + 1 $y) $x;"
    ],
    "preprocessed": "= 4 | assign x (assign y 3 | + 1 $y) $x;",
    "code": "211321003123211103210011132211103211001132113123210103213023211001133023210011132233",
    "parse": [
      "=",
      "4",
      [
        -1,
        "assign",
        "x",
        [
          "assign",
          "y",
          "3",
          [
            -1,
            "+",
            "1",
            [
              -2,
              "y"
            ]
          ]
        ],
        [
          -2,
          "x"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF137;&#xF101;&#xF143;&#xF141;&#xF124;&#xF118;&#xF132;&#xF141;&#xF125;&#xF114;&#xF136;&#xF101;&#xF143;&#xF13D;&#xF134;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 344
  },
  {
    "role": "code",
    "lines": [
      "= 4 | assign x (assign x 3 | + 1 $x) $x;"
    ],
    "preprocessed": "= 4 | assign x (assign x 3 | + 1 $x) $x;",
    "code": "211321003123211103210011132211103210011132113123210103213023210011133023210011132233",
    "parse": [
      "=",
      "4",
      [
        -1,
        "assign",
        "x",
        [
          "assign",
          "x",
          "3",
          [
            -1,
            "+",
            "1",
            [
              -2,
              "x"
            ]
          ]
        ],
        [
          -2,
          "x"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF137;&#xF101;&#xF143;&#xF141;&#xF124;&#xF118;&#xF132;&#xF141;&#xF124;&#xF118;&#xF136;&#xF101;&#xF143;&#xF13D;&#xF134;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 345
  },
  {
    "role": "doc",
    "lines": [
      "We're ready for functions.  `?` starts a lambda function.  Now we can have fun!"
    ],
    "stanza": 346
  },
  {
    "role": "code",
    "lines": [
      "= 0 | (? x $x) 0;"
    ],
    "preprocessed": "= 0 | (? x $x) 0;",
    "code": "21132031232211003210011130232100111332032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 347
  },
  {
    "role": "code",
    "lines": [
      "= 1 | (? x $x) 1;"
    ],
    "preprocessed": "= 1 | (? x $x) 1;",
    "code": "21132131232211003210011130232100111332132233",
    "parse": [
      "=",
      "1",
      [
        -1,
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 348
  },
  {
    "role": "code",
    "lines": [
      "= 2 | (? x $x) 2;"
    ],
    "preprocessed": "= 2 | (? x $x) 2;",
    "code": "2113210312322110032100111302321001113321032233",
    "parse": [
      "=",
      "2",
      [
        -1,
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 349
  },
  {
    "role": "code",
    "lines": [
      "= 3 | (? x $x) 3;"
    ],
    "preprocessed": "= 3 | (? x $x) 3;",
    "code": "2113211312322110032100111302321001113321132233",
    "parse": [
      "=",
      "3",
      [
        -1,
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        "3"
      ]
    ],
    "spider": "&#xF136;&#xF136;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 350
  },
  {
    "role": "code",
    "lines": [
      "= 4 | (? x $x) 4;"
    ],
    "preprocessed": "= 4 | (? x $x) 4;",
    "code": "211321003123221100321001113023210011133210032233",
    "parse": [
      "=",
      "4",
      [
        -1,
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF137;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 351
  },
  {
    "role": "code",
    "lines": [
      "= 5 | (? x $x) 5;"
    ],
    "preprocessed": "= 5 | (? x $x) 5;",
    "code": "211321013123221100321001113023210011133210132233",
    "parse": [
      "=",
      "5",
      [
        -1,
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF138;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 352
  },
  {
    "role": "code",
    "lines": [
      "= 1 | (? x | + 1 $x) 0;"
    ],
    "preprocessed": "= 1 | (? x | + 1 $x) 0;",
    "code": "21132131232211003210011131232101032130232100111332032233",
    "parse": [
      "=",
      "1",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            "1",
            [
              -2,
              "x"
            ]
          ]
        ],
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13D;&#xF134;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 353
  },
  {
    "role": "code",
    "lines": [
      "= 2 | (? x | + 1 $x) 1;"
    ],
    "preprocessed": "= 2 | (? x | + 1 $x) 1;",
    "code": "211321031232211003210011131232101032130232100111332132233",
    "parse": [
      "=",
      "2",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            "1",
            [
              -2,
              "x"
            ]
          ]
        ],
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13D;&#xF134;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 354
  },
  {
    "role": "code",
    "lines": [
      "= 3 | (? x | + 1 $x) 2;"
    ],
    "preprocessed": "= 3 | (? x | + 1 $x) 2;",
    "code": "2113211312322110032100111312321010321302321001113321032233",
    "parse": [
      "=",
      "3",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            "1",
            [
              -2,
              "x"
            ]
          ]
        ],
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF136;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13D;&#xF134;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 355
  },
  {
    "role": "code",
    "lines": [
      "= 4 | (? x | + 1 $x) 3;"
    ],
    "preprocessed": "= 4 | (? x | + 1 $x) 3;",
    "code": "21132100312322110032100111312321010321302321001113321132233",
    "parse": [
      "=",
      "4",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            "1",
            [
              -2,
              "x"
            ]
          ]
        ],
        "3"
      ]
    ],
    "spider": "&#xF136;&#xF137;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13D;&#xF134;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 356
  },
  {
    "role": "code",
    "lines": [
      "= 5 | (? x | + 1 $x) 4;"
    ],
    "preprocessed": "= 5 | (? x | + 1 $x) 4;",
    "code": "211321013123221100321001113123210103213023210011133210032233",
    "parse": [
      "=",
      "5",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            "1",
            [
              -2,
              "x"
            ]
          ]
        ],
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF138;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13D;&#xF134;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 357
  },
  {
    "role": "code",
    "lines": [
      "= 6 | (? x | + 1 $x) 5;"
    ],
    "preprocessed": "= 6 | (? x | + 1 $x) 5;",
    "code": "211321103123221100321001113123210103213023210011133210132233",
    "parse": [
      "=",
      "6",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            "1",
            [
              -2,
              "x"
            ]
          ]
        ],
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF139;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13D;&#xF134;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 358
  },
  {
    "role": "code",
    "lines": [
      "= 0 | (? x | * $x $x) 0;"
    ],
    "preprocessed": "= 0 | (? x | * $x $x) 0;",
    "code": "2113203123221100321001113123210013023210011130232100111332032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -2,
              "x"
            ]
          ]
        ],
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 359
  },
  {
    "role": "code",
    "lines": [
      "= 1 | (? x | * $x $x) 1;"
    ],
    "preprocessed": "= 1 | (? x | * $x $x) 1;",
    "code": "2113213123221100321001113123210013023210011130232100111332132233",
    "parse": [
      "=",
      "1",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -2,
              "x"
            ]
          ]
        ],
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 360
  },
  {
    "role": "code",
    "lines": [
      "= 4 | (? x | * $x $x) 2;"
    ],
    "preprocessed": "= 4 | (? x | * $x $x) 2;",
    "code": "2113210031232211003210011131232100130232100111302321001113321032233",
    "parse": [
      "=",
      "4",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -2,
              "x"
            ]
          ]
        ],
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF137;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 361
  },
  {
    "role": "code",
    "lines": [
      "= 9 | (? x | * $x $x) 3;"
    ],
    "preprocessed": "= 9 | (? x | * $x $x) 3;",
    "code": "21132100131232211003210011131232100130232100111302321001113321132233",
    "parse": [
      "=",
      "9",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -2,
              "x"
            ]
          ]
        ],
        "3"
      ]
    ],
    "spider": "&#xF136;&#xF13C;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 362
  },
  {
    "role": "code",
    "lines": [
      "= 16 | (? x | * $x $x) 4;"
    ],
    "preprocessed": "= 16 | (? x | * $x $x) 4;",
    "code": "2113210000312322110032100111312321001302321001113023210011133210032233",
    "parse": [
      "=",
      "16",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -2,
              "x"
            ]
          ]
        ],
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF111;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 363
  },
  {
    "role": "code",
    "lines": [
      "= 25 | (? x | * $x $x) 5;"
    ],
    "preprocessed": "= 25 | (? x | * $x $x) 5;",
    "code": "2113211001312322110032100111312321001302321001113023210011133210132233",
    "parse": [
      "=",
      "25",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -2,
              "x"
            ]
          ]
        ],
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF11A;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 364
  },
  {
    "role": "code",
    "lines": [
      "= 0 | (? y | * $y $y) 0;"
    ],
    "preprocessed": "= 0 | (? y | * $y $y) 0;",
    "code": "2113203123221100321100113123210013023211001130232110011332032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        [
          "?",
          "y",
          [
            -1,
            "*",
            [
              -2,
              "y"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF125;&#xF114;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 365
  },
  {
    "role": "code",
    "lines": [
      "= 1 | (? y | * $y $y) 1;"
    ],
    "preprocessed": "= 1 | (? y | * $y $y) 1;",
    "code": "2113213123221100321100113123210013023211001130232110011332132233",
    "parse": [
      "=",
      "1",
      [
        -1,
        [
          "?",
          "y",
          [
            -1,
            "*",
            [
              -2,
              "y"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF125;&#xF114;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 366
  },
  {
    "role": "code",
    "lines": [
      "= 4 | (? y | * $y $y) 2;"
    ],
    "preprocessed": "= 4 | (? y | * $y $y) 2;",
    "code": "2113210031232211003211001131232100130232110011302321100113321032233",
    "parse": [
      "=",
      "4",
      [
        -1,
        [
          "?",
          "y",
          [
            -1,
            "*",
            [
              -2,
              "y"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF137;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF125;&#xF114;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 367
  },
  {
    "role": "code",
    "lines": [
      "= 9 | (? y | * $y $y) 3;"
    ],
    "preprocessed": "= 9 | (? y | * $y $y) 3;",
    "code": "21132100131232211003211001131232100130232110011302321100113321132233",
    "parse": [
      "=",
      "9",
      [
        -1,
        [
          "?",
          "y",
          [
            -1,
            "*",
            [
              -2,
              "y"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "3"
      ]
    ],
    "spider": "&#xF136;&#xF13C;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF125;&#xF114;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 368
  },
  {
    "role": "code",
    "lines": [
      "= 16 | (? y | * $y $y) 4;"
    ],
    "preprocessed": "= 16 | (? y | * $y $y) 4;",
    "code": "2113210000312322110032110011312321001302321100113023211001133210032233",
    "parse": [
      "=",
      "16",
      [
        -1,
        [
          "?",
          "y",
          [
            -1,
            "*",
            [
              -2,
              "y"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF111;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF125;&#xF114;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 369
  },
  {
    "role": "code",
    "lines": [
      "= 25 | (? y | * $y $y) 5;"
    ],
    "preprocessed": "= 25 | (? y | * $y $y) 5;",
    "code": "2113211001312322110032110011312321001302321100113023211001133210132233",
    "parse": [
      "=",
      "25",
      [
        -1,
        [
          "?",
          "y",
          [
            -1,
            "*",
            [
              -2,
              "y"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF11A;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF125;&#xF114;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 370
  },
  {
    "role": "doc",
    "lines": [
      "Emphasize the arbitrary nature of names, and hint that things we've learned already like addition could possibly be re-imagined as a named value."
    ],
    "stanza": 371
  },
  {
    "role": "code",
    "lines": [
      "= 0 | (? + | * $+ $+) 0;"
    ],
    "preprocessed": "= 0 | (? + | * $+ $+) 0;",
    "code": "2113203123221100321010312321001302321010302321010332032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        [
          "?",
          "+",
          [
            -1,
            "*",
            [
              -2,
              "+"
            ],
            [
              -2,
              "+"
            ]
          ]
        ],
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF13D;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF13D;&#xF100;&#xF143;&#xF13D;&#xF121;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 372
  },
  {
    "role": "code",
    "lines": [
      "= 1 | (? + | * $+ $+) 1;"
    ],
    "preprocessed": "= 1 | (? + | * $+ $+) 1;",
    "code": "2113213123221100321010312321001302321010302321010332132233",
    "parse": [
      "=",
      "1",
      [
        -1,
        [
          "?",
          "+",
          [
            -1,
            "*",
            [
              -2,
              "+"
            ],
            [
              -2,
              "+"
            ]
          ]
        ],
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF13D;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF13D;&#xF100;&#xF143;&#xF13D;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 373
  },
  {
    "role": "code",
    "lines": [
      "= 4 | (? + | * $+ $+) 2;"
    ],
    "preprocessed": "= 4 | (? + | * $+ $+) 2;",
    "code": "2113210031232211003210103123210013023210103023210103321032233",
    "parse": [
      "=",
      "4",
      [
        -1,
        [
          "?",
          "+",
          [
            -1,
            "*",
            [
              -2,
              "+"
            ],
            [
              -2,
              "+"
            ]
          ]
        ],
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF137;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF13D;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF13D;&#xF100;&#xF143;&#xF13D;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 374
  },
  {
    "role": "code",
    "lines": [
      "= 9 | (? + | * $+ $+) 3;"
    ],
    "preprocessed": "= 9 | (? + | * $+ $+) 3;",
    "code": "21132100131232211003210103123210013023210103023210103321132233",
    "parse": [
      "=",
      "9",
      [
        -1,
        [
          "?",
          "+",
          [
            -1,
            "*",
            [
              -2,
              "+"
            ],
            [
              -2,
              "+"
            ]
          ]
        ],
        "3"
      ]
    ],
    "spider": "&#xF136;&#xF13C;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF13D;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF13D;&#xF100;&#xF143;&#xF13D;&#xF121;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 375
  },
  {
    "role": "code",
    "lines": [
      "= 16 | (? + | * $+ $+) 4;"
    ],
    "preprocessed": "= 16 | (? + | * $+ $+) 4;",
    "code": "2113210000312322110032101031232100130232101030232101033210032233",
    "parse": [
      "=",
      "16",
      [
        -1,
        [
          "?",
          "+",
          [
            -1,
            "*",
            [
              -2,
              "+"
            ],
            [
              -2,
              "+"
            ]
          ]
        ],
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF111;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF13D;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF13D;&#xF100;&#xF143;&#xF13D;&#xF121;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 376
  },
  {
    "role": "code",
    "lines": [
      "= 25 | (? + | * $+ $+) 5;"
    ],
    "preprocessed": "= 25 | (? + | * $+ $+) 5;",
    "code": "2113211001312322110032101031232100130232101030232101033210132233",
    "parse": [
      "=",
      "25",
      [
        -1,
        [
          "?",
          "+",
          [
            -1,
            "*",
            [
              -2,
              "+"
            ],
            [
              -2,
              "+"
            ]
          ]
        ],
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF11A;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF13D;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF13D;&#xF100;&#xF143;&#xF13D;&#xF121;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 377
  },
  {
    "role": "code",
    "lines": [
      "= 0 | (? 5 | * $5 $5) 0;"
    ],
    "preprocessed": "= 0 | (? 5 | * $5 $5) 0;",
    "code": "2113203123221100321013123210013023210130232101332032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        [
          "?",
          "5",
          [
            -1,
            "*",
            [
              -2,
              "5"
            ],
            [
              -2,
              "5"
            ]
          ]
        ],
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF138;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF138;&#xF100;&#xF143;&#xF138;&#xF121;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 378
  },
  {
    "role": "code",
    "lines": [
      "= 1 | (? 5 | * $5 $5) 1;"
    ],
    "preprocessed": "= 1 | (? 5 | * $5 $5) 1;",
    "code": "2113213123221100321013123210013023210130232101332132233",
    "parse": [
      "=",
      "1",
      [
        -1,
        [
          "?",
          "5",
          [
            -1,
            "*",
            [
              -2,
              "5"
            ],
            [
              -2,
              "5"
            ]
          ]
        ],
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF138;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF138;&#xF100;&#xF143;&#xF138;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 379
  },
  {
    "role": "code",
    "lines": [
      "= 4 | (? 5 | * $5 $5) 2;"
    ],
    "preprocessed": "= 4 | (? 5 | * $5 $5) 2;",
    "code": "2113210031232211003210131232100130232101302321013321032233",
    "parse": [
      "=",
      "4",
      [
        -1,
        [
          "?",
          "5",
          [
            -1,
            "*",
            [
              -2,
              "5"
            ],
            [
              -2,
              "5"
            ]
          ]
        ],
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF137;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF138;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF138;&#xF100;&#xF143;&#xF138;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 380
  },
  {
    "role": "code",
    "lines": [
      "= 9 | (? 5 | * $5 $5) 3;"
    ],
    "preprocessed": "= 9 | (? 5 | * $5 $5) 3;",
    "code": "21132100131232211003210131232100130232101302321013321132233",
    "parse": [
      "=",
      "9",
      [
        -1,
        [
          "?",
          "5",
          [
            -1,
            "*",
            [
              -2,
              "5"
            ],
            [
              -2,
              "5"
            ]
          ]
        ],
        "3"
      ]
    ],
    "spider": "&#xF136;&#xF13C;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF138;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF138;&#xF100;&#xF143;&#xF138;&#xF121;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 381
  },
  {
    "role": "code",
    "lines": [
      "= 16 | (? 5 | * $5 $5) 4;"
    ],
    "preprocessed": "= 16 | (? 5 | * $5 $5) 4;",
    "code": "2113210000312322110032101312321001302321013023210133210032233",
    "parse": [
      "=",
      "16",
      [
        -1,
        [
          "?",
          "5",
          [
            -1,
            "*",
            [
              -2,
              "5"
            ],
            [
              -2,
              "5"
            ]
          ]
        ],
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF111;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF138;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF138;&#xF100;&#xF143;&#xF138;&#xF121;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 382
  },
  {
    "role": "code",
    "lines": [
      "= 25 | (? 5 | * $5 $5) 5;"
    ],
    "preprocessed": "= 25 | (? 5 | * $5 $5) 5;",
    "code": "2113211001312322110032101312321001302321013023210133210132233",
    "parse": [
      "=",
      "25",
      [
        -1,
        [
          "?",
          "5",
          [
            -1,
            "*",
            [
              -2,
              "5"
            ],
            [
              -2,
              "5"
            ]
          ]
        ],
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF11A;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF138;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF138;&#xF100;&#xF143;&#xF138;&#xF121;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 383
  },
  {
    "role": "doc",
    "lines": [
      "Show that we can name functions and use them later - still within a single expression for now."
    ],
    "stanza": 384
  },
  {
    "role": "code",
    "lines": [
      "assign x (? y | * $y $y) | = 25 | x 5;"
    ],
    "preprocessed": "assign x (? y | * $y $y) | = 25 | x 5;",
    "code": "21110321001113221100321100113123210013023211001130232110011331232113211001312321001113210132233",
    "parse": [
      "assign",
      "x",
      [
        "?",
        "y",
        [
          -1,
          "*",
          [
            -2,
            "y"
          ],
          [
            -2,
            "y"
          ]
        ]
      ],
      [
        -1,
        "=",
        "25",
        [
          -1,
          "x",
          "5"
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF125;&#xF114;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF101;&#xF143;&#xF136;&#xF123;&#xF11A;&#xF101;&#xF143;&#xF124;&#xF118;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 385
  },
  {
    "role": "code",
    "lines": [
      "assign x (? y | + $y 1) | = 6 | x 5;"
    ],
    "preprocessed": "assign x (? y | + $y 1) | = 6 | x 5;",
    "code": "2111032100111322110032110011312321010302321100113213312321132110312321001113210132233",
    "parse": [
      "assign",
      "x",
      [
        "?",
        "y",
        [
          -1,
          "+",
          [
            -2,
            "y"
          ],
          "1"
        ]
      ],
      [
        -1,
        "=",
        "6",
        [
          -1,
          "x",
          "5"
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13D;&#xF100;&#xF143;&#xF125;&#xF114;&#xF134;&#xF121;&#xF101;&#xF143;&#xF136;&#xF139;&#xF101;&#xF143;&#xF124;&#xF118;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 386
  },
  {
    "role": "code",
    "lines": [
      "assign x (? x | + $x 1) | = 6 | x 5;"
    ],
    "preprocessed": "assign x (? x | + $x 1) | = 6 | x 5;",
    "code": "2111032100111322110032100111312321010302321001113213312321132110312321001113210132233",
    "parse": [
      "assign",
      "x",
      [
        "?",
        "x",
        [
          -1,
          "+",
          [
            -2,
            "x"
          ],
          "1"
        ]
      ],
      [
        -1,
        "=",
        "6",
        [
          -1,
          "x",
          "5"
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13D;&#xF100;&#xF143;&#xF124;&#xF118;&#xF134;&#xF121;&#xF101;&#xF143;&#xF136;&#xF139;&#xF101;&#xF143;&#xF124;&#xF118;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 387
  },
  {
    "role": "code",
    "lines": [
      "assign y (? x | + $x 1) | = 6 | y 5;"
    ],
    "preprocessed": "assign y (? x | + $x 1) | = 6 | y 5;",
    "code": "2111032110011322110032100111312321010302321001113213312321132110312321100113210132233",
    "parse": [
      "assign",
      "y",
      [
        "?",
        "x",
        [
          -1,
          "+",
          [
            -2,
            "x"
          ],
          "1"
        ]
      ],
      [
        -1,
        "=",
        "6",
        [
          -1,
          "y",
          "5"
        ]
      ]
    ],
    "spider": "&#xF141;&#xF125;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13D;&#xF100;&#xF143;&#xF124;&#xF118;&#xF134;&#xF121;&#xF101;&#xF143;&#xF136;&#xF139;&#xF101;&#xF143;&#xF125;&#xF114;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 388
  },
  {
    "role": "doc",
    "lines": [
      "Show that we can nest functions to take multiple values."
    ],
    "stanza": 389
  },
  {
    "role": "code",
    "lines": [
      "= 52 | * 4 13;"
    ],
    "preprocessed": "= 52 | * 4 13;",
    "code": "211321101003123210013210032110132233",
    "parse": [
      "=",
      "52",
      [
        -1,
        "*",
        "4",
        "13"
      ]
    ],
    "spider": "&#xF136;&#xF125;&#xF115;&#xF101;&#xF143;&#xF13C;&#xF137;&#xF140;&#xF132;&#xF143;&#xF121;",
    "stanza": 390
  },
  {
    "role": "code",
    "lines": [
      "= 52 | (? x | * $x 4) 13;"
    ],
    "preprocessed": "= 52 | (? x | * $x 4) 13;",
    "code": "211321101003123221100321001113123210013023210011132100332110132233",
    "parse": [
      "=",
      "52",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            "4"
          ]
        ],
        "13"
      ]
    ],
    "spider": "&#xF136;&#xF125;&#xF115;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF137;&#xF121;&#xF140;&#xF132;&#xF143;&#xF121;",
    "stanza": 391
  },
  {
    "role": "code",
    "lines": [
      "= 52 | (? x | ? y | * $x $y) 13 4;"
    ],
    "preprocessed": "= 52 | (? x | ? y | * $x $y) 13 4;",
    "code": "2113211010031232211003210011131232110032110011312321001302321001113023211001133211013210032233",
    "parse": [
      "=",
      "52",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "?",
            "y",
            [
              -1,
              "*",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ],
        "13",
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF125;&#xF115;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF140;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 392
  },
  {
    "role": "code",
    "lines": [
      "= 53 | (? x | ? y | + 1 | * $x $y) 13 4;"
    ],
    "preprocessed": "= 53 | (? x | ? y | + 1 | * $x $y) 13 4;",
    "code": "2113211010131232211003210011131232110032110011312321010321312321001302321001113023211001133211013210032233",
    "parse": [
      "=",
      "53",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "?",
            "y",
            [
              -1,
              "+",
              "1",
              [
                -1,
                "*",
                [
                  -2,
                  "x"
                ],
                [
                  -2,
                  "y"
                ]
              ]
            ]
          ]
        ],
        "13",
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF125;&#xF116;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13D;&#xF134;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF140;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 393
  },
  {
    "role": "code",
    "lines": [
      "assign z (? x | ? y | + 1 | * $x $y) | = 53 | z 13 4;"
    ],
    "preprocessed": "assign z (? x | ? y | + 1 | * $x $y) | = 53 | z 13 4;",
    "code": "21110321101003221100321001113123211003211001131232101032131232100130232100111302321100113312321132110101312321101003211013210032233",
    "parse": [
      "assign",
      "z",
      [
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "+",
            "1",
            [
              -1,
              "*",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ]
      ],
      [
        -1,
        "=",
        "53",
        [
          -1,
          "z",
          "13",
          "4"
        ]
      ]
    ],
    "spider": "&#xF141;&#xF125;&#xF115;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13D;&#xF134;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF101;&#xF143;&#xF136;&#xF125;&#xF116;&#xF101;&#xF143;&#xF125;&#xF115;&#xF140;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 394
  },
  {
    "role": "file",
    "lines": [
      "== COS_DefineFunction =="
    ],
    "stanza": 395
  },
  {
    "role": "doc",
    "lines": [
      "",
      "We've set up a way to name a value within an expression.  Now let's go beyond that,",
      "and introduce a way to name a value in one sentence and use it in a later sentence.",
      "In other words, a message-level memory.  After this, we'll be able to define new",
      "symbols from existing ones, with less need for large numbers of examples.",
      "",
      "We introduce a `define` symbol that works just like `assign`, except that it applies",
      "to the rest of the message rather than the rest of the sentence.",
      "",
      "A sentence of the form `define X Y` means that `$X` will evaluate to `Y` from that",
      "point on (unless `X` is changed by another `define`).",
      "",
      "The `meaning-of-life-universe-everything` symbol here is entirely arbitrary, and",
      "won't be encoded as anything particularly meaningful in the message.",
      ""
    ],
    "section_description": "demonstrate existence of memory",
    "section_category": "MATH",
    "section_index": 9,
    "stanza": 396
  },
  {
    "role": "code",
    "lines": [
      "define meaning-of-life-universe-everything 39;"
    ],
    "preprocessed": "define meaning-of-life-universe-everything 39;",
    "code": "21101321110003210011132233",
    "parse": [
      "define",
      "meaning-of-life-universe-everything",
      "39"
    ],
    "spider": "&#xF140;&#xF125;&#xF119;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 397
  },
  {
    "role": "code",
    "lines": [
      "= 39 $meaning-of-life-universe-everything;"
    ],
    "preprocessed": "= 39 $meaning-of-life-universe-everything;",
    "code": "211321001113023211100032233",
    "parse": [
      "=",
      "39",
      [
        -2,
        "meaning-of-life-universe-everything"
      ]
    ],
    "spider": "&#xF136;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 398
  },
  {
    "role": "code",
    "lines": [
      "= $meaning-of-life-universe-everything 39;"
    ],
    "preprocessed": "= $meaning-of-life-universe-everything 39;",
    "code": "211302321110003210011132233",
    "parse": [
      "=",
      [
        -2,
        "meaning-of-life-universe-everything"
      ],
      "39"
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF125;&#xF119;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 399
  },
  {
    "role": "code",
    "lines": [
      "= 49 | + 10 $meaning-of-life-universe-everything;"
    ],
    "preprocessed": "= 49 | + 10 $meaning-of-life-universe-everything;",
    "code": "211321100013123210103210103023211100032233",
    "parse": [
      "=",
      "49",
      [
        -1,
        "+",
        "10",
        [
          -2,
          "meaning-of-life-universe-everything"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF125;&#xF112;&#xF101;&#xF143;&#xF13D;&#xF13D;&#xF100;&#xF143;&#xF125;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 400
  },
  {
    "role": "code",
    "lines": [
      "define meaning-of-life-universe-everything 40;"
    ],
    "preprocessed": "define meaning-of-life-universe-everything 40;",
    "code": "21101321110003210100032233",
    "parse": [
      "define",
      "meaning-of-life-universe-everything",
      "40"
    ],
    "spider": "&#xF140;&#xF125;&#xF119;&#xF124;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 401
  },
  {
    "role": "code",
    "lines": [
      "= $meaning-of-life-universe-everything 40;"
    ],
    "preprocessed": "= $meaning-of-life-universe-everything 40;",
    "code": "211302321110003210100032233",
    "parse": [
      "=",
      [
        -2,
        "meaning-of-life-universe-everything"
      ],
      "40"
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF125;&#xF119;&#xF124;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 402
  },
  {
    "role": "code",
    "lines": [
      "= 80 | * $meaning-of-life-universe-everything 2;"
    ],
    "preprocessed": "= 80 | * $meaning-of-life-universe-everything 2;",
    "code": "21132101000031232100130232111000321032233",
    "parse": [
      "=",
      "80",
      [
        -1,
        "*",
        [
          -2,
          "meaning-of-life-universe-everything"
        ],
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF127;&#xF111;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF125;&#xF119;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 403
  },
  {
    "role": "code",
    "lines": [
      "define meaning-of-life-universe-everything | + 1 $meaning-of-life-universe-everything;"
    ],
    "preprocessed": "define meaning-of-life-universe-everything | + 1 $meaning-of-life-universe-everything;",
    "code": "21101321110003123210103213023211100032233",
    "parse": [
      "define",
      "meaning-of-life-universe-everything",
      [
        -1,
        "+",
        "1",
        [
          -2,
          "meaning-of-life-universe-everything"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF125;&#xF119;&#xF101;&#xF143;&#xF13D;&#xF134;&#xF100;&#xF143;&#xF125;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 404
  },
  {
    "role": "code",
    "lines": [
      "= $meaning-of-life-universe-everything 41;"
    ],
    "preprocessed": "= $meaning-of-life-universe-everything 41;",
    "code": "211302321110003210100132233",
    "parse": [
      "=",
      [
        -2,
        "meaning-of-life-universe-everything"
      ],
      "41"
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF125;&#xF119;&#xF124;&#xF11A;&#xF132;&#xF143;&#xF121;",
    "stanza": 405
  },
  {
    "role": "code",
    "lines": [
      "assign x (+ 1 $meaning-of-life-universe-everything) | define meaning-of-life-universe-everything $x;"
    ],
    "preprocessed": "assign x (+ 1 $meaning-of-life-universe-everything) | define meaning-of-life-universe-everything $x;",
    "code": "21110321001113221010321302321110003312321101321110003023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "+",
        "1",
        [
          -2,
          "meaning-of-life-universe-everything"
        ]
      ],
      [
        -1,
        "define",
        "meaning-of-life-universe-everything",
        [
          -2,
          "x"
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF13D;&#xF134;&#xF100;&#xF143;&#xF125;&#xF119;&#xF121;&#xF101;&#xF143;&#xF140;&#xF125;&#xF119;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 406
  },
  {
    "role": "code",
    "lines": [
      "= $meaning-of-life-universe-everything 42;"
    ],
    "preprocessed": "= $meaning-of-life-universe-everything 42;",
    "code": "211302321110003210101032233",
    "parse": [
      "=",
      [
        -2,
        "meaning-of-life-universe-everything"
      ],
      "42"
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF125;&#xF119;&#xF124;&#xF11B;&#xF132;&#xF143;&#xF121;",
    "stanza": 407
  },
  {
    "role": "doc",
    "lines": [
      "Now we can start defining and naming functions.  Here's one to square an integer."
    ],
    "stanza": 408
  },
  {
    "role": "code",
    "lines": [
      "define square | ? x | * $x $x;"
    ],
    "preprocessed": "define square | ? x | * $x $x;",
    "code": "211013211100131232110032100111312321001302321001113023210011132233",
    "parse": [
      "define",
      "square",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "*",
          [
            -2,
            "x"
          ],
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF125;&#xF11A;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 409
  },
  {
    "role": "code",
    "lines": [
      "= 9 | square 3;"
    ],
    "preprocessed": "= 9 | square 3;",
    "code": "21132100131232111001321132233",
    "parse": [
      "=",
      "9",
      [
        -1,
        "square",
        "3"
      ]
    ],
    "spider": "&#xF136;&#xF13C;&#xF101;&#xF143;&#xF125;&#xF11A;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 410
  },
  {
    "role": "code",
    "lines": [
      "= 81 | square 9;"
    ],
    "preprocessed": "= 81 | square 9;",
    "code": "2113210100013123211100132100132233",
    "parse": [
      "=",
      "81",
      [
        -1,
        "square",
        "9"
      ]
    ],
    "spider": "&#xF136;&#xF127;&#xF112;&#xF101;&#xF143;&#xF125;&#xF11A;&#xF13C;&#xF132;&#xF143;&#xF121;",
    "stanza": 411
  },
  {
    "role": "code",
    "lines": [
      "= 1 | square 1;"
    ],
    "preprocessed": "= 1 | square 1;",
    "code": "2113213123211100132132233",
    "parse": [
      "=",
      "1",
      [
        -1,
        "square",
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF125;&#xF11A;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 412
  },
  {
    "role": "code",
    "lines": [
      "= 4 | square 2;"
    ],
    "preprocessed": "= 4 | square 2;",
    "code": "2113210031232111001321032233",
    "parse": [
      "=",
      "4",
      [
        -1,
        "square",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF137;&#xF101;&#xF143;&#xF125;&#xF11A;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 413
  },
  {
    "role": "code",
    "lines": [
      "= 0 | square 0;"
    ],
    "preprocessed": "= 0 | square 0;",
    "code": "2113203123211100132032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "square",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF125;&#xF11A;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 414
  },
  {
    "role": "doc",
    "lines": [
      "Here's a function to increment an integer."
    ],
    "stanza": 415
  },
  {
    "role": "code",
    "lines": [
      "define ++ | ? x | + $x 1;"
    ],
    "preprocessed": "define ++ | ? x | + $x 1;",
    "code": "2110132111010312321100321001113123210103023210011132132233",
    "parse": [
      "define",
      "++",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "+",
          [
            -2,
            "x"
          ],
          "1"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF125;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13D;&#xF100;&#xF143;&#xF124;&#xF118;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 416
  },
  {
    "role": "code",
    "lines": [
      "= 4 | ++ 3;"
    ],
    "preprocessed": "= 4 | ++ 3;",
    "code": "2113210031232111010321132233",
    "parse": [
      "=",
      "4",
      [
        -1,
        "++",
        "3"
      ]
    ],
    "spider": "&#xF136;&#xF137;&#xF101;&#xF143;&#xF125;&#xF11B;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 417
  },
  {
    "role": "code",
    "lines": [
      "= 10 | ++ 9;"
    ],
    "preprocessed": "= 10 | ++ 9;",
    "code": "2113210103123211101032100132233",
    "parse": [
      "=",
      "10",
      [
        -1,
        "++",
        "9"
      ]
    ],
    "spider": "&#xF136;&#xF13D;&#xF101;&#xF143;&#xF125;&#xF11B;&#xF13C;&#xF132;&#xF143;&#xF121;",
    "stanza": 418
  },
  {
    "role": "code",
    "lines": [
      "= 2 | ++ 1;"
    ],
    "preprocessed": "= 2 | ++ 1;",
    "code": "21132103123211101032132233",
    "parse": [
      "=",
      "2",
      [
        -1,
        "++",
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF101;&#xF143;&#xF125;&#xF11B;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 419
  },
  {
    "role": "code",
    "lines": [
      "= 3 | ++ 2;"
    ],
    "preprocessed": "= 3 | ++ 2;",
    "code": "211321131232111010321032233",
    "parse": [
      "=",
      "3",
      [
        -1,
        "++",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF136;&#xF101;&#xF143;&#xF125;&#xF11B;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 420
  },
  {
    "role": "code",
    "lines": [
      "= 1 | ++ 0;"
    ],
    "preprocessed": "= 1 | ++ 0;",
    "code": "2113213123211101032032233",
    "parse": [
      "=",
      "1",
      [
        -1,
        "++",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF125;&#xF11B;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 421
  },
  {
    "role": "file",
    "lines": [
      "== COS_TrueFalse =="
    ],
    "stanza": 422
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Now that we have functions, we could introduce some clever definitions of true, false,",
      "and conditionals, where:",
      "",
      " * `if` is `? x | ? y | ? z | x $y $z`",
      " * `true` is `? y | ? z | y`",
      " * `false` is `? y | ? z | z`",
      " ",
      "This is a neat implementation, but maybe a bit confusing.  So let's",
      "not actually commit to a type for truth values in the message yet,",
      "but just equate them with the results of equality `=`.",
      "",
      "Once we have truth values, we can introduce conditionals and build up to fun stuff.",
      "",
      "One slightly sneaky thing we do is to code `true` and `false` as `$1`",
      "and `$0`.  This could be helpful, or confusing, I'm not sure.  Nothing",
      "else in the message depends on this so it can be adjusted to taste.",
      ""
    ],
    "section_description": "introduce true and false",
    "section_category": "MATH",
    "section_index": 10,
    "stanza": 423
  },
  {
    "role": "code",
    "lines": [
      "define true | = 0 0;"
    ],
    "preprocessed": "define true | = 0 0;",
    "code": "21101321312321132032032233",
    "parse": [
      "define",
      "true",
      [
        -1,
        "=",
        "0",
        "0"
      ]
    ],
    "spider": "&#xF140;&#xF134;&#xF101;&#xF143;&#xF136;&#xF133;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 424
  },
  {
    "role": "code",
    "lines": [
      "define false | = 0 1;"
    ],
    "preprocessed": "define false | = 0 1;",
    "code": "21101320312321132032132233",
    "parse": [
      "define",
      "false",
      [
        -1,
        "=",
        "0",
        "1"
      ]
    ],
    "spider": "&#xF140;&#xF133;&#xF101;&#xF143;&#xF136;&#xF133;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 425
  },
  {
    "role": "code",
    "lines": [
      "= $true (= 2 2);"
    ],
    "preprocessed": "= $true (= 2 2);",
    "code": "2113023213221132103210332233",
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        "=",
        "2",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF134;&#xF132;&#xF136;&#xF135;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 426
  },
  {
    "role": "code",
    "lines": [
      "= $true (> 4 2);"
    ],
    "preprocessed": "= $true (> 4 2);",
    "code": "211302321322100321003210332233",
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        ">",
        "4",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF134;&#xF132;&#xF137;&#xF137;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 427
  },
  {
    "role": "code",
    "lines": [
      "= $true (= 1 1);"
    ],
    "preprocessed": "= $true (= 1 1);",
    "code": "21130232132211321321332233",
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        "=",
        "1",
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF134;&#xF132;&#xF136;&#xF134;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 428
  },
  {
    "role": "code",
    "lines": [
      "= $true (> 6 4);"
    ],
    "preprocessed": "= $true (> 6 4);",
    "code": "2113023213221003211032100332233",
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        ">",
        "6",
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF134;&#xF132;&#xF137;&#xF139;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 429
  },
  {
    "role": "code",
    "lines": [
      "= $true (< 3 4);"
    ],
    "preprocessed": "= $true (< 3 4);",
    "code": "21130232132210321132100332233",
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        "<",
        "3",
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF134;&#xF132;&#xF135;&#xF136;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 430
  },
  {
    "role": "code",
    "lines": [
      "= (= 5 5) $true;"
    ],
    "preprocessed": "= (= 5 5) $true;",
    "code": "211322113210132101330232132233",
    "parse": [
      "=",
      [
        "=",
        "5",
        "5"
      ],
      [
        -2,
        "true"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF136;&#xF138;&#xF138;&#xF121;&#xF100;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 431
  },
  {
    "role": "code",
    "lines": [
      "= (= 3 3) $true;"
    ],
    "preprocessed": "= (= 3 3) $true;",
    "code": "2113221132113211330232132233",
    "parse": [
      "=",
      [
        "=",
        "3",
        "3"
      ],
      [
        -2,
        "true"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF136;&#xF136;&#xF136;&#xF121;&#xF100;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 432
  },
  {
    "role": "code",
    "lines": [
      "= (= 4 4) $true;"
    ],
    "preprocessed": "= (= 4 4) $true;",
    "code": "211322113210032100330232132233",
    "parse": [
      "=",
      [
        "=",
        "4",
        "4"
      ],
      [
        -2,
        "true"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF136;&#xF137;&#xF137;&#xF121;&#xF100;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 433
  },
  {
    "role": "code",
    "lines": [
      "= (= 3 3) $true;"
    ],
    "preprocessed": "= (= 3 3) $true;",
    "code": "2113221132113211330232132233",
    "parse": [
      "=",
      [
        "=",
        "3",
        "3"
      ],
      [
        -2,
        "true"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF136;&#xF136;&#xF136;&#xF121;&#xF100;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 434
  },
  {
    "role": "code",
    "lines": [
      "= (= 0 0) $true;"
    ],
    "preprocessed": "= (= 0 0) $true;",
    "code": "21132211320320330232132233",
    "parse": [
      "=",
      [
        "=",
        "0",
        "0"
      ],
      [
        -2,
        "true"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF136;&#xF133;&#xF133;&#xF121;&#xF100;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 435
  },
  {
    "role": "code",
    "lines": [
      "= $false (< 6 2);"
    ],
    "preprocessed": "= $false (< 6 2);",
    "code": "21130232032210321103210332233",
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        "<",
        "6",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF133;&#xF132;&#xF135;&#xF139;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 436
  },
  {
    "role": "code",
    "lines": [
      "= $false (< 4 2);"
    ],
    "preprocessed": "= $false (< 4 2);",
    "code": "21130232032210321003210332233",
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        "<",
        "4",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF133;&#xF132;&#xF135;&#xF137;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 437
  },
  {
    "role": "code",
    "lines": [
      "= $false (< 4 1);"
    ],
    "preprocessed": "= $false (< 4 1);",
    "code": "2113023203221032100321332233",
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        "<",
        "4",
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF133;&#xF132;&#xF135;&#xF137;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 438
  },
  {
    "role": "code",
    "lines": [
      "= $false (> 0 0);"
    ],
    "preprocessed": "= $false (> 0 0);",
    "code": "211302320322100320320332233",
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        ">",
        "0",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF133;&#xF132;&#xF137;&#xF133;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 439
  },
  {
    "role": "code",
    "lines": [
      "= $false (> 0 5);"
    ],
    "preprocessed": "= $false (> 0 5);",
    "code": "21130232032210032032101332233",
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        ">",
        "0",
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF133;&#xF132;&#xF137;&#xF133;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 440
  },
  {
    "role": "code",
    "lines": [
      "= (= 3 2) $false;"
    ],
    "preprocessed": "= (= 3 2) $false;",
    "code": "2113221132113210330232032233",
    "parse": [
      "=",
      [
        "=",
        "3",
        "2"
      ],
      [
        -2,
        "false"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF136;&#xF136;&#xF135;&#xF121;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 441
  },
  {
    "role": "code",
    "lines": [
      "= (> 2 3) $false;"
    ],
    "preprocessed": "= (> 2 3) $false;",
    "code": "21132210032103211330232032233",
    "parse": [
      "=",
      [
        ">",
        "2",
        "3"
      ],
      [
        -2,
        "false"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF137;&#xF135;&#xF136;&#xF121;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 442
  },
  {
    "role": "code",
    "lines": [
      "= (> 4 5) $false;"
    ],
    "preprocessed": "= (> 4 5) $false;",
    "code": "2113221003210032101330232032233",
    "parse": [
      "=",
      [
        ">",
        "4",
        "5"
      ],
      [
        -2,
        "false"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF137;&#xF137;&#xF138;&#xF121;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 443
  },
  {
    "role": "code",
    "lines": [
      "= (> 2 6) $false;"
    ],
    "preprocessed": "= (> 2 6) $false;",
    "code": "211322100321032110330232032233",
    "parse": [
      "=",
      [
        ">",
        "2",
        "6"
      ],
      [
        -2,
        "false"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF137;&#xF135;&#xF139;&#xF121;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 444
  },
  {
    "role": "code",
    "lines": [
      "= (> 1 6) $false;"
    ],
    "preprocessed": "= (> 1 6) $false;",
    "code": "21132210032132110330232032233",
    "parse": [
      "=",
      [
        ">",
        "1",
        "6"
      ],
      [
        -2,
        "false"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF137;&#xF134;&#xF139;&#xF121;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 445
  },
  {
    "role": "code",
    "lines": [
      "= $true $true;"
    ],
    "preprocessed": "= $true $true;",
    "code": "21130232130232132233",
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        -2,
        "true"
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF134;&#xF100;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 446
  },
  {
    "role": "code",
    "lines": [
      "= $false $false;"
    ],
    "preprocessed": "= $false $false;",
    "code": "21130232030232032233",
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -2,
        "false"
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF133;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 447
  },
  {
    "role": "code",
    "lines": [
      "not | = $true $false;"
    ],
    "preprocessed": "not | = $true $false;",
    "code": "2101312321130232130232032233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          -2,
          "true"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF100;&#xF143;&#xF134;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 448
  },
  {
    "role": "code",
    "lines": [
      "not | = $false $true;"
    ],
    "preprocessed": "not | = $false $true;",
    "code": "2101312321130232030232132233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          -2,
          "false"
        ],
        [
          -2,
          "true"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF100;&#xF143;&#xF133;&#xF100;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 449
  },
  {
    "role": "code",
    "lines": [
      "= (> 4 2) (< 1 4);"
    ],
    "preprocessed": "= (> 4 2) (< 1 4);",
    "code": "21132210032100321033221032132100332233",
    "parse": [
      "=",
      [
        ">",
        "4",
        "2"
      ],
      [
        "<",
        "1",
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF137;&#xF137;&#xF135;&#xF121;&#xF132;&#xF135;&#xF134;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 450
  },
  {
    "role": "code",
    "lines": [
      "= (= 3 3) (< 3 5);"
    ],
    "preprocessed": "= (= 3 3) (< 3 5);",
    "code": "2113221132113211332210321132101332233",
    "parse": [
      "=",
      [
        "=",
        "3",
        "3"
      ],
      [
        "<",
        "3",
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF136;&#xF136;&#xF136;&#xF121;&#xF132;&#xF135;&#xF136;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 451
  },
  {
    "role": "code",
    "lines": [
      "= (= 0 0) (= 4 4);"
    ],
    "preprocessed": "= (= 0 0) (= 4 4);",
    "code": "211322113203203322113210032100332233",
    "parse": [
      "=",
      [
        "=",
        "0",
        "0"
      ],
      [
        "=",
        "4",
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF136;&#xF133;&#xF133;&#xF121;&#xF132;&#xF136;&#xF137;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 452
  },
  {
    "role": "code",
    "lines": [
      "= (> 6 4) (< 3 5);"
    ],
    "preprocessed": "= (> 6 4) (< 3 5);",
    "code": "2113221003211032100332210321132101332233",
    "parse": [
      "=",
      [
        ">",
        "6",
        "4"
      ],
      [
        "<",
        "3",
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF137;&#xF139;&#xF137;&#xF121;&#xF132;&#xF135;&#xF136;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 453
  },
  {
    "role": "code",
    "lines": [
      "= (< 5 6) (< 0 2);"
    ],
    "preprocessed": "= (< 5 6) (< 0 2);",
    "code": "2113221032101321103322103203210332233",
    "parse": [
      "=",
      [
        "<",
        "5",
        "6"
      ],
      [
        "<",
        "0",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF135;&#xF138;&#xF139;&#xF121;&#xF132;&#xF135;&#xF133;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 454
  },
  {
    "role": "code",
    "lines": [
      "= (= 5 1) (> 2 4);"
    ],
    "preprocessed": "= (= 5 1) (> 2 4);",
    "code": "21132211321013213322100321032100332233",
    "parse": [
      "=",
      [
        "=",
        "5",
        "1"
      ],
      [
        ">",
        "2",
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF136;&#xF138;&#xF134;&#xF121;&#xF132;&#xF137;&#xF135;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 455
  },
  {
    "role": "code",
    "lines": [
      "= (> 4 6) (> 1 3);"
    ],
    "preprocessed": "= (> 4 6) (> 1 3);",
    "code": "211322100321003211033221003213211332233",
    "parse": [
      "=",
      [
        ">",
        "4",
        "6"
      ],
      [
        ">",
        "1",
        "3"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF137;&#xF137;&#xF139;&#xF121;&#xF132;&#xF137;&#xF134;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 456
  },
  {
    "role": "code",
    "lines": [
      "= (> 2 5) (= 5 3);"
    ],
    "preprocessed": "= (> 2 5) (= 5 3);",
    "code": "211322100321032101332211321013211332233",
    "parse": [
      "=",
      [
        ">",
        "2",
        "5"
      ],
      [
        "=",
        "5",
        "3"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF137;&#xF135;&#xF138;&#xF121;&#xF132;&#xF136;&#xF138;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 457
  },
  {
    "role": "code",
    "lines": [
      "= (< 2 1) (< 6 4);"
    ],
    "preprocessed": "= (< 2 1) (< 6 4);",
    "code": "2113221032103213322103211032100332233",
    "parse": [
      "=",
      [
        "<",
        "2",
        "1"
      ],
      [
        "<",
        "6",
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF135;&#xF135;&#xF134;&#xF121;&#xF132;&#xF135;&#xF139;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 458
  },
  {
    "role": "code",
    "lines": [
      "= (< 6 2) (> 4 5);"
    ],
    "preprocessed": "= (< 6 2) (> 4 5);",
    "code": "2113221032110321033221003210032101332233",
    "parse": [
      "=",
      [
        "<",
        "6",
        "2"
      ],
      [
        ">",
        "4",
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF135;&#xF139;&#xF135;&#xF121;&#xF132;&#xF137;&#xF137;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 459
  },
  {
    "role": "code",
    "lines": [
      "not | = (> 0 1) (= 0 0);"
    ],
    "preprocessed": "not | = (> 0 1) (= 0 0);",
    "code": "21013123211322100320321332211320320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          ">",
          "0",
          "1"
        ],
        [
          "=",
          "0",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF137;&#xF133;&#xF134;&#xF121;&#xF132;&#xF136;&#xF133;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 460
  },
  {
    "role": "code",
    "lines": [
      "not | = (< 6 4) (= 5 5);"
    ],
    "preprocessed": "not | = (< 6 4) (= 5 5);",
    "code": "210131232113221032110321003322113210132101332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "<",
          "6",
          "4"
        ],
        [
          "=",
          "5",
          "5"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF135;&#xF139;&#xF137;&#xF121;&#xF132;&#xF136;&#xF138;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 461
  },
  {
    "role": "code",
    "lines": [
      "not | = (= 4 2) (> 1 0);"
    ],
    "preprocessed": "not | = (= 4 2) (> 1 0);",
    "code": "21013123211322113210032103322100321320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "=",
          "4",
          "2"
        ],
        [
          ">",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF136;&#xF137;&#xF135;&#xF121;&#xF132;&#xF137;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 462
  },
  {
    "role": "code",
    "lines": [
      "not | = (> 5 6) (< 1 3);"
    ],
    "preprocessed": "not | = (> 5 6) (< 1 3);",
    "code": "2101312321132210032101321103322103213211332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          ">",
          "5",
          "6"
        ],
        [
          "<",
          "1",
          "3"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF137;&#xF138;&#xF139;&#xF121;&#xF132;&#xF135;&#xF134;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 463
  },
  {
    "role": "code",
    "lines": [
      "not | = (> 3 6) (> 5 4);"
    ],
    "preprocessed": "not | = (> 3 6) (> 5 4);",
    "code": "2101312321132210032113211033221003210132100332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          ">",
          "3",
          "6"
        ],
        [
          ">",
          "5",
          "4"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF137;&#xF136;&#xF139;&#xF121;&#xF132;&#xF137;&#xF138;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 464
  },
  {
    "role": "code",
    "lines": [
      "not | = (= 2 2) (> 0 3);"
    ],
    "preprocessed": "not | = (= 2 2) (> 0 3);",
    "code": "21013123211322113210321033221003203211332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "=",
          "2",
          "2"
        ],
        [
          ">",
          "0",
          "3"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF136;&#xF135;&#xF135;&#xF121;&#xF132;&#xF137;&#xF133;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 465
  },
  {
    "role": "code",
    "lines": [
      "not | = (> 5 2) (= 2 3);"
    ],
    "preprocessed": "not | = (> 5 2) (= 2 3);",
    "code": "2101312321132210032101321033221132103211332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          ">",
          "5",
          "2"
        ],
        [
          "=",
          "2",
          "3"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF137;&#xF138;&#xF135;&#xF121;&#xF132;&#xF136;&#xF135;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 466
  },
  {
    "role": "code",
    "lines": [
      "not | = (> 4 1) (< 2 0);"
    ],
    "preprocessed": "not | = (> 4 1) (< 2 0);",
    "code": "21013123211322100321003213322103210320332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          ">",
          "4",
          "1"
        ],
        [
          "<",
          "2",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF137;&#xF137;&#xF134;&#xF121;&#xF132;&#xF135;&#xF135;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 467
  },
  {
    "role": "code",
    "lines": [
      "not | = (= 2 2) (< 3 2);"
    ],
    "preprocessed": "not | = (= 2 2) (< 3 2);",
    "code": "21013123211322113210321033221032113210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "=",
          "2",
          "2"
        ],
        [
          "<",
          "3",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF136;&#xF135;&#xF135;&#xF121;&#xF132;&#xF135;&#xF136;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 468
  },
  {
    "role": "code",
    "lines": [
      "not | = (< 0 1) (> 3 4);"
    ],
    "preprocessed": "not | = (< 0 1) (> 3 4);",
    "code": "21013123211322103203213322100321132100332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "<",
          "0",
          "1"
        ],
        [
          ">",
          "3",
          "4"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF135;&#xF133;&#xF134;&#xF121;&#xF132;&#xF137;&#xF136;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 469
  },
  {
    "role": "file",
    "lines": [
      "== COS_If =="
    ],
    "stanza": 470
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Now that we spent some time looking at `true` and `false`, let's show",
      "a way to build conditional expressions.  We start with an `if` expression,",
      "of the form `if CONDITION E1 E2`, which evaluates to `E1` if the `CONDITION`",
      "is `true`, otherwise `E2`.",
      "",
      "If the listener is trying to map the language we are describing onto",
      "their own system of computation, it is pretty important that `if` be",
      "\"lazy,\" and completely skip evaluating the branch not taken.  That",
      "should become clear fairly soon if they were to try an \"eager\" `if`.",
      ""
    ],
    "section_description": "show conditionals",
    "section_category": "MATH",
    "section_index": 11,
    "stanza": 471
  },
  {
    "role": "code",
    "lines": [
      "intro if;"
    ],
    "preprocessed": "intro if;",
    "code": "21001032111132233",
    "parse": [
      "intro",
      "if"
    ],
    "spider": "&#xF123;&#xF113;&#xF142;&#xF132;&#xF143;&#xF121;",
    "stanza": 472
  },
  {
    "role": "code",
    "lines": [
      "= 28 | if (< 3 0) 24 28;"
    ],
    "preprocessed": "= 28 | if (< 3 0) 24 28;",
    "code": "211321110031232111132210321132033211000321110032233",
    "parse": [
      "=",
      "28",
      [
        -1,
        "if",
        [
          "<",
          "3",
          "0"
        ],
        "24",
        "28"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF11D;&#xF101;&#xF143;&#xF142;&#xF132;&#xF135;&#xF136;&#xF133;&#xF121;&#xF123;&#xF119;&#xF123;&#xF11D;&#xF132;&#xF143;&#xF121;",
    "stanza": 473
  },
  {
    "role": "code",
    "lines": [
      "= 27 | if (> 2 4) 29 27;"
    ],
    "preprocessed": "= 27 | if (> 2 4) 29 27;",
    "code": "211321101131232111132210032103210033211101321101132233",
    "parse": [
      "=",
      "27",
      [
        -1,
        "if",
        [
          ">",
          "2",
          "4"
        ],
        "29",
        "27"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF11C;&#xF101;&#xF143;&#xF142;&#xF132;&#xF137;&#xF135;&#xF137;&#xF121;&#xF123;&#xF11E;&#xF123;&#xF11C;&#xF132;&#xF143;&#xF121;",
    "stanza": 474
  },
  {
    "role": "code",
    "lines": [
      "= 29 | if (= 3 1) 20 29;"
    ],
    "preprocessed": "= 29 | if (= 3 1) 20 29;",
    "code": "211321110131232111132211321132133210100321110132233",
    "parse": [
      "=",
      "29",
      [
        -1,
        "if",
        [
          "=",
          "3",
          "1"
        ],
        "20",
        "29"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF11E;&#xF101;&#xF143;&#xF142;&#xF132;&#xF136;&#xF136;&#xF134;&#xF121;&#xF123;&#xF115;&#xF123;&#xF11E;&#xF132;&#xF143;&#xF121;",
    "stanza": 475
  },
  {
    "role": "code",
    "lines": [
      "= 21 | if (= 0 0) 21 26;"
    ],
    "preprocessed": "= 21 | if (= 0 0) 21 26;",
    "code": "21132101013123211113221132032033210101321101032233",
    "parse": [
      "=",
      "21",
      [
        -1,
        "if",
        [
          "=",
          "0",
          "0"
        ],
        "21",
        "26"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF116;&#xF101;&#xF143;&#xF142;&#xF132;&#xF136;&#xF133;&#xF133;&#xF121;&#xF123;&#xF116;&#xF123;&#xF11B;&#xF132;&#xF143;&#xF121;",
    "stanza": 476
  },
  {
    "role": "code",
    "lines": [
      "= 29 | if (> 5 3) 29 23;"
    ],
    "preprocessed": "= 29 | if (> 5 3) 29 23;",
    "code": "211321110131232111132210032101321133211101321011132233",
    "parse": [
      "=",
      "29",
      [
        -1,
        "if",
        [
          ">",
          "5",
          "3"
        ],
        "29",
        "23"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF11E;&#xF101;&#xF143;&#xF142;&#xF132;&#xF137;&#xF138;&#xF136;&#xF121;&#xF123;&#xF11E;&#xF123;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 477
  },
  {
    "role": "code",
    "lines": [
      "= 26 | if (> 1 0) 26 22;"
    ],
    "preprocessed": "= 26 | if (> 1 0) 26 22;",
    "code": "211321101031232111132210032132033211010321011032233",
    "parse": [
      "=",
      "26",
      [
        -1,
        "if",
        [
          ">",
          "1",
          "0"
        ],
        "26",
        "22"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF11B;&#xF101;&#xF143;&#xF142;&#xF132;&#xF137;&#xF134;&#xF133;&#xF121;&#xF123;&#xF11B;&#xF123;&#xF117;&#xF132;&#xF143;&#xF121;",
    "stanza": 478
  },
  {
    "role": "code",
    "lines": [
      "= 21 | if (= 3 3) 21 27;"
    ],
    "preprocessed": "= 21 | if (= 3 3) 21 27;",
    "code": "2113210101312321111322113211321133210101321101132233",
    "parse": [
      "=",
      "21",
      [
        -1,
        "if",
        [
          "=",
          "3",
          "3"
        ],
        "21",
        "27"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF116;&#xF101;&#xF143;&#xF142;&#xF132;&#xF136;&#xF136;&#xF136;&#xF121;&#xF123;&#xF116;&#xF123;&#xF11C;&#xF132;&#xF143;&#xF121;",
    "stanza": 479
  },
  {
    "role": "code",
    "lines": [
      "= 23 | if (> 4 4) 25 23;"
    ],
    "preprocessed": "= 23 | if (> 4 4) 25 23;",
    "code": "2113210111312321111322100321003210033211001321011132233",
    "parse": [
      "=",
      "23",
      [
        -1,
        "if",
        [
          ">",
          "4",
          "4"
        ],
        "25",
        "23"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF118;&#xF101;&#xF143;&#xF142;&#xF132;&#xF137;&#xF137;&#xF137;&#xF121;&#xF123;&#xF11A;&#xF123;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 480
  },
  {
    "role": "doc",
    "lines": [
      "We can now define more interesting functions.  Here's the maximum of two integers:"
    ],
    "stanza": 481
  },
  {
    "role": "code",
    "lines": [
      "define max | ? x | ? y | if (> $x $y) $x $y;"
    ],
    "preprocessed": "define max | ? x | ? y | if (> $x $y) $x $y;",
    "code": "2110132111011312321100321001113123211003211001131232111132210030232100111302321100113302321001113023211001132233",
    "parse": [
      "define",
      "max",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              ">",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ],
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF125;&#xF11C;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF142;&#xF132;&#xF137;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 482
  },
  {
    "role": "code",
    "lines": [
      "= 0 | max 0 0;"
    ],
    "preprocessed": "= 0 | max 0 0;",
    "code": "2113203123211101132032032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "max",
        "0",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF125;&#xF11C;&#xF133;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 483
  },
  {
    "role": "code",
    "lines": [
      "= 1 | max 0 1;"
    ],
    "preprocessed": "= 1 | max 0 1;",
    "code": "2113213123211101132032132233",
    "parse": [
      "=",
      "1",
      [
        -1,
        "max",
        "0",
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF125;&#xF11C;&#xF133;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 484
  },
  {
    "role": "code",
    "lines": [
      "= 2 | max 0 2;"
    ],
    "preprocessed": "= 2 | max 0 2;",
    "code": "211321031232111011320321032233",
    "parse": [
      "=",
      "2",
      [
        -1,
        "max",
        "0",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF101;&#xF143;&#xF125;&#xF11C;&#xF133;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 485
  },
  {
    "role": "code",
    "lines": [
      "= 1 | max 1 0;"
    ],
    "preprocessed": "= 1 | max 1 0;",
    "code": "2113213123211101132132032233",
    "parse": [
      "=",
      "1",
      [
        -1,
        "max",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF125;&#xF11C;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 486
  },
  {
    "role": "code",
    "lines": [
      "= 1 | max 1 1;"
    ],
    "preprocessed": "= 1 | max 1 1;",
    "code": "2113213123211101132132132233",
    "parse": [
      "=",
      "1",
      [
        -1,
        "max",
        "1",
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF125;&#xF11C;&#xF134;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 487
  },
  {
    "role": "code",
    "lines": [
      "= 2 | max 1 2;"
    ],
    "preprocessed": "= 2 | max 1 2;",
    "code": "211321031232111011321321032233",
    "parse": [
      "=",
      "2",
      [
        -1,
        "max",
        "1",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF101;&#xF143;&#xF125;&#xF11C;&#xF134;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 488
  },
  {
    "role": "code",
    "lines": [
      "= 2 | max 2 0;"
    ],
    "preprocessed": "= 2 | max 2 0;",
    "code": "211321031232111011321032032233",
    "parse": [
      "=",
      "2",
      [
        -1,
        "max",
        "2",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF101;&#xF143;&#xF125;&#xF11C;&#xF135;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 489
  },
  {
    "role": "code",
    "lines": [
      "= 2 | max 2 1;"
    ],
    "preprocessed": "= 2 | max 2 1;",
    "code": "211321031232111011321032132233",
    "parse": [
      "=",
      "2",
      [
        -1,
        "max",
        "2",
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF101;&#xF143;&#xF125;&#xF11C;&#xF135;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 490
  },
  {
    "role": "code",
    "lines": [
      "= 2 | max 2 2;"
    ],
    "preprocessed": "= 2 | max 2 2;",
    "code": "2113210312321110113210321032233",
    "parse": [
      "=",
      "2",
      [
        -1,
        "max",
        "2",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF101;&#xF143;&#xF125;&#xF11C;&#xF135;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 491
  },
  {
    "role": "doc",
    "lines": [
      "Now the minimum of two integers:"
    ],
    "stanza": 492
  },
  {
    "role": "code",
    "lines": [
      "define min | ? x | ? y | if (< $x $y) $x $y;"
    ],
    "preprocessed": "define min | ? x | ? y | if (< $x $y) $x $y;",
    "code": "211013211110031232110032100111312321100321100113123211113221030232100111302321100113302321001113023211001132233",
    "parse": [
      "define",
      "min",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              "<",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ],
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF125;&#xF11D;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF142;&#xF132;&#xF135;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 493
  },
  {
    "role": "code",
    "lines": [
      "= 0 | min 0 0;"
    ],
    "preprocessed": "= 0 | min 0 0;",
    "code": "2113203123211110032032032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "min",
        "0",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF125;&#xF11D;&#xF133;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 494
  },
  {
    "role": "code",
    "lines": [
      "= 0 | min 0 1;"
    ],
    "preprocessed": "= 0 | min 0 1;",
    "code": "2113203123211110032032132233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "min",
        "0",
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF125;&#xF11D;&#xF133;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 495
  },
  {
    "role": "code",
    "lines": [
      "= 0 | min 0 2;"
    ],
    "preprocessed": "= 0 | min 0 2;",
    "code": "21132031232111100320321032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "min",
        "0",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF125;&#xF11D;&#xF133;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 496
  },
  {
    "role": "code",
    "lines": [
      "= 0 | min 1 0;"
    ],
    "preprocessed": "= 0 | min 1 0;",
    "code": "2113203123211110032132032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "min",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF125;&#xF11D;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 497
  },
  {
    "role": "code",
    "lines": [
      "= 1 | min 1 1;"
    ],
    "preprocessed": "= 1 | min 1 1;",
    "code": "2113213123211110032132132233",
    "parse": [
      "=",
      "1",
      [
        -1,
        "min",
        "1",
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF125;&#xF11D;&#xF134;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 498
  },
  {
    "role": "code",
    "lines": [
      "= 1 | min 1 2;"
    ],
    "preprocessed": "= 1 | min 1 2;",
    "code": "21132131232111100321321032233",
    "parse": [
      "=",
      "1",
      [
        -1,
        "min",
        "1",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF125;&#xF11D;&#xF134;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 499
  },
  {
    "role": "code",
    "lines": [
      "= 0 | min 2 0;"
    ],
    "preprocessed": "= 0 | min 2 0;",
    "code": "21132031232111100321032032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "min",
        "2",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF125;&#xF11D;&#xF135;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 500
  },
  {
    "role": "code",
    "lines": [
      "= 1 | min 2 1;"
    ],
    "preprocessed": "= 1 | min 2 1;",
    "code": "21132131232111100321032132233",
    "parse": [
      "=",
      "1",
      [
        -1,
        "min",
        "2",
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF125;&#xF11D;&#xF135;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 501
  },
  {
    "role": "code",
    "lines": [
      "= 2 | min 2 2;"
    ],
    "preprocessed": "= 2 | min 2 2;",
    "code": "2113210312321111003210321032233",
    "parse": [
      "=",
      "2",
      [
        -1,
        "min",
        "2",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF101;&#xF143;&#xF125;&#xF11D;&#xF135;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 502
  },
  {
    "role": "doc",
    "lines": [
      "Why should human CS students be the only ones the factorial example is inflicted on..."
    ],
    "stanza": 503
  },
  {
    "role": "code",
    "lines": [
      "define factorial | ? x | if (< $x 1) 1 | * $x | factorial | - $x 1;"
    ],
    "preprocessed": "define factorial | ? x | if (< $x 1) 1 | * $x | factorial | - $x 1;",
    "code": "2110132111101312321100321001113123211113221030232100111321332131232100130232100111312321111013123210113023210011132132233",
    "parse": [
      "define",
      "factorial",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "<",
            [
              -2,
              "x"
            ],
            "1"
          ],
          "1",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -1,
              "factorial",
              [
                -1,
                "-",
                [
                  -2,
                  "x"
                ],
                "1"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF125;&#xF11E;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF142;&#xF132;&#xF135;&#xF100;&#xF143;&#xF124;&#xF118;&#xF134;&#xF121;&#xF134;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF101;&#xF143;&#xF125;&#xF11E;&#xF101;&#xF143;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 504
  },
  {
    "role": "code",
    "lines": [
      "= 1 | factorial 1;"
    ],
    "preprocessed": "= 1 | factorial 1;",
    "code": "2113213123211110132132233",
    "parse": [
      "=",
      "1",
      [
        -1,
        "factorial",
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF125;&#xF11E;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 505
  },
  {
    "role": "code",
    "lines": [
      "= 2 | factorial 2;"
    ],
    "preprocessed": "= 2 | factorial 2;",
    "code": "211321031232111101321032233",
    "parse": [
      "=",
      "2",
      [
        -1,
        "factorial",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF101;&#xF143;&#xF125;&#xF11E;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 506
  },
  {
    "role": "code",
    "lines": [
      "= 6 | factorial 3;"
    ],
    "preprocessed": "= 6 | factorial 3;",
    "code": "2113211031232111101321132233",
    "parse": [
      "=",
      "6",
      [
        -1,
        "factorial",
        "3"
      ]
    ],
    "spider": "&#xF136;&#xF139;&#xF101;&#xF143;&#xF125;&#xF11E;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 507
  },
  {
    "role": "code",
    "lines": [
      "= 24 | factorial 4;"
    ],
    "preprocessed": "= 24 | factorial 4;",
    "code": "2113211000312321111013210032233",
    "parse": [
      "=",
      "24",
      [
        -1,
        "factorial",
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF119;&#xF101;&#xF143;&#xF125;&#xF11E;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 508
  },
  {
    "role": "code",
    "lines": [
      "= 120 | factorial 5;"
    ],
    "preprocessed": "= 120 | factorial 5;",
    "code": "211321111000312321111013210132233",
    "parse": [
      "=",
      "120",
      [
        -1,
        "factorial",
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF129;&#xF119;&#xF101;&#xF143;&#xF125;&#xF11E;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 509
  },
  {
    "role": "file",
    "lines": [
      "== COS_AndLogic =="
    ],
    "stanza": 510
  },
  {
    "role": "doc",
    "lines": [
      "",
      "We continue introducing symbols related to math and logic.  Now we will often",
      "be able to both define them and give examples, so the listener has multiple",
      "paths to understanding.",
      "",
      "Here is `and`, which evaluates to `true` if both its two arguments are `true`,",
      "and `false` otherwise.  We don't talk about wbat happens if you pass it integers",
      "or something funky.  There'd be value in getting into talking about types, but",
      "it might be a bit much just now.",
      ""
    ],
    "section_description": "introduce the AND logical operator",
    "section_category": "MATH",
    "section_index": 12,
    "stanza": 511
  },
  {
    "role": "code",
    "lines": [
      "intro and;"
    ],
    "preprocessed": "intro and;",
    "code": "2100103211032233",
    "parse": [
      "intro",
      "and"
    ],
    "spider": "&#xF123;&#xF113;&#xF139;&#xF132;&#xF143;&#xF121;",
    "stanza": 512
  },
  {
    "role": "code",
    "lines": [
      "define and | ? x | ? y | if $x $y $false;"
    ],
    "preprocessed": "define and | ? x | ? y | if $x $y $false;",
    "code": "21101321103123211003210011131232110032110011312321111302321001113023211001130232032233",
    "parse": [
      "define",
      "and",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ],
            [
              -2,
              "false"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF139;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF142;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 513
  },
  {
    "role": "code",
    "lines": [
      "not | and $false $false;"
    ],
    "preprocessed": "not | and $false $false;",
    "code": "21013123211030232030232032233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          -2,
          "false"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF100;&#xF143;&#xF133;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 514
  },
  {
    "role": "code",
    "lines": [
      "not | and $false $true;"
    ],
    "preprocessed": "not | and $false $true;",
    "code": "21013123211030232030232132233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          -2,
          "false"
        ],
        [
          -2,
          "true"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF100;&#xF143;&#xF133;&#xF100;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 515
  },
  {
    "role": "code",
    "lines": [
      "not | and $true $false;"
    ],
    "preprocessed": "not | and $true $false;",
    "code": "21013123211030232130232032233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          -2,
          "true"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF100;&#xF143;&#xF134;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 516
  },
  {
    "role": "code",
    "lines": [
      "and $true $true;"
    ],
    "preprocessed": "and $true $true;",
    "code": "211030232130232132233",
    "parse": [
      "and",
      [
        -2,
        "true"
      ],
      [
        -2,
        "true"
      ]
    ],
    "spider": "&#xF139;&#xF100;&#xF143;&#xF134;&#xF100;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 517
  },
  {
    "role": "code",
    "lines": [
      "= $false | and $false $false;"
    ],
    "preprocessed": "= $false | and $false $false;",
    "code": "2113023203123211030232030232032233",
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -1,
        "and",
        [
          -2,
          "false"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF133;&#xF101;&#xF143;&#xF139;&#xF100;&#xF143;&#xF133;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 518
  },
  {
    "role": "code",
    "lines": [
      "= $false | and $false $true;"
    ],
    "preprocessed": "= $false | and $false $true;",
    "code": "2113023203123211030232030232132233",
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -1,
        "and",
        [
          -2,
          "false"
        ],
        [
          -2,
          "true"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF133;&#xF101;&#xF143;&#xF139;&#xF100;&#xF143;&#xF133;&#xF100;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 519
  },
  {
    "role": "code",
    "lines": [
      "= $false | and $true $false;"
    ],
    "preprocessed": "= $false | and $true $false;",
    "code": "2113023203123211030232130232032233",
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -1,
        "and",
        [
          -2,
          "true"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF133;&#xF101;&#xF143;&#xF139;&#xF100;&#xF143;&#xF134;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 520
  },
  {
    "role": "code",
    "lines": [
      "= $true | and $true $true;"
    ],
    "preprocessed": "= $true | and $true $true;",
    "code": "2113023213123211030232130232132233",
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        -1,
        "and",
        [
          -2,
          "true"
        ],
        [
          -2,
          "true"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF134;&#xF101;&#xF143;&#xF139;&#xF100;&#xF143;&#xF134;&#xF100;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 521
  },
  {
    "role": "code",
    "lines": [
      "and (= 2 2) (> 4 2);"
    ],
    "preprocessed": "and (= 2 2) (> 4 2);",
    "code": "211032211321032103322100321003210332233",
    "parse": [
      "and",
      [
        "=",
        "2",
        "2"
      ],
      [
        ">",
        "4",
        "2"
      ]
    ],
    "spider": "&#xF139;&#xF132;&#xF136;&#xF135;&#xF135;&#xF121;&#xF132;&#xF137;&#xF137;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 522
  },
  {
    "role": "code",
    "lines": [
      "and (= 1 1) (> 6 4);"
    ],
    "preprocessed": "and (= 1 1) (> 6 4);",
    "code": "21103221132132133221003211032100332233",
    "parse": [
      "and",
      [
        "=",
        "1",
        "1"
      ],
      [
        ">",
        "6",
        "4"
      ]
    ],
    "spider": "&#xF139;&#xF132;&#xF136;&#xF134;&#xF134;&#xF121;&#xF132;&#xF137;&#xF139;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 523
  },
  {
    "role": "code",
    "lines": [
      "and (< 3 4) (= 5 5);"
    ],
    "preprocessed": "and (< 3 4) (= 5 5);",
    "code": "2110322103211321003322113210132101332233",
    "parse": [
      "and",
      [
        "<",
        "3",
        "4"
      ],
      [
        "=",
        "5",
        "5"
      ]
    ],
    "spider": "&#xF139;&#xF132;&#xF135;&#xF136;&#xF137;&#xF121;&#xF132;&#xF136;&#xF138;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 524
  },
  {
    "role": "code",
    "lines": [
      "and (= 3 3) (= 4 4);"
    ],
    "preprocessed": "and (= 3 3) (= 4 4);",
    "code": "211032211321132113322113210032100332233",
    "parse": [
      "and",
      [
        "=",
        "3",
        "3"
      ],
      [
        "=",
        "4",
        "4"
      ]
    ],
    "spider": "&#xF139;&#xF132;&#xF136;&#xF136;&#xF136;&#xF121;&#xF132;&#xF136;&#xF137;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 525
  },
  {
    "role": "code",
    "lines": [
      "and (= 3 3) (= 0 0);"
    ],
    "preprocessed": "and (= 3 3) (= 0 0);",
    "code": "21103221132113211332211320320332233",
    "parse": [
      "and",
      [
        "=",
        "3",
        "3"
      ],
      [
        "=",
        "0",
        "0"
      ]
    ],
    "spider": "&#xF139;&#xF132;&#xF136;&#xF136;&#xF136;&#xF121;&#xF132;&#xF136;&#xF133;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 526
  },
  {
    "role": "code",
    "lines": [
      "and (< 5 7) (> 5 3);"
    ],
    "preprocessed": "and (< 5 7) (> 5 3);",
    "code": "21103221032101321113322100321013211332233",
    "parse": [
      "and",
      [
        "<",
        "5",
        "7"
      ],
      [
        ">",
        "5",
        "3"
      ]
    ],
    "spider": "&#xF139;&#xF132;&#xF135;&#xF138;&#xF13A;&#xF121;&#xF132;&#xF137;&#xF138;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 527
  },
  {
    "role": "code",
    "lines": [
      "and (> 5 4) (> 1 0);"
    ],
    "preprocessed": "and (> 5 4) (> 1 0);",
    "code": "211032210032101321003322100321320332233",
    "parse": [
      "and",
      [
        ">",
        "5",
        "4"
      ],
      [
        ">",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF139;&#xF132;&#xF137;&#xF138;&#xF137;&#xF121;&#xF132;&#xF137;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 528
  },
  {
    "role": "code",
    "lines": [
      "and (> 3 0) (= 3 3);"
    ],
    "preprocessed": "and (> 3 0) (= 3 3);",
    "code": "2110322100321132033221132113211332233",
    "parse": [
      "and",
      [
        ">",
        "3",
        "0"
      ],
      [
        "=",
        "3",
        "3"
      ]
    ],
    "spider": "&#xF139;&#xF132;&#xF137;&#xF136;&#xF133;&#xF121;&#xF132;&#xF136;&#xF136;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 529
  },
  {
    "role": "code",
    "lines": [
      "and (< 3 4) (< 3 6);"
    ],
    "preprocessed": "and (< 3 4) (< 3 6);",
    "code": "211032210321132100332210321132110332233",
    "parse": [
      "and",
      [
        "<",
        "3",
        "4"
      ],
      [
        "<",
        "3",
        "6"
      ]
    ],
    "spider": "&#xF139;&#xF132;&#xF135;&#xF136;&#xF137;&#xF121;&#xF132;&#xF135;&#xF136;&#xF139;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 530
  },
  {
    "role": "code",
    "lines": [
      "and (> 5 4) (> 5 4);"
    ],
    "preprocessed": "and (> 5 4) (> 5 4);",
    "code": "2110322100321013210033221003210132100332233",
    "parse": [
      "and",
      [
        ">",
        "5",
        "4"
      ],
      [
        ">",
        "5",
        "4"
      ]
    ],
    "spider": "&#xF139;&#xF132;&#xF137;&#xF138;&#xF137;&#xF121;&#xF132;&#xF137;&#xF138;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 531
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 6 4) (< 3 1);"
    ],
    "preprocessed": "not | and (> 6 4) (< 3 1);",
    "code": "21013123211032210032110321003322103211321332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          "6",
          "4"
        ],
        [
          "<",
          "3",
          "1"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF137;&#xF139;&#xF137;&#xF121;&#xF132;&#xF135;&#xF136;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 532
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 3 1) (> 3 3);"
    ],
    "preprocessed": "not | and (> 3 1) (> 3 3);",
    "code": "2101312321103221003211321332210032113211332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          "3",
          "1"
        ],
        [
          ">",
          "3",
          "3"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF137;&#xF136;&#xF134;&#xF121;&#xF132;&#xF137;&#xF136;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 533
  },
  {
    "role": "code",
    "lines": [
      "not | and (= 0 0) (= 5 4);"
    ],
    "preprocessed": "not | and (= 0 0) (= 5 4);",
    "code": "210131232110322113203203322113210132100332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "=",
          "0",
          "0"
        ],
        [
          "=",
          "5",
          "4"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF136;&#xF133;&#xF133;&#xF121;&#xF132;&#xF136;&#xF138;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 534
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 2 4) (> 4 6);"
    ],
    "preprocessed": "not | and (< 2 4) (> 4 6);",
    "code": "2101312321103221032103210033221003210032110332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "2",
          "4"
        ],
        [
          ">",
          "4",
          "6"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF135;&#xF135;&#xF137;&#xF121;&#xF132;&#xF137;&#xF137;&#xF139;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 535
  },
  {
    "role": "code",
    "lines": [
      "not | and (= 3 3) (= 3 1);"
    ],
    "preprocessed": "not | and (= 3 3) (= 3 1);",
    "code": "21013123211032211321132113322113211321332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "=",
          "3",
          "3"
        ],
        [
          "=",
          "3",
          "1"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF136;&#xF136;&#xF136;&#xF121;&#xF132;&#xF136;&#xF136;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 536
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 1 5) (< 3 6);"
    ],
    "preprocessed": "not | and (> 1 5) (< 3 6);",
    "code": "21013123211032210032132101332210321132110332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          "1",
          "5"
        ],
        [
          "<",
          "3",
          "6"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF137;&#xF134;&#xF138;&#xF121;&#xF132;&#xF135;&#xF136;&#xF139;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 537
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 6 2) (= 2 2);"
    ],
    "preprocessed": "not | and (< 6 2) (= 2 2);",
    "code": "2101312321103221032110321033221132103210332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "6",
          "2"
        ],
        [
          "=",
          "2",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF135;&#xF139;&#xF135;&#xF121;&#xF132;&#xF136;&#xF135;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 538
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 2 5) (= 5 5);"
    ],
    "preprocessed": "not | and (> 2 5) (= 5 5);",
    "code": "2101312321103221003210321013322113210132101332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          "2",
          "5"
        ],
        [
          "=",
          "5",
          "5"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF137;&#xF135;&#xF138;&#xF121;&#xF132;&#xF136;&#xF138;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 539
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 6 2) (= 3 3);"
    ],
    "preprocessed": "not | and (< 6 2) (= 3 3);",
    "code": "2101312321103221032110321033221132113211332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "6",
          "2"
        ],
        [
          "=",
          "3",
          "3"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF135;&#xF139;&#xF135;&#xF121;&#xF132;&#xF136;&#xF136;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 540
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 4 3) (> 5 2);"
    ],
    "preprocessed": "not | and (< 4 3) (> 5 2);",
    "code": "210131232110322103210032113322100321013210332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "4",
          "3"
        ],
        [
          ">",
          "5",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF135;&#xF137;&#xF136;&#xF121;&#xF132;&#xF137;&#xF138;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 541
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 5 4) (= 1 2);"
    ],
    "preprocessed": "not | and (< 5 4) (= 1 2);",
    "code": "2101312321103221032101321003322113213210332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "5",
          "4"
        ],
        [
          "=",
          "1",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF135;&#xF138;&#xF137;&#xF121;&#xF132;&#xF136;&#xF134;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 542
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 6 4) (= 5 1);"
    ],
    "preprocessed": "not | and (< 6 4) (= 5 1);",
    "code": "21013123211032210321103210033221132101321332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "6",
          "4"
        ],
        [
          "=",
          "5",
          "1"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF135;&#xF139;&#xF137;&#xF121;&#xF132;&#xF136;&#xF138;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 543
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 2 6) (= 1 5);"
    ],
    "preprocessed": "not | and (> 2 6) (= 1 5);",
    "code": "21013123211032210032103211033221132132101332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          "2",
          "6"
        ],
        [
          "=",
          "1",
          "5"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF137;&#xF135;&#xF139;&#xF121;&#xF132;&#xF136;&#xF134;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 544
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 6 3) (= 2 3);"
    ],
    "preprocessed": "not | and (< 6 3) (= 2 3);",
    "code": "2101312321103221032110321133221132103211332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "6",
          "3"
        ],
        [
          "=",
          "2",
          "3"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF135;&#xF139;&#xF136;&#xF121;&#xF132;&#xF136;&#xF135;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 545
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 6 4) (> 0 1);"
    ],
    "preprocessed": "not | and (< 6 4) (> 0 1);",
    "code": "2101312321103221032110321003322100320321332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "6",
          "4"
        ],
        [
          ">",
          "0",
          "1"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF135;&#xF139;&#xF137;&#xF121;&#xF132;&#xF137;&#xF133;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 546
  },
  {
    "role": "code",
    "lines": [
      "not | and (= 3 5) (< 4 1);"
    ],
    "preprocessed": "not | and (= 3 5) (< 4 1);",
    "code": "2101312321103221132113210133221032100321332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "=",
          "3",
          "5"
        ],
        [
          "<",
          "4",
          "1"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF136;&#xF136;&#xF138;&#xF121;&#xF132;&#xF135;&#xF137;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 547
  },
  {
    "role": "code",
    "lines": [
      "not | and (= 4 1) (< 4 2);"
    ],
    "preprocessed": "not | and (= 4 1) (< 4 2);",
    "code": "2101312321103221132100321332210321003210332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "=",
          "4",
          "1"
        ],
        [
          "<",
          "4",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF136;&#xF137;&#xF134;&#xF121;&#xF132;&#xF135;&#xF137;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 548
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 6 3) (= 3 0);"
    ],
    "preprocessed": "not | and (< 6 3) (= 3 0);",
    "code": "210131232110322103211032113322113211320332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "6",
          "3"
        ],
        [
          "=",
          "3",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF135;&#xF139;&#xF136;&#xF121;&#xF132;&#xF136;&#xF136;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 549
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 4 2) (< 4 6);"
    ],
    "preprocessed": "not | and (< 4 2) (< 4 6);",
    "code": "210131232110322103210032103322103210032110332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "4",
          "2"
        ],
        [
          "<",
          "4",
          "6"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF135;&#xF137;&#xF135;&#xF121;&#xF132;&#xF135;&#xF137;&#xF139;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 550
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 4 1) (< 5 2);"
    ],
    "preprocessed": "not | and (> 4 1) (< 5 2);",
    "code": "21013123211032210032100321332210321013210332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          "4",
          "1"
        ],
        [
          "<",
          "5",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF137;&#xF137;&#xF134;&#xF121;&#xF132;&#xF135;&#xF138;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 551
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 0 1) (> 7 5);"
    ],
    "preprocessed": "not | and (> 0 1) (> 7 5);",
    "code": "21013123211032210032032133221003211132101332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          "0",
          "1"
        ],
        [
          ">",
          "7",
          "5"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF137;&#xF133;&#xF134;&#xF121;&#xF132;&#xF137;&#xF13A;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 552
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 3 4) (> 3 6);"
    ],
    "preprocessed": "not | and (< 3 4) (> 3 6);",
    "code": "210131232110322103211321003322100321132110332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "3",
          "4"
        ],
        [
          ">",
          "3",
          "6"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF135;&#xF136;&#xF137;&#xF121;&#xF132;&#xF137;&#xF136;&#xF139;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 553
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 1 2) (> 6 4);"
    ],
    "preprocessed": "not | and (> 1 2) (> 6 4);",
    "code": "210131232110322100321321033221003211032100332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          "1",
          "2"
        ],
        [
          ">",
          "6",
          "4"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF137;&#xF134;&#xF135;&#xF121;&#xF132;&#xF137;&#xF139;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 554
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 0 1) (= 4 5);"
    ],
    "preprocessed": "not | and (< 0 1) (= 4 5);",
    "code": "210131232110322103203213322113210032101332233",
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "0",
          "1"
        ],
        [
          "=",
          "4",
          "5"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF139;&#xF132;&#xF135;&#xF133;&#xF134;&#xF121;&#xF132;&#xF136;&#xF137;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 555
  },
  {
    "role": "code",
    "lines": [
      "and (< 4 6) (< 5 7);"
    ],
    "preprocessed": "and (< 4 6) (< 5 7);",
    "code": "21103221032100321103322103210132111332233",
    "parse": [
      "and",
      [
        "<",
        "4",
        "6"
      ],
      [
        "<",
        "5",
        "7"
      ]
    ],
    "spider": "&#xF139;&#xF132;&#xF135;&#xF137;&#xF139;&#xF121;&#xF132;&#xF135;&#xF138;&#xF13A;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 556
  },
  {
    "role": "file",
    "lines": [
      "== COS_OrLogic =="
    ],
    "stanza": 557
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Here is `or`, which evaluates to `true` if either of its arguments are `true`,",
      "and `false` otherwise.  Again, we just don't talk about what happens if you",
      "pass in any unexpected values, like integers or functions.  The message is",
      "constructed so that the problem never comes up.",
      ""
    ],
    "section_description": "introduce the OR logical operator",
    "section_category": "MATH",
    "section_index": 13,
    "stanza": 558
  },
  {
    "role": "code",
    "lines": [
      "intro or;"
    ],
    "preprocessed": "intro or;",
    "code": "2100103211132233",
    "parse": [
      "intro",
      "or"
    ],
    "spider": "&#xF123;&#xF113;&#xF13A;&#xF132;&#xF143;&#xF121;",
    "stanza": 559
  },
  {
    "role": "code",
    "lines": [
      "define or | ? x | ? y | if $x $true $y"
    ],
    "preprocessed": "define or | ? x | ? y | if $x $true $y",
    "code": "21101321113123211003210011131232110032110011312321111302321001113023213023211001132233",
    "parse": [
      "define",
      "or",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              -2,
              "x"
            ],
            [
              -2,
              "true"
            ],
            [
              -2,
              "y"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF13A;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF142;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF134;&#xF100;&#xF143;&#xF125;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 560
  },
  {
    "role": "code",
    "lines": [
      "not | or $false $false;"
    ],
    "preprocessed": "not | or $false $false;",
    "code": "21013123211130232030232032233",
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          -2,
          "false"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF13A;&#xF100;&#xF143;&#xF133;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 561
  },
  {
    "role": "code",
    "lines": [
      "or $false $true;"
    ],
    "preprocessed": "or $false $true;",
    "code": "211130232030232132233",
    "parse": [
      "or",
      [
        -2,
        "false"
      ],
      [
        -2,
        "true"
      ]
    ],
    "spider": "&#xF13A;&#xF100;&#xF143;&#xF133;&#xF100;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 562
  },
  {
    "role": "code",
    "lines": [
      "or $true $false;"
    ],
    "preprocessed": "or $true $false;",
    "code": "211130232130232032233",
    "parse": [
      "or",
      [
        -2,
        "true"
      ],
      [
        -2,
        "false"
      ]
    ],
    "spider": "&#xF13A;&#xF100;&#xF143;&#xF134;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 563
  },
  {
    "role": "code",
    "lines": [
      "or $true $true;"
    ],
    "preprocessed": "or $true $true;",
    "code": "211130232130232132233",
    "parse": [
      "or",
      [
        -2,
        "true"
      ],
      [
        -2,
        "true"
      ]
    ],
    "spider": "&#xF13A;&#xF100;&#xF143;&#xF134;&#xF100;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 564
  },
  {
    "role": "code",
    "lines": [
      "= $false | or $false $false;"
    ],
    "preprocessed": "= $false | or $false $false;",
    "code": "2113023203123211130232030232032233",
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -1,
        "or",
        [
          -2,
          "false"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF133;&#xF101;&#xF143;&#xF13A;&#xF100;&#xF143;&#xF133;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 565
  },
  {
    "role": "code",
    "lines": [
      "= $true | or $false $true;"
    ],
    "preprocessed": "= $true | or $false $true;",
    "code": "2113023213123211130232030232132233",
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        -1,
        "or",
        [
          -2,
          "false"
        ],
        [
          -2,
          "true"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF134;&#xF101;&#xF143;&#xF13A;&#xF100;&#xF143;&#xF133;&#xF100;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 566
  },
  {
    "role": "code",
    "lines": [
      "= $true | or $true $false;"
    ],
    "preprocessed": "= $true | or $true $false;",
    "code": "2113023213123211130232130232032233",
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        -1,
        "or",
        [
          -2,
          "true"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF134;&#xF101;&#xF143;&#xF13A;&#xF100;&#xF143;&#xF134;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 567
  },
  {
    "role": "code",
    "lines": [
      "= $true | or $true $true;"
    ],
    "preprocessed": "= $true | or $true $true;",
    "code": "2113023213123211130232130232132233",
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        -1,
        "or",
        [
          -2,
          "true"
        ],
        [
          -2,
          "true"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF100;&#xF143;&#xF134;&#xF101;&#xF143;&#xF13A;&#xF100;&#xF143;&#xF134;&#xF100;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 568
  },
  {
    "role": "code",
    "lines": [
      "or (= 2 2) (> 4 2);"
    ],
    "preprocessed": "or (= 2 2) (> 4 2);",
    "code": "211132211321032103322100321003210332233",
    "parse": [
      "or",
      [
        "=",
        "2",
        "2"
      ],
      [
        ">",
        "4",
        "2"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF136;&#xF135;&#xF135;&#xF121;&#xF132;&#xF137;&#xF137;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 569
  },
  {
    "role": "code",
    "lines": [
      "or (= 1 1) (> 6 4);"
    ],
    "preprocessed": "or (= 1 1) (> 6 4);",
    "code": "21113221132132133221003211032100332233",
    "parse": [
      "or",
      [
        "=",
        "1",
        "1"
      ],
      [
        ">",
        "6",
        "4"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF136;&#xF134;&#xF134;&#xF121;&#xF132;&#xF137;&#xF139;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 570
  },
  {
    "role": "code",
    "lines": [
      "or (< 3 4) (= 5 5);"
    ],
    "preprocessed": "or (< 3 4) (= 5 5);",
    "code": "2111322103211321003322113210132101332233",
    "parse": [
      "or",
      [
        "<",
        "3",
        "4"
      ],
      [
        "=",
        "5",
        "5"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF135;&#xF136;&#xF137;&#xF121;&#xF132;&#xF136;&#xF138;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 571
  },
  {
    "role": "code",
    "lines": [
      "or (= 3 3) (= 4 4);"
    ],
    "preprocessed": "or (= 3 3) (= 4 4);",
    "code": "211132211321132113322113210032100332233",
    "parse": [
      "or",
      [
        "=",
        "3",
        "3"
      ],
      [
        "=",
        "4",
        "4"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF136;&#xF136;&#xF136;&#xF121;&#xF132;&#xF136;&#xF137;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 572
  },
  {
    "role": "code",
    "lines": [
      "or (= 3 3) (= 0 0);"
    ],
    "preprocessed": "or (= 3 3) (= 0 0);",
    "code": "21113221132113211332211320320332233",
    "parse": [
      "or",
      [
        "=",
        "3",
        "3"
      ],
      [
        "=",
        "0",
        "0"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF136;&#xF136;&#xF136;&#xF121;&#xF132;&#xF136;&#xF133;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 573
  },
  {
    "role": "code",
    "lines": [
      "or (< 5 7) (> 5 3);"
    ],
    "preprocessed": "or (< 5 7) (> 5 3);",
    "code": "21113221032101321113322100321013211332233",
    "parse": [
      "or",
      [
        "<",
        "5",
        "7"
      ],
      [
        ">",
        "5",
        "3"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF135;&#xF138;&#xF13A;&#xF121;&#xF132;&#xF137;&#xF138;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 574
  },
  {
    "role": "code",
    "lines": [
      "or (> 5 4) (> 1 0);"
    ],
    "preprocessed": "or (> 5 4) (> 1 0);",
    "code": "211132210032101321003322100321320332233",
    "parse": [
      "or",
      [
        ">",
        "5",
        "4"
      ],
      [
        ">",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF137;&#xF138;&#xF137;&#xF121;&#xF132;&#xF137;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 575
  },
  {
    "role": "code",
    "lines": [
      "or (> 3 0) (= 3 3);"
    ],
    "preprocessed": "or (> 3 0) (= 3 3);",
    "code": "2111322100321132033221132113211332233",
    "parse": [
      "or",
      [
        ">",
        "3",
        "0"
      ],
      [
        "=",
        "3",
        "3"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF137;&#xF136;&#xF133;&#xF121;&#xF132;&#xF136;&#xF136;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 576
  },
  {
    "role": "code",
    "lines": [
      "or (< 3 4) (< 3 6);"
    ],
    "preprocessed": "or (< 3 4) (< 3 6);",
    "code": "211132210321132100332210321132110332233",
    "parse": [
      "or",
      [
        "<",
        "3",
        "4"
      ],
      [
        "<",
        "3",
        "6"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF135;&#xF136;&#xF137;&#xF121;&#xF132;&#xF135;&#xF136;&#xF139;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 577
  },
  {
    "role": "code",
    "lines": [
      "or (> 5 4) (> 5 4);"
    ],
    "preprocessed": "or (> 5 4) (> 5 4);",
    "code": "2111322100321013210033221003210132100332233",
    "parse": [
      "or",
      [
        ">",
        "5",
        "4"
      ],
      [
        ">",
        "5",
        "4"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF137;&#xF138;&#xF137;&#xF121;&#xF132;&#xF137;&#xF138;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 578
  },
  {
    "role": "code",
    "lines": [
      "or (> 6 4) (< 3 1);"
    ],
    "preprocessed": "or (> 6 4) (< 3 1);",
    "code": "211132210032110321003322103211321332233",
    "parse": [
      "or",
      [
        ">",
        "6",
        "4"
      ],
      [
        "<",
        "3",
        "1"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF137;&#xF139;&#xF137;&#xF121;&#xF132;&#xF135;&#xF136;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 579
  },
  {
    "role": "code",
    "lines": [
      "or (> 3 1) (> 3 3);"
    ],
    "preprocessed": "or (> 3 1) (> 3 3);",
    "code": "21113221003211321332210032113211332233",
    "parse": [
      "or",
      [
        ">",
        "3",
        "1"
      ],
      [
        ">",
        "3",
        "3"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF137;&#xF136;&#xF134;&#xF121;&#xF132;&#xF137;&#xF136;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 580
  },
  {
    "role": "code",
    "lines": [
      "or (= 0 0) (= 5 4);"
    ],
    "preprocessed": "or (= 0 0) (= 5 4);",
    "code": "2111322113203203322113210132100332233",
    "parse": [
      "or",
      [
        "=",
        "0",
        "0"
      ],
      [
        "=",
        "5",
        "4"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF136;&#xF133;&#xF133;&#xF121;&#xF132;&#xF136;&#xF138;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 581
  },
  {
    "role": "code",
    "lines": [
      "or (< 2 4) (> 4 6);"
    ],
    "preprocessed": "or (< 2 4) (> 4 6);",
    "code": "21113221032103210033221003210032110332233",
    "parse": [
      "or",
      [
        "<",
        "2",
        "4"
      ],
      [
        ">",
        "4",
        "6"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF135;&#xF135;&#xF137;&#xF121;&#xF132;&#xF137;&#xF137;&#xF139;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 582
  },
  {
    "role": "code",
    "lines": [
      "or (= 3 3) (= 3 1);"
    ],
    "preprocessed": "or (= 3 3) (= 3 1);",
    "code": "211132211321132113322113211321332233",
    "parse": [
      "or",
      [
        "=",
        "3",
        "3"
      ],
      [
        "=",
        "3",
        "1"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF136;&#xF136;&#xF136;&#xF121;&#xF132;&#xF136;&#xF136;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 583
  },
  {
    "role": "code",
    "lines": [
      "or (> 1 5) (< 3 6);"
    ],
    "preprocessed": "or (> 1 5) (< 3 6);",
    "code": "211132210032132101332210321132110332233",
    "parse": [
      "or",
      [
        ">",
        "1",
        "5"
      ],
      [
        "<",
        "3",
        "6"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF137;&#xF134;&#xF138;&#xF121;&#xF132;&#xF135;&#xF136;&#xF139;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 584
  },
  {
    "role": "code",
    "lines": [
      "or (< 6 2) (= 2 2);"
    ],
    "preprocessed": "or (< 6 2) (= 2 2);",
    "code": "21113221032110321033221132103210332233",
    "parse": [
      "or",
      [
        "<",
        "6",
        "2"
      ],
      [
        "=",
        "2",
        "2"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF135;&#xF139;&#xF135;&#xF121;&#xF132;&#xF136;&#xF135;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 585
  },
  {
    "role": "code",
    "lines": [
      "or (> 2 5) (= 5 5);"
    ],
    "preprocessed": "or (> 2 5) (= 5 5);",
    "code": "21113221003210321013322113210132101332233",
    "parse": [
      "or",
      [
        ">",
        "2",
        "5"
      ],
      [
        "=",
        "5",
        "5"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF137;&#xF135;&#xF138;&#xF121;&#xF132;&#xF136;&#xF138;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 586
  },
  {
    "role": "code",
    "lines": [
      "or (< 6 2) (= 3 3);"
    ],
    "preprocessed": "or (< 6 2) (= 3 3);",
    "code": "21113221032110321033221132113211332233",
    "parse": [
      "or",
      [
        "<",
        "6",
        "2"
      ],
      [
        "=",
        "3",
        "3"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF135;&#xF139;&#xF135;&#xF121;&#xF132;&#xF136;&#xF136;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 587
  },
  {
    "role": "code",
    "lines": [
      "or (< 4 3) (> 5 2);"
    ],
    "preprocessed": "or (< 4 3) (> 5 2);",
    "code": "2111322103210032113322100321013210332233",
    "parse": [
      "or",
      [
        "<",
        "4",
        "3"
      ],
      [
        ">",
        "5",
        "2"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF135;&#xF137;&#xF136;&#xF121;&#xF132;&#xF137;&#xF138;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 588
  },
  {
    "role": "code",
    "lines": [
      "not | or (< 5 4) (= 1 2);"
    ],
    "preprocessed": "not | or (< 5 4) (= 1 2);",
    "code": "2101312321113221032101321003322113213210332233",
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "<",
          "5",
          "4"
        ],
        [
          "=",
          "1",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF13A;&#xF132;&#xF135;&#xF138;&#xF137;&#xF121;&#xF132;&#xF136;&#xF134;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 589
  },
  {
    "role": "code",
    "lines": [
      "not | or (< 6 4) (= 5 1);"
    ],
    "preprocessed": "not | or (< 6 4) (= 5 1);",
    "code": "21013123211132210321103210033221132101321332233",
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "<",
          "6",
          "4"
        ],
        [
          "=",
          "5",
          "1"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF13A;&#xF132;&#xF135;&#xF139;&#xF137;&#xF121;&#xF132;&#xF136;&#xF138;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 590
  },
  {
    "role": "code",
    "lines": [
      "not | or (> 2 6) (= 1 5);"
    ],
    "preprocessed": "not | or (> 2 6) (= 1 5);",
    "code": "21013123211132210032103211033221132132101332233",
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          ">",
          "2",
          "6"
        ],
        [
          "=",
          "1",
          "5"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF13A;&#xF132;&#xF137;&#xF135;&#xF139;&#xF121;&#xF132;&#xF136;&#xF134;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 591
  },
  {
    "role": "code",
    "lines": [
      "not | or (< 6 3) (= 2 3);"
    ],
    "preprocessed": "not | or (< 6 3) (= 2 3);",
    "code": "2101312321113221032110321133221132103211332233",
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "<",
          "6",
          "3"
        ],
        [
          "=",
          "2",
          "3"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF13A;&#xF132;&#xF135;&#xF139;&#xF136;&#xF121;&#xF132;&#xF136;&#xF135;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 592
  },
  {
    "role": "code",
    "lines": [
      "not | or (< 6 4) (> 0 1);"
    ],
    "preprocessed": "not | or (< 6 4) (> 0 1);",
    "code": "2101312321113221032110321003322100320321332233",
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "<",
          "6",
          "4"
        ],
        [
          ">",
          "0",
          "1"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF13A;&#xF132;&#xF135;&#xF139;&#xF137;&#xF121;&#xF132;&#xF137;&#xF133;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 593
  },
  {
    "role": "code",
    "lines": [
      "not | or (= 3 5) (< 4 1);"
    ],
    "preprocessed": "not | or (= 3 5) (< 4 1);",
    "code": "2101312321113221132113210133221032100321332233",
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "=",
          "3",
          "5"
        ],
        [
          "<",
          "4",
          "1"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF13A;&#xF132;&#xF136;&#xF136;&#xF138;&#xF121;&#xF132;&#xF135;&#xF137;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 594
  },
  {
    "role": "code",
    "lines": [
      "not | or (= 4 1) (< 4 2);"
    ],
    "preprocessed": "not | or (= 4 1) (< 4 2);",
    "code": "2101312321113221132100321332210321003210332233",
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "=",
          "4",
          "1"
        ],
        [
          "<",
          "4",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF13A;&#xF132;&#xF136;&#xF137;&#xF134;&#xF121;&#xF132;&#xF135;&#xF137;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 595
  },
  {
    "role": "code",
    "lines": [
      "not | or (< 6 3) (= 3 0);"
    ],
    "preprocessed": "not | or (< 6 3) (= 3 0);",
    "code": "210131232111322103211032113322113211320332233",
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "<",
          "6",
          "3"
        ],
        [
          "=",
          "3",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF13A;&#xF132;&#xF135;&#xF139;&#xF136;&#xF121;&#xF132;&#xF136;&#xF136;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 596
  },
  {
    "role": "code",
    "lines": [
      "or (< 4 2) (< 4 6);"
    ],
    "preprocessed": "or (< 4 2) (< 4 6);",
    "code": "2111322103210032103322103210032110332233",
    "parse": [
      "or",
      [
        "<",
        "4",
        "2"
      ],
      [
        "<",
        "4",
        "6"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF135;&#xF137;&#xF135;&#xF121;&#xF132;&#xF135;&#xF137;&#xF139;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 597
  },
  {
    "role": "code",
    "lines": [
      "or (> 4 1) (< 5 2);"
    ],
    "preprocessed": "or (> 4 1) (< 5 2);",
    "code": "211132210032100321332210321013210332233",
    "parse": [
      "or",
      [
        ">",
        "4",
        "1"
      ],
      [
        "<",
        "5",
        "2"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF137;&#xF137;&#xF134;&#xF121;&#xF132;&#xF135;&#xF138;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 598
  },
  {
    "role": "code",
    "lines": [
      "or (> 0 1) (> 7 5);"
    ],
    "preprocessed": "or (> 0 1) (> 7 5);",
    "code": "211132210032032133221003211132101332233",
    "parse": [
      "or",
      [
        ">",
        "0",
        "1"
      ],
      [
        ">",
        "7",
        "5"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF137;&#xF133;&#xF134;&#xF121;&#xF132;&#xF137;&#xF13A;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 599
  },
  {
    "role": "code",
    "lines": [
      "or (< 3 4) (> 3 6);"
    ],
    "preprocessed": "or (< 3 4) (> 3 6);",
    "code": "2111322103211321003322100321132110332233",
    "parse": [
      "or",
      [
        "<",
        "3",
        "4"
      ],
      [
        ">",
        "3",
        "6"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF135;&#xF136;&#xF137;&#xF121;&#xF132;&#xF137;&#xF136;&#xF139;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 600
  },
  {
    "role": "code",
    "lines": [
      "or (> 1 2) (> 6 4);"
    ],
    "preprocessed": "or (> 1 2) (> 6 4);",
    "code": "2111322100321321033221003211032100332233",
    "parse": [
      "or",
      [
        ">",
        "1",
        "2"
      ],
      [
        ">",
        "6",
        "4"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF137;&#xF134;&#xF135;&#xF121;&#xF132;&#xF137;&#xF139;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 601
  },
  {
    "role": "code",
    "lines": [
      "or (< 0 1) (= 4 5);"
    ],
    "preprocessed": "or (< 0 1) (= 4 5);",
    "code": "2111322103203213322113210032101332233",
    "parse": [
      "or",
      [
        "<",
        "0",
        "1"
      ],
      [
        "=",
        "4",
        "5"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF135;&#xF133;&#xF134;&#xF121;&#xF132;&#xF136;&#xF137;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 602
  },
  {
    "role": "code",
    "lines": [
      "or (< 4 6) (< 5 7);"
    ],
    "preprocessed": "or (< 4 6) (< 5 7);",
    "code": "21113221032100321103322103210132111332233",
    "parse": [
      "or",
      [
        "<",
        "4",
        "6"
      ],
      [
        "<",
        "5",
        "7"
      ]
    ],
    "spider": "&#xF13A;&#xF132;&#xF135;&#xF137;&#xF139;&#xF121;&#xF132;&#xF135;&#xF138;&#xF13A;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 603
  },
  {
    "role": "doc",
    "lines": [
      "Now is an opportune moment to add `<=` and `>=` definitions.",
      "There are shorter definitions, like just negating `>` and `<`, but this feels more natural?"
    ],
    "stanza": 604
  },
  {
    "role": "code",
    "lines": [
      "define >= | ? x | ? y | or (> $x $y) (= $x $y);"
    ],
    "preprocessed": "define >= | ? x | ? y | or (> $x $y) (= $x $y);",
    "code": "211013211111031232110032100111312321100321100113123211132210030232100111302321100113322113023210011130232110011332233",
    "parse": [
      "define",
      ">=",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "or",
            [
              ">",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ],
            [
              "=",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF125;&#xF11F;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13A;&#xF132;&#xF137;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF132;&#xF136;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 605
  },
  {
    "role": "code",
    "lines": [
      "define <= | ? x | ? y | or (< $x $y) (= $x $y);"
    ],
    "preprocessed": "define <= | ? x | ? y | or (< $x $y) (= $x $y);",
    "code": "21101321111113123211003210011131232110032110011312321113221030232100111302321100113322113023210011130232110011332233",
    "parse": [
      "define",
      "<=",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "or",
            [
              "<",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ],
            [
              "=",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF125;&#xF120;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13A;&#xF132;&#xF135;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF132;&#xF136;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 606
  },
  {
    "role": "code",
    "lines": [
      ">= 0 0;"
    ],
    "preprocessed": ">= 0 0;",
    "code": "211111032032032233",
    "parse": [
      ">=",
      "0",
      "0"
    ],
    "spider": "&#xF125;&#xF11F;&#xF133;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 607
  },
  {
    "role": "code",
    "lines": [
      "<= 0 0;"
    ],
    "preprocessed": "<= 0 0;",
    "code": "211111132032032233",
    "parse": [
      "<=",
      "0",
      "0"
    ],
    "spider": "&#xF125;&#xF120;&#xF133;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 608
  },
  {
    "role": "code",
    "lines": [
      "not | >= 0 1;"
    ],
    "preprocessed": "not | >= 0 1;",
    "code": "21013123211111032032132233",
    "parse": [
      "not",
      [
        -1,
        ">=",
        "0",
        "1"
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF125;&#xF11F;&#xF133;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 609
  },
  {
    "role": "code",
    "lines": [
      "<= 0 1;"
    ],
    "preprocessed": "<= 0 1;",
    "code": "211111132032132233",
    "parse": [
      "<=",
      "0",
      "1"
    ],
    "spider": "&#xF125;&#xF120;&#xF133;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 610
  },
  {
    "role": "code",
    "lines": [
      "not | >= 0 2;"
    ],
    "preprocessed": "not | >= 0 2;",
    "code": "210131232111110320321032233",
    "parse": [
      "not",
      [
        -1,
        ">=",
        "0",
        "2"
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF125;&#xF11F;&#xF133;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 611
  },
  {
    "role": "code",
    "lines": [
      "<= 0 2;"
    ],
    "preprocessed": "<= 0 2;",
    "code": "2111111320321032233",
    "parse": [
      "<=",
      "0",
      "2"
    ],
    "spider": "&#xF125;&#xF120;&#xF133;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 612
  },
  {
    "role": "code",
    "lines": [
      ">= 1 0;"
    ],
    "preprocessed": ">= 1 0;",
    "code": "211111032132032233",
    "parse": [
      ">=",
      "1",
      "0"
    ],
    "spider": "&#xF125;&#xF11F;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 613
  },
  {
    "role": "code",
    "lines": [
      "not | <= 1 0;"
    ],
    "preprocessed": "not | <= 1 0;",
    "code": "21013123211111132132032233",
    "parse": [
      "not",
      [
        -1,
        "<=",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF125;&#xF120;&#xF134;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 614
  },
  {
    "role": "code",
    "lines": [
      ">= 1 1;"
    ],
    "preprocessed": ">= 1 1;",
    "code": "211111032132132233",
    "parse": [
      ">=",
      "1",
      "1"
    ],
    "spider": "&#xF125;&#xF11F;&#xF134;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 615
  },
  {
    "role": "code",
    "lines": [
      "<= 1 1;"
    ],
    "preprocessed": "<= 1 1;",
    "code": "211111132132132233",
    "parse": [
      "<=",
      "1",
      "1"
    ],
    "spider": "&#xF125;&#xF120;&#xF134;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 616
  },
  {
    "role": "code",
    "lines": [
      "not | >= 1 2;"
    ],
    "preprocessed": "not | >= 1 2;",
    "code": "210131232111110321321032233",
    "parse": [
      "not",
      [
        -1,
        ">=",
        "1",
        "2"
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF125;&#xF11F;&#xF134;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 617
  },
  {
    "role": "code",
    "lines": [
      "<= 1 2;"
    ],
    "preprocessed": "<= 1 2;",
    "code": "2111111321321032233",
    "parse": [
      "<=",
      "1",
      "2"
    ],
    "spider": "&#xF125;&#xF120;&#xF134;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 618
  },
  {
    "role": "code",
    "lines": [
      ">= 2 0;"
    ],
    "preprocessed": ">= 2 0;",
    "code": "2111110321032032233",
    "parse": [
      ">=",
      "2",
      "0"
    ],
    "spider": "&#xF125;&#xF11F;&#xF135;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 619
  },
  {
    "role": "code",
    "lines": [
      "not | <= 2 0;"
    ],
    "preprocessed": "not | <= 2 0;",
    "code": "210131232111111321032032233",
    "parse": [
      "not",
      [
        -1,
        "<=",
        "2",
        "0"
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF125;&#xF120;&#xF135;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 620
  },
  {
    "role": "code",
    "lines": [
      ">= 2 1;"
    ],
    "preprocessed": ">= 2 1;",
    "code": "2111110321032132233",
    "parse": [
      ">=",
      "2",
      "1"
    ],
    "spider": "&#xF125;&#xF11F;&#xF135;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 621
  },
  {
    "role": "code",
    "lines": [
      "not | <= 2 1;"
    ],
    "preprocessed": "not | <= 2 1;",
    "code": "210131232111111321032132233",
    "parse": [
      "not",
      [
        -1,
        "<=",
        "2",
        "1"
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF125;&#xF120;&#xF135;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 622
  },
  {
    "role": "code",
    "lines": [
      ">= 2 2;"
    ],
    "preprocessed": ">= 2 2;",
    "code": "21111103210321032233",
    "parse": [
      ">=",
      "2",
      "2"
    ],
    "spider": "&#xF125;&#xF11F;&#xF135;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 623
  },
  {
    "role": "code",
    "lines": [
      "<= 2 2;"
    ],
    "preprocessed": "<= 2 2;",
    "code": "21111113210321032233",
    "parse": [
      "<=",
      "2",
      "2"
    ],
    "spider": "&#xF125;&#xF120;&#xF135;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 624
  },
  {
    "role": "file",
    "lines": [
      "== COS_Cons =="
    ],
    "stanza": 625
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "illustrate pairs",
    "section_category": "MATH",
    "section_index": 14,
    "stanza": 626
  },
  {
    "role": "code",
    "lines": [
      "define cons | ? x | ? y | ? z | z $x $y;"
    ],
    "preprocessed": "define cons | ? x | ? y | ? z | z $x $y;",
    "code": "21101321010131232110032100111312321100321100113123211003211010031232110100302321001113023211001132233",
    "parse": [
      "define",
      "cons",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "?",
            "z",
            [
              -1,
              "z",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF116;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF115;&#xF101;&#xF143;&#xF125;&#xF115;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 627
  },
  {
    "role": "code",
    "lines": [
      "define car | ? cons:z | cons:z | ? x | ? y $x;"
    ],
    "preprocessed": "define car | ? cons:z | cons:z | ? x | ? y $x;",
    "code": "21101321011031232110032100000031232100000031232110032100111312321100321100113023210011132233",
    "parse": [
      "define",
      "car",
      [
        -1,
        "?",
        "cons:z",
        [
          -1,
          "cons:z",
          [
            -1,
            "?",
            "x",
            [
              -1,
              "?",
              "y",
              [
                -2,
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF117;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF111;&#xF101;&#xF143;&#xF126;&#xF111;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 628
  },
  {
    "role": "code",
    "lines": [
      "define cdr | ? cons:z | cons:z | ? x | ? y $y;"
    ],
    "preprocessed": "define cdr | ? cons:z | cons:z | ? x | ? y $y;",
    "code": "21101321011131232110032100000031232100000031232110032100111312321100321100113023211001132233",
    "parse": [
      "define",
      "cdr",
      [
        -1,
        "?",
        "cons:z",
        [
          -1,
          "cons:z",
          [
            -1,
            "?",
            "x",
            [
              -1,
              "?",
              "y",
              [
                -2,
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF111;&#xF101;&#xF143;&#xF126;&#xF111;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF100;&#xF143;&#xF125;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 629
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 0 4) | = 0 | car $x;"
    ],
    "preprocessed": "assign x (cons 0 4) | = 0 | car $x;",
    "code": "211103210011132210101320321003312321132031232101103023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "0",
        "4"
      ],
      [
        -1,
        "=",
        "0",
        [
          -1,
          "car",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF133;&#xF137;&#xF121;&#xF101;&#xF143;&#xF136;&#xF133;&#xF101;&#xF143;&#xF123;&#xF117;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 630
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 0 4) | = 4 | cdr $x;"
    ],
    "preprocessed": "assign x (cons 0 4) | = 4 | cdr $x;",
    "code": "21110321001113221010132032100331232113210031232101113023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "0",
        "4"
      ],
      [
        -1,
        "=",
        "4",
        [
          -1,
          "cdr",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF133;&#xF137;&#xF121;&#xF101;&#xF143;&#xF136;&#xF137;&#xF101;&#xF143;&#xF123;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 631
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 6 2) | = 6 | car $x;"
    ],
    "preprocessed": "assign x (cons 6 2) | = 6 | car $x;",
    "code": "211103210011132210101321103210331232113211031232101103023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "6",
        "2"
      ],
      [
        -1,
        "=",
        "6",
        [
          -1,
          "car",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF139;&#xF135;&#xF121;&#xF101;&#xF143;&#xF136;&#xF139;&#xF101;&#xF143;&#xF123;&#xF117;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 632
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 6 2) | = 2 | cdr $x;"
    ],
    "preprocessed": "assign x (cons 6 2) | = 2 | cdr $x;",
    "code": "21110321001113221010132110321033123211321031232101113023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "6",
        "2"
      ],
      [
        -1,
        "=",
        "2",
        [
          -1,
          "cdr",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF139;&#xF135;&#xF121;&#xF101;&#xF143;&#xF136;&#xF135;&#xF101;&#xF143;&#xF123;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 633
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 3 9) | = 3 | car $x;"
    ],
    "preprocessed": "assign x (cons 3 9) | = 3 | car $x;",
    "code": "211103210011132210101321132100133123211321131232101103023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "3",
        "9"
      ],
      [
        -1,
        "=",
        "3",
        [
          -1,
          "car",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF136;&#xF13C;&#xF121;&#xF101;&#xF143;&#xF136;&#xF136;&#xF101;&#xF143;&#xF123;&#xF117;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 634
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 3 9) | = 9 | cdr $x;"
    ],
    "preprocessed": "assign x (cons 3 9) | = 9 | cdr $x;",
    "code": "21110321001113221010132113210013312321132100131232101113023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "3",
        "9"
      ],
      [
        -1,
        "=",
        "9",
        [
          -1,
          "cdr",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF136;&#xF13C;&#xF121;&#xF101;&#xF143;&#xF136;&#xF13C;&#xF101;&#xF143;&#xF123;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 635
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 7 | cons 10 2) | = 7 | car $x;"
    ],
    "preprocessed": "assign x (cons 7 | cons 10 2) | = 7 | car $x;",
    "code": "2111032100111322101013211131232101013210103210331232113211131232101103023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "7",
        [
          -1,
          "cons",
          "10",
          "2"
        ]
      ],
      [
        -1,
        "=",
        "7",
        [
          -1,
          "car",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF13A;&#xF101;&#xF143;&#xF123;&#xF116;&#xF13D;&#xF135;&#xF121;&#xF101;&#xF143;&#xF136;&#xF13A;&#xF101;&#xF143;&#xF123;&#xF117;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 636
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 7 | cons 10 2) | = 10 | car | cdr $x;"
    ],
    "preprocessed": "assign x (cons 7 | cons 10 2) | = 10 | car | cdr $x;",
    "code": "211103210011132210101321113123210101321010321033123211321010312321011031232101113023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "7",
        [
          -1,
          "cons",
          "10",
          "2"
        ]
      ],
      [
        -1,
        "=",
        "10",
        [
          -1,
          "car",
          [
            -1,
            "cdr",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF13A;&#xF101;&#xF143;&#xF123;&#xF116;&#xF13D;&#xF135;&#xF121;&#xF101;&#xF143;&#xF136;&#xF13D;&#xF101;&#xF143;&#xF123;&#xF117;&#xF101;&#xF143;&#xF123;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 637
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 7 | cons 10 2) | = 2 | cdr | cdr $x;"
    ],
    "preprocessed": "assign x (cons 7 | cons 10 2) | = 2 | cdr | cdr $x;",
    "code": "2111032100111322101013211131232101013210103210331232113210312321011131232101113023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "7",
        [
          -1,
          "cons",
          "10",
          "2"
        ]
      ],
      [
        -1,
        "=",
        "2",
        [
          -1,
          "cdr",
          [
            -1,
            "cdr",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF13A;&#xF101;&#xF143;&#xF123;&#xF116;&#xF13D;&#xF135;&#xF121;&#xF101;&#xF143;&#xF136;&#xF135;&#xF101;&#xF143;&#xF123;&#xF118;&#xF101;&#xF143;&#xF123;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 638
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 1 | cons 15 17) | = 1 | car $x;"
    ],
    "preprocessed": "assign x (cons 1 | cons 15 17) | = 1 | car $x;",
    "code": "211103210011132210101321312321010132111132100013312321132131232101103023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "1",
        [
          -1,
          "cons",
          "15",
          "17"
        ]
      ],
      [
        -1,
        "=",
        "1",
        [
          -1,
          "car",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF134;&#xF101;&#xF143;&#xF123;&#xF116;&#xF142;&#xF123;&#xF112;&#xF121;&#xF101;&#xF143;&#xF136;&#xF134;&#xF101;&#xF143;&#xF123;&#xF117;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 639
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 1 | cons 15 17) | = 15 | car | cdr $x;"
    ],
    "preprocessed": "assign x (cons 1 | cons 15 17) | = 15 | car | cdr $x;",
    "code": "2111032100111322101013213123210101321111321000133123211321111312321011031232101113023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "1",
        [
          -1,
          "cons",
          "15",
          "17"
        ]
      ],
      [
        -1,
        "=",
        "15",
        [
          -1,
          "car",
          [
            -1,
            "cdr",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF134;&#xF101;&#xF143;&#xF123;&#xF116;&#xF142;&#xF123;&#xF112;&#xF121;&#xF101;&#xF143;&#xF136;&#xF142;&#xF101;&#xF143;&#xF123;&#xF117;&#xF101;&#xF143;&#xF123;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 640
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 1 | cons 15 17) | = 17 | cdr | cdr $x;"
    ],
    "preprocessed": "assign x (cons 1 | cons 15 17) | = 17 | cdr | cdr $x;",
    "code": "21110321001113221010132131232101013211113210001331232113210001312321011131232101113023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "1",
        [
          -1,
          "cons",
          "15",
          "17"
        ]
      ],
      [
        -1,
        "=",
        "17",
        [
          -1,
          "cdr",
          [
            -1,
            "cdr",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF134;&#xF101;&#xF143;&#xF123;&#xF116;&#xF142;&#xF123;&#xF112;&#xF121;&#xF101;&#xF143;&#xF136;&#xF123;&#xF112;&#xF101;&#xF143;&#xF123;&#xF118;&#xF101;&#xF143;&#xF123;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 641
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 8 | cons 14 9) | = 8 | car $x;"
    ],
    "preprocessed": "assign x (cons 8 | cons 14 9) | = 8 | car $x;",
    "code": "21110321001113221010132100031232101013211103210013312321132100031232101103023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "8",
        [
          -1,
          "cons",
          "14",
          "9"
        ]
      ],
      [
        -1,
        "=",
        "8",
        [
          -1,
          "car",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF13B;&#xF101;&#xF143;&#xF123;&#xF116;&#xF141;&#xF13C;&#xF121;&#xF101;&#xF143;&#xF136;&#xF13B;&#xF101;&#xF143;&#xF123;&#xF117;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 642
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 8 | cons 14 9) | = 14 | car | cdr $x;"
    ],
    "preprocessed": "assign x (cons 8 | cons 14 9) | = 14 | car | cdr $x;",
    "code": "211103210011132210101321000312321010132111032100133123211321110312321011031232101113023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "8",
        [
          -1,
          "cons",
          "14",
          "9"
        ]
      ],
      [
        -1,
        "=",
        "14",
        [
          -1,
          "car",
          [
            -1,
            "cdr",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF13B;&#xF101;&#xF143;&#xF123;&#xF116;&#xF141;&#xF13C;&#xF121;&#xF101;&#xF143;&#xF136;&#xF141;&#xF101;&#xF143;&#xF123;&#xF117;&#xF101;&#xF143;&#xF123;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 643
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 8 | cons 14 9) | = 9 | cdr | cdr $x;"
    ],
    "preprocessed": "assign x (cons 8 | cons 14 9) | = 9 | cdr | cdr $x;",
    "code": "211103210011132210101321000312321010132111032100133123211321001312321011131232101113023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "8",
        [
          -1,
          "cons",
          "14",
          "9"
        ]
      ],
      [
        -1,
        "=",
        "9",
        [
          -1,
          "cdr",
          [
            -1,
            "cdr",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF13B;&#xF101;&#xF143;&#xF123;&#xF116;&#xF141;&#xF13C;&#xF121;&#xF101;&#xF143;&#xF136;&#xF13C;&#xF101;&#xF143;&#xF123;&#xF118;&#xF101;&#xF143;&#xF123;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 644
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 3 | car $x;"
    ],
    "preprocessed": "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 3 | car $x;",
    "code": "211103210011132210101321131232101013203123210101321031232101013210032133123211321131232101103023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "3",
        [
          -1,
          "cons",
          "0",
          [
            -1,
            "cons",
            "2",
            [
              -1,
              "cons",
              "4",
              "1"
            ]
          ]
        ]
      ],
      [
        -1,
        "=",
        "3",
        [
          -1,
          "car",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF136;&#xF101;&#xF143;&#xF123;&#xF116;&#xF133;&#xF101;&#xF143;&#xF123;&#xF116;&#xF135;&#xF101;&#xF143;&#xF123;&#xF116;&#xF137;&#xF134;&#xF121;&#xF101;&#xF143;&#xF136;&#xF136;&#xF101;&#xF143;&#xF123;&#xF117;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 645
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 0 | car | cdr $x;"
    ],
    "preprocessed": "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 0 | car | cdr $x;",
    "code": "211103210011132210101321131232101013203123210101321031232101013210032133123211320312321011031232101113023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "3",
        [
          -1,
          "cons",
          "0",
          [
            -1,
            "cons",
            "2",
            [
              -1,
              "cons",
              "4",
              "1"
            ]
          ]
        ]
      ],
      [
        -1,
        "=",
        "0",
        [
          -1,
          "car",
          [
            -1,
            "cdr",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF136;&#xF101;&#xF143;&#xF123;&#xF116;&#xF133;&#xF101;&#xF143;&#xF123;&#xF116;&#xF135;&#xF101;&#xF143;&#xF123;&#xF116;&#xF137;&#xF134;&#xF121;&#xF101;&#xF143;&#xF136;&#xF133;&#xF101;&#xF143;&#xF123;&#xF117;&#xF101;&#xF143;&#xF123;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 646
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 2 | car | cdr | cdr $x;"
    ],
    "preprocessed": "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 2 | car | cdr | cdr $x;",
    "code": "21110321001113221010132113123210101320312321010132103123210101321003213312321132103123210110312321011131232101113023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "3",
        [
          -1,
          "cons",
          "0",
          [
            -1,
            "cons",
            "2",
            [
              -1,
              "cons",
              "4",
              "1"
            ]
          ]
        ]
      ],
      [
        -1,
        "=",
        "2",
        [
          -1,
          "car",
          [
            -1,
            "cdr",
            [
              -1,
              "cdr",
              [
                -2,
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF136;&#xF101;&#xF143;&#xF123;&#xF116;&#xF133;&#xF101;&#xF143;&#xF123;&#xF116;&#xF135;&#xF101;&#xF143;&#xF123;&#xF116;&#xF137;&#xF134;&#xF121;&#xF101;&#xF143;&#xF136;&#xF135;&#xF101;&#xF143;&#xF123;&#xF117;&#xF101;&#xF143;&#xF123;&#xF118;&#xF101;&#xF143;&#xF123;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 647
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 4 | car | cdr | cdr | cdr $x;"
    ],
    "preprocessed": "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 4 | car | cdr | cdr | cdr $x;",
    "code": "2111032100111322101013211312321010132031232101013210312321010132100321331232113210031232101103123210111312321011131232101113023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "3",
        [
          -1,
          "cons",
          "0",
          [
            -1,
            "cons",
            "2",
            [
              -1,
              "cons",
              "4",
              "1"
            ]
          ]
        ]
      ],
      [
        -1,
        "=",
        "4",
        [
          -1,
          "car",
          [
            -1,
            "cdr",
            [
              -1,
              "cdr",
              [
                -1,
                "cdr",
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF136;&#xF101;&#xF143;&#xF123;&#xF116;&#xF133;&#xF101;&#xF143;&#xF123;&#xF116;&#xF135;&#xF101;&#xF143;&#xF123;&#xF116;&#xF137;&#xF134;&#xF121;&#xF101;&#xF143;&#xF136;&#xF137;&#xF101;&#xF143;&#xF123;&#xF117;&#xF101;&#xF143;&#xF123;&#xF118;&#xF101;&#xF143;&#xF123;&#xF118;&#xF101;&#xF143;&#xF123;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 648
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 1 | cdr | cdr | cdr | cdr $x;"
    ],
    "preprocessed": "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 1 | cdr | cdr | cdr | cdr $x;",
    "code": "21110321001113221010132113123210101320312321010132103123210101321003213312321132131232101113123210111312321011131232101113023210011132233",
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "3",
        [
          -1,
          "cons",
          "0",
          [
            -1,
            "cons",
            "2",
            [
              -1,
              "cons",
              "4",
              "1"
            ]
          ]
        ]
      ],
      [
        -1,
        "=",
        "1",
        [
          -1,
          "cdr",
          [
            -1,
            "cdr",
            [
              -1,
              "cdr",
              [
                -1,
                "cdr",
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF124;&#xF118;&#xF132;&#xF123;&#xF116;&#xF136;&#xF101;&#xF143;&#xF123;&#xF116;&#xF133;&#xF101;&#xF143;&#xF123;&#xF116;&#xF135;&#xF101;&#xF143;&#xF123;&#xF116;&#xF137;&#xF134;&#xF121;&#xF101;&#xF143;&#xF136;&#xF134;&#xF101;&#xF143;&#xF123;&#xF118;&#xF101;&#xF143;&#xF123;&#xF118;&#xF101;&#xF143;&#xF123;&#xF118;&#xF101;&#xF143;&#xF123;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 649
  },
  {
    "role": "file",
    "lines": [
      "== COS_Mutable =="
    ],
    "stanza": 650
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "introduce mutable objects, and side-effects",
    "section_category": "MATH",
    "section_index": 15,
    "stanza": 651
  },
  {
    "role": "code",
    "lines": [
      "intro make-cell;"
    ],
    "preprocessed": "intro make-cell;",
    "code": "210010321101132233",
    "parse": [
      "intro",
      "make-cell"
    ],
    "spider": "&#xF123;&#xF113;&#xF123;&#xF11C;&#xF132;&#xF143;&#xF121;",
    "stanza": 652
  },
  {
    "role": "code",
    "lines": [
      "intro set!;"
    ],
    "preprocessed": "intro set!;",
    "code": "210010321110032233",
    "parse": [
      "intro",
      "set!"
    ],
    "spider": "&#xF123;&#xF113;&#xF123;&#xF11D;&#xF132;&#xF143;&#xF121;",
    "stanza": 653
  },
  {
    "role": "code",
    "lines": [
      "intro get!;"
    ],
    "preprocessed": "intro get!;",
    "code": "210010321110132233",
    "parse": [
      "intro",
      "get!"
    ],
    "spider": "&#xF123;&#xF113;&#xF123;&#xF11E;&#xF132;&#xF143;&#xF121;",
    "stanza": 654
  },
  {
    "role": "code",
    "lines": [
      "define demo:make-cell:x | make-cell 14;"
    ],
    "preprocessed": "define demo:make-cell:x | make-cell 14;",
    "code": "21101321000001312321101132111032233",
    "parse": [
      "define",
      "demo:make-cell:x",
      [
        -1,
        "make-cell",
        "14"
      ]
    ],
    "spider": "&#xF140;&#xF126;&#xF112;&#xF101;&#xF143;&#xF123;&#xF11C;&#xF141;&#xF132;&#xF143;&#xF121;",
    "stanza": 655
  },
  {
    "role": "code",
    "lines": [
      "= (get! $demo:make-cell:x) 14;"
    ],
    "preprocessed": "= (get! $demo:make-cell:x) 14;",
    "code": "21132211101302321000001332111032233",
    "parse": [
      "=",
      [
        "get!",
        [
          -2,
          "demo:make-cell:x"
        ]
      ],
      "14"
    ],
    "spider": "&#xF136;&#xF132;&#xF123;&#xF11E;&#xF100;&#xF143;&#xF126;&#xF112;&#xF121;&#xF141;&#xF132;&#xF143;&#xF121;",
    "stanza": 656
  },
  {
    "role": "code",
    "lines": [
      "set! $demo:make-cell:x 15;"
    ],
    "preprocessed": "set! $demo:make-cell:x 15;",
    "code": "21110030232100000132111132233",
    "parse": [
      "set!",
      [
        -2,
        "demo:make-cell:x"
      ],
      "15"
    ],
    "spider": "&#xF123;&#xF11D;&#xF100;&#xF143;&#xF126;&#xF112;&#xF142;&#xF132;&#xF143;&#xF121;",
    "stanza": 657
  },
  {
    "role": "code",
    "lines": [
      "= (get! $demo:make-cell:x) 15;"
    ],
    "preprocessed": "= (get! $demo:make-cell:x) 15;",
    "code": "21132211101302321000001332111132233",
    "parse": [
      "=",
      [
        "get!",
        [
          -2,
          "demo:make-cell:x"
        ]
      ],
      "15"
    ],
    "spider": "&#xF136;&#xF132;&#xF123;&#xF11E;&#xF100;&#xF143;&#xF126;&#xF112;&#xF121;&#xF142;&#xF132;&#xF143;&#xF121;",
    "stanza": 658
  },
  {
    "role": "code",
    "lines": [
      "set! $demo:make-cell:x 5;"
    ],
    "preprocessed": "set! $demo:make-cell:x 5;",
    "code": "2111003023210000013210132233",
    "parse": [
      "set!",
      [
        -2,
        "demo:make-cell:x"
      ],
      "5"
    ],
    "spider": "&#xF123;&#xF11D;&#xF100;&#xF143;&#xF126;&#xF112;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 659
  },
  {
    "role": "code",
    "lines": [
      "set! $demo:make-cell:x 7;"
    ],
    "preprocessed": "set! $demo:make-cell:x 7;",
    "code": "2111003023210000013211132233",
    "parse": [
      "set!",
      [
        -2,
        "demo:make-cell:x"
      ],
      "7"
    ],
    "spider": "&#xF123;&#xF11D;&#xF100;&#xF143;&#xF126;&#xF112;&#xF13A;&#xF132;&#xF143;&#xF121;",
    "stanza": 660
  },
  {
    "role": "code",
    "lines": [
      "= (get! $demo:make-cell:x) 7;"
    ],
    "preprocessed": "= (get! $demo:make-cell:x) 7;",
    "code": "2113221110130232100000133211132233",
    "parse": [
      "=",
      [
        "get!",
        [
          -2,
          "demo:make-cell:x"
        ]
      ],
      "7"
    ],
    "spider": "&#xF136;&#xF132;&#xF123;&#xF11E;&#xF100;&#xF143;&#xF126;&#xF112;&#xF121;&#xF13A;&#xF132;&#xF143;&#xF121;",
    "stanza": 661
  },
  {
    "role": "code",
    "lines": [
      "define demo:make-cell:y | make-cell 11;"
    ],
    "preprocessed": "define demo:make-cell:y | make-cell 11;",
    "code": "21101321000010312321101132101132233",
    "parse": [
      "define",
      "demo:make-cell:y",
      [
        -1,
        "make-cell",
        "11"
      ]
    ],
    "spider": "&#xF140;&#xF126;&#xF113;&#xF101;&#xF143;&#xF123;&#xF11C;&#xF13E;&#xF132;&#xF143;&#xF121;",
    "stanza": 662
  },
  {
    "role": "code",
    "lines": [
      "= (get! $demo:make-cell:y) 11;"
    ],
    "preprocessed": "= (get! $demo:make-cell:y) 11;",
    "code": "21132211101302321000010332101132233",
    "parse": [
      "=",
      [
        "get!",
        [
          -2,
          "demo:make-cell:y"
        ]
      ],
      "11"
    ],
    "spider": "&#xF136;&#xF132;&#xF123;&#xF11E;&#xF100;&#xF143;&#xF126;&#xF113;&#xF121;&#xF13E;&#xF132;&#xF143;&#xF121;",
    "stanza": 663
  },
  {
    "role": "code",
    "lines": [
      "set! $demo:make-cell:y 22;"
    ],
    "preprocessed": "set! $demo:make-cell:y 22;",
    "code": "211100302321000010321011032233",
    "parse": [
      "set!",
      [
        -2,
        "demo:make-cell:y"
      ],
      "22"
    ],
    "spider": "&#xF123;&#xF11D;&#xF100;&#xF143;&#xF126;&#xF113;&#xF123;&#xF117;&#xF132;&#xF143;&#xF121;",
    "stanza": 664
  },
  {
    "role": "code",
    "lines": [
      "= (get! $demo:make-cell:y) 22;"
    ],
    "preprocessed": "= (get! $demo:make-cell:y) 22;",
    "code": "211322111013023210000103321011032233",
    "parse": [
      "=",
      [
        "get!",
        [
          -2,
          "demo:make-cell:y"
        ]
      ],
      "22"
    ],
    "spider": "&#xF136;&#xF132;&#xF123;&#xF11E;&#xF100;&#xF143;&#xF126;&#xF113;&#xF121;&#xF123;&#xF117;&#xF132;&#xF143;&#xF121;",
    "stanza": 665
  },
  {
    "role": "code",
    "lines": [
      "= (get! $demo:make-cell:x) 7;"
    ],
    "preprocessed": "= (get! $demo:make-cell:x) 7;",
    "code": "2113221110130232100000133211132233",
    "parse": [
      "=",
      [
        "get!",
        [
          -2,
          "demo:make-cell:x"
        ]
      ],
      "7"
    ],
    "spider": "&#xF136;&#xF132;&#xF123;&#xF11E;&#xF100;&#xF143;&#xF126;&#xF112;&#xF121;&#xF13A;&#xF132;&#xF143;&#xF121;",
    "stanza": 666
  },
  {
    "role": "code",
    "lines": [
      "= 29 (+ (get! $demo:make-cell:x) | get! $demo:make-cell:y);"
    ],
    "preprocessed": "= 29 (+ (get! $demo:make-cell:x) | get! $demo:make-cell:y);",
    "code": "211321110132210103221110130232100000133123211101302321000010332233",
    "parse": [
      "=",
      "29",
      [
        "+",
        [
          "get!",
          [
            -2,
            "demo:make-cell:x"
          ]
        ],
        [
          -1,
          "get!",
          [
            -2,
            "demo:make-cell:y"
          ]
        ]
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF11E;&#xF132;&#xF13D;&#xF132;&#xF123;&#xF11E;&#xF100;&#xF143;&#xF126;&#xF112;&#xF121;&#xF101;&#xF143;&#xF123;&#xF11E;&#xF100;&#xF143;&#xF126;&#xF113;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 667
  },
  {
    "role": "code",
    "lines": [
      "if (= (get! $demo:make-cell:x) 7) (set! $demo:make-cell:x 88) (set! $demo:make-cell:x 99);"
    ],
    "preprocessed": "if (= (get! $demo:make-cell:x) 7) (set! $demo:make-cell:x 88) (set! $demo:make-cell:x 99);",
    "code": "211113221132211101302321000001332111332211100302321000001321011000332211100302321000001321100011332233",
    "parse": [
      "if",
      [
        "=",
        [
          "get!",
          [
            -2,
            "demo:make-cell:x"
          ]
        ],
        "7"
      ],
      [
        "set!",
        [
          -2,
          "demo:make-cell:x"
        ],
        "88"
      ],
      [
        "set!",
        [
          -2,
          "demo:make-cell:x"
        ],
        "99"
      ]
    ],
    "spider": "&#xF142;&#xF132;&#xF136;&#xF132;&#xF123;&#xF11E;&#xF100;&#xF143;&#xF126;&#xF112;&#xF121;&#xF13A;&#xF121;&#xF132;&#xF123;&#xF11D;&#xF100;&#xF143;&#xF126;&#xF112;&#xF127;&#xF119;&#xF121;&#xF132;&#xF123;&#xF11D;&#xF100;&#xF143;&#xF126;&#xF112;&#xF128;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 668
  },
  {
    "role": "code",
    "lines": [
      "= (get! $demo:make-cell:x) 88;"
    ],
    "preprocessed": "= (get! $demo:make-cell:x) 88;",
    "code": "21132211101302321000001332101100032233",
    "parse": [
      "=",
      [
        "get!",
        [
          -2,
          "demo:make-cell:x"
        ]
      ],
      "88"
    ],
    "spider": "&#xF136;&#xF132;&#xF123;&#xF11E;&#xF100;&#xF143;&#xF126;&#xF112;&#xF121;&#xF127;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 669
  },
  {
    "role": "code",
    "lines": [
      "if (= (get! $demo:make-cell:x) 7) (set! $demo:make-cell:x 88) (set! $demo:make-cell:x 99);"
    ],
    "preprocessed": "if (= (get! $demo:make-cell:x) 7) (set! $demo:make-cell:x 88) (set! $demo:make-cell:x 99);",
    "code": "211113221132211101302321000001332111332211100302321000001321011000332211100302321000001321100011332233",
    "parse": [
      "if",
      [
        "=",
        [
          "get!",
          [
            -2,
            "demo:make-cell:x"
          ]
        ],
        "7"
      ],
      [
        "set!",
        [
          -2,
          "demo:make-cell:x"
        ],
        "88"
      ],
      [
        "set!",
        [
          -2,
          "demo:make-cell:x"
        ],
        "99"
      ]
    ],
    "spider": "&#xF142;&#xF132;&#xF136;&#xF132;&#xF123;&#xF11E;&#xF100;&#xF143;&#xF126;&#xF112;&#xF121;&#xF13A;&#xF121;&#xF132;&#xF123;&#xF11D;&#xF100;&#xF143;&#xF126;&#xF112;&#xF127;&#xF119;&#xF121;&#xF132;&#xF123;&#xF11D;&#xF100;&#xF143;&#xF126;&#xF112;&#xF128;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 670
  },
  {
    "role": "code",
    "lines": [
      "= (get! $demo:make-cell:x) 99;"
    ],
    "preprocessed": "= (get! $demo:make-cell:x) 99;",
    "code": "21132211101302321000001332110001132233",
    "parse": [
      "=",
      [
        "get!",
        [
          -2,
          "demo:make-cell:x"
        ]
      ],
      "99"
    ],
    "spider": "&#xF136;&#xF132;&#xF123;&#xF11E;&#xF100;&#xF143;&#xF126;&#xF112;&#xF121;&#xF128;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 671
  },
  {
    "role": "file",
    "lines": [
      "== COS_ListPre =="
    ],
    "stanza": 672
  },
  {
    "role": "comment",
    "lines": [
      "# To make list describable as a function, need to preceed lists with an",
      "# argument count. Lists keep an explicit record of their length. This is",
      "# to avoid the need for using a special 'nil' symbol which cannot itself",
      "# be placed in the list.",
      "# pending: should introduce single? check function - but will be rewriting",
      "# all this list stuff soon."
    ],
    "section_description": "illustrate lists and some list operators",
    "section_category": "MATH",
    "section_index": 16,
    "stanza": 673
  },
  {
    "role": "code",
    "lines": [
      "define list-helper | ? n | ? ret | if (> $n 1) (? x | list-helper (- $n 1) (? y | ? z | ret (+ 1 $y) (cons $x $z))) (? x | ret 1 $x);"
    ],
    "preprocessed": "define list-helper | ? n | ? ret | if (> $n 1) (? x | list-helper (- $n 1) (? y | ? z | ret (+ 1 $y) (cons $x $z))) (? x | ret 1 $x);",
    "code": "2110132100001131232110032100010031232110032100010131232111132210030232100010032133221100321001113123210000113221011302321000100321332211003211001131232110032110100312321000101322101032130232110011332210101302321001113023211010033332211003210011131232100010132130232100111332233",
    "parse": [
      "define",
      "list-helper",
      [
        -1,
        "?",
        "n",
        [
          -1,
          "?",
          "ret",
          [
            -1,
            "if",
            [
              ">",
              [
                -2,
                "n"
              ],
              "1"
            ],
            [
              "?",
              "x",
              [
                -1,
                "list-helper",
                [
                  "-",
                  [
                    -2,
                    "n"
                  ],
                  "1"
                ],
                [
                  "?",
                  "y",
                  [
                    -1,
                    "?",
                    "z",
                    [
                      -1,
                      "ret",
                      [
                        "+",
                        "1",
                        [
                          -2,
                          "y"
                        ]
                      ],
                      [
                        "cons",
                        [
                          -2,
                          "x"
                        ],
                        [
                          -2,
                          "z"
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ],
            [
              "?",
              "x",
              [
                -1,
                "ret",
                "1",
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF126;&#xF114;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF115;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF116;&#xF101;&#xF143;&#xF142;&#xF132;&#xF137;&#xF100;&#xF143;&#xF126;&#xF115;&#xF134;&#xF121;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF126;&#xF114;&#xF132;&#xF13E;&#xF100;&#xF143;&#xF126;&#xF115;&#xF134;&#xF121;&#xF132;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF115;&#xF101;&#xF143;&#xF126;&#xF116;&#xF132;&#xF13D;&#xF134;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF132;&#xF123;&#xF116;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF126;&#xF116;&#xF134;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 674
  },
  {
    "role": "code",
    "lines": [
      "define list | ? n | if (= $n 0) (cons 0 0) (list-helper $n (? y | ? z | cons $y $z));"
    ],
    "preprocessed": "define list | ? n | if (= $n 0) (cons 0 0) (list-helper $n (? y | ? z | cons $y $z));",
    "code": "21101321000110312321100321000100312321111322113023210001003203322101013203203322100001130232100010032211003211001131232110032110100312321010130232110011302321101003332233",
    "parse": [
      "define",
      "list",
      [
        -1,
        "?",
        "n",
        [
          -1,
          "if",
          [
            "=",
            [
              -2,
              "n"
            ],
            "0"
          ],
          [
            "cons",
            "0",
            "0"
          ],
          [
            "list-helper",
            [
              -2,
              "n"
            ],
            [
              "?",
              "y",
              [
                -1,
                "?",
                "z",
                [
                  -1,
                  "cons",
                  [
                    -2,
                    "y"
                  ],
                  [
                    -2,
                    "z"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF126;&#xF117;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF115;&#xF101;&#xF143;&#xF142;&#xF132;&#xF136;&#xF100;&#xF143;&#xF126;&#xF115;&#xF133;&#xF121;&#xF132;&#xF123;&#xF116;&#xF133;&#xF133;&#xF121;&#xF132;&#xF126;&#xF114;&#xF100;&#xF143;&#xF126;&#xF115;&#xF132;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF115;&#xF101;&#xF143;&#xF123;&#xF116;&#xF100;&#xF143;&#xF125;&#xF114;&#xF100;&#xF143;&#xF125;&#xF115;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 675
  },
  {
    "role": "code",
    "lines": [
      "define head | ? lst | if (= (car $lst) 0) $undefined (if (= (car $lst) 1) (cdr $lst) (car | cdr $lst));"
    ],
    "preprocessed": "define head | ? lst | if (= (car $lst) 0) $undefined (if (= (car $lst) 1) (cdr $lst) (car | cdr $lst));",
    "code": "211013210001113123211003210010003123211113221132210110302321001000332033023210000032211113221132210110302321001000332133221011130232100100033221011031232101113023210010003332233",
    "parse": [
      "define",
      "head",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "if",
          [
            "=",
            [
              "car",
              [
                -2,
                "lst"
              ]
            ],
            "0"
          ],
          [
            -2,
            "undefined"
          ],
          [
            "if",
            [
              "=",
              [
                "car",
                [
                  -2,
                  "lst"
                ]
              ],
              "1"
            ],
            [
              "cdr",
              [
                -2,
                "lst"
              ]
            ],
            [
              "car",
              [
                -1,
                "cdr",
                [
                  -2,
                  "lst"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF126;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF119;&#xF101;&#xF143;&#xF142;&#xF132;&#xF136;&#xF132;&#xF123;&#xF117;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF133;&#xF121;&#xF100;&#xF143;&#xF124;&#xF111;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF123;&#xF117;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF134;&#xF121;&#xF132;&#xF123;&#xF118;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF132;&#xF123;&#xF117;&#xF101;&#xF143;&#xF123;&#xF118;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 676
  },
  {
    "role": "code",
    "lines": [
      "define tail | ? lst | if (= (car $lst) 0) $undefined (if (= (car $lst) 1) (cons 0 0) (cons (- (car $lst) 1) (cdr | cdr $lst)));"
    ],
    "preprocessed": "define tail | ? lst | if (= (car $lst) 0) $undefined (if (= (car $lst) 1) (cons 0 0) (cons (- (car $lst) 1) (cdr | cdr $lst)));",
    "code": "21101321001001312321100321001000312321111322113221011030232100100033203302321000003221111322113221011030232100100033213322101013203203322101013221011322101103023210010003321332210111312321011130232100100033332233",
    "parse": [
      "define",
      "tail",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "if",
          [
            "=",
            [
              "car",
              [
                -2,
                "lst"
              ]
            ],
            "0"
          ],
          [
            -2,
            "undefined"
          ],
          [
            "if",
            [
              "=",
              [
                "car",
                [
                  -2,
                  "lst"
                ]
              ],
              "1"
            ],
            [
              "cons",
              "0",
              "0"
            ],
            [
              "cons",
              [
                "-",
                [
                  "car",
                  [
                    -2,
                    "lst"
                  ]
                ],
                "1"
              ],
              [
                "cdr",
                [
                  -1,
                  "cdr",
                  [
                    -2,
                    "lst"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF119;&#xF101;&#xF143;&#xF142;&#xF132;&#xF136;&#xF132;&#xF123;&#xF117;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF133;&#xF121;&#xF100;&#xF143;&#xF124;&#xF111;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF123;&#xF117;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF134;&#xF121;&#xF132;&#xF123;&#xF116;&#xF133;&#xF133;&#xF121;&#xF132;&#xF123;&#xF116;&#xF132;&#xF13E;&#xF132;&#xF123;&#xF117;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF134;&#xF121;&#xF132;&#xF123;&#xF118;&#xF101;&#xF143;&#xF123;&#xF118;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 677
  },
  {
    "role": "code",
    "lines": [
      "define list-length | ? lst | car $lst;"
    ],
    "preprocessed": "define list-length | ? lst | car $lst;",
    "code": "21101321001010312321100321001000312321011030232100100032233",
    "parse": [
      "define",
      "list-length",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "car",
          [
            -2,
            "lst"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF126;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF119;&#xF101;&#xF143;&#xF123;&#xF117;&#xF100;&#xF143;&#xF126;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 678
  },
  {
    "role": "code",
    "lines": [
      "define list-ref | ? lst | ? n | if (= (list-ref $lst) 0) $undefined (if (= $n 0) (head $lst) (list-ref (tail $lst) (- $n 1)));"
    ],
    "preprocessed": "define list-ref | ? lst | ? n | if (= (list-ref $lst) 0) $undefined (if (= $n 0) (head $lst) (list-ref (tail $lst) (- $n 1)));",
    "code": "211013210010113123211003210010003123211003210001003123211113221132210010113023210010003320330232100000322111132211302321000100320332210001113023210010003322100101132210010013023210010003322101130232100010032133332233",
    "parse": [
      "define",
      "list-ref",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "?",
          "n",
          [
            -1,
            "if",
            [
              "=",
              [
                "list-ref",
                [
                  -2,
                  "lst"
                ]
              ],
              "0"
            ],
            [
              -2,
              "undefined"
            ],
            [
              "if",
              [
                "=",
                [
                  -2,
                  "n"
                ],
                "0"
              ],
              [
                "head",
                [
                  -2,
                  "lst"
                ]
              ],
              [
                "list-ref",
                [
                  "tail",
                  [
                    -2,
                    "lst"
                  ]
                ],
                [
                  "-",
                  [
                    -2,
                    "n"
                  ],
                  "1"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF126;&#xF11C;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF119;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF115;&#xF101;&#xF143;&#xF142;&#xF132;&#xF136;&#xF132;&#xF126;&#xF11C;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF133;&#xF121;&#xF100;&#xF143;&#xF124;&#xF111;&#xF132;&#xF142;&#xF132;&#xF136;&#xF100;&#xF143;&#xF126;&#xF115;&#xF133;&#xF121;&#xF132;&#xF126;&#xF118;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF132;&#xF13E;&#xF100;&#xF143;&#xF126;&#xF115;&#xF134;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 679
  },
  {
    "role": "code",
    "lines": [
      "define prepend | ? x | ? lst | if (= (list-length $lst) 0) (cons 1 $x) (cons (+ (list-length $lst) 1) (cons $x (cdr $lst)));"
    ],
    "preprocessed": "define prepend | ? x | ? lst | if (= (list-length $lst) 0) (cons 1 $x) (cons (+ (list-length $lst) 1) (cons $x (cdr $lst)));",
    "code": "2110132100110031232110032100111312321100321001000312321111322113221001010302321001000332033221010132130232100111332210101322101032210010103023210010003321332210101302321001113221011130232100100033332233",
    "parse": [
      "define",
      "prepend",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "lst",
          [
            -1,
            "if",
            [
              "=",
              [
                "list-length",
                [
                  -2,
                  "lst"
                ]
              ],
              "0"
            ],
            [
              "cons",
              "1",
              [
                -2,
                "x"
              ]
            ],
            [
              "cons",
              [
                "+",
                [
                  "list-length",
                  [
                    -2,
                    "lst"
                  ]
                ],
                "1"
              ],
              [
                "cons",
                [
                  -2,
                  "x"
                ],
                [
                  "cdr",
                  [
                    -2,
                    "lst"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF126;&#xF11D;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF119;&#xF101;&#xF143;&#xF142;&#xF132;&#xF136;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF133;&#xF121;&#xF132;&#xF123;&#xF116;&#xF134;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF123;&#xF116;&#xF132;&#xF13D;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF134;&#xF121;&#xF132;&#xF123;&#xF116;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF123;&#xF118;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 680
  },
  {
    "role": "code",
    "lines": [
      "define equal | ? x | ? y | if (= (single? $x) (single? $y)) (if (single? $x) (= $x $y) (list= $x $y)) $false;"
    ],
    "preprocessed": "define equal | ? x | ? y | if (= (single? $x) (single? $y)) (if (single? $x) (= $x $y) (list= $x $y)) $false;",
    "code": "21101321000312321100321001113123211003211001131232111132211322101010302321001113322101010302321100113332211113221010103023210011133221130232100111302321100113322100110130232100111302321100113330232032233",
    "parse": [
      "define",
      "equal",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              "=",
              [
                "single?",
                [
                  -2,
                  "x"
                ]
              ],
              [
                "single?",
                [
                  -2,
                  "y"
                ]
              ]
            ],
            [
              "if",
              [
                "single?",
                [
                  -2,
                  "x"
                ]
              ],
              [
                "=",
                [
                  -2,
                  "x"
                ],
                [
                  -2,
                  "y"
                ]
              ],
              [
                "list=",
                [
                  -2,
                  "x"
                ],
                [
                  -2,
                  "y"
                ]
              ]
            ],
            [
              -2,
              "false"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF13B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF142;&#xF132;&#xF136;&#xF132;&#xF124;&#xF11B;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF11B;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF124;&#xF11B;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF136;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF132;&#xF126;&#xF11E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 681
  },
  {
    "role": "code",
    "lines": [
      "define list= | ? x | ? y | if (= (list-length $x) (list-length $y)) (if (> (list-length $x) 0) (and (equal (head $x) (head $y)) (list= (tail $x) (tail $y))) $true) $false;"
    ],
    "preprocessed": "define list= | ? x | ? y | if (= (list-length $x) (list-length $y)) (if (> (list-length $x) 0) (and (equal (head $x) (head $y)) (list= (tail $x) (tail $y))) $true) $false;",
    "code": "21101321001101312321100321001113123211003211001131232111132211322100101030232100111332210010103023211001133322111132210032210010103023210011133203322110322100032210001113023210011133221000111302321100113332210011013221001001302321001113322100100130232110011333302321330232032233",
    "parse": [
      "define",
      "list=",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              "=",
              [
                "list-length",
                [
                  -2,
                  "x"
                ]
              ],
              [
                "list-length",
                [
                  -2,
                  "y"
                ]
              ]
            ],
            [
              "if",
              [
                ">",
                [
                  "list-length",
                  [
                    -2,
                    "x"
                  ]
                ],
                "0"
              ],
              [
                "and",
                [
                  "equal",
                  [
                    "head",
                    [
                      -2,
                      "x"
                    ]
                  ],
                  [
                    "head",
                    [
                      -2,
                      "y"
                    ]
                  ]
                ],
                [
                  "list=",
                  [
                    "tail",
                    [
                      -2,
                      "x"
                    ]
                  ],
                  [
                    "tail",
                    [
                      -2,
                      "y"
                    ]
                  ]
                ]
              ],
              [
                -2,
                "true"
              ]
            ],
            [
              -2,
              "false"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF126;&#xF11E;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF142;&#xF132;&#xF136;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF139;&#xF132;&#xF13B;&#xF132;&#xF126;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF126;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF121;&#xF100;&#xF143;&#xF134;&#xF121;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 682
  },
  {
    "role": "code",
    "lines": [
      "= (list-length | (list 3) 5 4 3) 3;"
    ],
    "preprocessed": "= (list-length | (list 3) 5 4 3) 3;",
    "code": "2113221001010312322100011032113321013210032113321132233",
    "parse": [
      "=",
      [
        "list-length",
        [
          -1,
          [
            "list",
            "3"
          ],
          "5",
          "4",
          "3"
        ]
      ],
      "3"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF11B;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF138;&#xF137;&#xF136;&#xF121;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 683
  },
  {
    "role": "code",
    "lines": [
      "= (list-length | (list 8) 8 4 3 1 2 0 6 7) 8;"
    ],
    "preprocessed": "= (list-length | (list 8) 8 4 3 1 2 0 6 7) 8;",
    "code": "21132210010103123221000110321000332100032100321132132103203211032111332100032233",
    "parse": [
      "=",
      [
        "list-length",
        [
          -1,
          [
            "list",
            "8"
          ],
          "8",
          "4",
          "3",
          "1",
          "2",
          "0",
          "6",
          "7"
        ]
      ],
      "8"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF11B;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF13B;&#xF121;&#xF13B;&#xF137;&#xF136;&#xF134;&#xF135;&#xF133;&#xF139;&#xF13A;&#xF121;&#xF13B;&#xF132;&#xF143;&#xF121;",
    "stanza": 684
  },
  {
    "role": "code",
    "lines": [
      "= (list-length | (list 1) 5) 1;"
    ],
    "preprocessed": "= (list-length | (list 1) 5) 1;",
    "code": "21132210010103123221000110321332101332132233",
    "parse": [
      "=",
      [
        "list-length",
        [
          -1,
          [
            "list",
            "1"
          ],
          "5"
        ]
      ],
      "1"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF11B;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF134;&#xF121;&#xF138;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 685
  },
  {
    "role": "code",
    "lines": [
      "= (list-length | (list 2) 2 1) 2;"
    ],
    "preprocessed": "= (list-length | (list 2) 2 1) 2;",
    "code": "211322100101031232210001103210332103213321032233",
    "parse": [
      "=",
      [
        "list-length",
        [
          -1,
          [
            "list",
            "2"
          ],
          "2",
          "1"
        ]
      ],
      "2"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF11B;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF135;&#xF134;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 686
  },
  {
    "role": "code",
    "lines": [
      "= (list-length | (list 0)) 0;"
    ],
    "preprocessed": "= (list-length | (list 0)) 0;",
    "code": "211322100101031232210001103203332032233",
    "parse": [
      "=",
      [
        "list-length",
        [
          -1,
          [
            "list",
            "0"
          ]
        ]
      ],
      "0"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF11B;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF133;&#xF121;&#xF121;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 687
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 10) 2 14 5 3 10 13 2 8 6 12) 2;"
    ],
    "preprocessed": "= (head | (list 10) 2 14 5 3 10 13 2 8 6 12) 2;",
    "code": "21132210001113123221000110321010332103211103210132113210103211013210321000321103211003321032233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "10"
          ],
          "2",
          "14",
          "5",
          "3",
          "10",
          "13",
          "2",
          "8",
          "6",
          "12"
        ]
      ],
      "2"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF13D;&#xF121;&#xF135;&#xF141;&#xF138;&#xF136;&#xF13D;&#xF140;&#xF135;&#xF13B;&#xF139;&#xF13F;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 688
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 10) 2 14 5 3 10 13 2 8 6 12) ((list 9) 14 5 3 10 13 2 8 6 12);"
    ],
    "preprocessed": "list= (tail | (list 10) 2 14 5 3 10 13 2 8 6 12) ((list 9) 14 5 3 10 13 2 8 6 12);",
    "code": "2100110132210010013123221000110321010332103211103210132113210103211013210321000321103211003322210001103210013321110321013211321010321101321032100032110321100332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "10"
          ],
          "2",
          "14",
          "5",
          "3",
          "10",
          "13",
          "2",
          "8",
          "6",
          "12"
        ]
      ],
      [
        [
          "list",
          "9"
        ],
        "14",
        "5",
        "3",
        "10",
        "13",
        "2",
        "8",
        "6",
        "12"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF13D;&#xF121;&#xF135;&#xF141;&#xF138;&#xF136;&#xF13D;&#xF140;&#xF135;&#xF13B;&#xF139;&#xF13F;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF13C;&#xF121;&#xF141;&#xF138;&#xF136;&#xF13D;&#xF140;&#xF135;&#xF13B;&#xF139;&#xF13F;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 689
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 10) 14 11 18 9 9 11 3 10 16 2) 14;"
    ],
    "preprocessed": "= (head | (list 10) 14 11 18 9 9 11 3 10 16 2) 14;",
    "code": "2113221000111312322100011032101033211103210113210010321001321001321011321132101032100003210332111032233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "10"
          ],
          "14",
          "11",
          "18",
          "9",
          "9",
          "11",
          "3",
          "10",
          "16",
          "2"
        ]
      ],
      "14"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF13D;&#xF121;&#xF141;&#xF13E;&#xF123;&#xF113;&#xF13C;&#xF13C;&#xF13E;&#xF136;&#xF13D;&#xF123;&#xF111;&#xF135;&#xF121;&#xF141;&#xF132;&#xF143;&#xF121;",
    "stanza": 690
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 10) 14 11 18 9 9 11 3 10 16 2) ((list 9) 11 18 9 9 11 3 10 16 2);"
    ],
    "preprocessed": "list= (tail | (list 10) 14 11 18 9 9 11 3 10 16 2) ((list 9) 11 18 9 9 11 3 10 16 2);",
    "code": "21001101322100100131232210001103210103321110321011321001032100132100132101132113210103210000321033222100011032100133210113210010321001321001321011321132101032100003210332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "10"
          ],
          "14",
          "11",
          "18",
          "9",
          "9",
          "11",
          "3",
          "10",
          "16",
          "2"
        ]
      ],
      [
        [
          "list",
          "9"
        ],
        "11",
        "18",
        "9",
        "9",
        "11",
        "3",
        "10",
        "16",
        "2"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF13D;&#xF121;&#xF141;&#xF13E;&#xF123;&#xF113;&#xF13C;&#xF13C;&#xF13E;&#xF136;&#xF13D;&#xF123;&#xF111;&#xF135;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF13C;&#xF121;&#xF13E;&#xF123;&#xF113;&#xF13C;&#xF13C;&#xF13E;&#xF136;&#xF13D;&#xF123;&#xF111;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 691
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 6) 19 7 16 17 12 1) 19;"
    ],
    "preprocessed": "= (head | (list 6) 19 7 16 17 12 1) 19;",
    "code": "21132210001113123221000110321103321001132111321000032100013211003213321001132233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "6"
          ],
          "19",
          "7",
          "16",
          "17",
          "12",
          "1"
        ]
      ],
      "19"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF139;&#xF121;&#xF123;&#xF114;&#xF13A;&#xF123;&#xF111;&#xF123;&#xF112;&#xF13F;&#xF134;&#xF121;&#xF123;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 692
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 6) 19 7 16 17 12 1) ((list 5) 7 16 17 12 1);"
    ],
    "preprocessed": "list= (tail | (list 6) 19 7 16 17 12 1) ((list 5) 7 16 17 12 1);",
    "code": "2100110132210010013123221000110321103321001132111321000032100013211003213322210001103210133211132100003210001321100321332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "6"
          ],
          "19",
          "7",
          "16",
          "17",
          "12",
          "1"
        ]
      ],
      [
        [
          "list",
          "5"
        ],
        "7",
        "16",
        "17",
        "12",
        "1"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF139;&#xF121;&#xF123;&#xF114;&#xF13A;&#xF123;&#xF111;&#xF123;&#xF112;&#xF13F;&#xF134;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF138;&#xF121;&#xF13A;&#xF123;&#xF111;&#xF123;&#xF112;&#xF13F;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 693
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 10) 8 16 9 18 5 11 17 4 1 0) 8;"
    ],
    "preprocessed": "= (head | (list 10) 8 16 9 18 5 11 17 4 1 0) 8;",
    "code": "2113221000111312322100011032101033210003210000321001321001032101321011321000132100321320332100032233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "10"
          ],
          "8",
          "16",
          "9",
          "18",
          "5",
          "11",
          "17",
          "4",
          "1",
          "0"
        ]
      ],
      "8"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF13D;&#xF121;&#xF13B;&#xF123;&#xF111;&#xF13C;&#xF123;&#xF113;&#xF138;&#xF13E;&#xF123;&#xF112;&#xF137;&#xF134;&#xF133;&#xF121;&#xF13B;&#xF132;&#xF143;&#xF121;",
    "stanza": 694
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 10) 8 16 9 18 5 11 17 4 1 0) ((list 9) 16 9 18 5 11 17 4 1 0);"
    ],
    "preprocessed": "list= (tail | (list 10) 8 16 9 18 5 11 17 4 1 0) ((list 9) 16 9 18 5 11 17 4 1 0);",
    "code": "21001101322100100131232210001103210103321000321000032100132100103210132101132100013210032132033222100011032100133210000321001321001032101321011321000132100321320332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "10"
          ],
          "8",
          "16",
          "9",
          "18",
          "5",
          "11",
          "17",
          "4",
          "1",
          "0"
        ]
      ],
      [
        [
          "list",
          "9"
        ],
        "16",
        "9",
        "18",
        "5",
        "11",
        "17",
        "4",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF13D;&#xF121;&#xF13B;&#xF123;&#xF111;&#xF13C;&#xF123;&#xF113;&#xF138;&#xF13E;&#xF123;&#xF112;&#xF137;&#xF134;&#xF133;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF13C;&#xF121;&#xF123;&#xF111;&#xF13C;&#xF123;&#xF113;&#xF138;&#xF13E;&#xF123;&#xF112;&#xF137;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 695
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 8) 18 7 0 0 4 19 1 5) 18;"
    ],
    "preprocessed": "= (head | (list 8) 18 7 0 0 4 19 1 5) 18;",
    "code": "211322100011131232210001103210003321001032111320320321003210011321321013321001032233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "8"
          ],
          "18",
          "7",
          "0",
          "0",
          "4",
          "19",
          "1",
          "5"
        ]
      ],
      "18"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF13B;&#xF121;&#xF123;&#xF113;&#xF13A;&#xF133;&#xF133;&#xF137;&#xF123;&#xF114;&#xF134;&#xF138;&#xF121;&#xF123;&#xF113;&#xF132;&#xF143;&#xF121;",
    "stanza": 696
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 8) 18 7 0 0 4 19 1 5) ((list 7) 7 0 0 4 19 1 5);"
    ],
    "preprocessed": "list= (tail | (list 8) 18 7 0 0 4 19 1 5) ((list 7) 7 0 0 4 19 1 5);",
    "code": "21001101322100100131232210001103210003321001032111320320321003210011321321013322210001103211133211132032032100321001132132101332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "8"
          ],
          "18",
          "7",
          "0",
          "0",
          "4",
          "19",
          "1",
          "5"
        ]
      ],
      [
        [
          "list",
          "7"
        ],
        "7",
        "0",
        "0",
        "4",
        "19",
        "1",
        "5"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF13B;&#xF121;&#xF123;&#xF113;&#xF13A;&#xF133;&#xF133;&#xF137;&#xF123;&#xF114;&#xF134;&#xF138;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF13A;&#xF121;&#xF13A;&#xF133;&#xF133;&#xF137;&#xF123;&#xF114;&#xF134;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 697
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 3) 7 1 7) 7;"
    ],
    "preprocessed": "= (head | (list 3) 7 1 7) 7;",
    "code": "2113221000111312322100011032113321113213211133211132233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "3"
          ],
          "7",
          "1",
          "7"
        ]
      ],
      "7"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF13A;&#xF134;&#xF13A;&#xF121;&#xF13A;&#xF132;&#xF143;&#xF121;",
    "stanza": 698
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 3) 7 1 7) ((list 2) 1 7);"
    ],
    "preprocessed": "list= (tail | (list 3) 7 1 7) ((list 2) 1 7);",
    "code": "21001101322100100131232210001103211332111321321113322210001103210332132111332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "3"
          ],
          "7",
          "1",
          "7"
        ]
      ],
      [
        [
          "list",
          "2"
        ],
        "1",
        "7"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF13A;&#xF134;&#xF13A;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF134;&#xF13A;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 699
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 8) 8 2 19 15 13 6 19 12) 8;"
    ],
    "preprocessed": "= (head | (list 8) 8 2 19 15 13 6 19 12) 8;",
    "code": "21132210001113123221000110321000332100032103210011321111321101321103210011321100332100032233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "8"
          ],
          "8",
          "2",
          "19",
          "15",
          "13",
          "6",
          "19",
          "12"
        ]
      ],
      "8"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF13B;&#xF121;&#xF13B;&#xF135;&#xF123;&#xF114;&#xF142;&#xF140;&#xF139;&#xF123;&#xF114;&#xF13F;&#xF121;&#xF13B;&#xF132;&#xF143;&#xF121;",
    "stanza": 700
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 8) 8 2 19 15 13 6 19 12) ((list 7) 2 19 15 13 6 19 12);"
    ],
    "preprocessed": "list= (tail | (list 8) 8 2 19 15 13 6 19 12) ((list 7) 2 19 15 13 6 19 12);",
    "code": "210011013221001001312322100011032100033210003210321001132111132110132110321001132110033222100011032111332103210011321111321101321103210011321100332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "8"
          ],
          "8",
          "2",
          "19",
          "15",
          "13",
          "6",
          "19",
          "12"
        ]
      ],
      [
        [
          "list",
          "7"
        ],
        "2",
        "19",
        "15",
        "13",
        "6",
        "19",
        "12"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF13B;&#xF121;&#xF13B;&#xF135;&#xF123;&#xF114;&#xF142;&#xF140;&#xF139;&#xF123;&#xF114;&#xF13F;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF13A;&#xF121;&#xF135;&#xF123;&#xF114;&#xF142;&#xF140;&#xF139;&#xF123;&#xF114;&#xF13F;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 701
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 4) 18 3 17 6) 18;"
    ],
    "preprocessed": "= (head | (list 4) 18 3 17 6) 18;",
    "code": "21132210001113123221000110321003321001032113210001321103321001032233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "4"
          ],
          "18",
          "3",
          "17",
          "6"
        ]
      ],
      "18"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF137;&#xF121;&#xF123;&#xF113;&#xF136;&#xF123;&#xF112;&#xF139;&#xF121;&#xF123;&#xF113;&#xF132;&#xF143;&#xF121;",
    "stanza": 702
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 4) 18 3 17 6) ((list 3) 3 17 6);"
    ],
    "preprocessed": "list= (tail | (list 4) 18 3 17 6) ((list 3) 3 17 6);",
    "code": "210011013221001001312322100011032100332100103211321000132110332221000110321133211321000132110332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "4"
          ],
          "18",
          "3",
          "17",
          "6"
        ]
      ],
      [
        [
          "list",
          "3"
        ],
        "3",
        "17",
        "6"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF137;&#xF121;&#xF123;&#xF113;&#xF136;&#xF123;&#xF112;&#xF139;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF136;&#xF123;&#xF112;&#xF139;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 703
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 7) 3 10 7 0 16 0 13) 3;"
    ],
    "preprocessed": "= (head | (list 7) 3 10 7 0 16 0 13) 3;",
    "code": "2113221000111312322100011032111332113210103211132032100003203211013321132233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "7"
          ],
          "3",
          "10",
          "7",
          "0",
          "16",
          "0",
          "13"
        ]
      ],
      "3"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF13A;&#xF121;&#xF136;&#xF13D;&#xF13A;&#xF133;&#xF123;&#xF111;&#xF133;&#xF140;&#xF121;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 704
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 7) 3 10 7 0 16 0 13) ((list 6) 10 7 0 16 0 13);"
    ],
    "preprocessed": "list= (tail | (list 7) 3 10 7 0 16 0 13) ((list 6) 10 7 0 16 0 13);",
    "code": "21001101322100100131232210001103211133211321010321113203210000320321101332221000110321103321010321113203210000320321101332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "7"
          ],
          "3",
          "10",
          "7",
          "0",
          "16",
          "0",
          "13"
        ]
      ],
      [
        [
          "list",
          "6"
        ],
        "10",
        "7",
        "0",
        "16",
        "0",
        "13"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF13A;&#xF121;&#xF136;&#xF13D;&#xF13A;&#xF133;&#xF123;&#xF111;&#xF133;&#xF140;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF139;&#xF121;&#xF13D;&#xF13A;&#xF133;&#xF123;&#xF111;&#xF133;&#xF140;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 705
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 9) 15 12 17 16 11 19 5 4 12) 15;"
    ],
    "preprocessed": "= (head | (list 9) 15 12 17 16 11 19 5 4 12) 15;",
    "code": "2113221000111312322100011032100133211113211003210001321000032101132100113210132100321100332111132233",
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "9"
          ],
          "15",
          "12",
          "17",
          "16",
          "11",
          "19",
          "5",
          "4",
          "12"
        ]
      ],
      "15"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF13C;&#xF121;&#xF142;&#xF13F;&#xF123;&#xF112;&#xF123;&#xF111;&#xF13E;&#xF123;&#xF114;&#xF138;&#xF137;&#xF13F;&#xF121;&#xF142;&#xF132;&#xF143;&#xF121;",
    "stanza": 706
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 9) 15 12 17 16 11 19 5 4 12) ((list 8) 12 17 16 11 19 5 4 12);"
    ],
    "preprocessed": "list= (tail | (list 9) 15 12 17 16 11 19 5 4 12) ((list 8) 12 17 16 11 19 5 4 12);",
    "code": "21001101322100100131232210001103210013321111321100321000132100003210113210011321013210032110033222100011032100033211003210001321000032101132100113210132100321100332233",
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "9"
          ],
          "15",
          "12",
          "17",
          "16",
          "11",
          "19",
          "5",
          "4",
          "12"
        ]
      ],
      [
        [
          "list",
          "8"
        ],
        "12",
        "17",
        "16",
        "11",
        "19",
        "5",
        "4",
        "12"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF13C;&#xF121;&#xF142;&#xF13F;&#xF123;&#xF112;&#xF123;&#xF111;&#xF13E;&#xF123;&#xF114;&#xF138;&#xF137;&#xF13F;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF13B;&#xF121;&#xF13F;&#xF123;&#xF112;&#xF123;&#xF111;&#xF13E;&#xF123;&#xF114;&#xF138;&#xF137;&#xF13F;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 707
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 3) 11 16 15) 2) 15;"
    ],
    "preprocessed": "= (list-ref ((list 3) 11 16 15) 2) 15;",
    "code": "21132210010113222100011032113321011321000032111133210332111132233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            "3"
          ],
          "11",
          "16",
          "15"
        ],
        "2"
      ],
      "15"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF13E;&#xF123;&#xF111;&#xF142;&#xF121;&#xF135;&#xF121;&#xF142;&#xF132;&#xF143;&#xF121;",
    "stanza": 708
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 5) 8 4 19 12 1) 0) 8;"
    ],
    "preprocessed": "= (list-ref ((list 5) 8 4 19 12 1) 0) 8;",
    "code": "2113221001011322210001103210133210003210032100113211003213320332100032233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            "5"
          ],
          "8",
          "4",
          "19",
          "12",
          "1"
        ],
        "0"
      ],
      "8"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF132;&#xF126;&#xF117;&#xF138;&#xF121;&#xF13B;&#xF137;&#xF123;&#xF114;&#xF13F;&#xF134;&#xF121;&#xF133;&#xF121;&#xF13B;&#xF132;&#xF143;&#xF121;",
    "stanza": 709
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 9) 7 8 3 6 10 7 5 7 14) 0) 7;"
    ],
    "preprocessed": "= (list-ref ((list 9) 7 8 3 6 10 7 5 7 14) 0) 7;",
    "code": "211322100101132221000110321001332111321000321132110321010321113210132111321110332033211132233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            "9"
          ],
          "7",
          "8",
          "3",
          "6",
          "10",
          "7",
          "5",
          "7",
          "14"
        ],
        "0"
      ],
      "7"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF132;&#xF126;&#xF117;&#xF13C;&#xF121;&#xF13A;&#xF13B;&#xF136;&#xF139;&#xF13D;&#xF13A;&#xF138;&#xF13A;&#xF141;&#xF121;&#xF133;&#xF121;&#xF13A;&#xF132;&#xF143;&#xF121;",
    "stanza": 710
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 3) 15 10 12) 2) 12;"
    ],
    "preprocessed": "= (list-ref ((list 3) 15 10 12) 2) 12;",
    "code": "2113221001011322210001103211332111132101032110033210332110032233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            "3"
          ],
          "15",
          "10",
          "12"
        ],
        "2"
      ],
      "12"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF142;&#xF13D;&#xF13F;&#xF121;&#xF135;&#xF121;&#xF13F;&#xF132;&#xF143;&#xF121;",
    "stanza": 711
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 3) 6 5 8) 2) 8;"
    ],
    "preprocessed": "= (list-ref ((list 3) 6 5 8) 2) 8;",
    "code": "21132210010113222100011032113321103210132100033210332100032233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            "3"
          ],
          "6",
          "5",
          "8"
        ],
        "2"
      ],
      "8"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF139;&#xF138;&#xF13B;&#xF121;&#xF135;&#xF121;&#xF13B;&#xF132;&#xF143;&#xF121;",
    "stanza": 712
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 2) 13 13) 1) 13;"
    ],
    "preprocessed": "= (list-ref ((list 2) 13 13) 1) 13;",
    "code": "211322100101132221000110321033211013211013321332110132233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            "2"
          ],
          "13",
          "13"
        ],
        "1"
      ],
      "13"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF140;&#xF140;&#xF121;&#xF134;&#xF121;&#xF140;&#xF132;&#xF143;&#xF121;",
    "stanza": 713
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 10) 0 15 1 8 7 17 2 4 6 3) 3) 8;"
    ],
    "preprocessed": "= (list-ref ((list 10) 0 15 1 8 7 17 2 4 6 3) 3) 8;",
    "code": "211322100101132221000110321010332032111132132100032111321000132103210032110321133211332100032233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            "10"
          ],
          "0",
          "15",
          "1",
          "8",
          "7",
          "17",
          "2",
          "4",
          "6",
          "3"
        ],
        "3"
      ],
      "8"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF132;&#xF126;&#xF117;&#xF13D;&#xF121;&#xF133;&#xF142;&#xF134;&#xF13B;&#xF13A;&#xF123;&#xF112;&#xF135;&#xF137;&#xF139;&#xF136;&#xF121;&#xF136;&#xF121;&#xF13B;&#xF132;&#xF143;&#xF121;",
    "stanza": 714
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 6) 10 13 8 13 10 9) 0) 10;"
    ],
    "preprocessed": "= (list-ref ((list 6) 10 13 8 13 10 9) 0) 10;",
    "code": "2113221001011322210001103211033210103211013210003211013210103210013320332101032233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            "6"
          ],
          "10",
          "13",
          "8",
          "13",
          "10",
          "9"
        ],
        "0"
      ],
      "10"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF132;&#xF126;&#xF117;&#xF139;&#xF121;&#xF13D;&#xF140;&#xF13B;&#xF140;&#xF13D;&#xF13C;&#xF121;&#xF133;&#xF121;&#xF13D;&#xF132;&#xF143;&#xF121;",
    "stanza": 715
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 5) 8 10 12 4 7) 4) 7;"
    ],
    "preprocessed": "= (list-ref ((list 5) 8 10 12 4 7) 4) 7;",
    "code": "211322100101132221000110321013321000321010321100321003211133210033211132233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            "5"
          ],
          "8",
          "10",
          "12",
          "4",
          "7"
        ],
        "4"
      ],
      "7"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF132;&#xF126;&#xF117;&#xF138;&#xF121;&#xF13B;&#xF13D;&#xF13F;&#xF137;&#xF13A;&#xF121;&#xF137;&#xF121;&#xF13A;&#xF132;&#xF143;&#xF121;",
    "stanza": 716
  },
  {
    "role": "code",
    "lines": [
      "= (list-ref ((list 4) 12 13 8 17) 0) 12;"
    ],
    "preprocessed": "= (list-ref ((list 4) 12 13 8 17) 0) 12;",
    "code": "21132210010113222100011032100332110032110132100032100013320332110032233",
    "parse": [
      "=",
      [
        "list-ref",
        [
          [
            "list",
            "4"
          ],
          "12",
          "13",
          "8",
          "17"
        ],
        "0"
      ],
      "12"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF132;&#xF126;&#xF117;&#xF137;&#xF121;&#xF13F;&#xF140;&#xF13B;&#xF123;&#xF112;&#xF121;&#xF133;&#xF121;&#xF13F;&#xF132;&#xF143;&#xF121;",
    "stanza": 717
  },
  {
    "role": "code",
    "lines": [
      "list= ((list 0)) ((list 0));"
    ],
    "preprocessed": "list= ((list 0)) ((list 0));",
    "code": "210011013222100011032033322210001103203332233",
    "parse": [
      "list=",
      [
        [
          "list",
          "0"
        ]
      ],
      [
        [
          "list",
          "0"
        ]
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF132;&#xF126;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 718
  },
  {
    "role": "code",
    "lines": [
      "list= ((list 1) 5) ((list 1) 5);"
    ],
    "preprocessed": "list= ((list 1) 5) ((list 1) 5);",
    "code": "2100110132221000110321332101332221000110321332101332233",
    "parse": [
      "list=",
      [
        [
          "list",
          "1"
        ],
        "5"
      ],
      [
        [
          "list",
          "1"
        ],
        "5"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF132;&#xF126;&#xF117;&#xF134;&#xF121;&#xF138;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF134;&#xF121;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 719
  },
  {
    "role": "code",
    "lines": [
      "list= ((list 2) 2 16) ((list 2) 2 16);"
    ],
    "preprocessed": "list= ((list 2) 2 16) ((list 2) 2 16);",
    "code": "210011013222100011032103321032100003322210001103210332103210000332233",
    "parse": [
      "list=",
      [
        [
          "list",
          "2"
        ],
        "2",
        "16"
      ],
      [
        [
          "list",
          "2"
        ],
        "2",
        "16"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF135;&#xF123;&#xF111;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF135;&#xF123;&#xF111;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 720
  },
  {
    "role": "code",
    "lines": [
      "list= ((list 3) 1 1 10) ((list 3) 1 1 10);"
    ],
    "preprocessed": "list= ((list 3) 1 1 10) ((list 3) 1 1 10);",
    "code": "21001101322210001103211332132132101033222100011032113321321321010332233",
    "parse": [
      "list=",
      [
        [
          "list",
          "3"
        ],
        "1",
        "1",
        "10"
      ],
      [
        [
          "list",
          "3"
        ],
        "1",
        "1",
        "10"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF134;&#xF134;&#xF13D;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF134;&#xF134;&#xF13D;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 721
  },
  {
    "role": "code",
    "lines": [
      "list= ((list 4) 11 13 9 12) ((list 4) 11 13 9 12);"
    ],
    "preprocessed": "list= ((list 4) 11 13 9 12) ((list 4) 11 13 9 12);",
    "code": "2100110132221000110321003321011321101321001321100332221000110321003321011321101321001321100332233",
    "parse": [
      "list=",
      [
        [
          "list",
          "4"
        ],
        "11",
        "13",
        "9",
        "12"
      ],
      [
        [
          "list",
          "4"
        ],
        "11",
        "13",
        "9",
        "12"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF132;&#xF126;&#xF117;&#xF137;&#xF121;&#xF13E;&#xF140;&#xF13C;&#xF13F;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF137;&#xF121;&#xF13E;&#xF140;&#xF13C;&#xF13F;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 722
  },
  {
    "role": "comment",
    "lines": [
      "# this next batch of examples are a bit misleading, should streamline"
    ],
    "stanza": 723
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 0)) ((list 1) 2);"
    ],
    "preprocessed": "not | list= ((list 0)) ((list 1) 2);",
    "code": "210131232100110132221000110320333222100011032133210332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            "0"
          ]
        ],
        [
          [
            "list",
            "1"
          ],
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF126;&#xF11E;&#xF132;&#xF132;&#xF126;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF134;&#xF121;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 724
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 0)) ((list 1) 2);"
    ],
    "preprocessed": "not | list= ((list 0)) ((list 1) 2);",
    "code": "210131232100110132221000110320333222100011032133210332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            "0"
          ]
        ],
        [
          [
            "list",
            "1"
          ],
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF126;&#xF11E;&#xF132;&#xF132;&#xF126;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF134;&#xF121;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 725
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 1) 16) ((list 2) 8 16);"
    ],
    "preprocessed": "not | list= ((list 1) 16) ((list 2) 8 16);",
    "code": "21013123210011013222100011032133210000332221000110321033210003210000332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            "1"
          ],
          "16"
        ],
        [
          [
            "list",
            "2"
          ],
          "8",
          "16"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF126;&#xF11E;&#xF132;&#xF132;&#xF126;&#xF117;&#xF134;&#xF121;&#xF123;&#xF111;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF13B;&#xF123;&#xF111;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 726
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 1) 16) ((list 2) 16 7);"
    ],
    "preprocessed": "not | list= ((list 1) 16) ((list 2) 16 7);",
    "code": "2101312321001101322210001103213321000033222100011032103321000032111332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            "1"
          ],
          "16"
        ],
        [
          [
            "list",
            "2"
          ],
          "16",
          "7"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF126;&#xF11E;&#xF132;&#xF132;&#xF126;&#xF117;&#xF134;&#xF121;&#xF123;&#xF111;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF123;&#xF111;&#xF13A;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 727
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 2) 16 0) ((list 3) 4 16 0);"
    ],
    "preprocessed": "not | list= ((list 2) 16 0) ((list 3) 4 16 0);",
    "code": "21013123210011013222100011032103321000032033222100011032113321003210000320332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            "2"
          ],
          "16",
          "0"
        ],
        [
          [
            "list",
            "3"
          ],
          "4",
          "16",
          "0"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF126;&#xF11E;&#xF132;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF123;&#xF111;&#xF133;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF137;&#xF123;&#xF111;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 728
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 2) 16 0) ((list 3) 16 0 1);"
    ],
    "preprocessed": "not | list= ((list 2) 16 0) ((list 3) 16 0 1);",
    "code": "210131232100110132221000110321033210000320332221000110321133210000320321332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            "2"
          ],
          "16",
          "0"
        ],
        [
          [
            "list",
            "3"
          ],
          "16",
          "0",
          "1"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF126;&#xF11E;&#xF132;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF123;&#xF111;&#xF133;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF123;&#xF111;&#xF133;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 729
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 3) 5 4 17) ((list 4) 5 5 4 17);"
    ],
    "preprocessed": "not | list= ((list 3) 5 4 17) ((list 4) 5 5 4 17);",
    "code": "21013123210011013222100011032113321013210032100013322210001103210033210132101321003210001332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            "3"
          ],
          "5",
          "4",
          "17"
        ],
        [
          [
            "list",
            "4"
          ],
          "5",
          "5",
          "4",
          "17"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF126;&#xF11E;&#xF132;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF138;&#xF137;&#xF123;&#xF112;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF137;&#xF121;&#xF138;&#xF138;&#xF137;&#xF123;&#xF112;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 730
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 3) 5 4 17) ((list 4) 5 4 17 2);"
    ],
    "preprocessed": "not | list= ((list 3) 5 4 17) ((list 4) 5 4 17 2);",
    "code": "2101312321001101322210001103211332101321003210001332221000110321003321013210032100013210332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            "3"
          ],
          "5",
          "4",
          "17"
        ],
        [
          [
            "list",
            "4"
          ],
          "5",
          "4",
          "17",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF126;&#xF11E;&#xF132;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF138;&#xF137;&#xF123;&#xF112;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF137;&#xF121;&#xF138;&#xF137;&#xF123;&#xF112;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 731
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 4) 1 17 18 8) ((list 5) 4 1 17 18 8);"
    ],
    "preprocessed": "not | list= ((list 4) 1 17 18 8) ((list 5) 4 1 17 18 8);",
    "code": "210131232100110132221000110321003321321000132100103210003322210001103210133210032132100013210010321000332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            "4"
          ],
          "1",
          "17",
          "18",
          "8"
        ],
        [
          [
            "list",
            "5"
          ],
          "4",
          "1",
          "17",
          "18",
          "8"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF126;&#xF11E;&#xF132;&#xF132;&#xF126;&#xF117;&#xF137;&#xF121;&#xF134;&#xF123;&#xF112;&#xF123;&#xF113;&#xF13B;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF138;&#xF121;&#xF137;&#xF134;&#xF123;&#xF112;&#xF123;&#xF113;&#xF13B;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 732
  },
  {
    "role": "code",
    "lines": [
      "not | list= ((list 4) 1 17 18 8) ((list 5) 1 17 18 8 3);"
    ],
    "preprocessed": "not | list= ((list 4) 1 17 18 8) ((list 5) 1 17 18 8 3);",
    "code": "21013123210011013222100011032100332132100013210010321000332221000110321013321321000132100103210003211332233",
    "parse": [
      "not",
      [
        -1,
        "list=",
        [
          [
            "list",
            "4"
          ],
          "1",
          "17",
          "18",
          "8"
        ],
        [
          [
            "list",
            "5"
          ],
          "1",
          "17",
          "18",
          "8",
          "3"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF126;&#xF11E;&#xF132;&#xF132;&#xF126;&#xF117;&#xF137;&#xF121;&#xF134;&#xF123;&#xF112;&#xF123;&#xF113;&#xF13B;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF138;&#xF121;&#xF134;&#xF123;&#xF112;&#xF123;&#xF113;&#xF13B;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 733
  },
  {
    "role": "comment",
    "lines": [
      "# some helpful functions"
    ],
    "stanza": 734
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 15 | (list 0)) ((list 1) 15);"
    ],
    "preprocessed": "list= (prepend 15 | (list 0)) ((list 1) 15);",
    "code": "210011013221001100321111312322100011032033322210001103213321111332233",
    "parse": [
      "list=",
      [
        "prepend",
        "15",
        [
          -1,
          [
            "list",
            "0"
          ]
        ]
      ],
      [
        [
          "list",
          "1"
        ],
        "15"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11D;&#xF142;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF134;&#xF121;&#xF142;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 735
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 15 | (list 1) 7) ((list 2) 15 7);"
    ],
    "preprocessed": "list= (prepend 15 | (list 1) 7) ((list 2) 15 7);",
    "code": "21001101322100110032111131232210001103213321113322210001103210332111132111332233",
    "parse": [
      "list=",
      [
        "prepend",
        "15",
        [
          -1,
          [
            "list",
            "1"
          ],
          "7"
        ]
      ],
      [
        [
          "list",
          "2"
        ],
        "15",
        "7"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11D;&#xF142;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF134;&#xF121;&#xF13A;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF142;&#xF13A;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 736
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 13 | (list 2) 18 11) ((list 3) 13 18 11);"
    ],
    "preprocessed": "list= (prepend 13 | (list 2) 18 11) ((list 3) 13 18 11);",
    "code": "2100110132210011003211013123221000110321033210010321011332221000110321133211013210010321011332233",
    "parse": [
      "list=",
      [
        "prepend",
        "13",
        [
          -1,
          [
            "list",
            "2"
          ],
          "18",
          "11"
        ]
      ],
      [
        [
          "list",
          "3"
        ],
        "13",
        "18",
        "11"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11D;&#xF140;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF123;&#xF113;&#xF13E;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF140;&#xF123;&#xF113;&#xF13E;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 737
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 17 | (list 3) 0 13 6) ((list 4) 17 0 13 6);"
    ],
    "preprocessed": "list= (prepend 17 | (list 3) 0 13 6) ((list 4) 17 0 13 6);",
    "code": "210011013221001100321000131232210001103211332032110132110332221000110321003321000132032110132110332233",
    "parse": [
      "list=",
      [
        "prepend",
        "17",
        [
          -1,
          [
            "list",
            "3"
          ],
          "0",
          "13",
          "6"
        ]
      ],
      [
        [
          "list",
          "4"
        ],
        "17",
        "0",
        "13",
        "6"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11D;&#xF123;&#xF112;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF133;&#xF140;&#xF139;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF137;&#xF121;&#xF123;&#xF112;&#xF133;&#xF140;&#xF139;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 738
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 1 | (list 4) 7 17 11 10) ((list 5) 1 7 17 11 10);"
    ],
    "preprocessed": "list= (prepend 1 | (list 4) 7 17 11 10) ((list 5) 1 7 17 11 10);",
    "code": "2100110132210011003213123221000110321003321113210001321011321010332221000110321013321321113210001321011321010332233",
    "parse": [
      "list=",
      [
        "prepend",
        "1",
        [
          -1,
          [
            "list",
            "4"
          ],
          "7",
          "17",
          "11",
          "10"
        ]
      ],
      [
        [
          "list",
          "5"
        ],
        "1",
        "7",
        "17",
        "11",
        "10"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11D;&#xF134;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF137;&#xF121;&#xF13A;&#xF123;&#xF112;&#xF13E;&#xF13D;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF138;&#xF121;&#xF134;&#xF13A;&#xF123;&#xF112;&#xF13E;&#xF13D;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 739
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 0 | (list 5) 3 18 13 5 12) ((list 6) 0 3 18 13 5 12);"
    ],
    "preprocessed": "list= (prepend 0 | (list 5) 3 18 13 5 12) ((list 6) 0 3 18 13 5 12);",
    "code": "210011013221001100320312322100011032101332113210010321101321013211003322210001103211033203211321001032110132101321100332233",
    "parse": [
      "list=",
      [
        "prepend",
        "0",
        [
          -1,
          [
            "list",
            "5"
          ],
          "3",
          "18",
          "13",
          "5",
          "12"
        ]
      ],
      [
        [
          "list",
          "6"
        ],
        "0",
        "3",
        "18",
        "13",
        "5",
        "12"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11D;&#xF133;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF138;&#xF121;&#xF136;&#xF123;&#xF113;&#xF140;&#xF138;&#xF13F;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF139;&#xF121;&#xF133;&#xF136;&#xF123;&#xF113;&#xF140;&#xF138;&#xF13F;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 740
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 9 | (list 6) 15 15 10 12 2 4) ((list 7) 9 15 15 10 12 2 4);"
    ],
    "preprocessed": "list= (prepend 9 | (list 6) 15 15 10 12 2 4) ((list 7) 9 15 15 10 12 2 4);",
    "code": "2100110132210011003210013123221000110321103321111321111321010321100321032100332221000110321113321001321111321111321010321100321032100332233",
    "parse": [
      "list=",
      [
        "prepend",
        "9",
        [
          -1,
          [
            "list",
            "6"
          ],
          "15",
          "15",
          "10",
          "12",
          "2",
          "4"
        ]
      ],
      [
        [
          "list",
          "7"
        ],
        "9",
        "15",
        "15",
        "10",
        "12",
        "2",
        "4"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11D;&#xF13C;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF139;&#xF121;&#xF142;&#xF142;&#xF13D;&#xF13F;&#xF135;&#xF137;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF13A;&#xF121;&#xF13C;&#xF142;&#xF142;&#xF13D;&#xF13F;&#xF135;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 741
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 13 | (list 7) 18 12 3 18 8 3 17) ((list 8) 13 18 12 3 18 8 3 17);"
    ],
    "preprocessed": "list= (prepend 13 | (list 7) 18 12 3 18 8 3 17) ((list 8) 13 18 12 3 18 8 3 17);",
    "code": "210011013221001100321101312322100011032111332100103211003211321001032100032113210001332221000110321000332110132100103211003211321001032100032113210001332233",
    "parse": [
      "list=",
      [
        "prepend",
        "13",
        [
          -1,
          [
            "list",
            "7"
          ],
          "18",
          "12",
          "3",
          "18",
          "8",
          "3",
          "17"
        ]
      ],
      [
        [
          "list",
          "8"
        ],
        "13",
        "18",
        "12",
        "3",
        "18",
        "8",
        "3",
        "17"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11D;&#xF140;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF13A;&#xF121;&#xF123;&#xF113;&#xF13F;&#xF136;&#xF123;&#xF113;&#xF13B;&#xF136;&#xF123;&#xF112;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF13B;&#xF121;&#xF140;&#xF123;&#xF113;&#xF13F;&#xF136;&#xF123;&#xF113;&#xF13B;&#xF136;&#xF123;&#xF112;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 742
  },
  {
    "role": "code",
    "lines": [
      "define pair | ? x | ? y | (list 2) $x $y;"
    ],
    "preprocessed": "define pair | ? x | ? y | (list 2) $x $y;",
    "code": "211013210011103123211003210011131232110032110011312322100011032103302321001113023211001132233",
    "parse": [
      "define",
      "pair",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            [
              "list",
              "2"
            ],
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF126;&#xF11F;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 743
  },
  {
    "role": "code",
    "lines": [
      "define first | ? lst | head $lst;"
    ],
    "preprocessed": "define first | ? lst | head $lst;",
    "code": "2110132100111131232110032100100031232100011130232100100032233",
    "parse": [
      "define",
      "first",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "head",
          [
            -2,
            "lst"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF126;&#xF120;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF119;&#xF101;&#xF143;&#xF126;&#xF118;&#xF100;&#xF143;&#xF126;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 744
  },
  {
    "role": "code",
    "lines": [
      "define second | ? lst | head | tail $lst;"
    ],
    "preprocessed": "define second | ? lst | head | tail $lst;",
    "code": "2110132101000031232110032100100031232100011131232100100130232100100032233",
    "parse": [
      "define",
      "second",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "head",
          [
            -1,
            "tail",
            [
              -2,
              "lst"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF127;&#xF111;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF119;&#xF101;&#xF143;&#xF126;&#xF118;&#xF101;&#xF143;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF126;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 745
  },
  {
    "role": "code",
    "lines": [
      "list= (pair 4 7) | (list 2) 4 7;"
    ],
    "preprocessed": "list= (pair 4 7) | (list 2) 4 7;",
    "code": "21001101322100111032100321113312322100011032103321003211132233",
    "parse": [
      "list=",
      [
        "pair",
        "4",
        "7"
      ],
      [
        -1,
        [
          "list",
          "2"
        ],
        "4",
        "7"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11F;&#xF137;&#xF13A;&#xF121;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF137;&#xF13A;&#xF132;&#xF143;&#xF121;",
    "stanza": 746
  },
  {
    "role": "code",
    "lines": [
      "= (first | pair 4 7) 4;"
    ],
    "preprocessed": "= (first | pair 4 7) 4;",
    "code": "2113221001111312321001110321003211133210032233",
    "parse": [
      "=",
      [
        "first",
        [
          -1,
          "pair",
          "4",
          "7"
        ]
      ],
      "4"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF120;&#xF101;&#xF143;&#xF126;&#xF11F;&#xF137;&#xF13A;&#xF121;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 747
  },
  {
    "role": "code",
    "lines": [
      "= (second | pair 4 7) 7;"
    ],
    "preprocessed": "= (second | pair 4 7) 7;",
    "code": "2113221010000312321001110321003211133211132233",
    "parse": [
      "=",
      [
        "second",
        [
          -1,
          "pair",
          "4",
          "7"
        ]
      ],
      "7"
    ],
    "spider": "&#xF136;&#xF132;&#xF127;&#xF111;&#xF101;&#xF143;&#xF126;&#xF11F;&#xF137;&#xF13A;&#xF121;&#xF13A;&#xF132;&#xF143;&#xF121;",
    "stanza": 748
  },
  {
    "role": "code",
    "lines": [
      "list= (pair 2 2) | (list 2) 2 2;"
    ],
    "preprocessed": "list= (pair 2 2) | (list 2) 2 2;",
    "code": "2100110132210011103210321033123221000110321033210321032233",
    "parse": [
      "list=",
      [
        "pair",
        "2",
        "2"
      ],
      [
        -1,
        [
          "list",
          "2"
        ],
        "2",
        "2"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11F;&#xF135;&#xF135;&#xF121;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF135;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 749
  },
  {
    "role": "code",
    "lines": [
      "= (first | pair 2 2) 2;"
    ],
    "preprocessed": "= (first | pair 2 2) 2;",
    "code": "2113221001111312321001110321032103321032233",
    "parse": [
      "=",
      [
        "first",
        [
          -1,
          "pair",
          "2",
          "2"
        ]
      ],
      "2"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF120;&#xF101;&#xF143;&#xF126;&#xF11F;&#xF135;&#xF135;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 750
  },
  {
    "role": "code",
    "lines": [
      "= (second | pair 2 2) 2;"
    ],
    "preprocessed": "= (second | pair 2 2) 2;",
    "code": "2113221010000312321001110321032103321032233",
    "parse": [
      "=",
      [
        "second",
        [
          -1,
          "pair",
          "2",
          "2"
        ]
      ],
      "2"
    ],
    "spider": "&#xF136;&#xF132;&#xF127;&#xF111;&#xF101;&#xF143;&#xF126;&#xF11F;&#xF135;&#xF135;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 751
  },
  {
    "role": "code",
    "lines": [
      "list= (pair 3 8) | (list 2) 3 8;"
    ],
    "preprocessed": "list= (pair 3 8) | (list 2) 3 8;",
    "code": "21001101322100111032113210003312322100011032103321132100032233",
    "parse": [
      "list=",
      [
        "pair",
        "3",
        "8"
      ],
      [
        -1,
        [
          "list",
          "2"
        ],
        "3",
        "8"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11F;&#xF136;&#xF13B;&#xF121;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF136;&#xF13B;&#xF132;&#xF143;&#xF121;",
    "stanza": 752
  },
  {
    "role": "code",
    "lines": [
      "= (first | pair 3 8) 3;"
    ],
    "preprocessed": "= (first | pair 3 8) 3;",
    "code": "211322100111131232100111032113210003321132233",
    "parse": [
      "=",
      [
        "first",
        [
          -1,
          "pair",
          "3",
          "8"
        ]
      ],
      "3"
    ],
    "spider": "&#xF136;&#xF132;&#xF126;&#xF120;&#xF101;&#xF143;&#xF126;&#xF11F;&#xF136;&#xF13B;&#xF121;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 753
  },
  {
    "role": "code",
    "lines": [
      "= (second | pair 3 8) 8;"
    ],
    "preprocessed": "= (second | pair 3 8) 8;",
    "code": "21132210100003123210011103211321000332100032233",
    "parse": [
      "=",
      [
        "second",
        [
          -1,
          "pair",
          "3",
          "8"
        ]
      ],
      "8"
    ],
    "spider": "&#xF136;&#xF132;&#xF127;&#xF111;&#xF101;&#xF143;&#xF126;&#xF11F;&#xF136;&#xF13B;&#xF121;&#xF13B;&#xF132;&#xF143;&#xF121;",
    "stanza": 754
  },
  {
    "role": "comment",
    "lines": [
      "# this is a monster - simplify!"
    ],
    "stanza": 755
  },
  {
    "role": "code",
    "lines": [
      "define list-find-helper | ? lst | ? key | ? fail | ? idx | if (= (list-length $lst) 0) (fail 0) (if (equal (head $lst) $key) $idx (list-find-helper (tail $lst) $key $fail (+ $idx 1)));"
    ],
    "preprocessed": "define list-find-helper | ? lst | ? key | ? fail | ? idx | if (= (list-length $lst) 0) (fail 0) (if (equal (head $lst) $key) $idx (list-find-helper (tail $lst) $key $fail (+ $idx 1)));",
    "code": "21101321010001312321100321001000312321100321010010312321100321010011312321100321010100312321111322113221001010302321001000332033221010011320332211113221000322100011130232100100033023210100103302321010100322101000132210010013023210010003302321010010302321010011322101030232101010032133332233",
    "parse": [
      "define",
      "list-find-helper",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "?",
          "key",
          [
            -1,
            "?",
            "fail",
            [
              -1,
              "?",
              "idx",
              [
                -1,
                "if",
                [
                  "=",
                  [
                    "list-length",
                    [
                      -2,
                      "lst"
                    ]
                  ],
                  "0"
                ],
                [
                  "fail",
                  "0"
                ],
                [
                  "if",
                  [
                    "equal",
                    [
                      "head",
                      [
                        -2,
                        "lst"
                      ]
                    ],
                    [
                      -2,
                      "key"
                    ]
                  ],
                  [
                    -2,
                    "idx"
                  ],
                  [
                    "list-find-helper",
                    [
                      "tail",
                      [
                        -2,
                        "lst"
                      ]
                    ],
                    [
                      -2,
                      "key"
                    ],
                    [
                      -2,
                      "fail"
                    ],
                    [
                      "+",
                      [
                        -2,
                        "idx"
                      ],
                      "1"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF127;&#xF112;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF119;&#xF101;&#xF143;&#xF13F;&#xF127;&#xF113;&#xF101;&#xF143;&#xF13F;&#xF127;&#xF114;&#xF101;&#xF143;&#xF13F;&#xF127;&#xF115;&#xF101;&#xF143;&#xF142;&#xF132;&#xF136;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF133;&#xF121;&#xF132;&#xF127;&#xF114;&#xF133;&#xF121;&#xF132;&#xF142;&#xF132;&#xF13B;&#xF132;&#xF126;&#xF118;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF100;&#xF143;&#xF127;&#xF113;&#xF121;&#xF100;&#xF143;&#xF127;&#xF115;&#xF132;&#xF127;&#xF112;&#xF132;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF100;&#xF143;&#xF127;&#xF113;&#xF100;&#xF143;&#xF127;&#xF114;&#xF132;&#xF13D;&#xF100;&#xF143;&#xF127;&#xF115;&#xF134;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 756
  },
  {
    "role": "code",
    "lines": [
      "define list-find | ? lst | ? key | ? fail | list-find-helper $lst $key $fail 0;"
    ],
    "preprocessed": "define list-find | ? lst | ? key | ? fail | list-find-helper $lst $key $fail 0;",
    "code": "2110132101010131232110032100100031232110032101001031232110032101001131232101000130232100100030232101001030232101001132032233",
    "parse": [
      "define",
      "list-find",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "?",
          "key",
          [
            -1,
            "?",
            "fail",
            [
              -1,
              "list-find-helper",
              [
                -2,
                "lst"
              ],
              [
                -2,
                "key"
              ],
              [
                -2,
                "fail"
              ],
              "0"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF127;&#xF116;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF119;&#xF101;&#xF143;&#xF13F;&#xF127;&#xF113;&#xF101;&#xF143;&#xF13F;&#xF127;&#xF114;&#xF101;&#xF143;&#xF127;&#xF112;&#xF100;&#xF143;&#xF126;&#xF119;&#xF100;&#xF143;&#xF127;&#xF113;&#xF100;&#xF143;&#xF127;&#xF114;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 757
  },
  {
    "role": "code",
    "lines": [
      "define example-fail | ? x 100;"
    ],
    "preprocessed": "define example-fail | ? x 100;",
    "code": "211013210101103123211003210011132110010032233",
    "parse": [
      "define",
      "example-fail",
      [
        -1,
        "?",
        "x",
        "100"
      ]
    ],
    "spider": "&#xF140;&#xF127;&#xF117;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF128;&#xF115;&#xF132;&#xF143;&#xF121;",
    "stanza": 758
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 10) 4 9 1 1 7 11 16 11 2 14) 1 $example-fail) 2;"
    ],
    "preprocessed": "= (list-find ((list 10) 4 9 1 1 7 11 16 11 2 14) 1 $example-fail) 2;",
    "code": "211322101010132221000110321010332100321001321321321113210113210000321011321032111033213023210101103321032233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            "10"
          ],
          "4",
          "9",
          "1",
          "1",
          "7",
          "11",
          "16",
          "11",
          "2",
          "14"
        ],
        "1",
        [
          -2,
          "example-fail"
        ]
      ],
      "2"
    ],
    "spider": "&#xF136;&#xF132;&#xF127;&#xF116;&#xF132;&#xF132;&#xF126;&#xF117;&#xF13D;&#xF121;&#xF137;&#xF13C;&#xF134;&#xF134;&#xF13A;&#xF13E;&#xF123;&#xF111;&#xF13E;&#xF135;&#xF141;&#xF121;&#xF134;&#xF100;&#xF143;&#xF127;&#xF117;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 759
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 4) 17 14 19 12) 14 $example-fail) 1;"
    ],
    "preprocessed": "= (list-find ((list 4) 17 14 19 12) 14 $example-fail) 1;",
    "code": "211322101010132221000110321003321000132111032100113211003321110302321010110332132233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            "4"
          ],
          "17",
          "14",
          "19",
          "12"
        ],
        "14",
        [
          -2,
          "example-fail"
        ]
      ],
      "1"
    ],
    "spider": "&#xF136;&#xF132;&#xF127;&#xF116;&#xF132;&#xF132;&#xF126;&#xF117;&#xF137;&#xF121;&#xF123;&#xF112;&#xF141;&#xF123;&#xF114;&#xF13F;&#xF121;&#xF141;&#xF100;&#xF143;&#xF127;&#xF117;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 760
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 9) 13 15 18 6 10 4 2 19 15) 4 $example-fail) 5;"
    ],
    "preprocessed": "= (list-find ((list 9) 13 15 18 6 10 4 2 19 15) 4 $example-fail) 5;",
    "code": "2113221010101322210001103210013321101321111321001032110321010321003210321001132111133210030232101011033210132233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            "9"
          ],
          "13",
          "15",
          "18",
          "6",
          "10",
          "4",
          "2",
          "19",
          "15"
        ],
        "4",
        [
          -2,
          "example-fail"
        ]
      ],
      "5"
    ],
    "spider": "&#xF136;&#xF132;&#xF127;&#xF116;&#xF132;&#xF132;&#xF126;&#xF117;&#xF13C;&#xF121;&#xF140;&#xF142;&#xF123;&#xF113;&#xF139;&#xF13D;&#xF137;&#xF135;&#xF123;&#xF114;&#xF142;&#xF121;&#xF137;&#xF100;&#xF143;&#xF127;&#xF117;&#xF121;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 761
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 7) 8 0 17 15 4 10 7) 4 $example-fail) 4;"
    ],
    "preprocessed": "= (list-find ((list 7) 8 0 17 15 4 10 7) 4 $example-fail) 4;",
    "code": "2113221010101322210001103211133210003203210001321111321003210103211133210030232101011033210032233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            "7"
          ],
          "8",
          "0",
          "17",
          "15",
          "4",
          "10",
          "7"
        ],
        "4",
        [
          -2,
          "example-fail"
        ]
      ],
      "4"
    ],
    "spider": "&#xF136;&#xF132;&#xF127;&#xF116;&#xF132;&#xF132;&#xF126;&#xF117;&#xF13A;&#xF121;&#xF13B;&#xF133;&#xF123;&#xF112;&#xF142;&#xF137;&#xF13D;&#xF13A;&#xF121;&#xF137;&#xF100;&#xF143;&#xF127;&#xF117;&#xF121;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 762
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 2) 12 18) 18 $example-fail) 1;"
    ],
    "preprocessed": "= (list-find ((list 2) 12 18) 18 $example-fail) 1;",
    "code": "21132210101013222100011032103321100321001033210010302321010110332132233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            "2"
          ],
          "12",
          "18"
        ],
        "18",
        [
          -2,
          "example-fail"
        ]
      ],
      "1"
    ],
    "spider": "&#xF136;&#xF132;&#xF127;&#xF116;&#xF132;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF13F;&#xF123;&#xF113;&#xF121;&#xF123;&#xF113;&#xF100;&#xF143;&#xF127;&#xF117;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 763
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 3) 1 12 15) 12 $example-fail) 1;"
    ],
    "preprocessed": "= (list-find ((list 3) 1 12 15) 12 $example-fail) 1;",
    "code": "211322101010132221000110321133213211003211113321100302321010110332132233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            "3"
          ],
          "1",
          "12",
          "15"
        ],
        "12",
        [
          -2,
          "example-fail"
        ]
      ],
      "1"
    ],
    "spider": "&#xF136;&#xF132;&#xF127;&#xF116;&#xF132;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF134;&#xF13F;&#xF142;&#xF121;&#xF13F;&#xF100;&#xF143;&#xF127;&#xF117;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 764
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 7) 15 10 8 8 18 13 16) 10 $example-fail) 1;"
    ],
    "preprocessed": "= (list-find ((list 7) 15 10 8 8 18 13 16) 10 $example-fail) 1;",
    "code": "211322101010132221000110321113321111321010321000321000321001032110132100003321010302321010110332132233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            "7"
          ],
          "15",
          "10",
          "8",
          "8",
          "18",
          "13",
          "16"
        ],
        "10",
        [
          -2,
          "example-fail"
        ]
      ],
      "1"
    ],
    "spider": "&#xF136;&#xF132;&#xF127;&#xF116;&#xF132;&#xF132;&#xF126;&#xF117;&#xF13A;&#xF121;&#xF142;&#xF13D;&#xF13B;&#xF13B;&#xF123;&#xF113;&#xF140;&#xF123;&#xF111;&#xF121;&#xF13D;&#xF100;&#xF143;&#xF127;&#xF117;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 765
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 6) 9 17 18 18 18 4) 18 $example-fail) 2;"
    ],
    "preprocessed": "= (list-find ((list 6) 9 17 18 18 18 4) 18 $example-fail) 2;",
    "code": "211322101010132221000110321103321001321000132100103210010321001032100332100103023210101103321032233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            "6"
          ],
          "9",
          "17",
          "18",
          "18",
          "18",
          "4"
        ],
        "18",
        [
          -2,
          "example-fail"
        ]
      ],
      "2"
    ],
    "spider": "&#xF136;&#xF132;&#xF127;&#xF116;&#xF132;&#xF132;&#xF126;&#xF117;&#xF139;&#xF121;&#xF13C;&#xF123;&#xF112;&#xF123;&#xF113;&#xF123;&#xF113;&#xF123;&#xF113;&#xF137;&#xF121;&#xF123;&#xF113;&#xF100;&#xF143;&#xF127;&#xF117;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 766
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 3) 0 12 4) 12 $example-fail) 1;"
    ],
    "preprocessed": "= (list-find ((list 3) 0 12 4) 12 $example-fail) 1;",
    "code": "21132210101013222100011032113320321100321003321100302321010110332132233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            "3"
          ],
          "0",
          "12",
          "4"
        ],
        "12",
        [
          -2,
          "example-fail"
        ]
      ],
      "1"
    ],
    "spider": "&#xF136;&#xF132;&#xF127;&#xF116;&#xF132;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF133;&#xF13F;&#xF137;&#xF121;&#xF13F;&#xF100;&#xF143;&#xF127;&#xF117;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 767
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 5) 13 0 14 2 7) 2 $example-fail) 3;"
    ],
    "preprocessed": "= (list-find ((list 5) 13 0 14 2 7) 2 $example-fail) 3;",
    "code": "211322101010132221000110321013321101320321110321032111332103023210101103321132233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            "5"
          ],
          "13",
          "0",
          "14",
          "2",
          "7"
        ],
        "2",
        [
          -2,
          "example-fail"
        ]
      ],
      "3"
    ],
    "spider": "&#xF136;&#xF132;&#xF127;&#xF116;&#xF132;&#xF132;&#xF126;&#xF117;&#xF138;&#xF121;&#xF140;&#xF133;&#xF141;&#xF135;&#xF13A;&#xF121;&#xF135;&#xF100;&#xF143;&#xF127;&#xF117;&#xF121;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 768
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 4) 8 12 1 3) 5 $example-fail) 100;"
    ],
    "preprocessed": "= (list-find ((list 4) 8 12 1 3) 5 $example-fail) 100;",
    "code": "2113221010101322210001103210033210003211003213211332101302321010110332110010032233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            "4"
          ],
          "8",
          "12",
          "1",
          "3"
        ],
        "5",
        [
          -2,
          "example-fail"
        ]
      ],
      "100"
    ],
    "spider": "&#xF136;&#xF132;&#xF127;&#xF116;&#xF132;&#xF132;&#xF126;&#xF117;&#xF137;&#xF121;&#xF13B;&#xF13F;&#xF134;&#xF136;&#xF121;&#xF138;&#xF100;&#xF143;&#xF127;&#xF117;&#xF121;&#xF128;&#xF115;&#xF132;&#xF143;&#xF121;",
    "stanza": 769
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 6) 14 4 6 10 17 5) 1 $example-fail) 100;"
    ],
    "preprocessed": "= (list-find ((list 6) 14 4 6 10 17 5) 1 $example-fail) 100;",
    "code": "21132210101013222100011032110332111032100321103210103210001321013321302321010110332110010032233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            "6"
          ],
          "14",
          "4",
          "6",
          "10",
          "17",
          "5"
        ],
        "1",
        [
          -2,
          "example-fail"
        ]
      ],
      "100"
    ],
    "spider": "&#xF136;&#xF132;&#xF127;&#xF116;&#xF132;&#xF132;&#xF126;&#xF117;&#xF139;&#xF121;&#xF141;&#xF137;&#xF139;&#xF13D;&#xF123;&#xF112;&#xF138;&#xF121;&#xF134;&#xF100;&#xF143;&#xF127;&#xF117;&#xF121;&#xF128;&#xF115;&#xF132;&#xF143;&#xF121;",
    "stanza": 770
  },
  {
    "role": "code",
    "lines": [
      "= (list-find ((list 8) 2 11 1 0 8 16 7 6) 3 $example-fail) 100;"
    ],
    "preprocessed": "= (list-find ((list 8) 2 11 1 0 8 16 7 6) 3 $example-fail) 100;",
    "code": "211322101010132221000110321000332103210113213203210003210000321113211033211302321010110332110010032233",
    "parse": [
      "=",
      [
        "list-find",
        [
          [
            "list",
            "8"
          ],
          "2",
          "11",
          "1",
          "0",
          "8",
          "16",
          "7",
          "6"
        ],
        "3",
        [
          -2,
          "example-fail"
        ]
      ],
      "100"
    ],
    "spider": "&#xF136;&#xF132;&#xF127;&#xF116;&#xF132;&#xF132;&#xF126;&#xF117;&#xF13B;&#xF121;&#xF135;&#xF13E;&#xF134;&#xF133;&#xF13B;&#xF123;&#xF111;&#xF13A;&#xF139;&#xF121;&#xF136;&#xF100;&#xF143;&#xF127;&#xF117;&#xF121;&#xF128;&#xF115;&#xF132;&#xF143;&#xF121;",
    "stanza": 771
  },
  {
    "role": "file",
    "lines": [
      "== COS_Translate =="
    ],
    "stanza": 772
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "describe changes to the implicit interpreter to allow new special forms",
    "section_category": "HACK",
    "section_index": 17,
    "stanza": 773
  },
  {
    "role": "code",
    "lines": [
      "define base-translate $translate;"
    ],
    "preprocessed": "define base-translate $translate;",
    "code": "21101321010111302321100132233",
    "parse": [
      "define",
      "base-translate",
      [
        -2,
        "translate"
      ]
    ],
    "spider": "&#xF140;&#xF127;&#xF118;&#xF100;&#xF143;&#xF123;&#xF11A;&#xF132;&#xF143;&#xF121;",
    "stanza": 774
  },
  {
    "role": "code",
    "lines": [
      "define translate | ? x | if (= $x 32) 64 (base-translate $x);"
    ],
    "preprocessed": "define translate | ? x | if (= $x 32) 64 (base-translate $x);",
    "code": "211013211001312321100321001113123211113221130232100111321000003321000000322101011130232100111332233",
    "parse": [
      "define",
      "translate",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "=",
            [
              -2,
              "x"
            ],
            "32"
          ],
          "64",
          [
            "base-translate",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF11A;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF142;&#xF132;&#xF136;&#xF100;&#xF143;&#xF124;&#xF118;&#xF124;&#xF111;&#xF121;&#xF126;&#xF111;&#xF132;&#xF127;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 775
  },
  {
    "role": "code",
    "lines": [
      "= 32 64;"
    ],
    "preprocessed": "= 32 64;",
    "code": "2113210000032100000032233",
    "parse": [
      "=",
      "32",
      "64"
    ],
    "spider": "&#xF136;&#xF124;&#xF111;&#xF126;&#xF111;&#xF132;&#xF143;&#xF121;",
    "stanza": 776
  },
  {
    "role": "code",
    "lines": [
      "= (+ 32 64) 128;"
    ],
    "preprocessed": "= (+ 32 64) 128;",
    "code": "2113221010321000003210000003321000000032233",
    "parse": [
      "=",
      [
        "+",
        "32",
        "64"
      ],
      "128"
    ],
    "spider": "&#xF136;&#xF132;&#xF13D;&#xF124;&#xF111;&#xF126;&#xF111;&#xF121;&#xF12A;&#xF111;&#xF132;&#xF143;&#xF121;",
    "stanza": 777
  },
  {
    "role": "code",
    "lines": [
      "define translate $base-translate;"
    ],
    "preprocessed": "define translate $base-translate;",
    "code": "21101321100130232101011132233",
    "parse": [
      "define",
      "translate",
      [
        -2,
        "base-translate"
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF11A;&#xF100;&#xF143;&#xF127;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 778
  },
  {
    "role": "code",
    "lines": [
      "not | = 32 64;"
    ],
    "preprocessed": "not | = 32 64;",
    "code": "210131232113210000032100000032233",
    "parse": [
      "not",
      [
        -1,
        "=",
        "32",
        "64"
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF124;&#xF111;&#xF126;&#xF111;&#xF132;&#xF143;&#xF121;",
    "stanza": 779
  },
  {
    "role": "code",
    "lines": [
      "= (+ 32 64) 96;"
    ],
    "preprocessed": "= (+ 32 64) 96;",
    "code": "211322101032100000321000000332110000032233",
    "parse": [
      "=",
      [
        "+",
        "32",
        "64"
      ],
      "96"
    ],
    "spider": "&#xF136;&#xF132;&#xF13D;&#xF124;&#xF111;&#xF126;&#xF111;&#xF121;&#xF128;&#xF111;&#xF132;&#xF143;&#xF121;",
    "stanza": 780
  },
  {
    "role": "comment",
    "lines": [
      "# now can create a special form for lists"
    ],
    "stanza": 781
  },
  {
    "role": "code",
    "lines": [
      "define translate | ? x | if (single? $x) (base-translate $x) (if (= (head $x) vector) (translate | prepend ((list 2) list (list-length | tail $x)) (tail $x)) (base-translate $x));"
    ],
    "preprocessed": "define translate | ? x | if (single? $x) (base-translate $x) (if (= (head $x) vector) (translate | prepend ((list 2) list (list-length | tail $x)) (tail $x)) (base-translate $x));",
    "code": "21101321100131232110032100111312321111322101010302321001113322101011130232100111332211113221132210001113023210011133210000332211001312321001100322210001103210332100011032210010103123210010013023210011133322100100130232100111333221010111302321001113332233",
    "parse": [
      "define",
      "translate",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "single?",
            [
              -2,
              "x"
            ]
          ],
          [
            "base-translate",
            [
              -2,
              "x"
            ]
          ],
          [
            "if",
            [
              "=",
              [
                "head",
                [
                  -2,
                  "x"
                ]
              ],
              "vector"
            ],
            [
              "translate",
              [
                -1,
                "prepend",
                [
                  [
                    "list",
                    "2"
                  ],
                  "list",
                  [
                    "list-length",
                    [
                      -1,
                      "tail",
                      [
                        -2,
                        "x"
                      ]
                    ]
                  ]
                ],
                [
                  "tail",
                  [
                    -2,
                    "x"
                  ]
                ]
              ]
            ],
            [
              "base-translate",
              [
                -2,
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF11A;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF142;&#xF132;&#xF124;&#xF11B;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF127;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF126;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF123;&#xF111;&#xF121;&#xF132;&#xF123;&#xF11A;&#xF101;&#xF143;&#xF126;&#xF11D;&#xF132;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF126;&#xF117;&#xF132;&#xF126;&#xF11B;&#xF101;&#xF143;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF127;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 782
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 1 2 3) ((list 3) 1 2 3);"
    ],
    "preprocessed": "list= (vector 1 2 3) ((list 3) 1 2 3);",
    "code": "2100110132210000321321032113322210001103211332132103211332233",
    "parse": [
      "list=",
      [
        "vector",
        "1",
        "2",
        "3"
      ],
      [
        [
          "list",
          "3"
        ],
        "1",
        "2",
        "3"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF123;&#xF111;&#xF134;&#xF135;&#xF136;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF134;&#xF135;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 783
  },
  {
    "role": "comment",
    "lines": [
      "# now to desugar let expressions"
    ],
    "stanza": 784
  },
  {
    "role": "code",
    "lines": [
      "define translate-with-vector $translate;"
    ],
    "preprocessed": "define translate-with-vector $translate;",
    "code": "21101321011000302321100132233",
    "parse": [
      "define",
      "translate-with-vector",
      [
        -2,
        "translate"
      ]
    ],
    "spider": "&#xF140;&#xF127;&#xF119;&#xF100;&#xF143;&#xF123;&#xF11A;&#xF132;&#xF143;&#xF121;",
    "stanza": 785
  },
  {
    "role": "code",
    "lines": [
      "define translate-let-form | ? x | ? body | if (= (list-length $x) 0) (translate $body) (translate-let-form (tail $x) (vector (vector ? (head | head $x) $body) (head | tail | head $x)));"
    ],
    "preprocessed": "define translate-let-form | ? x | ? body | if (= (list-length $x) 0) (translate $body) (translate-let-form (tail $x) (vector (vector ? (head | head $x) $body) (head | tail | head $x)));",
    "code": "211013210110013123211003210011131232110032101101031232111132211322100101030232100111332033221100130232101101033221011001322100100130232100111332210000322100003211003221000111312321000111302321001113302321011010332210001113123210010013123210001113023210011133332233",
    "parse": [
      "define",
      "translate-let-form",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "body",
          [
            -1,
            "if",
            [
              "=",
              [
                "list-length",
                [
                  -2,
                  "x"
                ]
              ],
              "0"
            ],
            [
              "translate",
              [
                -2,
                "body"
              ]
            ],
            [
              "translate-let-form",
              [
                "tail",
                [
                  -2,
                  "x"
                ]
              ],
              [
                "vector",
                [
                  "vector",
                  "?",
                  [
                    "head",
                    [
                      -1,
                      "head",
                      [
                        -2,
                        "x"
                      ]
                    ]
                  ],
                  [
                    -2,
                    "body"
                  ]
                ],
                [
                  "head",
                  [
                    -1,
                    "tail",
                    [
                      -1,
                      "head",
                      [
                        -2,
                        "x"
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF127;&#xF11A;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF127;&#xF11B;&#xF101;&#xF143;&#xF142;&#xF132;&#xF136;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF123;&#xF11A;&#xF100;&#xF143;&#xF127;&#xF11B;&#xF121;&#xF132;&#xF127;&#xF11A;&#xF132;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF126;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF100;&#xF143;&#xF127;&#xF11B;&#xF121;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF126;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 786
  },
  {
    "role": "code",
    "lines": [
      "define translate | ? x | if (single? $x) (translate-with-vector $x) (if (= (head $x) let) (translate-let-form (head | tail $x) (head | tail | tail $x)) (translate-with-vector $x));"
    ],
    "preprocessed": "define translate | ? x | if (single? $x) (translate-with-vector $x) (if (= (head $x) let) (translate-let-form (head | tail $x) (head | tail | tail $x)) (translate-with-vector $x));",
    "code": "2110132110013123211003210011131232111132210101030232100111332210110003023210011133221111322113221000111302321001113321011011332210110013221000111312321001001302321001113322100011131232100100131232100100130232100111333221011000302321001113332233",
    "parse": [
      "define",
      "translate",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "single?",
            [
              -2,
              "x"
            ]
          ],
          [
            "translate-with-vector",
            [
              -2,
              "x"
            ]
          ],
          [
            "if",
            [
              "=",
              [
                "head",
                [
                  -2,
                  "x"
                ]
              ],
              "let"
            ],
            [
              "translate-let-form",
              [
                "head",
                [
                  -1,
                  "tail",
                  [
                    -2,
                    "x"
                  ]
                ]
              ],
              [
                "head",
                [
                  -1,
                  "tail",
                  [
                    -1,
                    "tail",
                    [
                      -2,
                      "x"
                    ]
                  ]
                ]
              ]
            ],
            [
              "translate-with-vector",
              [
                -2,
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF11A;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF142;&#xF132;&#xF124;&#xF11B;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF127;&#xF119;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF126;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF127;&#xF11C;&#xF121;&#xF132;&#xF127;&#xF11A;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF127;&#xF119;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 787
  },
  {
    "role": "code",
    "lines": [
      "let ((x 20)) (= $x 20);"
    ],
    "preprocessed": "let ((x 20)) (= $x 20);",
    "code": "21011011322210011132101003332211302321001113210100332233",
    "parse": [
      "let",
      [
        [
          "x",
          "20"
        ]
      ],
      [
        "=",
        [
          -2,
          "x"
        ],
        "20"
      ]
    ],
    "spider": "&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF118;&#xF123;&#xF115;&#xF121;&#xF121;&#xF132;&#xF136;&#xF100;&#xF143;&#xF124;&#xF118;&#xF123;&#xF115;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 788
  },
  {
    "role": "code",
    "lines": [
      "let ((x 50) (y 20)) (= (- $x $y) 30);"
    ],
    "preprocessed": "let ((x 50) (y 20)) (= (- $x $y) 30);",
    "code": "210110113222100111321100103322110011321010033322113221011302321001113023211001133211110332233",
    "parse": [
      "let",
      [
        [
          "x",
          "50"
        ],
        [
          "y",
          "20"
        ]
      ],
      [
        "=",
        [
          "-",
          [
            -2,
            "x"
          ],
          [
            -2,
            "y"
          ]
        ],
        "30"
      ]
    ],
    "spider": "&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF118;&#xF125;&#xF113;&#xF121;&#xF132;&#xF125;&#xF114;&#xF123;&#xF115;&#xF121;&#xF121;&#xF132;&#xF136;&#xF132;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF123;&#xF11F;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 789
  },
  {
    "role": "file",
    "lines": [
      "== COS_List =="
    ],
    "stanza": 790
  },
  {
    "role": "comment",
    "lines": [
      "# the is-list function is now on dubious ground",
      "# this stuff will be replaced with typing ASAP"
    ],
    "stanza": 791
  },
  {
    "role": "code",
    "lines": [
      "define is-list | ? x | not | single? $x;"
    ],
    "preprocessed": "define is-list | ? x | not | single? $x;",
    "code": "211013210111003123211003210011131232101312321010103023210011132233",
    "parse": [
      "define",
      "is-list",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "not",
          [
            -1,
            "single?",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF127;&#xF11D;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF138;&#xF101;&#xF143;&#xF124;&#xF11B;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 792
  },
  {
    "role": "code",
    "lines": [
      "is-list | (list 2) 1 3;"
    ],
    "preprocessed": "is-list | (list 2) 1 3;",
    "code": "21011100312322100011032103321321132233",
    "parse": [
      "is-list",
      [
        -1,
        [
          "list",
          "2"
        ],
        "1",
        "3"
      ]
    ],
    "spider": "&#xF127;&#xF11D;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF134;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 793
  },
  {
    "role": "code",
    "lines": [
      "is-list | (list 0);"
    ],
    "preprocessed": "is-list | (list 0);",
    "code": "210111003123221000110320332233",
    "parse": [
      "is-list",
      [
        -1,
        [
          "list",
          "0"
        ]
      ]
    ],
    "spider": "&#xF127;&#xF11D;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 794
  },
  {
    "role": "code",
    "lines": [
      "not | is-list 23;"
    ],
    "preprocessed": "not | is-list 23;",
    "code": "2101312321011100321011132233",
    "parse": [
      "not",
      [
        -1,
        "is-list",
        "23"
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF127;&#xF11D;&#xF123;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 795
  },
  {
    "role": "code",
    "lines": [
      "is-list | (list 3) ((list 2) 2 3) 1 (? x | + $x 10);"
    ],
    "preprocessed": "is-list | (list 3) ((list 2) 2 3) 1 (? x | + $x 10);",
    "code": "21011100312322100011032113322210001103210332103211332132211003210011131232101030232100111321010332233",
    "parse": [
      "is-list",
      [
        -1,
        [
          "list",
          "3"
        ],
        [
          [
            "list",
            "2"
          ],
          "2",
          "3"
        ],
        "1",
        [
          "?",
          "x",
          [
            -1,
            "+",
            [
              -2,
              "x"
            ],
            "10"
          ]
        ]
      ]
    ],
    "spider": "&#xF127;&#xF11D;&#xF101;&#xF143;&#xF132;&#xF126;&#xF117;&#xF136;&#xF121;&#xF132;&#xF132;&#xF126;&#xF117;&#xF135;&#xF121;&#xF135;&#xF136;&#xF121;&#xF134;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13D;&#xF100;&#xF143;&#xF124;&#xF118;&#xF13D;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 796
  },
  {
    "role": "file",
    "lines": [
      "== COS_Let =="
    ],
    "stanza": 797
  },
  {
    "role": "comment",
    "lines": [
      "# if would be good to introduce desugarings more rigorously, but for now...",
      "# ... just a very vague sketch"
    ],
    "section_description": "introduce sugar for let",
    "section_category": "MATH",
    "section_index": 18,
    "stanza": 798
  },
  {
    "role": "code",
    "lines": [
      "intro let;"
    ],
    "preprocessed": "intro let;",
    "code": "21001032101101132233",
    "parse": [
      "intro",
      "let"
    ],
    "spider": "&#xF123;&#xF113;&#xF127;&#xF11C;&#xF132;&#xF143;&#xF121;",
    "stanza": 799
  },
  {
    "role": "code",
    "lines": [
      "= (let ((x 10)) (+ $x 5)) ((? x | + $x 5) 10);"
    ],
    "preprocessed": "= (let ((x 10)) (+ $x 5)) ((? x | + $x 5) 10);",
    "code": "21132210110113222100111321010333221010302321001113210133322211003210011131232101030232100111321013321010332233",
    "parse": [
      "=",
      [
        "let",
        [
          [
            "x",
            "10"
          ]
        ],
        [
          "+",
          [
            -2,
            "x"
          ],
          "5"
        ]
      ],
      [
        [
          "?",
          "x",
          [
            -1,
            "+",
            [
              -2,
              "x"
            ],
            "5"
          ]
        ],
        "10"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF118;&#xF13D;&#xF121;&#xF121;&#xF132;&#xF13D;&#xF100;&#xF143;&#xF124;&#xF118;&#xF138;&#xF121;&#xF121;&#xF132;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13D;&#xF100;&#xF143;&#xF124;&#xF118;&#xF138;&#xF121;&#xF13D;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 800
  },
  {
    "role": "code",
    "lines": [
      "= (let ((x 10) (y 5)) (+ $x $y)) (((? x | ? y | + $x $y) 10) 5);"
    ],
    "preprocessed": "= (let ((x 10) (y 5)) (+ $x $y)) (((? x | ? y | + $x $y) 10) 5);",
    "code": "21132210110113222100111321010332211001132101333221010302321001113023211001133322221100321001113123211003211001131232101030232100111302321100113321010332101332233",
    "parse": [
      "=",
      [
        "let",
        [
          [
            "x",
            "10"
          ],
          [
            "y",
            "5"
          ]
        ],
        [
          "+",
          [
            -2,
            "x"
          ],
          [
            -2,
            "y"
          ]
        ]
      ],
      [
        [
          [
            "?",
            "x",
            [
              -1,
              "?",
              "y",
              [
                -1,
                "+",
                [
                  -2,
                  "x"
                ],
                [
                  -2,
                  "y"
                ]
              ]
            ]
          ],
          "10"
        ],
        "5"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF118;&#xF13D;&#xF121;&#xF132;&#xF125;&#xF114;&#xF138;&#xF121;&#xF121;&#xF132;&#xF13D;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF132;&#xF132;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13D;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF13D;&#xF121;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 801
  },
  {
    "role": "file",
    "lines": [
      "== COS_MultipleParameter =="
    ],
    "stanza": 802
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "build up functions of several variables",
    "section_category": "MATH",
    "section_index": 19,
    "stanza": 803
  },
  {
    "role": "code",
    "lines": [
      "= ((? x | ? y | - $x $y) 4 0) 4;"
    ],
    "preprocessed": "= ((? x | ? y | - $x $y) 4 0) 4;",
    "code": "211322211003210011131232110032110011312321011302321001113023211001133210032033210032233",
    "parse": [
      "=",
      [
        [
          "?",
          "x",
          [
            -1,
            "?",
            "y",
            [
              -1,
              "-",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ],
        "4",
        "0"
      ],
      "4"
    ],
    "spider": "&#xF136;&#xF132;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF137;&#xF133;&#xF121;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 804
  },
  {
    "role": "code",
    "lines": [
      "= ((? x | ? y | - $x $y) 11 8) 3;"
    ],
    "preprocessed": "= ((? x | ? y | - $x $y) 11 8) 3;",
    "code": "211322211003210011131232110032110011312321011302321001113023211001133210113210003321132233",
    "parse": [
      "=",
      [
        [
          "?",
          "x",
          [
            -1,
            "?",
            "y",
            [
              -1,
              "-",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ],
        "11",
        "8"
      ],
      "3"
    ],
    "spider": "&#xF136;&#xF132;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF13E;&#xF13B;&#xF121;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 805
  },
  {
    "role": "code",
    "lines": [
      "= ((? x | ? y | - $x $y) 5 5) 0;"
    ],
    "preprocessed": "= ((? x | ? y | - $x $y) 5 5) 0;",
    "code": "211322211003210011131232110032110011312321011302321001113023211001133210132101332032233",
    "parse": [
      "=",
      [
        [
          "?",
          "x",
          [
            -1,
            "?",
            "y",
            [
              -1,
              "-",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ],
        "5",
        "5"
      ],
      "0"
    ],
    "spider": "&#xF136;&#xF132;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF138;&#xF138;&#xF121;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 806
  },
  {
    "role": "code",
    "lines": [
      "= ((? x | ? y | - $x $y) 10 1) 9;"
    ],
    "preprocessed": "= ((? x | ? y | - $x $y) 10 1) 9;",
    "code": "21132221100321001113123211003211001131232101130232100111302321100113321010321332100132233",
    "parse": [
      "=",
      [
        [
          "?",
          "x",
          [
            -1,
            "?",
            "y",
            [
              -1,
              "-",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ],
        "10",
        "1"
      ],
      "9"
    ],
    "spider": "&#xF136;&#xF132;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF13D;&#xF134;&#xF121;&#xF13C;&#xF132;&#xF143;&#xF121;",
    "stanza": 807
  },
  {
    "role": "code",
    "lines": [
      "= ((? x | ? y | - $x $y) 10 7) 3;"
    ],
    "preprocessed": "= ((? x | ? y | - $x $y) 10 7) 3;",
    "code": "21132221100321001113123211003211001131232101130232100111302321100113321010321113321132233",
    "parse": [
      "=",
      [
        [
          "?",
          "x",
          [
            -1,
            "?",
            "y",
            [
              -1,
              "-",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ],
        "10",
        "7"
      ],
      "3"
    ],
    "spider": "&#xF136;&#xF132;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF13D;&#xF13A;&#xF121;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 808
  },
  {
    "role": "code",
    "lines": [
      "define last | ? x | list-ref $x (- (list-length $x) 1);"
    ],
    "preprocessed": "define last | ? x | list-ref $x (- (list-length $x) 1);",
    "code": "21101321011101312321100321001113123210010113023210011132210113221001010302321001113321332233",
    "parse": [
      "define",
      "last",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "list-ref",
          [
            -2,
            "x"
          ],
          [
            "-",
            [
              "list-length",
              [
                -2,
                "x"
              ]
            ],
            "1"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF127;&#xF11E;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF126;&#xF11C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF13E;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 809
  },
  {
    "role": "code",
    "lines": [
      "define except-last | ? x | if (> (list-length $x) 1) (prepend (head $x) (except-last | tail $x)) (vector);"
    ],
    "preprocessed": "define except-last | ? x | if (> (list-length $x) 1) (prepend (head $x) (except-last | tail $x)) (vector);",
    "code": "211013210111103123211003210011131232111132210032210010103023210011133213322100110032210001113023210011133221011110312321001001302321001113332210000332233",
    "parse": [
      "define",
      "except-last",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            ">",
            [
              "list-length",
              [
                -2,
                "x"
              ]
            ],
            "1"
          ],
          [
            "prepend",
            [
              "head",
              [
                -2,
                "x"
              ]
            ],
            [
              "except-last",
              [
                -1,
                "tail",
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ],
          [
            "vector"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF127;&#xF11F;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF126;&#xF11D;&#xF132;&#xF126;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF127;&#xF11F;&#xF101;&#xF143;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 810
  },
  {
    "role": "comment",
    "lines": [
      "# test last and except-last"
    ],
    "stanza": 811
  },
  {
    "role": "code",
    "lines": [
      "= 15 (last | vector 4 5 15);"
    ],
    "preprocessed": "= 15 (last | vector 4 5 15);",
    "code": "211321111322101110131232100003210032101321111332233",
    "parse": [
      "=",
      "15",
      [
        "last",
        [
          -1,
          "vector",
          "4",
          "5",
          "15"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF142;&#xF132;&#xF127;&#xF11E;&#xF101;&#xF143;&#xF123;&#xF111;&#xF137;&#xF138;&#xF142;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 812
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 4 5) (except-last | vector 4 5 15);"
    ],
    "preprocessed": "list= (vector 4 5) (except-last | vector 4 5 15);",
    "code": "210011013221000032100321013322101111031232100003210032101321111332233",
    "parse": [
      "list=",
      [
        "vector",
        "4",
        "5"
      ],
      [
        "except-last",
        [
          -1,
          "vector",
          "4",
          "5",
          "15"
        ]
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF123;&#xF111;&#xF137;&#xF138;&#xF121;&#xF132;&#xF127;&#xF11F;&#xF101;&#xF143;&#xF123;&#xF111;&#xF137;&#xF138;&#xF142;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 813
  },
  {
    "role": "code",
    "lines": [
      "intro lambda;"
    ],
    "preprocessed": "intro lambda;",
    "code": "210010321101032233",
    "parse": [
      "intro",
      "lambda"
    ],
    "spider": "&#xF123;&#xF113;&#xF123;&#xF11B;&#xF132;&#xF143;&#xF121;",
    "stanza": 814
  },
  {
    "role": "code",
    "lines": [
      "define prev-translate $translate;"
    ],
    "preprocessed": "define prev-translate $translate;",
    "code": "21101321011111302321100132233",
    "parse": [
      "define",
      "prev-translate",
      [
        -2,
        "translate"
      ]
    ],
    "spider": "&#xF140;&#xF127;&#xF120;&#xF100;&#xF143;&#xF123;&#xF11A;&#xF132;&#xF143;&#xF121;",
    "stanza": 815
  },
  {
    "role": "code",
    "lines": [
      "define translate | let ((prev $prev-translate)) (? x | if (single? $x) (prev $x) (if (= (head $x) lambda) (let ((formals (head | tail $x)) (body (head | tail | tail $x))) (if (> (list-length $formals) 0) (translate (vector lambda (except-last $formals) (vector ? (last $formals) $body))) (translate $body))) (prev $x)));"
    ],
    "preprocessed": "define translate | let ((prev $prev-translate)) (? x | if (single? $x) (prev $x) (if (= (head $x) lambda) (let ((formals (head | tail $x)) (body (head | tail | tail $x))) (if (> (list-length $formals) 0) (translate (vector lambda (except-last $formals) (vector ? (last $formals) $body))) (translate $body))) (prev $x)));",
    "code": "211013211001312321011011322211000003023210111113332211003210011131232111132210101030232100111332211000003023210011133221111322113221000111302321001113321101033221011011322211000013221000111312321001001302321001113332210110103221000111312321001001312321001001302321001113333221111322100322100101030232110000133203322110013221000032110103221011110302321100001332210000321100322101110130232110000133023210110103333221100130232101101033332211000003023210011133332233",
    "parse": [
      "define",
      "translate",
      [
        -1,
        "let",
        [
          [
            "prev",
            [
              -2,
              "prev-translate"
            ]
          ]
        ],
        [
          "?",
          "x",
          [
            -1,
            "if",
            [
              "single?",
              [
                -2,
                "x"
              ]
            ],
            [
              "prev",
              [
                -2,
                "x"
              ]
            ],
            [
              "if",
              [
                "=",
                [
                  "head",
                  [
                    -2,
                    "x"
                  ]
                ],
                "lambda"
              ],
              [
                "let",
                [
                  [
                    "formals",
                    [
                      "head",
                      [
                        -1,
                        "tail",
                        [
                          -2,
                          "x"
                        ]
                      ]
                    ]
                  ],
                  [
                    "body",
                    [
                      "head",
                      [
                        -1,
                        "tail",
                        [
                          -1,
                          "tail",
                          [
                            -2,
                            "x"
                          ]
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  "if",
                  [
                    ">",
                    [
                      "list-length",
                      [
                        -2,
                        "formals"
                      ]
                    ],
                    "0"
                  ],
                  [
                    "translate",
                    [
                      "vector",
                      "lambda",
                      [
                        "except-last",
                        [
                          -2,
                          "formals"
                        ]
                      ],
                      [
                        "vector",
                        "?",
                        [
                          "last",
                          [
                            -2,
                            "formals"
                          ]
                        ],
                        [
                          -2,
                          "body"
                        ]
                      ]
                    ]
                  ],
                  [
                    "translate",
                    [
                      -2,
                      "body"
                    ]
                  ]
                ]
              ],
              [
                "prev",
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF11A;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF128;&#xF111;&#xF100;&#xF143;&#xF127;&#xF120;&#xF121;&#xF121;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF142;&#xF132;&#xF124;&#xF11B;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF128;&#xF111;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF126;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF123;&#xF11B;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF128;&#xF112;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11B;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF128;&#xF112;&#xF121;&#xF133;&#xF121;&#xF132;&#xF123;&#xF11A;&#xF132;&#xF123;&#xF111;&#xF123;&#xF11B;&#xF132;&#xF127;&#xF11F;&#xF100;&#xF143;&#xF128;&#xF112;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF132;&#xF127;&#xF11E;&#xF100;&#xF143;&#xF128;&#xF112;&#xF121;&#xF100;&#xF143;&#xF127;&#xF11B;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11A;&#xF100;&#xF143;&#xF127;&#xF11B;&#xF121;&#xF121;&#xF121;&#xF132;&#xF128;&#xF111;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 816
  },
  {
    "role": "comment",
    "lines": [
      "# test lambda"
    ],
    "stanza": 817
  },
  {
    "role": "code",
    "lines": [
      "= ((lambda (x y) (- $x $y)) 8 3) 5;"
    ],
    "preprocessed": "= ((lambda (x y) (- $x $y)) 8 3) 5;",
    "code": "2113222110103221001113211001133221011302321001113023211001133321000321133210132233",
    "parse": [
      "=",
      [
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "8",
        "3"
      ],
      "5"
    ],
    "spider": "&#xF136;&#xF132;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF125;&#xF114;&#xF121;&#xF132;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF13B;&#xF136;&#xF121;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 818
  },
  {
    "role": "code",
    "lines": [
      "= ((lambda (x y) (- $x $y)) 1 1) 0;"
    ],
    "preprocessed": "= ((lambda (x y) (- $x $y)) 1 1) 0;",
    "code": "2113222110103221001113211001133221011302321001113023211001133321321332032233",
    "parse": [
      "=",
      [
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "1",
        "1"
      ],
      "0"
    ],
    "spider": "&#xF136;&#xF132;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF125;&#xF114;&#xF121;&#xF132;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF134;&#xF134;&#xF121;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 819
  },
  {
    "role": "code",
    "lines": [
      "= ((lambda (x y) (- $x $y)) 10 9) 1;"
    ],
    "preprocessed": "= ((lambda (x y) (- $x $y)) 10 9) 1;",
    "code": "2113222110103221001113211001133221011302321001113023211001133321010321001332132233",
    "parse": [
      "=",
      [
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "10",
        "9"
      ],
      "1"
    ],
    "spider": "&#xF136;&#xF132;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF125;&#xF114;&#xF121;&#xF132;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF13D;&#xF13C;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 820
  },
  {
    "role": "code",
    "lines": [
      "= ((lambda (x y) (- $x $y)) 7 5) 2;"
    ],
    "preprocessed": "= ((lambda (x y) (- $x $y)) 7 5) 2;",
    "code": "211322211010322100111321100113322101130232100111302321100113332111321013321032233",
    "parse": [
      "=",
      [
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "7",
        "5"
      ],
      "2"
    ],
    "spider": "&#xF136;&#xF132;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF125;&#xF114;&#xF121;&#xF132;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF13A;&#xF138;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 821
  },
  {
    "role": "code",
    "lines": [
      "= ((lambda (x y) (- $x $y)) 9 8) 1;"
    ],
    "preprocessed": "= ((lambda (x y) (- $x $y)) 9 8) 1;",
    "code": "2113222110103221001113211001133221011302321001113023211001133321001321000332132233",
    "parse": [
      "=",
      [
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "9",
        "8"
      ],
      "1"
    ],
    "spider": "&#xF136;&#xF132;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF125;&#xF114;&#xF121;&#xF132;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF13C;&#xF13B;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 822
  },
  {
    "role": "code",
    "lines": [
      "define apply | lambda (x y) (if (list= $y (vector)) $x (apply ($x (head $y)) (tail $y)));"
    ],
    "preprocessed": "define apply | lambda (x y) (if (list= $y (vector)) $x (apply ($x (head $y)) (tail $y)));",
    "code": "211013211000103123211010322100111321100113322111132210011013023211001132210000333023210011132211000103202321001113221000111302321100113332210010013023211001133332233",
    "parse": [
      "define",
      "apply",
      [
        -1,
        "lambda",
        [
          "x",
          "y"
        ],
        [
          "if",
          [
            "list=",
            [
              -2,
              "y"
            ],
            [
              "vector"
            ]
          ],
          [
            -2,
            "x"
          ],
          [
            "apply",
            [
              [
                -2,
                "x"
              ],
              [
                "head",
                [
                  -2,
                  "y"
                ]
              ]
            ],
            [
              "tail",
              [
                -2,
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF128;&#xF113;&#xF101;&#xF143;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF125;&#xF114;&#xF121;&#xF132;&#xF142;&#xF132;&#xF126;&#xF11E;&#xF100;&#xF143;&#xF125;&#xF114;&#xF132;&#xF123;&#xF111;&#xF121;&#xF121;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF128;&#xF113;&#xF132;&#xF133;&#xF124;&#xF118;&#xF132;&#xF126;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 823
  },
  {
    "role": "code",
    "lines": [
      "= (apply (lambda (x y) (- $x $y)) (vector 8 6)) 2;"
    ],
    "preprocessed": "= (apply (lambda (x y) (- $x $y)) (vector 8 6)) 2;",
    "code": "2113221100010322110103221001113211001133221011302321001113023211001133322100003210003211033321032233",
    "parse": [
      "=",
      [
        "apply",
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        [
          "vector",
          "8",
          "6"
        ]
      ],
      "2"
    ],
    "spider": "&#xF136;&#xF132;&#xF128;&#xF113;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF125;&#xF114;&#xF121;&#xF132;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF139;&#xF121;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 824
  },
  {
    "role": "code",
    "lines": [
      "= (apply (lambda (x y) (- $x $y)) (vector 5 0)) 5;"
    ],
    "preprocessed": "= (apply (lambda (x y) (- $x $y)) (vector 5 0)) 5;",
    "code": "21132211000103221101032210011132110011332210113023210011130232110011333221000032101320333210132233",
    "parse": [
      "=",
      [
        "apply",
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        [
          "vector",
          "5",
          "0"
        ]
      ],
      "5"
    ],
    "spider": "&#xF136;&#xF132;&#xF128;&#xF113;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF125;&#xF114;&#xF121;&#xF132;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF138;&#xF133;&#xF121;&#xF121;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 825
  },
  {
    "role": "code",
    "lines": [
      "= (apply (lambda (x y) (- $x $y)) (vector 12 9)) 3;"
    ],
    "preprocessed": "= (apply (lambda (x y) (- $x $y)) (vector 12 9)) 3;",
    "code": "21132211000103221101032210011132110011332210113023210011130232110011333221000032110032100133321132233",
    "parse": [
      "=",
      [
        "apply",
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        [
          "vector",
          "12",
          "9"
        ]
      ],
      "3"
    ],
    "spider": "&#xF136;&#xF132;&#xF128;&#xF113;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF125;&#xF114;&#xF121;&#xF132;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF13C;&#xF121;&#xF121;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 826
  },
  {
    "role": "code",
    "lines": [
      "= (apply (lambda (x y) (- $x $y)) (vector 13 8)) 5;"
    ],
    "preprocessed": "= (apply (lambda (x y) (- $x $y)) (vector 13 8)) 5;",
    "code": "211322110001032211010322100111321100113322101130232100111302321100113332210000321101321000333210132233",
    "parse": [
      "=",
      [
        "apply",
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        [
          "vector",
          "13",
          "8"
        ]
      ],
      "5"
    ],
    "spider": "&#xF136;&#xF132;&#xF128;&#xF113;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF125;&#xF114;&#xF121;&#xF132;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF140;&#xF13B;&#xF121;&#xF121;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 827
  },
  {
    "role": "code",
    "lines": [
      "= (apply (lambda (x y) (- $x $y)) (vector 11 3)) 8;"
    ],
    "preprocessed": "= (apply (lambda (x y) (- $x $y)) (vector 11 3)) 8;",
    "code": "21132211000103221101032210011132110011332210113023210011130232110011333221000032101132113332100032233",
    "parse": [
      "=",
      [
        "apply",
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "-",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        [
          "vector",
          "11",
          "3"
        ]
      ],
      "8"
    ],
    "spider": "&#xF136;&#xF132;&#xF128;&#xF113;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF125;&#xF114;&#xF121;&#xF132;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13E;&#xF136;&#xF121;&#xF121;&#xF13B;&#xF132;&#xF143;&#xF121;",
    "stanza": 828
  },
  {
    "role": "file",
    "lines": [
      "== COS_Map =="
    ],
    "stanza": 829
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "show map function for applying a function across the elements of a list",
    "section_category": "MATH",
    "section_index": 20,
    "stanza": 830
  },
  {
    "role": "code",
    "lines": [
      "define map | lambda (p lst) (if (> (list-length $lst) 0) (prepend (p (head $lst)) (map $p (tail $lst))) (vector));"
    ],
    "preprocessed": "define map | lambda (p lst) (if (> (list-length $lst) 0) (prepend (p (head $lst)) (map $p (tail $lst))) (vector));",
    "code": "2110132110001131232110103221100100321001000332211113221003221001010302321001000332033221001100322110010032210001113023210010003332211000113023211001003221001001302321001000333322100003332233",
    "parse": [
      "define",
      "map",
      [
        -1,
        "lambda",
        [
          "p",
          "lst"
        ],
        [
          "if",
          [
            ">",
            [
              "list-length",
              [
                -2,
                "lst"
              ]
            ],
            "0"
          ],
          [
            "prepend",
            [
              "p",
              [
                "head",
                [
                  -2,
                  "lst"
                ]
              ]
            ],
            [
              "map",
              [
                -2,
                "p"
              ],
              [
                "tail",
                [
                  -2,
                  "lst"
                ]
              ]
            ]
          ],
          [
            "vector"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF128;&#xF114;&#xF101;&#xF143;&#xF123;&#xF11B;&#xF132;&#xF128;&#xF115;&#xF126;&#xF119;&#xF121;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF133;&#xF121;&#xF132;&#xF126;&#xF11D;&#xF132;&#xF128;&#xF115;&#xF132;&#xF126;&#xF118;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF121;&#xF132;&#xF128;&#xF114;&#xF100;&#xF143;&#xF128;&#xF115;&#xF132;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 831
  },
  {
    "role": "code",
    "lines": [
      "list= (map (? x | * $x 2) (vector 0 8 15)) (vector 0 16 30);"
    ],
    "preprocessed": "list= (map (? x | * $x 2) (vector 0 8 15)) (vector 0 16 30);",
    "code": "210011013221100011322110032100111312321001302321001113210332210000320321000321111333221000032032100003211110332233",
    "parse": [
      "list=",
      [
        "map",
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            "2"
          ]
        ],
        [
          "vector",
          "0",
          "8",
          "15"
        ]
      ],
      [
        "vector",
        "0",
        "16",
        "30"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF135;&#xF121;&#xF132;&#xF123;&#xF111;&#xF133;&#xF13B;&#xF142;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF133;&#xF123;&#xF111;&#xF123;&#xF11F;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 832
  },
  {
    "role": "code",
    "lines": [
      "list= (map (? x | * $x 2) (vector 12 4 0 9)) (vector 24 8 0 18);"
    ],
    "preprocessed": "list= (map (? x | * $x 2) (vector 12 4 0 9)) (vector 24 8 0 18);",
    "code": "21001101322110001132211003210011131232100130232100111321033221000032110032100320321001333221000032110003210003203210010332233",
    "parse": [
      "list=",
      [
        "map",
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            "2"
          ]
        ],
        [
          "vector",
          "12",
          "4",
          "0",
          "9"
        ]
      ],
      [
        "vector",
        "24",
        "8",
        "0",
        "18"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF135;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF137;&#xF133;&#xF13C;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF119;&#xF13B;&#xF133;&#xF123;&#xF113;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 833
  },
  {
    "role": "code",
    "lines": [
      "list= (map (? x | * $x 2) (vector 8 9 5 7 10)) (vector 16 18 10 14 20);"
    ],
    "preprocessed": "list= (map (? x | * $x 2) (vector 8 9 5 7 10)) (vector 16 18 10 14 20);",
    "code": "21001101322110001132211003210011131232100130232100111321033221000032100032100132101321113210103332210000321000032100103210103211103210100332233",
    "parse": [
      "list=",
      [
        "map",
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            "2"
          ]
        ],
        [
          "vector",
          "8",
          "9",
          "5",
          "7",
          "10"
        ]
      ],
      [
        "vector",
        "16",
        "18",
        "10",
        "14",
        "20"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF135;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF13C;&#xF138;&#xF13A;&#xF13D;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF111;&#xF123;&#xF113;&#xF13D;&#xF141;&#xF123;&#xF115;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 834
  },
  {
    "role": "code",
    "lines": [
      "list= (map (? x | * $x 2) (vector 10 12 19 8 3 1)) (vector 20 24 38 16 6 2);"
    ],
    "preprocessed": "list= (map (? x | * $x 2) (vector 10 12 19 8 3 1)) (vector 20 24 38 16 6 2);",
    "code": "21001101322110001132211003210011131232100130232100111321033221000032101032110032100113210003211321333221000032101003211000321001103210000321103210332233",
    "parse": [
      "list=",
      [
        "map",
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            "2"
          ]
        ],
        [
          "vector",
          "10",
          "12",
          "19",
          "8",
          "3",
          "1"
        ]
      ],
      [
        "vector",
        "20",
        "24",
        "38",
        "16",
        "6",
        "2"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF135;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF13F;&#xF123;&#xF114;&#xF13B;&#xF136;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF115;&#xF123;&#xF119;&#xF124;&#xF117;&#xF123;&#xF111;&#xF139;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 835
  },
  {
    "role": "code",
    "lines": [
      "list= (map (? x 42) (vector 5 18 4)) (vector 42 42 42);"
    ],
    "preprocessed": "list= (map (? x 42) (vector 5 18 4)) (vector 42 42 42);",
    "code": "21001101322110001132211003210011132101010332210000321013210010321003332210000321010103210101032101010332233",
    "parse": [
      "list=",
      [
        "map",
        [
          "?",
          "x",
          "42"
        ],
        [
          "vector",
          "5",
          "18",
          "4"
        ]
      ],
      [
        "vector",
        "42",
        "42",
        "42"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF124;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF111;&#xF138;&#xF123;&#xF113;&#xF137;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF124;&#xF11B;&#xF124;&#xF11B;&#xF124;&#xF11B;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 836
  },
  {
    "role": "code",
    "lines": [
      "list= (map (? x 42) (vector 3 10 17 11)) (vector 42 42 42 42);"
    ],
    "preprocessed": "list= (map (? x 42) (vector 3 10 17 11)) (vector 42 42 42 42);",
    "code": "2100110132211000113221100321001113210101033221000032113210103210001321011333221000032101010321010103210101032101010332233",
    "parse": [
      "list=",
      [
        "map",
        [
          "?",
          "x",
          "42"
        ],
        [
          "vector",
          "3",
          "10",
          "17",
          "11"
        ]
      ],
      [
        "vector",
        "42",
        "42",
        "42",
        "42"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF124;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF111;&#xF136;&#xF13D;&#xF123;&#xF112;&#xF13E;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF124;&#xF11B;&#xF124;&#xF11B;&#xF124;&#xF11B;&#xF124;&#xF11B;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 837
  },
  {
    "role": "code",
    "lines": [
      "list= (map (? x 42) (vector 5 13 6 16 2)) (vector 42 42 42 42 42);"
    ],
    "preprocessed": "list= (map (? x 42) (vector 5 13 6 16 2)) (vector 42 42 42 42 42);",
    "code": "2100110132211000113221100321001113210101033221000032101321101321103210000321033322100003210101032101010321010103210101032101010332233",
    "parse": [
      "list=",
      [
        "map",
        [
          "?",
          "x",
          "42"
        ],
        [
          "vector",
          "5",
          "13",
          "6",
          "16",
          "2"
        ]
      ],
      [
        "vector",
        "42",
        "42",
        "42",
        "42",
        "42"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF124;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF111;&#xF138;&#xF140;&#xF139;&#xF123;&#xF111;&#xF135;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF124;&#xF11B;&#xF124;&#xF11B;&#xF124;&#xF11B;&#xF124;&#xF11B;&#xF124;&#xF11B;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 838
  },
  {
    "role": "code",
    "lines": [
      "list= (map (? x 42) (vector 9 1 19 14 6 10)) (vector 42 42 42 42 42 42);"
    ],
    "preprocessed": "list= (map (? x 42) (vector 9 1 19 14 6 10)) (vector 42 42 42 42 42 42);",
    "code": "210011013221100011322110032100111321010103322100003210013213210011321110321103210103332210000321010103210101032101010321010103210101032101010332233",
    "parse": [
      "list=",
      [
        "map",
        [
          "?",
          "x",
          "42"
        ],
        [
          "vector",
          "9",
          "1",
          "19",
          "14",
          "6",
          "10"
        ]
      ],
      [
        "vector",
        "42",
        "42",
        "42",
        "42",
        "42",
        "42"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF124;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13C;&#xF134;&#xF123;&#xF114;&#xF141;&#xF139;&#xF13D;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF124;&#xF11B;&#xF124;&#xF11B;&#xF124;&#xF11B;&#xF124;&#xF11B;&#xF124;&#xF11B;&#xF124;&#xF11B;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 839
  },
  {
    "role": "code",
    "lines": [
      "define crunch | lambda (p lst) (if (>= (list-length $lst) 2) (p (head $lst) (crunch $p (tail $lst))) (if (= (list-length $lst) 1) (head $lst) $undefined));"
    ],
    "preprocessed": "define crunch | lambda (p lst) (if (>= (list-length $lst) 2) (p (head $lst) (crunch $p (tail $lst))) (if (= (list-length $lst) 1) (head $lst) $undefined));",
    "code": "21101321100101312321101032211001003210010003322111132211111032210010103023210010003321033221100100322100011130232100100033221100101302321100100322100100130232100100033332211113221132210010103023210010003321332210001113023210010003302321000003332233",
    "parse": [
      "define",
      "crunch",
      [
        -1,
        "lambda",
        [
          "p",
          "lst"
        ],
        [
          "if",
          [
            ">=",
            [
              "list-length",
              [
                -2,
                "lst"
              ]
            ],
            "2"
          ],
          [
            "p",
            [
              "head",
              [
                -2,
                "lst"
              ]
            ],
            [
              "crunch",
              [
                -2,
                "p"
              ],
              [
                "tail",
                [
                  -2,
                  "lst"
                ]
              ]
            ]
          ],
          [
            "if",
            [
              "=",
              [
                "list-length",
                [
                  -2,
                  "lst"
                ]
              ],
              "1"
            ],
            [
              "head",
              [
                -2,
                "lst"
              ]
            ],
            [
              -2,
              "undefined"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF128;&#xF116;&#xF101;&#xF143;&#xF123;&#xF11B;&#xF132;&#xF128;&#xF115;&#xF126;&#xF119;&#xF121;&#xF132;&#xF142;&#xF132;&#xF125;&#xF11F;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF135;&#xF121;&#xF132;&#xF128;&#xF115;&#xF132;&#xF126;&#xF118;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF132;&#xF128;&#xF116;&#xF100;&#xF143;&#xF128;&#xF115;&#xF132;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF134;&#xF121;&#xF132;&#xF126;&#xF118;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF100;&#xF143;&#xF124;&#xF111;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 840
  },
  {
    "role": "code",
    "lines": [
      "= (crunch $+ (vector 5 12 2)) 19;"
    ],
    "preprocessed": "= (crunch $+ (vector 5 12 2)) 19;",
    "code": "21132211001013023210103221000032101321100321033321001132233",
    "parse": [
      "=",
      [
        "crunch",
        [
          -2,
          "+"
        ],
        [
          "vector",
          "5",
          "12",
          "2"
        ]
      ],
      "19"
    ],
    "spider": "&#xF136;&#xF132;&#xF128;&#xF116;&#xF100;&#xF143;&#xF13D;&#xF132;&#xF123;&#xF111;&#xF138;&#xF13F;&#xF135;&#xF121;&#xF121;&#xF123;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 841
  },
  {
    "role": "code",
    "lines": [
      "= (crunch $+ (vector 11 18 1 4)) 34;"
    ],
    "preprocessed": "= (crunch $+ (vector 11 18 1 4)) 34;",
    "code": "211322110010130232101032210000321011321001032132100333210001032233",
    "parse": [
      "=",
      [
        "crunch",
        [
          -2,
          "+"
        ],
        [
          "vector",
          "11",
          "18",
          "1",
          "4"
        ]
      ],
      "34"
    ],
    "spider": "&#xF136;&#xF132;&#xF128;&#xF116;&#xF100;&#xF143;&#xF13D;&#xF132;&#xF123;&#xF111;&#xF13E;&#xF123;&#xF113;&#xF134;&#xF137;&#xF121;&#xF121;&#xF124;&#xF113;&#xF132;&#xF143;&#xF121;",
    "stanza": 842
  },
  {
    "role": "code",
    "lines": [
      "= (crunch $+ (vector 15 13 10 12 2)) 52;"
    ],
    "preprocessed": "= (crunch $+ (vector 15 13 10 12 2)) 52;",
    "code": "2113221100101302321010322100003211113211013210103211003210333211010032233",
    "parse": [
      "=",
      [
        "crunch",
        [
          -2,
          "+"
        ],
        [
          "vector",
          "15",
          "13",
          "10",
          "12",
          "2"
        ]
      ],
      "52"
    ],
    "spider": "&#xF136;&#xF132;&#xF128;&#xF116;&#xF100;&#xF143;&#xF13D;&#xF132;&#xF123;&#xF111;&#xF142;&#xF140;&#xF13D;&#xF13F;&#xF135;&#xF121;&#xF121;&#xF125;&#xF115;&#xF132;&#xF143;&#xF121;",
    "stanza": 843
  },
  {
    "role": "code",
    "lines": [
      "= (crunch $+ (vector 12 6 17 15 4 10)) 64;"
    ],
    "preprocessed": "= (crunch $+ (vector 12 6 17 15 4 10)) 64;",
    "code": "211322110010130232101032210000321100321103210001321111321003210103332100000032233",
    "parse": [
      "=",
      [
        "crunch",
        [
          -2,
          "+"
        ],
        [
          "vector",
          "12",
          "6",
          "17",
          "15",
          "4",
          "10"
        ]
      ],
      "64"
    ],
    "spider": "&#xF136;&#xF132;&#xF128;&#xF116;&#xF100;&#xF143;&#xF13D;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF139;&#xF123;&#xF112;&#xF142;&#xF137;&#xF13D;&#xF121;&#xF121;&#xF126;&#xF111;&#xF132;&#xF143;&#xF121;",
    "stanza": 844
  },
  {
    "role": "file",
    "lines": [
      "== COS_CommentBase =="
    ],
    "stanza": 845
  },
  {
    "role": "comment",
    "lines": [
      "# The following parts of the message are experimental, and not",
      "# carefully integrated with the main body"
    ],
    "section_description": "end of part 1, start of part 2",
    "section_category": "NOTE",
    "section_index": 21,
    "stanza": 846
  },
  {
    "role": "code",
    "lines": [
      "intro part2;"
    ],
    "preprocessed": "intro part2;",
    "code": "21001032110011032233",
    "parse": [
      "intro",
      "part2"
    ],
    "spider": "&#xF123;&#xF113;&#xF128;&#xF117;&#xF132;&#xF143;&#xF121;",
    "stanza": 847
  },
  {
    "role": "file",
    "lines": [
      "== COS_Recursion =="
    ],
    "stanza": 848
  },
  {
    "role": "comment",
    "lines": [
      "# skipping over a lot of definitions and desugarings"
    ],
    "section_description": "show an example of recursive evaluation",
    "section_category": "MATH",
    "section_index": 22,
    "stanza": 849
  },
  {
    "role": "code",
    "lines": [
      "define easy-factorial | ? f | ? x | if (> $x 0) (* $x | f $f (- $x 1)) 1;"
    ],
    "preprocessed": "define easy-factorial | ? f | ? x | if (> $x 0) (* $x | f $f (- $x 1)) 1;",
    "code": "21101321100111312321100321101000312321100321001113123211113221003023210011132033221001302321001113123211010003023211010003221011302321001113213332132233",
    "parse": [
      "define",
      "easy-factorial",
      [
        -1,
        "?",
        "f",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "if",
            [
              ">",
              [
                -2,
                "x"
              ],
              "0"
            ],
            [
              "*",
              [
                -2,
                "x"
              ],
              [
                -1,
                "f",
                [
                  -2,
                  "f"
                ],
                [
                  "-",
                  [
                    -2,
                    "x"
                  ],
                  "1"
                ]
              ]
            ],
            "1"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF128;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF128;&#xF119;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF142;&#xF132;&#xF137;&#xF100;&#xF143;&#xF124;&#xF118;&#xF133;&#xF121;&#xF132;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF101;&#xF143;&#xF128;&#xF119;&#xF100;&#xF143;&#xF128;&#xF119;&#xF132;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF134;&#xF121;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 850
  },
  {
    "role": "code",
    "lines": [
      "define factorial | ? x | if (> $x 0) (* $x | factorial | - $x 1) 1;"
    ],
    "preprocessed": "define factorial | ? x | if (> $x 0) (* $x | factorial | - $x 1) 1;",
    "code": "2110132111101312321100321001113123211113221003023210011132033221001302321001113123211110131232101130232100111321332132233",
    "parse": [
      "define",
      "factorial",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            ">",
            [
              -2,
              "x"
            ],
            "0"
          ],
          [
            "*",
            [
              -2,
              "x"
            ],
            [
              -1,
              "factorial",
              [
                -1,
                "-",
                [
                  -2,
                  "x"
                ],
                "1"
              ]
            ]
          ],
          "1"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF125;&#xF11E;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF142;&#xF132;&#xF137;&#xF100;&#xF143;&#xF124;&#xF118;&#xF133;&#xF121;&#xF132;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF101;&#xF143;&#xF125;&#xF11E;&#xF101;&#xF143;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF134;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 851
  },
  {
    "role": "code",
    "lines": [
      "= (easy-factorial $easy-factorial 0) 1;"
    ],
    "preprocessed": "= (easy-factorial $easy-factorial 0) 1;",
    "code": "2113221100111302321100111320332132233",
    "parse": [
      "=",
      [
        "easy-factorial",
        [
          -2,
          "easy-factorial"
        ],
        "0"
      ],
      "1"
    ],
    "spider": "&#xF136;&#xF132;&#xF128;&#xF118;&#xF100;&#xF143;&#xF128;&#xF118;&#xF133;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 852
  },
  {
    "role": "code",
    "lines": [
      "= (easy-factorial $easy-factorial 1) 1;"
    ],
    "preprocessed": "= (easy-factorial $easy-factorial 1) 1;",
    "code": "2113221100111302321100111321332132233",
    "parse": [
      "=",
      [
        "easy-factorial",
        [
          -2,
          "easy-factorial"
        ],
        "1"
      ],
      "1"
    ],
    "spider": "&#xF136;&#xF132;&#xF128;&#xF118;&#xF100;&#xF143;&#xF128;&#xF118;&#xF134;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 853
  },
  {
    "role": "code",
    "lines": [
      "= (easy-factorial $easy-factorial 2) 2;"
    ],
    "preprocessed": "= (easy-factorial $easy-factorial 2) 2;",
    "code": "211322110011130232110011132103321032233",
    "parse": [
      "=",
      [
        "easy-factorial",
        [
          -2,
          "easy-factorial"
        ],
        "2"
      ],
      "2"
    ],
    "spider": "&#xF136;&#xF132;&#xF128;&#xF118;&#xF100;&#xF143;&#xF128;&#xF118;&#xF135;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 854
  },
  {
    "role": "code",
    "lines": [
      "= (easy-factorial $easy-factorial 3) 6;"
    ],
    "preprocessed": "= (easy-factorial $easy-factorial 3) 6;",
    "code": "2113221100111302321100111321133211032233",
    "parse": [
      "=",
      [
        "easy-factorial",
        [
          -2,
          "easy-factorial"
        ],
        "3"
      ],
      "6"
    ],
    "spider": "&#xF136;&#xF132;&#xF128;&#xF118;&#xF100;&#xF143;&#xF128;&#xF118;&#xF136;&#xF121;&#xF139;&#xF132;&#xF143;&#xF121;",
    "stanza": 855
  },
  {
    "role": "code",
    "lines": [
      "= (easy-factorial $easy-factorial 4) 24;"
    ],
    "preprocessed": "= (easy-factorial $easy-factorial 4) 24;",
    "code": "2113221100111302321100111321003321100032233",
    "parse": [
      "=",
      [
        "easy-factorial",
        [
          -2,
          "easy-factorial"
        ],
        "4"
      ],
      "24"
    ],
    "spider": "&#xF136;&#xF132;&#xF128;&#xF118;&#xF100;&#xF143;&#xF128;&#xF118;&#xF137;&#xF121;&#xF123;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 856
  },
  {
    "role": "code",
    "lines": [
      "= (easy-factorial $easy-factorial 5) 120;"
    ],
    "preprocessed": "= (easy-factorial $easy-factorial 5) 120;",
    "code": "211322110011130232110011132101332111100032233",
    "parse": [
      "=",
      [
        "easy-factorial",
        [
          -2,
          "easy-factorial"
        ],
        "5"
      ],
      "120"
    ],
    "spider": "&#xF136;&#xF132;&#xF128;&#xF118;&#xF100;&#xF143;&#xF128;&#xF118;&#xF138;&#xF121;&#xF129;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 857
  },
  {
    "role": "code",
    "lines": [
      "= (factorial 0) 1;"
    ],
    "preprocessed": "= (factorial 0) 1;",
    "code": "211322111101320332132233",
    "parse": [
      "=",
      [
        "factorial",
        "0"
      ],
      "1"
    ],
    "spider": "&#xF136;&#xF132;&#xF125;&#xF11E;&#xF133;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 858
  },
  {
    "role": "code",
    "lines": [
      "= (factorial 1) 1;"
    ],
    "preprocessed": "= (factorial 1) 1;",
    "code": "211322111101321332132233",
    "parse": [
      "=",
      [
        "factorial",
        "1"
      ],
      "1"
    ],
    "spider": "&#xF136;&#xF132;&#xF125;&#xF11E;&#xF134;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 859
  },
  {
    "role": "code",
    "lines": [
      "= (factorial 2) 2;"
    ],
    "preprocessed": "= (factorial 2) 2;",
    "code": "21132211110132103321032233",
    "parse": [
      "=",
      [
        "factorial",
        "2"
      ],
      "2"
    ],
    "spider": "&#xF136;&#xF132;&#xF125;&#xF11E;&#xF135;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 860
  },
  {
    "role": "code",
    "lines": [
      "= (factorial 3) 6;"
    ],
    "preprocessed": "= (factorial 3) 6;",
    "code": "211322111101321133211032233",
    "parse": [
      "=",
      [
        "factorial",
        "3"
      ],
      "6"
    ],
    "spider": "&#xF136;&#xF132;&#xF125;&#xF11E;&#xF136;&#xF121;&#xF139;&#xF132;&#xF143;&#xF121;",
    "stanza": 861
  },
  {
    "role": "code",
    "lines": [
      "= (factorial 4) 24;"
    ],
    "preprocessed": "= (factorial 4) 24;",
    "code": "211322111101321003321100032233",
    "parse": [
      "=",
      [
        "factorial",
        "4"
      ],
      "24"
    ],
    "spider": "&#xF136;&#xF132;&#xF125;&#xF11E;&#xF137;&#xF121;&#xF123;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 862
  },
  {
    "role": "code",
    "lines": [
      "= (factorial 5) 120;"
    ],
    "preprocessed": "= (factorial 5) 120;",
    "code": "21132211110132101332111100032233",
    "parse": [
      "=",
      [
        "factorial",
        "5"
      ],
      "120"
    ],
    "spider": "&#xF136;&#xF132;&#xF125;&#xF11E;&#xF138;&#xF121;&#xF129;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 863
  },
  {
    "role": "file",
    "lines": [
      "== COS_Pure =="
    ],
    "stanza": 864
  },
  {
    "role": "comment",
    "lines": [
      "# these definitions are not quite what we want",
      "# since thinking of everything as a function requires headscratching",
      "# it would be better to use these as a parallel means of evaluation",
      "# ... for expressions"
    ],
    "section_description": "some pure lambda calculus definitions - optional",
    "section_category": "MATH",
    "section_index": 23,
    "stanza": 865
  },
  {
    "role": "code",
    "lines": [
      "define pure-if | ? x | ? y | ? z | x $y $z;"
    ],
    "preprocessed": "define pure-if | ? x | ? y | ? z | x $y $z;",
    "code": "2110132110100131232110032100111312321100321100113123211003211010031232100111302321100113023211010032233",
    "parse": [
      "define",
      "pure-if",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "?",
            "z",
            [
              -1,
              "x",
              [
                -2,
                "y"
              ],
              [
                -2,
                "z"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF128;&#xF11A;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF115;&#xF101;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF100;&#xF143;&#xF125;&#xF115;&#xF132;&#xF143;&#xF121;",
    "stanza": 866
  },
  {
    "role": "code",
    "lines": [
      "define pure-true | ? y | ? z | y;"
    ],
    "preprocessed": "define pure-true | ? y | ? z | y;",
    "code": "2110132110101031232110032110011312321100321101003123211001132233",
    "parse": [
      "define",
      "pure-true",
      [
        -1,
        "?",
        "y",
        [
          -1,
          "?",
          "z",
          [
            -1,
            "y"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF128;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF115;&#xF101;&#xF143;&#xF125;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 867
  },
  {
    "role": "code",
    "lines": [
      "define pure-false | ? y | ? z | z;"
    ],
    "preprocessed": "define pure-false | ? y | ? z | z;",
    "code": "2110132110101131232110032110011312321100321101003123211010032233",
    "parse": [
      "define",
      "pure-false",
      [
        -1,
        "?",
        "y",
        [
          -1,
          "?",
          "z",
          [
            -1,
            "z"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF128;&#xF11C;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF115;&#xF101;&#xF143;&#xF125;&#xF115;&#xF132;&#xF143;&#xF121;",
    "stanza": 868
  },
  {
    "role": "code",
    "lines": [
      "define pure-cons | ? x | ? y | ? z | pure-if $z $x $y;"
    ],
    "preprocessed": "define pure-cons | ? x | ? y | ? z | pure-if $z $x $y;",
    "code": "2110132110110031232110032100111312321100321100113123211003211010031232110100130232110100302321001113023211001132233",
    "parse": [
      "define",
      "pure-cons",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "?",
            "z",
            [
              -1,
              "pure-if",
              [
                -2,
                "z"
              ],
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF128;&#xF11D;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF115;&#xF101;&#xF143;&#xF128;&#xF11A;&#xF100;&#xF143;&#xF125;&#xF115;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 869
  },
  {
    "role": "code",
    "lines": [
      "define pure-car | ? x | x $pure-true;"
    ],
    "preprocessed": "define pure-car | ? x | x $pure-true;",
    "code": "21101321101101312321100321001113123210011130232110101032233",
    "parse": [
      "define",
      "pure-car",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "x",
          [
            -2,
            "pure-true"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF128;&#xF11E;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF128;&#xF11B;&#xF132;&#xF143;&#xF121;",
    "stanza": 870
  },
  {
    "role": "code",
    "lines": [
      "define pure-cdr | ? x | x $pure-false;"
    ],
    "preprocessed": "define pure-cdr | ? x | x $pure-false;",
    "code": "21101321101110312321100321001113123210011130232110101132233",
    "parse": [
      "define",
      "pure-cdr",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "x",
          [
            -2,
            "pure-false"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF128;&#xF11F;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF128;&#xF11C;&#xF132;&#xF143;&#xF121;",
    "stanza": 871
  },
  {
    "role": "code",
    "lines": [
      "define zero | ? f | ? x $x;"
    ],
    "preprocessed": "define zero | ? f | ? x $x;",
    "code": "21101321101111312321100321101000312321100321001113023210011132233",
    "parse": [
      "define",
      "zero",
      [
        -1,
        "?",
        "f",
        [
          -1,
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF128;&#xF120;&#xF101;&#xF143;&#xF13F;&#xF128;&#xF119;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 872
  },
  {
    "role": "code",
    "lines": [
      "define one | ? f | ? x | f $x;"
    ],
    "preprocessed": "define one | ? f | ? x | f $x;",
    "code": "21101321110000312321100321101000312321100321001113123211010003023210011132233",
    "parse": [
      "define",
      "one",
      [
        -1,
        "?",
        "f",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "f",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF129;&#xF111;&#xF101;&#xF143;&#xF13F;&#xF128;&#xF119;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF128;&#xF119;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 873
  },
  {
    "role": "code",
    "lines": [
      "define two | ? f | ? x | f (f $x);"
    ],
    "preprocessed": "define two | ? f | ? x | f (f $x);",
    "code": "2110132111000131232110032110100031232110032100111312321101000322110100030232100111332233",
    "parse": [
      "define",
      "two",
      [
        -1,
        "?",
        "f",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "f",
            [
              "f",
              [
                -2,
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF129;&#xF112;&#xF101;&#xF143;&#xF13F;&#xF128;&#xF119;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF128;&#xF119;&#xF132;&#xF128;&#xF119;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 874
  },
  {
    "role": "code",
    "lines": [
      "define succ | ? n | ? f | ? x | f ((n $f) $x);"
    ],
    "preprocessed": "define succ | ? n | ? f | ? x | f ((n $f) $x);",
    "code": "211013211100103123211003210001003123211003211010003123211003210011131232110100032221000100302321101000330232100111332233",
    "parse": [
      "define",
      "succ",
      [
        -1,
        "?",
        "n",
        [
          -1,
          "?",
          "f",
          [
            -1,
            "?",
            "x",
            [
              -1,
              "f",
              [
                [
                  "n",
                  [
                    -2,
                    "f"
                  ]
                ],
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF129;&#xF113;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF115;&#xF101;&#xF143;&#xF13F;&#xF128;&#xF119;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF128;&#xF119;&#xF132;&#xF132;&#xF126;&#xF115;&#xF100;&#xF143;&#xF128;&#xF119;&#xF121;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 875
  },
  {
    "role": "code",
    "lines": [
      "define add | ? a | ? b | (a $succ) $b;"
    ],
    "preprocessed": "define add | ? a | ? b | (a $succ) $b;",
    "code": "21101321110011312321100321101013123211003211011031232211010130232111001033023211011032233",
    "parse": [
      "define",
      "add",
      [
        -1,
        "?",
        "a",
        [
          -1,
          "?",
          "b",
          [
            -1,
            [
              "a",
              [
                -2,
                "succ"
              ]
            ],
            [
              -2,
              "b"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF129;&#xF114;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF116;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF117;&#xF101;&#xF143;&#xF132;&#xF125;&#xF116;&#xF100;&#xF143;&#xF129;&#xF113;&#xF121;&#xF100;&#xF143;&#xF125;&#xF117;&#xF132;&#xF143;&#xF121;",
    "stanza": 876
  },
  {
    "role": "code",
    "lines": [
      "define mult | ? a | ? b | (a (add $b)) $zero;"
    ],
    "preprocessed": "define mult | ? a | ? b | (a (add $b)) $zero;",
    "code": "2110132111010031232110032110101312321100321101103123221101013221110011302321101103330232110111132233",
    "parse": [
      "define",
      "mult",
      [
        -1,
        "?",
        "a",
        [
          -1,
          "?",
          "b",
          [
            -1,
            [
              "a",
              [
                "add",
                [
                  -2,
                  "b"
                ]
              ]
            ],
            [
              -2,
              "zero"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF129;&#xF115;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF116;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF117;&#xF101;&#xF143;&#xF132;&#xF125;&#xF116;&#xF132;&#xF129;&#xF114;&#xF100;&#xF143;&#xF125;&#xF117;&#xF121;&#xF121;&#xF100;&#xF143;&#xF128;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 877
  },
  {
    "role": "code",
    "lines": [
      "define pred | ? n | pure-cdr | (n (? p | pure-cons (succ | pure-car $p) (pure-car $p))) (pure-cons $zero $zero);"
    ],
    "preprocessed": "define pred | ? n | pure-cdr | (n (? p | pure-cons (succ | pure-car $p) (pure-car $p))) (pure-cons $zero $zero);",
    "code": "21101321110101312321100321000100312321101110312322100010032211003211001003123211011003221110010312321101101302321100100332211011013023211001003333221101100302321101111302321101111332233",
    "parse": [
      "define",
      "pred",
      [
        -1,
        "?",
        "n",
        [
          -1,
          "pure-cdr",
          [
            -1,
            [
              "n",
              [
                "?",
                "p",
                [
                  -1,
                  "pure-cons",
                  [
                    "succ",
                    [
                      -1,
                      "pure-car",
                      [
                        -2,
                        "p"
                      ]
                    ]
                  ],
                  [
                    "pure-car",
                    [
                      -2,
                      "p"
                    ]
                  ]
                ]
              ]
            ],
            [
              "pure-cons",
              [
                -2,
                "zero"
              ],
              [
                -2,
                "zero"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF129;&#xF116;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF115;&#xF101;&#xF143;&#xF128;&#xF11F;&#xF101;&#xF143;&#xF132;&#xF126;&#xF115;&#xF132;&#xF13F;&#xF128;&#xF115;&#xF101;&#xF143;&#xF128;&#xF11D;&#xF132;&#xF129;&#xF113;&#xF101;&#xF143;&#xF128;&#xF11E;&#xF100;&#xF143;&#xF128;&#xF115;&#xF121;&#xF132;&#xF128;&#xF11E;&#xF100;&#xF143;&#xF128;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF128;&#xF11D;&#xF100;&#xF143;&#xF128;&#xF120;&#xF100;&#xF143;&#xF128;&#xF120;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 878
  },
  {
    "role": "code",
    "lines": [
      "define is-zero | ? n | (n (? dummy $pure-false) $pure-true);"
    ],
    "preprocessed": "define is-zero | ? n | (n (? dummy $pure-false) $pure-true);",
    "code": "21101321110110312321100321000100312322100010032211003211101113023211010113302321101010332233",
    "parse": [
      "define",
      "is-zero",
      [
        -1,
        "?",
        "n",
        [
          -1,
          [
            "n",
            [
              "?",
              "dummy",
              [
                -2,
                "pure-false"
              ]
            ],
            [
              -2,
              "pure-true"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF129;&#xF117;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF115;&#xF101;&#xF143;&#xF132;&#xF126;&#xF115;&#xF132;&#xF13F;&#xF129;&#xF118;&#xF100;&#xF143;&#xF128;&#xF11C;&#xF121;&#xF100;&#xF143;&#xF128;&#xF11B;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 879
  },
  {
    "role": "code",
    "lines": [
      "define fixed-point | ? f | (? x | f (x $x)) (? x | f (x $x));"
    ],
    "preprocessed": "define fixed-point | ? f | (? x | f (x $x)) (? x | f (x $x));",
    "code": "211013211110003123211003211010003123221100321001113123211010003221001113023210011133322110032100111312321101000322100111302321001113332233",
    "parse": [
      "define",
      "fixed-point",
      [
        -1,
        "?",
        "f",
        [
          -1,
          [
            "?",
            "x",
            [
              -1,
              "f",
              [
                "x",
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ],
          [
            "?",
            "x",
            [
              -1,
              "f",
              [
                "x",
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF129;&#xF119;&#xF101;&#xF143;&#xF13F;&#xF128;&#xF119;&#xF101;&#xF143;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF128;&#xF119;&#xF132;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF128;&#xF119;&#xF132;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 880
  },
  {
    "role": "comment",
    "lines": [
      "# .. but for rest of message will assume that define does fixed-point for us",
      "# now build a link between numbers and church number functions"
    ],
    "stanza": 881
  },
  {
    "role": "code",
    "lines": [
      "define unchurch | ? c | c (? x | + $x 1) 0;"
    ],
    "preprocessed": "define unchurch | ? c | c (? x | + $x 1) 0;",
    "code": "21101321111001312321100321101113123211011132211003210011131232101030232100111321332032233",
    "parse": [
      "define",
      "unchurch",
      [
        -1,
        "?",
        "c",
        [
          -1,
          "c",
          [
            "?",
            "x",
            [
              -1,
              "+",
              [
                -2,
                "x"
              ],
              "1"
            ]
          ],
          "0"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF129;&#xF11A;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF118;&#xF101;&#xF143;&#xF125;&#xF118;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13D;&#xF100;&#xF143;&#xF124;&#xF118;&#xF134;&#xF121;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 882
  },
  {
    "role": "code",
    "lines": [
      "= 0 (unchurch $zero);"
    ],
    "preprocessed": "= 0 (unchurch $zero);",
    "code": "2113203221111001302321101111332233",
    "parse": [
      "=",
      "0",
      [
        "unchurch",
        [
          -2,
          "zero"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF132;&#xF129;&#xF11A;&#xF100;&#xF143;&#xF128;&#xF120;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 883
  },
  {
    "role": "code",
    "lines": [
      "= 1 (unchurch $one);"
    ],
    "preprocessed": "= 1 (unchurch $one);",
    "code": "2113213221111001302321110000332233",
    "parse": [
      "=",
      "1",
      [
        "unchurch",
        [
          -2,
          "one"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF132;&#xF129;&#xF11A;&#xF100;&#xF143;&#xF129;&#xF111;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 884
  },
  {
    "role": "code",
    "lines": [
      "= 2 (unchurch $two);"
    ],
    "preprocessed": "= 2 (unchurch $two);",
    "code": "21132103221111001302321110001332233",
    "parse": [
      "=",
      "2",
      [
        "unchurch",
        [
          -2,
          "two"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF132;&#xF129;&#xF11A;&#xF100;&#xF143;&#xF129;&#xF112;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 885
  },
  {
    "role": "code",
    "lines": [
      "define church | ? x | if (= 0 $x) $zero (succ | church | - $x 1);"
    ],
    "preprocessed": "define church | ? x | if (= 0 $x) $zero (succ | church | - $x 1);",
    "code": "211013211110103123211003210011131232111132211320302321001113302321101111322111001031232111101031232101130232100111321332233",
    "parse": [
      "define",
      "church",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "=",
            "0",
            [
              -2,
              "x"
            ]
          ],
          [
            -2,
            "zero"
          ],
          [
            "succ",
            [
              -1,
              "church",
              [
                -1,
                "-",
                [
                  -2,
                  "x"
                ],
                "1"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF129;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF142;&#xF132;&#xF136;&#xF133;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF100;&#xF143;&#xF128;&#xF120;&#xF132;&#xF129;&#xF113;&#xF101;&#xF143;&#xF129;&#xF11B;&#xF101;&#xF143;&#xF13E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 886
  },
  {
    "role": "file",
    "lines": [
      "== COS_Quantifier =="
    ],
    "stanza": 887
  },
  {
    "role": "comment",
    "lines": [
      "# really need to link with sets for true correctness",
      "# and the examples here are REALLY sparse, need much more"
    ],
    "section_description": "introduce universal quantifier",
    "section_category": "MATH",
    "section_index": 24,
    "stanza": 888
  },
  {
    "role": "code",
    "lines": [
      "intro forall;"
    ],
    "preprocessed": "intro forall;",
    "code": "210010321001132233",
    "parse": [
      "intro",
      "forall"
    ],
    "spider": "&#xF123;&#xF113;&#xF123;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 889
  },
  {
    "role": "code",
    "lines": [
      "< 5 (+ 5 1);"
    ],
    "preprocessed": "< 5 (+ 5 1);",
    "code": "21032101322101032101321332233",
    "parse": [
      "<",
      "5",
      [
        "+",
        "5",
        "1"
      ]
    ],
    "spider": "&#xF135;&#xF138;&#xF132;&#xF13D;&#xF138;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 890
  },
  {
    "role": "code",
    "lines": [
      "< 4 (+ 4 1);"
    ],
    "preprocessed": "< 4 (+ 4 1);",
    "code": "21032100322101032100321332233",
    "parse": [
      "<",
      "4",
      [
        "+",
        "4",
        "1"
      ]
    ],
    "spider": "&#xF135;&#xF137;&#xF132;&#xF13D;&#xF137;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 891
  },
  {
    "role": "code",
    "lines": [
      "< 3 (+ 3 1);"
    ],
    "preprocessed": "< 3 (+ 3 1);",
    "code": "210321132210103211321332233",
    "parse": [
      "<",
      "3",
      [
        "+",
        "3",
        "1"
      ]
    ],
    "spider": "&#xF135;&#xF136;&#xF132;&#xF13D;&#xF136;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 892
  },
  {
    "role": "code",
    "lines": [
      "< 2 (+ 2 1);"
    ],
    "preprocessed": "< 2 (+ 2 1);",
    "code": "210321032210103210321332233",
    "parse": [
      "<",
      "2",
      [
        "+",
        "2",
        "1"
      ]
    ],
    "spider": "&#xF135;&#xF135;&#xF132;&#xF13D;&#xF135;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 893
  },
  {
    "role": "code",
    "lines": [
      "< 1 (+ 1 1);"
    ],
    "preprocessed": "< 1 (+ 1 1);",
    "code": "2103213221010321321332233",
    "parse": [
      "<",
      "1",
      [
        "+",
        "1",
        "1"
      ]
    ],
    "spider": "&#xF135;&#xF134;&#xF132;&#xF13D;&#xF134;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 894
  },
  {
    "role": "code",
    "lines": [
      "< 0 (+ 0 1);"
    ],
    "preprocessed": "< 0 (+ 0 1);",
    "code": "2103203221010320321332233",
    "parse": [
      "<",
      "0",
      [
        "+",
        "0",
        "1"
      ]
    ],
    "spider": "&#xF135;&#xF133;&#xF132;&#xF13D;&#xF133;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 895
  },
  {
    "role": "code",
    "lines": [
      "forall (? x | < $x (+ $x 1));"
    ],
    "preprocessed": "forall (? x | < $x (+ $x 1));",
    "code": "2100113221100321001113123210302321001113221010302321001113213332233",
    "parse": [
      "forall",
      [
        "?",
        "x",
        [
          -1,
          "<",
          [
            -2,
            "x"
          ],
          [
            "+",
            [
              -2,
              "x"
            ],
            "1"
          ]
        ]
      ]
    ],
    "spider": "&#xF123;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF135;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF13D;&#xF100;&#xF143;&#xF124;&#xF118;&#xF134;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 896
  },
  {
    "role": "code",
    "lines": [
      "< 5 (* 5 2);"
    ],
    "preprocessed": "< 5 (* 5 2);",
    "code": "210321013221001321013210332233",
    "parse": [
      "<",
      "5",
      [
        "*",
        "5",
        "2"
      ]
    ],
    "spider": "&#xF135;&#xF138;&#xF132;&#xF13C;&#xF138;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 897
  },
  {
    "role": "code",
    "lines": [
      "< 4 (* 4 2);"
    ],
    "preprocessed": "< 4 (* 4 2);",
    "code": "210321003221001321003210332233",
    "parse": [
      "<",
      "4",
      [
        "*",
        "4",
        "2"
      ]
    ],
    "spider": "&#xF135;&#xF137;&#xF132;&#xF13C;&#xF137;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 898
  },
  {
    "role": "code",
    "lines": [
      "< 3 (* 3 2);"
    ],
    "preprocessed": "< 3 (* 3 2);",
    "code": "2103211322100132113210332233",
    "parse": [
      "<",
      "3",
      [
        "*",
        "3",
        "2"
      ]
    ],
    "spider": "&#xF135;&#xF136;&#xF132;&#xF13C;&#xF136;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 899
  },
  {
    "role": "code",
    "lines": [
      "< 2 (* 2 2);"
    ],
    "preprocessed": "< 2 (* 2 2);",
    "code": "2103210322100132103210332233",
    "parse": [
      "<",
      "2",
      [
        "*",
        "2",
        "2"
      ]
    ],
    "spider": "&#xF135;&#xF135;&#xF132;&#xF13C;&#xF135;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 900
  },
  {
    "role": "code",
    "lines": [
      "< 1 (* 1 2);"
    ],
    "preprocessed": "< 1 (* 1 2);",
    "code": "21032132210013213210332233",
    "parse": [
      "<",
      "1",
      [
        "*",
        "1",
        "2"
      ]
    ],
    "spider": "&#xF135;&#xF134;&#xF132;&#xF13C;&#xF134;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 901
  },
  {
    "role": "code",
    "lines": [
      "not | < 0 (* 0 2);"
    ],
    "preprocessed": "not | < 0 (* 0 2);",
    "code": "2101312321032032210013203210332233",
    "parse": [
      "not",
      [
        -1,
        "<",
        "0",
        [
          "*",
          "0",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF135;&#xF133;&#xF132;&#xF13C;&#xF133;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 902
  },
  {
    "role": "code",
    "lines": [
      "not | forall (? x | < $x (* $x 2));"
    ],
    "preprocessed": "not | forall (? x | < $x (* $x 2));",
    "code": "2101312321001132211003210011131232103023210011132210013023210011132103332233",
    "parse": [
      "not",
      [
        -1,
        "forall",
        [
          "?",
          "x",
          [
            -1,
            "<",
            [
              -2,
              "x"
            ],
            [
              "*",
              [
                -2,
                "x"
              ],
              "2"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF123;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF135;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF135;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 903
  },
  {
    "role": "comment",
    "lines": [
      "# really need to link with sets for true correctness",
      "# and the examples here are REALLY sparse, need much more"
    ],
    "section_description": "introduce existential quantifier",
    "section_category": "MATH",
    "section_index": 25,
    "stanza": 904
  },
  {
    "role": "code",
    "lines": [
      "not | = 5 (* 2 2);"
    ],
    "preprocessed": "not | = 5 (* 2 2);",
    "code": "2101312321132101322100132103210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        "5",
        [
          "*",
          "2",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF138;&#xF132;&#xF13C;&#xF135;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 905
  },
  {
    "role": "code",
    "lines": [
      "= 4 (* 2 2);"
    ],
    "preprocessed": "= 4 (* 2 2);",
    "code": "21132100322100132103210332233",
    "parse": [
      "=",
      "4",
      [
        "*",
        "2",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF137;&#xF132;&#xF13C;&#xF135;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 906
  },
  {
    "role": "code",
    "lines": [
      "not | = 3 (* 2 2);"
    ],
    "preprocessed": "not | = 3 (* 2 2);",
    "code": "210131232113211322100132103210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        "3",
        [
          "*",
          "2",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF136;&#xF132;&#xF13C;&#xF135;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 907
  },
  {
    "role": "code",
    "lines": [
      "not | = 2 (* 2 2);"
    ],
    "preprocessed": "not | = 2 (* 2 2);",
    "code": "210131232113210322100132103210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        "2",
        [
          "*",
          "2",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF135;&#xF132;&#xF13C;&#xF135;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 908
  },
  {
    "role": "code",
    "lines": [
      "not | = 1 (* 2 2);"
    ],
    "preprocessed": "not | = 1 (* 2 2);",
    "code": "21013123211321322100132103210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        "1",
        [
          "*",
          "2",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF134;&#xF132;&#xF13C;&#xF135;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 909
  },
  {
    "role": "code",
    "lines": [
      "not | = 0 (* 2 2);"
    ],
    "preprocessed": "not | = 0 (* 2 2);",
    "code": "21013123211320322100132103210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        "0",
        [
          "*",
          "2",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF133;&#xF132;&#xF13C;&#xF135;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 910
  },
  {
    "role": "code",
    "lines": [
      "intro exists;"
    ],
    "preprocessed": "intro exists;",
    "code": "210010321010032233",
    "parse": [
      "intro",
      "exists"
    ],
    "spider": "&#xF123;&#xF113;&#xF123;&#xF115;&#xF132;&#xF143;&#xF121;",
    "stanza": 911
  },
  {
    "role": "code",
    "lines": [
      "exists (? x | = $x (* 2 2));"
    ],
    "preprocessed": "exists (? x | = $x (* 2 2));",
    "code": "2101003221100321001113123211302321001113221001321032103332233",
    "parse": [
      "exists",
      [
        "?",
        "x",
        [
          -1,
          "=",
          [
            -2,
            "x"
          ],
          [
            "*",
            "2",
            "2"
          ]
        ]
      ]
    ],
    "spider": "&#xF123;&#xF115;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF136;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF13C;&#xF135;&#xF135;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 912
  },
  {
    "role": "code",
    "lines": [
      "not | = 5 (+ 5 2);"
    ],
    "preprocessed": "not | = 5 (+ 5 2);",
    "code": "21013123211321013221010321013210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        "5",
        [
          "+",
          "5",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF138;&#xF132;&#xF13D;&#xF138;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 913
  },
  {
    "role": "code",
    "lines": [
      "not | = 4 (+ 4 2);"
    ],
    "preprocessed": "not | = 4 (+ 4 2);",
    "code": "21013123211321003221010321003210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        "4",
        [
          "+",
          "4",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF137;&#xF132;&#xF13D;&#xF137;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 914
  },
  {
    "role": "code",
    "lines": [
      "not | = 3 (+ 3 2);"
    ],
    "preprocessed": "not | = 3 (+ 3 2);",
    "code": "210131232113211322101032113210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        "3",
        [
          "+",
          "3",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF136;&#xF132;&#xF13D;&#xF136;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 915
  },
  {
    "role": "code",
    "lines": [
      "not | = 2 (+ 2 2);"
    ],
    "preprocessed": "not | = 2 (+ 2 2);",
    "code": "210131232113210322101032103210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        "2",
        [
          "+",
          "2",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF135;&#xF132;&#xF13D;&#xF135;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 916
  },
  {
    "role": "code",
    "lines": [
      "not | = 1 (+ 1 2);"
    ],
    "preprocessed": "not | = 1 (+ 1 2);",
    "code": "2101312321132132210103213210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        "1",
        [
          "+",
          "1",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF134;&#xF132;&#xF13D;&#xF134;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 917
  },
  {
    "role": "code",
    "lines": [
      "not | = 0 (+ 0 2);"
    ],
    "preprocessed": "not | = 0 (+ 0 2);",
    "code": "2101312321132032210103203210332233",
    "parse": [
      "not",
      [
        -1,
        "=",
        "0",
        [
          "+",
          "0",
          "2"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF136;&#xF133;&#xF132;&#xF13D;&#xF133;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 918
  },
  {
    "role": "code",
    "lines": [
      "not (exists (? x | = $x (+ $x 2)));"
    ],
    "preprocessed": "not (exists (? x | = $x (+ $x 2)));",
    "code": "210132210100322110032100111312321130232100111322101030232100111321033332233",
    "parse": [
      "not",
      [
        "exists",
        [
          "?",
          "x",
          [
            -1,
            "=",
            [
              -2,
              "x"
            ],
            [
              "+",
              [
                -2,
                "x"
              ],
              "2"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF138;&#xF132;&#xF123;&#xF115;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF136;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF13D;&#xF100;&#xF143;&#xF124;&#xF118;&#xF135;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 919
  },
  {
    "role": "file",
    "lines": [
      "== COS_Implication =="
    ],
    "stanza": 920
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "introduce logical implication",
    "section_category": "MATH",
    "section_index": 26,
    "stanza": 921
  },
  {
    "role": "code",
    "lines": [
      "intro =>;"
    ],
    "preprocessed": "intro =>;",
    "code": "21001032111101132233",
    "parse": [
      "intro",
      "=>"
    ],
    "spider": "&#xF123;&#xF113;&#xF129;&#xF11C;&#xF132;&#xF143;&#xF121;",
    "stanza": 922
  },
  {
    "role": "code",
    "lines": [
      "define => | ? x | ? y | not | and $x (not $y);"
    ],
    "preprocessed": "define => | ? x | ? y | not | and $x (not $y);",
    "code": "21101321111011312321100321001113123211003211001131232101312321103023210011132210130232110011332233",
    "parse": [
      "define",
      "=>",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "not",
            [
              -1,
              "and",
              [
                -2,
                "x"
              ],
              [
                "not",
                [
                  -2,
                  "y"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF129;&#xF11C;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF138;&#xF101;&#xF143;&#xF139;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF138;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 923
  },
  {
    "role": "code",
    "lines": [
      "=> $true $true;"
    ],
    "preprocessed": "=> $true $true;",
    "code": "2111101130232130232132233",
    "parse": [
      "=>",
      [
        -2,
        "true"
      ],
      [
        -2,
        "true"
      ]
    ],
    "spider": "&#xF129;&#xF11C;&#xF100;&#xF143;&#xF134;&#xF100;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 924
  },
  {
    "role": "code",
    "lines": [
      "not | => $true $false;"
    ],
    "preprocessed": "not | => $true $false;",
    "code": "210131232111101130232130232032233",
    "parse": [
      "not",
      [
        -1,
        "=>",
        [
          -2,
          "true"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF129;&#xF11C;&#xF100;&#xF143;&#xF134;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 925
  },
  {
    "role": "code",
    "lines": [
      "=> $false $true;"
    ],
    "preprocessed": "=> $false $true;",
    "code": "2111101130232030232132233",
    "parse": [
      "=>",
      [
        -2,
        "false"
      ],
      [
        -2,
        "true"
      ]
    ],
    "spider": "&#xF129;&#xF11C;&#xF100;&#xF143;&#xF133;&#xF100;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 926
  },
  {
    "role": "code",
    "lines": [
      "=> $false $false;"
    ],
    "preprocessed": "=> $false $false;",
    "code": "2111101130232030232032233",
    "parse": [
      "=>",
      [
        -2,
        "false"
      ],
      [
        -2,
        "false"
      ]
    ],
    "spider": "&#xF129;&#xF11C;&#xF100;&#xF143;&#xF133;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 927
  },
  {
    "role": "code",
    "lines": [
      "forall (? x | forall (? y | => (=> $x $y) (=> (not $y) (not $x))));"
    ],
    "preprocessed": "forall (? x | forall (? y | => (=> $x $y) (=> (not $y) (not $x))));",
    "code": "2100113221100321001113123210011322110032110011312321111011322111101130232100111302321100113322111101132210130232110011332210130232100111333332233",
    "parse": [
      "forall",
      [
        "?",
        "x",
        [
          -1,
          "forall",
          [
            "?",
            "y",
            [
              -1,
              "=>",
              [
                "=>",
                [
                  -2,
                  "x"
                ],
                [
                  -2,
                  "y"
                ]
              ],
              [
                "=>",
                [
                  "not",
                  [
                    -2,
                    "y"
                  ]
                ],
                [
                  "not",
                  [
                    -2,
                    "x"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF123;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF123;&#xF114;&#xF132;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF129;&#xF11C;&#xF132;&#xF129;&#xF11C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF132;&#xF129;&#xF11C;&#xF132;&#xF138;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF132;&#xF138;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 928
  },
  {
    "role": "file",
    "lines": [
      "== COS_Set =="
    ],
    "stanza": 929
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "introduce sets and set membership",
    "section_category": "MATH",
    "section_index": 27,
    "stanza": 930
  },
  {
    "role": "code",
    "lines": [
      "intro element;"
    ],
    "preprocessed": "intro element;",
    "code": "21001032111110032233",
    "parse": [
      "intro",
      "element"
    ],
    "spider": "&#xF123;&#xF113;&#xF129;&#xF11D;&#xF132;&#xF143;&#xF121;",
    "stanza": 931
  },
  {
    "role": "code",
    "lines": [
      "define element | ? x | ? lst | not | = (list-find-helper $lst $x (? y 0) 1) 0;"
    ],
    "preprocessed": "define element | ? x | ? lst | not | = (list-find-helper $lst $x (? y 0) 1) 0;",
    "code": "21101321111100312321100321001113123211003210010003123210131232113221010001302321001000302321001113221100321100113203321332032233",
    "parse": [
      "define",
      "element",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "lst",
          [
            -1,
            "not",
            [
              -1,
              "=",
              [
                "list-find-helper",
                [
                  -2,
                  "lst"
                ],
                [
                  -2,
                  "x"
                ],
                [
                  "?",
                  "y",
                  "0"
                ],
                "1"
              ],
              "0"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF129;&#xF11D;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF119;&#xF101;&#xF143;&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF127;&#xF112;&#xF100;&#xF143;&#xF126;&#xF119;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF13F;&#xF125;&#xF114;&#xF133;&#xF121;&#xF134;&#xF121;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 932
  },
  {
    "role": "code",
    "lines": [
      "element 0 (vector 0 4 8 3 5);"
    ],
    "preprocessed": "element 0 (vector 0 4 8 3 5);",
    "code": "211111003203221000032032100321000321132101332233",
    "parse": [
      "element",
      "0",
      [
        "vector",
        "0",
        "4",
        "8",
        "3",
        "5"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF133;&#xF132;&#xF123;&#xF111;&#xF133;&#xF137;&#xF13B;&#xF136;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 933
  },
  {
    "role": "code",
    "lines": [
      "element 5 (vector 0 4 8 3 5);"
    ],
    "preprocessed": "element 5 (vector 0 4 8 3 5);",
    "code": "21111100321013221000032032100321000321132101332233",
    "parse": [
      "element",
      "5",
      [
        "vector",
        "0",
        "4",
        "8",
        "3",
        "5"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF138;&#xF132;&#xF123;&#xF111;&#xF133;&#xF137;&#xF13B;&#xF136;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 934
  },
  {
    "role": "code",
    "lines": [
      "element 3 (vector 0 4 8 3 5);"
    ],
    "preprocessed": "element 3 (vector 0 4 8 3 5);",
    "code": "2111110032113221000032032100321000321132101332233",
    "parse": [
      "element",
      "3",
      [
        "vector",
        "0",
        "4",
        "8",
        "3",
        "5"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF136;&#xF132;&#xF123;&#xF111;&#xF133;&#xF137;&#xF13B;&#xF136;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 935
  },
  {
    "role": "code",
    "lines": [
      "element 3 (vector 3 5 1 0 9);"
    ],
    "preprocessed": "element 3 (vector 3 5 1 0 9);",
    "code": "21111100321132210000321132101321320321001332233",
    "parse": [
      "element",
      "3",
      [
        "vector",
        "3",
        "5",
        "1",
        "0",
        "9"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF136;&#xF132;&#xF123;&#xF111;&#xF136;&#xF138;&#xF134;&#xF133;&#xF13C;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 936
  },
  {
    "role": "code",
    "lines": [
      "element 1 (vector 3 5 1 0 9);"
    ],
    "preprocessed": "element 1 (vector 3 5 1 0 9);",
    "code": "2111110032132210000321132101321320321001332233",
    "parse": [
      "element",
      "1",
      [
        "vector",
        "3",
        "5",
        "1",
        "0",
        "9"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF134;&#xF132;&#xF123;&#xF111;&#xF136;&#xF138;&#xF134;&#xF133;&#xF13C;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 937
  },
  {
    "role": "code",
    "lines": [
      "element 5 (vector 3 5 1 0 9);"
    ],
    "preprocessed": "element 5 (vector 3 5 1 0 9);",
    "code": "211111003210132210000321132101321320321001332233",
    "parse": [
      "element",
      "5",
      [
        "vector",
        "3",
        "5",
        "1",
        "0",
        "9"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF138;&#xF132;&#xF123;&#xF111;&#xF136;&#xF138;&#xF134;&#xF133;&#xF13C;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 938
  },
  {
    "role": "code",
    "lines": [
      "element 5 (vector 8 1 6 2 0 5);"
    ],
    "preprocessed": "element 5 (vector 8 1 6 2 0 5);",
    "code": "21111100321013221000032100032132110321032032101332233",
    "parse": [
      "element",
      "5",
      [
        "vector",
        "8",
        "1",
        "6",
        "2",
        "0",
        "5"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF138;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF134;&#xF139;&#xF135;&#xF133;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 939
  },
  {
    "role": "code",
    "lines": [
      "element 6 (vector 8 1 6 2 0 5);"
    ],
    "preprocessed": "element 6 (vector 8 1 6 2 0 5);",
    "code": "21111100321103221000032100032132110321032032101332233",
    "parse": [
      "element",
      "6",
      [
        "vector",
        "8",
        "1",
        "6",
        "2",
        "0",
        "5"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF139;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF134;&#xF139;&#xF135;&#xF133;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 940
  },
  {
    "role": "code",
    "lines": [
      "element 5 (vector 8 1 6 2 0 5);"
    ],
    "preprocessed": "element 5 (vector 8 1 6 2 0 5);",
    "code": "21111100321013221000032100032132110321032032101332233",
    "parse": [
      "element",
      "5",
      [
        "vector",
        "8",
        "1",
        "6",
        "2",
        "0",
        "5"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF138;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF134;&#xF139;&#xF135;&#xF133;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 941
  },
  {
    "role": "code",
    "lines": [
      "element 5 (vector 5 3 8 6 2 9);"
    ],
    "preprocessed": "element 5 (vector 5 3 8 6 2 9);",
    "code": "211111003210132210000321013211321000321103210321001332233",
    "parse": [
      "element",
      "5",
      [
        "vector",
        "5",
        "3",
        "8",
        "6",
        "2",
        "9"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF138;&#xF132;&#xF123;&#xF111;&#xF138;&#xF136;&#xF13B;&#xF139;&#xF135;&#xF13C;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 942
  },
  {
    "role": "code",
    "lines": [
      "element 5 (vector 5 3 8 6 2 9);"
    ],
    "preprocessed": "element 5 (vector 5 3 8 6 2 9);",
    "code": "211111003210132210000321013211321000321103210321001332233",
    "parse": [
      "element",
      "5",
      [
        "vector",
        "5",
        "3",
        "8",
        "6",
        "2",
        "9"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF138;&#xF132;&#xF123;&#xF111;&#xF138;&#xF136;&#xF13B;&#xF139;&#xF135;&#xF13C;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 943
  },
  {
    "role": "code",
    "lines": [
      "element 9 (vector 5 3 8 6 2 9);"
    ],
    "preprocessed": "element 9 (vector 5 3 8 6 2 9);",
    "code": "2111110032100132210000321013211321000321103210321001332233",
    "parse": [
      "element",
      "9",
      [
        "vector",
        "5",
        "3",
        "8",
        "6",
        "2",
        "9"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF13C;&#xF132;&#xF123;&#xF111;&#xF138;&#xF136;&#xF13B;&#xF139;&#xF135;&#xF13C;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 944
  },
  {
    "role": "code",
    "lines": [
      "element 7 (vector 1 7 2 6 4 5);"
    ],
    "preprocessed": "element 7 (vector 1 7 2 6 4 5);",
    "code": "211111003211132210000321321113210321103210032101332233",
    "parse": [
      "element",
      "7",
      [
        "vector",
        "1",
        "7",
        "2",
        "6",
        "4",
        "5"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF13A;&#xF132;&#xF123;&#xF111;&#xF134;&#xF13A;&#xF135;&#xF139;&#xF137;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 945
  },
  {
    "role": "code",
    "lines": [
      "element 2 (vector 1 7 2 6 4 5);"
    ],
    "preprocessed": "element 2 (vector 1 7 2 6 4 5);",
    "code": "21111100321032210000321321113210321103210032101332233",
    "parse": [
      "element",
      "2",
      [
        "vector",
        "1",
        "7",
        "2",
        "6",
        "4",
        "5"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF135;&#xF132;&#xF123;&#xF111;&#xF134;&#xF13A;&#xF135;&#xF139;&#xF137;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 946
  },
  {
    "role": "code",
    "lines": [
      "element 6 (vector 1 7 2 6 4 5);"
    ],
    "preprocessed": "element 6 (vector 1 7 2 6 4 5);",
    "code": "211111003211032210000321321113210321103210032101332233",
    "parse": [
      "element",
      "6",
      [
        "vector",
        "1",
        "7",
        "2",
        "6",
        "4",
        "5"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF139;&#xF132;&#xF123;&#xF111;&#xF134;&#xF13A;&#xF135;&#xF139;&#xF137;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 947
  },
  {
    "role": "code",
    "lines": [
      "not | element 7 (vector 8 3 9 6);"
    ],
    "preprocessed": "not | element 7 (vector 8 3 9 6);",
    "code": "21013123211111003211132210000321000321132100132110332233",
    "parse": [
      "not",
      [
        -1,
        "element",
        "7",
        [
          "vector",
          "8",
          "3",
          "9",
          "6"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF129;&#xF11D;&#xF13A;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF136;&#xF13C;&#xF139;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 948
  },
  {
    "role": "code",
    "lines": [
      "not | element 1 (vector 8 6 3 5 4);"
    ],
    "preprocessed": "not | element 1 (vector 8 6 3 5 4);",
    "code": "2101312321111100321322100003210003211032113210132100332233",
    "parse": [
      "not",
      [
        -1,
        "element",
        "1",
        [
          "vector",
          "8",
          "6",
          "3",
          "5",
          "4"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF129;&#xF11D;&#xF134;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF139;&#xF136;&#xF138;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 949
  },
  {
    "role": "code",
    "lines": [
      "not | element 2 (vector 9 5 6);"
    ],
    "preprocessed": "not | element 2 (vector 9 5 6);",
    "code": "21013123211111003210322100003210013210132110332233",
    "parse": [
      "not",
      [
        -1,
        "element",
        "2",
        [
          "vector",
          "9",
          "5",
          "6"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF129;&#xF11D;&#xF135;&#xF132;&#xF123;&#xF111;&#xF13C;&#xF138;&#xF139;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 950
  },
  {
    "role": "code",
    "lines": [
      "not | element 5 (vector 2 0 7);"
    ],
    "preprocessed": "not | element 5 (vector 2 0 7);",
    "code": "21013123211111003210132210000321032032111332233",
    "parse": [
      "not",
      [
        -1,
        "element",
        "5",
        [
          "vector",
          "2",
          "0",
          "7"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF129;&#xF11D;&#xF138;&#xF132;&#xF123;&#xF111;&#xF135;&#xF133;&#xF13A;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 951
  },
  {
    "role": "code",
    "lines": [
      "not | element 6 (vector 3 5);"
    ],
    "preprocessed": "not | element 6 (vector 3 5);",
    "code": "21013123211111003211032210000321132101332233",
    "parse": [
      "not",
      [
        -1,
        "element",
        "6",
        [
          "vector",
          "3",
          "5"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF129;&#xF11D;&#xF139;&#xF132;&#xF123;&#xF111;&#xF136;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 952
  },
  {
    "role": "comment",
    "lines": [
      "# rules for set equality"
    ],
    "stanza": 953
  },
  {
    "role": "code",
    "lines": [
      "define set-subset | ? x | ? y | if (> (list-length $x) 0) (and (element (head $x) $y) (set-subset (tail $x) $y)) (true);"
    ],
    "preprocessed": "define set-subset | ? x | ? y | if (> (list-length $x) 0) (and (element (head $x) $y) (set-subset (tail $x) $y)) (true);",
    "code": "21101321111101312321100321001113123211003211001131232111132210032210010103023210011133203322110322111110032210001113023210011133023211001133221111101322100100130232100111330232110011333221332233",
    "parse": [
      "define",
      "set-subset",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              ">",
              [
                "list-length",
                [
                  -2,
                  "x"
                ]
              ],
              "0"
            ],
            [
              "and",
              [
                "element",
                [
                  "head",
                  [
                    -2,
                    "x"
                  ]
                ],
                [
                  -2,
                  "y"
                ]
              ],
              [
                "set-subset",
                [
                  "tail",
                  [
                    -2,
                    "x"
                  ]
                ],
                [
                  -2,
                  "y"
                ]
              ]
            ],
            [
              "true"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF129;&#xF11E;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF139;&#xF132;&#xF129;&#xF11D;&#xF132;&#xF126;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF132;&#xF129;&#xF11E;&#xF132;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF121;&#xF132;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 954
  },
  {
    "role": "code",
    "lines": [
      "define set= | ? x | ? y | and (set-subset $x $y) (set-subset $y $x);"
    ],
    "preprocessed": "define set= | ? x | ? y | and (set-subset $x $y) (set-subset $y $x);",
    "code": "2110132111111031232110032100111312321100321100113123211032211111013023210011130232110011332211111013023211001130232100111332233",
    "parse": [
      "define",
      "set=",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "and",
            [
              "set-subset",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ],
            [
              "set-subset",
              [
                -2,
                "y"
              ],
              [
                -2,
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF129;&#xF11F;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF139;&#xF132;&#xF129;&#xF11E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF132;&#xF129;&#xF11E;&#xF100;&#xF143;&#xF125;&#xF114;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 955
  },
  {
    "role": "code",
    "lines": [
      "set= (vector 1 5 9) (vector 5 1 9);"
    ],
    "preprocessed": "set= (vector 1 5 9) (vector 5 1 9);",
    "code": "21111110322100003213210132100133221000032101321321001332233",
    "parse": [
      "set=",
      [
        "vector",
        "1",
        "5",
        "9"
      ],
      [
        "vector",
        "5",
        "1",
        "9"
      ]
    ],
    "spider": "&#xF129;&#xF11F;&#xF132;&#xF123;&#xF111;&#xF134;&#xF138;&#xF13C;&#xF121;&#xF132;&#xF123;&#xF111;&#xF138;&#xF134;&#xF13C;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 956
  },
  {
    "role": "code",
    "lines": [
      "set= (vector 1 5 9) (vector 9 1 5);"
    ],
    "preprocessed": "set= (vector 1 5 9) (vector 9 1 5);",
    "code": "21111110322100003213210132100133221000032100132132101332233",
    "parse": [
      "set=",
      [
        "vector",
        "1",
        "5",
        "9"
      ],
      [
        "vector",
        "9",
        "1",
        "5"
      ]
    ],
    "spider": "&#xF129;&#xF11F;&#xF132;&#xF123;&#xF111;&#xF134;&#xF138;&#xF13C;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13C;&#xF134;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 957
  },
  {
    "role": "code",
    "lines": [
      "not | set= (vector 1 5 9) (vector 1 5);"
    ],
    "preprocessed": "not | set= (vector 1 5 9) (vector 1 5);",
    "code": "2101312321111110322100003213210132100133221000032132101332233",
    "parse": [
      "not",
      [
        -1,
        "set=",
        [
          "vector",
          "1",
          "5",
          "9"
        ],
        [
          "vector",
          "1",
          "5"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF129;&#xF11F;&#xF132;&#xF123;&#xF111;&#xF134;&#xF138;&#xF13C;&#xF121;&#xF132;&#xF123;&#xF111;&#xF134;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 958
  },
  {
    "role": "comment",
    "lines": [
      "# let's go leave ourselves wide open to Russell's paradox",
      "# ... by using characteristic functions",
      "# ... since it doesn't really matter for communication purposes",
      "# ... and so far this is just used/tested with sets of integers really"
    ],
    "stanza": 959
  },
  {
    "role": "code",
    "lines": [
      "element 5 (all (? x | = (+ $x 10) 15));"
    ],
    "preprocessed": "element 5 (all (? x | = (+ $x 10) 15));",
    "code": "211111003210132211110322110032100111312321132210103023210011132101033211113332233",
    "parse": [
      "element",
      "5",
      [
        "all",
        [
          "?",
          "x",
          [
            -1,
            "=",
            [
              "+",
              [
                -2,
                "x"
              ],
              "10"
            ],
            "15"
          ]
        ]
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF138;&#xF132;&#xF123;&#xF11F;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF136;&#xF132;&#xF13D;&#xF100;&#xF143;&#xF124;&#xF118;&#xF13D;&#xF121;&#xF142;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 960
  },
  {
    "role": "code",
    "lines": [
      "element 3 (all (? x | = (* $x 3) (+ $x 6)));"
    ],
    "preprocessed": "element 3 (all (? x | = (* $x 3) (+ $x 6)));",
    "code": "211111003211322111103221100321001113123211322100130232100111321133221010302321001113211033332233",
    "parse": [
      "element",
      "3",
      [
        "all",
        [
          "?",
          "x",
          [
            -1,
            "=",
            [
              "*",
              [
                -2,
                "x"
              ],
              "3"
            ],
            [
              "+",
              [
                -2,
                "x"
              ],
              "6"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF136;&#xF132;&#xF123;&#xF11F;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF136;&#xF132;&#xF13C;&#xF100;&#xF143;&#xF124;&#xF118;&#xF136;&#xF121;&#xF132;&#xF13D;&#xF100;&#xF143;&#xF124;&#xF118;&#xF139;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 961
  },
  {
    "role": "code",
    "lines": [
      "define empty-set | vector;"
    ],
    "preprocessed": "define empty-set | vector;",
    "code": "21101321111111312321000032233",
    "parse": [
      "define",
      "empty-set",
      [
        -1,
        "vector"
      ]
    ],
    "spider": "&#xF140;&#xF129;&#xF120;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF143;&#xF121;",
    "stanza": 962
  },
  {
    "role": "code",
    "lines": [
      "element 0 $natural-set;"
    ],
    "preprocessed": "element 0 $natural-set;",
    "code": "21111100320302321111132233",
    "parse": [
      "element",
      "0",
      [
        -2,
        "natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF133;&#xF100;&#xF143;&#xF123;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 963
  },
  {
    "role": "code",
    "lines": [
      "forall (? x | => (element $x $natural-set) (element (+ $x 1) $natural-set));"
    ],
    "preprocessed": "forall (? x | => (element $x $natural-set) (element (+ $x 1) $natural-set));",
    "code": "210011322110032100111312321111011322111110030232100111302321111133221111100322101030232100111321330232111113332233",
    "parse": [
      "forall",
      [
        "?",
        "x",
        [
          -1,
          "=>",
          [
            "element",
            [
              -2,
              "x"
            ],
            [
              -2,
              "natural-set"
            ]
          ],
          [
            "element",
            [
              "+",
              [
                -2,
                "x"
              ],
              "1"
            ],
            [
              -2,
              "natural-set"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF123;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF129;&#xF11C;&#xF132;&#xF129;&#xF11D;&#xF100;&#xF143;&#xF124;&#xF118;&#xF100;&#xF143;&#xF123;&#xF120;&#xF121;&#xF132;&#xF129;&#xF11D;&#xF132;&#xF13D;&#xF100;&#xF143;&#xF124;&#xF118;&#xF134;&#xF121;&#xF100;&#xF143;&#xF123;&#xF120;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 964
  },
  {
    "role": "code",
    "lines": [
      "element 1 $natural-set;"
    ],
    "preprocessed": "element 1 $natural-set;",
    "code": "21111100321302321111132233",
    "parse": [
      "element",
      "1",
      [
        -2,
        "natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF134;&#xF100;&#xF143;&#xF123;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 965
  },
  {
    "role": "code",
    "lines": [
      "element 2 $natural-set;"
    ],
    "preprocessed": "element 2 $natural-set;",
    "code": "211111003210302321111132233",
    "parse": [
      "element",
      "2",
      [
        -2,
        "natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF135;&#xF100;&#xF143;&#xF123;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 966
  },
  {
    "role": "code",
    "lines": [
      "element 3 $natural-set;"
    ],
    "preprocessed": "element 3 $natural-set;",
    "code": "211111003211302321111132233",
    "parse": [
      "element",
      "3",
      [
        -2,
        "natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF136;&#xF100;&#xF143;&#xF123;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 967
  },
  {
    "role": "code",
    "lines": [
      "element 4 $natural-set;"
    ],
    "preprocessed": "element 4 $natural-set;",
    "code": "2111110032100302321111132233",
    "parse": [
      "element",
      "4",
      [
        -2,
        "natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF137;&#xF100;&#xF143;&#xF123;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 968
  },
  {
    "role": "code",
    "lines": [
      "element 5 $natural-set;"
    ],
    "preprocessed": "element 5 $natural-set;",
    "code": "2111110032101302321111132233",
    "parse": [
      "element",
      "5",
      [
        -2,
        "natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF138;&#xF100;&#xF143;&#xF123;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 969
  },
  {
    "role": "code",
    "lines": [
      "element 6 $natural-set;"
    ],
    "preprocessed": "element 6 $natural-set;",
    "code": "2111110032110302321111132233",
    "parse": [
      "element",
      "6",
      [
        -2,
        "natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF139;&#xF100;&#xF143;&#xF123;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 970
  },
  {
    "role": "code",
    "lines": [
      "element 7 $natural-set;"
    ],
    "preprocessed": "element 7 $natural-set;",
    "code": "2111110032111302321111132233",
    "parse": [
      "element",
      "7",
      [
        -2,
        "natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF13A;&#xF100;&#xF143;&#xF123;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 971
  },
  {
    "role": "code",
    "lines": [
      "element 8 $natural-set;"
    ],
    "preprocessed": "element 8 $natural-set;",
    "code": "21111100321000302321111132233",
    "parse": [
      "element",
      "8",
      [
        -2,
        "natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF13B;&#xF100;&#xF143;&#xF123;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 972
  },
  {
    "role": "code",
    "lines": [
      "element 9 $natural-set;"
    ],
    "preprocessed": "element 9 $natural-set;",
    "code": "21111100321001302321111132233",
    "parse": [
      "element",
      "9",
      [
        -2,
        "natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF13C;&#xF100;&#xF143;&#xF123;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 973
  },
  {
    "role": "code",
    "lines": [
      "define boolean-set | vector $true $false;"
    ],
    "preprocessed": "define boolean-set | vector $true $false;",
    "code": "211013210000000312321000030232130232032233",
    "parse": [
      "define",
      "boolean-set",
      [
        -1,
        "vector",
        [
          -2,
          "true"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12A;&#xF111;&#xF101;&#xF143;&#xF123;&#xF111;&#xF100;&#xF143;&#xF134;&#xF100;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 974
  },
  {
    "role": "code",
    "lines": [
      "element $true $boolean-set;"
    ],
    "preprocessed": "element $true $boolean-set;",
    "code": "21111100302321302321000000032233",
    "parse": [
      "element",
      [
        -2,
        "true"
      ],
      [
        -2,
        "boolean-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF100;&#xF143;&#xF134;&#xF100;&#xF143;&#xF12A;&#xF111;&#xF132;&#xF143;&#xF121;",
    "stanza": 975
  },
  {
    "role": "code",
    "lines": [
      "element $false $boolean-set;"
    ],
    "preprocessed": "element $false $boolean-set;",
    "code": "21111100302320302321000000032233",
    "parse": [
      "element",
      [
        -2,
        "false"
      ],
      [
        -2,
        "boolean-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF100;&#xF143;&#xF133;&#xF100;&#xF143;&#xF12A;&#xF111;&#xF132;&#xF143;&#xF121;",
    "stanza": 976
  },
  {
    "role": "comment",
    "lines": [
      "# actually, to simplify semantics elsewhere, true and false",
      "# are now just 0 and 1 so they are not distinct from ints"
    ],
    "stanza": 977
  },
  {
    "role": "code",
    "lines": [
      "define even-natural-set | all | ? x | exists | ? y | and (element $y $natural-set) (= (* 2 $y) $x);"
    ],
    "preprocessed": "define even-natural-set | all | ? x | exists | ? y | and (element $y $natural-set) (= (* 2 $y) $x);",
    "code": "2110132100000013123211110312321100321001113123210100312321100321100113123211032211111003023211001130232111113322113221001321030232110011330232100111332233",
    "parse": [
      "define",
      "even-natural-set",
      [
        -1,
        "all",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "exists",
            [
              -1,
              "?",
              "y",
              [
                -1,
                "and",
                [
                  "element",
                  [
                    -2,
                    "y"
                  ],
                  [
                    -2,
                    "natural-set"
                  ]
                ],
                [
                  "=",
                  [
                    "*",
                    "2",
                    [
                      -2,
                      "y"
                    ]
                  ],
                  [
                    -2,
                    "x"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12A;&#xF112;&#xF101;&#xF143;&#xF123;&#xF11F;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF123;&#xF115;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF139;&#xF132;&#xF129;&#xF11D;&#xF100;&#xF143;&#xF125;&#xF114;&#xF100;&#xF143;&#xF123;&#xF120;&#xF121;&#xF132;&#xF136;&#xF132;&#xF13C;&#xF135;&#xF100;&#xF143;&#xF125;&#xF114;&#xF121;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 978
  },
  {
    "role": "code",
    "lines": [
      "element 0 $natural-set;"
    ],
    "preprocessed": "element 0 $natural-set;",
    "code": "21111100320302321111132233",
    "parse": [
      "element",
      "0",
      [
        -2,
        "natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF133;&#xF100;&#xF143;&#xF123;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 979
  },
  {
    "role": "code",
    "lines": [
      "element 0 $even-natural-set;"
    ],
    "preprocessed": "element 0 $even-natural-set;",
    "code": "21111100320302321000000132233",
    "parse": [
      "element",
      "0",
      [
        -2,
        "even-natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF133;&#xF100;&#xF143;&#xF12A;&#xF112;&#xF132;&#xF143;&#xF121;",
    "stanza": 980
  },
  {
    "role": "code",
    "lines": [
      "element 1 $natural-set;"
    ],
    "preprocessed": "element 1 $natural-set;",
    "code": "21111100321302321111132233",
    "parse": [
      "element",
      "1",
      [
        -2,
        "natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF134;&#xF100;&#xF143;&#xF123;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 981
  },
  {
    "role": "code",
    "lines": [
      "not | element 1 $even-natural-set;"
    ],
    "preprocessed": "not | element 1 $even-natural-set;",
    "code": "2101312321111100321302321000000132233",
    "parse": [
      "not",
      [
        -1,
        "element",
        "1",
        [
          -2,
          "even-natural-set"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF129;&#xF11D;&#xF134;&#xF100;&#xF143;&#xF12A;&#xF112;&#xF132;&#xF143;&#xF121;",
    "stanza": 982
  },
  {
    "role": "code",
    "lines": [
      "element 2 $natural-set;"
    ],
    "preprocessed": "element 2 $natural-set;",
    "code": "211111003210302321111132233",
    "parse": [
      "element",
      "2",
      [
        -2,
        "natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF135;&#xF100;&#xF143;&#xF123;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 983
  },
  {
    "role": "code",
    "lines": [
      "element 2 $even-natural-set;"
    ],
    "preprocessed": "element 2 $even-natural-set;",
    "code": "211111003210302321000000132233",
    "parse": [
      "element",
      "2",
      [
        -2,
        "even-natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF135;&#xF100;&#xF143;&#xF12A;&#xF112;&#xF132;&#xF143;&#xF121;",
    "stanza": 984
  },
  {
    "role": "code",
    "lines": [
      "element 3 $natural-set;"
    ],
    "preprocessed": "element 3 $natural-set;",
    "code": "211111003211302321111132233",
    "parse": [
      "element",
      "3",
      [
        -2,
        "natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF136;&#xF100;&#xF143;&#xF123;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 985
  },
  {
    "role": "code",
    "lines": [
      "not | element 3 $even-natural-set;"
    ],
    "preprocessed": "not | element 3 $even-natural-set;",
    "code": "21013123211111003211302321000000132233",
    "parse": [
      "not",
      [
        -1,
        "element",
        "3",
        [
          -2,
          "even-natural-set"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF129;&#xF11D;&#xF136;&#xF100;&#xF143;&#xF12A;&#xF112;&#xF132;&#xF143;&#xF121;",
    "stanza": 986
  },
  {
    "role": "code",
    "lines": [
      "element 4 $natural-set;"
    ],
    "preprocessed": "element 4 $natural-set;",
    "code": "2111110032100302321111132233",
    "parse": [
      "element",
      "4",
      [
        -2,
        "natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF137;&#xF100;&#xF143;&#xF123;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 987
  },
  {
    "role": "code",
    "lines": [
      "element 4 $even-natural-set;"
    ],
    "preprocessed": "element 4 $even-natural-set;",
    "code": "2111110032100302321000000132233",
    "parse": [
      "element",
      "4",
      [
        -2,
        "even-natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF137;&#xF100;&#xF143;&#xF12A;&#xF112;&#xF132;&#xF143;&#xF121;",
    "stanza": 988
  },
  {
    "role": "code",
    "lines": [
      "element 5 $natural-set;"
    ],
    "preprocessed": "element 5 $natural-set;",
    "code": "2111110032101302321111132233",
    "parse": [
      "element",
      "5",
      [
        -2,
        "natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF138;&#xF100;&#xF143;&#xF123;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 989
  },
  {
    "role": "code",
    "lines": [
      "not | element 5 $even-natural-set;"
    ],
    "preprocessed": "not | element 5 $even-natural-set;",
    "code": "210131232111110032101302321000000132233",
    "parse": [
      "not",
      [
        -1,
        "element",
        "5",
        [
          -2,
          "even-natural-set"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF129;&#xF11D;&#xF138;&#xF100;&#xF143;&#xF12A;&#xF112;&#xF132;&#xF143;&#xF121;",
    "stanza": 990
  },
  {
    "role": "code",
    "lines": [
      "element 6 $natural-set;"
    ],
    "preprocessed": "element 6 $natural-set;",
    "code": "2111110032110302321111132233",
    "parse": [
      "element",
      "6",
      [
        -2,
        "natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF139;&#xF100;&#xF143;&#xF123;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 991
  },
  {
    "role": "code",
    "lines": [
      "element 6 $even-natural-set;"
    ],
    "preprocessed": "element 6 $even-natural-set;",
    "code": "2111110032110302321000000132233",
    "parse": [
      "element",
      "6",
      [
        -2,
        "even-natural-set"
      ]
    ],
    "spider": "&#xF129;&#xF11D;&#xF139;&#xF100;&#xF143;&#xF12A;&#xF112;&#xF132;&#xF143;&#xF121;",
    "stanza": 992
  },
  {
    "role": "file",
    "lines": [
      "== COS_Graph =="
    ],
    "stanza": 993
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "introduce graph structures",
    "section_category": "MATH",
    "section_index": 28,
    "stanza": 994
  },
  {
    "role": "code",
    "lines": [
      "define make-graph | lambda (nodes links) (pair $nodes $links);"
    ],
    "preprocessed": "define make-graph | lambda (nodes links) (pair $nodes $links);",
    "code": "21101321000001031232110103221000001132100001003322100111030232100000113023210000100332233",
    "parse": [
      "define",
      "make-graph",
      [
        -1,
        "lambda",
        [
          "nodes",
          "links"
        ],
        [
          "pair",
          [
            -2,
            "nodes"
          ],
          [
            -2,
            "links"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12A;&#xF113;&#xF101;&#xF143;&#xF123;&#xF11B;&#xF132;&#xF12A;&#xF114;&#xF12A;&#xF115;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF100;&#xF143;&#xF12A;&#xF114;&#xF100;&#xF143;&#xF12A;&#xF115;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 995
  },
  {
    "role": "code",
    "lines": [
      "define test-graph | make-graph (vector 1 2 3 4) (vector (vector 1 2) (vector 2 3) (vector 1 4));"
    ],
    "preprocessed": "define test-graph | make-graph (vector 1 2 3 4) (vector (vector 1 2) (vector 2 3) (vector 1 4));",
    "code": "211013210000101312321000001032210000321321032113210033221000032210000321321033221000032103211332210000321321003332233",
    "parse": [
      "define",
      "test-graph",
      [
        -1,
        "make-graph",
        [
          "vector",
          "1",
          "2",
          "3",
          "4"
        ],
        [
          "vector",
          [
            "vector",
            "1",
            "2"
          ],
          [
            "vector",
            "2",
            "3"
          ],
          [
            "vector",
            "1",
            "4"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12A;&#xF116;&#xF101;&#xF143;&#xF12A;&#xF113;&#xF132;&#xF123;&#xF111;&#xF134;&#xF135;&#xF136;&#xF137;&#xF121;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF134;&#xF135;&#xF121;&#xF132;&#xF123;&#xF111;&#xF135;&#xF136;&#xF121;&#xF132;&#xF123;&#xF111;&#xF134;&#xF137;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 996
  },
  {
    "role": "code",
    "lines": [
      "define graph-linked | lambda (g n1 n2) (exists | ? idx | if (and (>= $idx 0) (< $idx (list-length | list-ref $g 1))) (list= (list-ref (list-ref $g 1) $idx) (vector $n1 $n2)) $false);"
    ],
    "preprocessed": "define graph-linked | lambda (g n1 n2) (exists | ? idx | if (and (>= $idx 0) (< $idx (list-length | list-ref $g 1))) (list= (list-ref (list-ref $g 1) $idx) (vector $n1 $n2)) $false);",
    "code": "2110132100001103123211010322100001113210001000321000100133221010031232110032101010031232111132211032211111030232101010032033221030232101010032210010103123210010113023210000111321333322100110132210010113221001011302321000011132133023210101003322100003023210001000302321000100133302320332233",
    "parse": [
      "define",
      "graph-linked",
      [
        -1,
        "lambda",
        [
          "g",
          "n1",
          "n2"
        ],
        [
          "exists",
          [
            -1,
            "?",
            "idx",
            [
              -1,
              "if",
              [
                "and",
                [
                  ">=",
                  [
                    -2,
                    "idx"
                  ],
                  "0"
                ],
                [
                  "<",
                  [
                    -2,
                    "idx"
                  ],
                  [
                    "list-length",
                    [
                      -1,
                      "list-ref",
                      [
                        -2,
                        "g"
                      ],
                      "1"
                    ]
                  ]
                ]
              ],
              [
                "list=",
                [
                  "list-ref",
                  [
                    "list-ref",
                    [
                      -2,
                      "g"
                    ],
                    "1"
                  ],
                  [
                    -2,
                    "idx"
                  ]
                ],
                [
                  "vector",
                  [
                    -2,
                    "n1"
                  ],
                  [
                    -2,
                    "n2"
                  ]
                ]
              ],
              [
                -2,
                "false"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12A;&#xF117;&#xF101;&#xF143;&#xF123;&#xF11B;&#xF132;&#xF12A;&#xF118;&#xF12A;&#xF119;&#xF12A;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF115;&#xF101;&#xF143;&#xF13F;&#xF127;&#xF115;&#xF101;&#xF143;&#xF142;&#xF132;&#xF139;&#xF132;&#xF125;&#xF11F;&#xF100;&#xF143;&#xF127;&#xF115;&#xF133;&#xF121;&#xF132;&#xF135;&#xF100;&#xF143;&#xF127;&#xF115;&#xF132;&#xF126;&#xF11B;&#xF101;&#xF143;&#xF126;&#xF11C;&#xF100;&#xF143;&#xF12A;&#xF118;&#xF134;&#xF121;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11E;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF126;&#xF11C;&#xF100;&#xF143;&#xF12A;&#xF118;&#xF134;&#xF121;&#xF100;&#xF143;&#xF127;&#xF115;&#xF121;&#xF132;&#xF123;&#xF111;&#xF100;&#xF143;&#xF12A;&#xF119;&#xF100;&#xF143;&#xF12A;&#xF11A;&#xF121;&#xF121;&#xF100;&#xF143;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 997
  },
  {
    "role": "code",
    "lines": [
      "= (graph-linked $test-graph 1 2) (true);"
    ],
    "preprocessed": "= (graph-linked $test-graph 1 2) (true);",
    "code": "211322100001103023210000101321321033221332233",
    "parse": [
      "=",
      [
        "graph-linked",
        [
          -2,
          "test-graph"
        ],
        "1",
        "2"
      ],
      [
        "true"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF12A;&#xF117;&#xF100;&#xF143;&#xF12A;&#xF116;&#xF134;&#xF135;&#xF121;&#xF132;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 998
  },
  {
    "role": "code",
    "lines": [
      "= (graph-linked $test-graph 1 3) (false);"
    ],
    "preprocessed": "= (graph-linked $test-graph 1 3) (false);",
    "code": "211322100001103023210000101321321133220332233",
    "parse": [
      "=",
      [
        "graph-linked",
        [
          -2,
          "test-graph"
        ],
        "1",
        "3"
      ],
      [
        "false"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF12A;&#xF117;&#xF100;&#xF143;&#xF12A;&#xF116;&#xF134;&#xF136;&#xF121;&#xF132;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 999
  },
  {
    "role": "code",
    "lines": [
      "= (graph-linked $test-graph 2 4) (false);"
    ],
    "preprocessed": "= (graph-linked $test-graph 2 4) (false);",
    "code": "21132210000110302321000010132103210033220332233",
    "parse": [
      "=",
      [
        "graph-linked",
        [
          -2,
          "test-graph"
        ],
        "2",
        "4"
      ],
      [
        "false"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF12A;&#xF117;&#xF100;&#xF143;&#xF12A;&#xF116;&#xF135;&#xF137;&#xF121;&#xF132;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1000
  },
  {
    "role": "comment",
    "lines": [
      "# 'if' is used a lot in the next definition in place of and/or",
      "# this is because I haven't established lazy evaluation forms for and/or",
      "# so this very inefficient algorithm completely bogs down when combined",
      "# ... during testing with a dumb implementation for 'exists'."
    ],
    "stanza": 1001
  },
  {
    "role": "code",
    "lines": [
      "define graph-linked* | lambda (g n1 n2) (if (= $n1 $n2) $true (if (graph-linked $g $n1 $n2) $true (exists (? n3 | if (graph-linked $g $n1 $n3) (graph-linked* $g $n3 $n2) $false))));"
    ],
    "preprocessed": "define graph-linked* | lambda (g n1 n2) (if (= $n1 $n2) $true (if (graph-linked $g $n1 $n2) $true (exists (? n3 | if (graph-linked $g $n1 $n3) (graph-linked* $g $n3 $n2) $false))));",
    "code": "21101321000101031232110103221000011132100010003210001001332211113221130232100010003023210001001330232132211113221000011030232100001113023210001000302321000100133023213221010032211003210001011312321111322100001103023210000111302321000100030232100010113322100010103023210000111302321000101130232100010013302320333332233",
    "parse": [
      "define",
      "graph-linked*",
      [
        -1,
        "lambda",
        [
          "g",
          "n1",
          "n2"
        ],
        [
          "if",
          [
            "=",
            [
              -2,
              "n1"
            ],
            [
              -2,
              "n2"
            ]
          ],
          [
            -2,
            "true"
          ],
          [
            "if",
            [
              "graph-linked",
              [
                -2,
                "g"
              ],
              [
                -2,
                "n1"
              ],
              [
                -2,
                "n2"
              ]
            ],
            [
              -2,
              "true"
            ],
            [
              "exists",
              [
                "?",
                "n3",
                [
                  -1,
                  "if",
                  [
                    "graph-linked",
                    [
                      -2,
                      "g"
                    ],
                    [
                      -2,
                      "n1"
                    ],
                    [
                      -2,
                      "n3"
                    ]
                  ],
                  [
                    "graph-linked*",
                    [
                      -2,
                      "g"
                    ],
                    [
                      -2,
                      "n3"
                    ],
                    [
                      -2,
                      "n2"
                    ]
                  ],
                  [
                    -2,
                    "false"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12A;&#xF11B;&#xF101;&#xF143;&#xF123;&#xF11B;&#xF132;&#xF12A;&#xF118;&#xF12A;&#xF119;&#xF12A;&#xF11A;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF100;&#xF143;&#xF12A;&#xF119;&#xF100;&#xF143;&#xF12A;&#xF11A;&#xF121;&#xF100;&#xF143;&#xF134;&#xF132;&#xF142;&#xF132;&#xF12A;&#xF117;&#xF100;&#xF143;&#xF12A;&#xF118;&#xF100;&#xF143;&#xF12A;&#xF119;&#xF100;&#xF143;&#xF12A;&#xF11A;&#xF121;&#xF100;&#xF143;&#xF134;&#xF132;&#xF123;&#xF115;&#xF132;&#xF13F;&#xF12A;&#xF11C;&#xF101;&#xF143;&#xF142;&#xF132;&#xF12A;&#xF117;&#xF100;&#xF143;&#xF12A;&#xF118;&#xF100;&#xF143;&#xF12A;&#xF119;&#xF100;&#xF143;&#xF12A;&#xF11C;&#xF121;&#xF132;&#xF12A;&#xF11B;&#xF100;&#xF143;&#xF12A;&#xF118;&#xF100;&#xF143;&#xF12A;&#xF11C;&#xF100;&#xF143;&#xF12A;&#xF11A;&#xF121;&#xF100;&#xF143;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1002
  },
  {
    "role": "code",
    "lines": [
      "= (graph-linked* $test-graph 1 2) (true);"
    ],
    "preprocessed": "= (graph-linked* $test-graph 1 2) (true);",
    "code": "211322100010103023210000101321321033221332233",
    "parse": [
      "=",
      [
        "graph-linked*",
        [
          -2,
          "test-graph"
        ],
        "1",
        "2"
      ],
      [
        "true"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF12A;&#xF11B;&#xF100;&#xF143;&#xF12A;&#xF116;&#xF134;&#xF135;&#xF121;&#xF132;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1003
  },
  {
    "role": "code",
    "lines": [
      "= (graph-linked* $test-graph 1 3) (true);"
    ],
    "preprocessed": "= (graph-linked* $test-graph 1 3) (true);",
    "code": "211322100010103023210000101321321133221332233",
    "parse": [
      "=",
      [
        "graph-linked*",
        [
          -2,
          "test-graph"
        ],
        "1",
        "3"
      ],
      [
        "true"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF12A;&#xF11B;&#xF100;&#xF143;&#xF12A;&#xF116;&#xF134;&#xF136;&#xF121;&#xF132;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1004
  },
  {
    "role": "code",
    "lines": [
      "= (graph-linked* $test-graph 2 4) (false);"
    ],
    "preprocessed": "= (graph-linked* $test-graph 2 4) (false);",
    "code": "21132210001010302321000010132103210033220332233",
    "parse": [
      "=",
      [
        "graph-linked*",
        [
          -2,
          "test-graph"
        ],
        "2",
        "4"
      ],
      [
        "false"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF12A;&#xF11B;&#xF100;&#xF143;&#xF12A;&#xF116;&#xF135;&#xF137;&#xF121;&#xF132;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1005
  },
  {
    "role": "file",
    "lines": [
      "== COS_Begin =="
    ],
    "stanza": 1006
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "show how to execute a sequence of instructions",
    "section_category": "MATH",
    "section_index": 29,
    "stanza": 1007
  },
  {
    "role": "code",
    "lines": [
      "intro begin;"
    ],
    "preprocessed": "intro begin;",
    "code": "210010321000110032233",
    "parse": [
      "intro",
      "begin"
    ],
    "spider": "&#xF123;&#xF113;&#xF12A;&#xF11D;&#xF132;&#xF143;&#xF121;",
    "stanza": 1008
  },
  {
    "role": "code",
    "lines": [
      "define prev-translate $translate;"
    ],
    "preprocessed": "define prev-translate $translate;",
    "code": "21101321011111302321100132233",
    "parse": [
      "define",
      "prev-translate",
      [
        -2,
        "translate"
      ]
    ],
    "spider": "&#xF140;&#xF127;&#xF120;&#xF100;&#xF143;&#xF123;&#xF11A;&#xF132;&#xF143;&#xF121;",
    "stanza": 1009
  },
  {
    "role": "code",
    "lines": [
      "define reverse | ? x | if (>= (list-length $x) 1) (prepend (last $x) (reverse | except-last $x)) $x;"
    ],
    "preprocessed": "define reverse | ? x | if (>= (list-length $x) 1) (prepend (last $x) (reverse | except-last $x)) $x;",
    "code": "2110132100011013123211003210011131232111132211111032210010103023210011133213322100110032210111013023210011133221000110131232101111030232100111333023210011132233",
    "parse": [
      "define",
      "reverse",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            ">=",
            [
              "list-length",
              [
                -2,
                "x"
              ]
            ],
            "1"
          ],
          [
            "prepend",
            [
              "last",
              [
                -2,
                "x"
              ]
            ],
            [
              "reverse",
              [
                -1,
                "except-last",
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ],
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12A;&#xF11E;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF142;&#xF132;&#xF125;&#xF11F;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF126;&#xF11D;&#xF132;&#xF127;&#xF11E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12A;&#xF11E;&#xF101;&#xF143;&#xF127;&#xF11F;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 1010
  },
  {
    "role": "comment",
    "lines": [
      "# test reverse"
    ],
    "stanza": 1011
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 1 2 3) (reverse | vector 3 2 1);"
    ],
    "preprocessed": "list= (vector 1 2 3) (reverse | vector 3 2 1);",
    "code": "210011013221000032132103211332210001101312321000032113210321332233",
    "parse": [
      "list=",
      [
        "vector",
        "1",
        "2",
        "3"
      ],
      [
        "reverse",
        [
          -1,
          "vector",
          "3",
          "2",
          "1"
        ]
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF123;&#xF111;&#xF134;&#xF135;&#xF136;&#xF121;&#xF132;&#xF12A;&#xF11E;&#xF101;&#xF143;&#xF123;&#xF111;&#xF136;&#xF135;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1012
  },
  {
    "role": "code",
    "lines": [
      "define translate | let ((prev $prev-translate)) (? x | if (single? $x) (prev $x) (if (= (head $x) begin) (translate (vector (vector ? x (vector last (vector x))) (prepend vector (tail $x)))) (prev $x)));"
    ],
    "preprocessed": "define translate | let ((prev $prev-translate)) (? x | if (single? $x) (prev $x) (if (= (head $x) begin) (translate (vector (vector ? x (vector last (vector x))) (prepend vector (tail $x)))) (prev $x)));",
    "code": "211013211001312321011011322211000003023210111113332211003210011131232111132210101030232100111332211000003023210011133221111322113221000111302321001113321000110033221100132210000322100003211003210011132210000321011101322100003210011133332210011003210000322100100130232100111333332211000003023210011133332233",
    "parse": [
      "define",
      "translate",
      [
        -1,
        "let",
        [
          [
            "prev",
            [
              -2,
              "prev-translate"
            ]
          ]
        ],
        [
          "?",
          "x",
          [
            -1,
            "if",
            [
              "single?",
              [
                -2,
                "x"
              ]
            ],
            [
              "prev",
              [
                -2,
                "x"
              ]
            ],
            [
              "if",
              [
                "=",
                [
                  "head",
                  [
                    -2,
                    "x"
                  ]
                ],
                "begin"
              ],
              [
                "translate",
                [
                  "vector",
                  [
                    "vector",
                    "?",
                    "x",
                    [
                      "vector",
                      "last",
                      [
                        "vector",
                        "x"
                      ]
                    ]
                  ],
                  [
                    "prepend",
                    "vector",
                    [
                      "tail",
                      [
                        -2,
                        "x"
                      ]
                    ]
                  ]
                ]
              ],
              [
                "prev",
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF11A;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF128;&#xF111;&#xF100;&#xF143;&#xF127;&#xF120;&#xF121;&#xF121;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF142;&#xF132;&#xF124;&#xF11B;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF128;&#xF111;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF126;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF12A;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF11A;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF124;&#xF118;&#xF132;&#xF123;&#xF111;&#xF127;&#xF11E;&#xF132;&#xF123;&#xF111;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11D;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF128;&#xF111;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1013
  },
  {
    "role": "code",
    "lines": [
      "= (begin 1 7 2 4) 4;"
    ],
    "preprocessed": "= (begin 1 7 2 4) 4;",
    "code": "211322100011003213211132103210033210032233",
    "parse": [
      "=",
      [
        "begin",
        "1",
        "7",
        "2",
        "4"
      ],
      "4"
    ],
    "spider": "&#xF136;&#xF132;&#xF12A;&#xF11D;&#xF134;&#xF13A;&#xF135;&#xF137;&#xF121;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 1014
  },
  {
    "role": "code",
    "lines": [
      "= (begin (set! $demo:make-cell:x 88) (set! $demo:make-cell:x 6) (get! $demo:make-cell:x)) 6;"
    ],
    "preprocessed": "= (begin (set! $demo:make-cell:x 88) (set! $demo:make-cell:x 6) (get! $demo:make-cell:x)) 6;",
    "code": "211322100011003221110030232100000132101100033221110030232100000132110332211101302321000001333211032233",
    "parse": [
      "=",
      [
        "begin",
        [
          "set!",
          [
            -2,
            "demo:make-cell:x"
          ],
          "88"
        ],
        [
          "set!",
          [
            -2,
            "demo:make-cell:x"
          ],
          "6"
        ],
        [
          "get!",
          [
            -2,
            "demo:make-cell:x"
          ]
        ]
      ],
      "6"
    ],
    "spider": "&#xF136;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF123;&#xF11D;&#xF100;&#xF143;&#xF126;&#xF112;&#xF127;&#xF119;&#xF121;&#xF132;&#xF123;&#xF11D;&#xF100;&#xF143;&#xF126;&#xF112;&#xF139;&#xF121;&#xF132;&#xF123;&#xF11E;&#xF100;&#xF143;&#xF126;&#xF112;&#xF121;&#xF121;&#xF139;&#xF132;&#xF143;&#xF121;",
    "stanza": 1015
  },
  {
    "role": "code",
    "lines": [
      "= (begin (set! $demo:make-cell:y 88) (set! $demo:make-cell:x 6) (get! $demo:make-cell:y)) 88;"
    ],
    "preprocessed": "= (begin (set! $demo:make-cell:y 88) (set! $demo:make-cell:x 6) (get! $demo:make-cell:y)) 88;",
    "code": "2113221000110032211100302321000010321011000332211100302321000001321103322111013023210000103332101100032233",
    "parse": [
      "=",
      [
        "begin",
        [
          "set!",
          [
            -2,
            "demo:make-cell:y"
          ],
          "88"
        ],
        [
          "set!",
          [
            -2,
            "demo:make-cell:x"
          ],
          "6"
        ],
        [
          "get!",
          [
            -2,
            "demo:make-cell:y"
          ]
        ]
      ],
      "88"
    ],
    "spider": "&#xF136;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF123;&#xF11D;&#xF100;&#xF143;&#xF126;&#xF113;&#xF127;&#xF119;&#xF121;&#xF132;&#xF123;&#xF11D;&#xF100;&#xF143;&#xF126;&#xF112;&#xF139;&#xF121;&#xF132;&#xF123;&#xF11E;&#xF100;&#xF143;&#xF126;&#xF113;&#xF121;&#xF121;&#xF127;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 1016
  },
  {
    "role": "code",
    "lines": [
      "= (begin (set! $demo:make-cell:x 88) (set! $demo:make-cell:x 6) (get! $demo:make-cell:x) 4) 4;"
    ],
    "preprocessed": "= (begin (set! $demo:make-cell:x 88) (set! $demo:make-cell:x 6) (get! $demo:make-cell:x) 4) 4;",
    "code": "21132210001100322111003023210000013210110003322111003023210000013211033221110130232100000133210033210032233",
    "parse": [
      "=",
      [
        "begin",
        [
          "set!",
          [
            -2,
            "demo:make-cell:x"
          ],
          "88"
        ],
        [
          "set!",
          [
            -2,
            "demo:make-cell:x"
          ],
          "6"
        ],
        [
          "get!",
          [
            -2,
            "demo:make-cell:x"
          ]
        ],
        "4"
      ],
      "4"
    ],
    "spider": "&#xF136;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF123;&#xF11D;&#xF100;&#xF143;&#xF126;&#xF112;&#xF127;&#xF119;&#xF121;&#xF132;&#xF123;&#xF11D;&#xF100;&#xF143;&#xF126;&#xF112;&#xF139;&#xF121;&#xF132;&#xF123;&#xF11E;&#xF100;&#xF143;&#xF126;&#xF112;&#xF121;&#xF137;&#xF121;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 1017
  },
  {
    "role": "file",
    "lines": [
      "== COS_Hash =="
    ],
    "stanza": 1018
  },
  {
    "role": "comment",
    "lines": [
      "# this section needs a LOT more examples :-)",
      "# note that at the time of writing (h 1 2) is same as ((h) 1 2)"
    ],
    "section_description": "introduce environment/hashmap structure",
    "section_category": "MATH",
    "section_index": 30,
    "stanza": 1019
  },
  {
    "role": "code",
    "lines": [
      "define hash-add | lambda (h x y z) (if (equal $z $x) $y (h $z));"
    ],
    "preprocessed": "define hash-add | lambda (h x y z) (if (equal $z $x) $y (h $z));",
    "code": "211013210001110312321101032210001111321001113211001132110100332211113221000302321101003023210011133023211001132210001111302321101003332233",
    "parse": [
      "define",
      "hash-add",
      [
        -1,
        "lambda",
        [
          "h",
          "x",
          "y",
          "z"
        ],
        [
          "if",
          [
            "equal",
            [
              -2,
              "z"
            ],
            [
              -2,
              "x"
            ]
          ],
          [
            -2,
            "y"
          ],
          [
            "h",
            [
              -2,
              "z"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12A;&#xF11F;&#xF101;&#xF143;&#xF123;&#xF11B;&#xF132;&#xF12A;&#xF120;&#xF124;&#xF118;&#xF125;&#xF114;&#xF125;&#xF115;&#xF121;&#xF132;&#xF142;&#xF132;&#xF13B;&#xF100;&#xF143;&#xF125;&#xF115;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF100;&#xF143;&#xF125;&#xF114;&#xF132;&#xF12A;&#xF120;&#xF100;&#xF143;&#xF125;&#xF115;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1020
  },
  {
    "role": "code",
    "lines": [
      "define hash-ref | lambda (h x) (h $x);"
    ],
    "preprocessed": "define hash-ref | lambda (h x) (h $x);",
    "code": "2110132100100003123211010322100011113210011133221000111130232100111332233",
    "parse": [
      "define",
      "hash-ref",
      [
        -1,
        "lambda",
        [
          "h",
          "x"
        ],
        [
          "h",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12B;&#xF111;&#xF101;&#xF143;&#xF123;&#xF11B;&#xF132;&#xF12A;&#xF120;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12A;&#xF120;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1021
  },
  {
    "role": "code",
    "lines": [
      "define hash-null | ? x $undefined;"
    ],
    "preprocessed": "define hash-null | ? x $undefined;",
    "code": "211013210010001312321100321001113023210000032233",
    "parse": [
      "define",
      "hash-null",
      [
        -1,
        "?",
        "x",
        [
          -2,
          "undefined"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12B;&#xF112;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF100;&#xF143;&#xF124;&#xF111;&#xF132;&#xF143;&#xF121;",
    "stanza": 1022
  },
  {
    "role": "code",
    "lines": [
      "define hash-default | ? default | ? x $default;"
    ],
    "preprocessed": "define hash-default | ? default | ? x $default;",
    "code": "211013210010010312321100321001001131232110032100111302321001001132233",
    "parse": [
      "define",
      "hash-default",
      [
        -1,
        "?",
        "default",
        [
          -1,
          "?",
          "x",
          [
            -2,
            "default"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12B;&#xF113;&#xF101;&#xF143;&#xF13F;&#xF12B;&#xF114;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF100;&#xF143;&#xF12B;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 1023
  },
  {
    "role": "code",
    "lines": [
      "define test-hash | hash-add (hash-add $hash-null 3 2) 4 9;"
    ],
    "preprocessed": "define test-hash | hash-add (hash-add $hash-null 3 2) 4 9;",
    "code": "21101321001010031232100011103221000111030232100100013211321033210032100132233",
    "parse": [
      "define",
      "test-hash",
      [
        -1,
        "hash-add",
        [
          "hash-add",
          [
            -2,
            "hash-null"
          ],
          "3",
          "2"
        ],
        "4",
        "9"
      ]
    ],
    "spider": "&#xF140;&#xF12B;&#xF115;&#xF101;&#xF143;&#xF12A;&#xF11F;&#xF132;&#xF12A;&#xF11F;&#xF100;&#xF143;&#xF12B;&#xF112;&#xF136;&#xF135;&#xF121;&#xF137;&#xF13C;&#xF132;&#xF143;&#xF121;",
    "stanza": 1024
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref $test-hash 4) 9;"
    ],
    "preprocessed": "= (hash-ref $test-hash 4) 9;",
    "code": "21132210010000302321001010032100332100132233",
    "parse": [
      "=",
      [
        "hash-ref",
        [
          -2,
          "test-hash"
        ],
        "4"
      ],
      "9"
    ],
    "spider": "&#xF136;&#xF132;&#xF12B;&#xF111;&#xF100;&#xF143;&#xF12B;&#xF115;&#xF137;&#xF121;&#xF13C;&#xF132;&#xF143;&#xF121;",
    "stanza": 1025
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref $test-hash 3) 2;"
    ],
    "preprocessed": "= (hash-ref $test-hash 3) 2;",
    "code": "21132210010000302321001010032113321032233",
    "parse": [
      "=",
      [
        "hash-ref",
        [
          -2,
          "test-hash"
        ],
        "3"
      ],
      "2"
    ],
    "spider": "&#xF136;&#xF132;&#xF12B;&#xF111;&#xF100;&#xF143;&#xF12B;&#xF115;&#xF136;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 1026
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref $test-hash 8) $undefined;"
    ],
    "preprocessed": "= (hash-ref $test-hash 8) $undefined;",
    "code": "21132210010000302321001010032100033023210000032233",
    "parse": [
      "=",
      [
        "hash-ref",
        [
          -2,
          "test-hash"
        ],
        "8"
      ],
      [
        -2,
        "undefined"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF12B;&#xF111;&#xF100;&#xF143;&#xF12B;&#xF115;&#xF13B;&#xF121;&#xF100;&#xF143;&#xF124;&#xF111;&#xF132;&#xF143;&#xF121;",
    "stanza": 1027
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref $test-hash 15) $undefined;"
    ],
    "preprocessed": "= (hash-ref $test-hash 15) $undefined;",
    "code": "21132210010000302321001010032111133023210000032233",
    "parse": [
      "=",
      [
        "hash-ref",
        [
          -2,
          "test-hash"
        ],
        "15"
      ],
      [
        -2,
        "undefined"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF12B;&#xF111;&#xF100;&#xF143;&#xF12B;&#xF115;&#xF142;&#xF121;&#xF100;&#xF143;&#xF124;&#xF111;&#xF132;&#xF143;&#xF121;",
    "stanza": 1028
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref (hash-add $test-hash 15 33) 15) 33;"
    ],
    "preprocessed": "= (hash-ref (hash-add $test-hash 15 33) 15) 33;",
    "code": "2113221001000032210001110302321001010032111132100001332111133210000132233",
    "parse": [
      "=",
      [
        "hash-ref",
        [
          "hash-add",
          [
            -2,
            "test-hash"
          ],
          "15",
          "33"
        ],
        "15"
      ],
      "33"
    ],
    "spider": "&#xF136;&#xF132;&#xF12B;&#xF111;&#xF132;&#xF12A;&#xF11F;&#xF100;&#xF143;&#xF12B;&#xF115;&#xF142;&#xF124;&#xF112;&#xF121;&#xF142;&#xF121;&#xF124;&#xF112;&#xF132;&#xF143;&#xF121;",
    "stanza": 1029
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref $test-hash 15) $undefined;"
    ],
    "preprocessed": "= (hash-ref $test-hash 15) $undefined;",
    "code": "21132210010000302321001010032111133023210000032233",
    "parse": [
      "=",
      [
        "hash-ref",
        [
          -2,
          "test-hash"
        ],
        "15"
      ],
      [
        -2,
        "undefined"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF12B;&#xF111;&#xF100;&#xF143;&#xF12B;&#xF115;&#xF142;&#xF121;&#xF100;&#xF143;&#xF124;&#xF111;&#xF132;&#xF143;&#xF121;",
    "stanza": 1030
  },
  {
    "role": "code",
    "lines": [
      "define make-hash | ? x | if (list= $x (vector)) $hash-null (hash-add (make-hash (tail $x)) (first | head $x) (second | head $x));"
    ],
    "preprocessed": "define make-hash | ? x | if (list= $x (vector)) $hash-null (hash-add (make-hash (tail $x)) (first | head $x) (second | head $x));",
    "code": "211013210010101312321100321001113123211113221001101302321001113221000033302321001000132210001110322100101013221001001302321001113332210011113123210001113023210011133221010000312321000111302321001113332233",
    "parse": [
      "define",
      "make-hash",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "list=",
            [
              -2,
              "x"
            ],
            [
              "vector"
            ]
          ],
          [
            -2,
            "hash-null"
          ],
          [
            "hash-add",
            [
              "make-hash",
              [
                "tail",
                [
                  -2,
                  "x"
                ]
              ]
            ],
            [
              "first",
              [
                -1,
                "head",
                [
                  -2,
                  "x"
                ]
              ]
            ],
            [
              "second",
              [
                -1,
                "head",
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF142;&#xF132;&#xF126;&#xF11E;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF123;&#xF111;&#xF121;&#xF121;&#xF100;&#xF143;&#xF12B;&#xF112;&#xF132;&#xF12A;&#xF11F;&#xF132;&#xF12B;&#xF116;&#xF132;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF126;&#xF120;&#xF101;&#xF143;&#xF126;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF127;&#xF111;&#xF101;&#xF143;&#xF126;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1031
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref (make-hash | vector (pair 3 10) (pair 2 20) (pair 1 30)) 3) 10;"
    ],
    "preprocessed": "= (hash-ref (make-hash | vector (pair 3 10) (pair 2 20) (pair 1 30)) 3) 10;",
    "code": "21132210010000322100101013123210000322100111032113210103322100111032103210100332210011103213211110333211332101032233",
    "parse": [
      "=",
      [
        "hash-ref",
        [
          "make-hash",
          [
            -1,
            "vector",
            [
              "pair",
              "3",
              "10"
            ],
            [
              "pair",
              "2",
              "20"
            ],
            [
              "pair",
              "1",
              "30"
            ]
          ]
        ],
        "3"
      ],
      "10"
    ],
    "spider": "&#xF136;&#xF132;&#xF12B;&#xF111;&#xF132;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF136;&#xF13D;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF135;&#xF123;&#xF115;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF123;&#xF11F;&#xF121;&#xF121;&#xF136;&#xF121;&#xF13D;&#xF132;&#xF143;&#xF121;",
    "stanza": 1032
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref (make-hash | vector (pair 3 10) (pair 2 20) (pair 1 30)) 1) 30;"
    ],
    "preprocessed": "= (hash-ref (make-hash | vector (pair 3 10) (pair 2 20) (pair 1 30)) 1) 30;",
    "code": "21132210010000322100101013123210000322100111032113210103322100111032103210100332210011103213211110333213321111032233",
    "parse": [
      "=",
      [
        "hash-ref",
        [
          "make-hash",
          [
            -1,
            "vector",
            [
              "pair",
              "3",
              "10"
            ],
            [
              "pair",
              "2",
              "20"
            ],
            [
              "pair",
              "1",
              "30"
            ]
          ]
        ],
        "1"
      ],
      "30"
    ],
    "spider": "&#xF136;&#xF132;&#xF12B;&#xF111;&#xF132;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF136;&#xF13D;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF135;&#xF123;&#xF115;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF123;&#xF11F;&#xF121;&#xF121;&#xF134;&#xF121;&#xF123;&#xF11F;&#xF132;&#xF143;&#xF121;",
    "stanza": 1033
  },
  {
    "role": "file",
    "lines": [
      "== COS_MutableStructure =="
    ],
    "stanza": 1034
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "introduce simple mutable structures",
    "section_category": "OBJECT",
    "section_index": 31,
    "stanza": 1035
  },
  {
    "role": "code",
    "lines": [
      "define mutable-struct | ? lst | let ((data (map (? x | make-cell 0) $lst))) (? key | list-ref $data (list-find $lst $key (? x 0)));"
    ],
    "preprocessed": "define mutable-struct | ? lst | let ((data (map (? x | make-cell 0) $lst))) (? key | list-ref $data (list-find $lst $key (? x 0)));",
    "code": "21101321001011031232110032100100031232101101132221001011132211000113221100321001113123211011320330232100100033332211003210100103123210010113023210010111322101010130232100100030232101001032211003210011132033332233",
    "parse": [
      "define",
      "mutable-struct",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "let",
          [
            [
              "data",
              [
                "map",
                [
                  "?",
                  "x",
                  [
                    -1,
                    "make-cell",
                    "0"
                  ]
                ],
                [
                  -2,
                  "lst"
                ]
              ]
            ]
          ],
          [
            "?",
            "key",
            [
              -1,
              "list-ref",
              [
                -2,
                "data"
              ],
              [
                "list-find",
                [
                  -2,
                  "lst"
                ],
                [
                  -2,
                  "key"
                ],
                [
                  "?",
                  "x",
                  "0"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12B;&#xF117;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF119;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF12B;&#xF118;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF123;&#xF11C;&#xF133;&#xF121;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF13F;&#xF127;&#xF113;&#xF101;&#xF143;&#xF126;&#xF11C;&#xF100;&#xF143;&#xF12B;&#xF118;&#xF132;&#xF127;&#xF116;&#xF100;&#xF143;&#xF126;&#xF119;&#xF100;&#xF143;&#xF127;&#xF113;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF133;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1036
  },
  {
    "role": "code",
    "lines": [
      "define test-struct1 | mutable-struct | vector item1 item2 item3;"
    ],
    "preprocessed": "define test-struct1 | mutable-struct | vector item1 item2 item3;",
    "code": "2110132100110003123210010110312321000032100110013210011010321001101132233",
    "parse": [
      "define",
      "test-struct1",
      [
        -1,
        "mutable-struct",
        [
          -1,
          "vector",
          "item1",
          "item2",
          "item3"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12B;&#xF119;&#xF101;&#xF143;&#xF12B;&#xF117;&#xF101;&#xF143;&#xF123;&#xF111;&#xF12B;&#xF11A;&#xF12B;&#xF11B;&#xF12B;&#xF11C;&#xF132;&#xF143;&#xF121;",
    "stanza": 1037
  },
  {
    "role": "code",
    "lines": [
      "set! (test-struct1 item1) 15;"
    ],
    "preprocessed": "set! (test-struct1 item1) 15;",
    "code": "211100322100110003210011001332111132233",
    "parse": [
      "set!",
      [
        "test-struct1",
        "item1"
      ],
      "15"
    ],
    "spider": "&#xF123;&#xF11D;&#xF132;&#xF12B;&#xF119;&#xF12B;&#xF11A;&#xF121;&#xF142;&#xF132;&#xF143;&#xF121;",
    "stanza": 1038
  },
  {
    "role": "code",
    "lines": [
      "= (get! | test-struct1 item1) 15;"
    ],
    "preprocessed": "= (get! | test-struct1 item1) 15;",
    "code": "2113221110131232100110003210011001332111132233",
    "parse": [
      "=",
      [
        "get!",
        [
          -1,
          "test-struct1",
          "item1"
        ]
      ],
      "15"
    ],
    "spider": "&#xF136;&#xF132;&#xF123;&#xF11E;&#xF101;&#xF143;&#xF12B;&#xF119;&#xF12B;&#xF11A;&#xF121;&#xF142;&#xF132;&#xF143;&#xF121;",
    "stanza": 1039
  },
  {
    "role": "file",
    "lines": [
      "== COS_Method =="
    ],
    "stanza": 1040
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "introduce method handler wrappers",
    "section_category": "OBJECT",
    "section_index": 32,
    "stanza": 1041
  },
  {
    "role": "code",
    "lines": [
      "define add-method | lambda (object name method) (hash-add $object $name (? dummy | method $object));"
    ],
    "preprocessed": "define add-method | lambda (object name method) (hash-add $object $name (? dummy | method $object));",
    "code": "21101321001110031232110103221001110132100111103210011111332210001110302321001110130232100111103221100321110111312321001111130232100111013332233",
    "parse": [
      "define",
      "add-method",
      [
        -1,
        "lambda",
        [
          "object",
          "name",
          "method"
        ],
        [
          "hash-add",
          [
            -2,
            "object"
          ],
          [
            -2,
            "name"
          ],
          [
            "?",
            "dummy",
            [
              -1,
              "method",
              [
                -2,
                "object"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12B;&#xF11D;&#xF101;&#xF143;&#xF123;&#xF11B;&#xF132;&#xF12B;&#xF11E;&#xF12B;&#xF11F;&#xF12B;&#xF120;&#xF121;&#xF132;&#xF12A;&#xF11F;&#xF100;&#xF143;&#xF12B;&#xF11E;&#xF100;&#xF143;&#xF12B;&#xF11F;&#xF132;&#xF13F;&#xF129;&#xF118;&#xF101;&#xF143;&#xF12B;&#xF120;&#xF100;&#xF143;&#xF12B;&#xF11E;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1042
  },
  {
    "role": "code",
    "lines": [
      "define call | ? x | x 0;"
    ],
    "preprocessed": "define call | ? x | x 0;",
    "code": "211013210100000312321100321001113123210011132032233",
    "parse": [
      "define",
      "call",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "x",
          "0"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12C;&#xF111;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF124;&#xF118;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 1043
  },
  {
    "role": "code",
    "lines": [
      "define test-struct2 | mutable-struct | vector x y;"
    ],
    "preprocessed": "define test-struct2 | mutable-struct | vector x y;",
    "code": "21101321010000131232100101103123210000321001113211001132233",
    "parse": [
      "define",
      "test-struct2",
      [
        -1,
        "mutable-struct",
        [
          -1,
          "vector",
          "x",
          "y"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12C;&#xF112;&#xF101;&#xF143;&#xF12B;&#xF117;&#xF101;&#xF143;&#xF123;&#xF111;&#xF124;&#xF118;&#xF125;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 1044
  },
  {
    "role": "code",
    "lines": [
      "set! (test-struct2 x) 10;"
    ],
    "preprocessed": "set! (test-struct2 x) 10;",
    "code": "2111003221010000132100111332101032233",
    "parse": [
      "set!",
      [
        "test-struct2",
        "x"
      ],
      "10"
    ],
    "spider": "&#xF123;&#xF11D;&#xF132;&#xF12C;&#xF112;&#xF124;&#xF118;&#xF121;&#xF13D;&#xF132;&#xF143;&#xF121;",
    "stanza": 1045
  },
  {
    "role": "code",
    "lines": [
      "set! (test-struct2 y) 20;"
    ],
    "preprocessed": "set! (test-struct2 y) 20;",
    "code": "21110032210100001321100113321010032233",
    "parse": [
      "set!",
      [
        "test-struct2",
        "y"
      ],
      "20"
    ],
    "spider": "&#xF123;&#xF11D;&#xF132;&#xF12C;&#xF112;&#xF125;&#xF114;&#xF121;&#xF123;&#xF115;&#xF132;&#xF143;&#xF121;",
    "stanza": 1046
  },
  {
    "role": "code",
    "lines": [
      "= (get! | test-struct2 x) 10;"
    ],
    "preprocessed": "= (get! | test-struct2 x) 10;",
    "code": "21132211101312321010000132100111332101032233",
    "parse": [
      "=",
      [
        "get!",
        [
          -1,
          "test-struct2",
          "x"
        ]
      ],
      "10"
    ],
    "spider": "&#xF136;&#xF132;&#xF123;&#xF11E;&#xF101;&#xF143;&#xF12C;&#xF112;&#xF124;&#xF118;&#xF121;&#xF13D;&#xF132;&#xF143;&#xF121;",
    "stanza": 1047
  },
  {
    "role": "code",
    "lines": [
      "= (get! | test-struct2 y) 20;"
    ],
    "preprocessed": "= (get! | test-struct2 y) 20;",
    "code": "211322111013123210100001321100113321010032233",
    "parse": [
      "=",
      [
        "get!",
        [
          -1,
          "test-struct2",
          "y"
        ]
      ],
      "20"
    ],
    "spider": "&#xF136;&#xF132;&#xF123;&#xF11E;&#xF101;&#xF143;&#xF12C;&#xF112;&#xF125;&#xF114;&#xF121;&#xF123;&#xF115;&#xF132;&#xF143;&#xF121;",
    "stanza": 1048
  },
  {
    "role": "code",
    "lines": [
      "define test-struct3 | add-method $test-struct2 sum (? self | + (get! | self x) (get! | self y));"
    ],
    "preprocessed": "define test-struct3 | add-method $test-struct2 sum (? self | + (get! | self x) (get! | self y));",
    "code": "21101321010001031232100111003023210100001321010001132211003210100100312321010322111013123210100100321001113322111013123210100100321100113332233",
    "parse": [
      "define",
      "test-struct3",
      [
        -1,
        "add-method",
        [
          -2,
          "test-struct2"
        ],
        "sum",
        [
          "?",
          "self",
          [
            -1,
            "+",
            [
              "get!",
              [
                -1,
                "self",
                "x"
              ]
            ],
            [
              "get!",
              [
                -1,
                "self",
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12C;&#xF113;&#xF101;&#xF143;&#xF12B;&#xF11D;&#xF100;&#xF143;&#xF12C;&#xF112;&#xF12C;&#xF114;&#xF132;&#xF13F;&#xF12C;&#xF115;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF123;&#xF11E;&#xF101;&#xF143;&#xF12C;&#xF115;&#xF124;&#xF118;&#xF121;&#xF132;&#xF123;&#xF11E;&#xF101;&#xF143;&#xF12C;&#xF115;&#xF125;&#xF114;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1049
  },
  {
    "role": "code",
    "lines": [
      "= (get! | test-struct3 x) 10;"
    ],
    "preprocessed": "= (get! | test-struct3 x) 10;",
    "code": "21132211101312321010001032100111332101032233",
    "parse": [
      "=",
      [
        "get!",
        [
          -1,
          "test-struct3",
          "x"
        ]
      ],
      "10"
    ],
    "spider": "&#xF136;&#xF132;&#xF123;&#xF11E;&#xF101;&#xF143;&#xF12C;&#xF113;&#xF124;&#xF118;&#xF121;&#xF13D;&#xF132;&#xF143;&#xF121;",
    "stanza": 1050
  },
  {
    "role": "code",
    "lines": [
      "= (get! | test-struct3 y) 20;"
    ],
    "preprocessed": "= (get! | test-struct3 y) 20;",
    "code": "211322111013123210100010321100113321010032233",
    "parse": [
      "=",
      [
        "get!",
        [
          -1,
          "test-struct3",
          "y"
        ]
      ],
      "20"
    ],
    "spider": "&#xF136;&#xF132;&#xF123;&#xF11E;&#xF101;&#xF143;&#xF12C;&#xF113;&#xF125;&#xF114;&#xF121;&#xF123;&#xF115;&#xF132;&#xF143;&#xF121;",
    "stanza": 1051
  },
  {
    "role": "code",
    "lines": [
      "= (call | test-struct3 sum) 30;"
    ],
    "preprocessed": "= (call | test-struct3 sum) 30;",
    "code": "21132210100000312321010001032101000113321111032233",
    "parse": [
      "=",
      [
        "call",
        [
          -1,
          "test-struct3",
          "sum"
        ]
      ],
      "30"
    ],
    "spider": "&#xF136;&#xF132;&#xF12C;&#xF111;&#xF101;&#xF143;&#xF12C;&#xF113;&#xF12C;&#xF114;&#xF121;&#xF123;&#xF11F;&#xF132;&#xF143;&#xF121;",
    "stanza": 1052
  },
  {
    "role": "code",
    "lines": [
      "set! (test-struct3 y) 10;"
    ],
    "preprocessed": "set! (test-struct3 y) 10;",
    "code": "2111003221010001032110011332101032233",
    "parse": [
      "set!",
      [
        "test-struct3",
        "y"
      ],
      "10"
    ],
    "spider": "&#xF123;&#xF11D;&#xF132;&#xF12C;&#xF113;&#xF125;&#xF114;&#xF121;&#xF13D;&#xF132;&#xF143;&#xF121;",
    "stanza": 1053
  },
  {
    "role": "code",
    "lines": [
      "= (call | test-struct3 sum) 20;"
    ],
    "preprocessed": "= (call | test-struct3 sum) 20;",
    "code": "21132210100000312321010001032101000113321010032233",
    "parse": [
      "=",
      [
        "call",
        [
          -1,
          "test-struct3",
          "sum"
        ]
      ],
      "20"
    ],
    "spider": "&#xF136;&#xF132;&#xF12C;&#xF111;&#xF101;&#xF143;&#xF12C;&#xF113;&#xF12C;&#xF114;&#xF121;&#xF123;&#xF115;&#xF132;&#xF143;&#xF121;",
    "stanza": 1054
  },
  {
    "role": "code",
    "lines": [
      "set! (test-struct2 y) 5;"
    ],
    "preprocessed": "set! (test-struct2 y) 5;",
    "code": "211100322101000013211001133210132233",
    "parse": [
      "set!",
      [
        "test-struct2",
        "y"
      ],
      "5"
    ],
    "spider": "&#xF123;&#xF11D;&#xF132;&#xF12C;&#xF112;&#xF125;&#xF114;&#xF121;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 1055
  },
  {
    "role": "code",
    "lines": [
      "= (call | test-struct3 sum) 15;"
    ],
    "preprocessed": "= (call | test-struct3 sum) 15;",
    "code": "2113221010000031232101000103210100011332111132233",
    "parse": [
      "=",
      [
        "call",
        [
          -1,
          "test-struct3",
          "sum"
        ]
      ],
      "15"
    ],
    "spider": "&#xF136;&#xF132;&#xF12C;&#xF111;&#xF101;&#xF143;&#xF12C;&#xF113;&#xF12C;&#xF114;&#xF121;&#xF142;&#xF132;&#xF143;&#xF121;",
    "stanza": 1056
  },
  {
    "role": "file",
    "lines": [
      "== COS_Turing =="
    ],
    "stanza": 1057
  },
  {
    "role": "comment",
    "lines": [
      "# just for fun!"
    ],
    "section_description": "introduce turing machine model",
    "section_category": "TURING",
    "section_index": 33,
    "stanza": 1058
  },
  {
    "role": "code",
    "lines": [
      "define safe-tail | ? x | if (> (list-length $x) 0) (if (> (list-length $x) 1) (tail $x) (vector | vector)) (vector | vector);"
    ],
    "preprocessed": "define safe-tail | ? x | if (> (list-length $x) 0) (if (> (list-length $x) 1) (tail $x) (vector | vector)) (vector | vector);",
    "code": "2110132101001013123211003210011131232111132210032210010103023210011133203322111132210032210010103023210011133213322100100130232100111332210000312321000033322100003123210000332233",
    "parse": [
      "define",
      "safe-tail",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            ">",
            [
              "list-length",
              [
                -2,
                "x"
              ]
            ],
            "0"
          ],
          [
            "if",
            [
              ">",
              [
                "list-length",
                [
                  -2,
                  "x"
                ]
              ],
              "1"
            ],
            [
              "tail",
              [
                -2,
                "x"
              ]
            ],
            [
              "vector",
              [
                -1,
                "vector"
              ]
            ]
          ],
          [
            "vector",
            [
              -1,
              "vector"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12C;&#xF116;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF126;&#xF11A;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF123;&#xF111;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1059
  },
  {
    "role": "code",
    "lines": [
      "define safe-head | ? x | if (> (list-length $x) 0) (head $x) (vector);"
    ],
    "preprocessed": "define safe-head | ? x | if (> (list-length $x) 0) (head $x) (vector);",
    "code": "2110132101001103123211003210011131232111132210032210010103023210011133203322100011130232100111332210000332233",
    "parse": [
      "define",
      "safe-head",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            ">",
            [
              "list-length",
              [
                -2,
                "x"
              ]
            ],
            "0"
          ],
          [
            "head",
            [
              -2,
              "x"
            ]
          ],
          [
            "vector"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12C;&#xF117;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF126;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF123;&#xF111;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1060
  },
  {
    "role": "code",
    "lines": [
      "define tape-read | ? tape | let ((x (second $tape))) (if (> (list-length $x) 0) (head $x) (vector));"
    ],
    "preprocessed": "define tape-read | ? tape | let ((x (second $tape))) (if (> (list-length $x) 0) (head $x) (vector));",
    "code": "21101321010011131232110032101010003123210110113222100111322101000030232101010003333221111322100322100101030232100111332033221000111302321001113322100003332233",
    "parse": [
      "define",
      "tape-read",
      [
        -1,
        "?",
        "tape",
        [
          -1,
          "let",
          [
            [
              "x",
              [
                "second",
                [
                  -2,
                  "tape"
                ]
              ]
            ]
          ],
          [
            "if",
            [
              ">",
              [
                "list-length",
                [
                  -2,
                  "x"
                ]
              ],
              "0"
            ],
            [
              "head",
              [
                -2,
                "x"
              ]
            ],
            [
              "vector"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12C;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF12C;&#xF119;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF118;&#xF132;&#xF127;&#xF111;&#xF100;&#xF143;&#xF12C;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF126;&#xF118;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF123;&#xF111;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1061
  },
  {
    "role": "code",
    "lines": [
      "define tape-transition | lambda (tape shift value) (if (= $shift 1) (pair (prepend $value (first $tape)) (safe-tail | second $tape)) (if (= $shift 0) (pair (safe-tail | first $tape) (prepend (safe-head | first $tape) (prepend $value (safe-tail | second $tape)))) (pair (first $tape) (prepend $value (safe-tail | second $tape)))));"
    ],
    "preprocessed": "define tape-transition | lambda (tape shift value) (if (= $shift 1) (pair (prepend $value (first $tape)) (safe-tail | second $tape)) (if (= $shift 0) (pair (safe-tail | first $tape) (prepend (safe-head | first $tape) (prepend $value (safe-tail | second $tape)))) (pair (first $tape) (prepend $value (safe-tail | second $tape)))));",
    "code": "211013210101001312321101032210101000321010101032101010113322111132211302321010101032133221001110322100110030232101010113221001111302321010100033322101001013123210100003023210101000333221111322113023210101010320332210011103221010010131232100111130232101010003322100110032210100110312321001111302321010100033221001100302321010101132210100101312321010000302321010100033333221001110322100111130232101010003322100110030232101010113221010010131232101000030232101010003333332233",
    "parse": [
      "define",
      "tape-transition",
      [
        -1,
        "lambda",
        [
          "tape",
          "shift",
          "value"
        ],
        [
          "if",
          [
            "=",
            [
              -2,
              "shift"
            ],
            "1"
          ],
          [
            "pair",
            [
              "prepend",
              [
                -2,
                "value"
              ],
              [
                "first",
                [
                  -2,
                  "tape"
                ]
              ]
            ],
            [
              "safe-tail",
              [
                -1,
                "second",
                [
                  -2,
                  "tape"
                ]
              ]
            ]
          ],
          [
            "if",
            [
              "=",
              [
                -2,
                "shift"
              ],
              "0"
            ],
            [
              "pair",
              [
                "safe-tail",
                [
                  -1,
                  "first",
                  [
                    -2,
                    "tape"
                  ]
                ]
              ],
              [
                "prepend",
                [
                  "safe-head",
                  [
                    -1,
                    "first",
                    [
                      -2,
                      "tape"
                    ]
                  ]
                ],
                [
                  "prepend",
                  [
                    -2,
                    "value"
                  ],
                  [
                    "safe-tail",
                    [
                      -1,
                      "second",
                      [
                        -2,
                        "tape"
                      ]
                    ]
                  ]
                ]
              ]
            ],
            [
              "pair",
              [
                "first",
                [
                  -2,
                  "tape"
                ]
              ],
              [
                "prepend",
                [
                  -2,
                  "value"
                ],
                [
                  "safe-tail",
                  [
                    -1,
                    "second",
                    [
                      -2,
                      "tape"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12C;&#xF11A;&#xF101;&#xF143;&#xF123;&#xF11B;&#xF132;&#xF12C;&#xF119;&#xF12C;&#xF11B;&#xF12C;&#xF11C;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF100;&#xF143;&#xF12C;&#xF11B;&#xF134;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF132;&#xF126;&#xF11D;&#xF100;&#xF143;&#xF12C;&#xF11C;&#xF132;&#xF126;&#xF120;&#xF100;&#xF143;&#xF12C;&#xF119;&#xF121;&#xF121;&#xF132;&#xF12C;&#xF116;&#xF101;&#xF143;&#xF127;&#xF111;&#xF100;&#xF143;&#xF12C;&#xF119;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF100;&#xF143;&#xF12C;&#xF11B;&#xF133;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF132;&#xF12C;&#xF116;&#xF101;&#xF143;&#xF126;&#xF120;&#xF100;&#xF143;&#xF12C;&#xF119;&#xF121;&#xF132;&#xF126;&#xF11D;&#xF132;&#xF12C;&#xF117;&#xF101;&#xF143;&#xF126;&#xF120;&#xF100;&#xF143;&#xF12C;&#xF119;&#xF121;&#xF132;&#xF126;&#xF11D;&#xF100;&#xF143;&#xF12C;&#xF11C;&#xF132;&#xF12C;&#xF116;&#xF101;&#xF143;&#xF127;&#xF111;&#xF100;&#xF143;&#xF12C;&#xF119;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF132;&#xF126;&#xF120;&#xF100;&#xF143;&#xF12C;&#xF119;&#xF121;&#xF132;&#xF126;&#xF11D;&#xF100;&#xF143;&#xF12C;&#xF11C;&#xF132;&#xF12C;&#xF116;&#xF101;&#xF143;&#xF127;&#xF111;&#xF100;&#xF143;&#xF12C;&#xF119;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1062
  },
  {
    "role": "code",
    "lines": [
      "define turing | lambda (machine current last tape) (if (= $current $last) $tape (let ((next (machine $current (tape-read $tape)))) (turing $machine (list-ref $next 0) $last (tape-transition $tape (list-ref $next 1) (list-ref $next 2)))));"
    ],
    "preprocessed": "define turing | lambda (machine current last tape) (if (= $current $last) $tape (let ((next (machine $current (tape-read $tape)))) (turing $machine (list-ref $next 0) $last (tape-transition $tape (list-ref $next 1) (list-ref $next 2)))));",
    "code": "211013210101100312321101032210101101321010111032101110132101010003322111132211302321010111030232101110133023210101000322101101132221010111132210101101302321010111032210100111302321010100033333221010110030232101011013221001011302321010111132033023210111013221010100130232101010003221001011302321010111132133221001011302321010111132103333332233",
    "parse": [
      "define",
      "turing",
      [
        -1,
        "lambda",
        [
          "machine",
          "current",
          "last",
          "tape"
        ],
        [
          "if",
          [
            "=",
            [
              -2,
              "current"
            ],
            [
              -2,
              "last"
            ]
          ],
          [
            -2,
            "tape"
          ],
          [
            "let",
            [
              [
                "next",
                [
                  "machine",
                  [
                    -2,
                    "current"
                  ],
                  [
                    "tape-read",
                    [
                      -2,
                      "tape"
                    ]
                  ]
                ]
              ]
            ],
            [
              "turing",
              [
                -2,
                "machine"
              ],
              [
                "list-ref",
                [
                  -2,
                  "next"
                ],
                "0"
              ],
              [
                -2,
                "last"
              ],
              [
                "tape-transition",
                [
                  -2,
                  "tape"
                ],
                [
                  "list-ref",
                  [
                    -2,
                    "next"
                  ],
                  "1"
                ],
                [
                  "list-ref",
                  [
                    -2,
                    "next"
                  ],
                  "2"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12C;&#xF11D;&#xF101;&#xF143;&#xF123;&#xF11B;&#xF132;&#xF12C;&#xF11E;&#xF12C;&#xF11F;&#xF127;&#xF11E;&#xF12C;&#xF119;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF100;&#xF143;&#xF12C;&#xF11F;&#xF100;&#xF143;&#xF127;&#xF11E;&#xF121;&#xF100;&#xF143;&#xF12C;&#xF119;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF12C;&#xF120;&#xF132;&#xF12C;&#xF11E;&#xF100;&#xF143;&#xF12C;&#xF11F;&#xF132;&#xF12C;&#xF118;&#xF100;&#xF143;&#xF12C;&#xF119;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12C;&#xF11D;&#xF100;&#xF143;&#xF12C;&#xF11E;&#xF132;&#xF126;&#xF11C;&#xF100;&#xF143;&#xF12C;&#xF120;&#xF133;&#xF121;&#xF100;&#xF143;&#xF127;&#xF11E;&#xF132;&#xF12C;&#xF11A;&#xF100;&#xF143;&#xF12C;&#xF119;&#xF132;&#xF126;&#xF11C;&#xF100;&#xF143;&#xF12C;&#xF120;&#xF134;&#xF121;&#xF132;&#xF126;&#xF11C;&#xF100;&#xF143;&#xF12C;&#xF120;&#xF135;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1063
  },
  {
    "role": "code",
    "lines": [
      "define make-tape | ? x | pair (vector) $x;"
    ],
    "preprocessed": "define make-tape | ? x | pair (vector) $x;",
    "code": "211013210110000312321100321001113123210011103221000033023210011132233",
    "parse": [
      "define",
      "make-tape",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "pair",
          [
            "vector"
          ],
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12D;&#xF111;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF126;&#xF11F;&#xF132;&#xF123;&#xF111;&#xF121;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 1064
  },
  {
    "role": "code",
    "lines": [
      "define remove-trail | ? x | ? lst | if (> (list-length $lst) 0) (if (equal (last $lst) $x) (remove-trail $x (except-last $lst)) $lst) $lst;"
    ],
    "preprocessed": "define remove-trail | ? x | ? lst | if (> (list-length $lst) 0) (if (equal (last $lst) $x) (remove-trail $x (except-last $lst)) $lst) $lst;",
    "code": "2110132101100013123211003210011131232110032100100031232111132210032210010103023210010003320332211113221000322101110130232100100033023210011133221011000130232100111322101111030232100100033302321001000330232100100032233",
    "parse": [
      "define",
      "remove-trail",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "lst",
          [
            -1,
            "if",
            [
              ">",
              [
                "list-length",
                [
                  -2,
                  "lst"
                ]
              ],
              "0"
            ],
            [
              "if",
              [
                "equal",
                [
                  "last",
                  [
                    -2,
                    "lst"
                  ]
                ],
                [
                  -2,
                  "x"
                ]
              ],
              [
                "remove-trail",
                [
                  -2,
                  "x"
                ],
                [
                  "except-last",
                  [
                    -2,
                    "lst"
                  ]
                ]
              ],
              [
                -2,
                "lst"
              ]
            ],
            [
              -2,
              "lst"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12D;&#xF112;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF119;&#xF101;&#xF143;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF133;&#xF121;&#xF132;&#xF142;&#xF132;&#xF13B;&#xF132;&#xF127;&#xF11E;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12D;&#xF112;&#xF100;&#xF143;&#xF124;&#xF118;&#xF132;&#xF127;&#xF11F;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF121;&#xF100;&#xF143;&#xF126;&#xF119;&#xF121;&#xF100;&#xF143;&#xF126;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 1065
  },
  {
    "role": "code",
    "lines": [
      "define extract-tape | ? x | remove-trail (vector) (second $x);"
    ],
    "preprocessed": "define extract-tape | ? x | remove-trail (vector) (second $x);",
    "code": "211013210110010312321100321001113123210110001322100003322101000030232100111332233",
    "parse": [
      "define",
      "extract-tape",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "remove-trail",
          [
            "vector"
          ],
          [
            "second",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12D;&#xF113;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12D;&#xF112;&#xF132;&#xF123;&#xF111;&#xF121;&#xF132;&#xF127;&#xF111;&#xF100;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1066
  },
  {
    "role": "code",
    "lines": [
      "define tm-binary-increment | make-hash | vector (pair right (make-hash | vector (pair 0 (vector right 1 0)) (pair 1 (vector right 1 1)) (pair (vector) (vector inc 0 (vector))))) (pair inc (make-hash | vector (pair 0 (vector noinc 0 1)) (pair 1 (vector inc 0 0)) (pair (vector) (vector halt 2 1)))) (pair noinc (make-hash | vector (pair 0 (vector noinc 0 0)) (pair 1 (vector noinc 0 1)) (pair (vector) (vector halt 1 (vector))))) (pair halt (make-hash | vector));"
    ],
    "preprocessed": "define tm-binary-increment | make-hash | vector (pair right (make-hash | vector (pair 0 (vector right 1 0)) (pair 1 (vector right 1 1)) (pair (vector) (vector inc 0 (vector))))) (pair inc (make-hash | vector (pair 0 (vector noinc 0 1)) (pair 1 (vector inc 0 0)) (pair (vector) (vector halt 2 1)))) (pair noinc (make-hash | vector (pair 0 (vector noinc 0 0)) (pair 1 (vector noinc 0 1)) (pair (vector) (vector halt 1 (vector))))) (pair halt (make-hash | vector));",
    "code
    "parse": [
      "define",
      "tm-binary-increment",
      [
        -1,
        "make-hash",
        [
          -1,
          "vector",
          [
            "pair",
            "right",
            [
              "make-hash",
              [
                -1,
                "vector",
                [
                  "pair",
                  "0",
                  [
                    "vector",
                    "right",
                    "1",
                    "0"
                  ]
                ],
                [
                  "pair",
                  "1",
                  [
                    "vector",
                    "right",
                    "1",
                    "1"
                  ]
                ],
                [
                  "pair",
                  [
                    "vector"
                  ],
                  [
                    "vector",
                    "inc",
                    "0",
                    [
                      "vector"
                    ]
                  ]
                ]
              ]
            ]
          ],
          [
            "pair",
            "inc",
            [
              "make-hash",
              [
                -1,
                "vector",
                [
                  "pair",
                  "0",
                  [
                    "vector",
                    "noinc",
                    "0",
                    "1"
                  ]
                ],
                [
                  "pair",
                  "1",
                  [
                    "vector",
                    "inc",
                    "0",
                    "0"
                  ]
                ],
                [
                  "pair",
                  [
                    "vector"
                  ],
                  [
                    "vector",
                    "halt",
                    "2",
                    "1"
                  ]
                ]
              ]
            ]
          ],
          [
            "pair",
            "noinc",
            [
              "make-hash",
              [
                -1,
                "vector",
                [
                  "pair",
                  "0",
                  [
                    "vector",
                    "noinc",
                    "0",
                    "0"
                  ]
                ],
                [
                  "pair",
                  "1",
                  [
                    "vector",
                    "noinc",
                    "0",
                    "1"
                  ]
                ],
                [
                  "pair",
                  [
                    "vector"
                  ],
                  [
                    "vector",
                    "halt",
                    "1",
                    [
                      "vector"
                    ]
                  ]
                ]
              ]
            ]
          ],
          [
            "pair",
            "halt",
            [
              "make-hash",
              [
                -1,
                "vector"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12D;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF12D;&#xF115;&#xF132;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF123;&#xF111;&#xF12D;&#xF115;&#xF134;&#xF133;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF123;&#xF111;&#xF12D;&#xF115;&#xF134;&#xF134;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF132;&#xF123;&#xF111;&#xF121;&#xF132;&#xF123;&#xF111;&#xF12D;&#xF116;&#xF133;&#xF132;&#xF123;&#xF111;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF12D;&#xF116;&#xF132;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF123;&#xF111;&#xF12D;&#xF117;&#xF133;&#xF134;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF123;&#xF111;&#xF12D;&#xF116;&#xF133;&#xF133;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF132;&#xF123;&#xF111;&#xF121;&#xF132;&#xF123;&#xF111;&#xF12D;&#xF118;&#xF135;&#xF134;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF12D;&#xF117;&#xF132;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF123;&#xF111;&#xF12D;&#xF117;&#xF133;&#xF133;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF123;&#xF111;&#xF12D;&#xF117;&#xF133;&#xF134;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF132;&#xF123;&#xF111;&#xF121;&#xF132;&#xF123;&#xF111;&#xF12D;&#xF118;&#xF134;&#xF132;&#xF123;&#xF111;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF12D;&#xF118;&#xF132;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1067
  },
  {
    "role": "code",
    "lines": [
      "list= (extract-tape | turing $tm-binary-increment right halt (make-tape | vector 1 0 0 1)) (vector 1 0 1 0);"
    ],
    "preprocessed": "list= (extract-tape | turing $tm-binary-increment right halt (make-tape | vector 1 0 0 1)) (vector 1 0 1 0);",
    "code": "210011013221011001031232101011003023210110011321011010032101101113221011000031232100003213203203213332210000321320321320332233",
    "parse": [
      "list=",
      [
        "extract-tape",
        [
          -1,
          "turing",
          [
            -2,
            "tm-binary-increment"
          ],
          "right",
          "halt",
          [
            "make-tape",
            [
              -1,
              "vector",
              "1",
              "0",
              "0",
              "1"
            ]
          ]
        ]
      ],
      [
        "vector",
        "1",
        "0",
        "1",
        "0"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF12D;&#xF113;&#xF101;&#xF143;&#xF12C;&#xF11D;&#xF100;&#xF143;&#xF12D;&#xF114;&#xF12D;&#xF115;&#xF12D;&#xF118;&#xF132;&#xF12D;&#xF111;&#xF101;&#xF143;&#xF123;&#xF111;&#xF134;&#xF133;&#xF133;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF134;&#xF133;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1068
  },
  {
    "role": "code",
    "lines": [
      "list= (extract-tape | turing $tm-binary-increment right halt (make-tape | vector 1 1 1)) (vector 1 0 0 0);"
    ],
    "preprocessed": "list= (extract-tape | turing $tm-binary-increment right halt (make-tape | vector 1 1 1)) (vector 1 0 0 0);",
    "code": "210011013221011001031232101011003023210110011321011010032101101113221011000031232100003213213213332210000321320320320332233",
    "parse": [
      "list=",
      [
        "extract-tape",
        [
          -1,
          "turing",
          [
            -2,
            "tm-binary-increment"
          ],
          "right",
          "halt",
          [
            "make-tape",
            [
              -1,
              "vector",
              "1",
              "1",
              "1"
            ]
          ]
        ]
      ],
      [
        "vector",
        "1",
        "0",
        "0",
        "0"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF12D;&#xF113;&#xF101;&#xF143;&#xF12C;&#xF11D;&#xF100;&#xF143;&#xF12D;&#xF114;&#xF12D;&#xF115;&#xF12D;&#xF118;&#xF132;&#xF12D;&#xF111;&#xF101;&#xF143;&#xF123;&#xF111;&#xF134;&#xF134;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF134;&#xF133;&#xF133;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1069
  },
  {
    "role": "code",
    "lines": [
      "list= (extract-tape | turing $tm-binary-increment right halt (make-tape | vector 1 1 1 0 0 0 1 1 1)) (vector 1 1 1 0 0 1 0 0 0);"
    ],
    "preprocessed": "list= (extract-tape | turing $tm-binary-increment right halt (make-tape | vector 1 1 1 0 0 0 1 1 1)) (vector 1 1 1 0 0 1 0 0 0);",
    "code": "210011013221011001031232101011003023210110011321011010032101101113221011000031232100003213213213203203203213213213332210000321321321320320321320320320332233",
    "parse": [
      "list=",
      [
        "extract-tape",
        [
          -1,
          "turing",
          [
            -2,
            "tm-binary-increment"
          ],
          "right",
          "halt",
          [
            "make-tape",
            [
              -1,
              "vector",
              "1",
              "1",
              "1",
              "0",
              "0",
              "0",
              "1",
              "1",
              "1"
            ]
          ]
        ]
      ],
      [
        "vector",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF12D;&#xF113;&#xF101;&#xF143;&#xF12C;&#xF11D;&#xF100;&#xF143;&#xF12D;&#xF114;&#xF12D;&#xF115;&#xF12D;&#xF118;&#xF132;&#xF12D;&#xF111;&#xF101;&#xF143;&#xF123;&#xF111;&#xF134;&#xF134;&#xF134;&#xF133;&#xF133;&#xF133;&#xF134;&#xF134;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF134;&#xF134;&#xF134;&#xF133;&#xF133;&#xF134;&#xF133;&#xF133;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1070
  },
  {
    "role": "file",
    "lines": [
      "== COS_NewType =="
    ],
    "stanza": 1071
  },
  {
    "role": "comment",
    "lines": [
      "# An object is simply a function that takes an argument.",
      "# The argument is the method to call on the object.",
      "# Types are here taken to be just the existence of a particular method,",
      "# with that method returning an object of the appropriate type."
    ],
    "section_description": "introduce simple form of typing, for ease of documentation.",
    "section_category": "OBJECT",
    "section_index": 34,
    "stanza": 1072
  },
  {
    "role": "code",
    "lines": [
      "define make-integer",
      "  (lambda (v)",
      "    (lambda (x)",
      "      (if (= (x) int)",
      "      (v)",
      "      0)));"
    ],
    "preprocessed": "define make-integer\n  (lambda (v)\n    (lambda (x)\n      (if (= (x) int)\n      (v)\n      0)));",
    "code": "211013210111000322110103221011003322110103221001113322111132211322100111332101110013322101100332033332233",
    "parse": [
      "define",
      "make-integer",
      [
        "lambda",
        [
          "v"
        ],
        [
          "lambda",
          [
            "x"
          ],
          [
            "if",
            [
              "=",
              [
                "x"
              ],
              "int"
            ],
            [
              "v"
            ],
            "0"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12D;&#xF119;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF12D;&#xF11A;&#xF121;&#xF132;&#xF124;&#xF11D;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1073
  },
  {
    "role": "code",
    "lines": [
      "define objectify",
      "  (? x ",
      "     (if (single? (x))",
      "     (make-integer (x))",
      "     (x)));"
    ],
    "preprocessed": "define objectify\n  (? x \n     (if (single? (x))\n     (make-integer (x))\n     (x)));",
    "code": "211013210111010322110032100111322111132210101032210011133322101110003221001113332210011133332233",
    "parse": [
      "define",
      "objectify",
      [
        "?",
        "x",
        [
          "if",
          [
            "single?",
            [
              "x"
            ]
          ],
          [
            "make-integer",
            [
              "x"
            ]
          ],
          [
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12D;&#xF11B;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF132;&#xF142;&#xF132;&#xF124;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF12D;&#xF119;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1074
  },
  {
    "role": "code",
    "lines": [
      "define instanceof",
      "  (lambda (T t)",
      "    (if (single? (t))",
      "    (= (T) int)",
      "    (not (single? ((objectify (t)) (T))))));"
    ],
    "preprocessed": "define instanceof\n  (lambda (T t)\n    (if (single? (t))\n    (= (T) int)\n    (not (single? ((objectify (t)) (T))))));",
    "code": "21101321011101132211010322101111003210111101332211113221010103221011110133322113221011110033210111001332210132210101032221011101032210111101333221011110033333332233",
    "parse": [
      "define",
      "instanceof",
      [
        "lambda",
        [
          "T",
          "t"
        ],
        [
          "if",
          [
            "single?",
            [
              "t"
            ]
          ],
          [
            "=",
            [
              "T"
            ],
            "int"
          ],
          [
            "not",
            [
              "single?",
              [
                [
                  "objectify",
                  [
                    "t"
                  ]
                ],
                [
                  "T"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12D;&#xF11C;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF12D;&#xF11D;&#xF12D;&#xF11E;&#xF121;&#xF132;&#xF142;&#xF132;&#xF124;&#xF11B;&#xF132;&#xF12D;&#xF11E;&#xF121;&#xF121;&#xF132;&#xF136;&#xF132;&#xF12D;&#xF11D;&#xF121;&#xF12D;&#xF11A;&#xF121;&#xF132;&#xF138;&#xF132;&#xF124;&#xF11B;&#xF132;&#xF132;&#xF12D;&#xF11B;&#xF132;&#xF12D;&#xF11E;&#xF121;&#xF121;&#xF132;&#xF12D;&#xF11D;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1075
  },
  {
    "role": "comment",
    "lines": [
      "# add version of lambda that allows types to be declared"
    ],
    "stanza": 1076
  },
  {
    "role": "code",
    "lines": [
      "define prev-translate (translate);"
    ],
    "preprocessed": "define prev-translate (translate);",
    "code": "2110132101111132211001332233",
    "parse": [
      "define",
      "prev-translate",
      [
        "translate"
      ]
    ],
    "spider": "&#xF140;&#xF127;&#xF120;&#xF132;&#xF123;&#xF11A;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1077
  },
  {
    "role": "code",
    "lines": [
      "define translate",
      "  (let ((prev (prev-translate)))",
      "    (? x",
      "      (if (single? (x))",
      "        (prev (x))",
      "        (if (= (head (x)) lambda)",
      "          (let ((formals (head (tail (x))))",
      "                (body (head (tail (tail (x))))))",
      "            (if (> (list-length (formals)) 0)",
      "        (if (single? (last (formals)))",
      "            (translate",
      "             (vector",
      "              lambda",
      "              (except-last (formals))",
      "              (vector ? (last (formals)) (body))))",
      "            (let ((formal-name (first (last (formals))))",
      "              (formal-type (second (last (formals)))))",
      "              (translate",
      "               (vector",
      "            lambda",
      "            (except-last (formals))",
      "            (vector ",
      "             ? ",
      "             (formal-name) ",
      "             (vector ",
      "              let",
      "              (vector (vector ",
      "                   (formal-name) ",
      "                   (vector",
      "                    (vector objectify (vector (formal-name)))",
      "                    (formal-type))))",
      "              (body)))))))",
      "        (translate (body))))",
      "          (prev (x))))));"
    ],
    "preprocessed": "define translate\n  (let ((prev (prev-translate)))\n    (? x\n      (if (single? (x))\n        (prev (x))\n        (if (= (head (x)) lambda)\n          (let ((formals (head (tail (x))))\n                (body (head (tail (tail (x))))))\n            (if (> (list-length (formals)) 0)\n        (if (single? (last (formals)))\n            (translate\n             (vector\n              lambda\n              (except-last (formals))\n              (vector ? (last (formals)) (body))))\n            (let ((formal-name (first (last (formals))))\n              (formal-type (second (last (formals)))))\n              (translate\n               (vector\n            lambda\n            (except-last (formals))\n            (vector \n             ? \n             (formal-name) \n             (vector \n              let\n              (vector (vector \n                   (formal-name) \n                   (vector\n                    (vector objectify (vector (formal-name)))\n                    (formal-type))))\n              (body)))))))\n        (translate (body))))\n          (prev (x))))));",
    "code
    "parse": [
      "define",
      "translate",
      [
        "let",
        [
          [
            "prev",
            [
              "prev-translate"
            ]
          ]
        ],
        [
          "?",
          "x",
          [
            "if",
            [
              "single?",
              [
                "x"
              ]
            ],
            [
              "prev",
              [
                "x"
              ]
            ],
            [
              "if",
              [
                "=",
                [
                  "head",
                  [
                    "x"
                  ]
                ],
                "lambda"
              ],
              [
                "let",
                [
                  [
                    "formals",
                    [
                      "head",
                      [
                        "tail",
                        [
                          "x"
                        ]
                      ]
                    ]
                  ],
                  [
                    "body",
                    [
                      "head",
                      [
                        "tail",
                        [
                          "tail",
                          [
                            "x"
                          ]
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  "if",
                  [
                    ">",
                    [
                      "list-length",
                      [
                        "formals"
                      ]
                    ],
                    "0"
                  ],
                  [
                    "if",
                    [
                      "single?",
                      [
                        "last",
                        [
                          "formals"
                        ]
                      ]
                    ],
                    [
                      "translate",
                      [
                        "vector",
                        "lambda",
                        [
                          "except-last",
                          [
                            "formals"
                          ]
                        ],
                        [
                          "vector",
                          "?",
                          [
                            "last",
                            [
                              "formals"
                            ]
                          ],
                          [
                            "body"
                          ]
                        ]
                      ]
                    ],
                    [
                      "let",
                      [
                        [
                          "formal-name",
                          [
                            "first",
                            [
                              "last",
                              [
                                "formals"
                              ]
                            ]
                          ]
                        ],
                        [
                          "formal-type",
                          [
                            "second",
                            [
                              "last",
                              [
                                "formals"
                              ]
                            ]
                          ]
                        ]
                      ],
                      [
                        "translate",
                        [
                          "vector",
                          "lambda",
                          [
                            "except-last",
                            [
                              "formals"
                            ]
                          ],
                          [
                            "vector",
                            "?",
                            [
                              "formal-name"
                            ],
                            [
                              "vector",
                              "let",
                              [
                                "vector",
                                [
                                  "vector",
                                  [
                                    "formal-name"
                                  ],
                                  [
                                    "vector",
                                    [
                                      "vector",
                                      "objectify",
                                      [
                                        "vector",
                                        [
                                          "formal-name"
                                        ]
                                      ]
                                    ],
                                    [
                                      "formal-type"
                                    ]
                                  ]
                                ]
                              ],
                              [
                                "body"
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ],
                  [
                    "translate",
                    [
                      "body"
                    ]
                  ]
                ]
              ],
              [
                "prev",
                [
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF11A;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF128;&#xF111;&#xF132;&#xF127;&#xF120;&#xF121;&#xF121;&#xF121;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF132;&#xF142;&#xF132;&#xF124;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF128;&#xF111;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF126;&#xF118;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF123;&#xF11B;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF128;&#xF112;&#xF132;&#xF126;&#xF118;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11B;&#xF132;&#xF126;&#xF118;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF132;&#xF128;&#xF112;&#xF121;&#xF121;&#xF133;&#xF121;&#xF132;&#xF142;&#xF132;&#xF124;&#xF11B;&#xF132;&#xF127;&#xF11E;&#xF132;&#xF128;&#xF112;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11A;&#xF132;&#xF123;&#xF111;&#xF123;&#xF11B;&#xF132;&#xF127;&#xF11F;&#xF132;&#xF128;&#xF112;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF132;&#xF127;&#xF11E;&#xF132;&#xF128;&#xF112;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11B;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF12D;&#xF11F;&#xF132;&#xF126;&#xF120;&#xF132;&#xF127;&#xF11E;&#xF132;&#xF128;&#xF112;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12D;&#xF120;&#xF132;&#xF127;&#xF111;&#xF132;&#xF127;&#xF11E;&#xF132;&#xF128;&#xF112;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11A;&#xF132;&#xF123;&#xF111;&#xF123;&#xF11B;&#xF132;&#xF127;&#xF11F;&#xF132;&#xF128;&#xF112;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF132;&#xF12D;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF111;&#xF127;&#xF11C;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF132;&#xF12D;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF12D;&#xF11B;&#xF132;&#xF123;&#xF111;&#xF132;&#xF12D;&#xF11F;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12D;&#xF120;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11B;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11A;&#xF132;&#xF127;&#xF11B;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF128;&#xF111;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1078
  },
  {
    "role": "comment",
    "lines": [
      "# add conditional form"
    ],
    "stanza": 1079
  },
  {
    "role": "code",
    "lines": [
      "define prev-translate (translate);"
    ],
    "preprocessed": "define prev-translate (translate);",
    "code": "2110132101111132211001332233",
    "parse": [
      "define",
      "prev-translate",
      [
        "translate"
      ]
    ],
    "spider": "&#xF140;&#xF127;&#xF120;&#xF132;&#xF123;&#xF11A;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1080
  },
  {
    "role": "code",
    "lines": [
      "define translate",
      "  (let ((prev (prev-translate)))",
      "    (? x",
      "      (if (single? (x))",
      "        (prev (x))",
      "        (if (= (head (x)) cond)",
      "          (let ((cnd (head (tail (x))))",
      "                (rem (tail (tail (x)))))",
      "            (if (> (list-length (rem)) 0)",
      "        (translate",
      "         (vector",
      "                  if",
      "          (first (cnd))",
      "          (second (cnd))",
      "          (prepend cond (rem))))",
      "        (translate (cnd))))",
      "          (prev (x))))));"
    ],
    "preprocessed": "define translate\n  (let ((prev (prev-translate)))\n    (? x\n      (if (single? (x))\n        (prev (x))\n        (if (= (head (x)) cond)\n          (let ((cnd (head (tail (x))))\n                (rem (tail (tail (x)))))\n            (if (> (list-length (rem)) 0)\n        (translate\n         (vector\n                  if\n          (first (cnd))\n          (second (cnd))\n          (prepend cond (rem))))\n        (translate (cnd))))\n          (prev (x))))));",
    "code": "21101321100132210110113222110000032210111113333221100321001113221111322101010322100111333221100000322100111333221111322113221000111322100111333211000000332210110113222110000013221000111322100100132210011133333221100001032210010013221001001322100111333333221111322100322100101032211000010333203322110013221000032111132210011113221100000133322101000032211000001333221001100321100000032211000010333332211001322110000013333322110000032210011133333332233",
    "parse": [
      "define",
      "translate",
      [
        "let",
        [
          [
            "prev",
            [
              "prev-translate"
            ]
          ]
        ],
        [
          "?",
          "x",
          [
            "if",
            [
              "single?",
              [
                "x"
              ]
            ],
            [
              "prev",
              [
                "x"
              ]
            ],
            [
              "if",
              [
                "=",
                [
                  "head",
                  [
                    "x"
                  ]
                ],
                "cond"
              ],
              [
                "let",
                [
                  [
                    "cnd",
                    [
                      "head",
                      [
                        "tail",
                        [
                          "x"
                        ]
                      ]
                    ]
                  ],
                  [
                    "rem",
                    [
                      "tail",
                      [
                        "tail",
                        [
                          "x"
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  "if",
                  [
                    ">",
                    [
                      "list-length",
                      [
                        "rem"
                      ]
                    ],
                    "0"
                  ],
                  [
                    "translate",
                    [
                      "vector",
                      "if",
                      [
                        "first",
                        [
                          "cnd"
                        ]
                      ],
                      [
                        "second",
                        [
                          "cnd"
                        ]
                      ],
                      [
                        "prepend",
                        "cond",
                        [
                          "rem"
                        ]
                      ]
                    ]
                  ],
                  [
                    "translate",
                    [
                      "cnd"
                    ]
                  ]
                ]
              ],
              [
                "prev",
                [
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF11A;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF128;&#xF111;&#xF132;&#xF127;&#xF120;&#xF121;&#xF121;&#xF121;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF132;&#xF142;&#xF132;&#xF124;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF128;&#xF111;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF126;&#xF118;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF12E;&#xF111;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF12E;&#xF112;&#xF132;&#xF126;&#xF118;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12E;&#xF113;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF132;&#xF12E;&#xF113;&#xF121;&#xF121;&#xF133;&#xF121;&#xF132;&#xF123;&#xF11A;&#xF132;&#xF123;&#xF111;&#xF142;&#xF132;&#xF126;&#xF120;&#xF132;&#xF12E;&#xF112;&#xF121;&#xF121;&#xF132;&#xF127;&#xF111;&#xF132;&#xF12E;&#xF112;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11D;&#xF12E;&#xF111;&#xF132;&#xF12E;&#xF113;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11A;&#xF132;&#xF12E;&#xF112;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF128;&#xF111;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1081
  },
  {
    "role": "code",
    "lines": [
      "= 99 (cond 99);"
    ],
    "preprocessed": "= 99 (cond 99);",
    "code": "21132110001132211000000321100011332233",
    "parse": [
      "=",
      "99",
      [
        "cond",
        "99"
      ]
    ],
    "spider": "&#xF136;&#xF128;&#xF114;&#xF132;&#xF12E;&#xF111;&#xF128;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1082
  },
  {
    "role": "code",
    "lines": [
      "= 8 (cond ((true) 8) 11);"
    ],
    "preprocessed": "= 8 (cond ((true) 8) 11);",
    "code": "211321000322110000003222133210003321011332233",
    "parse": [
      "=",
      "8",
      [
        "cond",
        [
          [
            "true"
          ],
          "8"
        ],
        "11"
      ]
    ],
    "spider": "&#xF136;&#xF13B;&#xF132;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF134;&#xF121;&#xF13B;&#xF121;&#xF13E;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1083
  },
  {
    "role": "code",
    "lines": [
      "= 11 (cond ((false) 8) 11);"
    ],
    "preprocessed": "= 11 (cond ((false) 8) 11);",
    "code": "211321011322110000003222033210003321011332233",
    "parse": [
      "=",
      "11",
      [
        "cond",
        [
          [
            "false"
          ],
          "8"
        ],
        "11"
      ]
    ],
    "spider": "&#xF136;&#xF13E;&#xF132;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF133;&#xF121;&#xF13B;&#xF121;&#xF13E;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1084
  },
  {
    "role": "code",
    "lines": [
      "= 7 (cond ((false) 3) ((true) 7) 11);"
    ],
    "preprocessed": "= 7 (cond ((false) 3) ((true) 7) 11);",
    "code": "211321113221100000032220332113322213321113321011332233",
    "parse": [
      "=",
      "7",
      [
        "cond",
        [
          [
            "false"
          ],
          "3"
        ],
        [
          [
            "true"
          ],
          "7"
        ],
        "11"
      ]
    ],
    "spider": "&#xF136;&#xF13A;&#xF132;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF133;&#xF121;&#xF136;&#xF121;&#xF132;&#xF132;&#xF134;&#xF121;&#xF13A;&#xF121;&#xF13E;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1085
  },
  {
    "role": "code",
    "lines": [
      "= 3 (cond ((true) 3) ((true) 7) 11);"
    ],
    "preprocessed": "= 3 (cond ((true) 3) ((true) 7) 11);",
    "code": "21132113221100000032221332113322213321113321011332233",
    "parse": [
      "=",
      "3",
      [
        "cond",
        [
          [
            "true"
          ],
          "3"
        ],
        [
          [
            "true"
          ],
          "7"
        ],
        "11"
      ]
    ],
    "spider": "&#xF136;&#xF136;&#xF132;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF134;&#xF121;&#xF136;&#xF121;&#xF132;&#xF132;&#xF134;&#xF121;&#xF13A;&#xF121;&#xF13E;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1086
  },
  {
    "role": "code",
    "lines": [
      "= 11 (cond ((false) 3) ((false) 7) 11);"
    ],
    "preprocessed": "= 11 (cond ((false) 3) ((false) 7) 11);",
    "code": "2113210113221100000032220332113322203321113321011332233",
    "parse": [
      "=",
      "11",
      [
        "cond",
        [
          [
            "false"
          ],
          "3"
        ],
        [
          [
            "false"
          ],
          "7"
        ],
        "11"
      ]
    ],
    "spider": "&#xF136;&#xF13E;&#xF132;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF133;&#xF121;&#xF136;&#xF121;&#xF132;&#xF132;&#xF133;&#xF121;&#xF13A;&#xF121;&#xF13E;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1087
  },
  {
    "role": "code",
    "lines": [
      "define remove-match ",
      "  (lambda (test lst)",
      "    (if (> (list-length (lst)) 0)",
      "    (if (test (head (lst)))",
      "        (remove-match (test) (tail (lst)))",
      "        (prepend (head (lst)) (remove-match (test) (tail (lst)))))",
      "    (lst)));"
    ],
    "preprocessed": "define remove-match \n  (lambda (test lst)\n    (if (> (list-length (lst)) 0)\n    (if (test (head (lst)))\n        (remove-match (test) (tail (lst)))\n        (prepend (head (lst)) (remove-match (test) (tail (lst)))))\n    (lst)));",
    "code": "2110132110000113221101032211000100321001000332211113221003221001010322100100033320332211113221100010032210001113221001000333322110000113221100010033221001001322100100033332210011003221000111322100100033322110000113221100010033221001001322100100033333322100100033332233",
    "parse": [
      "define",
      "remove-match",
      [
        "lambda",
        [
          "test",
          "lst"
        ],
        [
          "if",
          [
            ">",
            [
              "list-length",
              [
                "lst"
              ]
            ],
            "0"
          ],
          [
            "if",
            [
              "test",
              [
                "head",
                [
                  "lst"
                ]
              ]
            ],
            [
              "remove-match",
              [
                "test"
              ],
              [
                "tail",
                [
                  "lst"
                ]
              ]
            ],
            [
              "prepend",
              [
                "head",
                [
                  "lst"
                ]
              ],
              [
                "remove-match",
                [
                  "test"
                ],
                [
                  "tail",
                  [
                    "lst"
                  ]
                ]
              ]
            ]
          ],
          [
            "lst"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12E;&#xF114;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF12E;&#xF115;&#xF126;&#xF119;&#xF121;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF133;&#xF121;&#xF132;&#xF142;&#xF132;&#xF12E;&#xF115;&#xF132;&#xF126;&#xF118;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12E;&#xF114;&#xF132;&#xF12E;&#xF115;&#xF121;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11D;&#xF132;&#xF126;&#xF118;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF132;&#xF12E;&#xF114;&#xF132;&#xF12E;&#xF115;&#xF121;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1088
  },
  {
    "role": "code",
    "lines": [
      "define remove-element",
      "  (lambda (x) ",
      "    (remove-match (lambda (y) (= (y) (x)))));"
    ],
    "preprocessed": "define remove-element\n  (lambda (x) \n    (remove-match (lambda (y) (= (y) (x)))));",
    "code": "211013211000101322110103221001113322110000113221101032211001133221132211001133221001113333332233",
    "parse": [
      "define",
      "remove-element",
      [
        "lambda",
        [
          "x"
        ],
        [
          "remove-match",
          [
            "lambda",
            [
              "y"
            ],
            [
              "=",
              [
                "y"
              ],
              [
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12E;&#xF116;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12E;&#xF114;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF125;&#xF114;&#xF121;&#xF132;&#xF136;&#xF132;&#xF125;&#xF114;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1089
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 1 2 3 5) (remove-element 4 (vector 1 2 3 4 5));"
    ],
    "preprocessed": "list= (vector 1 2 3 5) (remove-element 4 (vector 1 2 3 4 5));",
    "code": "2100110132210000321321032113210133221100010132100322100003213210321132100321013332233",
    "parse": [
      "list=",
      [
        "vector",
        "1",
        "2",
        "3",
        "5"
      ],
      [
        "remove-element",
        "4",
        [
          "vector",
          "1",
          "2",
          "3",
          "4",
          "5"
        ]
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF123;&#xF111;&#xF134;&#xF135;&#xF136;&#xF138;&#xF121;&#xF132;&#xF12E;&#xF116;&#xF137;&#xF132;&#xF123;&#xF111;&#xF134;&#xF135;&#xF136;&#xF137;&#xF138;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1090
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 1 2 3 5) (remove-element 4 (vector 1 4 2 4 3 4 5));"
    ],
    "preprocessed": "list= (vector 1 2 3 5) (remove-element 4 (vector 1 4 2 4 3 4 5));",
    "code": "21001101322100003213210321132101332211000101321003221000032132100321032100321132100321013332233",
    "parse": [
      "list=",
      [
        "vector",
        "1",
        "2",
        "3",
        "5"
      ],
      [
        "remove-element",
        "4",
        [
          "vector",
          "1",
          "4",
          "2",
          "4",
          "3",
          "4",
          "5"
        ]
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF123;&#xF111;&#xF134;&#xF135;&#xF136;&#xF138;&#xF121;&#xF132;&#xF12E;&#xF116;&#xF137;&#xF132;&#xF123;&#xF111;&#xF134;&#xF137;&#xF135;&#xF137;&#xF136;&#xF137;&#xF138;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1091
  },
  {
    "role": "code",
    "lines": [
      "define return",
      "  (lambda (T t)",
      "    (let ((obj (objectify (t))))",
      "      (obj (T))));"
    ],
    "preprocessed": "define return\n  (lambda (T t)\n    (let ((obj (objectify (t))))\n      (obj (T))));",
    "code": "2110132110001103221101032210111100321011110133221011011322211000111322101110103221011110133333221100011132210111100333332233",
    "parse": [
      "define",
      "return",
      [
        "lambda",
        [
          "T",
          "t"
        ],
        [
          "let",
          [
            [
              "obj",
              [
                "objectify",
                [
                  "t"
                ]
              ]
            ]
          ],
          [
            "obj",
            [
              "T"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12E;&#xF117;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF12D;&#xF11D;&#xF12D;&#xF11E;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF12E;&#xF118;&#xF132;&#xF12D;&#xF11B;&#xF132;&#xF12D;&#xF11E;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12E;&#xF118;&#xF132;&#xF12D;&#xF11D;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1092
  },
  {
    "role": "code",
    "lines": [
      "define tester",
      "  (lambda ((x int) (y int))",
      "    (return int (+ (x) (y))));"
    ],
    "preprocessed": "define tester\n  (lambda ((x int) (y int))\n    (return int (+ (x) (y))));",
    "code": "2110132110010003221101032221001113210111001332211001132101110013332211000110321011100132210103221001113322110011333332233",
    "parse": [
      "define",
      "tester",
      [
        "lambda",
        [
          [
            "x",
            "int"
          ],
          [
            "y",
            "int"
          ]
        ],
        [
          "return",
          "int",
          [
            "+",
            [
              "x"
            ],
            [
              "y"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12E;&#xF119;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF132;&#xF124;&#xF118;&#xF12D;&#xF11A;&#xF121;&#xF132;&#xF125;&#xF114;&#xF12D;&#xF11A;&#xF121;&#xF121;&#xF132;&#xF12E;&#xF117;&#xF12D;&#xF11A;&#xF132;&#xF13D;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF125;&#xF114;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1093
  },
  {
    "role": "code",
    "lines": [
      "= 42 (tester (make-integer 10) (make-integer 32));"
    ],
    "preprocessed": "= 42 (tester (make-integer 10) (make-integer 32));",
    "code": "211321010103221100100032210111000321010332210111000321000003332233",
    "parse": [
      "=",
      "42",
      [
        "tester",
        [
          "make-integer",
          "10"
        ],
        [
          "make-integer",
          "32"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF124;&#xF11B;&#xF132;&#xF12E;&#xF119;&#xF132;&#xF12D;&#xF119;&#xF13D;&#xF121;&#xF132;&#xF12D;&#xF119;&#xF124;&#xF111;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1094
  },
  {
    "role": "code",
    "lines": [
      "= 42 (tester 10 32);"
    ],
    "preprocessed": "= 42 (tester 10 32);",
    "code": "211321010103221100100032101032100000332233",
    "parse": [
      "=",
      "42",
      [
        "tester",
        "10",
        "32"
      ]
    ],
    "spider": "&#xF136;&#xF124;&#xF11B;&#xF132;&#xF12E;&#xF119;&#xF13D;&#xF124;&#xF111;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1095
  },
  {
    "role": "code",
    "lines": [
      "define reflective",
      "  (lambda (f)",
      "    ((lambda (x)",
      "       (f (lambda (y) ((x (x)) (y)))))",
      "     (lambda (x)",
      "       (f (lambda (y) ((x (x)) (y)))))));"
    ],
    "preprocessed": "define reflective\n  (lambda (f)\n    ((lambda (x)\n       (f (lambda (y) ((x (x)) (y)))))\n     (lambda (x)\n       (f (lambda (y) ((x (x)) (y)))))));",
    "code": "211013211001001322110103221101000332221101032210011133221101000322110103221100113322210011132210011133322110011333333221101032210011133221101000322110103221100113322210011132210011133322110011333333332233",
    "parse": [
      "define",
      "reflective",
      [
        "lambda",
        [
          "f"
        ],
        [
          [
            "lambda",
            [
              "x"
            ],
            [
              "f",
              [
                "lambda",
                [
                  "y"
                ],
                [
                  [
                    "x",
                    [
                      "x"
                    ]
                  ],
                  [
                    "y"
                  ]
                ]
              ]
            ]
          ],
          [
            "lambda",
            [
              "x"
            ],
            [
              "f",
              [
                "lambda",
                [
                  "y"
                ],
                [
                  [
                    "x",
                    [
                      "x"
                    ]
                  ],
                  [
                    "y"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12E;&#xF11A;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF128;&#xF119;&#xF121;&#xF132;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF128;&#xF119;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF125;&#xF114;&#xF121;&#xF132;&#xF132;&#xF124;&#xF118;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF125;&#xF114;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF128;&#xF119;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF125;&#xF114;&#xF121;&#xF132;&#xF132;&#xF124;&#xF118;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF125;&#xF114;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1096
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "an example object -- a 2D point",
    "section_category": "OBJECT",
    "section_index": 35,
    "stanza": 1097
  },
  {
    "role": "code",
    "lines": [
      "define point",
      "  (lambda (x y)",
      "    (reflective",
      "     (lambda (self msg)",
      "       (cond ((= (msg) x) (x))",
      "         ((= (msg) y) (y))",
      "         ((= (msg) point) (self))",
      "         ((= (msg) +) ",
      "          (lambda ((p point))",
      "        (point (+ (x) (p x))",
      "               (+ (y) (p y)))))",
      "         ((= (msg) =) ",
      "          (lambda ((p point))",
      "        (and (= (x) (p x))",
      "             (= (y) (p y)))))",
      "         0))));"
    ],
    "preprocessed": "define point\n  (lambda (x y)\n    (reflective\n     (lambda (self msg)\n       (cond ((= (msg) x) (x))\n         ((= (msg) y) (y))\n         ((= (msg) point) (self))\n         ((= (msg) +) \n          (lambda ((p point))\n        (point (+ (x) (p x))\n               (+ (y) (p y)))))\n         ((= (msg) =) \n          (lambda ((p point))\n        (and (= (x) (p x))\n             (= (y) (p y)))))\n         0))));",
    "code": "21101321100101032211010322100111321100113322110010013221101032210100100321100101133221100000032221132211001011332100111332210011133322211322110010113321100113322110011333222113221100101133211001010332210100100333222113221100101133210103322110103222110010032110010103332211001010322101032210011133221100100321001113332210103221100113322110010032110011333333222113221100101133211332211010322211001003211001010333221103221132210011133221100100321001113332211322110011332211001003211001133333320333332233",
    "parse": [
      "define",
      "point",
      [
        "lambda",
        [
          "x",
          "y"
        ],
        [
          "reflective",
          [
            "lambda",
            [
              "self",
              "msg"
            ],
            [
              "cond",
              [
                [
                  "=",
                  [
                    "msg"
                  ],
                  "x"
                ],
                [
                  "x"
                ]
              ],
              [
                [
                  "=",
                  [
                    "msg"
                  ],
                  "y"
                ],
                [
                  "y"
                ]
              ],
              [
                [
                  "=",
                  [
                    "msg"
                  ],
                  "point"
                ],
                [
                  "self"
                ]
              ],
              [
                [
                  "=",
                  [
                    "msg"
                  ],
                  "+"
                ],
                [
                  "lambda",
                  [
                    [
                      "p",
                      "point"
                    ]
                  ],
                  [
                    "point",
                    [
                      "+",
                      [
                        "x"
                      ],
                      [
                        "p",
                        "x"
                      ]
                    ],
                    [
                      "+",
                      [
                        "y"
                      ],
                      [
                        "p",
                        "y"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "msg"
                  ],
                  "="
                ],
                [
                  "lambda",
                  [
                    [
                      "p",
                      "point"
                    ]
                  ],
                  [
                    "and",
                    [
                      "=",
                      [
                        "x"
                      ],
                      [
                        "p",
                        "x"
                      ]
                    ],
                    [
                      "=",
                      [
                        "y"
                      ],
                      [
                        "p",
                        "y"
                      ]
                    ]
                  ]
                ]
              ],
              "0"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12E;&#xF11B;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF125;&#xF114;&#xF121;&#xF132;&#xF12E;&#xF11A;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF12C;&#xF115;&#xF12E;&#xF11C;&#xF121;&#xF132;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF12E;&#xF11C;&#xF121;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF12E;&#xF11C;&#xF121;&#xF125;&#xF114;&#xF121;&#xF132;&#xF125;&#xF114;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF12E;&#xF11C;&#xF121;&#xF12E;&#xF11B;&#xF121;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF12E;&#xF11C;&#xF121;&#xF13D;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF132;&#xF128;&#xF115;&#xF12E;&#xF11B;&#xF121;&#xF121;&#xF132;&#xF12E;&#xF11B;&#xF132;&#xF13D;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF128;&#xF115;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF13D;&#xF132;&#xF125;&#xF114;&#xF121;&#xF132;&#xF128;&#xF115;&#xF125;&#xF114;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF12E;&#xF11C;&#xF121;&#xF136;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF132;&#xF128;&#xF115;&#xF12E;&#xF11B;&#xF121;&#xF121;&#xF132;&#xF139;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF128;&#xF115;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF136;&#xF132;&#xF125;&#xF114;&#xF121;&#xF132;&#xF128;&#xF115;&#xF125;&#xF114;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1098
  },
  {
    "role": "code",
    "lines": [
      "define point1 (point 1 11);"
    ],
    "preprocessed": "define point1 (point 1 11);",
    "code": "21101321100110032211001010321321011332233",
    "parse": [
      "define",
      "point1",
      [
        "point",
        "1",
        "11"
      ]
    ],
    "spider": "&#xF140;&#xF12E;&#xF11D;&#xF132;&#xF12E;&#xF11B;&#xF134;&#xF13E;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1099
  },
  {
    "role": "code",
    "lines": [
      "define point2 (point 2 22);"
    ],
    "preprocessed": "define point2 (point 2 22);",
    "code": "2110132110011013221100101032103210110332233",
    "parse": [
      "define",
      "point2",
      [
        "point",
        "2",
        "22"
      ]
    ],
    "spider": "&#xF140;&#xF12E;&#xF11E;&#xF132;&#xF12E;&#xF11B;&#xF135;&#xF123;&#xF117;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1100
  },
  {
    "role": "code",
    "lines": [
      "= 1 (point1 x);"
    ],
    "preprocessed": "= 1 (point1 x);",
    "code": "2113213221100110032100111332233",
    "parse": [
      "=",
      "1",
      [
        "point1",
        "x"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF132;&#xF12E;&#xF11D;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1101
  },
  {
    "role": "code",
    "lines": [
      "= 22 (point2 y);"
    ],
    "preprocessed": "= 22 (point2 y);",
    "code": "21132101103221100110132110011332233",
    "parse": [
      "=",
      "22",
      [
        "point2",
        "y"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF117;&#xF132;&#xF12E;&#xF11E;&#xF125;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1102
  },
  {
    "role": "code",
    "lines": [
      "= 11 ((point 11 12) x);"
    ],
    "preprocessed": "= 11 ((point 11 12) x);",
    "code": "211321011322211001010321011321100332100111332233",
    "parse": [
      "=",
      "11",
      [
        [
          "point",
          "11",
          "12"
        ],
        "x"
      ]
    ],
    "spider": "&#xF136;&#xF13E;&#xF132;&#xF132;&#xF12E;&#xF11B;&#xF13E;&#xF13F;&#xF121;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1103
  },
  {
    "role": "code",
    "lines": [
      "= 11 (((point 11 12) point) x);"
    ],
    "preprocessed": "= 11 (((point 11 12) point) x);",
    "code": "211321011322221100101032101132110033211001010332100111332233",
    "parse": [
      "=",
      "11",
      [
        [
          [
            "point",
            "11",
            "12"
          ],
          "point"
        ],
        "x"
      ]
    ],
    "spider": "&#xF136;&#xF13E;&#xF132;&#xF132;&#xF132;&#xF12E;&#xF11B;&#xF13E;&#xF13F;&#xF121;&#xF12E;&#xF11B;&#xF121;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1104
  },
  {
    "role": "code",
    "lines": [
      "= 16 (((point 16 17) point) x);"
    ],
    "preprocessed": "= 16 (((point 16 17) point) x);",
    "code": "211321000032222110010103210000321000133211001010332100111332233",
    "parse": [
      "=",
      "16",
      [
        [
          [
            "point",
            "16",
            "17"
          ],
          "point"
        ],
        "x"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF111;&#xF132;&#xF132;&#xF132;&#xF12E;&#xF11B;&#xF123;&#xF111;&#xF123;&#xF112;&#xF121;&#xF12E;&#xF11B;&#xF121;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1105
  },
  {
    "role": "code",
    "lines": [
      "= 33 (point1 + (point2) y);"
    ],
    "preprocessed": "= 33 (point1 + (point2) y);",
    "code": "211321000013221100110032101032211001101332110011332233",
    "parse": [
      "=",
      "33",
      [
        "point1",
        "+",
        [
          "point2"
        ],
        "y"
      ]
    ],
    "spider": "&#xF136;&#xF124;&#xF112;&#xF132;&#xF12E;&#xF11D;&#xF13D;&#xF132;&#xF12E;&#xF11E;&#xF121;&#xF125;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1106
  },
  {
    "role": "code",
    "lines": [
      "point1 + (point2) = (point 3 33);"
    ],
    "preprocessed": "point1 + (point2) = (point 3 33);",
    "code": "211001100321010322110011013321132211001010321132100001332233",
    "parse": [
      "point1",
      "+",
      [
        "point2"
      ],
      "=",
      [
        "point",
        "3",
        "33"
      ]
    ],
    "spider": "&#xF12E;&#xF11D;&#xF13D;&#xF132;&#xF12E;&#xF11E;&#xF121;&#xF136;&#xF132;&#xF12E;&#xF11B;&#xF136;&#xF124;&#xF112;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1107
  },
  {
    "role": "code",
    "lines": [
      "point2 + (point1) = (point 3 33);"
    ],
    "preprocessed": "point2 + (point1) = (point 3 33);",
    "code": "211001101321010322110011003321132211001010321132100001332233",
    "parse": [
      "point2",
      "+",
      [
        "point1"
      ],
      "=",
      [
        "point",
        "3",
        "33"
      ]
    ],
    "spider": "&#xF12E;&#xF11E;&#xF13D;&#xF132;&#xF12E;&#xF11D;&#xF121;&#xF136;&#xF132;&#xF12E;&#xF11B;&#xF136;&#xF124;&#xF112;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1108
  },
  {
    "role": "code",
    "lines": [
      "(point 100 200) + (point 200 100) = (point 300 300);"
    ],
    "preprocessed": "(point 100 200) + (point 200 100) = (point 300 300);",
    "code": "22110010103211001003211001000332101032211001010321100100032110010033211322110010103210010110032100101100332233",
    "parse": [
      [
        "point",
        "100",
        "200"
      ],
      "+",
      [
        "point",
        "200",
        "100"
      ],
      "=",
      [
        "point",
        "300",
        "300"
      ]
    ],
    "spider": "&#xF132;&#xF12E;&#xF11B;&#xF128;&#xF115;&#xF12E;&#xF119;&#xF121;&#xF13D;&#xF132;&#xF12E;&#xF11B;&#xF12E;&#xF119;&#xF128;&#xF115;&#xF121;&#xF136;&#xF132;&#xF12E;&#xF11B;&#xF123;&#xF102;&#xF11D;&#xF123;&#xF102;&#xF11D;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1109
  },
  {
    "role": "code",
    "lines": [
      "instanceof point (point1);"
    ],
    "preprocessed": "instanceof point (point1);",
    "code": "210111011321100101032211001100332233",
    "parse": [
      "instanceof",
      "point",
      [
        "point1"
      ]
    ],
    "spider": "&#xF12D;&#xF11C;&#xF12E;&#xF11B;&#xF132;&#xF12E;&#xF11D;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1110
  },
  {
    "role": "code",
    "lines": [
      "not (instanceof int (point1));"
    ],
    "preprocessed": "not (instanceof int (point1));",
    "code": "2101322101110113210111001322110011003332233",
    "parse": [
      "not",
      [
        "instanceof",
        "int",
        [
          "point1"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF132;&#xF12D;&#xF11C;&#xF12D;&#xF11A;&#xF132;&#xF12E;&#xF11D;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1111
  },
  {
    "role": "code",
    "lines": [
      "instanceof int 5;"
    ],
    "preprocessed": "instanceof int 5;",
    "code": "21011101132101110013210132233",
    "parse": [
      "instanceof",
      "int",
      "5"
    ],
    "spider": "&#xF12D;&#xF11C;&#xF12D;&#xF11A;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 1112
  },
  {
    "role": "code",
    "lines": [
      "not (instanceof point 5);"
    ],
    "preprocessed": "not (instanceof point 5);",
    "code": "210132210111011321100101032101332233",
    "parse": [
      "not",
      [
        "instanceof",
        "point",
        "5"
      ]
    ],
    "spider": "&#xF138;&#xF132;&#xF12D;&#xF11C;&#xF12E;&#xF11B;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1113
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "an example object -- a container",
    "section_category": "OBJECT",
    "section_index": 36,
    "stanza": 1114
  },
  {
    "role": "code",
    "lines": [
      "define container",
      "  (lambda (x)",
      "    (let ((contents (make-cell (vector))))",
      "      (reflective",
      "       (lambda (self msg)",
      "     (cond ((= (msg) container) (self))",
      "           ((= (msg) inventory) (get! (contents)))",
      "           ((= (msg) add)",
      "        (lambda (x) ",
      "          (if (not (element (x) (get! (contents))))",
      "              (set! (contents) (prepend (x) (get! (contents))))",
      "              (false))))",
      "           ((= (msg) remove)",
      "        (lambda (x)",
      "          (set! (contents) (remove-element (x) (get! (contents))))))",
      "           ((= (msg) =)",
      "        (lambda ((c container))",
      "          (set= (self inventory) (c inventory))))",
      "           0)))));"
    ],
    "preprocessed": "define container\n  (lambda (x)\n    (let ((contents (make-cell (vector))))\n      (reflective\n       (lambda (self msg)\n     (cond ((= (msg) container) (self))\n           ((= (msg) inventory) (get! (contents)))\n           ((= (msg) add)\n        (lambda (x) \n          (if (not (element (x) (get! (contents))))\n              (set! (contents) (prepend (x) (get! (contents))))\n              (false))))\n           ((= (msg) remove)\n        (lambda (x)\n          (set! (contents) (remove-element (x) (get! (contents))))))\n           ((= (msg) =)\n        (lambda ((c container))\n          (set= (self inventory) (c inventory))))\n           0)))));",
    "code
    "parse": [
      "define",
      "container",
      [
        "lambda",
        [
          "x"
        ],
        [
          "let",
          [
            [
              "contents",
              [
                "make-cell",
                [
                  "vector"
                ]
              ]
            ]
          ],
          [
            "reflective",
            [
              "lambda",
              [
                "self",
                "msg"
              ],
              [
                "cond",
                [
                  [
                    "=",
                    [
                      "msg"
                    ],
                    "container"
                  ],
                  [
                    "self"
                  ]
                ],
                [
                  [
                    "=",
                    [
                      "msg"
                    ],
                    "inventory"
                  ],
                  [
                    "get!",
                    [
                      "contents"
                    ]
                  ]
                ],
                [
                  [
                    "=",
                    [
                      "msg"
                    ],
                    "add"
                  ],
                  [
                    "lambda",
                    [
                      "x"
                    ],
                    [
                      "if",
                      [
                        "not",
                        [
                          "element",
                          [
                            "x"
                          ],
                          [
                            "get!",
                            [
                              "contents"
                            ]
                          ]
                        ]
                      ],
                      [
                        "set!",
                        [
                          "contents"
                        ],
                        [
                          "prepend",
                          [
                            "x"
                          ],
                          [
                            "get!",
                            [
                              "contents"
                            ]
                          ]
                        ]
                      ],
                      [
                        "false"
                      ]
                    ]
                  ]
                ],
                [
                  [
                    "=",
                    [
                      "msg"
                    ],
                    "remove"
                  ],
                  [
                    "lambda",
                    [
                      "x"
                    ],
                    [
                      "set!",
                      [
                        "contents"
                      ],
                      [
                        "remove-element",
                        [
                          "x"
                        ],
                        [
                          "get!",
                          [
                            "contents"
                          ]
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  [
                    "=",
                    [
                      "msg"
                    ],
                    "="
                  ],
                  [
                    "lambda",
                    [
                      [
                        "c",
                        "container"
                      ]
                    ],
                    [
                      "set=",
                      [
                        "self",
                        "inventory"
                      ],
                      [
                        "c",
                        "inventory"
                      ]
                    ]
                  ]
                ],
                "0"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12E;&#xF11F;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF12E;&#xF120;&#xF132;&#xF123;&#xF11C;&#xF132;&#xF123;&#xF111;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12E;&#xF11A;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF12C;&#xF115;&#xF12E;&#xF11C;&#xF121;&#xF132;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF12E;&#xF11C;&#xF121;&#xF12E;&#xF11F;&#xF121;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF12E;&#xF11C;&#xF121;&#xF12F;&#xF111;&#xF121;&#xF132;&#xF123;&#xF11E;&#xF132;&#xF12E;&#xF120;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF12E;&#xF11C;&#xF121;&#xF129;&#xF114;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF138;&#xF132;&#xF129;&#xF11D;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF123;&#xF11E;&#xF132;&#xF12E;&#xF120;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11D;&#xF132;&#xF12E;&#xF120;&#xF121;&#xF132;&#xF126;&#xF11D;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF123;&#xF11E;&#xF132;&#xF12E;&#xF120;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF12E;&#xF11C;&#xF121;&#xF12F;&#xF112;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF123;&#xF11D;&#xF132;&#xF12E;&#xF120;&#xF121;&#xF132;&#xF12E;&#xF116;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF123;&#xF11E;&#xF132;&#xF12E;&#xF120;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF12E;&#xF11C;&#xF121;&#xF136;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF132;&#xF125;&#xF118;&#xF12E;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF129;&#xF11F;&#xF132;&#xF12C;&#xF115;&#xF12F;&#xF111;&#xF121;&#xF132;&#xF125;&#xF118;&#xF12F;&#xF111;&#xF121;&#xF121;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1115
  },
  {
    "role": "comment",
    "lines": [
      "# Can pass anything to container function to create an object",
      "# Should eventually use a consistent protocol for all objects,",
      "# but all this stuff is still in flux"
    ],
    "stanza": 1116
  },
  {
    "role": "code",
    "lines": [
      "define pocket (container new);"
    ],
    "preprocessed": "define pocket (container new);",
    "code": "211013211010010322110011103211010011332233",
    "parse": [
      "define",
      "pocket",
      [
        "container",
        "new"
      ]
    ],
    "spider": "&#xF140;&#xF12F;&#xF113;&#xF132;&#xF12E;&#xF11F;&#xF12F;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1117
  },
  {
    "role": "code",
    "lines": [
      "pocket add 77;"
    ],
    "preprocessed": "pocket add 77;",
    "code": "21101001032111001132100110132233",
    "parse": [
      "pocket",
      "add",
      "77"
    ],
    "spider": "&#xF12F;&#xF113;&#xF129;&#xF114;&#xF126;&#xF11E;&#xF132;&#xF143;&#xF121;",
    "stanza": 1118
  },
  {
    "role": "code",
    "lines": [
      "pocket add 88;"
    ],
    "preprocessed": "pocket add 88;",
    "code": "21101001032111001132101100032233",
    "parse": [
      "pocket",
      "add",
      "88"
    ],
    "spider": "&#xF12F;&#xF113;&#xF129;&#xF114;&#xF127;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 1119
  },
  {
    "role": "code",
    "lines": [
      "pocket add 99;"
    ],
    "preprocessed": "pocket add 99;",
    "code": "21101001032111001132110001132233",
    "parse": [
      "pocket",
      "add",
      "99"
    ],
    "spider": "&#xF12F;&#xF113;&#xF129;&#xF114;&#xF128;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 1120
  },
  {
    "role": "code",
    "lines": [
      "set= (pocket inventory) (vector 77 88 99);"
    ],
    "preprocessed": "set= (pocket inventory) (vector 77 88 99);",
    "code": "21111110322110100103211010000332210000321001101321011000321100011332233",
    "parse": [
      "set=",
      [
        "pocket",
        "inventory"
      ],
      [
        "vector",
        "77",
        "88",
        "99"
      ]
    ],
    "spider": "&#xF129;&#xF11F;&#xF132;&#xF12F;&#xF113;&#xF12F;&#xF111;&#xF121;&#xF132;&#xF123;&#xF111;&#xF126;&#xF11E;&#xF127;&#xF119;&#xF128;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1121
  },
  {
    "role": "code",
    "lines": [
      "pocket remove 88;"
    ],
    "preprocessed": "pocket remove 88;",
    "code": "211010010321101000132101100032233",
    "parse": [
      "pocket",
      "remove",
      "88"
    ],
    "spider": "&#xF12F;&#xF113;&#xF12F;&#xF112;&#xF127;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 1122
  },
  {
    "role": "code",
    "lines": [
      "set= (pocket inventory) (vector 77 99);"
    ],
    "preprocessed": "set= (pocket inventory) (vector 77 99);",
    "code": "21111110322110100103211010000332210000321001101321100011332233",
    "parse": [
      "set=",
      [
        "pocket",
        "inventory"
      ],
      [
        "vector",
        "77",
        "99"
      ]
    ],
    "spider": "&#xF129;&#xF11F;&#xF132;&#xF12F;&#xF113;&#xF12F;&#xF111;&#xF121;&#xF132;&#xF123;&#xF111;&#xF126;&#xF11E;&#xF128;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1123
  },
  {
    "role": "code",
    "lines": [
      "define pocket2 (container new);"
    ],
    "preprocessed": "define pocket2 (container new);",
    "code": "211013211010100322110011103211010011332233",
    "parse": [
      "define",
      "pocket2",
      [
        "container",
        "new"
      ]
    ],
    "spider": "&#xF140;&#xF12F;&#xF115;&#xF132;&#xF12E;&#xF11F;&#xF12F;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1124
  },
  {
    "role": "code",
    "lines": [
      "pocket2 add 77;"
    ],
    "preprocessed": "pocket2 add 77;",
    "code": "21101010032111001132100110132233",
    "parse": [
      "pocket2",
      "add",
      "77"
    ],
    "spider": "&#xF12F;&#xF115;&#xF129;&#xF114;&#xF126;&#xF11E;&#xF132;&#xF143;&#xF121;",
    "stanza": 1125
  },
  {
    "role": "code",
    "lines": [
      "pocket2 add 99;"
    ],
    "preprocessed": "pocket2 add 99;",
    "code": "21101010032111001132110001132233",
    "parse": [
      "pocket2",
      "add",
      "99"
    ],
    "spider": "&#xF12F;&#xF115;&#xF129;&#xF114;&#xF128;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 1126
  },
  {
    "role": "code",
    "lines": [
      "pocket2 = (pocket);"
    ],
    "preprocessed": "pocket2 = (pocket);",
    "code": "211010100321132211010010332233",
    "parse": [
      "pocket2",
      "=",
      [
        "pocket"
      ]
    ],
    "spider": "&#xF12F;&#xF115;&#xF136;&#xF132;&#xF12F;&#xF113;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1127
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "expressing inheritance",
    "section_category": "OBJECT",
    "section_index": 37,
    "stanza": 1128
  },
  {
    "role": "comment",
    "lines": [
      "# counter-container adds one method to container: count"
    ],
    "stanza": 1129
  },
  {
    "role": "code",
    "lines": [
      "define counter-container",
      "  (lambda (x)",
      "    (let ((super (container new)))",
      "      (reflective",
      "       (lambda (self msg)",
      "     (cond ((= (msg) counter-container) (self))",
      "           ((= (msg) count) (list-length (super inventory)))",
      "           (super (msg)))))));"
    ],
    "preprocessed": "define counter-container\n  (lambda (x)\n    (let ((super (container new)))\n      (reflective\n       (lambda (self msg)\n     (cond ((= (msg) counter-container) (self))\n           ((= (msg) count) (list-length (super inventory)))\n           (super (msg)))))));",
    "code": "211013211010101322110103221001113322101101132221101011032211001110321101001133332211001001322110103221010010032110010113322110000003222113221100101133211010101332210100100333222113221100101133211010111332210010103221101011032110100003333221101011032211001011333333332233",
    "parse": [
      "define",
      "counter-container",
      [
        "lambda",
        [
          "x"
        ],
        [
          "let",
          [
            [
              "super",
              [
                "container",
                "new"
              ]
            ]
          ],
          [
            "reflective",
            [
              "lambda",
              [
                "self",
                "msg"
              ],
              [
                "cond",
                [
                  [
                    "=",
                    [
                      "msg"
                    ],
                    "counter-container"
                  ],
                  [
                    "self"
                  ]
                ],
                [
                  [
                    "=",
                    [
                      "msg"
                    ],
                    "count"
                  ],
                  [
                    "list-length",
                    [
                      "super",
                      "inventory"
                    ]
                  ]
                ],
                [
                  "super",
                  [
                    "msg"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12F;&#xF116;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF12F;&#xF117;&#xF132;&#xF12E;&#xF11F;&#xF12F;&#xF114;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12E;&#xF11A;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF12C;&#xF115;&#xF12E;&#xF11C;&#xF121;&#xF132;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF12E;&#xF11C;&#xF121;&#xF12F;&#xF116;&#xF121;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF12E;&#xF11C;&#xF121;&#xF12F;&#xF118;&#xF121;&#xF132;&#xF126;&#xF11B;&#xF132;&#xF12F;&#xF117;&#xF12F;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12F;&#xF117;&#xF132;&#xF12E;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1130
  },
  {
    "role": "code",
    "lines": [
      "define cc1 (counter-container new);"
    ],
    "preprocessed": "define cc1 (counter-container new);",
    "code": "211013211011000322110101013211010011332233",
    "parse": [
      "define",
      "cc1",
      [
        "counter-container",
        "new"
      ]
    ],
    "spider": "&#xF140;&#xF12F;&#xF119;&#xF132;&#xF12F;&#xF116;&#xF12F;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1131
  },
  {
    "role": "code",
    "lines": [
      "= 0 (cc1 count);"
    ],
    "preprocessed": "= 0 (cc1 count);",
    "code": "211320322110110003211010111332233",
    "parse": [
      "=",
      "0",
      [
        "cc1",
        "count"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF132;&#xF12F;&#xF119;&#xF12F;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1132
  },
  {
    "role": "code",
    "lines": [
      "cc1 add 4;"
    ],
    "preprocessed": "cc1 add 4;",
    "code": "2110110003211100113210032233",
    "parse": [
      "cc1",
      "add",
      "4"
    ],
    "spider": "&#xF12F;&#xF119;&#xF129;&#xF114;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 1133
  },
  {
    "role": "code",
    "lines": [
      "= 1 (cc1 count);"
    ],
    "preprocessed": "= 1 (cc1 count);",
    "code": "211321322110110003211010111332233",
    "parse": [
      "=",
      "1",
      [
        "cc1",
        "count"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF132;&#xF12F;&#xF119;&#xF12F;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1134
  },
  {
    "role": "code",
    "lines": [
      "cc1 add 5;"
    ],
    "preprocessed": "cc1 add 5;",
    "code": "2110110003211100113210132233",
    "parse": [
      "cc1",
      "add",
      "5"
    ],
    "spider": "&#xF12F;&#xF119;&#xF129;&#xF114;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 1135
  },
  {
    "role": "code",
    "lines": [
      "= 2 (cc1 count);"
    ],
    "preprocessed": "= 2 (cc1 count);",
    "code": "2113210322110110003211010111332233",
    "parse": [
      "=",
      "2",
      [
        "cc1",
        "count"
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF132;&#xF12F;&#xF119;&#xF12F;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1136
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "adding a special form for classes",
    "section_category": "OBJECT",
    "section_index": 38,
    "stanza": 1137
  },
  {
    "role": "comment",
    "lines": [
      "# need a bunch of extra machinery first, will push this",
      "# back into previous sections eventually, and simplify"
    ],
    "stanza": 1138
  },
  {
    "role": "code",
    "lines": [
      "define list-append",
      "  (lambda (lst1 lst2)",
      "    (if (> (list-length (lst1)) 0)",
      "    (list-append (except-last (lst1))",
      "             (prepend (last (lst1)) (lst2)))",
      "    (lst2)));"
    ],
    "preprocessed": "define list-append\n  (lambda (lst1 lst2)\n    (if (> (list-length (lst1)) 0)\n    (list-append (except-last (lst1))\n             (prepend (last (lst1)) (lst2)))\n    (lst2)));",
    "code": "21101321101100132211010322110110103211011011332211113221003221001010322110110103332033221101100132210111103221101101033322100110032210111013221101101033322110110113333221101101133332233",
    "parse": [
      "define",
      "list-append",
      [
        "lambda",
        [
          "lst1",
          "lst2"
        ],
        [
          "if",
          [
            ">",
            [
              "list-length",
              [
                "lst1"
              ]
            ],
            "0"
          ],
          [
            "list-append",
            [
              "except-last",
              [
                "lst1"
              ]
            ],
            [
              "prepend",
              [
                "last",
                [
                  "lst1"
                ]
              ],
              [
                "lst2"
              ]
            ]
          ],
          [
            "lst2"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12F;&#xF11A;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF12F;&#xF11B;&#xF12F;&#xF11C;&#xF121;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF132;&#xF12F;&#xF11B;&#xF121;&#xF121;&#xF133;&#xF121;&#xF132;&#xF12F;&#xF11A;&#xF132;&#xF127;&#xF11F;&#xF132;&#xF12F;&#xF11B;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11D;&#xF132;&#xF127;&#xF11E;&#xF132;&#xF12F;&#xF11B;&#xF121;&#xF121;&#xF132;&#xF12F;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12F;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1139
  },
  {
    "role": "code",
    "lines": [
      "list= (list-append (vector 1 2 3) (vector 4 5 6)) (vector 1 2 3 4 5 6);"
    ],
    "preprocessed": "list= (list-append (vector 1 2 3) (vector 4 5 6)) (vector 1 2 3 4 5 6);",
    "code": "21001101322110110013221000032132103211332210000321003210132110333221000032132103211321003210132110332233",
    "parse": [
      "list=",
      [
        "list-append",
        [
          "vector",
          "1",
          "2",
          "3"
        ],
        [
          "vector",
          "4",
          "5",
          "6"
        ]
      ],
      [
        "vector",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF12F;&#xF11A;&#xF132;&#xF123;&#xF111;&#xF134;&#xF135;&#xF136;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF138;&#xF139;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF134;&#xF135;&#xF136;&#xF137;&#xF138;&#xF139;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1140
  },
  {
    "role": "code",
    "lines": [
      "define append",
      "  (? x",
      "     (? lst",
      "    (if (> (list-length (lst)) 0)",
      "        (prepend (head (lst)) (append (x) (tail (lst))))",
      "        (vector (x)))));"
    ],
    "preprocessed": "define append\n  (? x\n     (? lst\n    (if (> (list-length (lst)) 0)\n        (prepend (head (lst)) (append (x) (tail (lst))))\n        (vector (x)))));",
    "code": "211013211011100322110032100111322110032100100032211113221003221001010322100100033320332210011003221000111322100100033322110111003221001113322100100132210010003333322100003221001113333332233",
    "parse": [
      "define",
      "append",
      [
        "?",
        "x",
        [
          "?",
          "lst",
          [
            "if",
            [
              ">",
              [
                "list-length",
                [
                  "lst"
                ]
              ],
              "0"
            ],
            [
              "prepend",
              [
                "head",
                [
                  "lst"
                ]
              ],
              [
                "append",
                [
                  "x"
                ],
                [
                  "tail",
                  [
                    "lst"
                  ]
                ]
              ]
            ],
            [
              "vector",
              [
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12F;&#xF11D;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF132;&#xF13F;&#xF126;&#xF119;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF133;&#xF121;&#xF132;&#xF126;&#xF11D;&#xF132;&#xF126;&#xF118;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF132;&#xF12F;&#xF11D;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1141
  },
  {
    "role": "code",
    "lines": [
      "list= (append 5 (vector 1 2)) (vector 1 2 5);"
    ],
    "preprocessed": "list= (append 5 (vector 1 2)) (vector 1 2 5);",
    "code": "2100110132211011100321013221000032132103332210000321321032101332233",
    "parse": [
      "list=",
      [
        "append",
        "5",
        [
          "vector",
          "1",
          "2"
        ]
      ],
      [
        "vector",
        "1",
        "2",
        "5"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF12F;&#xF11D;&#xF138;&#xF132;&#xF123;&#xF111;&#xF134;&#xF135;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF134;&#xF135;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1142
  },
  {
    "role": "code",
    "lines": [
      "define select-match ",
      "  (lambda (test lst)",
      "    (if (> (list-length (lst)) 0)",
      "    (if (test (head (lst)))",
      "        (prepend (head (lst)) (select-match (test) (tail (lst))))",
      "        (select-match (test) (tail (lst))))",
      "    (lst)));"
    ],
    "preprocessed": "define select-match \n  (lambda (test lst)\n    (if (> (list-length (lst)) 0)\n    (if (test (head (lst)))\n        (prepend (head (lst)) (select-match (test) (tail (lst))))\n        (select-match (test) (tail (lst))))\n    (lst)));",
    "code": "2110132110111013221101032211000100321001000332211113221003221001010322100100033320332211113221100010032210001113221001000333322100110032210001113221001000333221101110132211000100332210010013221001000333332211011101322110001003322100100132210010003333322100100033332233",
    "parse": [
      "define",
      "select-match",
      [
        "lambda",
        [
          "test",
          "lst"
        ],
        [
          "if",
          [
            ">",
            [
              "list-length",
              [
                "lst"
              ]
            ],
            "0"
          ],
          [
            "if",
            [
              "test",
              [
                "head",
                [
                  "lst"
                ]
              ]
            ],
            [
              "prepend",
              [
                "head",
                [
                  "lst"
                ]
              ],
              [
                "select-match",
                [
                  "test"
                ],
                [
                  "tail",
                  [
                    "lst"
                  ]
                ]
              ]
            ],
            [
              "select-match",
              [
                "test"
              ],
              [
                "tail",
                [
                  "lst"
                ]
              ]
            ]
          ],
          [
            "lst"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12F;&#xF11E;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF12E;&#xF115;&#xF126;&#xF119;&#xF121;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF133;&#xF121;&#xF132;&#xF142;&#xF132;&#xF12E;&#xF115;&#xF132;&#xF126;&#xF118;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11D;&#xF132;&#xF126;&#xF118;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF132;&#xF12F;&#xF11E;&#xF132;&#xF12E;&#xF115;&#xF121;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12F;&#xF11E;&#xF132;&#xF12E;&#xF115;&#xF121;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1143
  },
  {
    "role": "code",
    "lines": [
      "define unique",
      "  (let ((store (make-cell 0)))",
      "    (lambda (x)",
      "      (let ((id (get! (store))))",
      "    (begin",
      "      (set! (store) (+ (id) 1))",
      "      (id)))));"
    ],
    "preprocessed": "define unique\n  (let ((store (make-cell 0)))\n    (lambda (x)\n      (let ((id (get! (store))))\n    (begin\n      (set! (store) (+ (id) 1))\n      (id)))));",
    "code": "2110132110111103221011011322211011111322110113203333221101032210011133221011011322211100000322111013221101111133333221000110032211100322110111113322101032211100000332133322111000003333332233",
    "parse": [
      "define",
      "unique",
      [
        "let",
        [
          [
            "store",
            [
              "make-cell",
              "0"
            ]
          ]
        ],
        [
          "lambda",
          [
            "x"
          ],
          [
            "let",
            [
              [
                "id",
                [
                  "get!",
                  [
                    "store"
                  ]
                ]
              ]
            ],
            [
              "begin",
              [
                "set!",
                [
                  "store"
                ],
                [
                  "+",
                  [
                    "id"
                  ],
                  "1"
                ]
              ],
              [
                "id"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12F;&#xF11F;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF12F;&#xF120;&#xF132;&#xF123;&#xF11C;&#xF133;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF130;&#xF111;&#xF132;&#xF123;&#xF11E;&#xF132;&#xF12F;&#xF120;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF123;&#xF11D;&#xF132;&#xF12F;&#xF120;&#xF121;&#xF132;&#xF13D;&#xF132;&#xF130;&#xF111;&#xF121;&#xF134;&#xF121;&#xF121;&#xF132;&#xF130;&#xF111;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1144
  },
  {
    "role": "code",
    "lines": [
      "= (unique new) 0;"
    ],
    "preprocessed": "= (unique new) 0;",
    "code": "211322110111103211010011332032233",
    "parse": [
      "=",
      [
        "unique",
        "new"
      ],
      "0"
    ],
    "spider": "&#xF136;&#xF132;&#xF12F;&#xF11F;&#xF12F;&#xF114;&#xF121;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 1145
  },
  {
    "role": "code",
    "lines": [
      "= (unique new) 1;"
    ],
    "preprocessed": "= (unique new) 1;",
    "code": "211322110111103211010011332132233",
    "parse": [
      "=",
      [
        "unique",
        "new"
      ],
      "1"
    ],
    "spider": "&#xF136;&#xF132;&#xF12F;&#xF11F;&#xF12F;&#xF114;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 1146
  },
  {
    "role": "code",
    "lines": [
      "= (unique new) 2;"
    ],
    "preprocessed": "= (unique new) 2;",
    "code": "2113221101111032110100113321032233",
    "parse": [
      "=",
      [
        "unique",
        "new"
      ],
      "2"
    ],
    "spider": "&#xF136;&#xF132;&#xF12F;&#xF11F;&#xF12F;&#xF114;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 1147
  },
  {
    "role": "code",
    "lines": [
      "not (= (unique new) (unique new));"
    ],
    "preprocessed": "not (= (unique new) (unique new));",
    "code": "21013221132211011110321101001133221101111032110100113332233",
    "parse": [
      "not",
      [
        "=",
        [
          "unique",
          "new"
        ],
        [
          "unique",
          "new"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF132;&#xF136;&#xF132;&#xF12F;&#xF11F;&#xF12F;&#xF114;&#xF121;&#xF132;&#xF12F;&#xF11F;&#xF12F;&#xF114;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1148
  },
  {
    "role": "code",
    "lines": [
      "define setup-this",
      "  (lambda (this self)",
      "    (if (single? | this)",
      "    (self)",
      "    (this)));"
    ],
    "preprocessed": "define setup-this\n  (lambda (this self)\n    (if (single? | this)\n    (self)\n    (this)));",
    "code": "2110132111000013221101032211100010321010010033221111322101010312321110001033221010010033221110001033332233",
    "parse": [
      "define",
      "setup-this",
      [
        "lambda",
        [
          "this",
          "self"
        ],
        [
          "if",
          [
            "single?",
            [
              -1,
              "this"
            ]
          ],
          [
            "self"
          ],
          [
            "this"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF130;&#xF112;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF130;&#xF113;&#xF12C;&#xF115;&#xF121;&#xF132;&#xF142;&#xF132;&#xF124;&#xF11B;&#xF101;&#xF143;&#xF130;&#xF113;&#xF121;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF132;&#xF130;&#xF113;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1149
  },
  {
    "role": "comment",
    "lines": [
      "# okay, here it comes.  don't panic!",
      "# I need to split this up into helpers, and simplify.",
      "# It basically just writes code for classes like we saw in",
      "# a previous section."
    ],
    "stanza": 1150
  },
  {
    "role": "code",
    "lines": [
      "define prev-translate (translate);"
    ],
    "preprocessed": "define prev-translate (translate);",
    "code": "2110132101111132211001332233",
    "parse": [
      "define",
      "prev-translate",
      [
        "translate"
      ]
    ],
    "spider": "&#xF140;&#xF127;&#xF120;&#xF132;&#xF123;&#xF11A;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1151
  },
  {
    "role": "code",
    "lines": [
      "define translate",
      "  (let ((prev (prev-translate)))",
      "    (? x",
      "       (if (single? (x))",
      "       (prev (x))",
      "       (if (= (head (x)) class)",
      "           (let ((name (list-ref (x) 1))",
      "             (args (list-ref (x) 2))",
      "             (fields (tail (tail (tail (x))))))",
      "         (translate",
      "          (vector",
      "           define",
      "           (name)",
      "           (vector",
      "            lambda",
      "            (prepend ext-this (args))",
      "            (vector",
      "             let",
      "             (append",
      "              (vector unique-id (vector unique new))",
      "              (map ",
      "               (tail)",
      "               (select-match (? x (= (first (x)) field)) (fields))))",
      "             (vector",
      "              let",
      "              (vector",
      "               (vector",
      "            self",
      "            (vector",
      "             reflective",
      "             (vector",
      "              lambda",
      "              (vector self)",
      "              (vector",
      "               let",
      "               (vector ",
      "                (vector",
      "                 this",
      "                 (vector setup-this ",
      "                     (vector ext-this)",
      "                     (vector self))))",
      "               (vector ",
      "                let",
      "                (vector (vector ignore-this 1))",
      "                (vector",
      "                 lambda",
      "                 (vector method)",
      "                 (list-append",
      "                  (prepend",
      "                   cond",
      "                   (list-append",
      "                (map",
      "                 (? x ",
      "                    (vector",
      "                     (vector = (vector method) (first (x)))",
      "                     (second (x))))",
      "                 (map (tail)",
      "                      (select-match ",
      "                       (? x (= (first (x)) method)) ",
      "                       (fields))))",
      "                (map",
      "                 (? x ",
      "                    (vector",
      "                     (vector = (vector method) (x))",
      "                     (vector (x))))",
      "                 (map (second)",
      "                      (select-match ",
      "                       (? x (= (first (x)) field)) ",
      "                       (fields))))))",
      "                  (vector",
      "                   (vector",
      "                (vector = (vector method) self)",
      "                (vector self))",
      "                   (vector",
      "                (vector = (vector method) (name))",
      "                (vector self self))",
      "                   (vector",
      "                (vector = (vector method) classname)",
      "                (name))",
      "                   (vector",
      "                (vector = (vector method) unknown)",
      "                (vector lambda (vector x) 0))",
      "                   (vector",
      "                (vector = (vector method) new)",
      "                0)",
      "                   (vector",
      "                (vector = (vector method) unique-id)",
      "                (vector unique-id))",
      "                   (vector",
      "                (vector = (vector method) ==)",
      "                (vector",
      "                 lambda",
      "                 (vector x)",
      "                 (vector = ",
      "                     (vector unique-id)",
      "                     (vector x unique-id))))",
      "                   (vector self unknown (vector method)))))))))))",
      "              (vector ",
      "               begin",
      "               (vector self new)",
      "               (vector self))))))))",
      "           (prev (x))))));"
    ],
    "preprocessed": "define translate\n  (let ((prev (prev-translate)))\n    (? x\n       (if (single? (x))\n       (prev (x))\n       (if (= (head (x)) class)\n           (let ((name (list-ref (x) 1))\n             (args (list-ref (x) 2))\n             (fields (tail (tail (tail (x))))))\n         (translate\n          (vector\n           define\n           (name)\n           (vector\n            lambda\n            (prepend ext-this (args))\n            (vector\n             let\n             (append\n              (vector unique-id (vector unique new))\n              (map \n               (tail)\n               (select-match (? x (= (first (x)) field)) (fields))))\n             (vector\n              let\n              (vector\n               (vector\n            self\n            (vector\n             reflective\n             (vector\n              lambda\n              (vector self)\n              (vector\n               let\n               (vector \n                (vector\n                 this\n                 (vector setup-this \n                     (vector ext-this)\n                     (vector self))))\n               (vector \n                let\n                (vector (vector ignore-this 1))\n                (vector\n                 lambda\n                 (vector method)\n                 (list-append\n                  (prepend\n                   cond\n                   (list-append\n                (map\n                 (? x \n                    (vector\n                     (vector = (vector method) (first (x)))\n                     (second (x))))\n                 (map (tail)\n                      (select-match \n                       (? x (= (first (x)) method)) \n                       (fields))))\n                (map\n                 (? x \n                    (vector\n                     (vector = (vector method) (x))\n                     (vector (x))))\n                 (map (second)\n                      (select-match \n                       (? x (= (first (x)) field)) \n                       (fields))))))\n                  (vector\n                   (vector\n                (vector = (vector method) self)\n                (vector self))\n                   (vector\n                (vector = (vector method) (name))\n                (vector self self))\n                   (vector\n                (vector = (vector method) classname)\n                (name))\n                   (vector\n                (vector = (vector method) unknown)\n                (vector lambda (vector x) 0))\n                   (vector\n                (vector = (vector method) new)\n                0)\n                   (vector\n                (vector = (vector method) unique-id)\n                (vector unique-id))\n                   (vector\n                (vector = (vector method) ==)\n                (vector\n                 lambda\n                 (vector x)\n                 (vector = \n                     (vector unique-id)\n                     (vector x unique-id))))\n                   (vector self unknown (vector method)))))))))))\n              (vector \n               begin\n               (vector self new)\n               (vector self))))))))\n           (prev (x))))));",
    "code
    "parse": [
      "define",
      "translate",
      [
        "let",
        [
          [
            "prev",
            [
              "prev-translate"
            ]
          ]
        ],
        [
          "?",
          "x",
          [
            "if",
            [
              "single?",
              [
                "x"
              ]
            ],
            [
              "prev",
              [
                "x"
              ]
            ],
            [
              "if",
              [
                "=",
                [
                  "head",
                  [
                    "x"
                  ]
                ],
                "class"
              ],
              [
                "let",
                [
                  [
                    "name",
                    [
                      "list-ref",
                      [
                        "x"
                      ],
                      "1"
                    ]
                  ],
                  [
                    "args",
                    [
                      "list-ref",
                      [
                        "x"
                      ],
                      "2"
                    ]
                  ],
                  [
                    "fields",
                    [
                      "tail",
                      [
                        "tail",
                        [
                          "tail",
                          [
                            "x"
                          ]
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  "translate",
                  [
                    "vector",
                    "define",
                    [
                      "name"
                    ],
                    [
                      "vector",
                      "lambda",
                      [
                        "prepend",
                        "ext-this",
                        [
                          "args"
                        ]
                      ],
                      [
                        "vector",
                        "let",
                        [
                          "append",
                          [
                            "vector",
                            "unique-id",
                            [
                              "vector",
                              "unique",
                              "new"
                            ]
                          ],
                          [
                            "map",
                            [
                              "tail"
                            ],
                            [
                              "select-match",
                              [
                                "?",
                                "x",
                                [
                                  "=",
                                  [
                                    "first",
                                    [
                                      "x"
                                    ]
                                  ],
                                  "field"
                                ]
                              ],
                              [
                                "fields"
                              ]
                            ]
                          ]
                        ],
                        [
                          "vector",
                          "let",
                          [
                            "vector",
                            [
                              "vector",
                              "self",
                              [
                                "vector",
                                "reflective",
                                [
                                  "vector",
                                  "lambda",
                                  [
                                    "vector",
                                    "self"
                                  ],
                                  [
                                    "vector",
                                    "let",
                                    [
                                      "vector",
                                      [
                                        "vector",
                                        "this",
                                        [
                                          "vector",
                                          "setup-this",
                                          [
                                            "vector",
                                            "ext-this"
                                          ],
                                          [
                                            "vector",
                                            "self"
                                          ]
                                        ]
                                      ]
                                    ],
                                    [
                                      "vector",
                                      "let",
                                      [
                                        "vector",
                                        [
                                          "vector",
                                          "ignore-this",
                                          "1"
                                        ]
                                      ],
                                      [
                                        "vector",
                                        "lambda",
                                        [
                                          "vector",
                                          "method"
                                        ],
                                        [
                                          "list-append",
                                          [
                                            "prepend",
                                            "cond",
                                            [
                                              "list-append",
                                              [
                                                "map",
                                                [
                                                  "?",
                                                  "x",
                                                  [
                                                    "vector",
                                                    [
                                                      "vector",
                                                      "=",
                                                      [
                                                        "vector",
                                                        "method"
                                                      ],
                                                      [
                                                        "first",
                                                        [
                                                          "x"
                                                        ]
                                                      ]
                                                    ],
                                                    [
                                                      "second",
                                                      [
                                                        "x"
                                                      ]
                                                    ]
                                                  ]
                                                ],
                                                [
                                                  "map",
                                                  [
                                                    "tail"
                                                  ],
                                                  [
                                                    "select-match",
                                                    [
                                                      "?",
                                                      "x",
                                                      [
                                                        "=",
                                                        [
                                                          "first",
                                                          [
                                                            "x"
                                                          ]
                                                        ],
                                                        "method"
                                                      ]
                                                    ],
                                                    [
                                                      "fields"
                                                    ]
                                                  ]
                                                ]
                                              ],
                                              [
                                                "map",
                                                [
                                                  "?",
                                                  "x",
                                                  [
                                                    "vector",
                                                    [
                                                      "vector",
                                                      "=",
                                                      [
                                                        "vector",
                                                        "method"
                                                      ],
                                                      [
                                                        "x"
                                                      ]
                                                    ],
                                                    [
                                                      "vector",
                                                      [
                                                        "x"
                                                      ]
                                                    ]
                                                  ]
                                                ],
                                                [
                                                  "map",
                                                  [
                                                    "second"
                                                  ],
                                                  [
                                                    "select-match",
                                                    [
                                                      "?",
                                                      "x",
                                                      [
                                                        "=",
                                                        [
                                                          "first",
                                                          [
                                                            "x"
                                                          ]
                                                        ],
                                                        "field"
                                                      ]
                                                    ],
                                                    [
                                                      "fields"
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ],
                                          [
                                            "vector",
                                            [
                                              "vector",
                                              [
                                                "vector",
                                                "=",
                                                [
                                                  "vector",
                                                  "method"
                                                ],
                                                "self"
                                              ],
                                              [
                                                "vector",
                                                "self"
                                              ]
                                            ],
                                            [
                                              "vector",
                                              [
                                                "vector",
                                                "=",
                                                [
                                                  "vector",
                                                  "method"
                                                ],
                                                [
                                                  "name"
                                                ]
                                              ],
                                              [
                                                "vector",
                                                "self",
                                                "self"
                                              ]
                                            ],
                                            [
                                              "vector",
                                              [
                                                "vector",
                                                "=",
                                                [
                                                  "vector",
                                                  "method"
                                                ],
                                                "classname"
                                              ],
                                              [
                                                "name"
                                              ]
                                            ],
                                            [
                                              "vector",
                                              [
                                                "vector",
                                                "=",
                                                [
                                                  "vector",
                                                  "method"
                                                ],
                                                "unknown"
                                              ],
                                              [
                                                "vector",
                                                "lambda",
                                                [
                                                  "vector",
                                                  "x"
                                                ],
                                                "0"
                                              ]
                                            ],
                                            [
                                              "vector",
                                              [
                                                "vector",
                                                "=",
                                                [
                                                  "vector",
                                                  "method"
                                                ],
                                                "new"
                                              ],
                                              "0"
                                            ],
                                            [
                                              "vector",
                                              [
                                                "vector",
                                                "=",
                                                [
                                                  "vector",
                                                  "method"
                                                ],
                                                "unique-id"
                                              ],
                                              [
                                                "vector",
                                                "unique-id"
                                              ]
                                            ],
                                            [
                                              "vector",
                                              [
                                                "vector",
                                                "=",
                                                [
                                                  "vector",
                                                  "method"
                                                ],
                                                "=="
                                              ],
                                              [
                                                "vector",
                                                "lambda",
                                                [
                                                  "vector",
                                                  "x"
                                                ],
                                                [
                                                  "vector",
                                                  "=",
                                                  [
                                                    "vector",
                                                    "unique-id"
                                                  ],
                                                  [
                                                    "vector",
                                                    "x",
                                                    "unique-id"
                                                  ]
                                                ]
                                              ]
                                            ],
                                            [
                                              "vector",
                                              "self",
                                              "unknown",
                                              [
                                                "vector",
                                                "method"
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ],
                          [
                            "vector",
                            "begin",
                            [
                              "vector",
                              "self",
                              "new"
                            ],
                            [
                              "vector",
                              "self"
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "prev",
                [
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF11A;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF128;&#xF111;&#xF132;&#xF127;&#xF120;&#xF121;&#xF121;&#xF121;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF132;&#xF142;&#xF132;&#xF124;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF128;&#xF111;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF126;&#xF118;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF130;&#xF114;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF12B;&#xF11F;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF121;&#xF132;&#xF130;&#xF115;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF121;&#xF132;&#xF130;&#xF116;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11A;&#xF132;&#xF123;&#xF111;&#xF140;&#xF132;&#xF12B;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF11B;&#xF132;&#xF126;&#xF11D;&#xF130;&#xF117;&#xF132;&#xF130;&#xF115;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF127;&#xF11C;&#xF132;&#xF12F;&#xF11D;&#xF132;&#xF123;&#xF111;&#xF130;&#xF118;&#xF132;&#xF123;&#xF111;&#xF12F;&#xF11F;&#xF12F;&#xF114;&#xF121;&#xF121;&#xF132;&#xF128;&#xF114;&#xF132;&#xF126;&#xF11A;&#xF121;&#xF132;&#xF12F;&#xF11E;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF132;&#xF136;&#xF132;&#xF126;&#xF120;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF130;&#xF119;&#xF121;&#xF121;&#xF132;&#xF130;&#xF116;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF127;&#xF11C;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF12C;&#xF115;&#xF132;&#xF123;&#xF111;&#xF12E;&#xF11A;&#xF132;&#xF123;&#xF111;&#xF123;&#xF11B;&#xF132;&#xF123;&#xF111;&#xF12C;&#xF115;&#xF121;&#xF132;&#xF123;&#xF111;&#xF127;&#xF11C;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF130;&#xF113;&#xF132;&#xF123;&#xF111;&#xF130;&#xF112;&#xF132;&#xF123;&#xF111;&#xF130;&#xF117;&#xF121;&#xF132;&#xF123;&#xF111;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF127;&#xF11C;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF130;&#xF11A;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF11B;&#xF132;&#xF123;&#xF111;&#xF12B;&#xF120;&#xF121;&#xF132;&#xF12F;&#xF11A;&#xF132;&#xF126;&#xF11D;&#xF12E;&#xF111;&#xF132;&#xF12F;&#xF11A;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF136;&#xF132;&#xF123;&#xF111;&#xF12B;&#xF120;&#xF121;&#xF132;&#xF126;&#xF120;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF111;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF128;&#xF114;&#xF132;&#xF126;&#xF11A;&#xF121;&#xF132;&#xF12F;&#xF11E;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF132;&#xF136;&#xF132;&#xF126;&#xF120;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF12B;&#xF120;&#xF121;&#xF121;&#xF132;&#xF130;&#xF116;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF136;&#xF132;&#xF123;&#xF111;&#xF12B;&#xF120;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF128;&#xF114;&#xF132;&#xF127;&#xF111;&#xF121;&#xF132;&#xF12F;&#xF11E;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF132;&#xF136;&#xF132;&#xF126;&#xF120;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF130;&#xF119;&#xF121;&#xF121;&#xF132;&#xF130;&#xF116;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF136;&#xF132;&#xF123;&#xF111;&#xF12B;&#xF120;&#xF121;&#xF12C;&#xF115;&#xF121;&#xF132;&#xF123;&#xF111;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF136;&#xF132;&#xF123;&#xF111;&#xF12B;&#xF120;&#xF121;&#xF132;&#xF12B;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF12C;&#xF115;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF136;&#xF132;&#xF123;&#xF111;&#xF12B;&#xF120;&#xF121;&#xF130;&#xF11B;&#xF121;&#xF132;&#xF12B;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF136;&#xF132;&#xF123;&#xF111;&#xF12B;&#xF120;&#xF121;&#xF130;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF11B;&#xF132;&#xF123;&#xF111;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF136;&#xF132;&#xF123;&#xF111;&#xF12B;&#xF120;&#xF121;&#xF12F;&#xF114;&#xF121;&#xF133;&#xF121;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF136;&#xF132;&#xF123;&#xF111;&#xF12B;&#xF120;&#xF121;&#xF130;&#xF118;&#xF121;&#xF132;&#xF123;&#xF111;&#xF130;&#xF118;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF136;&#xF132;&#xF123;&#xF111;&#xF12B;&#xF120;&#xF121;&#xF130;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF11B;&#xF132;&#xF123;&#xF111;&#xF124;&#xF118;&#xF121;&#xF132;&#xF123;&#xF111;&#xF136;&#xF132;&#xF123;&#xF111;&#xF130;&#xF118;&#xF121;&#xF132;&#xF123;&#xF111;&#xF124;&#xF118;&#xF130;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF12C;&#xF115;&#xF130;&#xF11C;&#xF132;&#xF123;&#xF111;&#xF12B;&#xF120;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF12A;&#xF11D;&#xF132;&#xF123;&#xF111;&#xF12C;&#xF115;&#xF12F;&#xF114;&#xF121;&#xF132;&#xF123;&#xF111;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF128;&#xF111;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1152
  },
  {
    "role": "comment",
    "lines": [
      "# revisit the point class example"
    ],
    "stanza": 1153
  },
  {
    "role": "code",
    "lines": [
      "class point (x y) ",
      "       (method x (x))",
      "       (method y (y))",
      "       (method + (lambda ((p point))",
      "           (point new ",
      "              (+ (x) (p x))",
      "              (+ (y) (p y)))))",
      "       (method = (lambda ((p point))",
      "           (and (= (x) (p x))",
      "            (= (y) (p y)))));"
    ],
    "preprocessed": "class point (x y) \n       (method x (x))\n       (method y (y))\n       (method + (lambda ((p point))\n           (point new \n              (+ (x) (p x))\n              (+ (y) (p y)))))\n       (method = (lambda ((p point))\n           (and (= (x) (p x))\n            (= (y) (p y)))));",
    "code": "2111000113211001010322100111321100113322100111113210011132210011133322100111113211001132211001133322100111113210103221101032221100100321100101033322110010103211010011322101032210011133221100100321001113332210103221100113322110010032110011333333221001111132113221101032221100100321100101033322110322113221001113322110010032100111333221132211001133221100100321100113333332233",
    "parse": [
      "class",
      "point",
      [
        "x",
        "y"
      ],
      [
        "method",
        "x",
        [
          "x"
        ]
      ],
      [
        "method",
        "y",
        [
          "y"
        ]
      ],
      [
        "method",
        "+",
        [
          "lambda",
          [
            [
              "p",
              "point"
            ]
          ],
          [
            "point",
            "new",
            [
              "+",
              [
                "x"
              ],
              [
                "p",
                "x"
              ]
            ],
            [
              "+",
              [
                "y"
              ],
              [
                "p",
                "y"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "=",
        [
          "lambda",
          [
            [
              "p",
              "point"
            ]
          ],
          [
            "and",
            [
              "=",
              [
                "x"
              ],
              [
                "p",
                "x"
              ]
            ],
            [
              "=",
              [
                "y"
              ],
              [
                "p",
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF12E;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF125;&#xF114;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF118;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF125;&#xF114;&#xF132;&#xF125;&#xF114;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF13D;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF132;&#xF128;&#xF115;&#xF12E;&#xF11B;&#xF121;&#xF121;&#xF132;&#xF12E;&#xF11B;&#xF12F;&#xF114;&#xF132;&#xF13D;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF128;&#xF115;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF13D;&#xF132;&#xF125;&#xF114;&#xF121;&#xF132;&#xF128;&#xF115;&#xF125;&#xF114;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF136;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF132;&#xF128;&#xF115;&#xF12E;&#xF11B;&#xF121;&#xF121;&#xF132;&#xF139;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF128;&#xF115;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF136;&#xF132;&#xF125;&#xF114;&#xF121;&#xF132;&#xF128;&#xF115;&#xF125;&#xF114;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1154
  },
  {
    "role": "comment",
    "lines": [
      "# note the appearance of new in the next line --",
      "# this is the only difference to previous version"
    ],
    "stanza": 1155
  },
  {
    "role": "code",
    "lines": [
      "define point1 (point new 1 11);"
    ],
    "preprocessed": "define point1 (point new 1 11);",
    "code": "211013211001100322110010103211010011321321011332233",
    "parse": [
      "define",
      "point1",
      [
        "point",
        "new",
        "1",
        "11"
      ]
    ],
    "spider": "&#xF140;&#xF12E;&#xF11D;&#xF132;&#xF12E;&#xF11B;&#xF12F;&#xF114;&#xF134;&#xF13E;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1156
  },
  {
    "role": "code",
    "lines": [
      "define point2 (point new 2 22);"
    ],
    "preprocessed": "define point2 (point new 2 22);",
    "code": "21101321100110132211001010321101001132103210110332233",
    "parse": [
      "define",
      "point2",
      [
        "point",
        "new",
        "2",
        "22"
      ]
    ],
    "spider": "&#xF140;&#xF12E;&#xF11E;&#xF132;&#xF12E;&#xF11B;&#xF12F;&#xF114;&#xF135;&#xF123;&#xF117;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1157
  },
  {
    "role": "code",
    "lines": [
      "= 1 (point1 x);"
    ],
    "preprocessed": "= 1 (point1 x);",
    "code": "2113213221100110032100111332233",
    "parse": [
      "=",
      "1",
      [
        "point1",
        "x"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF132;&#xF12E;&#xF11D;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1158
  },
  {
    "role": "code",
    "lines": [
      "= 22 (point2 y);"
    ],
    "preprocessed": "= 22 (point2 y);",
    "code": "21132101103221100110132110011332233",
    "parse": [
      "=",
      "22",
      [
        "point2",
        "y"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF117;&#xF132;&#xF12E;&#xF11E;&#xF125;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1159
  },
  {
    "role": "code",
    "lines": [
      "= 11 ((point new 11 12) x);"
    ],
    "preprocessed": "= 11 ((point new 11 12) x);",
    "code": "2113210113222110010103211010011321011321100332100111332233",
    "parse": [
      "=",
      "11",
      [
        [
          "point",
          "new",
          "11",
          "12"
        ],
        "x"
      ]
    ],
    "spider": "&#xF136;&#xF13E;&#xF132;&#xF132;&#xF12E;&#xF11B;&#xF12F;&#xF114;&#xF13E;&#xF13F;&#xF121;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1160
  },
  {
    "role": "code",
    "lines": [
      "= 11 (((point new 11 12) point) x);"
    ],
    "preprocessed": "= 11 (((point new 11 12) point) x);",
    "code": "2113210113222211001010321101001132101132110033211001010332100111332233",
    "parse": [
      "=",
      "11",
      [
        [
          [
            "point",
            "new",
            "11",
            "12"
          ],
          "point"
        ],
        "x"
      ]
    ],
    "spider": "&#xF136;&#xF13E;&#xF132;&#xF132;&#xF132;&#xF12E;&#xF11B;&#xF12F;&#xF114;&#xF13E;&#xF13F;&#xF121;&#xF12E;&#xF11B;&#xF121;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1161
  },
  {
    "role": "code",
    "lines": [
      "= 16 (((point new 16 17) point) x);"
    ],
    "preprocessed": "= 16 (((point new 16 17) point) x);",
    "code": "2113210000322221100101032110100113210000321000133211001010332100111332233",
    "parse": [
      "=",
      "16",
      [
        [
          [
            "point",
            "new",
            "16",
            "17"
          ],
          "point"
        ],
        "x"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF111;&#xF132;&#xF132;&#xF132;&#xF12E;&#xF11B;&#xF12F;&#xF114;&#xF123;&#xF111;&#xF123;&#xF112;&#xF121;&#xF12E;&#xF11B;&#xF121;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1162
  },
  {
    "role": "code",
    "lines": [
      "= 33 (point1 + (point2) y);"
    ],
    "preprocessed": "= 33 (point1 + (point2) y);",
    "code": "211321000013221100110032101032211001101332110011332233",
    "parse": [
      "=",
      "33",
      [
        "point1",
        "+",
        [
          "point2"
        ],
        "y"
      ]
    ],
    "spider": "&#xF136;&#xF124;&#xF112;&#xF132;&#xF12E;&#xF11D;&#xF13D;&#xF132;&#xF12E;&#xF11E;&#xF121;&#xF125;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1163
  },
  {
    "role": "code",
    "lines": [
      "point1 + (point2) = (point new 3 33);"
    ],
    "preprocessed": "point1 + (point2) = (point new 3 33);",
    "code": "2110011003210103221100110133211322110010103211010011321132100001332233",
    "parse": [
      "point1",
      "+",
      [
        "point2"
      ],
      "=",
      [
        "point",
        "new",
        "3",
        "33"
      ]
    ],
    "spider": "&#xF12E;&#xF11D;&#xF13D;&#xF132;&#xF12E;&#xF11E;&#xF121;&#xF136;&#xF132;&#xF12E;&#xF11B;&#xF12F;&#xF114;&#xF136;&#xF124;&#xF112;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1164
  },
  {
    "role": "code",
    "lines": [
      "point2 + (point1) = (point new 3 33);"
    ],
    "preprocessed": "point2 + (point1) = (point new 3 33);",
    "code": "2110011013210103221100110033211322110010103211010011321132100001332233",
    "parse": [
      "point2",
      "+",
      [
        "point1"
      ],
      "=",
      [
        "point",
        "new",
        "3",
        "33"
      ]
    ],
    "spider": "&#xF12E;&#xF11E;&#xF13D;&#xF132;&#xF12E;&#xF11D;&#xF121;&#xF136;&#xF132;&#xF12E;&#xF11B;&#xF12F;&#xF114;&#xF136;&#xF124;&#xF112;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1165
  },
  {
    "role": "code",
    "lines": [
      "(point new 100 200) + (point new 200 100) = (point new 300 300);"
    ],
    "preprocessed": "(point new 100 200) + (point new 200 100) = (point new 300 300);",
    "code": "22110010103211010011321100100321100100033210103221100101032110100113211001000321100100332113221100101032110100113210010110032100101100332233",
    "parse": [
      [
        "point",
        "new",
        "100",
        "200"
      ],
      "+",
      [
        "point",
        "new",
        "200",
        "100"
      ],
      "=",
      [
        "point",
        "new",
        "300",
        "300"
      ]
    ],
    "spider": "&#xF132;&#xF12E;&#xF11B;&#xF12F;&#xF114;&#xF128;&#xF115;&#xF12E;&#xF119;&#xF121;&#xF13D;&#xF132;&#xF12E;&#xF11B;&#xF12F;&#xF114;&#xF12E;&#xF119;&#xF128;&#xF115;&#xF121;&#xF136;&#xF132;&#xF12E;&#xF11B;&#xF12F;&#xF114;&#xF123;&#xF102;&#xF11D;&#xF123;&#xF102;&#xF11D;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1166
  },
  {
    "role": "code",
    "lines": [
      "instanceof point (point1);"
    ],
    "preprocessed": "instanceof point (point1);",
    "code": "210111011321100101032211001100332233",
    "parse": [
      "instanceof",
      "point",
      [
        "point1"
      ]
    ],
    "spider": "&#xF12D;&#xF11C;&#xF12E;&#xF11B;&#xF132;&#xF12E;&#xF11D;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1167
  },
  {
    "role": "code",
    "lines": [
      "not (instanceof int (point1));"
    ],
    "preprocessed": "not (instanceof int (point1));",
    "code": "2101322101110113210111001322110011003332233",
    "parse": [
      "not",
      [
        "instanceof",
        "int",
        [
          "point1"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF132;&#xF12D;&#xF11C;&#xF12D;&#xF11A;&#xF132;&#xF12E;&#xF11D;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1168
  },
  {
    "role": "comment",
    "lines": [
      "# Check that virtual calls can be made to work.",
      "# They are a little awkward right now.",
      "# Should they be the default?"
    ],
    "stanza": 1169
  },
  {
    "role": "code",
    "lines": [
      "class c1 ()",
      "       (method getid 100)",
      "       (method altid (this getid));"
    ],
    "preprocessed": "class c1 ()\n       (method getid 100)\n       (method altid (this getid));",
    "code": "21110001132111011013232210011111321110111032110010033221001111132111011113221110001032111011103332233",
    "parse": [
      "class",
      "c1",
      [],
      [
        "method",
        "getid",
        "100"
      ],
      [
        "method",
        "altid",
        [
          "this",
          "getid"
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF130;&#xF11E;&#xF143;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11F;&#xF128;&#xF115;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF120;&#xF132;&#xF130;&#xF113;&#xF130;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1170
  },
  {
    "role": "code",
    "lines": [
      "class c2 ()",
      "       (field super-ref (make-cell 0))",
      "       (method new (set! (super-ref) (c1 | this)))",
      "       (method super (? x ((get! | super-ref) (x))))",
      "       (method unknown (? x (self super | x)))",
      "       (method getid 200);"
    ],
    "preprocessed": "class c2 ()\n       (field super-ref (make-cell 0))\n       (method new (set! (super-ref) (c1 | this)))\n       (method super (? x ((get! | super-ref) (x))))\n       (method unknown (? x (self super | x)))\n       (method getid 200);",
    "code": "211100011321111000032322111010003211110001322110113203332210011111321101001132211100322111100013322111011013123211100010333322100111113211010110322110032100111322211101312321111000133221001113333322100111113211101011322110032100111322101001003211010110312321001113333221001111132111011103211001000332233",
    "parse": [
      "class",
      "c2",
      [],
      [
        "field",
        "super-ref",
        [
          "make-cell",
          "0"
        ]
      ],
      [
        "method",
        "new",
        [
          "set!",
          [
            "super-ref"
          ],
          [
            "c1",
            [
              -1,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          "?",
          "x",
          [
            [
              "get!",
              [
                -1,
                "super-ref"
              ]
            ],
            [
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "?",
          "x",
          [
            "self",
            "super",
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "getid",
        "200"
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF131;&#xF111;&#xF143;&#xF132;&#xF130;&#xF119;&#xF131;&#xF112;&#xF132;&#xF123;&#xF11C;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF114;&#xF132;&#xF123;&#xF11D;&#xF132;&#xF131;&#xF112;&#xF121;&#xF132;&#xF130;&#xF11E;&#xF101;&#xF143;&#xF130;&#xF113;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF117;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF132;&#xF132;&#xF123;&#xF11E;&#xF101;&#xF143;&#xF131;&#xF112;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11C;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF132;&#xF12C;&#xF115;&#xF12F;&#xF117;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11F;&#xF12E;&#xF119;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1171
  },
  {
    "role": "code",
    "lines": [
      "= 100 | c1 new altid;"
    ],
    "preprocessed": "= 100 | c1 new altid;",
    "code": "21132110010031232111011013211010011321110111132233",
    "parse": [
      "=",
      "100",
      [
        -1,
        "c1",
        "new",
        "altid"
      ]
    ],
    "spider": "&#xF136;&#xF128;&#xF115;&#xF101;&#xF143;&#xF130;&#xF11E;&#xF12F;&#xF114;&#xF130;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 1172
  },
  {
    "role": "code",
    "lines": [
      "= 200 | c2 new altid;"
    ],
    "preprocessed": "= 200 | c2 new altid;",
    "code": "211321100100031232111100003211010011321110111132233",
    "parse": [
      "=",
      "200",
      [
        -1,
        "c2",
        "new",
        "altid"
      ]
    ],
    "spider": "&#xF136;&#xF12E;&#xF119;&#xF101;&#xF143;&#xF131;&#xF111;&#xF12F;&#xF114;&#xF130;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 1173
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "wrapper class for cells",
    "section_category": "OBJECT",
    "section_index": 39,
    "stanza": 1174
  },
  {
    "role": "code",
    "lines": [
      "class cell (initial-value)",
      "       (field content (make-cell (initial-value)))",
      "       (method get (get! (content)))",
      "       (method set (lambda (new-value)",
      "             (set! (content) (new-value))))",
      "       (method reset (self set (initial-value)))",
      "       (method unknown (lambda (x) ((objectify (self get)) (x))));"
    ],
    "preprocessed": "class cell (initial-value)\n       (field content (make-cell (initial-value)))\n       (method get (get! (content)))\n       (method set (lambda (new-value)\n             (set! (content) (new-value))))\n       (method reset (self set (initial-value)))\n       (method unknown (lambda (x) ((objectify (self get)) (x))));",
    "code": "21110001132111100103221111001133221110100032111101003221101132211110011333322100111113211110101322111013221111010033332210011111321111011032211010322111101113322111003221111010033221111011133333221001111132111110003221010010032111101103221111001133332210011111321110101132211010322100111332221011101032210100100321111010133322100111333332233",
    "parse": [
      "class",
      "cell",
      [
        "initial-value"
      ],
      [
        "field",
        "content",
        [
          "make-cell",
          [
            "initial-value"
          ]
        ]
      ],
      [
        "method",
        "get",
        [
          "get!",
          [
            "content"
          ]
        ]
      ],
      [
        "method",
        "set",
        [
          "lambda",
          [
            "new-value"
          ],
          [
            "set!",
            [
              "content"
            ],
            [
              "new-value"
            ]
          ]
        ]
      ],
      [
        "method",
        "reset",
        [
          "self",
          "set",
          [
            "initial-value"
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            [
              "objectify",
              [
                "self",
                "get"
              ]
            ],
            [
              "x"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF131;&#xF113;&#xF132;&#xF131;&#xF114;&#xF121;&#xF132;&#xF130;&#xF119;&#xF131;&#xF115;&#xF132;&#xF123;&#xF11C;&#xF132;&#xF131;&#xF114;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF131;&#xF116;&#xF132;&#xF123;&#xF11E;&#xF132;&#xF131;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF131;&#xF117;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF131;&#xF118;&#xF121;&#xF132;&#xF123;&#xF11D;&#xF132;&#xF131;&#xF115;&#xF121;&#xF132;&#xF131;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF131;&#xF119;&#xF132;&#xF12C;&#xF115;&#xF131;&#xF117;&#xF132;&#xF131;&#xF114;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11C;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF132;&#xF12D;&#xF11B;&#xF132;&#xF12C;&#xF115;&#xF131;&#xF116;&#xF121;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1175
  },
  {
    "role": "code",
    "lines": [
      "define cell-test1 (cell new 15);"
    ],
    "preprocessed": "define cell-test1 (cell new 15);",
    "code": "211013211111001322111100103211010011321111332233",
    "parse": [
      "define",
      "cell-test1",
      [
        "cell",
        "new",
        "15"
      ]
    ],
    "spider": "&#xF140;&#xF131;&#xF11A;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF142;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1176
  },
  {
    "role": "code",
    "lines": [
      "= 15 (cell-test1 get);"
    ],
    "preprocessed": "= 15 (cell-test1 get);",
    "code": "211321111322111110013211110101332233",
    "parse": [
      "=",
      "15",
      [
        "cell-test1",
        "get"
      ]
    ],
    "spider": "&#xF136;&#xF142;&#xF132;&#xF131;&#xF11A;&#xF131;&#xF116;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1177
  },
  {
    "role": "code",
    "lines": [
      "cell-test1 set 82;"
    ],
    "preprocessed": "cell-test1 set 82;",
    "code": "211111001321111011032101001032233",
    "parse": [
      "cell-test1",
      "set",
      "82"
    ],
    "spider": "&#xF131;&#xF11A;&#xF131;&#xF117;&#xF127;&#xF113;&#xF132;&#xF143;&#xF121;",
    "stanza": 1178
  },
  {
    "role": "code",
    "lines": [
      "= 82 (cell-test1 get);"
    ],
    "preprocessed": "= 82 (cell-test1 get);",
    "code": "211321010010322111110013211110101332233",
    "parse": [
      "=",
      "82",
      [
        "cell-test1",
        "get"
      ]
    ],
    "spider": "&#xF136;&#xF127;&#xF113;&#xF132;&#xF131;&#xF11A;&#xF131;&#xF116;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1179
  },
  {
    "role": "code",
    "lines": [
      "define cell-test2 (cell new (point new 120 150));"
    ],
    "preprocessed": "define cell-test2 (cell new (point new 120 150));",
    "code": "21101321111101032211110010321101001132211001010321101001132111100032100101103332233",
    "parse": [
      "define",
      "cell-test2",
      [
        "cell",
        "new",
        [
          "point",
          "new",
          "120",
          "150"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF131;&#xF11B;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF132;&#xF12E;&#xF11B;&#xF12F;&#xF114;&#xF129;&#xF119;&#xF12B;&#xF117;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1180
  },
  {
    "role": "code",
    "lines": [
      "define cell-test3 (cell new (point new 300 300));"
    ],
    "preprocessed": "define cell-test3 (cell new (point new 300 300));",
    "code": "21101321111101132211110010321101001132211001010321101001132100101100321001011003332233",
    "parse": [
      "define",
      "cell-test3",
      [
        "cell",
        "new",
        [
          "point",
          "new",
          "300",
          "300"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF131;&#xF11C;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF132;&#xF12E;&#xF11B;&#xF12F;&#xF114;&#xF123;&#xF102;&#xF11D;&#xF123;&#xF102;&#xF11D;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1181
  },
  {
    "role": "code",
    "lines": [
      "cell-test2 + (cell-test3) = (point new 420 450);"
    ],
    "preprocessed": "cell-test2 + (cell-test3) = (point new 420 450);",
    "code": "21111101032101032211111011332113221100101032110100113211010010032111000010332233",
    "parse": [
      "cell-test2",
      "+",
      [
        "cell-test3"
      ],
      "=",
      [
        "point",
        "new",
        "420",
        "450"
      ]
    ],
    "spider": "&#xF131;&#xF11B;&#xF13D;&#xF132;&#xF131;&#xF11C;&#xF121;&#xF136;&#xF132;&#xF12E;&#xF11B;&#xF12F;&#xF114;&#xF123;&#xF10A;&#xF115;&#xF123;&#xF10C;&#xF113;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1182
  },
  {
    "role": "code",
    "lines": [
      "not (cell-test2 = (cell-test3));"
    ],
    "preprocessed": "not (cell-test2 = (cell-test3));",
    "code": "2101322111110103211322111110113332233",
    "parse": [
      "not",
      [
        "cell-test2",
        "=",
        [
          "cell-test3"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF132;&#xF131;&#xF11B;&#xF136;&#xF132;&#xF131;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1183
  },
  {
    "role": "code",
    "lines": [
      "cell-test3 set (cell-test2);"
    ],
    "preprocessed": "cell-test3 set (cell-test2);",
    "code": "211111011321111011032211111010332233",
    "parse": [
      "cell-test3",
      "set",
      [
        "cell-test2"
      ]
    ],
    "spider": "&#xF131;&#xF11C;&#xF131;&#xF117;&#xF132;&#xF131;&#xF11B;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1184
  },
  {
    "role": "code",
    "lines": [
      "cell-test2 = (cell-test3);"
    ],
    "preprocessed": "cell-test2 = (cell-test3);",
    "code": "211111010321132211111011332233",
    "parse": [
      "cell-test2",
      "=",
      [
        "cell-test3"
      ]
    ],
    "spider": "&#xF131;&#xF11B;&#xF136;&#xF132;&#xF131;&#xF11C;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1185
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "playing around with doors and rooms",
    "section_category": "MUD",
    "section_index": 40,
    "stanza": 1186
  },
  {
    "role": "code",
    "lines": [
      "class door ((src room) (dest room))",
      "       (method new (begin",
      "             (src add (self))",
      "             (dest add (self))))",
      "       (method access-from (lambda ((current room))",
      "                 (cond ((current == (src)) (dest))",
      "                   ((current == (dest)) (src))",
      "                   0)))",
      "       (method is-present (lambda ((current room))",
      "                (cond ((current == (src)) (true))",
      "                  ((current == (dest)) (true))",
      "                  (false))));"
    ],
    "preprocessed": "class door ((src room) (dest room))\n       (method new (begin\n             (src add (self))\n             (dest add (self))))\n       (method access-from (lambda ((current room))\n                 (cond ((current == (src)) (dest))\n                   ((current == (dest)) (src))\n                   0)))\n       (method is-present (lambda ((current room))\n                (cond ((current == (src)) (true))\n                  ((current == (dest)) (true))\n                  (false))));",
    "code": "21110001132111111003222111111013211111110332210000000032111111103332210011111321101001132210001100322111111013211100113221010010033322100000000321110011322101001003333322100111113210000000132211010322210101110321111111033322110000003222101011103211101100322111111013332210000000033322210101110321110110032210000000033322111111013332033332210011111321000000103221101032221010111032111111103332211000000322210101110321110110032211111101333221333222101011103211101100322100000000333221333220333332233",
    "parse": [
      "class",
      "door",
      [
        [
          "src",
          "room"
        ],
        [
          "dest",
          "room"
        ]
      ],
      [
        "method",
        "new",
        [
          "begin",
          [
            "src",
            "add",
            [
              "self"
            ]
          ],
          [
            "dest",
            "add",
            [
              "self"
            ]
          ]
        ]
      ],
      [
        "method",
        "access-from",
        [
          "lambda",
          [
            [
              "current",
              "room"
            ]
          ],
          [
            "cond",
            [
              [
                "current",
                "==",
                [
                  "src"
                ]
              ],
              [
                "dest"
              ]
            ],
            [
              [
                "current",
                "==",
                [
                  "dest"
                ]
              ],
              [
                "src"
              ]
            ],
            "0"
          ]
        ]
      ],
      [
        "method",
        "is-present",
        [
          "lambda",
          [
            [
              "current",
              "room"
            ]
          ],
          [
            "cond",
            [
              [
                "current",
                "==",
                [
                  "src"
                ]
              ],
              [
                "true"
              ]
            ],
            [
              [
                "current",
                "==",
                [
                  "dest"
                ]
              ],
              [
                "true"
              ]
            ],
            [
              "false"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF131;&#xF11D;&#xF132;&#xF132;&#xF131;&#xF11E;&#xF131;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF100;&#xF111;&#xF131;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF114;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF131;&#xF11E;&#xF129;&#xF114;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF123;&#xF100;&#xF111;&#xF129;&#xF114;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF100;&#xF112;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF132;&#xF12C;&#xF11F;&#xF131;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF12C;&#xF11F;&#xF130;&#xF11D;&#xF132;&#xF131;&#xF11E;&#xF121;&#xF121;&#xF132;&#xF123;&#xF100;&#xF111;&#xF121;&#xF121;&#xF132;&#xF132;&#xF12C;&#xF11F;&#xF130;&#xF11D;&#xF132;&#xF123;&#xF100;&#xF111;&#xF121;&#xF121;&#xF132;&#xF131;&#xF11E;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF100;&#xF113;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF132;&#xF12C;&#xF11F;&#xF131;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF12C;&#xF11F;&#xF130;&#xF11D;&#xF132;&#xF131;&#xF11E;&#xF121;&#xF121;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF12C;&#xF11F;&#xF130;&#xF11D;&#xF132;&#xF123;&#xF100;&#xF111;&#xF121;&#xF121;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1187
  },
  {
    "role": "code",
    "lines": [
      "class room (name)",
      "       (field content (container new))",
      "       (method name (name))",
      "       (method unknown (lambda (x) (content (x))));"
    ],
    "preprocessed": "class room (name)\n       (field content (container new))\n       (method name (name))\n       (method unknown (lambda (x) (content (x))));",
    "code": "211100011321111111032210011110332211101000321111010032211001110321101001133322100111113210011110322100111103332210011111321110101132211010322100111332211110100322100111333332233",
    "parse": [
      "class",
      "room",
      [
        "name"
      ],
      [
        "field",
        "content",
        [
          "container",
          "new"
        ]
      ],
      [
        "method",
        "name",
        [
          "name"
        ]
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            "content",
            [
              "x"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF131;&#xF11F;&#xF132;&#xF12B;&#xF11F;&#xF121;&#xF132;&#xF130;&#xF119;&#xF131;&#xF115;&#xF132;&#xF12E;&#xF11F;&#xF12F;&#xF114;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12B;&#xF11F;&#xF132;&#xF12B;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11C;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF131;&#xF115;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1188
  },
  {
    "role": "comment",
    "lines": [
      "# need to fix up containers to use object equality"
    ],
    "stanza": 1189
  },
  {
    "role": "code",
    "lines": [
      "define object-element",
      "  (lambda (n lst)",
      "    (> (list-length ",
      "    (select-match (lambda (x) (x == (n))) (lst))) ",
      "       0));"
    ],
    "preprocessed": "define object-element\n  (lambda (n lst)\n    (> (list-length \n    (select-match (lambda (x) (x == (n))) (lst))) \n       0));",
    "code": "211013210000001132211010322100010032100100033221003221001010322110111013221101032210011133221001113211101100322100010033332210010003333203332233",
    "parse": [
      "define",
      "object-element",
      [
        "lambda",
        [
          "n",
          "lst"
        ],
        [
          ">",
          [
            "list-length",
            [
              "select-match",
              [
                "lambda",
                [
                  "x"
                ],
                [
                  "x",
                  "==",
                  [
                    "n"
                  ]
                ]
              ],
              [
                "lst"
              ]
            ]
          ],
          "0"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF100;&#xF114;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF126;&#xF115;&#xF126;&#xF119;&#xF121;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF132;&#xF12F;&#xF11E;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF118;&#xF130;&#xF11D;&#xF132;&#xF126;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1190
  },
  {
    "role": "code",
    "lines": [
      "class container ()",
      "    (field contents (cell new (vector)))",
      "    (method inventory (contents get))",
      "    (method add (lambda (x) ",
      "          (if (not (object-element (x) (contents get)))",
      "              (contents set (prepend (x) (contents get)))",
      "              (false))));"
    ],
    "preprocessed": "class container ()\n    (field contents (cell new (vector)))\n    (method inventory (contents get))\n    (method add (lambda (x) \n          (if (not (object-element (x) (contents get)))\n              (contents set (prepend (x) (contents get)))\n              (false))));",
    "code": "21110001132110011103232211101000321100111132211110010321101001132210000333322100111113211010000322110011113211110101333221001111132111001132211010322100111332211113221013221000000113221001113322110011113211110101333322110011113211110110322100110032210011133221100111132111101013333220333332233",
    "parse": [
      "class",
      "container",
      [],
      [
        "field",
        "contents",
        [
          "cell",
          "new",
          [
            "vector"
          ]
        ]
      ],
      [
        "method",
        "inventory",
        [
          "contents",
          "get"
        ]
      ],
      [
        "method",
        "add",
        [
          "lambda",
          [
            "x"
          ],
          [
            "if",
            [
              "not",
              [
                "object-element",
                [
                  "x"
                ],
                [
                  "contents",
                  "get"
                ]
              ]
            ],
            [
              "contents",
              "set",
              [
                "prepend",
                [
                  "x"
                ],
                [
                  "contents",
                  "get"
                ]
              ]
            ],
            [
              "false"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF12E;&#xF11F;&#xF143;&#xF132;&#xF130;&#xF119;&#xF12E;&#xF120;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF132;&#xF123;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF111;&#xF132;&#xF12E;&#xF120;&#xF131;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF129;&#xF114;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF138;&#xF132;&#xF123;&#xF100;&#xF114;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12E;&#xF120;&#xF131;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12E;&#xF120;&#xF131;&#xF117;&#xF132;&#xF126;&#xF11D;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12E;&#xF120;&#xF131;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1191
  },
  {
    "role": "code",
    "lines": [
      "define hall (room new 0);"
    ],
    "preprocessed": "define hall (room new 0);",
    "code": "2110132100000100322111111103211010011320332233",
    "parse": [
      "define",
      "hall",
      [
        "room",
        "new",
        "0"
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF100;&#xF115;&#xF132;&#xF131;&#xF11F;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1192
  },
  {
    "role": "code",
    "lines": [
      "define kitchen (room new 1);"
    ],
    "preprocessed": "define kitchen (room new 1);",
    "code": "2110132100000101322111111103211010011321332233",
    "parse": [
      "define",
      "kitchen",
      [
        "room",
        "new",
        "1"
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF100;&#xF116;&#xF132;&#xF131;&#xF11F;&#xF12F;&#xF114;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1193
  },
  {
    "role": "code",
    "lines": [
      "define door1 (door new (hall) (kitchen));"
    ],
    "preprocessed": "define door1 (door new (hall) (kitchen));",
    "code": "211013210000011032211111100321101001132210000010033221000001013332233",
    "parse": [
      "define",
      "door1",
      [
        "door",
        "new",
        [
          "hall"
        ],
        [
          "kitchen"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF100;&#xF117;&#xF132;&#xF131;&#xF11D;&#xF12F;&#xF114;&#xF132;&#xF123;&#xF100;&#xF115;&#xF121;&#xF132;&#xF123;&#xF100;&#xF116;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1194
  },
  {
    "role": "code",
    "lines": [
      "(first (hall inventory)) == (door1);"
    ],
    "preprocessed": "(first (hall inventory)) == (door1);",
    "code": "2210011113221000001003211010000333211101100322100000110332233",
    "parse": [
      [
        "first",
        [
          "hall",
          "inventory"
        ]
      ],
      "==",
      [
        "door1"
      ]
    ],
    "spider": "&#xF132;&#xF126;&#xF120;&#xF132;&#xF123;&#xF100;&#xF115;&#xF12F;&#xF111;&#xF121;&#xF121;&#xF130;&#xF11D;&#xF132;&#xF123;&#xF100;&#xF117;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1195
  },
  {
    "role": "code",
    "lines": [
      "(first (kitchen inventory)) == (door1);"
    ],
    "preprocessed": "(first (kitchen inventory)) == (door1);",
    "code": "2210011113221000001013211010000333211101100322100000110332233",
    "parse": [
      [
        "first",
        [
          "kitchen",
          "inventory"
        ]
      ],
      "==",
      [
        "door1"
      ]
    ],
    "spider": "&#xF132;&#xF126;&#xF120;&#xF132;&#xF123;&#xF100;&#xF116;&#xF12F;&#xF111;&#xF121;&#xF121;&#xF130;&#xF11D;&#xF132;&#xF123;&#xF100;&#xF117;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1196
  },
  {
    "role": "code",
    "lines": [
      "door1 access-from (hall) == (kitchen);"
    ],
    "preprocessed": "door1 access-from (hall) == (kitchen);",
    "code": "21000001103210000000132210000010033211101100322100000101332233",
    "parse": [
      "door1",
      "access-from",
      [
        "hall"
      ],
      "==",
      [
        "kitchen"
      ]
    ],
    "spider": "&#xF123;&#xF100;&#xF117;&#xF123;&#xF100;&#xF112;&#xF132;&#xF123;&#xF100;&#xF115;&#xF121;&#xF130;&#xF11D;&#xF132;&#xF123;&#xF100;&#xF116;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1197
  },
  {
    "role": "code",
    "lines": [
      "not (door1 access-from (hall) == (hall));"
    ],
    "preprocessed": "not (door1 access-from (hall) == (hall));",
    "code": "210132210000011032100000001322100000100332111011003221000001003332233",
    "parse": [
      "not",
      [
        "door1",
        "access-from",
        [
          "hall"
        ],
        "==",
        [
          "hall"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF132;&#xF123;&#xF100;&#xF117;&#xF123;&#xF100;&#xF112;&#xF132;&#xF123;&#xF100;&#xF115;&#xF121;&#xF130;&#xF11D;&#xF132;&#xF123;&#xF100;&#xF115;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1198
  },
  {
    "role": "code",
    "lines": [
      "door1 access-from (kitchen) == (hall);"
    ],
    "preprocessed": "door1 access-from (kitchen) == (hall);",
    "code": "21000001103210000000132210000010133211101100322100000100332233",
    "parse": [
      "door1",
      "access-from",
      [
        "kitchen"
      ],
      "==",
      [
        "hall"
      ]
    ],
    "spider": "&#xF123;&#xF100;&#xF117;&#xF123;&#xF100;&#xF112;&#xF132;&#xF123;&#xF100;&#xF116;&#xF121;&#xF130;&#xF11D;&#xF132;&#xF123;&#xF100;&#xF115;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1199
  },
  {
    "role": "code",
    "lines": [
      "define stairs (room new 2);"
    ],
    "preprocessed": "define stairs (room new 2);",
    "code": "21101321000001113221111111032110100113210332233",
    "parse": [
      "define",
      "stairs",
      [
        "room",
        "new",
        "2"
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF100;&#xF118;&#xF132;&#xF131;&#xF11F;&#xF12F;&#xF114;&#xF135;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1200
  },
  {
    "role": "code",
    "lines": [
      "define lawn (room new 3);"
    ],
    "preprocessed": "define lawn (room new 3);",
    "code": "21101321000010003221111111032110100113211332233",
    "parse": [
      "define",
      "lawn",
      [
        "room",
        "new",
        "3"
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF100;&#xF119;&#xF132;&#xF131;&#xF11F;&#xF12F;&#xF114;&#xF136;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1201
  },
  {
    "role": "code",
    "lines": [
      "define bedroom (room new 4);"
    ],
    "preprocessed": "define bedroom (room new 4);",
    "code": "211013210000100132211111110321101001132100332233",
    "parse": [
      "define",
      "bedroom",
      [
        "room",
        "new",
        "4"
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF100;&#xF11A;&#xF132;&#xF131;&#xF11F;&#xF12F;&#xF114;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1202
  },
  {
    "role": "code",
    "lines": [
      "define nowhere (room new 0);"
    ],
    "preprocessed": "define nowhere (room new 0);",
    "code": "2110132100001010322111111103211010011320332233",
    "parse": [
      "define",
      "nowhere",
      [
        "room",
        "new",
        "0"
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF100;&#xF11B;&#xF132;&#xF131;&#xF11F;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1203
  },
  {
    "role": "code",
    "lines": [
      "define door2 (door new (hall) (lawn));"
    ],
    "preprocessed": "define door2 (door new (hall) (lawn));",
    "code": "211013210000101132211111100321101001132210000010033221000010003332233",
    "parse": [
      "define",
      "door2",
      [
        "door",
        "new",
        [
          "hall"
        ],
        [
          "lawn"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF100;&#xF11C;&#xF132;&#xF131;&#xF11D;&#xF12F;&#xF114;&#xF132;&#xF123;&#xF100;&#xF115;&#xF121;&#xF132;&#xF123;&#xF100;&#xF119;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1204
  },
  {
    "role": "code",
    "lines": [
      "define door3 (door new (hall) (stairs));"
    ],
    "preprocessed": "define door3 (door new (hall) (stairs));",
    "code": "211013210000110032211111100321101001132210000010033221000001113332233",
    "parse": [
      "define",
      "door3",
      [
        "door",
        "new",
        [
          "hall"
        ],
        [
          "stairs"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF100;&#xF11D;&#xF132;&#xF131;&#xF11D;&#xF12F;&#xF114;&#xF132;&#xF123;&#xF100;&#xF115;&#xF121;&#xF132;&#xF123;&#xF100;&#xF118;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1205
  },
  {
    "role": "code",
    "lines": [
      "define door4 (door new (stairs) (bedroom));"
    ],
    "preprocessed": "define door4 (door new (stairs) (bedroom));",
    "code": "211013210000110132211111100321101001132210000011133221000010013332233",
    "parse": [
      "define",
      "door4",
      [
        "door",
        "new",
        [
          "stairs"
        ],
        [
          "bedroom"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF100;&#xF11E;&#xF132;&#xF131;&#xF11D;&#xF12F;&#xF114;&#xF132;&#xF123;&#xF100;&#xF118;&#xF121;&#xF132;&#xF123;&#xF100;&#xF11A;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1206
  },
  {
    "role": "code",
    "lines": [
      "class character ()",
      "       (field location (cell new 0))",
      "       (field name (cell new 0))",
      "       (method set-room (lambda ((r room)) ",
      "              (begin",
      "                (if (not (single? | location get))",
      "                (location get remove (self))",
      "                0)",
      "                (r add (self))",
      "                (location set (r)))))",
      "       (method get-room (location get))",
      "       (method set-name (lambda (n) (name set | n)))",
      "       (method get-name (name get))",
      "       (method update 0);"
    ],
    "preprocessed": "class character ()\n       (field location (cell new 0))\n       (field name (cell new 0))\n       (method set-room (lambda ((r room)) \n              (begin\n                (if (not (single? | location get))\n                (location get remove (self))\n                0)\n                (r add (self))\n                (location set (r)))))\n       (method get-room (location get))\n       (method set-name (lambda (n) (name set | n)))\n       (method get-name (name get))\n       (method update 0);",
    "code": "211100011321000011103232211101000321000011113221111001032110100113203332211101000321001111032211110010321101001132033322100111113210001000032211010322210001000132111111103332210001100322111132210132210101031232100001111321111010133322100001111321111010132110100013221010010033320332210001000132111001132210100100333221000011113211110110322100010001333333221001111132100010010322100001111321111010133322100111113210001001132211010322100010033221001111032111101103123210001003333221001111132100010100322100111103211110101333221001111132100010101320332233",
    "parse": [
      "class",
      "character",
      [],
      [
        "field",
        "location",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "name",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "set-room",
        [
          "lambda",
          [
            [
              "r",
              "room"
            ]
          ],
          [
            "begin",
            [
              "if",
              [
                "not",
                [
                  "single?",
                  [
                    -1,
                    "location",
                    "get"
                  ]
                ]
              ],
              [
                "location",
                "get",
                "remove",
                [
                  "self"
                ]
              ],
              "0"
            ],
            [
              "r",
              "add",
              [
                "self"
              ]
            ],
            [
              "location",
              "set",
              [
                "r"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "get-room",
        [
          "location",
          "get"
        ]
      ],
      [
        "method",
        "set-name",
        [
          "lambda",
          [
            "n"
          ],
          [
            "name",
            "set",
            [
              -1,
              "n"
            ]
          ]
        ]
      ],
      [
        "method",
        "get-name",
        [
          "name",
          "get"
        ]
      ],
      [
        "method",
        "update",
        "0"
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF123;&#xF100;&#xF11F;&#xF143;&#xF132;&#xF130;&#xF119;&#xF123;&#xF100;&#xF120;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF12B;&#xF11F;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF101;&#xF111;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF132;&#xF123;&#xF101;&#xF112;&#xF131;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF142;&#xF132;&#xF138;&#xF132;&#xF124;&#xF11B;&#xF101;&#xF143;&#xF123;&#xF100;&#xF120;&#xF131;&#xF116;&#xF121;&#xF121;&#xF132;&#xF123;&#xF100;&#xF120;&#xF131;&#xF116;&#xF12F;&#xF112;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF133;&#xF121;&#xF132;&#xF123;&#xF101;&#xF112;&#xF129;&#xF114;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF123;&#xF100;&#xF120;&#xF131;&#xF117;&#xF132;&#xF123;&#xF101;&#xF112;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF101;&#xF113;&#xF132;&#xF123;&#xF100;&#xF120;&#xF131;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF101;&#xF114;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF126;&#xF115;&#xF121;&#xF132;&#xF12B;&#xF11F;&#xF131;&#xF117;&#xF101;&#xF143;&#xF126;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF101;&#xF115;&#xF132;&#xF12B;&#xF11F;&#xF131;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF101;&#xF116;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1207
  },
  {
    "role": "code",
    "lines": [
      "define find-max-helper",
      "  (lambda (test max idx n lst)",
      "    (if (> (list-length (lst)) 0)",
      "    (if (> (test (head (lst))) (max))",
      "        (find-max-helper (test) (test (head (lst))) (n) (+ (n) 1) (tail (lst)))",
      "        (find-max-helper (test) (max) (idx) (+ (n) 1) (tail (lst))))",
      "    (idx)));"
    ],
    "preprocessed": "define find-max-helper\n  (lambda (test max idx n lst)\n    (if (> (list-length (lst)) 0)\n    (if (> (test (head (lst))) (max))\n        (find-max-helper (test) (test (head (lst))) (n) (+ (n) 1) (tail (lst)))\n        (find-max-helper (test) (max) (idx) (+ (n) 1) (tail (lst))))\n    (idx)));",
    "code": "2110132100010110322110103221100010032111011321010100321000100321001000332211113221003221001010322100100033320332211113221003221100010032210001113221001000333322111011333221000101103221100010033221100010032210001113221001000333322100010033221010322100010033213322100100132210010003333221000101103221100010033221110113322101010033221010322100010033213322100100132210010003333322101010033332233",
    "parse": [
      "define",
      "find-max-helper",
      [
        "lambda",
        [
          "test",
          "max",
          "idx",
          "n",
          "lst"
        ],
        [
          "if",
          [
            ">",
            [
              "list-length",
              [
                "lst"
              ]
            ],
            "0"
          ],
          [
            "if",
            [
              ">",
              [
                "test",
                [
                  "head",
                  [
                    "lst"
                  ]
                ]
              ],
              [
                "max"
              ]
            ],
            [
              "find-max-helper",
              [
                "test"
              ],
              [
                "test",
                [
                  "head",
                  [
                    "lst"
                  ]
                ]
              ],
              [
                "n"
              ],
              [
                "+",
                [
                  "n"
                ],
                "1"
              ],
              [
                "tail",
                [
                  "lst"
                ]
              ]
            ],
            [
              "find-max-helper",
              [
                "test"
              ],
              [
                "max"
              ],
              [
                "idx"
              ],
              [
                "+",
                [
                  "n"
                ],
                "1"
              ],
              [
                "tail",
                [
                  "lst"
                ]
              ]
            ]
          ],
          [
            "idx"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF101;&#xF117;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF12E;&#xF115;&#xF125;&#xF11C;&#xF127;&#xF115;&#xF126;&#xF115;&#xF126;&#xF119;&#xF121;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF133;&#xF121;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF12E;&#xF115;&#xF132;&#xF126;&#xF118;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF125;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF123;&#xF101;&#xF117;&#xF132;&#xF12E;&#xF115;&#xF121;&#xF132;&#xF12E;&#xF115;&#xF132;&#xF126;&#xF118;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF126;&#xF115;&#xF121;&#xF132;&#xF13D;&#xF132;&#xF126;&#xF115;&#xF121;&#xF134;&#xF121;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF101;&#xF117;&#xF132;&#xF12E;&#xF115;&#xF121;&#xF132;&#xF125;&#xF11C;&#xF121;&#xF132;&#xF127;&#xF115;&#xF121;&#xF132;&#xF13D;&#xF132;&#xF126;&#xF115;&#xF121;&#xF134;&#xF121;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1208
  },
  {
    "role": "code",
    "lines": [
      "define find-max-idx",
      "  (lambda (test lst)",
      "    (find-max-helper (test) (test (head (lst))) 0 0 (lst)));"
    ],
    "preprocessed": "define find-max-idx\n  (lambda (test lst)\n    (find-max-helper (test) (test (head (lst))) 0 0 (lst)));",
    "code": "2110132100010111322110103221100010032100100033221000101103221100010033221100010032210001113221001000333320320322100100033332233",
    "parse": [
      "define",
      "find-max-idx",
      [
        "lambda",
        [
          "test",
          "lst"
        ],
        [
          "find-max-helper",
          [
            "test"
          ],
          [
            "test",
            [
              "head",
              [
                "lst"
              ]
            ]
          ],
          "0",
          "0",
          [
            "lst"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF101;&#xF118;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF12E;&#xF115;&#xF126;&#xF119;&#xF121;&#xF132;&#xF123;&#xF101;&#xF117;&#xF132;&#xF12E;&#xF115;&#xF121;&#xF132;&#xF12E;&#xF115;&#xF132;&#xF126;&#xF118;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF133;&#xF133;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1209
  },
  {
    "role": "code",
    "lines": [
      "define find-min-helper",
      "  (lambda (test max idx n lst)",
      "    (if (> (list-length (lst)) 0)",
      "    (if (< (test (head (lst))) (max))",
      "        (find-min-helper (test) (test (head (lst))) (n) (+ (n) 1) (tail (lst)))",
      "        (find-min-helper (test) (max) (idx) (+ (n) 1) (tail (lst))))",
      "    (idx)));"
    ],
    "preprocessed": "define find-min-helper\n  (lambda (test max idx n lst)\n    (if (> (list-length (lst)) 0)\n    (if (< (test (head (lst))) (max))\n        (find-min-helper (test) (test (head (lst))) (n) (+ (n) 1) (tail (lst)))\n        (find-min-helper (test) (max) (idx) (+ (n) 1) (tail (lst))))\n    (idx)));",
    "code": "211013210001100032211010322110001003211101132101010032100010032100100033221111322100322100101032210010003332033221111322103221100010032210001113221001000333322111011333221000110003221100010033221100010032210001113221001000333322100010033221010322100010033213322100100132210010003333221000110003221100010033221110113322101010033221010322100010033213322100100132210010003333322101010033332233",
    "parse": [
      "define",
      "find-min-helper",
      [
        "lambda",
        [
          "test",
          "max",
          "idx",
          "n",
          "lst"
        ],
        [
          "if",
          [
            ">",
            [
              "list-length",
              [
                "lst"
              ]
            ],
            "0"
          ],
          [
            "if",
            [
              "<",
              [
                "test",
                [
                  "head",
                  [
                    "lst"
                  ]
                ]
              ],
              [
                "max"
              ]
            ],
            [
              "find-min-helper",
              [
                "test"
              ],
              [
                "test",
                [
                  "head",
                  [
                    "lst"
                  ]
                ]
              ],
              [
                "n"
              ],
              [
                "+",
                [
                  "n"
                ],
                "1"
              ],
              [
                "tail",
                [
                  "lst"
                ]
              ]
            ],
            [
              "find-min-helper",
              [
                "test"
              ],
              [
                "max"
              ],
              [
                "idx"
              ],
              [
                "+",
                [
                  "n"
                ],
                "1"
              ],
              [
                "tail",
                [
                  "lst"
                ]
              ]
            ]
          ],
          [
            "idx"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF101;&#xF119;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF12E;&#xF115;&#xF125;&#xF11C;&#xF127;&#xF115;&#xF126;&#xF115;&#xF126;&#xF119;&#xF121;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF133;&#xF121;&#xF132;&#xF142;&#xF132;&#xF135;&#xF132;&#xF12E;&#xF115;&#xF132;&#xF126;&#xF118;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF125;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF123;&#xF101;&#xF119;&#xF132;&#xF12E;&#xF115;&#xF121;&#xF132;&#xF12E;&#xF115;&#xF132;&#xF126;&#xF118;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF126;&#xF115;&#xF121;&#xF132;&#xF13D;&#xF132;&#xF126;&#xF115;&#xF121;&#xF134;&#xF121;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF101;&#xF119;&#xF132;&#xF12E;&#xF115;&#xF121;&#xF132;&#xF125;&#xF11C;&#xF121;&#xF132;&#xF127;&#xF115;&#xF121;&#xF132;&#xF13D;&#xF132;&#xF126;&#xF115;&#xF121;&#xF134;&#xF121;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1210
  },
  {
    "role": "code",
    "lines": [
      "define find-min-idx",
      "  (lambda (test lst)",
      "    (find-min-helper (test) (test (head (lst))) 0 0 (lst)));"
    ],
    "preprocessed": "define find-min-idx\n  (lambda (test lst)\n    (find-min-helper (test) (test (head (lst))) 0 0 (lst)));",
    "code": "2110132100011001322110103221100010032100100033221000110003221100010033221100010032210001113221001000333320320322100100033332233",
    "parse": [
      "define",
      "find-min-idx",
      [
        "lambda",
        [
          "test",
          "lst"
        ],
        [
          "find-min-helper",
          [
            "test"
          ],
          [
            "test",
            [
              "head",
              [
                "lst"
              ]
            ]
          ],
          "0",
          "0",
          [
            "lst"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF101;&#xF11A;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF12E;&#xF115;&#xF126;&#xF119;&#xF121;&#xF132;&#xF123;&#xF101;&#xF119;&#xF132;&#xF12E;&#xF115;&#xF121;&#xF132;&#xF12E;&#xF115;&#xF132;&#xF126;&#xF118;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF133;&#xF133;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1211
  },
  {
    "role": "code",
    "lines": [
      "= 2 (find-max-idx (lambda (x) (x)) (vector 3 4 5 0));"
    ],
    "preprocessed": "= 2 (find-max-idx (lambda (x) (x)) (vector 3 4 5 0));",
    "code": "21132103221000101113221101032210011133221001113332210000321132100321013203332233",
    "parse": [
      "=",
      "2",
      [
        "find-max-idx",
        [
          "lambda",
          [
            "x"
          ],
          [
            "x"
          ]
        ],
        [
          "vector",
          "3",
          "4",
          "5",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF132;&#xF123;&#xF101;&#xF118;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF136;&#xF137;&#xF138;&#xF133;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1212
  },
  {
    "role": "code",
    "lines": [
      "= 1 (find-max-idx (lambda (x) (x)) (vector 3 5 4 0));"
    ],
    "preprocessed": "= 1 (find-max-idx (lambda (x) (x)) (vector 3 5 4 0));",
    "code": "2113213221000101113221101032210011133221001113332210000321132101321003203332233",
    "parse": [
      "=",
      "1",
      [
        "find-max-idx",
        [
          "lambda",
          [
            "x"
          ],
          [
            "x"
          ]
        ],
        [
          "vector",
          "3",
          "5",
          "4",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF132;&#xF123;&#xF101;&#xF118;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF136;&#xF138;&#xF137;&#xF133;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1213
  },
  {
    "role": "code",
    "lines": [
      "= 0 (find-max-idx (lambda (x) (x)) (vector 5 3 4 0));"
    ],
    "preprocessed": "= 0 (find-max-idx (lambda (x) (x)) (vector 5 3 4 0));",
    "code": "2113203221000101113221101032210011133221001113332210000321013211321003203332233",
    "parse": [
      "=",
      "0",
      [
        "find-max-idx",
        [
          "lambda",
          [
            "x"
          ],
          [
            "x"
          ]
        ],
        [
          "vector",
          "5",
          "3",
          "4",
          "0"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF132;&#xF123;&#xF101;&#xF118;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF138;&#xF136;&#xF137;&#xF133;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1214
  },
  {
    "role": "comment",
    "lines": [
      "# the robo class makes a character that patrols from room to room"
    ],
    "stanza": 1215
  },
  {
    "role": "code",
    "lines": [
      "class robo ()",
      "       (field super (character new))",
      "       (field timestamp (cell new 1))",
      "       (field timestamp-map (cell new (lambda (x) 0)))",
      "       (method unknown (lambda (x) (super (x))))",
      "       (method update ",
      "           (let ((exits ",
      "              (select-match (lambda (x) (instanceof door (x)))",
      "                    (self location inventory))))",
      "         (let ((timestamps",
      "            (map (lambda (x) (timestamp-map get (x)))",
      "                 (exits))))",
      "           (let ((chosen-exit (list-ref ",
      "                       (exits)",
      "                       (find-min-idx (lambda (x) (x))",
      "                             (timestamps))))",
      "             (current-tmap (timestamp-map get))",
      "             (current-t (timestamp get)))",
      "             (begin",
      "               (self location set (chosen-exit ",
      "                       access-from ",
      "                       (self location get)))",
      "               (timestamp-map set ",
      "                      (lambda ((d door))",
      "                    (if (d == (chosen-exit))",
      "                        (current-t)",
      "                        (current-tmap (d)))))",
      "               (timestamp set (+ (timestamp get) 1)))))));"
    ],
    "preprocessed": "class robo ()\n       (field super (character new))\n       (field timestamp (cell new 1))\n       (field timestamp-map (cell new (lambda (x) 0)))\n       (method unknown (lambda (x) (super (x))))\n       (method update \n           (let ((exits \n              (select-match (lambda (x) (instanceof door (x)))\n                    (self location inventory))))\n         (let ((timestamps\n            (map (lambda (x) (timestamp-map get (x)))\n                 (exits))))\n           (let ((chosen-exit (list-ref \n                       (exits)\n                       (find-min-idx (lambda (x) (x))\n                             (timestamps))))\n             (current-tmap (timestamp-map get))\n             (current-t (timestamp get)))\n             (begin\n               (self location set (chosen-exit \n                       access-from \n                       (self location get)))\n               (timestamp-map set \n                      (lambda ((d door))\n                    (if (d == (chosen-exit))\n                        (current-t)\n                        (current-tmap (d)))))\n               (timestamp set (+ (timestamp get) 1)))))));",
    "code
    "parse": [
      "class",
      "robo",
      [],
      [
        "field",
        "super",
        [
          "character",
          "new"
        ]
      ],
      [
        "field",
        "timestamp",
        [
          "cell",
          "new",
          "1"
        ]
      ],
      [
        "field",
        "timestamp-map",
        [
          "cell",
          "new",
          [
            "lambda",
            [
              "x"
            ],
            "0"
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            "super",
            [
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "update",
        [
          "let",
          [
            [
              "exits",
              [
                "select-match",
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "instanceof",
                    "door",
                    [
                      "x"
                    ]
                  ]
                ],
                [
                  "self",
                  "location",
                  "inventory"
                ]
              ]
            ]
          ],
          [
            "let",
            [
              [
                "timestamps",
                [
                  "map",
                  [
                    "lambda",
                    [
                      "x"
                    ],
                    [
                      "timestamp-map",
                      "get",
                      [
                        "x"
                      ]
                    ]
                  ],
                  [
                    "exits"
                  ]
                ]
              ]
            ],
            [
              "let",
              [
                [
                  "chosen-exit",
                  [
                    "list-ref",
                    [
                      "exits"
                    ],
                    [
                      "find-min-idx",
                      [
                        "lambda",
                        [
                          "x"
                        ],
                        [
                          "x"
                        ]
                      ],
                      [
                        "timestamps"
                      ]
                    ]
                  ]
                ],
                [
                  "current-tmap",
                  [
                    "timestamp-map",
                    "get"
                  ]
                ],
                [
                  "current-t",
                  [
                    "timestamp",
                    "get"
                  ]
                ]
              ],
              [
                "begin",
                [
                  "self",
                  "location",
                  "set",
                  [
                    "chosen-exit",
                    "access-from",
                    [
                      "self",
                      "location",
                      "get"
                    ]
                  ]
                ],
                [
                  "timestamp-map",
                  "set",
                  [
                    "lambda",
                    [
                      [
                        "d",
                        "door"
                      ]
                    ],
                    [
                      "if",
                      [
                        "d",
                        "==",
                        [
                          "chosen-exit"
                        ]
                      ],
                      [
                        "current-t"
                      ],
                      [
                        "current-tmap",
                        [
                          "d"
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  "timestamp",
                  "set",
                  [
                    "+",
                    [
                      "timestamp",
                      "get"
                    ],
                    "1"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF123;&#xF101;&#xF11B;&#xF143;&#xF132;&#xF130;&#xF119;&#xF12F;&#xF117;&#xF132;&#xF123;&#xF100;&#xF11F;&#xF12F;&#xF114;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF123;&#xF101;&#xF11C;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF134;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF123;&#xF101;&#xF11D;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11C;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12F;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF101;&#xF116;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF123;&#xF101;&#xF11E;&#xF132;&#xF12F;&#xF11E;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12D;&#xF11C;&#xF131;&#xF11D;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12C;&#xF115;&#xF123;&#xF100;&#xF120;&#xF12F;&#xF111;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF123;&#xF101;&#xF11F;&#xF132;&#xF128;&#xF114;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF123;&#xF101;&#xF11D;&#xF131;&#xF116;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF101;&#xF11E;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF123;&#xF101;&#xF120;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF101;&#xF11E;&#xF121;&#xF132;&#xF123;&#xF101;&#xF11A;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF123;&#xF101;&#xF11F;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF102;&#xF111;&#xF132;&#xF123;&#xF101;&#xF11D;&#xF131;&#xF116;&#xF121;&#xF121;&#xF132;&#xF123;&#xF102;&#xF112;&#xF132;&#xF123;&#xF101;&#xF11C;&#xF131;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF12C;&#xF115;&#xF123;&#xF100;&#xF120;&#xF131;&#xF117;&#xF132;&#xF123;&#xF101;&#xF120;&#xF123;&#xF100;&#xF112;&#xF132;&#xF12C;&#xF115;&#xF123;&#xF100;&#xF120;&#xF131;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF132;&#xF123;&#xF102;&#xF113;&#xF131;&#xF11D;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF123;&#xF102;&#xF113;&#xF130;&#xF11D;&#xF132;&#xF123;&#xF101;&#xF120;&#xF121;&#xF121;&#xF132;&#xF123;&#xF102;&#xF112;&#xF121;&#xF132;&#xF123;&#xF102;&#xF111;&#xF132;&#xF123;&#xF102;&#xF113;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF101;&#xF11C;&#xF131;&#xF117;&#xF132;&#xF13D;&#xF132;&#xF123;&#xF101;&#xF11C;&#xF131;&#xF116;&#xF121;&#xF134;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1216
  },
  {
    "role": "code",
    "lines": [
      "define myrobo (robo new);"
    ],
    "preprocessed": "define myrobo (robo new);",
    "code": "21101321001000113221000110103211010011332233",
    "parse": [
      "define",
      "myrobo",
      [
        "robo",
        "new"
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF102;&#xF114;&#xF132;&#xF123;&#xF101;&#xF11B;&#xF12F;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1217
  },
  {
    "role": "code",
    "lines": [
      "myrobo set-room (stairs);"
    ],
    "preprocessed": "myrobo set-room (stairs);",
    "code": "210010001132100010000322100000111332233",
    "parse": [
      "myrobo",
      "set-room",
      [
        "stairs"
      ]
    ],
    "spider": "&#xF123;&#xF102;&#xF114;&#xF123;&#xF101;&#xF111;&#xF132;&#xF123;&#xF100;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1218
  },
  {
    "role": "code",
    "lines": [
      "define which-room",
      "  (lambda ((rr robo))",
      "    (find-max-idx ",
      "     (lambda ((r room)) (if (r == (rr get-room)) 1 0))",
      "     (vector (hall) (kitchen) (stairs) (lawn) (bedroom))));"
    ],
    "preprocessed": "define which-room\n  (lambda ((rr robo))\n    (find-max-idx \n     (lambda ((r room)) (if (r == (rr get-room)) 1 0))\n     (vector (hall) (kitchen) (stairs) (lawn) (bedroom))));",
    "code": "2110132100100100322110103222100100101321000110103332210001011132211010322210001000132111111103332211113221000100013211101100322100100101321000100103332132033322100003221000001003322100000101332210000011133221000010003322100001001333332233",
    "parse": [
      "define",
      "which-room",
      [
        "lambda",
        [
          [
            "rr",
            "robo"
          ]
        ],
        [
          "find-max-idx",
          [
            "lambda",
            [
              [
                "r",
                "room"
              ]
            ],
            [
              "if",
              [
                "r",
                "==",
                [
                  "rr",
                  "get-room"
                ]
              ],
              "1",
              "0"
            ]
          ],
          [
            "vector",
            [
              "hall"
            ],
            [
              "kitchen"
            ],
            [
              "stairs"
            ],
            [
              "lawn"
            ],
            [
              "bedroom"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF102;&#xF115;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF132;&#xF123;&#xF102;&#xF116;&#xF123;&#xF101;&#xF11B;&#xF121;&#xF121;&#xF132;&#xF123;&#xF101;&#xF118;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF132;&#xF123;&#xF101;&#xF112;&#xF131;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF123;&#xF101;&#xF112;&#xF130;&#xF11D;&#xF132;&#xF123;&#xF102;&#xF116;&#xF123;&#xF101;&#xF113;&#xF121;&#xF121;&#xF134;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF100;&#xF115;&#xF121;&#xF132;&#xF123;&#xF100;&#xF116;&#xF121;&#xF132;&#xF123;&#xF100;&#xF118;&#xF121;&#xF132;&#xF123;&#xF100;&#xF119;&#xF121;&#xF132;&#xF123;&#xF100;&#xF11A;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1219
  },
  {
    "role": "code",
    "lines": [
      "define sequencer",
      "  (lambda (n current lst)",
      "    (if (< (current) (n))",
      "    (begin",
      "      (myrobo update)",
      "      (sequencer",
      "       (n)",
      "       (+ (current) 1)",
      "       (append",
      "        (which-room (myrobo))",
      "        (lst))))",
      "    (lst)));"
    ],
    "preprocessed": "define sequencer\n  (lambda (n current lst)\n    (if (< (current) (n))\n    (begin\n      (myrobo update)\n      (sequencer\n       (n)\n       (+ (current) 1)\n       (append\n        (which-room (myrobo))\n        (lst))))\n    (lst)));",
    "code": "211013210010011032211010322100010032101011103210010003322111132210322101011103322100010033322100011003221001000113210001010133221001001103221000100332210103221010111033213322110111003221001001003221001000113332210010003333322100100033332233",
    "parse": [
      "define",
      "sequencer",
      [
        "lambda",
        [
          "n",
          "current",
          "lst"
        ],
        [
          "if",
          [
            "<",
            [
              "current"
            ],
            [
              "n"
            ]
          ],
          [
            "begin",
            [
              "myrobo",
              "update"
            ],
            [
              "sequencer",
              [
                "n"
              ],
              [
                "+",
                [
                  "current"
                ],
                "1"
              ],
              [
                "append",
                [
                  "which-room",
                  [
                    "myrobo"
                  ]
                ],
                [
                  "lst"
                ]
              ]
            ]
          ],
          [
            "lst"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF102;&#xF117;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF126;&#xF115;&#xF12C;&#xF11F;&#xF126;&#xF119;&#xF121;&#xF132;&#xF142;&#xF132;&#xF135;&#xF132;&#xF12C;&#xF11F;&#xF121;&#xF132;&#xF126;&#xF115;&#xF121;&#xF121;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF123;&#xF102;&#xF114;&#xF123;&#xF101;&#xF116;&#xF121;&#xF132;&#xF123;&#xF102;&#xF117;&#xF132;&#xF126;&#xF115;&#xF121;&#xF132;&#xF13D;&#xF132;&#xF12C;&#xF11F;&#xF121;&#xF134;&#xF121;&#xF132;&#xF12F;&#xF11D;&#xF132;&#xF123;&#xF102;&#xF115;&#xF132;&#xF123;&#xF102;&#xF114;&#xF121;&#xF121;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1220
  },
  {
    "role": "comment",
    "lines": [
      "# here is a list of the first 30 rooms the robot character visits",
      "# 0=hall, 1=kitchen, 2=stairs, 3=lawn, 4=bedroom"
    ],
    "stanza": 1221
  },
  {
    "role": "code",
    "lines": [
      "list= (sequencer 30 0 (vector)) (vector 4 2 0 3 0 1 0 2 4 2 0 3 0 1 0 2 4 2 0 3 0 1 0 2 4 2 0 3 0 1);"
    ],
    "preprocessed": "list= (sequencer 30 0 (vector)) (vector 4 2 0 3 0 1 0 2 4 2 0 3 0 1 0 2 4 2 0 3 0 1 0 2 4 2 0 3 0 1);",
    "code": "2100110132210010011032111103203221000033322100003210032103203211320321320321032100321032032113203213203210321003210320321132032132032103210032103203211320321332233",
    "parse": [
      "list=",
      [
        "sequencer",
        "30",
        "0",
        [
          "vector"
        ]
      ],
      [
        "vector",
        "4",
        "2",
        "0",
        "3",
        "0",
        "1",
        "0",
        "2",
        "4",
        "2",
        "0",
        "3",
        "0",
        "1",
        "0",
        "2",
        "4",
        "2",
        "0",
        "3",
        "0",
        "1",
        "0",
        "2",
        "4",
        "2",
        "0",
        "3",
        "0",
        "1"
      ]
    ],
    "spider": "&#xF126;&#xF11E;&#xF132;&#xF123;&#xF102;&#xF117;&#xF123;&#xF11F;&#xF133;&#xF132;&#xF123;&#xF111;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF135;&#xF133;&#xF136;&#xF133;&#xF134;&#xF133;&#xF135;&#xF137;&#xF135;&#xF133;&#xF136;&#xF133;&#xF134;&#xF133;&#xF135;&#xF137;&#xF135;&#xF133;&#xF136;&#xF133;&#xF134;&#xF133;&#xF135;&#xF137;&#xF135;&#xF133;&#xF136;&#xF133;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1222
  },
  {
    "role": "comment",
    "lines": [
      "# Now should start to introduce a language to talk about what is",
      "# going on in the simulated world, and start to move away from",
      "# detailed mechanism"
    ],
    "stanza": 1223
  },
  {
    "role": "file",
    "lines": [
      "== COS_CommentBase2 =="
    ],
    "stanza": 1224
  },
  {
    "role": "comment",
    "lines": [
      "# The following parts of the message are the beginnings",
      "# of embedding an alternate visual primer"
    ],
    "section_description": "end of part 2, start of part 3",
    "section_category": "NOTE",
    "section_index": 41,
    "stanza": 1225
  },
  {
    "role": "code",
    "lines": [
      "intro part3;"
    ],
    "preprocessed": "intro part3;",
    "code": "2100103210010011132233",
    "parse": [
      "intro",
      "part3"
    ],
    "spider": "&#xF123;&#xF113;&#xF123;&#xF102;&#xF118;&#xF132;&#xF143;&#xF121;",
    "stanza": 1226
  },
  {
    "role": "file",
    "lines": [
      "== COS_Unless =="
    ],
    "stanza": 1227
  },
  {
    "role": "comment",
    "lines": [
      "# for embedded image-and-logic-based primer"
    ],
    "section_description": "simulating unless gates",
    "section_category": "GATE",
    "section_index": 42,
    "stanza": 1228
  },
  {
    "role": "comment",
    "lines": [
      "# practice with pure logic gate"
    ],
    "stanza": 1229
  },
  {
    "role": "comment",
    "lines": [
      "# X unless Y = (X if Y=0, otherwise 0)"
    ],
    "stanza": 1230
  },
  {
    "role": "code",
    "lines": [
      "define unless |",
      "  ? x | ? y |",
      "  and (x) (not (y));"
    ],
    "preprocessed": "define unless |\n  ? x | ? y |\n  and (x) (not (y));",
    "code": "211013210010100031232110032100111312321100321100113123211032210011133221013221100113332233",
    "parse": [
      "define",
      "unless",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "and",
            [
              "x"
            ],
            [
              "not",
              [
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF102;&#xF119;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF139;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF138;&#xF132;&#xF125;&#xF114;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1231
  },
  {
    "role": "comment",
    "lines": [
      "# if second input is true, output is blocked (false)",
      "# if second input is false, output copies first input"
    ],
    "stanza": 1232
  },
  {
    "role": "code",
    "lines": [
      "= (false) (unless (false) (false));"
    ],
    "preprocessed": "= (false) (unless (false) (false));",
    "code": "211322033221001010003220332203332233",
    "parse": [
      "=",
      [
        "false"
      ],
      [
        "unless",
        [
          "false"
        ],
        [
          "false"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF133;&#xF121;&#xF132;&#xF123;&#xF102;&#xF119;&#xF132;&#xF133;&#xF121;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1233
  },
  {
    "role": "code",
    "lines": [
      "= (true) (unless (true) (false));"
    ],
    "preprocessed": "= (true) (unless (true) (false));",
    "code": "211322133221001010003221332203332233",
    "parse": [
      "=",
      [
        "true"
      ],
      [
        "unless",
        [
          "true"
        ],
        [
          "false"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF134;&#xF121;&#xF132;&#xF123;&#xF102;&#xF119;&#xF132;&#xF134;&#xF121;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1234
  },
  {
    "role": "code",
    "lines": [
      "= (false) (unless (false) (true));"
    ],
    "preprocessed": "= (false) (unless (false) (true));",
    "code": "211322033221001010003220332213332233",
    "parse": [
      "=",
      [
        "false"
      ],
      [
        "unless",
        [
          "false"
        ],
        [
          "true"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF133;&#xF121;&#xF132;&#xF123;&#xF102;&#xF119;&#xF132;&#xF133;&#xF121;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1235
  },
  {
    "role": "code",
    "lines": [
      "= (false) (unless (true) (true));"
    ],
    "preprocessed": "= (false) (unless (true) (true));",
    "code": "211322033221001010003221332213332233",
    "parse": [
      "=",
      [
        "false"
      ],
      [
        "unless",
        [
          "true"
        ],
        [
          "true"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF133;&#xF121;&#xF132;&#xF123;&#xF102;&#xF119;&#xF132;&#xF134;&#xF121;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1236
  },
  {
    "role": "comment",
    "lines": [
      "# To do: add a simple simulator for non-grid-based",
      "# logic -- much simpler to understand than",
      "# grid-based"
    ],
    "stanza": 1237
  },
  {
    "role": "comment",
    "lines": [
      "# On to a grid-based logic simulation",
      "# first, need unbounded, mutable matrices"
    ],
    "stanza": 1238
  },
  {
    "role": "code",
    "lines": [
      "define make-matrix |",
      "  ? default |",
      "  (make-cell (hash-default (default)));"
    ],
    "preprocessed": "define make-matrix |\n  ? default |\n  (make-cell (hash-default (default)));",
    "code": "2110132100101001312321100321001001131232211011322100100103221001001133332233",
    "parse": [
      "define",
      "make-matrix",
      [
        -1,
        "?",
        "default",
        [
          -1,
          [
            "make-cell",
            [
              "hash-default",
              [
                "default"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF102;&#xF11A;&#xF101;&#xF143;&#xF13F;&#xF12B;&#xF114;&#xF101;&#xF143;&#xF132;&#xF123;&#xF11C;&#xF132;&#xF12B;&#xF113;&#xF132;&#xF12B;&#xF114;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1239
  },
  {
    "role": "code",
    "lines": [
      "define matrix-set |",
      "  ? m |",
      "  ? x |",
      "  ? addr |",
      "  set! (m) | hash-add (get! (m)) (addr) (x);"
    ],
    "preprocessed": "define matrix-set |\n  ? m |\n  ? x |\n  ? addr |\n  set! (m) | hash-add (get! (m)) (addr) (x);",
    "code": "211013210010101031232110032100101011312321100321001113123211003210010110031232111003221001010113312321000111032211101322100101011333221001011003322100111332233",
    "parse": [
      "define",
      "matrix-set",
      [
        -1,
        "?",
        "m",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "?",
            "addr",
            [
              -1,
              "set!",
              [
                "m"
              ],
              [
                -1,
                "hash-add",
                [
                  "get!",
                  [
                    "m"
                  ]
                ],
                [
                  "addr"
                ],
                [
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF102;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF102;&#xF11C;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF102;&#xF11D;&#xF101;&#xF143;&#xF123;&#xF11D;&#xF132;&#xF123;&#xF102;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF12A;&#xF11F;&#xF132;&#xF123;&#xF11E;&#xF132;&#xF123;&#xF102;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF123;&#xF102;&#xF11D;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1240
  },
  {
    "role": "code",
    "lines": [
      "define matrix-get |",
      "  ? m |",
      "  ? addr |",
      "  hash-ref (get! (m)) (addr);"
    ],
    "preprocessed": "define matrix-get |\n  ? m |\n  ? addr |\n  hash-ref (get! (m)) (addr);",
    "code": "2110132100101101312321100321001010113123211003210010110031232100100003221110132210010101133322100101100332233",
    "parse": [
      "define",
      "matrix-get",
      [
        -1,
        "?",
        "m",
        [
          -1,
          "?",
          "addr",
          [
            -1,
            "hash-ref",
            [
              "get!",
              [
                "m"
              ]
            ],
            [
              "addr"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF102;&#xF11E;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF102;&#xF11C;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF102;&#xF11D;&#xF101;&#xF143;&#xF12B;&#xF111;&#xF132;&#xF123;&#xF11E;&#xF132;&#xF123;&#xF102;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF123;&#xF102;&#xF11D;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1241
  },
  {
    "role": "code",
    "lines": [
      "define test-matrix",
      "  (make-matrix 0);"
    ],
    "preprocessed": "define test-matrix\n  (make-matrix 0);",
    "code": "2110132100101110322100101001320332233",
    "parse": [
      "define",
      "test-matrix",
      [
        "make-matrix",
        "0"
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF102;&#xF11F;&#xF132;&#xF123;&#xF102;&#xF11A;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1242
  },
  {
    "role": "code",
    "lines": [
      "= 0 | matrix-get (test-matrix) | vector 1 2 3;"
    ],
    "preprocessed": "= 0 | matrix-get (test-matrix) | vector 1 2 3;",
    "code": "21132031232100101101322100101110331232100003213210321132233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "matrix-get",
        [
          "test-matrix"
        ],
        [
          -1,
          "vector",
          "1",
          "2",
          "3"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF123;&#xF102;&#xF11E;&#xF132;&#xF123;&#xF102;&#xF11F;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF134;&#xF135;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 1243
  },
  {
    "role": "code",
    "lines": [
      "matrix-set (test-matrix) 10 | vector 1 2 3;"
    ],
    "preprocessed": "matrix-set (test-matrix) 10 | vector 1 2 3;",
    "code": "2100101010322100101110332101031232100003213210321132233",
    "parse": [
      "matrix-set",
      [
        "test-matrix"
      ],
      "10",
      [
        -1,
        "vector",
        "1",
        "2",
        "3"
      ]
    ],
    "spider": "&#xF123;&#xF102;&#xF11B;&#xF132;&#xF123;&#xF102;&#xF11F;&#xF121;&#xF13D;&#xF101;&#xF143;&#xF123;&#xF111;&#xF134;&#xF135;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 1244
  },
  {
    "role": "code",
    "lines": [
      "= 10 | matrix-get (test-matrix) | vector 1 2 3;"
    ],
    "preprocessed": "= 10 | matrix-get (test-matrix) | vector 1 2 3;",
    "code": "21132101031232100101101322100101110331232100003213210321132233",
    "parse": [
      "=",
      "10",
      [
        -1,
        "matrix-get",
        [
          "test-matrix"
        ],
        [
          -1,
          "vector",
          "1",
          "2",
          "3"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF13D;&#xF101;&#xF143;&#xF123;&#xF102;&#xF11E;&#xF132;&#xF123;&#xF102;&#xF11F;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF134;&#xF135;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 1245
  },
  {
    "role": "comment",
    "lines": [
      "# go through a circuit of unless gates and analyze data flow"
    ],
    "stanza": 1246
  },
  {
    "role": "code",
    "lines": [
      "define unless-phase-1 |",
      "  ? circuit |",
      "  assign state (make-matrix (false))",
      "  (begin",
      "    (map ",
      "     (? gate |",
      "    assign x1 (list-ref (gate) 0) |",
      "    assign y1 (list-ref (gate) 1) |",
      "    assign x2 (list-ref (gate) 2) |",
      "    assign y2 (list-ref (gate) 3) |",
      "    assign v (list-ref (gate) 4) |",
      "    (if (= (x1) (x2))",
      "        (begin",
      "          (matrix-set (state) (v) | vector (x2) (y2) vert-value)",
      "          (matrix-set (state) (true) | vector (x2) (y2) vert-have)",
      "          (matrix-set (state) (true) | vector (x1) (y1) vert-want)",
      "          (gate))",
      "        (begin",
      "          (matrix-set (state) (v) | vector (x2) (y2) horiz-value)",
      "          (matrix-set (state) (true) | vector (x2) (y2) horiz-have)",
      "          (matrix-set (state) (true) | vector (x1) (y1) horiz-want)",
      "          (gate))))",
      "     (circuit))",
      "    (state));"
    ],
    "preprocessed": "define unless-phase-1 |\n  ? circuit |\n  assign state (make-matrix (false))\n  (begin\n    (map \n     (? gate |\n    assign x1 (list-ref (gate) 0) |\n    assign y1 (list-ref (gate) 1) |\n    assign x2 (list-ref (gate) 2) |\n    assign y2 (list-ref (gate) 3) |\n    assign v (list-ref (gate) 4) |\n    (if (= (x1) (x2))\n        (begin\n          (matrix-set (state) (v) | vector (x2) (y2) vert-value)\n          (matrix-set (state) (true) | vector (x2) (y2) vert-have)\n          (matrix-set (state) (true) | vector (x1) (y1) vert-want)\n          (gate))\n        (begin\n          (matrix-set (state) (v) | vector (x2) (y2) horiz-value)\n          (matrix-set (state) (true) | vector (x2) (y2) horiz-have)\n          (matrix-set (state) (true) | vector (x1) (y1) horiz-want)\n          (gate))))\n     (circuit))\n    (state));",
    "code
    "parse": [
      "define",
      "unless-phase-1",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "assign",
          "state",
          [
            "make-matrix",
            [
              "false"
            ]
          ],
          [
            "begin",
            [
              "map",
              [
                "?",
                "gate",
                [
                  -1,
                  "assign",
                  "x1",
                  [
                    "list-ref",
                    [
                      "gate"
                    ],
                    "0"
                  ],
                  [
                    -1,
                    "assign",
                    "y1",
                    [
                      "list-ref",
                      [
                        "gate"
                      ],
                      "1"
                    ],
                    [
                      -1,
                      "assign",
                      "x2",
                      [
                        "list-ref",
                        [
                          "gate"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "assign",
                        "y2",
                        [
                          "list-ref",
                          [
                            "gate"
                          ],
                          "3"
                        ],
                        [
                          -1,
                          "assign",
                          "v",
                          [
                            "list-ref",
                            [
                              "gate"
                            ],
                            "4"
                          ],
                          [
                            -1,
                            [
                              "if",
                              [
                                "=",
                                [
                                  "x1"
                                ],
                                [
                                  "x2"
                                ]
                              ],
                              [
                                "begin",
                                [
                                  "matrix-set",
                                  [
                                    "state"
                                  ],
                                  [
                                    "v"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x2"
                                    ],
                                    [
                                      "y2"
                                    ],
                                    "vert-value"
                                  ]
                                ],
                                [
                                  "matrix-set",
                                  [
                                    "state"
                                  ],
                                  [
                                    "true"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x2"
                                    ],
                                    [
                                      "y2"
                                    ],
                                    "vert-have"
                                  ]
                                ],
                                [
                                  "matrix-set",
                                  [
                                    "state"
                                  ],
                                  [
                                    "true"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x1"
                                    ],
                                    [
                                      "y1"
                                    ],
                                    "vert-want"
                                  ]
                                ],
                                [
                                  "gate"
                                ]
                              ],
                              [
                                "begin",
                                [
                                  "matrix-set",
                                  [
                                    "state"
                                  ],
                                  [
                                    "v"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x2"
                                    ],
                                    [
                                      "y2"
                                    ],
                                    "horiz-value"
                                  ]
                                ],
                                [
                                  "matrix-set",
                                  [
                                    "state"
                                  ],
                                  [
                                    "true"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x2"
                                    ],
                                    [
                                      "y2"
                                    ],
                                    "horiz-have"
                                  ]
                                ],
                                [
                                  "matrix-set",
                                  [
                                    "state"
                                  ],
                                  [
                                    "true"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x1"
                                    ],
                                    [
                                      "y1"
                                    ],
                                    "horiz-want"
                                  ]
                                ],
                                [
                                  "gate"
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "circuit"
              ]
            ],
            [
              "state"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF102;&#xF120;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF103;&#xF111;&#xF101;&#xF143;&#xF141;&#xF123;&#xF103;&#xF112;&#xF132;&#xF123;&#xF102;&#xF11A;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF123;&#xF103;&#xF113;&#xF101;&#xF143;&#xF141;&#xF123;&#xF103;&#xF114;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF103;&#xF113;&#xF121;&#xF133;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF103;&#xF115;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF103;&#xF113;&#xF121;&#xF134;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF103;&#xF116;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF103;&#xF113;&#xF121;&#xF135;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF103;&#xF117;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF103;&#xF113;&#xF121;&#xF136;&#xF121;&#xF101;&#xF143;&#xF141;&#xF124;&#xF11D;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF103;&#xF113;&#xF121;&#xF137;&#xF121;&#xF101;&#xF143;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF123;&#xF103;&#xF114;&#xF121;&#xF132;&#xF123;&#xF103;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF123;&#xF102;&#xF11B;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF132;&#xF124;&#xF11D;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF116;&#xF121;&#xF132;&#xF123;&#xF103;&#xF117;&#xF121;&#xF123;&#xF103;&#xF118;&#xF121;&#xF132;&#xF123;&#xF102;&#xF11B;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF132;&#xF134;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF116;&#xF121;&#xF132;&#xF123;&#xF103;&#xF117;&#xF121;&#xF123;&#xF103;&#xF119;&#xF121;&#xF132;&#xF123;&#xF102;&#xF11B;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF132;&#xF134;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF114;&#xF121;&#xF132;&#xF123;&#xF103;&#xF115;&#xF121;&#xF123;&#xF103;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF103;&#xF113;&#xF121;&#xF121;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF123;&#xF102;&#xF11B;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF132;&#xF124;&#xF11D;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF116;&#xF121;&#xF132;&#xF123;&#xF103;&#xF117;&#xF121;&#xF123;&#xF103;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF102;&#xF11B;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF132;&#xF134;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF116;&#xF121;&#xF132;&#xF123;&#xF103;&#xF117;&#xF121;&#xF123;&#xF103;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF102;&#xF11B;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF132;&#xF134;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF114;&#xF121;&#xF132;&#xF123;&#xF103;&#xF115;&#xF121;&#xF123;&#xF103;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF103;&#xF113;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF103;&#xF111;&#xF121;&#xF121;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1247
  },
  {
    "role": "comment",
    "lines": [
      "# move forward one simulation step"
    ],
    "stanza": 1248
  },
  {
    "role": "code",
    "lines": [
      "define unless-phase-2 |",
      "  ? circuit |",
      "  ? state",
      "  (map ",
      "   (? gate |",
      "      assign x1 (list-ref (gate) 0) |",
      "      assign y1 (list-ref (gate) 1) |",
      "      assign x2 (list-ref (gate) 2) |",
      "      assign y2 (list-ref (gate) 3) |",
      "      assign v (list-ref (gate) 4) |",
      "      assign nv (if (= (x1) (x2))",
      "            (if (matrix-get (state) | vector (x1) (y1) vert-have)",
      "            (and (matrix-get (state) |",
      "                     vector (x1) (y1) vert-value)",
      "                 (not (and (matrix-get (state) |",
      "                           vector (x1) (y1) horiz-value)",
      "                       (not (matrix-get (state) |",
      "                            vector (x1) (y1) horiz-want)))))",
      "            (if (matrix-get (state) | vector (x1) (y1) horiz-have)",
      "                (matrix-get (state) | vector (x1) (y1) horiz-value)",
      "                (true)))",
      "            (if (matrix-get (state) | vector (x1) (y1) horiz-have)",
      "            (and (matrix-get (state) | vector (x1) (y1) horiz-value)",
      "                 (not (and (matrix-get (state) |",
      "                           vector (x1) (y1) vert-value)",
      "                       (not (matrix-get (state) |",
      "                            vector (x1) (y1) vert-want)))))",
      "            (if (matrix-get (state) | vector (x1) (y1) vert-have)",
      "                (matrix-get (state) | vector (x1) (y1) vert-value)",
      "                (true)))) |",
      "                vector (x1) (y1) (x2) (y2) (nv))",
      "   (circuit));"
    ],
    "preprocessed": "define unless-phase-2 |\n  ? circuit |\n  ? state\n  (map \n   (? gate |\n      assign x1 (list-ref (gate) 0) |\n      assign y1 (list-ref (gate) 1) |\n      assign x2 (list-ref (gate) 2) |\n      assign y2 (list-ref (gate) 3) |\n      assign v (list-ref (gate) 4) |\n      assign nv (if (= (x1) (x2))\n            (if (matrix-get (state) | vector (x1) (y1) vert-have)\n            (and (matrix-get (state) |\n                     vector (x1) (y1) vert-value)\n                 (not (and (matrix-get (state) |\n                           vector (x1) (y1) horiz-value)\n                       (not (matrix-get (state) |\n                            vector (x1) (y1) horiz-want)))))\n            (if (matrix-get (state) | vector (x1) (y1) horiz-have)\n                (matrix-get (state) | vector (x1) (y1) horiz-value)\n                (true)))\n            (if (matrix-get (state) | vector (x1) (y1) horiz-have)\n            (and (matrix-get (state) | vector (x1) (y1) horiz-value)\n                 (not (and (matrix-get (state) |\n                           vector (x1) (y1) vert-value)\n                       (not (matrix-get (state) |\n                            vector (x1) (y1) vert-want)))))\n            (if (matrix-get (state) | vector (x1) (y1) vert-have)\n                (matrix-get (state) | vector (x1) (y1) vert-value)\n                (true)))) |\n                vector (x1) (y1) (x2) (y2) (nv))\n   (circuit));",
    "code
    "parse": [
      "define",
      "unless-phase-2",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "?",
          "state",
          [
            "map",
            [
              "?",
              "gate",
              [
                -1,
                "assign",
                "x1",
                [
                  "list-ref",
                  [
                    "gate"
                  ],
                  "0"
                ],
                [
                  -1,
                  "assign",
                  "y1",
                  [
                    "list-ref",
                    [
                      "gate"
                    ],
                    "1"
                  ],
                  [
                    -1,
                    "assign",
                    "x2",
                    [
                      "list-ref",
                      [
                        "gate"
                      ],
                      "2"
                    ],
                    [
                      -1,
                      "assign",
                      "y2",
                      [
                        "list-ref",
                        [
                          "gate"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "assign",
                        "v",
                        [
                          "list-ref",
                          [
                            "gate"
                          ],
                          "4"
                        ],
                        [
                          -1,
                          "assign",
                          "nv",
                          [
                            "if",
                            [
                              "=",
                              [
                                "x1"
                              ],
                              [
                                "x2"
                              ]
                            ],
                            [
                              "if",
                              [
                                "matrix-get",
                                [
                                  "state"
                                ],
                                [
                                  -1,
                                  "vector",
                                  [
                                    "x1"
                                  ],
                                  [
                                    "y1"
                                  ],
                                  "vert-have"
                                ]
                              ],
                              [
                                "and",
                                [
                                  "matrix-get",
                                  [
                                    "state"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x1"
                                    ],
                                    [
                                      "y1"
                                    ],
                                    "vert-value"
                                  ]
                                ],
                                [
                                  "not",
                                  [
                                    "and",
                                    [
                                      "matrix-get",
                                      [
                                        "state"
                                      ],
                                      [
                                        -1,
                                        "vector",
                                        [
                                          "x1"
                                        ],
                                        [
                                          "y1"
                                        ],
                                        "horiz-value"
                                      ]
                                    ],
                                    [
                                      "not",
                                      [
                                        "matrix-get",
                                        [
                                          "state"
                                        ],
                                        [
                                          -1,
                                          "vector",
                                          [
                                            "x1"
                                          ],
                                          [
                                            "y1"
                                          ],
                                          "horiz-want"
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ],
                              [
                                "if",
                                [
                                  "matrix-get",
                                  [
                                    "state"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x1"
                                    ],
                                    [
                                      "y1"
                                    ],
                                    "horiz-have"
                                  ]
                                ],
                                [
                                  "matrix-get",
                                  [
                                    "state"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x1"
                                    ],
                                    [
                                      "y1"
                                    ],
                                    "horiz-value"
                                  ]
                                ],
                                [
                                  "true"
                                ]
                              ]
                            ],
                            [
                              "if",
                              [
                                "matrix-get",
                                [
                                  "state"
                                ],
                                [
                                  -1,
                                  "vector",
                                  [
                                    "x1"
                                  ],
                                  [
                                    "y1"
                                  ],
                                  "horiz-have"
                                ]
                              ],
                              [
                                "and",
                                [
                                  "matrix-get",
                                  [
                                    "state"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x1"
                                    ],
                                    [
                                      "y1"
                                    ],
                                    "horiz-value"
                                  ]
                                ],
                                [
                                  "not",
                                  [
                                    "and",
                                    [
                                      "matrix-get",
                                      [
                                        "state"
                                      ],
                                      [
                                        -1,
                                        "vector",
                                        [
                                          "x1"
                                        ],
                                        [
                                          "y1"
                                        ],
                                        "vert-value"
                                      ]
                                    ],
                                    [
                                      "not",
                                      [
                                        "matrix-get",
                                        [
                                          "state"
                                        ],
                                        [
                                          -1,
                                          "vector",
                                          [
                                            "x1"
                                          ],
                                          [
                                            "y1"
                                          ],
                                          "vert-want"
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ],
                              [
                                "if",
                                [
                                  "matrix-get",
                                  [
                                    "state"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x1"
                                    ],
                                    [
                                      "y1"
                                    ],
                                    "vert-have"
                                  ]
                                ],
                                [
                                  "matrix-get",
                                  [
                                    "state"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      "x1"
                                    ],
                                    [
                                      "y1"
                                    ],
                                    "vert-value"
                                  ]
                                ],
                                [
                                  "true"
                                ]
                              ]
                            ]
                          ],
                          [
                            -1,
                            "vector",
                            [
                              "x1"
                            ],
                            [
                              "y1"
                            ],
                            [
                              "x2"
                            ],
                            [
                              "y2"
                            ],
                            [
                              "nv"
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ],
            [
              "circuit"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF103;&#xF11E;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF103;&#xF111;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF103;&#xF112;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF123;&#xF103;&#xF113;&#xF101;&#xF143;&#xF141;&#xF123;&#xF103;&#xF114;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF103;&#xF113;&#xF121;&#xF133;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF103;&#xF115;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF103;&#xF113;&#xF121;&#xF134;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF103;&#xF116;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF103;&#xF113;&#xF121;&#xF135;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF103;&#xF117;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF103;&#xF113;&#xF121;&#xF136;&#xF121;&#xF101;&#xF143;&#xF141;&#xF124;&#xF11D;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF103;&#xF113;&#xF121;&#xF137;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF103;&#xF11F;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF123;&#xF103;&#xF114;&#xF121;&#xF132;&#xF123;&#xF103;&#xF116;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF123;&#xF102;&#xF11E;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF114;&#xF121;&#xF132;&#xF123;&#xF103;&#xF115;&#xF121;&#xF123;&#xF103;&#xF119;&#xF121;&#xF132;&#xF139;&#xF132;&#xF123;&#xF102;&#xF11E;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF114;&#xF121;&#xF132;&#xF123;&#xF103;&#xF115;&#xF121;&#xF123;&#xF103;&#xF118;&#xF121;&#xF132;&#xF138;&#xF132;&#xF139;&#xF132;&#xF123;&#xF102;&#xF11E;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF114;&#xF121;&#xF132;&#xF123;&#xF103;&#xF115;&#xF121;&#xF123;&#xF103;&#xF11B;&#xF121;&#xF132;&#xF138;&#xF132;&#xF123;&#xF102;&#xF11E;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF114;&#xF121;&#xF132;&#xF123;&#xF103;&#xF115;&#xF121;&#xF123;&#xF103;&#xF11D;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF123;&#xF102;&#xF11E;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF114;&#xF121;&#xF132;&#xF123;&#xF103;&#xF115;&#xF121;&#xF123;&#xF103;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF102;&#xF11E;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF114;&#xF121;&#xF132;&#xF123;&#xF103;&#xF115;&#xF121;&#xF123;&#xF103;&#xF11B;&#xF121;&#xF132;&#xF134;&#xF121;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF123;&#xF102;&#xF11E;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF114;&#xF121;&#xF132;&#xF123;&#xF103;&#xF115;&#xF121;&#xF123;&#xF103;&#xF11C;&#xF121;&#xF132;&#xF139;&#xF132;&#xF123;&#xF102;&#xF11E;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF114;&#xF121;&#xF132;&#xF123;&#xF103;&#xF115;&#xF121;&#xF123;&#xF103;&#xF11B;&#xF121;&#xF132;&#xF138;&#xF132;&#xF139;&#xF132;&#xF123;&#xF102;&#xF11E;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF114;&#xF121;&#xF132;&#xF123;&#xF103;&#xF115;&#xF121;&#xF123;&#xF103;&#xF118;&#xF121;&#xF132;&#xF138;&#xF132;&#xF123;&#xF102;&#xF11E;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF114;&#xF121;&#xF132;&#xF123;&#xF103;&#xF115;&#xF121;&#xF123;&#xF103;&#xF11A;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF123;&#xF102;&#xF11E;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF114;&#xF121;&#xF132;&#xF123;&#xF103;&#xF115;&#xF121;&#xF123;&#xF103;&#xF119;&#xF121;&#xF132;&#xF123;&#xF102;&#xF11E;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF114;&#xF121;&#xF132;&#xF123;&#xF103;&#xF115;&#xF121;&#xF123;&#xF103;&#xF118;&#xF121;&#xF132;&#xF134;&#xF121;&#xF121;&#xF121;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF103;&#xF114;&#xF121;&#xF132;&#xF123;&#xF103;&#xF115;&#xF121;&#xF132;&#xF123;&#xF103;&#xF116;&#xF121;&#xF132;&#xF123;&#xF103;&#xF117;&#xF121;&#xF132;&#xF123;&#xF103;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF123;&#xF103;&#xF111;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1249
  },
  {
    "role": "comment",
    "lines": [
      "# wrap up both phases of simulation"
    ],
    "stanza": 1250
  },
  {
    "role": "code",
    "lines": [
      "define simulate-unless |",
      "  ? circuit |",
      "  assign state (unless-phase-1 (circuit)) |",
      "  unless-phase-2 (circuit) (state);"
    ],
    "preprocessed": "define simulate-unless |\n  ? circuit |\n  assign state (unless-phase-1 (circuit)) |\n  unless-phase-2 (circuit) (state);",
    "code": "2110132100111111312321100321001100003123211103210011000132210010111132210011000033312321001111013221001100003322100110001332233",
    "parse": [
      "define",
      "simulate-unless",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "assign",
          "state",
          [
            "unless-phase-1",
            [
              "circuit"
            ]
          ],
          [
            -1,
            "unless-phase-2",
            [
              "circuit"
            ],
            [
              "state"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF103;&#xF120;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF103;&#xF111;&#xF101;&#xF143;&#xF141;&#xF123;&#xF103;&#xF112;&#xF132;&#xF123;&#xF102;&#xF120;&#xF132;&#xF123;&#xF103;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF123;&#xF103;&#xF11E;&#xF132;&#xF123;&#xF103;&#xF111;&#xF121;&#xF132;&#xF123;&#xF103;&#xF112;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1251
  },
  {
    "role": "comment",
    "lines": [
      "# A circuit is a list of gates",
      "# Each gate is a list (x1 y1 x2 y2 v)",
      "# where the coordinates (x1,y1) and (x2,y2) represent",
      "# start and end points of a wire on a plane, carrying a ",
      "# logic value v.",
      "# Wires copy values from their start point.",
      "#   |  ",
      "#   | (A)",
      "#   V        ",
      "# -->-->",
      "# (B)(C)",
      "#",
      "# Wire C here copies from wire B.",
      "# If wire A is on, it blocks (sets to 0) C."
    ],
    "stanza": 1252
  },
  {
    "role": "code",
    "lines": [
      "assign circuit1",
      "    (vector",
      "     (vector 2 2 4 2 (true))",
      "     (vector 4 2 6 2 (true))",
      "     (vector 6 2 8 2 (true))",
      "     (vector 6 4 6 2 (true))) |",
      "     assign circuit2",
      "     (vector",
      "      (vector 2 2 4 2 (true))",
      "      (vector 4 2 6 2 (true))",
      "      (vector 6 2 8 2 (false))",
      "      (vector 6 4 6 2 (true))) |",
      "      equal (simulate-unless (circuit1)) (circuit2);"
    ],
    "preprocessed": "assign circuit1\n    (vector\n     (vector 2 2 4 2 (true))\n     (vector 4 2 6 2 (true))\n     (vector 6 2 8 2 (true))\n     (vector 6 4 6 2 (true))) |\n     assign circuit2\n     (vector\n      (vector 2 2 4 2 (true))\n      (vector 4 2 6 2 (true))\n      (vector 6 2 8 2 (false))\n      (vector 6 4 6 2 (true))) |\n      equal (simulate-unless (circuit1)) (circuit2);",
    "code": "21110321010000003221000032210000321032103210032103221333221000032100321032110321032213332210000321103210321000321032213332210000321103210032110321032213333123211103210100000132210000322100003210321032100321032213332210000321003210321103210322133322100003211032103210003210322033322100003211032100321103210322133331232100032210011111132210100000033322101000001332233",
    "parse": [
      "assign",
      "circuit1",
      [
        "vector",
        [
          "vector",
          "2",
          "2",
          "4",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "2",
          "6",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "2",
          "8",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "4",
          "6",
          "2",
          [
            "true"
          ]
        ]
      ],
      [
        -1,
        "assign",
        "circuit2",
        [
          "vector",
          [
            "vector",
            "2",
            "2",
            "4",
            "2",
            [
              "true"
            ]
          ],
          [
            "vector",
            "4",
            "2",
            "6",
            "2",
            [
              "true"
            ]
          ],
          [
            "vector",
            "6",
            "2",
            "8",
            "2",
            [
              "false"
            ]
          ],
          [
            "vector",
            "6",
            "4",
            "6",
            "2",
            [
              "true"
            ]
          ]
        ],
        [
          -1,
          "equal",
          [
            "simulate-unless",
            [
              "circuit1"
            ]
          ],
          [
            "circuit2"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF123;&#xF104;&#xF111;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF135;&#xF135;&#xF137;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF135;&#xF139;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF139;&#xF135;&#xF13B;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF139;&#xF137;&#xF139;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF104;&#xF112;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF135;&#xF135;&#xF137;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF135;&#xF139;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF139;&#xF135;&#xF13B;&#xF135;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF139;&#xF137;&#xF139;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF121;&#xF101;&#xF143;&#xF13B;&#xF132;&#xF123;&#xF103;&#xF120;&#xF132;&#xF123;&#xF104;&#xF111;&#xF121;&#xF121;&#xF132;&#xF123;&#xF104;&#xF112;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1253
  },
  {
    "role": "comment",
    "lines": [
      "# okay, now let us make a simple image class",
      "# we are going to encode each row as a single binary number,",
      "# rather than a vector, so that images will be pretty",
      "# obvious in the raw, uninterpreted message"
    ],
    "stanza": 1254
  },
  {
    "role": "code",
    "lines": [
      "define bit-get |",
      "  lambda (n offset) |",
      "  assign div2 (div (n) 2) ",
      "  (if (= 0 | offset)",
      "      (not | = (n) | * 2 | div2)",
      "      (bit-get (div2) | - (offset) 1));"
    ],
    "preprocessed": "define bit-get |\n  lambda (n offset) |\n  assign div2 (div (n) 2) \n  (if (= 0 | offset)\n      (not | = (n) | * 2 | div2)\n      (bit-get (div2) | - (offset) 1));",
    "code": "2110132101000010312321101032210001003210100001133123211103210100010032210001032210001003321033221111322113203123210100001133221013123211322100010033123210013210312321010001003322101000010322101000100331232101132210100001133213332233",
    "parse": [
      "define",
      "bit-get",
      [
        -1,
        "lambda",
        [
          "n",
          "offset"
        ],
        [
          -1,
          "assign",
          "div2",
          [
            "div",
            [
              "n"
            ],
            "2"
          ],
          [
            "if",
            [
              "=",
              "0",
              [
                -1,
                "offset"
              ]
            ],
            [
              "not",
              [
                -1,
                "=",
                [
                  "n"
                ],
                [
                  -1,
                  "*",
                  "2",
                  [
                    -1,
                    "div2"
                  ]
                ]
              ]
            ],
            [
              "bit-get",
              [
                "div2"
              ],
              [
                -1,
                "-",
                [
                  "offset"
                ],
                "1"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF104;&#xF113;&#xF101;&#xF143;&#xF123;&#xF11B;&#xF132;&#xF126;&#xF115;&#xF123;&#xF104;&#xF114;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF104;&#xF115;&#xF132;&#xF124;&#xF113;&#xF132;&#xF126;&#xF115;&#xF121;&#xF135;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF133;&#xF101;&#xF143;&#xF123;&#xF104;&#xF114;&#xF121;&#xF132;&#xF138;&#xF101;&#xF143;&#xF136;&#xF132;&#xF126;&#xF115;&#xF121;&#xF101;&#xF143;&#xF13C;&#xF135;&#xF101;&#xF143;&#xF123;&#xF104;&#xF115;&#xF121;&#xF132;&#xF123;&#xF104;&#xF113;&#xF132;&#xF123;&#xF104;&#xF115;&#xF121;&#xF101;&#xF143;&#xF13E;&#xF132;&#xF123;&#xF104;&#xF114;&#xF121;&#xF134;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1255
  },
  {
    "role": "code",
    "lines": [
      "= 0 | bit-get (::.) 0;"
    ],
    "preprocessed": "= 0 | bit-get (::.) 0;",
    "code": "21132031232101000010322101000101332032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "bit-get",
        [
          "::."
        ],
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF123;&#xF104;&#xF113;&#xF132;&#xF123;&#xF104;&#xF116;&#xF121;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 1256
  },
  {
    "role": "code",
    "lines": [
      "= 1 | bit-get (::.) 1;"
    ],
    "preprocessed": "= 1 | bit-get (::.) 1;",
    "code": "21132131232101000010322101000101332132233",
    "parse": [
      "=",
      "1",
      [
        -1,
        "bit-get",
        [
          "::."
        ],
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF123;&#xF104;&#xF113;&#xF132;&#xF123;&#xF104;&#xF116;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 1257
  },
  {
    "role": "code",
    "lines": [
      "= 1 | bit-get (::.) 2;"
    ],
    "preprocessed": "= 1 | bit-get (::.) 2;",
    "code": "211321312321010000103221010001013321032233",
    "parse": [
      "=",
      "1",
      [
        -1,
        "bit-get",
        [
          "::."
        ],
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF123;&#xF104;&#xF113;&#xF132;&#xF123;&#xF104;&#xF116;&#xF121;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 1258
  },
  {
    "role": "code",
    "lines": [
      "= 0 | bit-get (::.) 3;"
    ],
    "preprocessed": "= 0 | bit-get (::.) 3;",
    "code": "211320312321010000103221010001013321132233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "bit-get",
        [
          "::."
        ],
        "3"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF123;&#xF104;&#xF113;&#xF132;&#xF123;&#xF104;&#xF116;&#xF121;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 1259
  },
  {
    "role": "code",
    "lines": [
      "= 0 | bit-get (::.) 4;"
    ],
    "preprocessed": "= 0 | bit-get (::.) 4;",
    "code": "2113203123210100001032210100010133210032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "bit-get",
        [
          "::."
        ],
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF123;&#xF104;&#xF113;&#xF132;&#xF123;&#xF104;&#xF116;&#xF121;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 1260
  },
  {
    "role": "code",
    "lines": [
      "= 0 | bit-get 8 0;"
    ],
    "preprocessed": "= 0 | bit-get 8 0;",
    "code": "2113203123210100001032100032032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "bit-get",
        "8",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF123;&#xF104;&#xF113;&#xF13B;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 1261
  },
  {
    "role": "code",
    "lines": [
      "= 0 | bit-get 8 1;"
    ],
    "preprocessed": "= 0 | bit-get 8 1;",
    "code": "2113203123210100001032100032132233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "bit-get",
        "8",
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF123;&#xF104;&#xF113;&#xF13B;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 1262
  },
  {
    "role": "code",
    "lines": [
      "= 0 | bit-get 8 2;"
    ],
    "preprocessed": "= 0 | bit-get 8 2;",
    "code": "21132031232101000010321000321032233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "bit-get",
        "8",
        "2"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF123;&#xF104;&#xF113;&#xF13B;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 1263
  },
  {
    "role": "code",
    "lines": [
      "= 1 | bit-get 8 3;"
    ],
    "preprocessed": "= 1 | bit-get 8 3;",
    "code": "21132131232101000010321000321132233",
    "parse": [
      "=",
      "1",
      [
        -1,
        "bit-get",
        "8",
        "3"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF123;&#xF104;&#xF113;&#xF13B;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 1264
  },
  {
    "role": "code",
    "lines": [
      "define make-image |",
      "  lambda (h w lst) |",
      "  vector (h) (w) (lst);"
    ],
    "preprocessed": "define make-image |\n  lambda (h w lst) |\n  vector (h) (w) (lst);",
    "code": "2110132101000110312321101032210001111321010001113210010003312321000032210001111332210100011133221001000332233",
    "parse": [
      "define",
      "make-image",
      [
        -1,
        "lambda",
        [
          "h",
          "w",
          "lst"
        ],
        [
          -1,
          "vector",
          [
            "h"
          ],
          [
            "w"
          ],
          [
            "lst"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF104;&#xF117;&#xF101;&#xF143;&#xF123;&#xF11B;&#xF132;&#xF12A;&#xF120;&#xF123;&#xF104;&#xF118;&#xF126;&#xF119;&#xF121;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF12A;&#xF120;&#xF121;&#xF132;&#xF123;&#xF104;&#xF118;&#xF121;&#xF132;&#xF126;&#xF119;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1265
  },
  {
    "role": "code",
    "lines": [
      "define image-get |",
      "  lambda (image row col) |",
      "  assign h (list-ref (image) 0) |",
      "  assign w (list-ref (image) 1) |",
      "  assign lst (list-ref (image) 2) |",
      "  assign bits (list-ref (lst) (row)) |",
      "  bit-get (bits) (- (- (w) (col)) 1);"
    ],
    "preprocessed": "define image-get |\n  lambda (image row col) |\n  assign h (list-ref (image) 0) |\n  assign w (list-ref (image) 1) |\n  assign lst (list-ref (image) 2) |\n  assign bits (list-ref (lst) (row)) |\n  bit-get (bits) (- (- (w) (col)) 1);",
    "code": "21101321010010003123211010322101001001321010010103210100101133123211103210001111322100101132210100100133203312321110321010001113221001011322101001001332133123211103210010003221001011322101001001332103312321110321010011003221001011322100100033221010010103331232101000010322101001100332210113221011322101000111332210100101133321332233",
    "parse": [
      "define",
      "image-get",
      [
        -1,
        "lambda",
        [
          "image",
          "row",
          "col"
        ],
        [
          -1,
          "assign",
          "h",
          [
            "list-ref",
            [
              "image"
            ],
            "0"
          ],
          [
            -1,
            "assign",
            "w",
            [
              "list-ref",
              [
                "image"
              ],
              "1"
            ],
            [
              -1,
              "assign",
              "lst",
              [
                "list-ref",
                [
                  "image"
                ],
                "2"
              ],
              [
                -1,
                "assign",
                "bits",
                [
                  "list-ref",
                  [
                    "lst"
                  ],
                  [
                    "row"
                  ]
                ],
                [
                  -1,
                  "bit-get",
                  [
                    "bits"
                  ],
                  [
                    "-",
                    [
                      "-",
                      [
                        "w"
                      ],
                      [
                        "col"
                      ]
                    ],
                    "1"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF104;&#xF119;&#xF101;&#xF143;&#xF123;&#xF11B;&#xF132;&#xF123;&#xF104;&#xF11A;&#xF123;&#xF104;&#xF11B;&#xF123;&#xF104;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF141;&#xF12A;&#xF120;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF104;&#xF11A;&#xF121;&#xF133;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF104;&#xF118;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF104;&#xF11A;&#xF121;&#xF134;&#xF121;&#xF101;&#xF143;&#xF141;&#xF126;&#xF119;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF104;&#xF11A;&#xF121;&#xF135;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF104;&#xF11D;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF126;&#xF119;&#xF121;&#xF132;&#xF123;&#xF104;&#xF11B;&#xF121;&#xF121;&#xF101;&#xF143;&#xF123;&#xF104;&#xF113;&#xF132;&#xF123;&#xF104;&#xF11D;&#xF121;&#xF132;&#xF13E;&#xF132;&#xF13E;&#xF132;&#xF123;&#xF104;&#xF118;&#xF121;&#xF132;&#xF123;&#xF104;&#xF11C;&#xF121;&#xF121;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1266
  },
  {
    "role": "code",
    "lines": [
      "define image-height |",
      "  ? image |",
      "  list-ref (image) 0;"
    ],
    "preprocessed": "define image-height |\n  ? image |\n  list-ref (image) 0;",
    "code": "211013210100110131232110032101001001312321001011322101001001332032233",
    "parse": [
      "define",
      "image-height",
      [
        -1,
        "?",
        "image",
        [
          -1,
          "list-ref",
          [
            "image"
          ],
          "0"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF104;&#xF11E;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF104;&#xF11A;&#xF101;&#xF143;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF104;&#xF11A;&#xF121;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 1267
  },
  {
    "role": "code",
    "lines": [
      "define image-width |",
      "  ? image |",
      "  list-ref (image) 1;"
    ],
    "preprocessed": "define image-width |\n  ? image |\n  list-ref (image) 1;",
    "code": "211013210100111031232110032101001001312321001011322101001001332132233",
    "parse": [
      "define",
      "image-width",
      [
        -1,
        "?",
        "image",
        [
          -1,
          "list-ref",
          [
            "image"
          ],
          "1"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF104;&#xF11F;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF104;&#xF11A;&#xF101;&#xF143;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF104;&#xF11A;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 1268
  },
  {
    "role": "code",
    "lines": [
      "define test-image |",
      "  make-image 3 5 |",
      "  vector (:....) (:...:) (:....);"
    ],
    "preprocessed": "define test-image |\n  make-image 3 5 |\n  vector (:....) (:...:) (:....);",
    "code": "211013210100111131232101000110321132101312321000032210101000033221010100013322101010000332233",
    "parse": [
      "define",
      "test-image",
      [
        -1,
        "make-image",
        "3",
        "5",
        [
          -1,
          "vector",
          [
            ":...."
          ],
          [
            ":...:"
          ],
          [
            ":...."
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF104;&#xF120;&#xF101;&#xF143;&#xF123;&#xF104;&#xF117;&#xF136;&#xF138;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF105;&#xF111;&#xF121;&#xF132;&#xF123;&#xF105;&#xF112;&#xF121;&#xF132;&#xF123;&#xF105;&#xF111;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1269
  },
  {
    "role": "code",
    "lines": [
      "= 3 (image-height | test-image);"
    ],
    "preprocessed": "= 3 (image-height | test-image);",
    "code": "211321132210100110131232101001111332233",
    "parse": [
      "=",
      "3",
      [
        "image-height",
        [
          -1,
          "test-image"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF136;&#xF132;&#xF123;&#xF104;&#xF11E;&#xF101;&#xF143;&#xF123;&#xF104;&#xF120;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1270
  },
  {
    "role": "code",
    "lines": [
      "= 5 (image-width | test-image);"
    ],
    "preprocessed": "= 5 (image-width | test-image);",
    "code": "2113210132210100111031232101001111332233",
    "parse": [
      "=",
      "5",
      [
        "image-width",
        [
          -1,
          "test-image"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF138;&#xF132;&#xF123;&#xF104;&#xF11F;&#xF101;&#xF143;&#xF123;&#xF104;&#xF120;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1271
  },
  {
    "role": "code",
    "lines": [
      "= (true) (image-get (test-image) 0 0);"
    ],
    "preprocessed": "= (true) (image-get (test-image) 0 0);",
    "code": "211322133221010010003221010011113320320332233",
    "parse": [
      "=",
      [
        "true"
      ],
      [
        "image-get",
        [
          "test-image"
        ],
        "0",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF134;&#xF121;&#xF132;&#xF123;&#xF104;&#xF119;&#xF132;&#xF123;&#xF104;&#xF120;&#xF121;&#xF133;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1272
  },
  {
    "role": "code",
    "lines": [
      "= (false) (image-get (test-image) 0 1);"
    ],
    "preprocessed": "= (false) (image-get (test-image) 0 1);",
    "code": "211322033221010010003221010011113320321332233",
    "parse": [
      "=",
      [
        "false"
      ],
      [
        "image-get",
        [
          "test-image"
        ],
        "0",
        "1"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF133;&#xF121;&#xF132;&#xF123;&#xF104;&#xF119;&#xF132;&#xF123;&#xF104;&#xF120;&#xF121;&#xF133;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1273
  },
  {
    "role": "code",
    "lines": [
      "= (false) (image-get (test-image) 0 4);"
    ],
    "preprocessed": "= (false) (image-get (test-image) 0 4);",
    "code": "21132203322101001000322101001111332032100332233",
    "parse": [
      "=",
      [
        "false"
      ],
      [
        "image-get",
        [
          "test-image"
        ],
        "0",
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF133;&#xF121;&#xF132;&#xF123;&#xF104;&#xF119;&#xF132;&#xF123;&#xF104;&#xF120;&#xF121;&#xF133;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1274
  },
  {
    "role": "code",
    "lines": [
      "= (true) (image-get (test-image) 1 0);"
    ],
    "preprocessed": "= (true) (image-get (test-image) 1 0);",
    "code": "211322133221010010003221010011113321320332233",
    "parse": [
      "=",
      [
        "true"
      ],
      [
        "image-get",
        [
          "test-image"
        ],
        "1",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF134;&#xF121;&#xF132;&#xF123;&#xF104;&#xF119;&#xF132;&#xF123;&#xF104;&#xF120;&#xF121;&#xF134;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1275
  },
  {
    "role": "code",
    "lines": [
      "= (true) (image-get (test-image) 2 0);"
    ],
    "preprocessed": "= (true) (image-get (test-image) 2 0);",
    "code": "2113221332210100100032210100111133210320332233",
    "parse": [
      "=",
      [
        "true"
      ],
      [
        "image-get",
        [
          "test-image"
        ],
        "2",
        "0"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF134;&#xF121;&#xF132;&#xF123;&#xF104;&#xF119;&#xF132;&#xF123;&#xF104;&#xF120;&#xF121;&#xF135;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1276
  },
  {
    "role": "code",
    "lines": [
      "= (true) (image-get (test-image) 1 4);"
    ],
    "preprocessed": "= (true) (image-get (test-image) 1 4);",
    "code": "21132213322101001000322101001111332132100332233",
    "parse": [
      "=",
      [
        "true"
      ],
      [
        "image-get",
        [
          "test-image"
        ],
        "1",
        "4"
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF134;&#xF121;&#xF132;&#xF123;&#xF104;&#xF119;&#xF132;&#xF123;&#xF104;&#xF120;&#xF121;&#xF134;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1277
  },
  {
    "role": "comment",
    "lines": [
      "# need a way to join two lists"
    ],
    "stanza": 1278
  },
  {
    "role": "code",
    "lines": [
      "define merge-list |",
      "  ? lst1 |",
      "  ? lst2 |",
      "  (if (> (list-length | lst1) 0)",
      "      (prepend (head | lst1) (merge-list (tail | lst1) (lst2)))",
      "      (lst2));"
    ],
    "preprocessed": "define merge-list |\n  ? lst1 |\n  ? lst2 |\n  (if (> (list-length | lst1) 0)\n      (prepend (head | lst1) (merge-list (tail | lst1) (lst2)))\n      (lst2));",
    "code": "21101321010100103123211003211011010312321100321101101131232211113221003221001010312321101101033203322100110032210001113123211011010332210101001032210010013123211011010332211011011333322110110113332233",
    "parse": [
      "define",
      "merge-list",
      [
        -1,
        "?",
        "lst1",
        [
          -1,
          "?",
          "lst2",
          [
            -1,
            [
              "if",
              [
                ">",
                [
                  "list-length",
                  [
                    -1,
                    "lst1"
                  ]
                ],
                "0"
              ],
              [
                "prepend",
                [
                  "head",
                  [
                    -1,
                    "lst1"
                  ]
                ],
                [
                  "merge-list",
                  [
                    "tail",
                    [
                      -1,
                      "lst1"
                    ]
                  ],
                  [
                    "lst2"
                  ]
                ]
              ],
              [
                "lst2"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF105;&#xF113;&#xF101;&#xF143;&#xF13F;&#xF12F;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF12F;&#xF11C;&#xF101;&#xF143;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF101;&#xF143;&#xF12F;&#xF11B;&#xF121;&#xF133;&#xF121;&#xF132;&#xF126;&#xF11D;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF12F;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF105;&#xF113;&#xF132;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF12F;&#xF11B;&#xF121;&#xF132;&#xF12F;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12F;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1279
  },
  {
    "role": "code",
    "lines": [
      "define merge-lists |",
      "  ? lst |",
      "  (if (> (list-length | lst) 2)",
      "      (merge-list (head | lst) (merge-lists | tail | lst))",
      "      (if (= (list-length | lst) 2)",
      "      (merge-list (head | lst) | (head | tail | lst))",
      "      (if (= (list-length | lst) 1)",
      "          (head | lst)",
      "          (vector))));"
    ],
    "preprocessed": "define merge-lists |\n  ? lst |\n  (if (> (list-length | lst) 2)\n      (merge-list (head | lst) (merge-lists | tail | lst))\n      (if (= (list-length | lst) 2)\n      (merge-list (head | lst) | (head | tail | lst))\n      (if (= (list-length | lst) 1)\n          (head | lst)\n          (vector))));",
    "code": "21101321010100113123211003210010003123221111322100322100101031232100100033210332210101001032210001113123210010003322101010011312321001001312321001000333221111322113221001010312321001000332103322101010010322100011131232100100033123221000111312321001001312321001000333221111322113221001010312321001000332133221000111312321001000332210000333332233",
    "parse": [
      "define",
      "merge-lists",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          [
            "if",
            [
              ">",
              [
                "list-length",
                [
                  -1,
                  "lst"
                ]
              ],
              "2"
            ],
            [
              "merge-list",
              [
                "head",
                [
                  -1,
                  "lst"
                ]
              ],
              [
                "merge-lists",
                [
                  -1,
                  "tail",
                  [
                    -1,
                    "lst"
                  ]
                ]
              ]
            ],
            [
              "if",
              [
                "=",
                [
                  "list-length",
                  [
                    -1,
                    "lst"
                  ]
                ],
                "2"
              ],
              [
                "merge-list",
                [
                  "head",
                  [
                    -1,
                    "lst"
                  ]
                ],
                [
                  -1,
                  [
                    "head",
                    [
                      -1,
                      "tail",
                      [
                        -1,
                        "lst"
                      ]
                    ]
                  ]
                ]
              ],
              [
                "if",
                [
                  "=",
                  [
                    "list-length",
                    [
                      -1,
                      "lst"
                    ]
                  ],
                  "1"
                ],
                [
                  "head",
                  [
                    -1,
                    "lst"
                  ]
                ],
                [
                  "vector"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF105;&#xF114;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF119;&#xF101;&#xF143;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF101;&#xF143;&#xF126;&#xF119;&#xF121;&#xF135;&#xF121;&#xF132;&#xF123;&#xF105;&#xF113;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF126;&#xF119;&#xF121;&#xF132;&#xF123;&#xF105;&#xF114;&#xF101;&#xF143;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF126;&#xF119;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF126;&#xF11B;&#xF101;&#xF143;&#xF126;&#xF119;&#xF121;&#xF135;&#xF121;&#xF132;&#xF123;&#xF105;&#xF113;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF126;&#xF119;&#xF121;&#xF101;&#xF143;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF126;&#xF119;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF126;&#xF11B;&#xF101;&#xF143;&#xF126;&#xF119;&#xF121;&#xF134;&#xF121;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF126;&#xF119;&#xF121;&#xF132;&#xF123;&#xF111;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1280
  },
  {
    "role": "code",
    "lines": [
      "equal (vector 1 2 3 4) (merge-list (vector 1 2) (vector 3 4));"
    ],
    "preprocessed": "equal (vector 1 2 3 4) (merge-list (vector 1 2) (vector 3 4));",
    "code": "2100032210000321321032113210033221010100103221000032132103322100003211321003332233",
    "parse": [
      "equal",
      [
        "vector",
        "1",
        "2",
        "3",
        "4"
      ],
      [
        "merge-list",
        [
          "vector",
          "1",
          "2"
        ],
        [
          "vector",
          "3",
          "4"
        ]
      ]
    ],
    "spider": "&#xF13B;&#xF132;&#xF123;&#xF111;&#xF134;&#xF135;&#xF136;&#xF137;&#xF121;&#xF132;&#xF123;&#xF105;&#xF113;&#xF132;&#xF123;&#xF111;&#xF134;&#xF135;&#xF121;&#xF132;&#xF123;&#xF111;&#xF136;&#xF137;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1281
  },
  {
    "role": "code",
    "lines": [
      "equal (vector 1 2 3 4) (merge-lists (vector (vector 1 2) (vector 3) (vector 4)));"
    ],
    "preprocessed": "equal (vector 1 2 3 4) (merge-lists (vector (vector 1 2) (vector 3) (vector 4)));",
    "code": "2100032210000321321032113210033221010100113221000032210000321321033221000032113322100003210033332233",
    "parse": [
      "equal",
      [
        "vector",
        "1",
        "2",
        "3",
        "4"
      ],
      [
        "merge-lists",
        [
          "vector",
          [
            "vector",
            "1",
            "2"
          ],
          [
            "vector",
            "3"
          ],
          [
            "vector",
            "4"
          ]
        ]
      ]
    ],
    "spider": "&#xF13B;&#xF132;&#xF123;&#xF111;&#xF134;&#xF135;&#xF136;&#xF137;&#xF121;&#xF132;&#xF123;&#xF105;&#xF114;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF134;&#xF135;&#xF121;&#xF132;&#xF123;&#xF111;&#xF136;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1282
  },
  {
    "role": "comment",
    "lines": [
      "# helper for pairing"
    ],
    "stanza": 1283
  },
  {
    "role": "code",
    "lines": [
      "define prefix |",
      "  ? x | ",
      "  ? lst |",
      "  map (? y (vector (x) (y))) (lst);"
    ],
    "preprocessed": "define prefix |\n  ? x | \n  ? lst |\n  map (? y (vector (x) (y))) (lst);",
    "code": "2110132101010100312321100321001113123211003210010003123211000113221100321100113221000032210011133221100113333221001000332233",
    "parse": [
      "define",
      "prefix",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "lst",
          [
            -1,
            "map",
            [
              "?",
              "y",
              [
                "vector",
                [
                  "x"
                ],
                [
                  "y"
                ]
              ]
            ],
            [
              "lst"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF105;&#xF115;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF126;&#xF119;&#xF101;&#xF143;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF125;&#xF114;&#xF132;&#xF123;&#xF111;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF125;&#xF114;&#xF121;&#xF121;&#xF121;&#xF132;&#xF126;&#xF119;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1284
  },
  {
    "role": "code",
    "lines": [
      "equal (vector (vector 1 10) (vector 1 11))",
      "       (prefix 1 (vector 10 11));"
    ],
    "preprocessed": "equal (vector (vector 1 10) (vector 1 11))\n       (prefix 1 (vector 10 11));",
    "code": "21000322100003221000032132101033221000032132101133322101010100321322100003210103210113332233",
    "parse": [
      "equal",
      [
        "vector",
        [
          "vector",
          "1",
          "10"
        ],
        [
          "vector",
          "1",
          "11"
        ]
      ],
      [
        "prefix",
        "1",
        [
          "vector",
          "10",
          "11"
        ]
      ]
    ],
    "spider": "&#xF13B;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF134;&#xF13D;&#xF121;&#xF132;&#xF123;&#xF111;&#xF134;&#xF13E;&#xF121;&#xF121;&#xF132;&#xF123;&#xF105;&#xF115;&#xF134;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF13E;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1285
  },
  {
    "role": "comment",
    "lines": [
      "# need a way to take product of domains"
    ],
    "stanza": 1286
  },
  {
    "role": "code",
    "lines": [
      "define pairing |",
      "  ? lst1 | ",
      "  ? lst2",
      "  (if (> (list-length | lst1) 0)",
      "      (merge-list (prefix (head | lst1) (lst2))",
      "          (pairing (tail | lst1) (lst2)))",
      "      (vector));"
    ],
    "preprocessed": "define pairing |\n  ? lst1 | \n  ? lst2\n  (if (> (list-length | lst1) 0)\n      (merge-list (prefix (head | lst1) (lst2))\n          (pairing (tail | lst1) (lst2)))\n      (vector));",
    "code": "21101321010101013123211003211011010312321100321101101132211113221003221001010312321101101033203322101010010322101010100322100011131232110110103322110110113332210101010132210010013123211011010332211011011333322100003332233",
    "parse": [
      "define",
      "pairing",
      [
        -1,
        "?",
        "lst1",
        [
          -1,
          "?",
          "lst2",
          [
            "if",
            [
              ">",
              [
                "list-length",
                [
                  -1,
                  "lst1"
                ]
              ],
              "0"
            ],
            [
              "merge-list",
              [
                "prefix",
                [
                  "head",
                  [
                    -1,
                    "lst1"
                  ]
                ],
                [
                  "lst2"
                ]
              ],
              [
                "pairing",
                [
                  "tail",
                  [
                    -1,
                    "lst1"
                  ]
                ],
                [
                  "lst2"
                ]
              ]
            ],
            [
              "vector"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF105;&#xF116;&#xF101;&#xF143;&#xF13F;&#xF12F;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF12F;&#xF11C;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF101;&#xF143;&#xF12F;&#xF11B;&#xF121;&#xF133;&#xF121;&#xF132;&#xF123;&#xF105;&#xF113;&#xF132;&#xF123;&#xF105;&#xF115;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF12F;&#xF11B;&#xF121;&#xF132;&#xF12F;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF123;&#xF105;&#xF116;&#xF132;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF12F;&#xF11B;&#xF121;&#xF132;&#xF12F;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1287
  },
  {
    "role": "code",
    "lines": [
      "equal (vector (vector 1 10) (vector 1 11) (vector 2 10) (vector 2 11))",
      "       (pairing (vector 1 2) (vector 10 11));"
    ],
    "preprocessed": "equal (vector (vector 1 10) (vector 1 11) (vector 2 10) (vector 2 11))\n       (pairing (vector 1 2) (vector 10 11));",
    "code": "21000322100003221000032132101033221000032132101133221000032103210103322100003210321011333221010101013221000032132103322100003210103210113332233",
    "parse": [
      "equal",
      [
        "vector",
        [
          "vector",
          "1",
          "10"
        ],
        [
          "vector",
          "1",
          "11"
        ],
        [
          "vector",
          "2",
          "10"
        ],
        [
          "vector",
          "2",
          "11"
        ]
      ],
      [
        "pairing",
        [
          "vector",
          "1",
          "2"
        ],
        [
          "vector",
          "10",
          "11"
        ]
      ]
    ],
    "spider": "&#xF13B;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF134;&#xF13D;&#xF121;&#xF132;&#xF123;&#xF111;&#xF134;&#xF13E;&#xF121;&#xF132;&#xF123;&#xF111;&#xF135;&#xF13D;&#xF121;&#xF132;&#xF123;&#xF111;&#xF135;&#xF13E;&#xF121;&#xF121;&#xF132;&#xF123;&#xF105;&#xF116;&#xF132;&#xF123;&#xF111;&#xF134;&#xF135;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF13E;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1288
  },
  {
    "role": "comment",
    "lines": [
      "# need a way to make counting sets"
    ],
    "stanza": 1289
  },
  {
    "role": "code",
    "lines": [
      "define count |",
      "  ? lo | ? hi",
      "  (if (<= (lo) (hi))",
      "      (prepend (lo) (count (+ (lo) 1) (hi)))",
      "      (vector));"
    ],
    "preprocessed": "define count |\n  ? lo | ? hi\n  (if (<= (lo) (hi))\n      (prepend (lo) (count (+ (lo) 1) (hi)))\n      (vector));",
    "code": "211013211010111312321100321010101103123211003210101011132211113221111113221010101103322101010111333221001100322101010110332211010111322101032210101011033213322101010111333322100003332233",
    "parse": [
      "define",
      "count",
      [
        -1,
        "?",
        "lo",
        [
          -1,
          "?",
          "hi",
          [
            "if",
            [
              "<=",
              [
                "lo"
              ],
              [
                "hi"
              ]
            ],
            [
              "prepend",
              [
                "lo"
              ],
              [
                "count",
                [
                  "+",
                  [
                    "lo"
                  ],
                  "1"
                ],
                [
                  "hi"
                ]
              ]
            ],
            [
              "vector"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF12F;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF105;&#xF117;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF105;&#xF118;&#xF132;&#xF142;&#xF132;&#xF125;&#xF120;&#xF132;&#xF123;&#xF105;&#xF117;&#xF121;&#xF132;&#xF123;&#xF105;&#xF118;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11D;&#xF132;&#xF123;&#xF105;&#xF117;&#xF121;&#xF132;&#xF12F;&#xF118;&#xF132;&#xF13D;&#xF132;&#xF123;&#xF105;&#xF117;&#xF121;&#xF134;&#xF121;&#xF132;&#xF123;&#xF105;&#xF118;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1290
  },
  {
    "role": "code",
    "lines": [
      "equal (vector 0 1 2 3 4) (count 0 4);"
    ],
    "preprocessed": "equal (vector 0 1 2 3 4) (count 0 4);",
    "code": "2100032210000320321321032113210033221101011132032100332233",
    "parse": [
      "equal",
      [
        "vector",
        "0",
        "1",
        "2",
        "3",
        "4"
      ],
      [
        "count",
        "0",
        "4"
      ]
    ],
    "spider": "&#xF13B;&#xF132;&#xF123;&#xF111;&#xF133;&#xF134;&#xF135;&#xF136;&#xF137;&#xF121;&#xF132;&#xF12F;&#xF118;&#xF133;&#xF137;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1291
  },
  {
    "role": "comment",
    "lines": [
      "# given an image of a circuit, extract a model.",
      "# wire elements are centered on multiples of 8"
    ],
    "stanza": 1292
  },
  {
    "role": "comment",
    "lines": [
      "# individual element..."
    ],
    "stanza": 1293
  },
  {
    "role": "code",
    "lines": [
      "define distill-element |",
      "  ? image | ? xlogic | ? ylogic | ? xmid | ? ymid ",
      "  (if (image-get (image) (ymid) (xmid))",
      "      (assign vert (image-get (image) (+ (ymid) 4) (xmid)) |",
      "          assign dx (if (vert) 0 1) |",
      "          assign dy (if (vert) 1 0) |",
      "          assign pos (image-get (image) ",
      "                    (+ (ymid) | + (* 4 | dy) (* 2 | dx))",
      "                    (+ (xmid) | - (* 4 | dx) (* 2 | dy))) |",
      "          assign sgn (if (pos) 1 (- 0 1)) |",
      "          assign dx (* (sgn) (dx)) |",
      "          assign dy (* (sgn) (dy)) |",
      "          assign active (image-get (image) (+ (ymid) (dx)) (- (xmid) (dy))) |",
      "          (vector ",
      "           (vector (- (xlogic) (dx)) ",
      "               (- (ylogic) (dy))",
      "               (+ (xlogic) (dx))",
      "               (+ (ylogic) (dy))",
      "               (active))))",
      "      (vector));"
    ],
    "preprocessed": "define distill-element |\n  ? image | ? xlogic | ? ylogic | ? xmid | ? ymid \n  (if (image-get (image) (ymid) (xmid))\n      (assign vert (image-get (image) (+ (ymid) 4) (xmid)) |\n          assign dx (if (vert) 0 1) |\n          assign dy (if (vert) 1 0) |\n          assign pos (image-get (image) \n                    (+ (ymid) | + (* 4 | dy) (* 2 | dx))\n                    (+ (xmid) | - (* 4 | dx) (* 2 | dy))) |\n          assign sgn (if (pos) 1 (- 0 1)) |\n          assign dx (* (sgn) (dx)) |\n          assign dy (* (sgn) (dy)) |\n          assign active (image-get (image) (+ (ymid) (dx)) (- (xmid) (dy))) |\n          (vector \n           (vector (- (xlogic) (dx)) \n               (- (ylogic) (dy))\n               (+ (xlogic) (dx))\n               (+ (ylogic) (dy))\n               (active))))\n      (vector));",
    "code
    "parse": [
      "define",
      "distill-element",
      [
        -1,
        "?",
        "image",
        [
          -1,
          "?",
          "xlogic",
          [
            -1,
            "?",
            "ylogic",
            [
              -1,
              "?",
              "xmid",
              [
                -1,
                "?",
                "ymid",
                [
                  "if",
                  [
                    "image-get",
                    [
                      "image"
                    ],
                    [
                      "ymid"
                    ],
                    [
                      "xmid"
                    ]
                  ],
                  [
                    "assign",
                    "vert",
                    [
                      "image-get",
                      [
                        "image"
                      ],
                      [
                        "+",
                        [
                          "ymid"
                        ],
                        "4"
                      ],
                      [
                        "xmid"
                      ]
                    ],
                    [
                      -1,
                      "assign",
                      "dx",
                      [
                        "if",
                        [
                          "vert"
                        ],
                        "0",
                        "1"
                      ],
                      [
                        -1,
                        "assign",
                        "dy",
                        [
                          "if",
                          [
                            "vert"
                          ],
                          "1",
                          "0"
                        ],
                        [
                          -1,
                          "assign",
                          "pos",
                          [
                            "image-get",
                            [
                              "image"
                            ],
                            [
                              "+",
                              [
                                "ymid"
                              ],
                              [
                                -1,
                                "+",
                                [
                                  "*",
                                  "4",
                                  [
                                    -1,
                                    "dy"
                                  ]
                                ],
                                [
                                  "*",
                                  "2",
                                  [
                                    -1,
                                    "dx"
                                  ]
                                ]
                              ]
                            ],
                            [
                              "+",
                              [
                                "xmid"
                              ],
                              [
                                -1,
                                "-",
                                [
                                  "*",
                                  "4",
                                  [
                                    -1,
                                    "dx"
                                  ]
                                ],
                                [
                                  "*",
                                  "2",
                                  [
                                    -1,
                                    "dy"
                                  ]
                                ]
                              ]
                            ]
                          ],
                          [
                            -1,
                            "assign",
                            "sgn",
                            [
                              "if",
                              [
                                "pos"
                              ],
                              "1",
                              [
                                "-",
                                "0",
                                "1"
                              ]
                            ],
                            [
                              -1,
                              "assign",
                              "dx",
                              [
                                "*",
                                [
                                  "sgn"
                                ],
                                [
                                  "dx"
                                ]
                              ],
                              [
                                -1,
                                "assign",
                                "dy",
                                [
                                  "*",
                                  [
                                    "sgn"
                                  ],
                                  [
                                    "dy"
                                  ]
                                ],
                                [
                                  -1,
                                  "assign",
                                  "active",
                                  [
                                    "image-get",
                                    [
                                      "image"
                                    ],
                                    [
                                      "+",
                                      [
                                        "ymid"
                                      ],
                                      [
                                        "dx"
                                      ]
                                    ],
                                    [
                                      "-",
                                      [
                                        "xmid"
                                      ],
                                      [
                                        "dy"
                                      ]
                                    ]
                                  ],
                                  [
                                    -1,
                                    [
                                      "vector",
                                      [
                                        "vector",
                                        [
                                          "-",
                                          [
                                            "xlogic"
                                          ],
                                          [
                                            "dx"
                                          ]
                                        ],
                                        [
                                          "-",
                                          [
                                            "ylogic"
                                          ],
                                          [
                                            "dy"
                                          ]
                                        ],
                                        [
                                          "+",
                                          [
                                            "xlogic"
                                          ],
                                          [
                                            "dx"
                                          ]
                                        ],
                                        [
                                          "+",
                                          [
                                            "ylogic"
                                          ],
                                          [
                                            "dy"
                                          ]
                                        ],
                                        [
                                          "active"
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ],
                  [
                    "vector"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF105;&#xF119;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF104;&#xF11A;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF105;&#xF11A;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF105;&#xF11C;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF105;&#xF11D;&#xF132;&#xF142;&#xF132;&#xF123;&#xF104;&#xF119;&#xF132;&#xF123;&#xF104;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF105;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF105;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF141;&#xF123;&#xF105;&#xF11E;&#xF132;&#xF123;&#xF104;&#xF119;&#xF132;&#xF123;&#xF104;&#xF11A;&#xF121;&#xF132;&#xF13D;&#xF132;&#xF123;&#xF105;&#xF11D;&#xF121;&#xF137;&#xF121;&#xF132;&#xF123;&#xF105;&#xF11C;&#xF121;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF105;&#xF11F;&#xF132;&#xF142;&#xF132;&#xF123;&#xF105;&#xF11E;&#xF121;&#xF133;&#xF134;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF105;&#xF120;&#xF132;&#xF142;&#xF132;&#xF123;&#xF105;&#xF11E;&#xF121;&#xF134;&#xF133;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF106;&#xF111;&#xF132;&#xF123;&#xF104;&#xF119;&#xF132;&#xF123;&#xF104;&#xF11A;&#xF121;&#xF132;&#xF13D;&#xF132;&#xF123;&#xF105;&#xF11D;&#xF121;&#xF101;&#xF143;&#xF13D;&#xF132;&#xF13C;&#xF137;&#xF101;&#xF143;&#xF123;&#xF105;&#xF120;&#xF121;&#xF132;&#xF13C;&#xF135;&#xF101;&#xF143;&#xF123;&#xF105;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF13D;&#xF132;&#xF123;&#xF105;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13E;&#xF132;&#xF13C;&#xF137;&#xF101;&#xF143;&#xF123;&#xF105;&#xF11F;&#xF121;&#xF132;&#xF13C;&#xF135;&#xF101;&#xF143;&#xF123;&#xF105;&#xF120;&#xF121;&#xF121;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF106;&#xF112;&#xF132;&#xF142;&#xF132;&#xF123;&#xF106;&#xF111;&#xF121;&#xF134;&#xF132;&#xF13E;&#xF133;&#xF134;&#xF121;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF105;&#xF11F;&#xF132;&#xF13C;&#xF132;&#xF123;&#xF106;&#xF112;&#xF121;&#xF132;&#xF123;&#xF105;&#xF11F;&#xF121;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF105;&#xF120;&#xF132;&#xF13C;&#xF132;&#xF123;&#xF106;&#xF112;&#xF121;&#xF132;&#xF123;&#xF105;&#xF120;&#xF121;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF106;&#xF113;&#xF132;&#xF123;&#xF104;&#xF119;&#xF132;&#xF123;&#xF104;&#xF11A;&#xF121;&#xF132;&#xF13D;&#xF132;&#xF123;&#xF105;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF105;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF13E;&#xF132;&#xF123;&#xF105;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF105;&#xF120;&#xF121;&#xF121;&#xF121;&#xF101;&#xF143;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF132;&#xF13E;&#xF132;&#xF123;&#xF105;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF105;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF13E;&#xF132;&#xF123;&#xF105;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF105;&#xF120;&#xF121;&#xF121;&#xF132;&#xF13D;&#xF132;&#xF123;&#xF105;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF105;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF13D;&#xF132;&#xF123;&#xF105;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF105;&#xF120;&#xF121;&#xF121;&#xF132;&#xF123;&#xF106;&#xF113;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1294
  },
  {
    "role": "comment",
    "lines": [
      "# full circuit..."
    ],
    "stanza": 1295
  },
  {
    "role": "code",
    "lines": [
      "define distill-circuit |",
      "  ? image |",
      "  assign h (div (image-height | image) 8) |",
      "  assign w (div (image-width | image) 8) ",
      "  (merge-lists",
      "   (map (? v |",
      "       assign xlogic (list-ref (v) 0) |",
      "       assign ylogic (list-ref (v) 1) |",
      "       assign xmid (* 8 | xlogic) |",
      "       assign ymid (* 8 | ylogic) |",
      "       distill-element (image) (xlogic) (ylogic) (xmid) (ymid))",
      "    (pairing (count 1 (- (w) 1))",
      "         (count 1 (- (h) 1)))));"
    ],
    "preprocessed": "define distill-circuit |\n  ? image |\n  assign h (div (image-height | image) 8) |\n  assign w (div (image-width | image) 8) \n  (merge-lists\n   (map (? v |\n       assign xlogic (list-ref (v) 0) |\n       assign ylogic (list-ref (v) 1) |\n       assign xmid (* 8 | xlogic) |\n       assign ymid (* 8 | ylogic) |\n       distill-element (image) (xlogic) (ylogic) (xmid) (ymid))\n    (pairing (count 1 (- (w) 1))\n         (count 1 (- (h) 1)))));",
    "code": "2110132101100011312321100321010010013123211103210001111322100010322101001101312321010010013321000331232111032101000111322100010322101001110312321010010013321000332210101001132211000113221100321011003123211103210101100132210010113221011003320331232111032101011010322100101132210110033213312321110321010110113221001321000312321010110013312321110321010111003221001321000312321010110103312321010110003221010010013322101011001332210101101033221010110113322101011100333221010101013221101011132132210113221010001113321333221101011132132210113221000111133213333332233",
    "parse": [
      "define",
      "distill-circuit",
      [
        -1,
        "?",
        "image",
        [
          -1,
          "assign",
          "h",
          [
            "div",
            [
              "image-height",
              [
                -1,
                "image"
              ]
            ],
            "8"
          ],
          [
            -1,
            "assign",
            "w",
            [
              "div",
              [
                "image-width",
                [
                  -1,
                  "image"
                ]
              ],
              "8"
            ],
            [
              "merge-lists",
              [
                "map",
                [
                  "?",
                  "v",
                  [
                    -1,
                    "assign",
                    "xlogic",
                    [
                      "list-ref",
                      [
                        "v"
                      ],
                      "0"
                    ],
                    [
                      -1,
                      "assign",
                      "ylogic",
                      [
                        "list-ref",
                        [
                          "v"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "assign",
                        "xmid",
                        [
                          "*",
                          "8",
                          [
                            -1,
                            "xlogic"
                          ]
                        ],
                        [
                          -1,
                          "assign",
                          "ymid",
                          [
                            "*",
                            "8",
                            [
                              -1,
                              "ylogic"
                            ]
                          ],
                          [
                            -1,
                            "distill-element",
                            [
                              "image"
                            ],
                            [
                              "xlogic"
                            ],
                            [
                              "ylogic"
                            ],
                            [
                              "xmid"
                            ],
                            [
                              "ymid"
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  "pairing",
                  [
                    "count",
                    "1",
                    [
                      "-",
                      [
                        "w"
                      ],
                      "1"
                    ]
                  ],
                  [
                    "count",
                    "1",
                    [
                      "-",
                      [
                        "h"
                      ],
                      "1"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF106;&#xF114;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF104;&#xF11A;&#xF101;&#xF143;&#xF141;&#xF12A;&#xF120;&#xF132;&#xF124;&#xF113;&#xF132;&#xF123;&#xF104;&#xF11E;&#xF101;&#xF143;&#xF123;&#xF104;&#xF11A;&#xF121;&#xF13B;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF104;&#xF118;&#xF132;&#xF124;&#xF113;&#xF132;&#xF123;&#xF104;&#xF11F;&#xF101;&#xF143;&#xF123;&#xF104;&#xF11A;&#xF121;&#xF13B;&#xF121;&#xF132;&#xF123;&#xF105;&#xF114;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF11D;&#xF101;&#xF143;&#xF141;&#xF123;&#xF105;&#xF11A;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF124;&#xF11D;&#xF121;&#xF133;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF105;&#xF11B;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF124;&#xF11D;&#xF121;&#xF134;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF105;&#xF11C;&#xF132;&#xF13C;&#xF13B;&#xF101;&#xF143;&#xF123;&#xF105;&#xF11A;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF105;&#xF11D;&#xF132;&#xF13C;&#xF13B;&#xF101;&#xF143;&#xF123;&#xF105;&#xF11B;&#xF121;&#xF101;&#xF143;&#xF123;&#xF105;&#xF119;&#xF132;&#xF123;&#xF104;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF105;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF105;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF105;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF105;&#xF11D;&#xF121;&#xF121;&#xF132;&#xF123;&#xF105;&#xF116;&#xF132;&#xF12F;&#xF118;&#xF134;&#xF132;&#xF13E;&#xF132;&#xF123;&#xF104;&#xF118;&#xF121;&#xF134;&#xF121;&#xF121;&#xF132;&#xF12F;&#xF118;&#xF134;&#xF132;&#xF13E;&#xF132;&#xF12A;&#xF120;&#xF121;&#xF134;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1296
  },
  {
    "role": "file",
    "lines": [
      "== COS_NOT =="
    ],
    "stanza": 1297
  },
  {
    "role": "comment",
    "lines": [
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_not circuit",
    "section_category": "GATE",
    "section_index": 43,
    "stanza": 1298
  },
  {
    "role": "code",
    "lines": [
      "define cos_not_gate | vector ",
      "  (vector 0 6 2 6 (true))",
      "  (vector 2 6 4 6 (true))",
      "  (vector 4 6 6 6 (true))",
      "  (vector 6 6 8 6 (true))",
      "  (vector 8 4 8 6 (true))",
      "  (vector 8 6 8 8 (false))",
      "  (vector 8 8 10 8 (false))",
      "  (vector 10 8 12 8 (false))",
      "  (vector 12 8 12 6 (false))",
      "  (vector 12 6 14 6 (false))",
      "  (vector 14 6 16 6 (false))",
      "  (vector 16 6 18 6 (false))",
      "  (vector 18 6 20 6 (false));"
    ],
    "preprocessed": "define cos_not_gate | vector \n  (vector 0 6 2 6 (true))\n  (vector 2 6 4 6 (true))\n  (vector 4 6 6 6 (true))\n  (vector 6 6 8 6 (true))\n  (vector 8 4 8 6 (true))\n  (vector 8 6 8 8 (false))\n  (vector 8 8 10 8 (false))\n  (vector 10 8 12 8 (false))\n  (vector 12 8 12 6 (false))\n  (vector 12 6 14 6 (false))\n  (vector 14 6 16 6 (false))\n  (vector 16 6 18 6 (false))\n  (vector 18 6 20 6 (false));",
    "code": "2110132101100100312321000032210000320321103210321103221333221000032103211032100321103221333221000032100321103211032110322133322100003211032110321000321103221333221000032100032100321000321103221333221000032100032110321000321000322033322100003210003210003210103210003220333221000032101032100032110032100032203332210000321100321000321100321103220333221000032110032110321110321103220333221000032111032110321000032110322033322100003210000321103210010321103220333221000032100103211032101003211032203332233",
    "parse": [
      "define",
      "cos_not_gate",
      [
        -1,
        "vector",
        [
          "vector",
          "0",
          "6",
          "2",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "6",
          "4",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "6",
          "6",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "6",
          "8",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "4",
          "8",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "6",
          "8",
          "8",
          [
            "false"
          ]
        ],
        [
          "vector",
          "8",
          "8",
          "10",
          "8",
          [
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "8",
          "12",
          "8",
          [
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "8",
          "12",
          "6",
          [
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "6",
          "14",
          "6",
          [
            "false"
          ]
        ],
        [
          "vector",
          "14",
          "6",
          "16",
          "6",
          [
            "false"
          ]
        ],
        [
          "vector",
          "16",
          "6",
          "18",
          "6",
          [
            "false"
          ]
        ],
        [
          "vector",
          "18",
          "6",
          "20",
          "6",
          [
            "false"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF106;&#xF115;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF133;&#xF139;&#xF135;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF135;&#xF139;&#xF137;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF139;&#xF139;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF139;&#xF139;&#xF13B;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF137;&#xF13B;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF139;&#xF13B;&#xF13B;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF13B;&#xF13D;&#xF13B;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF13B;&#xF13F;&#xF13B;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF13B;&#xF13F;&#xF139;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF139;&#xF141;&#xF139;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF141;&#xF139;&#xF123;&#xF111;&#xF139;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF111;&#xF139;&#xF123;&#xF113;&#xF139;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF113;&#xF139;&#xF123;&#xF115;&#xF139;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1299
  },
  {
    "role": "code",
    "lines": [
      "define cos_not_image | make-image 109 169 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:.............................................................:::::.....................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:...........:...............:...............:...............:...:...........................................:...............:...............:...............:...........:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..........:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..........:)",
      "  (:...........:...............:...............:...............:...................................:...........:...............:...............:...............:...........:)",
      "  (:...............................................................:..............................:::......................................................................:)",
      "  (:...............................................................:.............................:::::.....................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:.............................................................:::::.............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:...............................................................:...........:...............:...........................................................................:)",
      "  (:...........................................................................::..............::..........................................................................:)",
      "  (:..................................................................::::::::::::....::::::::::::.........................................................................:)",
      "  (:...........................................................................::..............::..........................................................................:)",
      "  (:...........................................................................:...............:...........................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "preprocessed": "define cos_not_image | make-image 109 169 | vector \n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:.............................................................:::::.....................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:...........:...............:...............:...............:...:...........................................:...............:...............:...............:...........:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..........:)\n  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..........:)\n  (:...........:...............:...............:...............:...................................:...........:...............:...............:...............:...........:)\n  (:...............................................................:..............................:::......................................................................:)\n  (:...............................................................:.............................:::::.....................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:.............................................................:::::.............................:.......................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:...............................................................:...........:...............:...........................................................................:)\n  (:...........................................................................::..............::..........................................................................:)\n  (:..................................................................::::::::::::....::::::::::::.........................................................................:)\n  (:...........................................................................::..............::..........................................................................:)\n  (:...........................................................................:...............:...........................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);",
    "code
    "parse": [
      "define",
      "cos_not_image",
      [
        -1,
        "make-image",
        "109",
        "169",
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":.............................................................:::::.....................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...:...........................................:...............:...............:...............:...........:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..........:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....::::::::::::....................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..........:"
          ],
          [
            ":...........:...............:...............:...............:...................................:...........:...............:...............:...............:...........:"
          ],
          [
            ":...............................................................:..............................:::......................................................................:"
          ],
          [
            ":...............................................................:.............................:::::.....................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":.............................................................:::::.............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":...............................................................:...........:...............:...........................................................................:"
          ],
          [
            ":...........................................................................::..............::..........................................................................:"
          ],
          [
            ":..................................................................::::::::::::....::::::::::::.........................................................................:"
          ],
          [
            ":...........................................................................::..............::..........................................................................:"
          ],
          [
            ":...........................................................................:...............:...........................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF106;&#xF116;&#xF101;&#xF143;&#xF123;&#xF104;&#xF117;&#xF128;&#xF11E;&#xF12C;&#xF11A;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF106;&#xF117;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF106;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF106;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF106;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF106;&#xF11E;&#xF121;&#xF132;&#xF123;&#xF106;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF106;&#xF120;&#xF121;&#xF132;&#xF123;&#xF107;&#xF111;&#xF121;&#xF132;&#xF123;&#xF107;&#xF111;&#xF121;&#xF132;&#xF123;&#xF107;&#xF111;&#xF121;&#xF132;&#xF123;&#xF107;&#xF111;&#xF121;&#xF132;&#xF123;&#xF107;&#xF111;&#xF121;&#xF132;&#xF123;&#xF107;&#xF111;&#xF121;&#xF132;&#xF123;&#xF107;&#xF111;&#xF121;&#xF132;&#xF123;&#xF107;&#xF112;&#xF121;&#xF132;&#xF123;&#xF107;&#xF113;&#xF121;&#xF132;&#xF123;&#xF107;&#xF114;&#xF121;&#xF132;&#xF123;&#xF107;&#xF115;&#xF121;&#xF132;&#xF123;&#xF107;&#xF116;&#xF121;&#xF132;&#xF123;&#xF107;&#xF115;&#xF121;&#xF132;&#xF123;&#xF107;&#xF117;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF117;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1300
  },
  {
    "role": "code",
    "lines": [
      "equal (cos_not_gate) (distill-circuit (cos_not_image));"
    ],
    "preprocessed": "equal (cos_not_gate) (distill-circuit (cos_not_image));",
    "code": "2100032210110010033221011000113221011001013332233",
    "parse": [
      "equal",
      [
        "cos_not_gate"
      ],
      [
        "distill-circuit",
        [
          "cos_not_image"
        ]
      ]
    ],
    "spider": "&#xF13B;&#xF132;&#xF123;&#xF106;&#xF115;&#xF121;&#xF132;&#xF123;&#xF106;&#xF114;&#xF132;&#xF123;&#xF106;&#xF116;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1301
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_NOT.gate",
      "5 6 1 0 1",
      "3 6 1 0 1",
      "1 6 1 0 1",
      "19 6 1 0 0",
      "17 6 1 0 0",
      "15 6 1 0 0",
      "13 6 1 0 0",
      "12 7 0 -1 0",
      "8 5 0 1 1",
      "11 8 1 0 0",
      "7 6 1 0 1",
      "8 7 0 1 0",
      "9 8 1 0 0"
    ],
    "thumbnail": "COS_NOT.gif",
    "page": "COS_NOT.html",
    "stanza": 1302
  },
  {
    "role": "file",
    "lines": [
      "== COS_AND =="
    ],
    "stanza": 1303
  },
  {
    "role": "comment",
    "lines": [
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_and circuit",
    "section_category": "GATE",
    "section_index": 44,
    "stanza": 1304
  },
  {
    "role": "code",
    "lines": [
      "define cos_and_gate | vector ",
      "  (vector 0 2 2 2 (true))",
      "  (vector 0 8 2 8 (true))",
      "  (vector 2 2 4 2 (true))",
      "  (vector 2 4 4 4 (true))",
      "  (vector 2 6 4 6 (true))",
      "  (vector 2 8 4 8 (true))",
      "  (vector 4 2 4 4 (true))",
      "  (vector 4 8 4 6 (true))",
      "  (vector 4 4 6 4 (false))",
      "  (vector 4 6 6 6 (false))",
      "  (vector 6 4 8 4 (false))",
      "  (vector 6 6 8 6 (false))",
      "  (vector 8 4 10 4 (false))",
      "  (vector 8 6 10 6 (false))",
      "  (vector 10 2 10 4 (true))",
      "  (vector 10 4 10 6 (true))",
      "  (vector 10 6 10 8 (true))",
      "  (vector 10 8 12 8 (true))",
      "  (vector 12 8 14 8 (true))",
      "  (vector 14 8 16 8 (true))",
      "  (vector 16 8 18 8 (true));"
    ],
    "preprocessed": "define cos_and_gate | vector \n  (vector 0 2 2 2 (true))\n  (vector 0 8 2 8 (true))\n  (vector 2 2 4 2 (true))\n  (vector 2 4 4 4 (true))\n  (vector 2 6 4 6 (true))\n  (vector 2 8 4 8 (true))\n  (vector 4 2 4 4 (true))\n  (vector 4 8 4 6 (true))\n  (vector 4 4 6 4 (false))\n  (vector 4 6 6 6 (false))\n  (vector 6 4 8 4 (false))\n  (vector 6 6 8 6 (false))\n  (vector 8 4 10 4 (false))\n  (vector 8 6 10 6 (false))\n  (vector 10 2 10 4 (true))\n  (vector 10 4 10 6 (true))\n  (vector 10 6 10 8 (true))\n  (vector 10 8 12 8 (true))\n  (vector 12 8 14 8 (true))\n  (vector 14 8 16 8 (true))\n  (vector 16 8 18 8 (true));",
    "code
    "parse": [
      "define",
      "cos_and_gate",
      [
        -1,
        "vector",
        [
          "vector",
          "0",
          "2",
          "2",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "0",
          "8",
          "2",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "2",
          "4",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "4",
          "4",
          "4",
          [
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "6",
          "4",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "8",
          "4",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "2",
          "4",
          "4",
          [
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "8",
          "4",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "4",
          "6",
          "4",
          [
            "false"
          ]
        ],
        [
          "vector",
          "4",
          "6",
          "6",
          "6",
          [
            "false"
          ]
        ],
        [
          "vector",
          "6",
          "4",
          "8",
          "4",
          [
            "false"
          ]
        ],
        [
          "vector",
          "6",
          "6",
          "8",
          "6",
          [
            "false"
          ]
        ],
        [
          "vector",
          "8",
          "4",
          "10",
          "4",
          [
            "false"
          ]
        ],
        [
          "vector",
          "8",
          "6",
          "10",
          "6",
          [
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "2",
          "10",
          "4",
          [
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "4",
          "10",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "6",
          "10",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "8",
          "12",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "8",
          "14",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "14",
          "8",
          "16",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "16",
          "8",
          "18",
          "8",
          [
            "true"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF107;&#xF118;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF133;&#xF135;&#xF135;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF133;&#xF13B;&#xF135;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF135;&#xF135;&#xF137;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF135;&#xF137;&#xF137;&#xF137;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF135;&#xF139;&#xF137;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF135;&#xF13B;&#xF137;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF135;&#xF137;&#xF137;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF13B;&#xF137;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF137;&#xF139;&#xF137;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF139;&#xF139;&#xF139;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF139;&#xF137;&#xF13B;&#xF137;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF139;&#xF139;&#xF13B;&#xF139;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF137;&#xF13D;&#xF137;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF139;&#xF13D;&#xF139;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF135;&#xF13D;&#xF137;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF137;&#xF13D;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF139;&#xF13D;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF13B;&#xF13F;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF13B;&#xF141;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF141;&#xF13B;&#xF123;&#xF111;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF111;&#xF13B;&#xF123;&#xF113;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1305
  },
  {
    "role": "code",
    "lines": [
      "define cos_and_image | make-image 88 153 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:...........:...............:...........................................................................................................................:)",
      "  (:..:::::::::::.....:::::::::::..........................................................................................................................:)",
      "  (:..::::::::::::....::::::::::::.........................................................................................................................:)",
      "  (:..:::::::::::.....:::::::::::..........................................................................................................................:)",
      "  (:...........:...............:...........................................................................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:.............................:::::...........................................:::::.....................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:...........................:...:...........:...............:...............:...:.......................................................................:)",
      "  (:..................:::::::::::..............::..............::..............::..........................................................................:)",
      "  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)",
      "  (:..................:::::::::::..............::..............::..............::..........................................................................:)",
      "  (:...........................:...............:...............:...............:...........................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:.............................................................................:::::.....................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:...........................:...............:...............:...............:...:.......................................................................:)",
      "  (:..................:::::::::::..............::..............::..............::..........................................................................:)",
      "  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)",
      "  (:..................:::::::::::..............::..............::..............::..........................................................................:)",
      "  (:...........................:...:...........:...............:...............:...........................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:.............................:::::............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::............................................:::::.....................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:...........:...............:...................................................:...........:...............:...............:...............:...........:)",
      "  (:..:::::::::::.....:::::::::::.....................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)",
      "  (:..::::::::::::....::::::::::::....................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)",
      "  (:..:::::::::::.....:::::::::::.....................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)",
      "  (:...........:...............:...............................................................:...............:...............:...............:...........:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "preprocessed": "define cos_and_image | make-image 88 153 | vector \n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:...........:...............:...........................................................................................................................:)\n  (:..:::::::::::.....:::::::::::..........................................................................................................................:)\n  (:..::::::::::::....::::::::::::.........................................................................................................................:)\n  (:..:::::::::::.....:::::::::::..........................................................................................................................:)\n  (:...........:...............:...........................................................................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:.............................:::::...........................................:::::.....................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:...........................:...:...........:...............:...............:...:.......................................................................:)\n  (:..................:::::::::::..............::..............::..............::..........................................................................:)\n  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)\n  (:..................:::::::::::..............::..............::..............::..........................................................................:)\n  (:...........................:...............:...............:...............:...........................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:.............................................................................:::::.....................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:...........................:...............:...............:...............:...:.......................................................................:)\n  (:..................:::::::::::..............::..............::..............::..........................................................................:)\n  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)\n  (:..................:::::::::::..............::..............::..............::..........................................................................:)\n  (:...........................:...:...........:...............:...............:...........................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:.............................:::::............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::............................................:::::.....................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:...........:...............:...................................................:...........:...............:...............:...............:...........:)\n  (:..:::::::::::.....:::::::::::.....................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)\n  (:..::::::::::::....::::::::::::....................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)\n  (:..:::::::::::.....:::::::::::.....................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)\n  (:...........:...............:...............................................................:...............:...............:...............:...........:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);",
    "code
    "parse": [
      "define",
      "cos_and_image",
      [
        -1,
        "make-image",
        "88",
        "153",
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":...........:...............:...........................................................................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::..........................................................................................................................:"
          ],
          [
            ":..::::::::::::....::::::::::::.........................................................................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::..........................................................................................................................:"
          ],
          [
            ":...........:...............:...........................................................................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":.............................:::::...........................................:::::.....................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":...........................:...:...........:...............:...............:...:.......................................................................:"
          ],
          [
            ":..................:::::::::::..............::..............::..............::..........................................................................:"
          ],
          [
            ":..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:"
          ],
          [
            ":..................:::::::::::..............::..............::..............::..........................................................................:"
          ],
          [
            ":...........................:...............:...............:...............:...........................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":.............................................................................:::::.....................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":...........................:...............:...............:...............:...:.......................................................................:"
          ],
          [
            ":..................:::::::::::..............::..............::..............::..........................................................................:"
          ],
          [
            ":..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:"
          ],
          [
            ":..................:::::::::::..............::..............::..............::..........................................................................:"
          ],
          [
            ":...........................:...:...........:...............:...............:...........................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":.............................:::::............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::............................................:::::.....................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":...........:...............:...................................................:...........:...............:...............:...............:...........:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:"
          ],
          [
            ":..::::::::::::....::::::::::::....................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:"
          ],
          [
            ":...........:...............:...............................................................:...............:...............:...............:...........:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF107;&#xF119;&#xF101;&#xF143;&#xF123;&#xF104;&#xF117;&#xF127;&#xF119;&#xF12B;&#xF11A;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF107;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11E;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF107;&#xF120;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF108;&#xF111;&#xF121;&#xF132;&#xF123;&#xF108;&#xF112;&#xF121;&#xF132;&#xF123;&#xF108;&#xF113;&#xF121;&#xF132;&#xF123;&#xF108;&#xF112;&#xF121;&#xF132;&#xF123;&#xF108;&#xF114;&#xF121;&#xF132;&#xF123;&#xF108;&#xF115;&#xF121;&#xF132;&#xF123;&#xF108;&#xF115;&#xF121;&#xF132;&#xF123;&#xF108;&#xF115;&#xF121;&#xF132;&#xF123;&#xF108;&#xF115;&#xF121;&#xF132;&#xF123;&#xF108;&#xF115;&#xF121;&#xF132;&#xF123;&#xF108;&#xF115;&#xF121;&#xF132;&#xF123;&#xF108;&#xF115;&#xF121;&#xF132;&#xF123;&#xF108;&#xF115;&#xF121;&#xF132;&#xF123;&#xF108;&#xF115;&#xF121;&#xF132;&#xF123;&#xF108;&#xF116;&#xF121;&#xF132;&#xF123;&#xF108;&#xF115;&#xF121;&#xF132;&#xF123;&#xF108;&#xF117;&#xF121;&#xF132;&#xF123;&#xF108;&#xF112;&#xF121;&#xF132;&#xF123;&#xF108;&#xF113;&#xF121;&#xF132;&#xF123;&#xF108;&#xF112;&#xF121;&#xF132;&#xF123;&#xF108;&#xF118;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF108;&#xF119;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF108;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF108;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF108;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF108;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF108;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF108;&#xF11E;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF107;&#xF11A;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1306
  },
  {
    "role": "code",
    "lines": [
      "equal (cos_and_gate) (distill-circuit (cos_and_image));"
    ],
    "preprocessed": "equal (cos_and_gate) (distill-circuit (cos_and_image));",
    "code": "2100032210111011133221011000113221011110003332233",
    "parse": [
      "equal",
      [
        "cos_and_gate"
      ],
      [
        "distill-circuit",
        [
          "cos_and_image"
        ]
      ]
    ],
    "spider": "&#xF13B;&#xF132;&#xF123;&#xF107;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF114;&#xF132;&#xF123;&#xF107;&#xF119;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1307
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_AND.gate",
      "1 2 1 0 1",
      "3 4 1 0 1",
      "5 6 1 0 0",
      "3 6 1 0 1",
      "4 7 0 -1 1",
      "3 8 1 0 1",
      "1 8 1 0 1",
      "17 8 1 0 1",
      "10 3 0 1 1",
      "15 8 1 0 1",
      "9 4 1 0 0",
      "10 5 0 1 1",
      "13 8 1 0 1",
      "7 4 1 0 0",
      "9 6 1 0 0",
      "10 7 0 1 1",
      "11 8 1 0 1",
      "3 2 1 0 1",
      "4 3 0 1 1",
      "5 4 1 0 0",
      "7 6 1 0 0"
    ],
    "thumbnail": "COS_AND.gif",
    "page": "COS_AND.html",
    "stanza": 1308
  },
  {
    "role": "file",
    "lines": [
      "== COS_OR =="
    ],
    "stanza": 1309
  },
  {
    "role": "comment",
    "lines": [
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_or circuit",
    "section_category": "GATE",
    "section_index": 45,
    "stanza": 1310
  },
  {
    "role": "code",
    "lines": [
      "define cos_or_gate | vector ",
      "  (vector 2 4 4 4 (true))",
      "  (vector 2 6 4 6 (true))",
      "  (vector 4 4 6 4 (true))",
      "  (vector 4 6 6 6 (true))",
      "  (vector 6 4 8 4 (true))",
      "  (vector 6 6 8 6 (true))",
      "  (vector 8 4 10 4 (true))",
      "  (vector 8 6 10 6 (true))",
      "  (vector 8 8 10 8 (true))",
      "  (vector 10 2 10 4 (true))",
      "  (vector 10 4 10 6 (false))",
      "  (vector 10 6 10 8 (false))",
      "  (vector 10 8 12 8 (true))",
      "  (vector 12 8 14 8 (true))",
      "  (vector 14 8 16 8 (true))",
      "  (vector 16 8 18 8 (true));"
    ],
    "preprocessed": "define cos_or_gate | vector \n  (vector 2 4 4 4 (true))\n  (vector 2 6 4 6 (true))\n  (vector 4 4 6 4 (true))\n  (vector 4 6 6 6 (true))\n  (vector 6 4 8 4 (true))\n  (vector 6 6 8 6 (true))\n  (vector 8 4 10 4 (true))\n  (vector 8 6 10 6 (true))\n  (vector 8 8 10 8 (true))\n  (vector 10 2 10 4 (true))\n  (vector 10 4 10 6 (false))\n  (vector 10 6 10 8 (false))\n  (vector 10 8 12 8 (true))\n  (vector 12 8 14 8 (true))\n  (vector 14 8 16 8 (true))\n  (vector 16 8 18 8 (true));",
    "code
    "parse": [
      "define",
      "cos_or_gate",
      [
        -1,
        "vector",
        [
          "vector",
          "2",
          "4",
          "4",
          "4",
          [
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "6",
          "4",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "4",
          "6",
          "4",
          [
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "6",
          "6",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "4",
          "8",
          "4",
          [
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "6",
          "8",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "4",
          "10",
          "4",
          [
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "6",
          "10",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "8",
          "10",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "2",
          "10",
          "4",
          [
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "4",
          "10",
          "6",
          [
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "6",
          "10",
          "8",
          [
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "8",
          "12",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "8",
          "14",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "14",
          "8",
          "16",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "16",
          "8",
          "18",
          "8",
          [
            "true"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF108;&#xF11F;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF135;&#xF137;&#xF137;&#xF137;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF135;&#xF139;&#xF137;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF137;&#xF139;&#xF137;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF139;&#xF139;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF139;&#xF137;&#xF13B;&#xF137;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF139;&#xF139;&#xF13B;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF137;&#xF13D;&#xF137;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF139;&#xF13D;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF13B;&#xF13D;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF135;&#xF13D;&#xF137;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF137;&#xF13D;&#xF139;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF139;&#xF13D;&#xF13B;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF13B;&#xF13F;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF13B;&#xF141;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF141;&#xF13B;&#xF123;&#xF111;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF111;&#xF13B;&#xF123;&#xF113;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1311
  },
  {
    "role": "code",
    "lines": [
      "define cos_or_image | make-image 93 169 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:.............................................................................:::::.....................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:...........................:...............:...............:...............:...:.......................................................................................:)",
      "  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)",
      "  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................:)",
      "  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)",
      "  (:...........................:...............:...............:...............:...........................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:.............................................................................:::::.....................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:...........................:...............:...............:...............:...:.......................................................................................:)",
      "  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)",
      "  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................:)",
      "  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)",
      "  (:...........................:...............:...............:...............:...........................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:.............................................................................:::::.....................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:...........................................................................:...:...........:...............:...............:...............:...........................:)",
      "  (:..................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................:)",
      "  (:..................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................:)",
      "  (:..................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................:)",
      "  (:...........................................................................:...............:...............:...............:...............:...........................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "preprocessed": "define cos_or_image | make-image 93 169 | vector \n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:.............................................................................:::::.....................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:...........................:...............:...............:...............:...:.......................................................................................:)\n  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)\n  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................:)\n  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)\n  (:...........................:...............:...............:...............:...........................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:.............................................................................:::::.....................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:...........................:...............:...............:...............:...:.......................................................................................:)\n  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)\n  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................:)\n  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)\n  (:...........................:...............:...............:...............:...........................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:.............................................................................:::::.....................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:...........................................................................:...:...........:...............:...............:...............:...........................:)\n  (:..................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................:)\n  (:..................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................:)\n  (:..................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................:)\n  (:...........................................................................:...............:...............:...............:...............:...........................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);",
    "code
    "parse": [
      "define",
      "cos_or_image",
      [
        -1,
        "make-image",
        "93",
        "169",
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":.............................................................................:::::.....................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":...........................:...............:...............:...............:...:.......................................................................................:"
          ],
          [
            ":..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:"
          ],
          [
            ":..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................:"
          ],
          [
            ":..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:"
          ],
          [
            ":...........................:...............:...............:...............:...........................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":.............................................................................:::::.....................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":...........................:...............:...............:...............:...:.......................................................................................:"
          ],
          [
            ":..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:"
          ],
          [
            ":..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................:"
          ],
          [
            ":..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:"
          ],
          [
            ":...........................:...............:...............:...............:...........................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":.............................................................................:::::.....................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":...........................................................................:...:...........:...............:...............:...............:...........................:"
          ],
          [
            ":..................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................:"
          ],
          [
            ":..................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................:"
          ],
          [
            ":..................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................:"
          ],
          [
            ":...........................................................................:...............:...............:...............:...............:...........................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF108;&#xF120;&#xF101;&#xF143;&#xF123;&#xF104;&#xF117;&#xF127;&#xF11E;&#xF12C;&#xF11A;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF106;&#xF117;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF109;&#xF111;&#xF121;&#xF132;&#xF123;&#xF109;&#xF111;&#xF121;&#xF132;&#xF123;&#xF109;&#xF111;&#xF121;&#xF132;&#xF123;&#xF109;&#xF111;&#xF121;&#xF132;&#xF123;&#xF109;&#xF111;&#xF121;&#xF132;&#xF123;&#xF109;&#xF111;&#xF121;&#xF132;&#xF123;&#xF109;&#xF111;&#xF121;&#xF132;&#xF123;&#xF109;&#xF111;&#xF121;&#xF132;&#xF123;&#xF109;&#xF111;&#xF121;&#xF132;&#xF123;&#xF109;&#xF112;&#xF121;&#xF132;&#xF123;&#xF109;&#xF111;&#xF121;&#xF132;&#xF123;&#xF109;&#xF113;&#xF121;&#xF132;&#xF123;&#xF109;&#xF114;&#xF121;&#xF132;&#xF123;&#xF109;&#xF115;&#xF121;&#xF132;&#xF123;&#xF109;&#xF114;&#xF121;&#xF132;&#xF123;&#xF109;&#xF116;&#xF121;&#xF132;&#xF123;&#xF109;&#xF117;&#xF121;&#xF132;&#xF123;&#xF109;&#xF117;&#xF121;&#xF132;&#xF123;&#xF109;&#xF117;&#xF121;&#xF132;&#xF123;&#xF109;&#xF117;&#xF121;&#xF132;&#xF123;&#xF109;&#xF117;&#xF121;&#xF132;&#xF123;&#xF109;&#xF117;&#xF121;&#xF132;&#xF123;&#xF109;&#xF117;&#xF121;&#xF132;&#xF123;&#xF109;&#xF117;&#xF121;&#xF132;&#xF123;&#xF109;&#xF117;&#xF121;&#xF132;&#xF123;&#xF109;&#xF112;&#xF121;&#xF132;&#xF123;&#xF109;&#xF111;&#xF121;&#xF132;&#xF123;&#xF109;&#xF113;&#xF121;&#xF132;&#xF123;&#xF109;&#xF114;&#xF121;&#xF132;&#xF123;&#xF109;&#xF115;&#xF121;&#xF132;&#xF123;&#xF109;&#xF114;&#xF121;&#xF132;&#xF123;&#xF109;&#xF116;&#xF121;&#xF132;&#xF123;&#xF109;&#xF117;&#xF121;&#xF132;&#xF123;&#xF109;&#xF117;&#xF121;&#xF132;&#xF123;&#xF109;&#xF117;&#xF121;&#xF132;&#xF123;&#xF109;&#xF117;&#xF121;&#xF132;&#xF123;&#xF109;&#xF117;&#xF121;&#xF132;&#xF123;&#xF109;&#xF117;&#xF121;&#xF132;&#xF123;&#xF109;&#xF117;&#xF121;&#xF132;&#xF123;&#xF109;&#xF117;&#xF121;&#xF132;&#xF123;&#xF109;&#xF117;&#xF121;&#xF132;&#xF123;&#xF109;&#xF112;&#xF121;&#xF132;&#xF123;&#xF109;&#xF111;&#xF121;&#xF132;&#xF123;&#xF109;&#xF118;&#xF121;&#xF132;&#xF123;&#xF109;&#xF119;&#xF121;&#xF132;&#xF123;&#xF109;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF109;&#xF119;&#xF121;&#xF132;&#xF123;&#xF109;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF117;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1312
  },
  {
    "role": "code",
    "lines": [
      "equal (cos_or_gate) (distill-circuit (cos_or_image));"
    ],
    "preprocessed": "equal (cos_or_gate) (distill-circuit (cos_or_image));",
    "code": "2100032211000111033221011000113221100011113332233",
    "parse": [
      "equal",
      [
        "cos_or_gate"
      ],
      [
        "distill-circuit",
        [
          "cos_or_image"
        ]
      ]
    ],
    "spider": "&#xF13B;&#xF132;&#xF123;&#xF108;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF106;&#xF114;&#xF132;&#xF123;&#xF108;&#xF120;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1313
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_OR.gate",
      "3 4 1 0 1",
      "5 6 1 0 1",
      "3 6 1 0 1",
      "17 8 1 0 1",
      "10 3 0 1 1",
      "15 8 1 0 1",
      "9 4 1 0 1",
      "10 5 0 1 0",
      "13 8 1 0 1",
      "7 4 1 0 1",
      "9 6 1 0 1",
      "10 7 0 1 0",
      "11 8 1 0 1",
      "5 4 1 0 1",
      "7 6 1 0 1",
      "9 8 1 0 1"
    ],
    "thumbnail": "COS_OR.gif",
    "page": "COS_OR.html",
    "stanza": 1314
  },
  {
    "role": "file",
    "lines": [
      "== COS_NOR =="
    ],
    "stanza": 1315
  },
  {
    "role": "comment",
    "lines": [
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_nor circuit",
    "section_category": "GATE",
    "section_index": 46,
    "stanza": 1316
  },
  {
    "role": "code",
    "lines": [
      "define cos_nor_gate | vector ",
      "  (vector 0 6 2 6 (true))",
      "  (vector 0 8 2 8 (true))",
      "  (vector 2 6 4 6 (true))",
      "  (vector 2 8 4 8 (true))",
      "  (vector 4 6 6 6 (true))",
      "  (vector 4 8 6 8 (true))",
      "  (vector 6 6 8 6 (true))",
      "  (vector 6 8 8 8 (true))",
      "  (vector 8 4 8 6 (true))",
      "  (vector 8 6 8 8 (false))",
      "  (vector 8 8 8 10 (false))",
      "  (vector 8 10 10 10 (false))",
      "  (vector 10 10 12 10 (false))",
      "  (vector 12 10 14 10 (false))",
      "  (vector 14 10 16 10 (false))",
      "  (vector 16 10 18 10 (false))",
      "  (vector 18 10 20 10 (false));"
    ],
    "preprocessed": "define cos_nor_gate | vector \n  (vector 0 6 2 6 (true))\n  (vector 0 8 2 8 (true))\n  (vector 2 6 4 6 (true))\n  (vector 2 8 4 8 (true))\n  (vector 4 6 6 6 (true))\n  (vector 4 8 6 8 (true))\n  (vector 6 6 8 6 (true))\n  (vector 6 8 8 8 (true))\n  (vector 8 4 8 6 (true))\n  (vector 8 6 8 8 (false))\n  (vector 8 8 8 10 (false))\n  (vector 8 10 10 10 (false))\n  (vector 10 10 12 10 (false))\n  (vector 12 10 14 10 (false))\n  (vector 14 10 16 10 (false))\n  (vector 16 10 18 10 (false))\n  (vector 18 10 20 10 (false));",
    "code
    "parse": [
      "define",
      "cos_nor_gate",
      [
        -1,
        "vector",
        [
          "vector",
          "0",
          "6",
          "2",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "0",
          "8",
          "2",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "6",
          "4",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "8",
          "4",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "6",
          "6",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "8",
          "6",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "6",
          "8",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "8",
          "8",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "4",
          "8",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "6",
          "8",
          "8",
          [
            "false"
          ]
        ],
        [
          "vector",
          "8",
          "8",
          "8",
          "10",
          [
            "false"
          ]
        ],
        [
          "vector",
          "8",
          "10",
          "10",
          "10",
          [
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "10",
          "12",
          "10",
          [
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "10",
          "14",
          "10",
          [
            "false"
          ]
        ],
        [
          "vector",
          "14",
          "10",
          "16",
          "10",
          [
            "false"
          ]
        ],
        [
          "vector",
          "16",
          "10",
          "18",
          "10",
          [
            "false"
          ]
        ],
        [
          "vector",
          "18",
          "10",
          "20",
          "10",
          [
            "false"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF109;&#xF11C;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF133;&#xF139;&#xF135;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF133;&#xF13B;&#xF135;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF135;&#xF139;&#xF137;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF135;&#xF13B;&#xF137;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF139;&#xF139;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF13B;&#xF139;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF139;&#xF139;&#xF13B;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF139;&#xF13B;&#xF13B;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF137;&#xF13B;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF139;&#xF13B;&#xF13B;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF13B;&#xF13B;&#xF13D;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF13D;&#xF13D;&#xF13D;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF13D;&#xF13F;&#xF13D;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF13D;&#xF141;&#xF13D;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF141;&#xF13D;&#xF123;&#xF111;&#xF13D;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF111;&#xF13D;&#xF123;&#xF113;&#xF13D;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF113;&#xF13D;&#xF123;&#xF115;&#xF13D;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1317
  },
  {
    "role": "code",
    "lines": [
      "define cos_nor_image | make-image 125 169 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:.............................................................:::::.....................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:...........:...............:...............:...............:...:.......................................................................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)",
      "  (:...........:...............:...............:...............:...........................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:.............................................................:::::.....................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:...........:...............:...............:...............:...:.......................................................................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)",
      "  (:...........:...............:...............:...............:...........................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:.............................................................:::::.....................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:...............................................................:...........:...............:...............:...............:...............:...............:...........:)",
      "  (:...........................................................................::..............::..............::..............::..............::..............::..........:)",
      "  (:..................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)",
      "  (:...........................................................................::..............::..............::..............::..............::..............::..........:)",
      "  (:...........................................................................:...............:...............:...............:...............:...............:...........:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "preprocessed": "define cos_nor_image | make-image 125 169 | vector \n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:.............................................................:::::.....................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:...........:...............:...............:...............:...:.......................................................................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)\n  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)\n  (:...........:...............:...............:...............:...........................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:.............................................................:::::.....................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:...........:...............:...............:...............:...:.......................................................................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)\n  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)\n  (:...........:...............:...............:...............:...........................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:.............................................................:::::.....................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:...............................................................:...........:...............:...............:...............:...............:...............:...........:)\n  (:...........................................................................::..............::..............::..............::..............::..............::..........:)\n  (:..................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)\n  (:...........................................................................::..............::..............::..............::..............::..............::..........:)\n  (:...........................................................................:...............:...............:...............:...............:...............:...........:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);",
    "code
    "parse": [
      "define",
      "cos_nor_image",
      [
        -1,
        "make-image",
        "125",
        "169",
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":.............................................................:::::.....................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...:.......................................................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...........................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":.............................................................:::::.....................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...:.......................................................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...........................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":.............................................................:::::.....................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":...............................................................:...........:...............:...............:...............:...............:...............:...........:"
          ],
          [
            ":...........................................................................::..............::..............::..............::..............::..............::..........:"
          ],
          [
            ":..................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:"
          ],
          [
            ":...........................................................................::..............::..............::..............::..............::..............::..........:"
          ],
          [
            ":...........................................................................:...............:...............:...............:...............:...............:...........:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF109;&#xF11D;&#xF101;&#xF143;&#xF123;&#xF104;&#xF117;&#xF129;&#xF11E;&#xF12C;&#xF11A;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF106;&#xF117;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF109;&#xF11E;&#xF121;&#xF132;&#xF123;&#xF109;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF109;&#xF120;&#xF121;&#xF132;&#xF123;&#xF109;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF111;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF112;&#xF121;&#xF132;&#xF123;&#xF106;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF109;&#xF11E;&#xF121;&#xF132;&#xF123;&#xF109;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF109;&#xF120;&#xF121;&#xF132;&#xF123;&#xF109;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF111;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF112;&#xF121;&#xF132;&#xF123;&#xF106;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF106;&#xF119;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF113;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF114;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF115;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF114;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF116;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF117;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1318
  },
  {
    "role": "code",
    "lines": [
      "equal (cos_nor_gate) (distill-circuit (cos_nor_image));"
    ],
    "preprocessed": "equal (cos_nor_gate) (distill-circuit (cos_nor_image));",
    "code": "2100032211001101133221011000113221100111003332233",
    "parse": [
      "equal",
      [
        "cos_nor_gate"
      ],
      [
        "distill-circuit",
        [
          "cos_nor_image"
        ]
      ]
    ],
    "spider": "&#xF13B;&#xF132;&#xF123;&#xF109;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF106;&#xF114;&#xF132;&#xF123;&#xF109;&#xF11D;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1319
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_NOR.gate",
      "5 6 1 0 1",
      "7 8 1 0 1",
      "8 9 0 1 0",
      "9 10 1 0 0",
      "3 6 1 0 1",
      "5 8 1 0 1",
      "1 6 1 0 1",
      "3 8 1 0 1",
      "1 8 1 0 1",
      "19 10 1 0 0",
      "17 10 1 0 0",
      "15 10 1 0 0",
      "8 5 0 1 1",
      "13 10 1 0 0",
      "7 6 1 0 1",
      "8 7 0 1 0",
      "11 10 1 0 0"
    ],
    "thumbnail": "COS_NOR.gif",
    "page": "COS_NOR.html",
    "stanza": 1320
  },
  {
    "role": "file",
    "lines": [
      "== COS_OSC =="
    ],
    "stanza": 1321
  },
  {
    "role": "comment",
    "lines": [
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_osc circuit",
    "section_category": "GATE",
    "section_index": 47,
    "stanza": 1322
  },
  {
    "role": "code",
    "lines": [
      "define cos_osc_gate | vector ",
      "  (vector 4 8 6 8 (true))",
      "  (vector 6 8 8 8 (true))",
      "  (vector 8 6 8 8 (true))",
      "  (vector 10 6 8 6 (true))",
      "  (vector 8 8 10 8 (false))",
      "  (vector 12 6 10 6 (false))",
      "  (vector 10 8 12 8 (false))",
      "  (vector 12 8 12 6 (false))",
      "  (vector 12 8 14 8 (false))",
      "  (vector 14 8 16 8 (false));"
    ],
    "preprocessed": "define cos_osc_gate | vector \n  (vector 4 8 6 8 (true))\n  (vector 6 8 8 8 (true))\n  (vector 8 6 8 8 (true))\n  (vector 10 6 8 6 (true))\n  (vector 8 8 10 8 (false))\n  (vector 12 6 10 6 (false))\n  (vector 10 8 12 8 (false))\n  (vector 12 8 12 6 (false))\n  (vector 12 8 14 8 (false))\n  (vector 14 8 16 8 (false));",
    "code": "2110132110100110312321000032210000321003210003211032100032213332210000321103210003210003210003221333221000032100032110321000321000322133322100003210103211032100032110322133322100003210003210003210103210003220333221000032110032110321010321103220333221000032101032100032110032100032203332210000321100321000321100321103220333221000032110032100032111032100032203332210000321110321000321000032100032203332233",
    "parse": [
      "define",
      "cos_osc_gate",
      [
        -1,
        "vector",
        [
          "vector",
          "4",
          "8",
          "6",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "8",
          "8",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "6",
          "8",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "6",
          "8",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "8",
          "10",
          "8",
          [
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "6",
          "10",
          "6",
          [
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "8",
          "12",
          "8",
          [
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "8",
          "12",
          "6",
          [
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "8",
          "14",
          "8",
          [
            "false"
          ]
        ],
        [
          "vector",
          "14",
          "8",
          "16",
          "8",
          [
            "false"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF10A;&#xF117;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF137;&#xF13B;&#xF139;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF139;&#xF13B;&#xF13B;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF139;&#xF13B;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF139;&#xF13B;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF13B;&#xF13D;&#xF13B;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF139;&#xF13D;&#xF139;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF13B;&#xF13F;&#xF13B;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF13B;&#xF13F;&#xF139;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF13B;&#xF141;&#xF13B;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF141;&#xF13B;&#xF123;&#xF111;&#xF13B;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1323
  },
  {
    "role": "code",
    "lines": [
      "define cos_osc_image | make-image 120 169 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:...................................................................:...............:...................................................................................:)",
      "  (:..................................................................:::::::::::.....::...................................................................................:)",
      "  (:.................................................................::::::::::::....::::::::::::..........................................................................:)",
      "  (:..................................................................:::::::::::.....::...................................................................................:)",
      "  (:...................................................................:...............:...........:.......................................................................:)",
      "  (:..............................................................:::.............................:::......................................................................:)",
      "  (:..............................................................:::............................:::::.....................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:.............................................................:::::.............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:...........................................:...............:...:...........:...............:...............:...............:...........................................:)",
      "  (:..................................:::::::::::.....:::::::::::..............::..............::..............::..............::..........................................:)",
      "  (:..................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................:)",
      "  (:..................................:::::::::::.....:::::::::::..............::..............::..............::..............::..........................................:)",
      "  (:...........................................:...............:...............:...............:...............:...............:...........................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "preprocessed": "define cos_osc_image | make-image 120 169 | vector \n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:...................................................................:...............:...................................................................................:)\n  (:..................................................................:::::::::::.....::...................................................................................:)\n  (:.................................................................::::::::::::....::::::::::::..........................................................................:)\n  (:..................................................................:::::::::::.....::...................................................................................:)\n  (:...................................................................:...............:...........:.......................................................................:)\n  (:..............................................................:::.............................:::......................................................................:)\n  (:..............................................................:::............................:::::.....................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:.............................................................:::::.............................:.......................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:...........................................:...............:...:...........:...............:...............:...............:...........................................:)\n  (:..................................:::::::::::.....:::::::::::..............::..............::..............::..............::..........................................:)\n  (:..................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................:)\n  (:..................................:::::::::::.....:::::::::::..............::..............::..............::..............::..........................................:)\n  (:...........................................:...............:...............:...............:...............:...............:...........................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);",
    "code
    "parse": [
      "define",
      "cos_osc_image",
      [
        -1,
        "make-image",
        "120",
        "169",
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":...................................................................:...............:...................................................................................:"
          ],
          [
            ":..................................................................:::::::::::.....::...................................................................................:"
          ],
          [
            ":.................................................................::::::::::::....::::::::::::..........................................................................:"
          ],
          [
            ":..................................................................:::::::::::.....::...................................................................................:"
          ],
          [
            ":...................................................................:...............:...........:.......................................................................:"
          ],
          [
            ":..............................................................:::.............................:::......................................................................:"
          ],
          [
            ":..............................................................:::............................:::::.....................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":.............................................................:::::.............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":...........................................:...............:...:...........:...............:...............:...............:...........................................:"
          ],
          [
            ":..................................:::::::::::.....:::::::::::..............::..............::..............::..............::..........................................:"
          ],
          [
            ":..................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................:"
          ],
          [
            ":..................................:::::::::::.....:::::::::::..............::..............::..............::..............::..........................................:"
          ],
          [
            ":...........................................:...............:...............:...............:...............:...............:...........................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF10A;&#xF118;&#xF101;&#xF143;&#xF123;&#xF104;&#xF117;&#xF129;&#xF119;&#xF12C;&#xF11A;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF106;&#xF117;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF119;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF11E;&#xF121;&#xF132;&#xF123;&#xF107;&#xF113;&#xF121;&#xF132;&#xF123;&#xF107;&#xF113;&#xF121;&#xF132;&#xF123;&#xF107;&#xF113;&#xF121;&#xF132;&#xF123;&#xF107;&#xF113;&#xF121;&#xF132;&#xF123;&#xF107;&#xF113;&#xF121;&#xF132;&#xF123;&#xF107;&#xF113;&#xF121;&#xF132;&#xF123;&#xF107;&#xF113;&#xF121;&#xF132;&#xF123;&#xF107;&#xF112;&#xF121;&#xF132;&#xF123;&#xF107;&#xF113;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF120;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF111;&#xF121;&#xF132;&#xF123;&#xF10A;&#xF120;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF112;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF117;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1324
  },
  {
    "role": "code",
    "lines": [
      "equal (cos_osc_gate) (distill-circuit (cos_osc_image));"
    ],
    "preprocessed": "equal (cos_osc_gate) (distill-circuit (cos_osc_image));",
    "code": "2100032211010011033221011000113221101001113332233",
    "parse": [
      "equal",
      [
        "cos_osc_gate"
      ],
      [
        "distill-circuit",
        [
          "cos_osc_image"
        ]
      ]
    ],
    "spider": "&#xF13B;&#xF132;&#xF123;&#xF10A;&#xF117;&#xF121;&#xF132;&#xF123;&#xF106;&#xF114;&#xF132;&#xF123;&#xF10A;&#xF118;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1325
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_OSC.gate",
      "7 8 1 0 1",
      "5 8 1 0 1",
      "15 8 1 0 0",
      "11 6 -1 0 0",
      "12 7 0 -1 0",
      "13 8 1 0 0",
      "9 6 -1 0 1",
      "11 8 1 0 0",
      "8 7 0 1 1",
      "9 8 1 0 0"
    ],
    "thumbnail": "COS_OSC.gif",
    "page": "COS_OSC.html",
    "stanza": 1326
  },
  {
    "role": "file",
    "lines": [
      "== COS_SR =="
    ],
    "stanza": 1327
  },
  {
    "role": "comment",
    "lines": [
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_sr circuit",
    "section_category": "GATE",
    "section_index": 48,
    "stanza": 1328
  },
  {
    "role": "code",
    "lines": [
      "define cos_sr_gate | vector ",
      "  (vector 0 2 2 2 (true))",
      "  (vector 0 8 2 8 (true))",
      "  (vector 2 2 4 2 (true))",
      "  (vector 2 8 4 8 (true))",
      "  (vector 4 2 6 2 (true))",
      "  (vector 4 6 6 6 (true))",
      "  (vector 4 8 6 8 (true))",
      "  (vector 6 8 6 6 (true))",
      "  (vector 6 2 8 2 (true))",
      "  (vector 6 6 8 6 (false))",
      "  (vector 8 4 8 6 (false))",
      "  (vector 8 2 10 2 (true))",
      "  (vector 10 4 8 4 (false))",
      "  (vector 8 6 10 6 (false))",
      "  (vector 10 6 10 8 (false))",
      "  (vector 10 2 12 2 (true))",
      "  (vector 12 4 10 4 (false))",
      "  (vector 10 6 12 6 (false))",
      "  (vector 10 8 12 8 (false))",
      "  (vector 12 6 12 4 (false))",
      "  (vector 12 2 14 2 (true))",
      "  (vector 14 4 12 4 (false))",
      "  (vector 12 8 14 8 (false))",
      "  (vector 14 2 14 4 (true))",
      "  (vector 16 4 14 4 (true))",
      "  (vector 14 8 16 8 (false))",
      "  (vector 16 8 18 8 (false))",
      "  (vector 18 8 20 8 (false));"
    ],
    "preprocessed": "define cos_sr_gate | vector \n  (vector 0 2 2 2 (true))\n  (vector 0 8 2 8 (true))\n  (vector 2 2 4 2 (true))\n  (vector 2 8 4 8 (true))\n  (vector 4 2 6 2 (true))\n  (vector 4 6 6 6 (true))\n  (vector 4 8 6 8 (true))\n  (vector 6 8 6 6 (true))\n  (vector 6 2 8 2 (true))\n  (vector 6 6 8 6 (false))\n  (vector 8 4 8 6 (false))\n  (vector 8 2 10 2 (true))\n  (vector 10 4 8 4 (false))\n  (vector 8 6 10 6 (false))\n  (vector 10 6 10 8 (false))\n  (vector 10 2 12 2 (true))\n  (vector 12 4 10 4 (false))\n  (vector 10 6 12 6 (false))\n  (vector 10 8 12 8 (false))\n  (vector 12 6 12 4 (false))\n  (vector 12 2 14 2 (true))\n  (vector 14 4 12 4 (false))\n  (vector 12 8 14 8 (false))\n  (vector 14 2 14 4 (true))\n  (vector 16 4 14 4 (true))\n  (vector 14 8 16 8 (false))\n  (vector 16 8 18 8 (false))\n  (vector 18 8 20 8 (false));",
    "code
    "parse": [
      "define",
      "cos_sr_gate",
      [
        -1,
        "vector",
        [
          "vector",
          "0",
          "2",
          "2",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "0",
          "8",
          "2",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "2",
          "4",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "8",
          "4",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "2",
          "6",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "6",
          "6",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "8",
          "6",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "8",
          "6",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "2",
          "8",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "6",
          "8",
          "6",
          [
            "false"
          ]
        ],
        [
          "vector",
          "8",
          "4",
          "8",
          "6",
          [
            "false"
          ]
        ],
        [
          "vector",
          "8",
          "2",
          "10",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "4",
          "8",
          "4",
          [
            "false"
          ]
        ],
        [
          "vector",
          "8",
          "6",
          "10",
          "6",
          [
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "6",
          "10",
          "8",
          [
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "2",
          "12",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "4",
          "10",
          "4",
          [
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "6",
          "12",
          "6",
          [
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "8",
          "12",
          "8",
          [
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "6",
          "12",
          "4",
          [
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "2",
          "14",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "14",
          "4",
          "12",
          "4",
          [
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "8",
          "14",
          "8",
          [
            "false"
          ]
        ],
        [
          "vector",
          "14",
          "2",
          "14",
          "4",
          [
            "true"
          ]
        ],
        [
          "vector",
          "16",
          "4",
          "14",
          "4",
          [
            "true"
          ]
        ],
        [
          "vector",
          "14",
          "8",
          "16",
          "8",
          [
            "false"
          ]
        ],
        [
          "vector",
          "16",
          "8",
          "18",
          "8",
          [
            "false"
          ]
        ],
        [
          "vector",
          "18",
          "8",
          "20",
          "8",
          [
            "false"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF10B;&#xF113;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF133;&#xF135;&#xF135;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF133;&#xF13B;&#xF135;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF135;&#xF135;&#xF137;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF135;&#xF13B;&#xF137;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF135;&#xF139;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF139;&#xF139;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF13B;&#xF139;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF139;&#xF13B;&#xF139;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF139;&#xF135;&#xF13B;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF139;&#xF139;&#xF13B;&#xF139;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF137;&#xF13B;&#xF139;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF135;&#xF13D;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF137;&#xF13B;&#xF137;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF139;&#xF13D;&#xF139;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF139;&#xF13D;&#xF13B;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF135;&#xF13F;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF137;&#xF13D;&#xF137;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF139;&#xF13F;&#xF139;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF13B;&#xF13F;&#xF13B;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF139;&#xF13F;&#xF137;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF135;&#xF141;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF141;&#xF137;&#xF13F;&#xF137;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF13B;&#xF141;&#xF13B;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF141;&#xF135;&#xF141;&#xF137;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF111;&#xF137;&#xF141;&#xF137;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF141;&#xF13B;&#xF123;&#xF111;&#xF13B;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF111;&#xF13B;&#xF123;&#xF113;&#xF13B;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF113;&#xF13B;&#xF123;&#xF115;&#xF13B;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1329
  },
  {
    "role": "code",
    "lines": [
      "define cos_sr_image | make-image 88 169 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:...........:...............:...............:...............:...............:...............:...............:...........................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................:)",
      "  (:...........:...............:...............:...............:...............:...............:...............:...........................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:.............................................................................................................:::::.....................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:...................................................................:...............:...............:...........:...:...................................................:)",
      "  (:..................................................................::..............::..............::..............:::::::::::..........................................:)",
      "  (:.................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::..........................................:)",
      "  (:..................................................................::..............::..............::..............:::::::::::..........................................:)",
      "  (:...................................................................:...............:...........:...:...............:...................................................:)",
      "  (:...............................................................:..............................:::......................................................................:)",
      "  (:...............................................................:.............................:::::.....................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:.............................................................:::::.............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:...........................................:...............:...:...........:...............:...........................................................................:)",
      "  (:..................................:::::::::::..............::..............::..............::..........................................................................:)",
      "  (:..................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)",
      "  (:..................................:::::::::::..............::..............::..............::..........................................................................:)",
      "  (:...........................................:...:...........:...............:...............:...........................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:.............................................:::::.............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::............................:::::.....................................................................................:)",
      "  (:..............................................:::.............................:::......................................................................................:)",
      "  (:...........:...............:...............:...................................:...........:...............:...............:...............:...............:...........:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..............::..........:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..............::..........:)",
      "  (:...........:...............:...............:...............................................:...............:...............:...............:...............:...........:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "preprocessed": "define cos_sr_image | make-image 88 169 | vector \n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:...........:...............:...............:...............:...............:...............:...............:...........................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................:)\n  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................:)\n  (:...........:...............:...............:...............:...............:...............:...............:...........................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:.............................................................................................................:::::.....................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:...................................................................:...............:...............:...........:...:...................................................:)\n  (:..................................................................::..............::..............::..............:::::::::::..........................................:)\n  (:.................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::..........................................:)\n  (:..................................................................::..............::..............::..............:::::::::::..........................................:)\n  (:...................................................................:...............:...........:...:...............:...................................................:)\n  (:...............................................................:..............................:::......................................................................:)\n  (:...............................................................:.............................:::::.....................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:.............................................................:::::.............................:.......................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:...........................................:...............:...:...........:...............:...........................................................................:)\n  (:..................................:::::::::::..............::..............::..............::..........................................................................:)\n  (:..................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)\n  (:..................................:::::::::::..............::..............::..............::..........................................................................:)\n  (:...........................................:...:...........:...............:...............:...........................................................................:)\n  (:..............................................:::..............................:.......................................................................................:)\n  (:.............................................:::::.............................:.......................................................................................:)\n  (:..............................................:::..............................:.......................................................................................:)\n  (:..............................................:::..............................:.......................................................................................:)\n  (:..............................................:::..............................:.......................................................................................:)\n  (:..............................................:::..............................:.......................................................................................:)\n  (:..............................................:::..............................:.......................................................................................:)\n  (:..............................................:::..............................:.......................................................................................:)\n  (:..............................................:::..............................:.......................................................................................:)\n  (:..............................................:::............................:::::.....................................................................................:)\n  (:..............................................:::.............................:::......................................................................................:)\n  (:...........:...............:...............:...................................:...........:...............:...............:...............:...............:...........:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..............::..........:)\n  (:..::::::::::::....::::::::::::....::::::::::::....................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..............::..........:)\n  (:...........:...............:...............:...............................................:...............:...............:...............:...............:...........:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);",
    "code": "21101321101100113123210100011032101100032101010013123210000322101100110332210110011133221011001113322101100111332210110011133221011001113322101100111332210110011133221011001113322101100111332210110011133221011001113322101100111332210110011133221101101003322110110101332211011011033221101101013322110110100332211011011133221101101113322110110111332211011011133221101101113322110110111332211011011133221101101113322110110111332211011100033221101101113322110111001332211011101033221101110113322110111010332211011110033221011011103322101101111332210111000033221011100003322101110000332210111000033221011100003322101110000332210111000033221011100013322101110010332211011110133221101111103322110111111332211011111033221110000003322111000001332211100001033221110000013322111000001332211100000133221110000013322111000001332211100000133221110000013322111000011332211100010033221110001013322111000110332211100011133221110001103322111001000332210110011133221011001113322101100111332210110011133221011001113322101100111332210110011133221011001113322101100111332210110011133221011001113322101100111332210110011133221011001113322101100111332210110011133221011001113322101100111332210110011133221011001113322101100110332233",
    "parse": [
      "define",
      "cos_sr_image",
      [
        -1,
        "make-image",
        "88",
        "169",
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...............:...............:...............:...........................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................:"
          ],
          [
            ":...........:...............:...............:...............:...............:...............:...............:...........................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":.............................................................................................................:::::.....................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":...................................................................:...............:...............:...........:...:...................................................:"
          ],
          [
            ":..................................................................::..............::..............::..............:::::::::::..........................................:"
          ],
          [
            ":.................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::..........................................:"
          ],
          [
            ":..................................................................::..............::..............::..............:::::::::::..........................................:"
          ],
          [
            ":...................................................................:...............:...........:...:...............:...................................................:"
          ],
          [
            ":...............................................................:..............................:::......................................................................:"
          ],
          [
            ":...............................................................:.............................:::::.....................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":.............................................................:::::.............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":...........................................:...............:...:...........:...............:...........................................................................:"
          ],
          [
            ":..................................:::::::::::..............::..............::..............::..........................................................................:"
          ],
          [
            ":..................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:"
          ],
          [
            ":..................................:::::::::::..............::..............::..............::..........................................................................:"
          ],
          [
            ":...........................................:...:...........:...............:...............:...........................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":.............................................:::::.............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::............................:::::.....................................................................................:"
          ],
          [
            ":..............................................:::.............................:::......................................................................................:"
          ],
          [
            ":...........:...............:...............:...................................:...........:...............:...............:...............:...............:...........:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..............::..........:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..............::..........:"
          ],
          [
            ":...........:...............:...............:...............................................:...............:...............:...............:...............:...........:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF10B;&#xF114;&#xF101;&#xF143;&#xF123;&#xF104;&#xF117;&#xF127;&#xF119;&#xF12C;&#xF11A;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF106;&#xF117;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF115;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF116;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF116;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF115;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF118;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF118;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF118;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF118;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF118;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF118;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF118;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF118;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF118;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF119;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF118;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF106;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF106;&#xF120;&#xF121;&#xF132;&#xF123;&#xF107;&#xF111;&#xF121;&#xF132;&#xF123;&#xF107;&#xF111;&#xF121;&#xF132;&#xF123;&#xF107;&#xF111;&#xF121;&#xF132;&#xF123;&#xF107;&#xF111;&#xF121;&#xF132;&#xF123;&#xF107;&#xF111;&#xF121;&#xF132;&#xF123;&#xF107;&#xF111;&#xF121;&#xF132;&#xF123;&#xF107;&#xF111;&#xF121;&#xF132;&#xF123;&#xF107;&#xF112;&#xF121;&#xF132;&#xF123;&#xF107;&#xF113;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF11E;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF120;&#xF121;&#xF132;&#xF123;&#xF10B;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF111;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF113;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF114;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF115;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF116;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF118;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF119;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF117;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1330
  },
  {
    "role": "code",
    "lines": [
      "equal (cos_sr_gate) (distill-circuit (cos_sr_image));"
    ],
    "preprocessed": "equal (cos_sr_gate) (distill-circuit (cos_sr_image));",
    "code": "2100032211011001033221011000113221101100113332233",
    "parse": [
      "equal",
      [
        "cos_sr_gate"
      ],
      [
        "distill-circuit",
        [
          "cos_sr_image"
        ]
      ]
    ],
    "spider": "&#xF13B;&#xF132;&#xF123;&#xF10B;&#xF113;&#xF121;&#xF132;&#xF123;&#xF106;&#xF114;&#xF132;&#xF123;&#xF10B;&#xF114;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1331
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_SR.gate",
      "6 7 0 -1 1",
      "13 2 1 0 1",
      "15 4 -1 0 1",
      "19 8 1 0 0",
      "11 2 1 0 1",
      "13 4 -1 0 0",
      "17 8 1 0 0",
      "9 2 1 0 1",
      "11 4 -1 0 0",
      "15 8 1 0 0",
      "7 2 1 0 1",
      "9 4 -1 0 0",
      "11 6 1 0 0",
      "13 8 1 0 0",
      "5 2 1 0 1",
      "9 6 1 0 0",
      "11 8 1 0 0",
      "3 2 1 0 1",
      "7 6 1 0 0",
      "1 2 1 0 1",
      "5 6 1 0 1",
      "5 8 1 0 1",
      "3 8 1 0 1",
      "1 8 1 0 1",
      "14 3 0 1 1",
      "12 5 0 -1 0",
      "8 5 0 1 0",
      "10 7 0 1 0"
    ],
    "thumbnail": "COS_SR.gif",
    "page": "COS_SR.html",
    "stanza": 1332
  },
  {
    "role": "file",
    "lines": [
      "== COS_D =="
    ],
    "stanza": 1333
  },
  {
    "role": "comment",
    "lines": [
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_d circuit",
    "section_category": "GATE",
    "section_index": 49,
    "stanza": 1334
  },
  {
    "role": "code",
    "lines": [
      "define cos_d_gate | vector ",
      "  (vector 0 2 2 2 (true))",
      "  (vector 0 6 2 6 (true))",
      "  (vector 2 2 4 2 (true))",
      "  (vector 2 6 4 6 (true))",
      "  (vector 4 2 6 2 (true))",
      "  (vector 4 6 6 6 (true))",
      "  (vector 6 2 8 2 (true))",
      "  (vector 6 6 8 6 (true))",
      "  (vector 8 2 10 2 (true))",
      "  (vector 8 6 10 6 (true))",
      "  (vector 10 6 10 4 (true))",
      "  (vector 10 10 10 8 (true))",
      "  (vector 10 2 12 2 (true))",
      "  (vector 10 4 12 4 (true))",
      "  (vector 10 6 12 6 (true))",
      "  (vector 10 8 12 8 (true))",
      "  (vector 12 10 10 10 (true))",
      "  (vector 12 0 12 2 (true))",
      "  (vector 12 2 12 4 (false))",
      "  (vector 12 6 12 8 (true))",
      "  (vector 12 10 12 12 (true))",
      "  (vector 12 4 14 4 (true))",
      "  (vector 12 8 14 8 (false))",
      "  (vector 14 10 12 10 (true))",
      "  (vector 12 12 14 12 (true))",
      "  (vector 14 0 14 2 (true))",
      "  (vector 14 2 14 4 (true))",
      "  (vector 14 4 14 6 (false))",
      "  (vector 14 6 14 8 (false))",
      "  (vector 14 8 14 10 (false))",
      "  (vector 16 10 14 10 (true))",
      "  (vector 14 12 16 12 (true))",
      "  (vector 16 12 18 12 (true))",
      "  (vector 18 12 20 12 (true));"
    ],
    "preprocessed": "define cos_d_gate | vector \n  (vector 0 2 2 2 (true))\n  (vector 0 6 2 6 (true))\n  (vector 2 2 4 2 (true))\n  (vector 2 6 4 6 (true))\n  (vector 4 2 6 2 (true))\n  (vector 4 6 6 6 (true))\n  (vector 6 2 8 2 (true))\n  (vector 6 6 8 6 (true))\n  (vector 8 2 10 2 (true))\n  (vector 8 6 10 6 (true))\n  (vector 10 6 10 4 (true))\n  (vector 10 10 10 8 (true))\n  (vector 10 2 12 2 (true))\n  (vector 10 4 12 4 (true))\n  (vector 10 6 12 6 (true))\n  (vector 10 8 12 8 (true))\n  (vector 12 10 10 10 (true))\n  (vector 12 0 12 2 (true))\n  (vector 12 2 12 4 (false))\n  (vector 12 6 12 8 (true))\n  (vector 12 10 12 12 (true))\n  (vector 12 4 14 4 (true))\n  (vector 12 8 14 8 (false))\n  (vector 14 10 12 10 (true))\n  (vector 12 12 14 12 (true))\n  (vector 14 0 14 2 (true))\n  (vector 14 2 14 4 (true))\n  (vector 14 4 14 6 (false))\n  (vector 14 6 14 8 (false))\n  (vector 14 8 14 10 (false))\n  (vector 16 10 14 10 (true))\n  (vector 14 12 16 12 (true))\n  (vector 16 12 18 12 (true))\n  (vector 18 12 20 12 (true));",
    "code
    "parse": [
      "define",
      "cos_d_gate",
      [
        -1,
        "vector",
        [
          "vector",
          "0",
          "2",
          "2",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "0",
          "6",
          "2",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "2",
          "4",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "6",
          "4",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "2",
          "6",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "6",
          "6",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "2",
          "8",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "6",
          "8",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "2",
          "10",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "6",
          "10",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "6",
          "10",
          "4",
          [
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "10",
          "10",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "2",
          "12",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "4",
          "12",
          "4",
          [
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "6",
          "12",
          "6",
          [
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "8",
          "12",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "10",
          "10",
          "10",
          [
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "0",
          "12",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "2",
          "12",
          "4",
          [
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "6",
          "12",
          "8",
          [
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "10",
          "12",
          "12",
          [
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "4",
          "14",
          "4",
          [
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "8",
          "14",
          "8",
          [
            "false"
          ]
        ],
        [
          "vector",
          "14",
          "10",
          "12",
          "10",
          [
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "12",
          "14",
          "12",
          [
            "true"
          ]
        ],
        [
          "vector",
          "14",
          "0",
          "14",
          "2",
          [
            "true"
          ]
        ],
        [
          "vector",
          "14",
          "2",
          "14",
          "4",
          [
            "true"
          ]
        ],
        [
          "vector",
          "14",
          "4",
          "14",
          "6",
          [
            "false"
          ]
        ],
        [
          "vector",
          "14",
          "6",
          "14",
          "8",
          [
            "false"
          ]
        ],
        [
          "vector",
          "14",
          "8",
          "14",
          "10",
          [
            "false"
          ]
        ],
        [
          "vector",
          "16",
          "10",
          "14",
          "10",
          [
            "true"
          ]
        ],
        [
          "vector",
          "14",
          "12",
          "16",
          "12",
          [
            "true"
          ]
        ],
        [
          "vector",
          "16",
          "12",
          "18",
          "12",
          [
            "true"
          ]
        ],
        [
          "vector",
          "18",
          "12",
          "20",
          "12",
          [
            "true"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF10C;&#xF11A;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF111;&#xF133;&#xF135;&#xF135;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF133;&#xF139;&#xF135;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF135;&#xF135;&#xF137;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF135;&#xF139;&#xF137;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF135;&#xF139;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF137;&#xF139;&#xF139;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF139;&#xF135;&#xF13B;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF139;&#xF139;&#xF13B;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF135;&#xF13D;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF139;&#xF13D;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF139;&#xF13D;&#xF137;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF13D;&#xF13D;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF135;&#xF13F;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF137;&#xF13F;&#xF137;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF139;&#xF13F;&#xF139;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13D;&#xF13B;&#xF13F;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF13D;&#xF13D;&#xF13D;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF133;&#xF13F;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF135;&#xF13F;&#xF137;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF139;&#xF13F;&#xF13B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF13D;&#xF13F;&#xF13F;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF137;&#xF141;&#xF137;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF13B;&#xF141;&#xF13B;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF141;&#xF13D;&#xF13F;&#xF13D;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13F;&#xF13F;&#xF141;&#xF13F;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF141;&#xF133;&#xF141;&#xF135;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF141;&#xF135;&#xF141;&#xF137;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF141;&#xF137;&#xF141;&#xF139;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF141;&#xF139;&#xF141;&#xF13B;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF141;&#xF13B;&#xF141;&#xF13D;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF111;&#xF13D;&#xF141;&#xF13D;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF141;&#xF13F;&#xF123;&#xF111;&#xF13F;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF111;&#xF13F;&#xF123;&#xF113;&#xF13F;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF113;&#xF13F;&#xF123;&#xF115;&#xF13F;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1335
  },
  {
    "role": "code",
    "lines": [
      "define cos_d_image | make-image 109 169 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:.............................................................................................:::::...........:::::.....................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:...........:...............:...............:...............:...............:...............:...:...............:.......................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)",
      "  (:...........:...............:...............:...............:...............:...............:...........................................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:.............................................................................................:::::...........:::::.....................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:...........................................................................................:...:...........:...:.......................................................:)",
      "  (:..................................................................................:::::::::::.....:::::::::::..........................................................:)",
      "  (:..................................................................................::::::::::::....::::::::::::.........................................................:)",
      "  (:..................................................................................:::::::::::.....:::::::::::..........................................................:)",
      "  (:...............................................................................:...........:...............:...........................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:.............................................................................:::::.............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::............................:::::.....................................................:)",
      "  (:..............................................................................:::.............................:::......................................................:)",
      "  (:...........:...............:...............:...............:...............:...............:...................:.......................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)",
      "  (:...........:...............:...............:...............:...............:...............:...........................................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:.............................................................................................:::::...........:::::.....................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:...........................................................................................:...:...........:...:.......................................................:)",
      "  (:..................................................................................:::::::::::..............::..........................................................:)",
      "  (:..................................................................................::::::::::::....::::::::::::.........................................................:)",
      "  (:..................................................................................:::::::::::..............::..........................................................:)",
      "  (:...............................................................................:...........:...............:...........................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:.............................................................................:::::.............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::............................:::::.....................................................:)",
      "  (:..............................................................................:::.............................:::......................................................:)",
      "  (:...................................................................................:...............:...........:...:...................................................:)",
      "  (:..................................................................................:::::::::::.....:::::::::::.....:::::::::::..........................................:)",
      "  (:.................................................................................::::::::::::....::::::::::::....::::::::::::..........................................:)",
      "  (:..................................................................................:::::::::::.....:::::::::::.....:::::::::::..........................................:)",
      "  (:...................................................................................:...............:...............:...................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:.............................................................................................:::::.....................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:...............................................................................................:...........:...............:...............:...............:...........:)",
      "  (:..................................................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)",
      "  (:..................................................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)",
      "  (:..................................................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)",
      "  (:...........................................................................................................:...............:...............:...............:...........:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "preprocessed": "define cos_d_image | make-image 109 169 | vector \n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:.............................................................................................:::::...........:::::.....................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:...........:...............:...............:...............:...............:...............:...:...............:.......................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)\n  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)\n  (:...........:...............:...............:...............:...............:...............:...........................................................................:)\n  (:...............................................................................................:..............:::......................................................:)\n  (:...............................................................................................:..............:::......................................................:)\n  (:...............................................................................................:..............:::......................................................:)\n  (:...............................................................................................:..............:::......................................................:)\n  (:...............................................................................................:..............:::......................................................:)\n  (:...............................................................................................:..............:::......................................................:)\n  (:...............................................................................................:..............:::......................................................:)\n  (:...............................................................................................:..............:::......................................................:)\n  (:...............................................................................................:..............:::......................................................:)\n  (:.............................................................................................:::::...........:::::.....................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:...........................................................................................:...:...........:...:.......................................................:)\n  (:..................................................................................:::::::::::.....:::::::::::..........................................................:)\n  (:..................................................................................::::::::::::....::::::::::::.........................................................:)\n  (:..................................................................................:::::::::::.....:::::::::::..........................................................:)\n  (:...............................................................................:...........:...............:...........................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:.............................................................................:::::.............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::............................:::::.....................................................:)\n  (:..............................................................................:::.............................:::......................................................:)\n  (:...........:...............:...............:...............:...............:...............:...................:.......................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)\n  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)\n  (:...........:...............:...............:...............:...............:...............:...........................................................................:)\n  (:..............................................................................................:::..............:.......................................................:)\n  (:..............................................................................................:::..............:.......................................................:)\n  (:..............................................................................................:::..............:.......................................................:)\n  (:..............................................................................................:::..............:.......................................................:)\n  (:..............................................................................................:::..............:.......................................................:)\n  (:..............................................................................................:::..............:.......................................................:)\n  (:..............................................................................................:::..............:.......................................................:)\n  (:..............................................................................................:::..............:.......................................................:)\n  (:..............................................................................................:::..............:.......................................................:)\n  (:.............................................................................................:::::...........:::::.....................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:...........................................................................................:...:...........:...:.......................................................:)\n  (:..................................................................................:::::::::::..............::..........................................................:)\n  (:..................................................................................::::::::::::....::::::::::::.........................................................:)\n  (:..................................................................................:::::::::::..............::..........................................................:)\n  (:...............................................................................:...........:...............:...........................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:.............................................................................:::::.............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::............................:::::.....................................................:)\n  (:..............................................................................:::.............................:::......................................................:)\n  (:...................................................................................:...............:...........:...:...................................................:)\n  (:..................................................................................:::::::::::.....:::::::::::.....:::::::::::..........................................:)\n  (:.................................................................................::::::::::::....::::::::::::....::::::::::::..........................................:)\n  (:..................................................................................:::::::::::.....:::::::::::.....:::::::::::..........................................:)\n  (:...................................................................................:...............:...............:...................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:.............................................................................................:::::.....................................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:...............................................................................................:...........:...............:...............:...............:...........:)\n  (:..................................................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)\n  (:..................................................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)\n  (:..................................................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)\n  (:...........................................................................................................:...............:...............:...............:...........:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);",
    "code
    "parse": [
      "define",
      "cos_d_image",
      [
        -1,
        "make-image",
        "109",
        "169",
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":.............................................................................................:::::...........:::::.....................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":...........:...............:...............:...............:...............:...............:...:...............:.......................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...............:...............:...........................................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":.............................................................................................:::::...........:::::.....................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":...........................................................................................:...:...........:...:.......................................................:"
          ],
          [
            ":..................................................................................:::::::::::.....:::::::::::..........................................................:"
          ],
          [
            ":..................................................................................::::::::::::....::::::::::::.........................................................:"
          ],
          [
            ":..................................................................................:::::::::::.....:::::::::::..........................................................:"
          ],
          [
            ":...............................................................................:...........:...............:...........................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":.............................................................................:::::.............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::............................:::::.....................................................:"
          ],
          [
            ":..............................................................................:::.............................:::......................................................:"
          ],
          [
            ":...........:...............:...............:...............:...............:...............:...................:.......................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...............:...............:...........................................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":.............................................................................................:::::...........:::::.....................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":...........................................................................................:...:...........:...:.......................................................:"
          ],
          [
            ":..................................................................................:::::::::::..............::..........................................................:"
          ],
          [
            ":..................................................................................::::::::::::....::::::::::::.........................................................:"
          ],
          [
            ":..................................................................................:::::::::::..............::..........................................................:"
          ],
          [
            ":...............................................................................:...........:...............:...........................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":.............................................................................:::::.............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::............................:::::.....................................................:"
          ],
          [
            ":..............................................................................:::.............................:::......................................................:"
          ],
          [
            ":...................................................................................:...............:...........:...:...................................................:"
          ],
          [
            ":..................................................................................:::::::::::.....:::::::::::.....:::::::::::..........................................:"
          ],
          [
            ":.................................................................................::::::::::::....::::::::::::....::::::::::::..........................................:"
          ],
          [
            ":..................................................................................:::::::::::.....:::::::::::.....:::::::::::..........................................:"
          ],
          [
            ":...................................................................................:...............:...............:...................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":.............................................................................................:::::.....................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":...............................................................................................:...........:...............:...............:...............:...........:"
          ],
          [
            ":..................................................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:"
          ],
          [
            ":..................................................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:"
          ],
          [
            ":..................................................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:"
          ],
          [
            ":...........................................................................................................:...............:...............:...............:...........:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF10C;&#xF11B;&#xF101;&#xF143;&#xF123;&#xF104;&#xF117;&#xF128;&#xF11E;&#xF12C;&#xF11A;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF123;&#xF106;&#xF117;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11E;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF120;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF111;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF113;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF114;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF115;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF114;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF116;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF118;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF119;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF120;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF111;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF10C;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF113;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF115;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF116;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF118;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF117;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF119;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF11E;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF120;&#xF121;&#xF132;&#xF123;&#xF10D;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF111;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF113;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF112;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF114;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF115;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF116;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF115;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF117;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF118;&#xF121;&#xF132;&#xF123;&#xF106;&#xF117;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1336
  },
  {
    "role": "code",
    "lines": [
      "equal (cos_d_gate) (distill-circuit (cos_d_image));"
    ],
    "preprocessed": "equal (cos_d_gate) (distill-circuit (cos_d_image));",
    "code": "2100032211100100133221011000113221110010103332233",
    "parse": [
      "equal",
      [
        "cos_d_gate"
      ],
      [
        "distill-circuit",
        [
          "cos_d_image"
        ]
      ]
    ],
    "spider": "&#xF13B;&#xF132;&#xF123;&#xF10C;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF106;&#xF114;&#xF132;&#xF123;&#xF10C;&#xF11B;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1337
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_D.gate",
      "11 2 1 0 1",
      "13 4 1 0 1",
      "9 2 1 0 1",
      "11 4 1 0 1",
      "19 12 1 0 1",
      "7 2 1 0 1",
      "11 6 1 0 1",
      "13 8 1 0 0",
      "15 10 -1 0 1",
      "17 12 1 0 1",
      "5 2 1 0 1",
      "9 6 1 0 1",
      "11 8 1 0 1",
      "13 10 -1 0 1",
      "15 12 1 0 1",
      "3 2 1 0 1",
      "7 6 1 0 1",
      "11 10 -1 0 1",
      "13 12 1 0 1",
      "1 2 1 0 1",
      "5 6 1 0 1",
      "3 6 1 0 1",
      "1 6 1 0 1",
      "14 1 0 1 1",
      "12 1 0 1 1",
      "14 3 0 1 1",
      "12 3 0 1 0",
      "14 5 0 1 0",
      "14 7 0 1 0",
      "10 5 0 -1 1",
      "12 7 0 1 1",
      "14 9 0 1 0",
      "10 9 0 -1 1",
      "12 11 0 1 1"
    ],
    "thumbnail": "COS_D.gif",
    "page": "COS_D.html",
    "stanza": 1338
  },
  {
    "role": "file",
    "lines": [
      "== COS_UnlessProbe =="
    ],
    "stanza": 1339
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "probing networks of unless gates",
    "section_category": "GATE",
    "section_index": 50,
    "stanza": 1340
  },
  {
    "role": "code",
    "lines": [
      "define set-input |",
      "  ? circuit |",
      "  ? index |",
      "  ? value |",
      "  assign wire (list-ref (circuit) (index)) ",
      "  (map (? w (if (equal (w) (wire))",
      "        (vector (list-ref (w) 0)",
      "            (list-ref (w) 1)",
      "            (list-ref (w) 2)            ",
      "            (list-ref (w) 3)",
      "            (value))",
      "        (w)))",
      "       (circuit));"
    ],
    "preprocessed": "define set-input |\n  ? circuit |\n  ? index |\n  ? value |\n  assign wire (list-ref (circuit) (index)) \n  (map (? w (if (equal (w) (wire))\n        (vector (list-ref (w) 0)\n            (list-ref (w) 1)\n            (list-ref (w) 2)            \n            (list-ref (w) 3)\n            (value))\n        (w)))\n       (circuit));",
    "code": "211013211110011131232110032100110000312321100321111010003123211003210101011312321110321111010013221001011322100110000332211110100033322110001132211003210100011132211113221000322101000111332211110100133322100003221001011322101000111332033221001011322101000111332133221001011322101000111332103322100101132210100011133211332210101011333221010001113333221001100003332233",
    "parse": [
      "define",
      "set-input",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "?",
          "index",
          [
            -1,
            "?",
            "value",
            [
              -1,
              "assign",
              "wire",
              [
                "list-ref",
                [
                  "circuit"
                ],
                [
                  "index"
                ]
              ],
              [
                "map",
                [
                  "?",
                  "w",
                  [
                    "if",
                    [
                      "equal",
                      [
                        "w"
                      ],
                      [
                        "wire"
                      ]
                    ],
                    [
                      "vector",
                      [
                        "list-ref",
                        [
                          "w"
                        ],
                        "0"
                      ],
                      [
                        "list-ref",
                        [
                          "w"
                        ],
                        "1"
                      ],
                      [
                        "list-ref",
                        [
                          "w"
                        ],
                        "2"
                      ],
                      [
                        "list-ref",
                        [
                          "w"
                        ],
                        "3"
                      ],
                      [
                        "value"
                      ]
                    ],
                    [
                      "w"
                    ]
                  ]
                ],
                [
                  "circuit"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF10E;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF103;&#xF111;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF10E;&#xF119;&#xF101;&#xF143;&#xF13F;&#xF12C;&#xF11C;&#xF101;&#xF143;&#xF141;&#xF123;&#xF10E;&#xF11A;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF103;&#xF111;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF119;&#xF121;&#xF121;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF123;&#xF104;&#xF118;&#xF132;&#xF142;&#xF132;&#xF13B;&#xF132;&#xF123;&#xF104;&#xF118;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF11A;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF104;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF104;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF104;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF104;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF12C;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF123;&#xF104;&#xF118;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF103;&#xF111;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1341
  },
  {
    "role": "code",
    "lines": [
      "define read-output |",
      "  ? circuit |",
      "  ? index |",
      "  assign len (list-length | circuit) |",
      "  assign wire (list-ref (circuit) | - (- (len) 1) (index)) |",
      "  list-ref (wire) 4;"
    ],
    "preprocessed": "define read-output |\n  ? circuit |\n  ? index |\n  assign len (list-length | circuit) |\n  assign wire (list-ref (circuit) | - (- (len) 1) (index)) |\n  list-ref (wire) 4;",
    "code": "2110132111101010312321100321001100003123211003211110100031232111032111101011322100101031232100110000331232111032111101001322100101132210011000033123210113221011322111101011332133221111010003331232100101132211110100133210032233",
    "parse": [
      "define",
      "read-output",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "?",
          "index",
          [
            -1,
            "assign",
            "len",
            [
              "list-length",
              [
                -1,
                "circuit"
              ]
            ],
            [
              -1,
              "assign",
              "wire",
              [
                "list-ref",
                [
                  "circuit"
                ],
                [
                  -1,
                  "-",
                  [
                    "-",
                    [
                      "len"
                    ],
                    "1"
                  ],
                  [
                    "index"
                  ]
                ]
              ],
              [
                -1,
                "list-ref",
                [
                  "wire"
                ],
                "4"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF10E;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF103;&#xF111;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF10E;&#xF119;&#xF101;&#xF143;&#xF141;&#xF123;&#xF10E;&#xF11C;&#xF132;&#xF126;&#xF11B;&#xF101;&#xF143;&#xF123;&#xF103;&#xF111;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF10E;&#xF11A;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF103;&#xF111;&#xF121;&#xF101;&#xF143;&#xF13E;&#xF132;&#xF13E;&#xF132;&#xF123;&#xF10E;&#xF11C;&#xF121;&#xF134;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF119;&#xF121;&#xF121;&#xF101;&#xF143;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF10E;&#xF11A;&#xF121;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 1342
  },
  {
    "role": "code",
    "lines": [
      "define sim |",
      "  ? circuit | ? steps | ? setter",
      "  (if (> (steps) 0)",
      "      (sim (simulate-unless (setter | circuit)) (- (steps) 1) (setter))",
      "      (circuit));"
    ],
    "preprocessed": "define sim |\n  ? circuit | ? steps | ? setter\n  (if (> (steps) 0)\n      (sim (simulate-unless (setter | circuit)) (- (steps) 1) (setter))\n      (circuit));",
    "code": "21101321111011003123211003210011000031232110032111101101312321100321111011103221111322100322111101101332033221111011003221001111113221111011103123210011000033322101132211110110133213322111101110333221001100003332233",
    "parse": [
      "define",
      "sim",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "?",
          "steps",
          [
            -1,
            "?",
            "setter",
            [
              "if",
              [
                ">",
                [
                  "steps"
                ],
                "0"
              ],
              [
                "sim",
                [
                  "simulate-unless",
                  [
                    "setter",
                    [
                      -1,
                      "circuit"
                    ]
                  ]
                ],
                [
                  "-",
                  [
                    "steps"
                  ],
                  "1"
                ],
                [
                  "setter"
                ]
              ],
              [
                "circuit"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF10E;&#xF11D;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF103;&#xF111;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF10E;&#xF11E;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF10E;&#xF11F;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF123;&#xF10E;&#xF11E;&#xF121;&#xF133;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF11D;&#xF132;&#xF123;&#xF103;&#xF120;&#xF132;&#xF123;&#xF10E;&#xF11F;&#xF101;&#xF143;&#xF123;&#xF103;&#xF111;&#xF121;&#xF121;&#xF132;&#xF13E;&#xF132;&#xF123;&#xF10E;&#xF11E;&#xF121;&#xF134;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF123;&#xF103;&#xF111;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1343
  },
  {
    "role": "code",
    "lines": [
      "define smart-sim |",
      "  ? circuit |",
      "  ? setter |",
      "  sim (circuit) (list-length | circuit) (setter);"
    ],
    "preprocessed": "define smart-sim |\n  ? circuit |\n  ? setter |\n  sim (circuit) (list-length | circuit) (setter);",
    "code": "211013211110111131232110032100110000312321100321111011103123211110110032210011000033221001010312321001100003322111101110332233",
    "parse": [
      "define",
      "smart-sim",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "?",
          "setter",
          [
            -1,
            "sim",
            [
              "circuit"
            ],
            [
              "list-length",
              [
                -1,
                "circuit"
              ]
            ],
            [
              "setter"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF10E;&#xF120;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF103;&#xF111;&#xF101;&#xF143;&#xF13F;&#xF123;&#xF10E;&#xF11F;&#xF101;&#xF143;&#xF123;&#xF10E;&#xF11D;&#xF132;&#xF123;&#xF103;&#xF111;&#xF121;&#xF132;&#xF126;&#xF11B;&#xF101;&#xF143;&#xF123;&#xF103;&#xF111;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF11F;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1344
  },
  {
    "role": "comment",
    "lines": [
      "# test cos_not gate"
    ],
    "stanza": 1345
  },
  {
    "role": "code",
    "lines": [
      "define cos_not_harness |",
      "  ? x |",
      "  assign c (cos_not_gate) | ",
      "  assign c (smart-sim (c) (? c (set-input (c) 0 (x)))) |",
      "  read-output (c) 0;"
    ],
    "preprocessed": "define cos_not_harness |\n  ? x |\n  assign c (cos_not_gate) | \n  assign c (smart-sim (c) (? c (set-input (c) 0 (x)))) |\n  read-output (c) 0;",
    "code": "2110132111110000312321100321001113123211103211011132210110010033123211103211011132211110111132211011133221100321101113221111001113221101113320322100111333331232111101010322110111332032233",
    "parse": [
      "define",
      "cos_not_harness",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "assign",
          "c",
          [
            "cos_not_gate"
          ],
          [
            -1,
            "assign",
            "c",
            [
              "smart-sim",
              [
                "c"
              ],
              [
                "?",
                "c",
                [
                  "set-input",
                  [
                    "c"
                  ],
                  "0",
                  [
                    "x"
                  ]
                ]
              ]
            ],
            [
              -1,
              "read-output",
              [
                "c"
              ],
              "0"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF10F;&#xF111;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF141;&#xF125;&#xF118;&#xF132;&#xF123;&#xF106;&#xF115;&#xF121;&#xF101;&#xF143;&#xF141;&#xF125;&#xF118;&#xF132;&#xF123;&#xF10E;&#xF120;&#xF132;&#xF125;&#xF118;&#xF121;&#xF132;&#xF13F;&#xF125;&#xF118;&#xF132;&#xF123;&#xF10E;&#xF118;&#xF132;&#xF125;&#xF118;&#xF121;&#xF133;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF101;&#xF143;&#xF123;&#xF10E;&#xF11B;&#xF132;&#xF125;&#xF118;&#xF121;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 1346
  },
  {
    "role": "code",
    "lines": [
      "= (false) | cos_not_harness | true;"
    ],
    "preprocessed": "= (false) | cos_not_harness | true;",
    "code": "211322033123211111000031232132233",
    "parse": [
      "=",
      [
        "false"
      ],
      [
        -1,
        "cos_not_harness",
        [
          -1,
          "true"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF133;&#xF121;&#xF101;&#xF143;&#xF123;&#xF10F;&#xF111;&#xF101;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 1347
  },
  {
    "role": "code",
    "lines": [
      "= (true) | cos_not_harness | false;"
    ],
    "preprocessed": "= (true) | cos_not_harness | false;",
    "code": "211322133123211111000031232032233",
    "parse": [
      "=",
      [
        "true"
      ],
      [
        -1,
        "cos_not_harness",
        [
          -1,
          "false"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF134;&#xF121;&#xF101;&#xF143;&#xF123;&#xF10F;&#xF111;&#xF101;&#xF143;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 1348
  },
  {
    "role": "comment",
    "lines": [
      "# test cos_and gate"
    ],
    "stanza": 1349
  },
  {
    "role": "code",
    "lines": [
      "define cos_and_harness |",
      "  ? x | ? y |",
      "  assign c (cos_and_gate) | ",
      "  assign c (smart-sim (c) (? c (set-input (set-input (c) 0 (x)) 1 (y)))) |",
      "  read-output (c) 0;"
    ],
    "preprocessed": "define cos_and_harness |\n  ? x | ? y |\n  assign c (cos_and_gate) | \n  assign c (smart-sim (c) (? c (set-input (set-input (c) 0 (x)) 1 (y)))) |\n  read-output (c) 0;",
    "code": "21101321111100013123211003210011131232110032110011312321110321101113221011101113312321110321101113221111011113221101113322110032110111322111100111322111100111322110111332032210011133321322110011333331232111101010322110111332032233",
    "parse": [
      "define",
      "cos_and_harness",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "assign",
            "c",
            [
              "cos_and_gate"
            ],
            [
              -1,
              "assign",
              "c",
              [
                "smart-sim",
                [
                  "c"
                ],
                [
                  "?",
                  "c",
                  [
                    "set-input",
                    [
                      "set-input",
                      [
                        "c"
                      ],
                      "0",
                      [
                        "x"
                      ]
                    ],
                    "1",
                    [
                      "y"
                    ]
                  ]
                ]
              ],
              [
                -1,
                "read-output",
                [
                  "c"
                ],
                "0"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF10F;&#xF112;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF101;&#xF143;&#xF141;&#xF125;&#xF118;&#xF132;&#xF123;&#xF107;&#xF118;&#xF121;&#xF101;&#xF143;&#xF141;&#xF125;&#xF118;&#xF132;&#xF123;&#xF10E;&#xF120;&#xF132;&#xF125;&#xF118;&#xF121;&#xF132;&#xF13F;&#xF125;&#xF118;&#xF132;&#xF123;&#xF10E;&#xF118;&#xF132;&#xF123;&#xF10E;&#xF118;&#xF132;&#xF125;&#xF118;&#xF121;&#xF133;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF134;&#xF132;&#xF125;&#xF114;&#xF121;&#xF121;&#xF121;&#xF121;&#xF101;&#xF143;&#xF123;&#xF10E;&#xF11B;&#xF132;&#xF125;&#xF118;&#xF121;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 1350
  },
  {
    "role": "code",
    "lines": [
      "= (false) | cos_and_harness (false) (false);"
    ],
    "preprocessed": "= (false) | cos_and_harness (false) (false);",
    "code": "2113220331232111110001322033220332233",
    "parse": [
      "=",
      [
        "false"
      ],
      [
        -1,
        "cos_and_harness",
        [
          "false"
        ],
        [
          "false"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF133;&#xF121;&#xF101;&#xF143;&#xF123;&#xF10F;&#xF112;&#xF132;&#xF133;&#xF121;&#xF132;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1351
  },
  {
    "role": "code",
    "lines": [
      "= (false) | cos_and_harness (false) (true);"
    ],
    "preprocessed": "= (false) | cos_and_harness (false) (true);",
    "code": "2113220331232111110001322033221332233",
    "parse": [
      "=",
      [
        "false"
      ],
      [
        -1,
        "cos_and_harness",
        [
          "false"
        ],
        [
          "true"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF133;&#xF121;&#xF101;&#xF143;&#xF123;&#xF10F;&#xF112;&#xF132;&#xF133;&#xF121;&#xF132;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1352
  },
  {
    "role": "code",
    "lines": [
      "= (false) | cos_and_harness (true) (false);"
    ],
    "preprocessed": "= (false) | cos_and_harness (true) (false);",
    "code": "2113220331232111110001322133220332233",
    "parse": [
      "=",
      [
        "false"
      ],
      [
        -1,
        "cos_and_harness",
        [
          "true"
        ],
        [
          "false"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF133;&#xF121;&#xF101;&#xF143;&#xF123;&#xF10F;&#xF112;&#xF132;&#xF134;&#xF121;&#xF132;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1353
  },
  {
    "role": "code",
    "lines": [
      "= (true) | cos_and_harness (true) (true);"
    ],
    "preprocessed": "= (true) | cos_and_harness (true) (true);",
    "code": "2113221331232111110001322133221332233",
    "parse": [
      "=",
      [
        "true"
      ],
      [
        -1,
        "cos_and_harness",
        [
          "true"
        ],
        [
          "true"
        ]
      ]
    ],
    "spider": "&#xF136;&#xF132;&#xF134;&#xF121;&#xF101;&#xF143;&#xF123;&#xF10F;&#xF112;&#xF132;&#xF134;&#xF121;&#xF132;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1354
  },
  {
    "role": "comment",
    "lines": [
      "# this code is more awkward than it needs to be -",
      "# should make circuits mutable"
    ],
    "stanza": 1355
  },
  {
    "role": "file",
    "lines": [
      "== COS_CommentBase3 =="
    ],
    "stanza": 1356
  },
  {
    "role": "comment",
    "lines": [
      "# The following parts of the message start",
      "# to introduce some self-reference into the message"
    ],
    "section_description": "end of part 3, start of part 4",
    "section_category": "NOTE",
    "section_index": 51,
    "stanza": 1357
  },
  {
    "role": "code",
    "lines": [
      "intro part4;"
    ],
    "preprocessed": "intro part4;",
    "code": "2100103211111001032233",
    "parse": [
      "intro",
      "part4"
    ],
    "spider": "&#xF123;&#xF113;&#xF123;&#xF10F;&#xF113;&#xF132;&#xF143;&#xF121;",
    "stanza": 1358
  },
  {
    "role": "file",
    "lines": [
      "== COS_Message =="
    ],
    "stanza": 1359
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "a mechanism for referring to parts of the message",
    "section_category": "SELF",
    "section_index": 52,
    "stanza": 1360
  },
  {
    "role": "comment",
    "lines": [
      "# Many choices for how to do this.",
      "# Could do it without special machinery by using the",
      "# standard A-B trick for giving e.g. a Turing machine",
      "# access to its own description.",
      "# Instead, will simply introduce a \"primer\" function",
      "# that gives access to every statement made so far",
      "# (question: should future statements be included?",
      "# tentatively assume YES: will simplify",
      "# discussion of creating modified copies of the",
      "# complete message)."
    ],
    "stanza": 1361
  },
  {
    "role": "comment",
    "lines": [
      "# For now, assume primer is a list of statements,",
      "# with each statement being a list in the same",
      "# form as \"translate\" functions expect.",
      "# This means that there is, for now, no",
      "# distinction between unary or binary,",
      "# and the \"/\" structure is expanded."
    ],
    "stanza": 1362
  },
  {
    "role": "code",
    "lines": [
      "intro primer;"
    ],
    "preprocessed": "intro primer;",
    "code": "2100103210001132233",
    "parse": [
      "intro",
      "primer"
    ],
    "spider": "&#xF123;&#xF113;&#xF124;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 1363
  },
  {
    "role": "comment",
    "lines": [
      "# this line is referred to later - change/move carefully"
    ],
    "stanza": 1364
  },
  {
    "role": "code",
    "lines": [
      "equal (list-ref (primer) 0) (vector intro unary);"
    ],
    "preprocessed": "equal (list-ref (primer) 0) (vector intro unary);",
    "code": "210003221001011322100011332033221000032100103211111111332233",
    "parse": [
      "equal",
      [
        "list-ref",
        [
          "primer"
        ],
        "0"
      ],
      [
        "vector",
        "intro",
        "unary"
      ]
    ],
    "spider": "&#xF13B;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF124;&#xF114;&#xF121;&#xF133;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF113;&#xF131;&#xF120;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1365
  },
  {
    "role": "code",
    "lines": [
      "equal (list-ref (primer) 1) (vector intro is:int);"
    ],
    "preprocessed": "equal (list-ref (primer) 1) (vector intro is:int);",
    "code": "2100032210010113221000113321332210000321001032101000332233",
    "parse": [
      "equal",
      [
        "list-ref",
        [
          "primer"
        ],
        "1"
      ],
      [
        "vector",
        "intro",
        "is:int"
      ]
    ],
    "spider": "&#xF13B;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF124;&#xF114;&#xF121;&#xF134;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF113;&#xF124;&#xF119;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1366
  },
  {
    "role": "code",
    "lines": [
      "equal (list-ref (primer) 2) (vector is:int (vector unary 0));"
    ],
    "preprocessed": "equal (list-ref (primer) 2) (vector is:int (vector unary 0));",
    "code": "21000322100101132210001133210332210000321010003221000032111111113203332233",
    "parse": [
      "equal",
      [
        "list-ref",
        [
          "primer"
        ],
        "2"
      ],
      [
        "vector",
        "is:int",
        [
          "vector",
          "unary",
          "0"
        ]
      ]
    ],
    "spider": "&#xF13B;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF124;&#xF114;&#xF121;&#xF135;&#xF121;&#xF132;&#xF123;&#xF111;&#xF124;&#xF119;&#xF132;&#xF123;&#xF111;&#xF131;&#xF120;&#xF133;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1367
  },
  {
    "role": "code",
    "lines": [
      "equal (list-ref (primer) 3) (vector is:int (vector unary 1 0));"
    ],
    "preprocessed": "equal (list-ref (primer) 3) (vector is:int (vector unary 1 0));",
    "code": "21000322100101132210001133211332210000321010003221000032111111113213203332233",
    "parse": [
      "equal",
      [
        "list-ref",
        [
          "primer"
        ],
        "3"
      ],
      [
        "vector",
        "is:int",
        [
          "vector",
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "spider": "&#xF13B;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF124;&#xF114;&#xF121;&#xF136;&#xF121;&#xF132;&#xF123;&#xF111;&#xF124;&#xF119;&#xF132;&#xF123;&#xF111;&#xF131;&#xF120;&#xF134;&#xF133;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1368
  },
  {
    "role": "code",
    "lines": [
      "assign idx (list-find (primer) (vector intro primer) (? x 0))",
      "    (equal (list-ref (primer) (+ (idx) 1))",
      "           (vector equal",
      "               (vector list-ref (vector primer) 0)",
      "               (vector vector intro unary)));"
    ],
    "preprocessed": "assign idx (list-find (primer) (vector intro primer) (? x 0))\n    (equal (list-ref (primer) (+ (idx) 1))\n           (vector equal\n               (vector list-ref (vector primer) 0)\n               (vector vector intro unary)));",
    "code": "2111032101010032210101013221000113322100003210010321000113322110032100111320333221000322100101132210001133221010322101010033213332210000321000322100003210010113221000032100011332033221000032100003210010321111111133332233",
    "parse": [
      "assign",
      "idx",
      [
        "list-find",
        [
          "primer"
        ],
        [
          "vector",
          "intro",
          "primer"
        ],
        [
          "?",
          "x",
          "0"
        ]
      ],
      [
        "equal",
        [
          "list-ref",
          [
            "primer"
          ],
          [
            "+",
            [
              "idx"
            ],
            "1"
          ]
        ],
        [
          "vector",
          "equal",
          [
            "vector",
            "list-ref",
            [
              "vector",
              "primer"
            ],
            "0"
          ],
          [
            "vector",
            "vector",
            "intro",
            "unary"
          ]
        ]
      ]
    ],
    "spider": "&#xF141;&#xF127;&#xF115;&#xF132;&#xF127;&#xF116;&#xF132;&#xF124;&#xF114;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF113;&#xF124;&#xF114;&#xF121;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF133;&#xF121;&#xF121;&#xF132;&#xF13B;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF124;&#xF114;&#xF121;&#xF132;&#xF13D;&#xF132;&#xF127;&#xF115;&#xF121;&#xF134;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF13B;&#xF132;&#xF123;&#xF111;&#xF126;&#xF11C;&#xF132;&#xF123;&#xF111;&#xF124;&#xF114;&#xF121;&#xF133;&#xF121;&#xF132;&#xF123;&#xF111;&#xF123;&#xF111;&#xF123;&#xF113;&#xF131;&#xF120;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1369
  },
  {
    "role": "comment",
    "lines": [
      "# Now, we could return to the MUD, simulate an agent A",
      "# transferring a copy of the primer to another agent B,",
      "# and then show B making a modified copy of that primer",
      "# and passing it back to A."
    ],
    "stanza": 1370
  },
  {
    "role": "comment",
    "lines": [
      "# We could also show agents experimenting with the",
      "# primer in various ways."
    ],
    "stanza": 1371
  },
  {
    "role": "file",
    "lines": [
      "== COS_MARK =="
    ],
    "stanza": 1372
  },
  {
    "role": "comment",
    "lines": [
      "# Message is pretty solid up to this point.",
      "# For testing purposes, useful to save state here to disk,",
      "# command: DISK-SAVE base"
    ],
    "stanza": 1373
  },
  {
    "role": "file",
    "lines": [
      "== COS_JavaPrep =="
    ],
    "stanza": 1374
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "some preparatory work for integrating with Java code",
    "section_category": "JAVA",
    "section_index": 53,
    "stanza": 1375
  },
  {
    "role": "code",
    "lines": [
      "class Object ()",
      "       (method add-one (lambda (x) (+ (x) 1)))",
      "       (method unknown (lambda (x) (x)))",
      "       (method <init>-V (self))",
      "       (method <init> (self))",
      "       (method classname Object)",
      "       (method equals-Object-Z (this ==))",
      "       (method equals (self equals-Object-Z))",
      "       (method act (true))",
      "       (method isobj (true));"
    ],
    "preprocessed": "class Object ()\n       (method add-one (lambda (x) (+ (x) 1)))\n       (method unknown (lambda (x) (x)))\n       (method <init>-V (self))\n       (method <init> (self))\n       (method classname Object)\n       (method equals-Object-Z (this ==))\n       (method equals (self equals-Object-Z))\n       (method act (true))\n       (method isobj (true));",
    "code": "2111000113211111001132322100111113211111010032211010322100111332210103221001113321333322100111113211101011322110103221001113322100111333322100111113211111010132210100100333221001111132111110110322101001003332210011111321110101032111110011332210011111321111101113221110001032111011003332210011111321111110003221010010032111110111333221001111132111111001322133322100111113211111101032213332233",
    "parse": [
      "class",
      "Object",
      [],
      [
        "method",
        "add-one",
        [
          "lambda",
          [
            "x"
          ],
          [
            "+",
            [
              "x"
            ],
            "1"
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            "x"
          ]
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self"
        ]
      ],
      [
        "method",
        "classname",
        "Object"
      ],
      [
        "method",
        "equals-Object-Z",
        [
          "this",
          "=="
        ]
      ],
      [
        "method",
        "equals",
        [
          "self",
          "equals-Object-Z"
        ]
      ],
      [
        "method",
        "act",
        [
          "true"
        ]
      ],
      [
        "method",
        "isobj",
        [
          "true"
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF123;&#xF10F;&#xF114;&#xF143;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF115;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF13D;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11C;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF116;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF117;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11B;&#xF123;&#xF10F;&#xF114;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF118;&#xF132;&#xF130;&#xF113;&#xF130;&#xF11D;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF119;&#xF132;&#xF12C;&#xF115;&#xF123;&#xF10F;&#xF118;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF11A;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF11B;&#xF132;&#xF134;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1376
  },
  {
    "role": "code",
    "lines": [
      "define java-object | Object;"
    ],
    "preprocessed": "define java-object | Object;",
    "code": "21101321111110113123211111001132233",
    "parse": [
      "define",
      "java-object",
      [
        -1,
        "Object"
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF10F;&#xF11C;&#xF101;&#xF143;&#xF123;&#xF10F;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 1377
  },
  {
    "role": "code",
    "lines": [
      "define act | ? x | true;"
    ],
    "preprocessed": "define act | ? x | true;",
    "code": "21101321111110013123211003210011131232132233",
    "parse": [
      "define",
      "act",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "true"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF10F;&#xF11A;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 1378
  },
  {
    "role": "comment",
    "lines": [
      "#(class java-string ()",
      "#       (field super (java-object new))",
      "#       (method classname String)",
      "#       (method unknown (lambda (x) (super (x)))));"
    ],
    "stanza": 1379
  },
  {
    "role": "comment",
    "lines": [
      "# inconsistency of various kinds of equality throughout message",
      "# needs to be cleaned up"
    ],
    "stanza": 1380
  },
  {
    "role": "code",
    "lines": [
      "class Integer ()",
      "       (field super (java-object new))",
      "       (field value (cell new 0))",
      "       (method <init> (self))",
      "       (method <init>-V (self))",
      "       (method <init>-I-V (lambda (v) ",
      "                (begin ",
      "                  (value set (v))",
      "                  (self))))",
      "       (method intValue-V (value get))",
      "       (method intValue (self intValue-V))",
      "       (method equals-Object-Z (lambda (o) (if (= (o classname) Integer)",
      "                           (= (value get) (o value get))",
      "                           (false))))",
      "       (method equals (self equals-Object-Z))",
      "       (method get (value get))",
      "       (method set (lambda(x)",
      "             (value set",
      "                (if (number? | x)",
      "                (x)",
      "                (x intValue)))))",
      "       (method classname Integer)",
      "       (method unknown (lambda (x) (super (x))));"
    ],
    "preprocessed": "class Integer ()\n       (field super (java-object new))\n       (field value (cell new 0))\n       (method <init> (self))\n       (method <init>-V (self))\n       (method <init>-I-V (lambda (v) \n                (begin \n                  (value set (v))\n                  (self))))\n       (method intValue-V (value get))\n       (method intValue (self intValue-V))\n       (method equals-Object-Z (lambda (o) (if (= (o classname) Integer)\n                           (= (value get) (o value get))\n                           (false))))\n       (method equals (self equals-Object-Z))\n       (method get (value get))\n       (method set (lambda(x)\n             (value set\n                (if (number? | x)\n                (x)\n                (x intValue)))))\n       (method classname Integer)\n       (method unknown (lambda (x) (super (x))));",
    "code
    "parse": [
      "class",
      "Integer",
      [],
      [
        "field",
        "super",
        [
          "java-object",
          "new"
        ]
      ],
      [
        "field",
        "value",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>-I-V",
        [
          "lambda",
          [
            "v"
          ],
          [
            "begin",
            [
              "value",
              "set",
              [
                "v"
              ]
            ],
            [
              "self"
            ]
          ]
        ]
      ],
      [
        "method",
        "intValue-V",
        [
          "value",
          "get"
        ]
      ],
      [
        "method",
        "intValue",
        [
          "self",
          "intValue-V"
        ]
      ],
      [
        "method",
        "equals-Object-Z",
        [
          "lambda",
          [
            "o"
          ],
          [
            "if",
            [
              "=",
              [
                "o",
                "classname"
              ],
              "Integer"
            ],
            [
              "=",
              [
                "value",
                "get"
              ],
              [
                "o",
                "value",
                "get"
              ]
            ],
            [
              "false"
            ]
          ]
        ]
      ],
      [
        "method",
        "equals",
        [
          "self",
          "equals-Object-Z"
        ]
      ],
      [
        "method",
        "get",
        [
          "value",
          "get"
        ]
      ],
      [
        "method",
        "set",
        [
          [
            "lambdax"
          ],
          [
            "value",
            "set",
            [
              "if",
              [
                "number?",
                [
                  -1,
                  "x"
                ]
              ],
              [
                "x"
              ],
              [
                "x",
                "intValue"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "classname",
        "Integer"
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            "super",
            [
              "x"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF123;&#xF10F;&#xF11D;&#xF143;&#xF132;&#xF130;&#xF119;&#xF12F;&#xF117;&#xF132;&#xF123;&#xF10F;&#xF11C;&#xF12F;&#xF114;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF12C;&#xF11C;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF117;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF116;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF11E;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF11D;&#xF121;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF12C;&#xF11C;&#xF131;&#xF117;&#xF132;&#xF124;&#xF11D;&#xF121;&#xF121;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF11F;&#xF132;&#xF12C;&#xF11C;&#xF131;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF120;&#xF132;&#xF12C;&#xF115;&#xF123;&#xF10F;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF118;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF100;&#xF111;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF124;&#xF100;&#xF111;&#xF130;&#xF11B;&#xF121;&#xF123;&#xF10F;&#xF11D;&#xF121;&#xF132;&#xF136;&#xF132;&#xF12C;&#xF11C;&#xF131;&#xF116;&#xF121;&#xF132;&#xF124;&#xF100;&#xF111;&#xF12C;&#xF11C;&#xF131;&#xF116;&#xF121;&#xF121;&#xF132;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF119;&#xF132;&#xF12C;&#xF115;&#xF123;&#xF10F;&#xF118;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF131;&#xF116;&#xF132;&#xF12C;&#xF11C;&#xF131;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF131;&#xF117;&#xF132;&#xF132;&#xF124;&#xF100;&#xF112;&#xF121;&#xF132;&#xF12C;&#xF11C;&#xF131;&#xF117;&#xF132;&#xF142;&#xF132;&#xF123;&#xF119;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF118;&#xF123;&#xF10F;&#xF120;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11B;&#xF123;&#xF10F;&#xF11D;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11C;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12F;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1381
  },
  {
    "role": "comment",
    "lines": [
      "# string is basically the same as an integer"
    ],
    "stanza": 1382
  },
  {
    "role": "code",
    "lines": [
      "class String ()",
      "       (field super (java-object new))",
      "       (field value (cell new 0))",
      "       (method <init> (self))",
      "       (method <init>-V (self))",
      "       (method <init>-String-V (lambda (v) ",
      "                 (begin ",
      "                   (value set (v value get))",
      "                   (self))))",
      "       (method int-init (lambda (x) ",
      "              (begin ",
      "                (value set (x))",
      "                (self))))",
      "       (method intValue-V (value get))",
      "       (method intValue (self intValue-V))",
      "       (method get (value get))",
      "       (method set (lambda(x)",
      "             (value set",
      "                (if (number? | x)",
      "                (x)",
      "                (x intValue)))))",
      "       (method equals-Object-Z (lambda (o) (if (= (o classname) String)",
      "                           (= (value get) (o value get))",
      "                           (false))))",
      "       (method equals (self equals-Object-Z))",
      "       (method classname String)",
      "       (method unknown (lambda (x) (super (x))));"
    ],
    "preprocessed": "class String ()\n       (field super (java-object new))\n       (field value (cell new 0))\n       (method <init> (self))\n       (method <init>-V (self))\n       (method <init>-String-V (lambda (v) \n                 (begin \n                   (value set (v value get))\n                   (self))))\n       (method int-init (lambda (x) \n              (begin \n                (value set (x))\n                (self))))\n       (method intValue-V (value get))\n       (method intValue (self intValue-V))\n       (method get (value get))\n       (method set (lambda(x)\n             (value set\n                (if (number? | x)\n                (x)\n                (x intValue)))))\n       (method equals-Object-Z (lambda (o) (if (= (o classname) String)\n                           (= (value get) (o value get))\n                           (false))))\n       (method equals (self equals-Object-Z))\n       (method classname String)\n       (method unknown (lambda (x) (super (x))));",
    "code
    "parse": [
      "class",
      "String",
      [],
      [
        "field",
        "super",
        [
          "java-object",
          "new"
        ]
      ],
      [
        "field",
        "value",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>-String-V",
        [
          "lambda",
          [
            "v"
          ],
          [
            "begin",
            [
              "value",
              "set",
              [
                "v",
                "value",
                "get"
              ]
            ],
            [
              "self"
            ]
          ]
        ]
      ],
      [
        "method",
        "int-init",
        [
          "lambda",
          [
            "x"
          ],
          [
            "begin",
            [
              "value",
              "set",
              [
                "x"
              ]
            ],
            [
              "self"
            ]
          ]
        ]
      ],
      [
        "method",
        "intValue-V",
        [
          "value",
          "get"
        ]
      ],
      [
        "method",
        "intValue",
        [
          "self",
          "intValue-V"
        ]
      ],
      [
        "method",
        "get",
        [
          "value",
          "get"
        ]
      ],
      [
        "method",
        "set",
        [
          [
            "lambdax"
          ],
          [
            "value",
            "set",
            [
              "if",
              [
                "number?",
                [
                  -1,
                  "x"
                ]
              ],
              [
                "x"
              ],
              [
                "x",
                "intValue"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "equals-Object-Z",
        [
          "lambda",
          [
            "o"
          ],
          [
            "if",
            [
              "=",
              [
                "o",
                "classname"
              ],
              "String"
            ],
            [
              "=",
              [
                "value",
                "get"
              ],
              [
                "o",
                "value",
                "get"
              ]
            ],
            [
              "false"
            ]
          ]
        ]
      ],
      [
        "method",
        "equals",
        [
          "self",
          "equals-Object-Z"
        ]
      ],
      [
        "method",
        "classname",
        "String"
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            "super",
            [
              "x"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF124;&#xF100;&#xF113;&#xF143;&#xF132;&#xF130;&#xF119;&#xF12F;&#xF117;&#xF132;&#xF123;&#xF10F;&#xF11C;&#xF12F;&#xF114;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF12C;&#xF11C;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF117;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF116;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF100;&#xF114;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF11D;&#xF121;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF12C;&#xF11C;&#xF131;&#xF117;&#xF132;&#xF124;&#xF11D;&#xF12C;&#xF11C;&#xF131;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF100;&#xF115;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF12C;&#xF11C;&#xF131;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF11F;&#xF132;&#xF12C;&#xF11C;&#xF131;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF120;&#xF132;&#xF12C;&#xF115;&#xF123;&#xF10F;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF131;&#xF116;&#xF132;&#xF12C;&#xF11C;&#xF131;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF131;&#xF117;&#xF132;&#xF132;&#xF124;&#xF100;&#xF112;&#xF121;&#xF132;&#xF12C;&#xF11C;&#xF131;&#xF117;&#xF132;&#xF142;&#xF132;&#xF123;&#xF119;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF118;&#xF123;&#xF10F;&#xF120;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF118;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF100;&#xF111;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF124;&#xF100;&#xF111;&#xF130;&#xF11B;&#xF121;&#xF124;&#xF100;&#xF113;&#xF121;&#xF132;&#xF136;&#xF132;&#xF12C;&#xF11C;&#xF131;&#xF116;&#xF121;&#xF132;&#xF124;&#xF100;&#xF111;&#xF12C;&#xF11C;&#xF131;&#xF116;&#xF121;&#xF121;&#xF132;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF119;&#xF132;&#xF12C;&#xF115;&#xF123;&#xF10F;&#xF118;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11B;&#xF124;&#xF100;&#xF113;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11C;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12F;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1383
  },
  {
    "role": "comment",
    "lines": [
      "# will need to install class hierarchy, just hardcode a few things for now"
    ],
    "stanza": 1384
  },
  {
    "role": "code",
    "lines": [
      "define java",
      "  (? x | ? y ",
      "     (cond ((= (y) String) (String))",
      "       ((= (y) Object) (java-object))",
      "       ((= (y) Integer) (Integer))",
      "       (java-object)));"
    ],
    "preprocessed": "define java\n  (? x | ? y \n     (cond ((= (y) String) (String))\n       ((= (y) Object) (java-object))\n       ((= (y) Integer) (Integer))\n       (java-object)));",
    "code": "2110132100000010132211003210011131232110032110011322110000003222113221100113321000000010332210000000103332221132211001133211111001133221111110113332221132211001133211111110033221111111003332211111101133332233",
    "parse": [
      "define",
      "java",
      [
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            "cond",
            [
              [
                "=",
                [
                  "y"
                ],
                "String"
              ],
              [
                "String"
              ]
            ],
            [
              [
                "=",
                [
                  "y"
                ],
                "Object"
              ],
              [
                "java-object"
              ]
            ],
            [
              [
                "=",
                [
                  "y"
                ],
                "Integer"
              ],
              [
                "Integer"
              ]
            ],
            [
              "java-object"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF100;&#xF116;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF125;&#xF114;&#xF132;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF125;&#xF114;&#xF121;&#xF124;&#xF100;&#xF113;&#xF121;&#xF132;&#xF124;&#xF100;&#xF113;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF125;&#xF114;&#xF121;&#xF123;&#xF10F;&#xF114;&#xF121;&#xF132;&#xF123;&#xF10F;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF125;&#xF114;&#xF121;&#xF123;&#xF10F;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF10F;&#xF11D;&#xF121;&#xF121;&#xF132;&#xF123;&#xF10F;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1385
  },
  {
    "role": "code",
    "lines": [
      "(java util String) new isobj;"
    ],
    "preprocessed": "(java util String) new isobj;",
    "code": "221000000101321000000110321000000010332110100113211111101032233",
    "parse": [
      [
        "java",
        "util",
        "String"
      ],
      "new",
      "isobj"
    ],
    "spider": "&#xF132;&#xF124;&#xF100;&#xF116;&#xF124;&#xF100;&#xF117;&#xF124;&#xF100;&#xF113;&#xF121;&#xF12F;&#xF114;&#xF123;&#xF10F;&#xF11B;&#xF132;&#xF143;&#xF121;",
    "stanza": 1386
  },
  {
    "role": "code",
    "lines": [
      "= ((java util String) new add-one 15) 16;"
    ],
    "preprocessed": "= ((java util String) new add-one 15) 16;",
    "code": "2113222100000010132100000011032100000001033211010011321111101003211113321000032233",
    "parse": [
      "=",
      [
        [
          "java",
          "util",
          "String"
        ],
        "new",
        "add-one",
        "15"
      ],
      "16"
    ],
    "spider": "&#xF136;&#xF132;&#xF132;&#xF124;&#xF100;&#xF116;&#xF124;&#xF100;&#xF117;&#xF124;&#xF100;&#xF113;&#xF121;&#xF12F;&#xF114;&#xF123;&#xF10F;&#xF115;&#xF142;&#xF121;&#xF123;&#xF111;&#xF132;&#xF143;&#xF121;",
    "stanza": 1387
  },
  {
    "role": "code",
    "lines": [
      "class java-numeric ()",
      "       (field super (java-object new))",
      "       (method unknown (lambda (x) (super (x))))",
      "       (field java-content (cell new 0))",
      "       (method get (java-content get))",
      "       (method init (lambda (v)",
      "              (begin",
      "            (self set (v))",
      "            (self))))",
      "       (method set (lambda (v) (java-content set (v))));"
    ],
    "preprocessed": "class java-numeric ()\n       (field super (java-object new))\n       (method unknown (lambda (x) (super (x))))\n       (field java-content (cell new 0))\n       (method get (java-content get))\n       (method init (lambda (v)\n              (begin\n            (self set (v))\n            (self))))\n       (method set (lambda (v) (java-content set (v))));",
    "code": "211100011321000000111323221110100032110101103221111110113211010011333221001111132111010113221101032210011133221101011032210011133333221110100032100000100032211110010321101001132033322100111113211110101322100000100032111101013332210011111321000001001322110103221011003322100011003221010010032111101103221011003332210100100333332210011111321111011032211010322101100332210000010003211110110322101100333332233",
    "parse": [
      "class",
      "java-numeric",
      [],
      [
        "field",
        "super",
        [
          "java-object",
          "new"
        ]
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            "super",
            [
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "java-content",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "get",
        [
          "java-content",
          "get"
        ]
      ],
      [
        "method",
        "init",
        [
          "lambda",
          [
            "v"
          ],
          [
            "begin",
            [
              "self",
              "set",
              [
                "v"
              ]
            ],
            [
              "self"
            ]
          ]
        ]
      ],
      [
        "method",
        "set",
        [
          "lambda",
          [
            "v"
          ],
          [
            "java-content",
            "set",
            [
              "v"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF124;&#xF100;&#xF118;&#xF143;&#xF132;&#xF130;&#xF119;&#xF12F;&#xF117;&#xF132;&#xF123;&#xF10F;&#xF11C;&#xF12F;&#xF114;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11C;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12F;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF124;&#xF100;&#xF119;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF131;&#xF116;&#xF132;&#xF124;&#xF100;&#xF119;&#xF131;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF100;&#xF11A;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF11D;&#xF121;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF12C;&#xF115;&#xF131;&#xF117;&#xF132;&#xF124;&#xF11D;&#xF121;&#xF121;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF131;&#xF117;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF11D;&#xF121;&#xF132;&#xF124;&#xF100;&#xF119;&#xF131;&#xF117;&#xF132;&#xF124;&#xF11D;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1388
  },
  {
    "role": "code",
    "lines": [
      "define byte (java-numeric);"
    ],
    "preprocessed": "define byte (java-numeric);",
    "code": "211013210000010103221000000111332233",
    "parse": [
      "define",
      "byte",
      [
        "java-numeric"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF100;&#xF11B;&#xF132;&#xF124;&#xF100;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1389
  },
  {
    "role": "code",
    "lines": [
      "define char (java-numeric);"
    ],
    "preprocessed": "define char (java-numeric);",
    "code": "211013210000010113221000000111332233",
    "parse": [
      "define",
      "char",
      [
        "java-numeric"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF100;&#xF11C;&#xF132;&#xF124;&#xF100;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1390
  },
  {
    "role": "code",
    "lines": [
      "define double (java-numeric);"
    ],
    "preprocessed": "define double (java-numeric);",
    "code": "211013210000011003221000000111332233",
    "parse": [
      "define",
      "double",
      [
        "java-numeric"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF100;&#xF11D;&#xF132;&#xF124;&#xF100;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1391
  },
  {
    "role": "code",
    "lines": [
      "define float (java-numeric);"
    ],
    "preprocessed": "define float (java-numeric);",
    "code": "211013210000011013221000000111332233",
    "parse": [
      "define",
      "float",
      [
        "java-numeric"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF100;&#xF11E;&#xF132;&#xF124;&#xF100;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1392
  },
  {
    "role": "code",
    "lines": [
      "define int (java-numeric);"
    ],
    "preprocessed": "define int (java-numeric);",
    "code": "2110132101110013221000000111332233",
    "parse": [
      "define",
      "int",
      [
        "java-numeric"
      ]
    ],
    "spider": "&#xF140;&#xF12D;&#xF11A;&#xF132;&#xF124;&#xF100;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1393
  },
  {
    "role": "code",
    "lines": [
      "define long (java-numeric);"
    ],
    "preprocessed": "define long (java-numeric);",
    "code": "211013210000011103221000000111332233",
    "parse": [
      "define",
      "long",
      [
        "java-numeric"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF100;&#xF11F;&#xF132;&#xF124;&#xF100;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1394
  },
  {
    "role": "code",
    "lines": [
      "define short (java-numeric);"
    ],
    "preprocessed": "define short (java-numeric);",
    "code": "211013210000011113221000000111332233",
    "parse": [
      "define",
      "short",
      [
        "java-numeric"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF100;&#xF120;&#xF132;&#xF124;&#xF100;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1395
  },
  {
    "role": "code",
    "lines": [
      "define boolean (java-numeric);"
    ],
    "preprocessed": "define boolean (java-numeric);",
    "code": "211013210000100003221000000111332233",
    "parse": [
      "define",
      "boolean",
      [
        "java-numeric"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF101;&#xF111;&#xF132;&#xF124;&#xF100;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1396
  },
  {
    "role": "code",
    "lines": [
      "define void (java-numeric);"
    ],
    "preprocessed": "define void (java-numeric);",
    "code": "211013210000100013221000000111332233",
    "parse": [
      "define",
      "void",
      [
        "java-numeric"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF101;&#xF112;&#xF132;&#xF124;&#xF100;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1397
  },
  {
    "role": "code",
    "lines": [
      "define java-test1 (int new);"
    ],
    "preprocessed": "define java-test1 (int new);",
    "code": "21101321000010010322101110013211010011332233",
    "parse": [
      "define",
      "java-test1",
      [
        "int",
        "new"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF101;&#xF113;&#xF132;&#xF12D;&#xF11A;&#xF12F;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1398
  },
  {
    "role": "code",
    "lines": [
      "java-test1 set 15;"
    ],
    "preprocessed": "java-test1 set 15;",
    "code": "21000010010321111011032111132233",
    "parse": [
      "java-test1",
      "set",
      "15"
    ],
    "spider": "&#xF124;&#xF101;&#xF113;&#xF131;&#xF117;&#xF142;&#xF132;&#xF143;&#xF121;",
    "stanza": 1399
  },
  {
    "role": "code",
    "lines": [
      "= 15 (java-test1 get);"
    ],
    "preprocessed": "= 15 (java-test1 get);",
    "code": "21132111132210000100103211110101332233",
    "parse": [
      "=",
      "15",
      [
        "java-test1",
        "get"
      ]
    ],
    "spider": "&#xF136;&#xF142;&#xF132;&#xF124;&#xF101;&#xF113;&#xF131;&#xF116;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1400
  },
  {
    "role": "code",
    "lines": [
      "define java-test2 (int new init 17);"
    ],
    "preprocessed": "define java-test2 (int new init 17);",
    "code": "211013210000100113221011100132110100113210000010013210001332233",
    "parse": [
      "define",
      "java-test2",
      [
        "int",
        "new",
        "init",
        "17"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF101;&#xF114;&#xF132;&#xF12D;&#xF11A;&#xF12F;&#xF114;&#xF124;&#xF100;&#xF11A;&#xF123;&#xF112;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1401
  },
  {
    "role": "code",
    "lines": [
      "= 17 (java-test2 get);"
    ],
    "preprocessed": "= 17 (java-test2 get);",
    "code": "211321000132210000100113211110101332233",
    "parse": [
      "=",
      "17",
      [
        "java-test2",
        "get"
      ]
    ],
    "spider": "&#xF136;&#xF123;&#xF112;&#xF132;&#xF124;&#xF101;&#xF114;&#xF131;&#xF116;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1402
  },
  {
    "role": "code",
    "lines": [
      "define state-machine-test1",
      "  (? x",
      "     (cond ((= (x) 1) 20)",
      "       ((= (x) 2) 40)",
      "       ((= (x) 3) 60)",
      "       0));"
    ],
    "preprocessed": "define state-machine-test1\n  (? x\n     (cond ((= (x) 1) 20)\n       ((= (x) 2) 40)\n       ((= (x) 3) 60)\n       0));",
    "code": "211013210000101003221100321001113221100000032221132210011133213321010033222113221001113321033210100033222113221001113321133211110033203332233",
    "parse": [
      "define",
      "state-machine-test1",
      [
        "?",
        "x",
        [
          "cond",
          [
            [
              "=",
              [
                "x"
              ],
              "1"
            ],
            "20"
          ],
          [
            [
              "=",
              [
                "x"
              ],
              "2"
            ],
            "40"
          ],
          [
            [
              "=",
              [
                "x"
              ],
              "3"
            ],
            "60"
          ],
          "0"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF101;&#xF115;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF132;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF123;&#xF115;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF124;&#xF119;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF125;&#xF11D;&#xF121;&#xF133;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1403
  },
  {
    "role": "code",
    "lines": [
      "= (state-machine-test1 3) 60;"
    ],
    "preprocessed": "= (state-machine-test1 3) 60;",
    "code": "2113221000010100321133211110032233",
    "parse": [
      "=",
      [
        "state-machine-test1",
        "3"
      ],
      "60"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF101;&#xF115;&#xF136;&#xF121;&#xF125;&#xF11D;&#xF132;&#xF143;&#xF121;",
    "stanza": 1404
  },
  {
    "role": "comment",
    "lines": [
      "# really ought to go back and be clear about eager/laziness issues"
    ],
    "stanza": 1405
  },
  {
    "role": "code",
    "lines": [
      "define state-machine-test2",
      "  (? x",
      "     (cond ((= (x) 1) (java-test1 set 20))",
      "       ((= (x) 2) (java-test1 set 40))",
      "       ((= (x) 3) (java-test1 set 60))",
      "       0));"
    ],
    "preprocessed": "define state-machine-test2\n  (? x\n     (cond ((= (x) 1) (java-test1 set 20))\n       ((= (x) 2) (java-test1 set 40))\n       ((= (x) 3) (java-test1 set 60))\n       0));",
    "code": "211013210000101013221100321001113221100000032221132210011133213322100001001032111101103210100333222113221001113321033221000010010321111011032101000333222113221001113321133221000010010321111011032111100333203332233",
    "parse": [
      "define",
      "state-machine-test2",
      [
        "?",
        "x",
        [
          "cond",
          [
            [
              "=",
              [
                "x"
              ],
              "1"
            ],
            [
              "java-test1",
              "set",
              "20"
            ]
          ],
          [
            [
              "=",
              [
                "x"
              ],
              "2"
            ],
            [
              "java-test1",
              "set",
              "40"
            ]
          ],
          [
            [
              "=",
              [
                "x"
              ],
              "3"
            ],
            [
              "java-test1",
              "set",
              "60"
            ]
          ],
          "0"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF101;&#xF116;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF132;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF101;&#xF113;&#xF131;&#xF117;&#xF123;&#xF115;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF101;&#xF113;&#xF131;&#xF117;&#xF124;&#xF119;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF101;&#xF113;&#xF131;&#xF117;&#xF125;&#xF11D;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1406
  },
  {
    "role": "code",
    "lines": [
      "state-machine-test2 2;"
    ],
    "preprocessed": "state-machine-test2 2;",
    "code": "21000010101321032233",
    "parse": [
      "state-machine-test2",
      "2"
    ],
    "spider": "&#xF124;&#xF101;&#xF116;&#xF135;&#xF132;&#xF143;&#xF121;",
    "stanza": 1407
  },
  {
    "role": "code",
    "lines": [
      "= (java-test1 get) 40;"
    ],
    "preprocessed": "= (java-test1 get) 40;",
    "code": "2113221000010010321111010133210100032233",
    "parse": [
      "=",
      [
        "java-test1",
        "get"
      ],
      "40"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF101;&#xF113;&#xF131;&#xF116;&#xF121;&#xF124;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 1408
  },
  {
    "role": "code",
    "lines": [
      "define compare-object-reference",
      "  (lambda (o1 o2)",
      "    (if (number? | o1)",
      "    (number? | o2)",
      "    (= (o1 unique-id) (o2 unique-id))));"
    ],
    "preprocessed": "define compare-object-reference\n  (lambda (o1 o2)\n    (if (number? | o1)\n    (number? | o2)\n    (= (o1 unique-id) (o2 unique-id))));",
    "code": "21101321000010110322110103221000010111321000011000332211113221100031232100001011133221100031232100001100033221132210000101113211100111332210000110003211100111333332233",
    "parse": [
      "define",
      "compare-object-reference",
      [
        "lambda",
        [
          "o1",
          "o2"
        ],
        [
          "if",
          [
            "number?",
            [
              -1,
              "o1"
            ]
          ],
          [
            "number?",
            [
              -1,
              "o2"
            ]
          ],
          [
            "=",
            [
              "o1",
              "unique-id"
            ],
            [
              "o2",
              "unique-id"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF101;&#xF117;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF101;&#xF118;&#xF124;&#xF101;&#xF119;&#xF121;&#xF132;&#xF142;&#xF132;&#xF123;&#xF119;&#xF101;&#xF143;&#xF124;&#xF101;&#xF118;&#xF121;&#xF132;&#xF123;&#xF119;&#xF101;&#xF143;&#xF124;&#xF101;&#xF119;&#xF121;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF118;&#xF130;&#xF118;&#xF121;&#xF132;&#xF124;&#xF101;&#xF119;&#xF130;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1409
  },
  {
    "role": "code",
    "lines": [
      "define jvm-maker",
      "  (lambda (vars stack pc ret)",
      "    (? op",
      "     (begin",
      "       (pc set (+ (pc get) 1)) |",
      "     cond ((= (op) new)",
      "        (lambda (type)",
      "          (stack-push (stack) ((type) new))))",
      "       ((= (op) dup)",
      "        (stack-push (stack) (stack-peek (stack))))",
      "       ((= (op) checkcast)",
      "        (lambda (t)",
      "          1))",
      "       ((or (= (op) astore) (= (op) istore))",
      "        (lambda (index)",
      "          (vars set (hash-add (vars get) (index) (stack-pop (stack))))))",
      "       ((or (= (op) aload) (= (op) iload))",
      "        (lambda (index)",
      "          (stack-push (stack) (hash-ref (vars get) (index)))))",
      "       ((or (= (op) iconst) (= (op) ldc))",
      "        (lambda (val)",
      "          (stack-push (stack) (val))))",
      "       ((= (op) aconst_null)",
      "        (stack-push (stack) 0))",
      "       ((= (op) instanceof)",
      "        (lambda (t)",
      "          (stack-push ",
      "           (stack)",
      "           (not | number? | (stack-pop | stack) (t new classname)))))",
      "       ((= (op) getfield)",
      "        (lambda (key ignore)",
      "          (stack-push (stack) ((stack-pop (stack)) (key) get))))",
      "       ((= (op) putfield)",
      "        (lambda (key ignore)",
      "          (let ((val (stack-pop (stack))))",
      "        ((stack-pop (stack)) (key) set (val)))))",
      "       ((= (op) imul)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (stack-push (stack)",
      "                (* (v1) (v2))))))",
      "       ((= (op) iadd)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (stack-push (stack)",
      "                (+ (v1) (v2))))))",
      "       ((= (op) isub)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (stack-push (stack)",
      "                (- (v1) (v2))))))",
      "       ((= (op) goto)",
      "        (lambda (x)",
      "          (pc set (x))))",
      "       ((= (op) iflt)",
      "        (lambda (x)",
      "          (if (< (stack-pop (stack)) 0)",
      "          (pc set (x))",
      "          0)))",
      "       ((= (op) ifle)",
      "        (lambda (x)",
      "          (if (< (stack-pop (stack)) 1)",
      "          (pc set (x))",
      "          0)))",
      "       ((= (op) ifgt)",
      "        (lambda (x)",
      "          (if (> (stack-pop (stack)) 0)",
      "          (pc set (x))",
      "          0)))",
      "       ((= (op) ifge)",
      "        (lambda (x)",
      "          (if (>= (stack-pop (stack)) 0)",
      "          (pc set (x))",
      "          0)))",
      "       ((= (op) ifne)",
      "        (lambda (x)",
      "          (if (not (= (stack-pop (stack)) 0))",
      "          (pc set (x))",
      "          0)))",
      "       ((= (op) ifeq)",
      "        (lambda (x)",
      "          (if (= (stack-pop (stack)) 0)",
      "          (pc set (x))",
      "          0)))",
      "       ((= (op) if_icmpne)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (lambda (x)",
      "          (if (not (= (v1) (v2)))",
      "              (pc set (x))",
      "              0)))))",
      "       ((= (op) if_icmpeq)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (lambda (x)",
      "          (if (= (v1) (v2))",
      "              (pc set (x))",
      "              0)))))",
      "       ((= (op) if_acmpne)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (lambda (x)",
      "          (if (not (compare-object-reference (v1) (v2)))",
      "              (pc set (x))",
      "              0)))))",
      "       ((= (op) if_acmpeq)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (lambda (x)",
      "          (if (compare-object-reference (v1) (v2))",
      "              (pc set (x))",
      "              0)))))",
      "       ((= (op) if_icmpge)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (lambda (x)",
      "          (if (>= (v1) (v2))",
      "              (pc set (x))",
      "              0)))))",
      "       ((= (op) if_icmpgt)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (lambda (x)",
      "          (if (> (v1) (v2))",
      "              (pc set (x))",
      "              0)))))",
      "       ((= (op) if_icmple)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (lambda (x)",
      "          (if (<= (v1) (v2))",
      "              (pc set (x))",
      "              0)))))",
      "       ((= (op) if_icmplt)",
      "        (let ((v2 (stack-pop (stack))))",
      "          (let ((v1 (stack-pop (stack))))",
      "        (lambda (x)",
      "          (if (< (v1) (v2))",
      "              (pc set (x))",
      "              0)))))",
      "       ((= (op) ifnull)",
      "        (lambda (x)",
      "          (if (number? | stack-pop (stack))",
      "          (pc set (x))",
      "          0)))",
      "       ((= (op) ifnonnull)",
      "        (lambda (x)",
      "          (if (not (number? | stack-pop (stack)))",
      "          (pc set (x))",
      "          0)))",
      "       ((= (op) return)",
      "        (begin (ret set (hash-ref (vars get) 0))",
      "           (pc set -1)))",
      "       ((= (op) ireturn)",
      "        (begin (ret set (stack-pop (stack)))",
      "           (pc set -1)))",
      "       ((= (op) areturn)",
      "        (begin (ret set (stack-pop (stack)))",
      "           (pc set -1)))",
      "       ((= (op) goto)",
      "        (lambda (target)",
      "          (pc set (target))))",
      "       ((= (op) invokevirtual)",
      "        (lambda (target m n)",
      "          (let ((result (stack-call (stack) (target) (m))))",
      "        (if (= (n) 1)",
      "            (stack-push (stack) (result))",
      "            0))))",
      "       ((= (op) invokeinterface)",
      "        (lambda (target m n ignore)",
      "          (let ((result (stack-call (stack) (target) (m))))",
      "        (if (= (n) 1)",
      "            (stack-push (stack) (result))",
      "            0))))",
      "       ((= (op) invokespecial)",
      "        (lambda (target m n)",
      "          (let ((result (stack-call-special (stack) ",
      "                        (hash-ref (vars get) 0)",
      "                        (target) ",
      "                        (m))))",
      "        (if (= (n) 1)",
      "            (stack-push (stack) (result))",
      "            0))))",
      "       0)));"
    ],
    "preprocessed": "define jvm-maker\n  (lambda (vars stack pc ret)\n    (? op\n     (begin\n       (pc set (+ (pc get) 1)) |\n     cond ((= (op) new)\n        (lambda (type)\n          (stack-push (stack) ((type) new))))\n       ((= (op) dup)\n        (stack-push (stack) (stack-peek (stack))))\n       ((= (op) checkcast)\n        (lambda (t)\n          1))\n       ((or (= (op) astore) (= (op) istore))\n        (lambda (index)\n          (vars set (hash-add (vars get) (index) (stack-pop (stack))))))\n       ((or (= (op) aload) (= (op) iload))\n        (lambda (index)\n          (stack-push (stack) (hash-ref (vars get) (index)))))\n       ((or (= (op) iconst) (= (op) ldc))\n        (lambda (val)\n          (stack-push (stack) (val))))\n       ((= (op) aconst_null)\n        (stack-push (stack) 0))\n       ((= (op) instanceof)\n        (lambda (t)\n          (stack-push \n           (stack)\n           (not | number? | (stack-pop | stack) (t new classname)))))\n       ((= (op) getfield)\n        (lambda (key ignore)\n          (stack-push (stack) ((stack-pop (stack)) (key) get))))\n       ((= (op) putfield)\n        (lambda (key ignore)\n          (let ((val (stack-pop (stack))))\n        ((stack-pop (stack)) (key) set (val)))))\n       ((= (op) imul)\n        (let ((v2 (stack-pop (stack))))\n          (let ((v1 (stack-pop (stack))))\n        (stack-push (stack)\n                (* (v1) (v2))))))\n       ((= (op) iadd)\n        (let ((v2 (stack-pop (stack))))\n          (let ((v1 (stack-pop (stack))))\n        (stack-push (stack)\n                (+ (v1) (v2))))))\n       ((= (op) isub)\n        (let ((v2 (stack-pop (stack))))\n          (let ((v1 (stack-pop (stack))))\n        (stack-push (stack)\n                (- (v1) (v2))))))\n       ((= (op) goto)\n        (lambda (x)\n          (pc set (x))))\n       ((= (op) iflt)\n        (lambda (x)\n          (if (< (stack-pop (stack)) 0)\n          (pc set (x))\n          0)))\n       ((= (op) ifle)\n        (lambda (x)\n          (if (< (stack-pop (stack)) 1)\n          (pc set (x))\n          0)))\n       ((= (op) ifgt)\n        (lambda (x)\n          (if (> (stack-pop (stack)) 0)\n          (pc set (x))\n          0)))\n       ((= (op) ifge)\n        (lambda (x)\n          (if (>= (stack-pop (stack)) 0)\n          (pc set (x))\n          0)))\n       ((= (op) ifne)\n        (lambda (x)\n          (if (not (= (stack-pop (stack)) 0))\n          (pc set (x))\n          0)))\n       ((= (op) ifeq)\n        (lambda (x)\n          (if (= (stack-pop (stack)) 0)\n          (pc set (x))\n          0)))\n       ((= (op) if_icmpne)\n        (let ((v2 (stack-pop (stack))))\n          (let ((v1 (stack-pop (stack))))\n        (lambda (x)\n          (if (not (= (v1) (v2)))\n              (pc set (x))\n              0)))))\n       ((= (op) if_icmpeq)\n        (let ((v2 (stack-pop (stack))))\n          (let ((v1 (stack-pop (stack))))\n        (lambda (x)\n          (if (= (v1) (v2))\n              (pc set (x))\n              0)))))\n       ((= (op) if_acmpne)\n        (let ((v2 (stack-pop (stack))))\n          (let ((v1 (stack-pop (stack))))\n        (lambda (x)\n          (if (not (compare-object-reference (v1) (v2)))\n              (pc set (x))\n              0)))))\n       ((= (op) if_acmpeq)\n        (let ((v2 (stack-pop (stack))))\n          (let ((v1 (stack-pop (stack))))\n        (lambda (x)\n          (if (compare-object-reference (v1) (v2))\n              (pc set (x))\n              0)))))\n       ((= (op) if_icmpge)\n        (let ((v2 (stack-pop (stack))))\n          (let ((v1 (stack-pop (stack))))\n        (lambda (x)\n          (if (>= (v1) (v2))\n              (pc set (x))\n              0)))))\n       ((= (op) if_icmpgt)\n        (let ((v2 (stack-pop (stack))))\n          (let ((v1 (stack-pop (stack))))\n        (lambda (x)\n          (if (> (v1) (v2))\n              (pc set (x))\n              0)))))\n       ((= (op) if_icmple)\n        (let ((v2 (stack-pop (stack))))\n          (let ((v1 (stack-pop (stack))))\n        (lambda (x)\n          (if (<= (v1) (v2))\n              (pc set (x))\n              0)))))\n       ((= (op) if_icmplt)\n        (let ((v2 (stack-pop (stack))))\n          (let ((v1 (stack-pop (stack))))\n        (lambda (x)\n          (if (< (v1) (v2))\n              (pc set (x))\n              0)))))\n       ((= (op) ifnull)\n        (lambda (x)\n          (if (number? | stack-pop (stack))\n          (pc set (x))\n          0)))\n       ((= (op) ifnonnull)\n        (lambda (x)\n          (if (not (number? | stack-pop (stack)))\n          (pc set (x))\n          0)))\n       ((= (op) return)\n        (begin (ret set (hash-ref (vars get) 0))\n           (pc set -1)))\n       ((= (op) ireturn)\n        (begin (ret set (stack-pop (stack)))\n           (pc set -1)))\n       ((= (op) areturn)\n        (begin (ret set (stack-pop (stack)))\n           (pc set -1)))\n       ((= (op) goto)\n        (lambda (target)\n          (pc set (target))))\n       ((= (op) invokevirtual)\n        (lambda (target m n)\n          (let ((result (stack-call (stack) (target) (m))))\n        (if (= (n) 1)\n            (stack-push (stack) (result))\n            0))))\n       ((= (op) invokeinterface)\n        (lambda (target m n ignore)\n          (let ((result (stack-call (stack) (target) (m))))\n        (if (= (n) 1)\n            (stack-push (stack) (result))\n            0))))\n       ((= (op) invokespecial)\n        (lambda (target m n)\n          (let ((result (stack-call-special (stack) \n                        (hash-ref (vars get) 0)\n                        (target) \n                        (m))))\n        (if (= (n) 1)\n            (stack-push (stack) (result))\n            0))))\n       0)));",
    "code
    "parse": [
      "define",
      "jvm-maker",
      [
        "lambda",
        [
          "vars",
          "stack",
          "pc",
          "ret"
        ],
        [
          "?",
          "op",
          [
            "begin",
            [
              "pc",
              "set",
              [
                "+",
                [
                  "pc",
                  "get"
                ],
                "1"
              ]
            ],
            [
              -1,
              "cond",
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "new"
                ],
                [
                  "lambda",
                  [
                    "type"
                  ],
                  [
                    "stack-push",
                    [
                      "stack"
                    ],
                    [
                      [
                        "type"
                      ],
                      "new"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "dup"
                ],
                [
                  "stack-push",
                  [
                    "stack"
                  ],
                  [
                    "stack-peek",
                    [
                      "stack"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "checkcast"
                ],
                [
                  "lambda",
                  [
                    "t"
                  ],
                  "1"
                ]
              ],
              [
                [
                  "or",
                  [
                    "=",
                    [
                      "op"
                    ],
                    "astore"
                  ],
                  [
                    "=",
                    [
                      "op"
                    ],
                    "istore"
                  ]
                ],
                [
                  "lambda",
                  [
                    "index"
                  ],
                  [
                    "vars",
                    "set",
                    [
                      "hash-add",
                      [
                        "vars",
                        "get"
                      ],
                      [
                        "index"
                      ],
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "or",
                  [
                    "=",
                    [
                      "op"
                    ],
                    "aload"
                  ],
                  [
                    "=",
                    [
                      "op"
                    ],
                    "iload"
                  ]
                ],
                [
                  "lambda",
                  [
                    "index"
                  ],
                  [
                    "stack-push",
                    [
                      "stack"
                    ],
                    [
                      "hash-ref",
                      [
                        "vars",
                        "get"
                      ],
                      [
                        "index"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "or",
                  [
                    "=",
                    [
                      "op"
                    ],
                    "iconst"
                  ],
                  [
                    "=",
                    [
                      "op"
                    ],
                    "ldc"
                  ]
                ],
                [
                  "lambda",
                  [
                    "val"
                  ],
                  [
                    "stack-push",
                    [
                      "stack"
                    ],
                    [
                      "val"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "aconst_null"
                ],
                [
                  "stack-push",
                  [
                    "stack"
                  ],
                  "0"
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "instanceof"
                ],
                [
                  "lambda",
                  [
                    "t"
                  ],
                  [
                    "stack-push",
                    [
                      "stack"
                    ],
                    [
                      "not",
                      [
                        -1,
                        "number?",
                        [
                          -1,
                          [
                            "stack-pop",
                            [
                              -1,
                              "stack"
                            ]
                          ],
                          [
                            "t",
                            "new",
                            "classname"
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "getfield"
                ],
                [
                  "lambda",
                  [
                    "key",
                    "ignore"
                  ],
                  [
                    "stack-push",
                    [
                      "stack"
                    ],
                    [
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ],
                      [
                        "key"
                      ],
                      "get"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "putfield"
                ],
                [
                  "lambda",
                  [
                    "key",
                    "ignore"
                  ],
                  [
                    "let",
                    [
                      [
                        "val",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ],
                      [
                        "key"
                      ],
                      "set",
                      [
                        "val"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "imul"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "stack-push",
                      [
                        "stack"
                      ],
                      [
                        "*",
                        [
                          "v1"
                        ],
                        [
                          "v2"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "iadd"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "stack-push",
                      [
                        "stack"
                      ],
                      [
                        "+",
                        [
                          "v1"
                        ],
                        [
                          "v2"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "isub"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "stack-push",
                      [
                        "stack"
                      ],
                      [
                        "-",
                        [
                          "v1"
                        ],
                        [
                          "v2"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "goto"
                ],
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "pc",
                    "set",
                    [
                      "x"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "iflt"
                ],
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "if",
                    [
                      "<",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ],
                      "0"
                    ],
                    [
                      "pc",
                      "set",
                      [
                        "x"
                      ]
                    ],
                    "0"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "ifle"
                ],
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "if",
                    [
                      "<",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ],
                      "1"
                    ],
                    [
                      "pc",
                      "set",
                      [
                        "x"
                      ]
                    ],
                    "0"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "ifgt"
                ],
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "if",
                    [
                      ">",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ],
                      "0"
                    ],
                    [
                      "pc",
                      "set",
                      [
                        "x"
                      ]
                    ],
                    "0"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "ifge"
                ],
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "if",
                    [
                      ">=",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ],
                      "0"
                    ],
                    [
                      "pc",
                      "set",
                      [
                        "x"
                      ]
                    ],
                    "0"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "ifne"
                ],
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "if",
                    [
                      "not",
                      [
                        "=",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ],
                        "0"
                      ]
                    ],
                    [
                      "pc",
                      "set",
                      [
                        "x"
                      ]
                    ],
                    "0"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "ifeq"
                ],
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "if",
                    [
                      "=",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ],
                      "0"
                    ],
                    [
                      "pc",
                      "set",
                      [
                        "x"
                      ]
                    ],
                    "0"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "if_icmpne"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "lambda",
                      [
                        "x"
                      ],
                      [
                        "if",
                        [
                          "not",
                          [
                            "=",
                            [
                              "v1"
                            ],
                            [
                              "v2"
                            ]
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            "x"
                          ]
                        ],
                        "0"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "if_icmpeq"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "lambda",
                      [
                        "x"
                      ],
                      [
                        "if",
                        [
                          "=",
                          [
                            "v1"
                          ],
                          [
                            "v2"
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            "x"
                          ]
                        ],
                        "0"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "if_acmpne"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "lambda",
                      [
                        "x"
                      ],
                      [
                        "if",
                        [
                          "not",
                          [
                            "compare-object-reference",
                            [
                              "v1"
                            ],
                            [
                              "v2"
                            ]
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            "x"
                          ]
                        ],
                        "0"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "if_acmpeq"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "lambda",
                      [
                        "x"
                      ],
                      [
                        "if",
                        [
                          "compare-object-reference",
                          [
                            "v1"
                          ],
                          [
                            "v2"
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            "x"
                          ]
                        ],
                        "0"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "if_icmpge"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "lambda",
                      [
                        "x"
                      ],
                      [
                        "if",
                        [
                          ">=",
                          [
                            "v1"
                          ],
                          [
                            "v2"
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            "x"
                          ]
                        ],
                        "0"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "if_icmpgt"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "lambda",
                      [
                        "x"
                      ],
                      [
                        "if",
                        [
                          ">",
                          [
                            "v1"
                          ],
                          [
                            "v2"
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            "x"
                          ]
                        ],
                        "0"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "if_icmple"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "lambda",
                      [
                        "x"
                      ],
                      [
                        "if",
                        [
                          "<=",
                          [
                            "v1"
                          ],
                          [
                            "v2"
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            "x"
                          ]
                        ],
                        "0"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "if_icmplt"
                ],
                [
                  "let",
                  [
                    [
                      "v2",
                      [
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ]
                  ],
                  [
                    "let",
                    [
                      [
                        "v1",
                        [
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "lambda",
                      [
                        "x"
                      ],
                      [
                        "if",
                        [
                          "<",
                          [
                            "v1"
                          ],
                          [
                            "v2"
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            "x"
                          ]
                        ],
                        "0"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "ifnull"
                ],
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "if",
                    [
                      "number?",
                      [
                        -1,
                        "stack-pop",
                        [
                          "stack"
                        ]
                      ]
                    ],
                    [
                      "pc",
                      "set",
                      [
                        "x"
                      ]
                    ],
                    "0"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "ifnonnull"
                ],
                [
                  "lambda",
                  [
                    "x"
                  ],
                  [
                    "if",
                    [
                      "not",
                      [
                        "number?",
                        [
                          -1,
                          "stack-pop",
                          [
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "pc",
                      "set",
                      [
                        "x"
                      ]
                    ],
                    "0"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "return"
                ],
                [
                  "begin",
                  [
                    "ret",
                    "set",
                    [
                      "hash-ref",
                      [
                        "vars",
                        "get"
                      ],
                      "0"
                    ]
                  ],
                  [
                    "pc",
                    "set",
                    "-1"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "ireturn"
                ],
                [
                  "begin",
                  [
                    "ret",
                    "set",
                    [
                      "stack-pop",
                      [
                        "stack"
                      ]
                    ]
                  ],
                  [
                    "pc",
                    "set",
                    "-1"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "areturn"
                ],
                [
                  "begin",
                  [
                    "ret",
                    "set",
                    [
                      "stack-pop",
                      [
                        "stack"
                      ]
                    ]
                  ],
                  [
                    "pc",
                    "set",
                    "-1"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "goto"
                ],
                [
                  "lambda",
                  [
                    "target"
                  ],
                  [
                    "pc",
                    "set",
                    [
                      "target"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "invokevirtual"
                ],
                [
                  "lambda",
                  [
                    "target",
                    "m",
                    "n"
                  ],
                  [
                    "let",
                    [
                      [
                        "result",
                        [
                          "stack-call",
                          [
                            "stack"
                          ],
                          [
                            "target"
                          ],
                          [
                            "m"
                          ]
                        ]
                      ]
                    ],
                    [
                      "if",
                      [
                        "=",
                        [
                          "n"
                        ],
                        "1"
                      ],
                      [
                        "stack-push",
                        [
                          "stack"
                        ],
                        [
                          "result"
                        ]
                      ],
                      "0"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "invokeinterface"
                ],
                [
                  "lambda",
                  [
                    "target",
                    "m",
                    "n",
                    "ignore"
                  ],
                  [
                    "let",
                    [
                      [
                        "result",
                        [
                          "stack-call",
                          [
                            "stack"
                          ],
                          [
                            "target"
                          ],
                          [
                            "m"
                          ]
                        ]
                      ]
                    ],
                    [
                      "if",
                      [
                        "=",
                        [
                          "n"
                        ],
                        "1"
                      ],
                      [
                        "stack-push",
                        [
                          "stack"
                        ],
                        [
                          "result"
                        ]
                      ],
                      "0"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    "op"
                  ],
                  "invokespecial"
                ],
                [
                  "lambda",
                  [
                    "target",
                    "m",
                    "n"
                  ],
                  [
                    "let",
                    [
                      [
                        "result",
                        [
                          "stack-call-special",
                          [
                            "stack"
                          ],
                          [
                            "hash-ref",
                            [
                              "vars",
                              "get"
                            ],
                            "0"
                          ],
                          [
                            "target"
                          ],
                          [
                            "m"
                          ]
                        ]
                      ]
                    ],
                    [
                      "if",
                      [
                        "=",
                        [
                          "n"
                        ],
                        "1"
                      ],
                      [
                        "stack-push",
                        [
                          "stack"
                        ],
                        [
                          "result"
                        ]
                      ],
                      "0"
                    ]
                  ]
                ]
              ],
              "0"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF101;&#xF11A;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF124;&#xF101;&#xF11C;&#xF124;&#xF101;&#xF11D;&#xF126;&#xF116;&#xF121;&#xF132;&#xF13F;&#xF124;&#xF101;&#xF11E;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF13D;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF116;&#xF121;&#xF134;&#xF121;&#xF121;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF12F;&#xF114;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF101;&#xF11F;&#xF121;&#xF132;&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11F;&#xF121;&#xF12F;&#xF114;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF102;&#xF111;&#xF121;&#xF132;&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF124;&#xF102;&#xF112;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF102;&#xF113;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF12D;&#xF11E;&#xF121;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF13A;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF102;&#xF114;&#xF121;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF102;&#xF115;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF123;&#xF10E;&#xF119;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF131;&#xF117;&#xF132;&#xF12A;&#xF11F;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF131;&#xF116;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF119;&#xF121;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF13A;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF102;&#xF117;&#xF121;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF102;&#xF118;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF123;&#xF10E;&#xF119;&#xF121;&#xF132;&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF12B;&#xF111;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF131;&#xF116;&#xF121;&#xF132;&#xF123;&#xF10E;&#xF119;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF13A;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF102;&#xF119;&#xF121;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF102;&#xF11A;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF102;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF124;&#xF102;&#xF11B;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF102;&#xF11C;&#xF121;&#xF132;&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF12D;&#xF11C;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF12D;&#xF11E;&#xF121;&#xF132;&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF138;&#xF101;&#xF143;&#xF123;&#xF119;&#xF101;&#xF143;&#xF132;&#xF124;&#xF102;&#xF116;&#xF101;&#xF143;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF12D;&#xF11E;&#xF12F;&#xF114;&#xF130;&#xF11B;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF102;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF127;&#xF113;&#xF124;&#xF102;&#xF11E;&#xF121;&#xF132;&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF127;&#xF113;&#xF121;&#xF131;&#xF116;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF102;&#xF11F;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF127;&#xF113;&#xF124;&#xF102;&#xF11E;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF102;&#xF11B;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF127;&#xF113;&#xF121;&#xF131;&#xF117;&#xF132;&#xF124;&#xF102;&#xF11B;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF102;&#xF120;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF111;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF112;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF13C;&#xF132;&#xF124;&#xF103;&#xF112;&#xF121;&#xF132;&#xF124;&#xF103;&#xF111;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF103;&#xF113;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF111;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF112;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF13D;&#xF132;&#xF124;&#xF103;&#xF112;&#xF121;&#xF132;&#xF124;&#xF103;&#xF111;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF103;&#xF114;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF111;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF112;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF13E;&#xF132;&#xF124;&#xF103;&#xF112;&#xF121;&#xF132;&#xF124;&#xF103;&#xF111;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF103;&#xF115;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF103;&#xF116;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF135;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF103;&#xF117;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF135;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF103;&#xF118;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF103;&#xF119;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF125;&#xF11F;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF103;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF138;&#xF132;&#xF136;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF103;&#xF11B;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF103;&#xF11C;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF111;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF112;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF138;&#xF132;&#xF136;&#xF132;&#xF124;&#xF103;&#xF112;&#xF121;&#xF132;&#xF124;&#xF103;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF103;&#xF11D;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF111;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF112;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF124;&#xF103;&#xF112;&#xF121;&#xF132;&#xF124;&#xF103;&#xF111;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF103;&#xF11E;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF111;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF112;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF138;&#xF132;&#xF124;&#xF101;&#xF117;&#xF132;&#xF124;&#xF103;&#xF112;&#xF121;&#xF132;&#xF124;&#xF103;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF103;&#xF11F;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF111;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF112;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF124;&#xF101;&#xF117;&#xF132;&#xF124;&#xF103;&#xF112;&#xF121;&#xF132;&#xF124;&#xF103;&#xF111;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF103;&#xF120;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF111;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF112;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF125;&#xF11F;&#xF132;&#xF124;&#xF103;&#xF112;&#xF121;&#xF132;&#xF124;&#xF103;&#xF111;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF104;&#xF111;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF111;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF112;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF124;&#xF103;&#xF112;&#xF121;&#xF132;&#xF124;&#xF103;&#xF111;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF104;&#xF112;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF111;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF112;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF125;&#xF120;&#xF132;&#xF124;&#xF103;&#xF112;&#xF121;&#xF132;&#xF124;&#xF103;&#xF111;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF104;&#xF113;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF111;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF103;&#xF112;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF135;&#xF132;&#xF124;&#xF103;&#xF112;&#xF121;&#xF132;&#xF124;&#xF103;&#xF111;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF104;&#xF114;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF123;&#xF119;&#xF101;&#xF143;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF104;&#xF115;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF138;&#xF132;&#xF123;&#xF119;&#xF101;&#xF143;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF12E;&#xF117;&#xF121;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF126;&#xF116;&#xF131;&#xF117;&#xF132;&#xF12B;&#xF111;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF131;&#xF116;&#xF121;&#xF133;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF124;&#xF104;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF104;&#xF117;&#xF121;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF126;&#xF116;&#xF131;&#xF117;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF124;&#xF104;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF104;&#xF118;&#xF121;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF126;&#xF116;&#xF131;&#xF117;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF124;&#xF104;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF103;&#xF115;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF104;&#xF119;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF117;&#xF132;&#xF124;&#xF104;&#xF119;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF104;&#xF11A;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF104;&#xF119;&#xF123;&#xF102;&#xF11C;&#xF126;&#xF115;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF104;&#xF11B;&#xF132;&#xF124;&#xF104;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF124;&#xF104;&#xF119;&#xF121;&#xF132;&#xF123;&#xF102;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF126;&#xF115;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF124;&#xF104;&#xF11B;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF104;&#xF11D;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF104;&#xF119;&#xF123;&#xF102;&#xF11C;&#xF126;&#xF115;&#xF124;&#xF102;&#xF11E;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF104;&#xF11B;&#xF132;&#xF124;&#xF104;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF124;&#xF104;&#xF119;&#xF121;&#xF132;&#xF123;&#xF102;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF126;&#xF115;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF124;&#xF104;&#xF11B;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11E;&#xF121;&#xF124;&#xF104;&#xF11E;&#xF121;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF104;&#xF119;&#xF123;&#xF102;&#xF11C;&#xF126;&#xF115;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF104;&#xF11B;&#xF132;&#xF124;&#xF104;&#xF11F;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF12B;&#xF111;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF131;&#xF116;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF104;&#xF119;&#xF121;&#xF132;&#xF123;&#xF102;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF126;&#xF115;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF124;&#xF104;&#xF11B;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF121;&#xF133;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1410
  },
  {
    "role": "code",
    "lines": [
      "define stack-call",
      "  (lambda (stack target ct)",
      "    (if (= (ct) 0)",
      "    ((stack-pop (stack)) (target))",
      "    (let ((arg (stack-pop (stack))))",
      "      ((stack-call (stack) (target) (- (ct) 1)) (arg)))));"
    ],
    "preprocessed": "define stack-call\n  (lambda (stack target ct)\n    (if (= (ct) 0)\n    ((stack-pop (stack)) (target))\n    (let ((arg (stack-pop (stack))))\n      ((stack-call (stack) (target) (- (ct) 1)) (arg)))));",
    "code": "211013210010010113221101032210000110113210010010003210010011113322111132211322100100111133203322210001001013221000011011333221001001000333221011011322210010100003221000100101322100001101133333222100100101132210000110113322100100100033221011322100100111133213332210010100003333332233",
    "parse": [
      "define",
      "stack-call",
      [
        "lambda",
        [
          "stack",
          "target",
          "ct"
        ],
        [
          "if",
          [
            "=",
            [
              "ct"
            ],
            "0"
          ],
          [
            [
              "stack-pop",
              [
                "stack"
              ]
            ],
            [
              "target"
            ]
          ],
          [
            "let",
            [
              [
                "arg",
                [
                  "stack-pop",
                  [
                    "stack"
                  ]
                ]
              ]
            ],
            [
              [
                "stack-call",
                [
                  "stack"
                ],
                [
                  "target"
                ],
                [
                  "-",
                  [
                    "ct"
                  ],
                  "1"
                ]
              ],
              [
                "arg"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF104;&#xF11C;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF124;&#xF104;&#xF119;&#xF124;&#xF104;&#xF120;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF124;&#xF104;&#xF120;&#xF121;&#xF133;&#xF121;&#xF132;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF124;&#xF104;&#xF119;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF105;&#xF111;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF124;&#xF104;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF124;&#xF104;&#xF119;&#xF121;&#xF132;&#xF13E;&#xF132;&#xF124;&#xF104;&#xF120;&#xF121;&#xF134;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF111;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1411
  },
  {
    "role": "code",
    "lines": [
      "define stack-call-special",
      "  (lambda (stack self target ct)",
      "    (if (= (ct) 0)",
      "    (let ((act (stack-pop | stack)))",
      "      (if (act == (self))",
      "          (act super (target))",
      "          (act (target))))",
      "    (let ((arg (stack-pop (stack))))",
      "      ((stack-call-special (stack) (self) (target) (- (ct) 1)) (arg)))));"
    ],
    "preprocessed": "define stack-call-special\n  (lambda (stack self target ct)\n    (if (= (ct) 0)\n    (let ((act (stack-pop | stack)))\n      (if (act == (self))\n          (act super (target))\n          (act (target))))\n    (let ((arg (stack-pop (stack))))\n      ((stack-call-special (stack) (self) (target) (- (ct) 1)) (arg)))));",
    "code": "21101321001001110322110103221000011011321010010032100100100032100100111133221111322113221001001111332033221011011322211111100132210001001013123210000110113333221111322111111001321110110032210100100333221111110013211010110322100100100033322111111001322100100100033333221011011322210010100003221000100101322100001101133333222100100111032210000110113322101001003322100100100033221011322100100111133213332210010100003333332233",
    "parse": [
      "define",
      "stack-call-special",
      [
        "lambda",
        [
          "stack",
          "self",
          "target",
          "ct"
        ],
        [
          "if",
          [
            "=",
            [
              "ct"
            ],
            "0"
          ],
          [
            "let",
            [
              [
                "act",
                [
                  "stack-pop",
                  [
                    -1,
                    "stack"
                  ]
                ]
              ]
            ],
            [
              "if",
              [
                "act",
                "==",
                [
                  "self"
                ]
              ],
              [
                "act",
                "super",
                [
                  "target"
                ]
              ],
              [
                "act",
                [
                  "target"
                ]
              ]
            ]
          ],
          [
            "let",
            [
              [
                "arg",
                [
                  "stack-pop",
                  [
                    "stack"
                  ]
                ]
              ]
            ],
            [
              [
                "stack-call-special",
                [
                  "stack"
                ],
                [
                  "self"
                ],
                [
                  "target"
                ],
                [
                  "-",
                  [
                    "ct"
                  ],
                  "1"
                ]
              ],
              [
                "arg"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF104;&#xF11F;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF12C;&#xF115;&#xF124;&#xF104;&#xF119;&#xF124;&#xF104;&#xF120;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF124;&#xF104;&#xF120;&#xF121;&#xF133;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF123;&#xF10F;&#xF11A;&#xF132;&#xF124;&#xF102;&#xF116;&#xF101;&#xF143;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF123;&#xF10F;&#xF11A;&#xF130;&#xF11D;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF123;&#xF10F;&#xF11A;&#xF12F;&#xF117;&#xF132;&#xF124;&#xF104;&#xF119;&#xF121;&#xF121;&#xF132;&#xF123;&#xF10F;&#xF11A;&#xF132;&#xF124;&#xF104;&#xF119;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF105;&#xF111;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF124;&#xF104;&#xF11F;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF132;&#xF124;&#xF104;&#xF119;&#xF121;&#xF132;&#xF13E;&#xF132;&#xF124;&#xF104;&#xF120;&#xF121;&#xF134;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF111;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1412
  },
  {
    "role": "code",
    "lines": [
      "define stack-push",
      "  (lambda (stack x)",
      "    (stack set (prepend (x) (stack get))));"
    ],
    "preprocessed": "define stack-push\n  (lambda (stack x)\n    (stack set (prepend (x) (stack get))));",
    "code": "21101321000011111322110103221000011011321001113322100001101132111101103221001100322100111332210000110113211110101333332233",
    "parse": [
      "define",
      "stack-push",
      [
        "lambda",
        [
          "stack",
          "x"
        ],
        [
          "stack",
          "set",
          [
            "prepend",
            [
              "x"
            ],
            [
              "stack",
              "get"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF101;&#xF120;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF131;&#xF117;&#xF132;&#xF126;&#xF11D;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF131;&#xF116;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1413
  },
  {
    "role": "code",
    "lines": [
      "define stack-pop",
      "  (lambda (stack)",
      "    (let ((v (head (stack get))))",
      "      (begin",
      "    (stack set (tail (stack get)))",
      "    (v))));"
    ],
    "preprocessed": "define stack-pop\n  (lambda (stack)\n    (let ((v (head (stack get))))\n      (begin\n    (stack set (tail (stack get)))\n    (v))));",
    "code": "2110132100010010132211010322100001101133221011011322210110032210001113221000011011321111010133333221000110032210000110113211110110322100100132210000110113211110101333322101100333332233",
    "parse": [
      "define",
      "stack-pop",
      [
        "lambda",
        [
          "stack"
        ],
        [
          "let",
          [
            [
              "v",
              [
                "head",
                [
                  "stack",
                  "get"
                ]
              ]
            ]
          ],
          [
            "begin",
            [
              "stack",
              "set",
              [
                "tail",
                [
                  "stack",
                  "get"
                ]
              ]
            ],
            [
              "v"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF102;&#xF116;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF11D;&#xF132;&#xF126;&#xF118;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF131;&#xF116;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF131;&#xF117;&#xF132;&#xF126;&#xF11A;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF131;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF11D;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1414
  },
  {
    "role": "code",
    "lines": [
      "define stack-peek",
      "  (lambda (stack)",
      "    (head (stack get)));"
    ],
    "preprocessed": "define stack-peek\n  (lambda (stack)\n    (head (stack get)));",
    "code": "21101321000100001322110103221000011011332210001113221000011011321111010133332233",
    "parse": [
      "define",
      "stack-peek",
      [
        "lambda",
        [
          "stack"
        ],
        [
          "head",
          [
            "stack",
            "get"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF102;&#xF112;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF126;&#xF118;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF131;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1415
  },
  {
    "role": "code",
    "lines": [
      "define stack-test1 (cell new (vector 5 3 1));"
    ],
    "preprocessed": "define stack-test1 (cell new (vector 5 3 1));",
    "code": "21101321001010001322111100103211010011322100003210132113213332233",
    "parse": [
      "define",
      "stack-test1",
      [
        "cell",
        "new",
        [
          "vector",
          "5",
          "3",
          "1"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF105;&#xF112;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF132;&#xF123;&#xF111;&#xF138;&#xF136;&#xF134;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1416
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop (stack-test1)) 5;"
    ],
    "preprocessed": "= (stack-pop (stack-test1)) 5;",
    "code": "21132210001001013221001010001333210132233",
    "parse": [
      "=",
      [
        "stack-pop",
        [
          "stack-test1"
        ]
      ],
      "5"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF121;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 1417
  },
  {
    "role": "code",
    "lines": [
      "= (stack-peek (stack-test1)) 3;"
    ],
    "preprocessed": "= (stack-peek (stack-test1)) 3;",
    "code": "2113221000100001322100101000133321132233",
    "parse": [
      "=",
      [
        "stack-peek",
        [
          "stack-test1"
        ]
      ],
      "3"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF102;&#xF112;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF121;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 1418
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop (stack-test1)) 3;"
    ],
    "preprocessed": "= (stack-pop (stack-test1)) 3;",
    "code": "2113221000100101322100101000133321132233",
    "parse": [
      "=",
      [
        "stack-pop",
        [
          "stack-test1"
        ]
      ],
      "3"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF121;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 1419
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) 7;"
    ],
    "preprocessed": "stack-push (stack-test1) 7;",
    "code": "21000011111322100101000133211132233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      "7"
    ],
    "spider": "&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF13A;&#xF132;&#xF143;&#xF121;",
    "stanza": 1420
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop (stack-test1)) 7;"
    ],
    "preprocessed": "= (stack-pop (stack-test1)) 7;",
    "code": "21132210001001013221001010001333211132233",
    "parse": [
      "=",
      [
        "stack-pop",
        [
          "stack-test1"
        ]
      ],
      "7"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF121;&#xF13A;&#xF132;&#xF143;&#xF121;",
    "stanza": 1421
  },
  {
    "role": "code",
    "lines": [
      "define vars-test1 (cell new (hash-null));"
    ],
    "preprocessed": "define vars-test1 (cell new (hash-null));",
    "code": "21101321001010010322111100103211010011322100100013332233",
    "parse": [
      "define",
      "vars-test1",
      [
        "cell",
        "new",
        [
          "hash-null"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF105;&#xF113;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF132;&#xF12B;&#xF112;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1422
  },
  {
    "role": "code",
    "lines": [
      "define pc-test1 (cell new 0);"
    ],
    "preprocessed": "define pc-test1 (cell new 0);",
    "code": "21101321001010011322111100103211010011320332233",
    "parse": [
      "define",
      "pc-test1",
      [
        "cell",
        "new",
        "0"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF105;&#xF114;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1423
  },
  {
    "role": "code",
    "lines": [
      "define ret-test1 (cell new 0);"
    ],
    "preprocessed": "define ret-test1 (cell new 0);",
    "code": "21101321001010100322111100103211010011320332233",
    "parse": [
      "define",
      "ret-test1",
      [
        "cell",
        "new",
        "0"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF105;&#xF115;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1424
  },
  {
    "role": "code",
    "lines": [
      "define test-jvm (jvm-maker (vars-test1) (stack-test1) (pc-test1) (ret-test1));"
    ],
    "preprocessed": "define test-jvm (jvm-maker (vars-test1) (stack-test1) (pc-test1) (ret-test1));",
    "code": "21101321001010101322100001100132210010100103322100101000133221001010011332210010101003332233",
    "parse": [
      "define",
      "test-jvm",
      [
        "jvm-maker",
        [
          "vars-test1"
        ],
        [
          "stack-test1"
        ],
        [
          "pc-test1"
        ],
        [
          "ret-test1"
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF105;&#xF116;&#xF132;&#xF124;&#xF101;&#xF11A;&#xF132;&#xF124;&#xF105;&#xF113;&#xF121;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF132;&#xF124;&#xF105;&#xF114;&#xF121;&#xF132;&#xF124;&#xF105;&#xF115;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1425
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) 4;"
    ],
    "preprocessed": "stack-push (stack-test1) 4;",
    "code": "21000011111322100101000133210032233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      "4"
    ],
    "spider": "&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 1426
  },
  {
    "role": "code",
    "lines": [
      "test-jvm dup;"
    ],
    "preprocessed": "test-jvm dup;",
    "code": "2100101010132100010000032233",
    "parse": [
      "test-jvm",
      "dup"
    ],
    "spider": "&#xF124;&#xF105;&#xF116;&#xF124;&#xF102;&#xF111;&#xF132;&#xF143;&#xF121;",
    "stanza": 1427
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop (stack-test1)) 4;"
    ],
    "preprocessed": "= (stack-pop (stack-test1)) 4;",
    "code": "21132210001001013221001010001333210032233",
    "parse": [
      "=",
      [
        "stack-pop",
        [
          "stack-test1"
        ]
      ],
      "4"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF121;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 1428
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop (stack-test1)) 4;"
    ],
    "preprocessed": "= (stack-pop (stack-test1)) 4;",
    "code": "21132210001001013221001010001333210032233",
    "parse": [
      "=",
      [
        "stack-pop",
        [
          "stack-test1"
        ]
      ],
      "4"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF121;&#xF137;&#xF132;&#xF143;&#xF121;",
    "stanza": 1429
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) 66;"
    ],
    "preprocessed": "stack-push (stack-test1) 66;",
    "code": "210000111113221001010001332100001032233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      "66"
    ],
    "spider": "&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF126;&#xF113;&#xF132;&#xF143;&#xF121;",
    "stanza": 1430
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) 77;"
    ],
    "preprocessed": "stack-push (stack-test1) 77;",
    "code": "210000111113221001010001332100110132233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      "77"
    ],
    "spider": "&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF126;&#xF11E;&#xF132;&#xF143;&#xF121;",
    "stanza": 1431
  },
  {
    "role": "code",
    "lines": [
      "test-jvm astore 3;"
    ],
    "preprocessed": "test-jvm astore 3;",
    "code": "21001010101321000100011321132233",
    "parse": [
      "test-jvm",
      "astore",
      "3"
    ],
    "spider": "&#xF124;&#xF105;&#xF116;&#xF124;&#xF102;&#xF114;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 1432
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop (stack-test1)) 66;"
    ],
    "preprocessed": "= (stack-pop (stack-test1)) 66;",
    "code": "211322100010010132210010100013332100001032233",
    "parse": [
      "=",
      [
        "stack-pop",
        [
          "stack-test1"
        ]
      ],
      "66"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF121;&#xF126;&#xF113;&#xF132;&#xF143;&#xF121;",
    "stanza": 1433
  },
  {
    "role": "code",
    "lines": [
      "test-jvm aload 3;"
    ],
    "preprocessed": "test-jvm aload 3;",
    "code": "21001010101321000100110321132233",
    "parse": [
      "test-jvm",
      "aload",
      "3"
    ],
    "spider": "&#xF124;&#xF105;&#xF116;&#xF124;&#xF102;&#xF117;&#xF136;&#xF132;&#xF143;&#xF121;",
    "stanza": 1434
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop (stack-test1)) 77;"
    ],
    "preprocessed": "= (stack-pop (stack-test1)) 77;",
    "code": "211322100010010132210010100013332100110132233",
    "parse": [
      "=",
      [
        "stack-pop",
        [
          "stack-test1"
        ]
      ],
      "77"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF121;&#xF126;&#xF11E;&#xF132;&#xF143;&#xF121;",
    "stanza": 1435
  },
  {
    "role": "code",
    "lines": [
      "class test-class ()",
      "       (field x ((int) new))",
      "       (field y ((int) new));"
    ],
    "preprocessed": "class test-class ()\n       (field x ((int) new))\n       (field y ((int) new));",
    "code": "21110001132100101011032322111010003210011132221011100133211010011333221110100032110011322210111001332110100113332233",
    "parse": [
      "class",
      "test-class",
      [],
      [
        "field",
        "x",
        [
          [
            "int"
          ],
          "new"
        ]
      ],
      [
        "field",
        "y",
        [
          [
            "int"
          ],
          "new"
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF124;&#xF105;&#xF117;&#xF143;&#xF132;&#xF130;&#xF119;&#xF124;&#xF118;&#xF132;&#xF132;&#xF12D;&#xF11A;&#xF121;&#xF12F;&#xF114;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF125;&#xF114;&#xF132;&#xF132;&#xF12D;&#xF11A;&#xF121;&#xF12F;&#xF114;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1436
  },
  {
    "role": "code",
    "lines": [
      "define test-this (test-class new);"
    ],
    "preprocessed": "define test-this (test-class new);",
    "code": "2110132100101011132210010101103211010011332233",
    "parse": [
      "define",
      "test-this",
      [
        "test-class",
        "new"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF105;&#xF118;&#xF132;&#xF124;&#xF105;&#xF117;&#xF12F;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1437
  },
  {
    "role": "code",
    "lines": [
      "test-this x set 5;"
    ],
    "preprocessed": "test-this x set 5;",
    "code": "210010101113210011132111101103210132233",
    "parse": [
      "test-this",
      "x",
      "set",
      "5"
    ],
    "spider": "&#xF124;&#xF105;&#xF118;&#xF124;&#xF118;&#xF131;&#xF117;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 1438
  },
  {
    "role": "code",
    "lines": [
      "= (test-this x get) 5;"
    ],
    "preprocessed": "= (test-this x get) 5;",
    "code": "211322100101011132100111321111010133210132233",
    "parse": [
      "=",
      [
        "test-this",
        "x",
        "get"
      ],
      "5"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF105;&#xF118;&#xF124;&#xF118;&#xF131;&#xF116;&#xF121;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 1439
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) (test-this);"
    ],
    "preprocessed": "stack-push (stack-test1) (test-this);",
    "code": "21000011111322100101000133221001010111332233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      [
        "test-this"
      ]
    ],
    "spider": "&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF132;&#xF124;&#xF105;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1440
  },
  {
    "role": "code",
    "lines": [
      "= ((stack-pop (stack-test1)) x get) 5;"
    ],
    "preprocessed": "= ((stack-pop (stack-test1)) x get) 5;",
    "code": "2113222100010010132210010100013332100111321111010133210132233",
    "parse": [
      "=",
      [
        [
          "stack-pop",
          [
            "stack-test1"
          ]
        ],
        "x",
        "get"
      ],
      "5"
    ],
    "spider": "&#xF136;&#xF132;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF121;&#xF124;&#xF118;&#xF131;&#xF116;&#xF121;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 1441
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) (test-this);"
    ],
    "preprocessed": "stack-push (stack-test1) (test-this);",
    "code": "21000011111322100101000133221001010111332233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      [
        "test-this"
      ]
    ],
    "spider": "&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF132;&#xF124;&#xF105;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1442
  },
  {
    "role": "code",
    "lines": [
      "test-jvm astore 0;"
    ],
    "preprocessed": "test-jvm astore 0;",
    "code": "2100101010132100010001132032233",
    "parse": [
      "test-jvm",
      "astore",
      "0"
    ],
    "spider": "&#xF124;&#xF105;&#xF116;&#xF124;&#xF102;&#xF114;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 1443
  },
  {
    "role": "code",
    "lines": [
      "test-jvm aload 0;"
    ],
    "preprocessed": "test-jvm aload 0;",
    "code": "2100101010132100010011032032233",
    "parse": [
      "test-jvm",
      "aload",
      "0"
    ],
    "spider": "&#xF124;&#xF105;&#xF116;&#xF124;&#xF102;&#xF117;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 1444
  },
  {
    "role": "code",
    "lines": [
      "test-jvm getfield x (int);"
    ],
    "preprocessed": "test-jvm getfield x (int);",
    "code": "210010101013210001011003210011132210111001332233",
    "parse": [
      "test-jvm",
      "getfield",
      "x",
      [
        "int"
      ]
    ],
    "spider": "&#xF124;&#xF105;&#xF116;&#xF124;&#xF102;&#xF11D;&#xF124;&#xF118;&#xF132;&#xF12D;&#xF11A;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1445
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop (stack-test1)) 5;"
    ],
    "preprocessed": "= (stack-pop (stack-test1)) 5;",
    "code": "21132210001001013221001010001333210132233",
    "parse": [
      "=",
      [
        "stack-pop",
        [
          "stack-test1"
        ]
      ],
      "5"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF102;&#xF116;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF121;&#xF138;&#xF132;&#xF143;&#xF121;",
    "stanza": 1446
  },
  {
    "role": "code",
    "lines": [
      "test-jvm aload 0;"
    ],
    "preprocessed": "test-jvm aload 0;",
    "code": "2100101010132100010011032032233",
    "parse": [
      "test-jvm",
      "aload",
      "0"
    ],
    "spider": "&#xF124;&#xF105;&#xF116;&#xF124;&#xF102;&#xF117;&#xF133;&#xF132;&#xF143;&#xF121;",
    "stanza": 1447
  },
  {
    "role": "code",
    "lines": [
      "test-jvm iconst 15;"
    ],
    "preprocessed": "test-jvm iconst 15;",
    "code": "2100101010132100010100032111132233",
    "parse": [
      "test-jvm",
      "iconst",
      "15"
    ],
    "spider": "&#xF124;&#xF105;&#xF116;&#xF124;&#xF102;&#xF119;&#xF142;&#xF132;&#xF143;&#xF121;",
    "stanza": 1448
  },
  {
    "role": "code",
    "lines": [
      "test-jvm putfield y (int);"
    ],
    "preprocessed": "test-jvm putfield y (int);",
    "code": "210010101013210001011103211001132210111001332233",
    "parse": [
      "test-jvm",
      "putfield",
      "y",
      [
        "int"
      ]
    ],
    "spider": "&#xF124;&#xF105;&#xF116;&#xF124;&#xF102;&#xF11F;&#xF125;&#xF114;&#xF132;&#xF12D;&#xF11A;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1449
  },
  {
    "role": "code",
    "lines": [
      "= (test-this y get) 15;"
    ],
    "preprocessed": "= (test-this y get) 15;",
    "code": "2113221001010111321100113211110101332111132233",
    "parse": [
      "=",
      [
        "test-this",
        "y",
        "get"
      ],
      "15"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF105;&#xF118;&#xF125;&#xF114;&#xF131;&#xF116;&#xF121;&#xF142;&#xF132;&#xF143;&#xF121;",
    "stanza": 1450
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) 7;"
    ],
    "preprocessed": "stack-push (stack-test1) 7;",
    "code": "21000011111322100101000133211132233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      "7"
    ],
    "spider": "&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF13A;&#xF132;&#xF143;&#xF121;",
    "stanza": 1451
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) 10;"
    ],
    "preprocessed": "stack-push (stack-test1) 10;",
    "code": "210000111113221001010001332101032233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      "10"
    ],
    "spider": "&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF13D;&#xF132;&#xF143;&#xF121;",
    "stanza": 1452
  },
  {
    "role": "code",
    "lines": [
      "test-jvm imul;"
    ],
    "preprocessed": "test-jvm imul;",
    "code": "2100101010132100010111132233",
    "parse": [
      "test-jvm",
      "imul"
    ],
    "spider": "&#xF124;&#xF105;&#xF116;&#xF124;&#xF102;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 1453
  },
  {
    "role": "code",
    "lines": [
      "test-jvm ireturn;"
    ],
    "preprocessed": "test-jvm ireturn;",
    "code": "2100101010132100100011032233",
    "parse": [
      "test-jvm",
      "ireturn"
    ],
    "spider": "&#xF124;&#xF105;&#xF116;&#xF124;&#xF104;&#xF117;&#xF132;&#xF143;&#xF121;",
    "stanza": 1454
  },
  {
    "role": "code",
    "lines": [
      "= (ret-test1 get) 70;"
    ],
    "preprocessed": "= (ret-test1 get) 70;",
    "code": "21132210010101003211110101332100011032233",
    "parse": [
      "=",
      [
        "ret-test1",
        "get"
      ],
      "70"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF105;&#xF115;&#xF131;&#xF116;&#xF121;&#xF126;&#xF117;&#xF132;&#xF143;&#xF121;",
    "stanza": 1455
  },
  {
    "role": "code",
    "lines": [
      "define state-machine-helper |",
      "  ? at |",
      "  lambda (vars stack machine) |",
      "  let ((pc (cell new (at)))",
      "       (ret (cell new (true)))) |",
      "  let ((jvm (jvm-maker (vars) (stack) (pc) (ret))))",
      "  (begin",
      "    (machine (jvm) (pc get))",
      "    (if (= (pc get) -1)",
      "    (ret get)",
      "    (state-machine-helper (pc get) (vars) (stack) (machine))));"
    ],
    "preprocessed": "define state-machine-helper |\n  ? at |\n  lambda (vars stack machine) |\n  let ((pc (cell new (at)))\n       (ret (cell new (true)))) |\n  let ((jvm (jvm-maker (vars) (stack) (pc) (ret))))\n  (begin\n    (machine (jvm) (pc get))\n    (if (= (pc get) -1)\n    (ret get)\n    (state-machine-helper (pc get) (vars) (stack) (machine))));",
    "code": "21101321001011000312321100321001011001312321101032210000110103210000110113210101101331232101101132221000011100322111100103211010011322100101100133332210001013221111001032110100113221333331232101101132221001011010322100001100132210000110103322100001101133221000011100332210001013333322100011003221010110132210010110103322100001110032111101013332211113221132210000111003211110101332100100010133221000101321111010133221001011000322100001110032111101013322100001101033221000011011332210101101333332233",
    "parse": [
      "define",
      "state-machine-helper",
      [
        -1,
        "?",
        "at",
        [
          -1,
          "lambda",
          [
            "vars",
            "stack",
            "machine"
          ],
          [
            -1,
            "let",
            [
              [
                "pc",
                [
                  "cell",
                  "new",
                  [
                    "at"
                  ]
                ]
              ],
              [
                "ret",
                [
                  "cell",
                  "new",
                  [
                    "true"
                  ]
                ]
              ]
            ],
            [
              -1,
              "let",
              [
                [
                  "jvm",
                  [
                    "jvm-maker",
                    [
                      "vars"
                    ],
                    [
                      "stack"
                    ],
                    [
                      "pc"
                    ],
                    [
                      "ret"
                    ]
                  ]
                ]
              ],
              [
                "begin",
                [
                  "machine",
                  [
                    "jvm"
                  ],
                  [
                    "pc",
                    "get"
                  ]
                ],
                [
                  "if",
                  [
                    "=",
                    [
                      "pc",
                      "get"
                    ],
                    "-1"
                  ],
                  [
                    "ret",
                    "get"
                  ],
                  [
                    "state-machine-helper",
                    [
                      "pc",
                      "get"
                    ],
                    [
                      "vars"
                    ],
                    [
                      "stack"
                    ],
                    [
                      "machine"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF105;&#xF119;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11A;&#xF101;&#xF143;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF124;&#xF101;&#xF11C;&#xF12C;&#xF11E;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF132;&#xF124;&#xF105;&#xF11A;&#xF121;&#xF121;&#xF121;&#xF132;&#xF126;&#xF116;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF132;&#xF134;&#xF121;&#xF121;&#xF121;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF132;&#xF124;&#xF101;&#xF11A;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF121;&#xF132;&#xF126;&#xF116;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF12C;&#xF11E;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF116;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF136;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF116;&#xF121;&#xF124;&#xF104;&#xF116;&#xF121;&#xF132;&#xF126;&#xF116;&#xF131;&#xF116;&#xF121;&#xF132;&#xF124;&#xF105;&#xF119;&#xF132;&#xF124;&#xF101;&#xF11D;&#xF131;&#xF116;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF132;&#xF12C;&#xF11E;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1456
  },
  {
    "role": "code",
    "lines": [
      "define state-machine",
      "  (state-machine-helper 0);"
    ],
    "preprocessed": "define state-machine\n  (state-machine-helper 0);",
    "code": "211013210010110113221001011000320332233",
    "parse": [
      "define",
      "state-machine",
      [
        "state-machine-helper",
        "0"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF105;&#xF119;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1457
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) 10;"
    ],
    "preprocessed": "stack-push (stack-test1) 10;",
    "code": "210000111113221001010001332101032233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      "10"
    ],
    "spider": "&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF13D;&#xF132;&#xF143;&#xF121;",
    "stanza": 1458
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) 33;"
    ],
    "preprocessed": "stack-push (stack-test1) 33;",
    "code": "21000011111322100101000133210000132233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      "33"
    ],
    "spider": "&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF124;&#xF112;&#xF132;&#xF143;&#xF121;",
    "stanza": 1459
  },
  {
    "role": "code",
    "lines": [
      "= (state-machine (vars-test1) (stack-test1) | ? jvm | ? x",
      "          (cond ((= (x) 0) (jvm istore 4))",
      "            ((= (x) 1) (jvm iload 4))",
      "            (jvm ireturn)))",
      "   33;"
    ],
    "preprocessed": "= (state-machine (vars-test1) (stack-test1) | ? jvm | ? x\n          (cond ((= (x) 0) (jvm istore 4))\n            ((= (x) 1) (jvm iload 4))\n            (jvm ireturn)))\n   33;",
    "code": "2113221001011011322100101001033221001010001331232110032100101101031232110032100111322110000003222113221001113320332210010110103210001001003210033322211322100111332133221001011010321000100111321003332210010110103210010001103333210000132233",
    "parse": [
      "=",
      [
        "state-machine",
        [
          "vars-test1"
        ],
        [
          "stack-test1"
        ],
        [
          -1,
          "?",
          "jvm",
          [
            -1,
            "?",
            "x",
            [
              "cond",
              [
                [
                  "=",
                  [
                    "x"
                  ],
                  "0"
                ],
                [
                  "jvm",
                  "istore",
                  "4"
                ]
              ],
              [
                [
                  "=",
                  [
                    "x"
                  ],
                  "1"
                ],
                [
                  "jvm",
                  "iload",
                  "4"
                ]
              ],
              [
                "jvm",
                "ireturn"
              ]
            ]
          ]
        ]
      ],
      "33"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF105;&#xF113;&#xF121;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF132;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF115;&#xF137;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF137;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF117;&#xF121;&#xF121;&#xF121;&#xF124;&#xF112;&#xF132;&#xF143;&#xF121;",
    "stanza": 1460
  },
  {
    "role": "code",
    "lines": [
      "stack-push (stack-test1) 10;"
    ],
    "preprocessed": "stack-push (stack-test1) 10;",
    "code": "210000111113221001010001332101032233",
    "parse": [
      "stack-push",
      [
        "stack-test1"
      ],
      "10"
    ],
    "spider": "&#xF124;&#xF101;&#xF120;&#xF132;&#xF124;&#xF105;&#xF112;&#xF121;&#xF13D;&#xF132;&#xF143;&#xF121;",
    "stanza": 1461
  },
  {
    "role": "code",
    "lines": [
      "define bytecode-test-mul",
      "  (lambda (arg0 arg1) |",
      "      let ((vars | cell new | make-hash | vector (pair 0 0) (pair 1 (arg0)) (pair 2 (arg1)))",
      "           (stack | cell new | vector)) |",
      "           state-machine (vars) (stack) | ? jvm | ? x | cond",
      "           ((= (x) 0) (jvm iload 1))",
      "           ((= (x) 1) (jvm iload 2))",
      "           ((= (x) 2) (jvm imul))",
      "           ((= (x) 3) (jvm ireturn))",
      "           (jvm return));"
    ],
    "preprocessed": "define bytecode-test-mul\n  (lambda (arg0 arg1) |\n      let ((vars | cell new | make-hash | vector (pair 0 0) (pair 1 (arg0)) (pair 2 (arg1)))\n           (stack | cell new | vector)) |\n           state-machine (vars) (stack) | ? jvm | ? x | cond\n           ((= (x) 0) (jvm iload 1))\n           ((= (x) 1) (jvm iload 2))\n           ((= (x) 2) (jvm imul))\n           ((= (x) 3) (jvm ireturn))\n           (jvm return));",
    "code
    "parse": [
      "define",
      "bytecode-test-mul",
      [
        "lambda",
        [
          "arg0",
          "arg1"
        ],
        [
          -1,
          "let",
          [
            [
              "vars",
              [
                -1,
                "cell",
                "new",
                [
                  -1,
                  "make-hash",
                  [
                    -1,
                    "vector",
                    [
                      "pair",
                      "0",
                      "0"
                    ],
                    [
                      "pair",
                      "1",
                      [
                        "arg0"
                      ]
                    ],
                    [
                      "pair",
                      "2",
                      [
                        "arg1"
                      ]
                    ]
                  ]
                ]
              ]
            ],
            [
              "stack",
              [
                -1,
                "cell",
                "new",
                [
                  -1,
                  "vector"
                ]
              ]
            ]
          ],
          [
            -1,
            "state-machine",
            [
              "vars"
            ],
            [
              "stack"
            ],
            [
              -1,
              "?",
              "jvm",
              [
                -1,
                "?",
                "x",
                [
                  -1,
                  "cond",
                  [
                    [
                      "=",
                      [
                        "x"
                      ],
                      "0"
                    ],
                    [
                      "jvm",
                      "iload",
                      "1"
                    ]
                  ],
                  [
                    [
                      "=",
                      [
                        "x"
                      ],
                      "1"
                    ],
                    [
                      "jvm",
                      "iload",
                      "2"
                    ]
                  ],
                  [
                    [
                      "=",
                      [
                        "x"
                      ],
                      "2"
                    ],
                    [
                      "jvm",
                      "imul"
                    ]
                  ],
                  [
                    [
                      "=",
                      [
                        "x"
                      ],
                      "3"
                    ],
                    [
                      "jvm",
                      "ireturn"
                    ]
                  ],
                  [
                    "jvm",
                    "return"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF105;&#xF11D;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF124;&#xF105;&#xF11F;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF133;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF135;&#xF132;&#xF124;&#xF105;&#xF11F;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF135;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF120;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1462
  },
  {
    "role": "code",
    "lines": [
      "= (bytecode-test-mul 5 9) 45;"
    ],
    "preprocessed": "= (bytecode-test-mul 5 9) 45;",
    "code": "21132210010111003210132100133210110132233",
    "parse": [
      "=",
      [
        "bytecode-test-mul",
        "5",
        "9"
      ],
      "45"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF105;&#xF11D;&#xF138;&#xF13C;&#xF121;&#xF124;&#xF11E;&#xF132;&#xF143;&#xF121;",
    "stanza": 1463
  },
  {
    "role": "file",
    "lines": [
      "== COS_JavaTest =="
    ],
    "stanza": 1464
  },
  {
    "role": "comment",
    "lines": [
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# public class COS_JavaTest {",
      "#     private int q = 0;",
      "#     public int add(int x, int y) {",
      "#     return x+y;",
      "#     }",
      "#     public int sub(int x, int y) {",
      "#     return x-y;",
      "#     }",
      "#     public int mult(int x, int y) {",
      "#     return x*y;",
      "#     }",
      "#     public int addmult(int x, int y, int z) {",
      "#     return add(x,mult(y,z));",
      "#     }",
      "#     public void set(int x) {",
      "#     q = x;",
      "#     }",
      "#     public int get() {",
      "#     return q;",
      "#     }",
      "#     public int fact(int x) {",
      "#     return (x>0)?(x*fact(sub(x,1))):1;",
      "#     }",
      "# }",
      "# "
    ],
    "section_description": "class translation 'COS_JavaTest'",
    "section_category": "JAVA",
    "section_index": 54,
    "stanza": 1465
  },
  {
    "role": "code",
    "lines": [
      "class COS_JavaTest ()",
      "   (field super-ref (make-cell 0))",
      "   (method new (set! (super-ref) ((java lang Object) | this)))",
      "   (method super (? x | (get! | super-ref) | x))",
      "   (method unknown (? x | self super | x))",
      "   (field q ((int) new))",
      "   (method <init>-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 2) (jvm aload 0))",
      "         ((= (x) 3) (jvm iconst 0))",
      "         ((= (x) 4) (jvm putfield q (int)))",
      "         ((= (x) 5) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> (self <init>-V))",
      "",
      "   (method add-I-I-I",
      "     (lambda (arg0 arg1) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm iload 1))",
      "         ((= (x) 1) (jvm iload 2))",
      "         ((= (x) 2) (jvm iadd))",
      "         ((= (x) 3) (jvm ireturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method add (self add-I-I-I))",
      "",
      "   (method sub-I-I-I",
      "     (lambda (arg0 arg1) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm iload 1))",
      "         ((= (x) 1) (jvm iload 2))",
      "         ((= (x) 2) (jvm isub))",
      "         ((= (x) 3) (jvm ireturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method sub (self sub-I-I-I))",
      "",
      "   (method mult-I-I-I",
      "     (lambda (arg0 arg1) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm iload 1))",
      "         ((= (x) 1) (jvm iload 2))",
      "         ((= (x) 2) (jvm imul))",
      "         ((= (x) 3) (jvm ireturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method mult (self mult-I-I-I))",
      "",
      "   (method addmult-I-I-I-I",
      "     (lambda (arg0 arg1 arg2) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)) (pair 3 (arg2)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm iload 1))",
      "         ((= (x) 2) (jvm aload 0))",
      "         ((= (x) 3) (jvm iload 2))",
      "         ((= (x) 4) (jvm iload 3))",
      "         ((= (x) 5) (jvm invokevirtual mult-I-I-I 2 1))",
      "         ((= (x) 6) (jvm invokevirtual add-I-I-I 2 1))",
      "         ((= (x) 7) (jvm ireturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method addmult (self addmult-I-I-I-I))",
      "",
      "   (method set-I-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm iload 1))",
      "         ((= (x) 2) (jvm putfield q (int)))",
      "         ((= (x) 3) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method set (self set-I-V))",
      "",
      "   (method get-I",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield q (int)))",
      "         ((= (x) 2) (jvm ireturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method get (self get-I))",
      "",
      "   (method fact-I-I",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm iload 1))",
      "         ((= (x) 1) (jvm ifle 11))",
      "         ((= (x) 2) (jvm iload 1))",
      "         ((= (x) 3) (jvm aload 0))",
      "         ((= (x) 4) (jvm aload 0))",
      "         ((= (x) 5) (jvm iload 1))",
      "         ((= (x) 6) (jvm iconst 1))",
      "         ((= (x) 7) (jvm invokevirtual sub-I-I-I 2 1))",
      "         ((= (x) 8) (jvm invokevirtual fact-I-I 1 1))",
      "         ((= (x) 9) (jvm imul))",
      "         ((= (x) 10) (jvm goto 12))",
      "         ((= (x) 11) (jvm iconst 1))",
      "         ((= (x) 12) (jvm ireturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method fact (self fact-I-I))",
      "",
      " ;"
    ],
    "preprocessed": "class COS_JavaTest ()\n   (field super-ref (make-cell 0))\n   (method new (set! (super-ref) ((java lang Object) | this)))\n   (method super (? x | (get! | super-ref) | x))\n   (method unknown (? x | self super | x))\n   (field q ((int) new))\n   (method <init>-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm invokespecial <init>-V 0 0))\n         ((= (x) 2) (jvm aload 0))\n         ((= (x) 3) (jvm iconst 0))\n         ((= (x) 4) (jvm putfield q (int)))\n         ((= (x) 5) (jvm return))\n         (jvm return))\n   )\n\n   (method <init> (self <init>-V))\n\n   (method add-I-I-I\n     (lambda (arg0 arg1) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm iload 1))\n         ((= (x) 1) (jvm iload 2))\n         ((= (x) 2) (jvm iadd))\n         ((= (x) 3) (jvm ireturn))\n         (jvm return))\n   )\n\n   (method add (self add-I-I-I))\n\n   (method sub-I-I-I\n     (lambda (arg0 arg1) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm iload 1))\n         ((= (x) 1) (jvm iload 2))\n         ((= (x) 2) (jvm isub))\n         ((= (x) 3) (jvm ireturn))\n         (jvm return))\n   )\n\n   (method sub (self sub-I-I-I))\n\n   (method mult-I-I-I\n     (lambda (arg0 arg1) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm iload 1))\n         ((= (x) 1) (jvm iload 2))\n         ((= (x) 2) (jvm imul))\n         ((= (x) 3) (jvm ireturn))\n         (jvm return))\n   )\n\n   (method mult (self mult-I-I-I))\n\n   (method addmult-I-I-I-I\n     (lambda (arg0 arg1 arg2) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)) (pair 3 (arg2)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm iload 1))\n         ((= (x) 2) (jvm aload 0))\n         ((= (x) 3) (jvm iload 2))\n         ((= (x) 4) (jvm iload 3))\n         ((= (x) 5) (jvm invokevirtual mult-I-I-I 2 1))\n         ((= (x) 6) (jvm invokevirtual add-I-I-I 2 1))\n         ((= (x) 7) (jvm ireturn))\n         (jvm return))\n   )\n\n   (method addmult (self addmult-I-I-I-I))\n\n   (method set-I-V\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)) (pair 1 (arg0)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm iload 1))\n         ((= (x) 2) (jvm putfield q (int)))\n         ((= (x) 3) (jvm return))\n         (jvm return))\n   )\n\n   (method set (self set-I-V))\n\n   (method get-I\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm getfield q (int)))\n         ((= (x) 2) (jvm ireturn))\n         (jvm return))\n   )\n\n   (method get (self get-I))\n\n   (method fact-I-I\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)) (pair 1 (arg0)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm iload 1))\n         ((= (x) 1) (jvm ifle 11))\n         ((= (x) 2) (jvm iload 1))\n         ((= (x) 3) (jvm aload 0))\n         ((= (x) 4) (jvm aload 0))\n         ((= (x) 5) (jvm iload 1))\n         ((= (x) 6) (jvm iconst 1))\n         ((= (x) 7) (jvm invokevirtual sub-I-I-I 2 1))\n         ((= (x) 8) (jvm invokevirtual fact-I-I 1 1))\n         ((= (x) 9) (jvm imul))\n         ((= (x) 10) (jvm goto 12))\n         ((= (x) 11) (jvm iconst 1))\n         ((= (x) 12) (jvm ireturn))\n         (jvm return))\n   )\n\n   (method fact (self fact-I-I))\n\n ;",
    "code
    "parse": [
      "class",
      "COS_JavaTest",
      [],
      [
        "field",
        "super-ref",
        [
          "make-cell",
          "0"
        ]
      ],
      [
        "method",
        "new",
        [
          "set!",
          [
            "super-ref"
          ],
          [
            [
              "java",
              "lang",
              "Object"
            ],
            [
              -1,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -1,
                "super-ref"
              ]
            ],
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "q",
        [
          [
            "int"
          ],
          "new"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "iconst",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "q",
                        [
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "5"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "add-I-I-I",
        [
          "lambda",
          [
            "arg0",
            "arg1"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        "2",
                        [
                          "arg1"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "iload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "iload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "iadd"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "ireturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "add",
        [
          "self",
          "add-I-I-I"
        ]
      ],
      [
        "method",
        "sub-I-I-I",
        [
          "lambda",
          [
            "arg0",
            "arg1"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        "2",
                        [
                          "arg1"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "iload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "iload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "isub"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "ireturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "sub",
        [
          "self",
          "sub-I-I-I"
        ]
      ],
      [
        "method",
        "mult-I-I-I",
        [
          "lambda",
          [
            "arg0",
            "arg1"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        "2",
                        [
                          "arg1"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "iload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "iload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "imul"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "ireturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "mult",
        [
          "self",
          "mult-I-I-I"
        ]
      ],
      [
        "method",
        "addmult-I-I-I-I",
        [
          "lambda",
          [
            "arg0",
            "arg1",
            "arg2"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        "2",
                        [
                          "arg1"
                        ]
                      ],
                      [
                        "pair",
                        "3",
                        [
                          "arg2"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "iload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "iload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "iload",
                        "3"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "5"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "mult-I-I-I",
                        "2",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "6"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "add-I-I-I",
                        "2",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "7"
                      ],
                      [
                        "jvm",
                        "ireturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "addmult",
        [
          "self",
          "addmult-I-I-I-I"
        ]
      ],
      [
        "method",
        "set-I-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "iload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "q",
                        [
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "set",
        [
          "self",
          "set-I-V"
        ]
      ],
      [
        "method",
        "get-I",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "q",
                        [
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "ireturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "get",
        [
          "self",
          "get-I"
        ]
      ],
      [
        "method",
        "fact-I-I",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "iload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "ifle",
                        "11"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "iload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "5"
                      ],
                      [
                        "jvm",
                        "iload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "6"
                      ],
                      [
                        "jvm",
                        "iconst",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "7"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "sub-I-I-I",
                        "2",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "8"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "fact-I-I",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "9"
                      ],
                      [
                        "jvm",
                        "imul"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "10"
                      ],
                      [
                        "jvm",
                        "goto",
                        "12"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "11"
                      ],
                      [
                        "jvm",
                        "iconst",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "12"
                      ],
                      [
                        "jvm",
                        "ireturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "fact",
        [
          "self",
          "fact-I-I"
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF124;&#xF105;&#xF120;&#xF143;&#xF132;&#xF130;&#xF119;&#xF131;&#xF112;&#xF132;&#xF123;&#xF11C;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF114;&#xF132;&#xF123;&#xF11D;&#xF132;&#xF131;&#xF112;&#xF121;&#xF132;&#xF132;&#xF124;&#xF100;&#xF116;&#xF124;&#xF106;&#xF111;&#xF123;&#xF10F;&#xF114;&#xF121;&#xF101;&#xF143;&#xF130;&#xF113;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF117;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF132;&#xF123;&#xF11E;&#xF101;&#xF143;&#xF131;&#xF112;&#xF121;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11C;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12C;&#xF115;&#xF12F;&#xF117;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF124;&#xF106;&#xF112;&#xF132;&#xF132;&#xF12D;&#xF11A;&#xF121;&#xF12F;&#xF114;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF116;&#xF132;&#xF123;&#xF11B;&#xF143;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11E;&#xF123;&#xF10F;&#xF116;&#xF133;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF119;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF124;&#xF106;&#xF112;&#xF132;&#xF12D;&#xF11A;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF138;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF117;&#xF132;&#xF12C;&#xF115;&#xF123;&#xF10F;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF106;&#xF113;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF124;&#xF105;&#xF11F;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF135;&#xF132;&#xF124;&#xF105;&#xF11F;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF135;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF113;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF129;&#xF114;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF106;&#xF113;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF106;&#xF114;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF124;&#xF105;&#xF11F;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF135;&#xF132;&#xF124;&#xF105;&#xF11F;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF135;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF114;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF106;&#xF115;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF106;&#xF114;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF106;&#xF116;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF124;&#xF105;&#xF11F;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF135;&#xF132;&#xF124;&#xF105;&#xF11F;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF135;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF120;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF129;&#xF115;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF106;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF106;&#xF117;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF124;&#xF105;&#xF11F;&#xF124;&#xF106;&#xF118;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF135;&#xF132;&#xF124;&#xF105;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF136;&#xF132;&#xF124;&#xF106;&#xF118;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF135;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF136;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF138;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF106;&#xF116;&#xF135;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF139;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF106;&#xF113;&#xF135;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF106;&#xF119;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF106;&#xF117;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF106;&#xF11A;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF124;&#xF106;&#xF112;&#xF132;&#xF12D;&#xF11A;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF131;&#xF117;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF106;&#xF11A;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF106;&#xF11B;&#xF132;&#xF123;&#xF11B;&#xF143;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF124;&#xF106;&#xF112;&#xF132;&#xF12D;&#xF11A;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF131;&#xF116;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF106;&#xF11B;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF106;&#xF11C;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF117;&#xF13E;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF138;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF139;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF119;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF106;&#xF114;&#xF135;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13B;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF106;&#xF11C;&#xF134;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13C;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF120;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13D;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF115;&#xF13F;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13E;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF119;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13F;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF106;&#xF11D;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF106;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1466
  },
  {
    "role": "file",
    "lines": [
      "== COS_JavaValidate =="
    ],
    "stanza": 1467
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "check that automatic conversion is workable",
    "section_category": "JAVA",
    "section_index": 55,
    "stanza": 1468
  },
  {
    "role": "code",
    "lines": [
      "define test1 (COS_JavaTest new);"
    ],
    "preprocessed": "define test1 (COS_JavaTest new);",
    "code": "2110132100110110132210010111113211010011332233",
    "parse": [
      "define",
      "test1",
      [
        "COS_JavaTest",
        "new"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF106;&#xF11E;&#xF132;&#xF124;&#xF105;&#xF120;&#xF12F;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1469
  },
  {
    "role": "comment",
    "lines": [
      "# Note that the names of methods include type information.",
      "# This could easily be removed, but is retained so that overloading",
      "# is possible in the Java code.",
      "# I is integer, V is void.  The last type in the name is the return type."
    ],
    "stanza": 1470
  },
  {
    "role": "code",
    "lines": [
      "= (test1 mult-I-I-I 15 10) 150;"
    ],
    "preprocessed": "= (test1 mult-I-I-I 15 10) 150;",
    "code": "21132210011011013210011001013211113210103321001011032233",
    "parse": [
      "=",
      [
        "test1",
        "mult-I-I-I",
        "15",
        "10"
      ],
      "150"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF124;&#xF106;&#xF116;&#xF142;&#xF13D;&#xF121;&#xF12B;&#xF117;&#xF132;&#xF143;&#xF121;",
    "stanza": 1471
  },
  {
    "role": "comment",
    "lines": [
      "# The type information can be safely omitted if there is no ambiguity"
    ],
    "stanza": 1472
  },
  {
    "role": "code",
    "lines": [
      "= (test1 mult 15 10) 150;"
    ],
    "preprocessed": "= (test1 mult 15 10) 150;",
    "code": "21132210011011013211101003211113210103321001011032233",
    "parse": [
      "=",
      [
        "test1",
        "mult",
        "15",
        "10"
      ],
      "150"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF129;&#xF115;&#xF142;&#xF13D;&#xF121;&#xF12B;&#xF117;&#xF132;&#xF143;&#xF121;",
    "stanza": 1473
  },
  {
    "role": "code",
    "lines": [
      "= (test1 addmult-I-I-I-I 4 15 10) 154;"
    ],
    "preprocessed": "= (test1 addmult-I-I-I-I 4 15 10) 154;",
    "code": "2113221001101101321001100110321003211113210103321001101032233",
    "parse": [
      "=",
      [
        "test1",
        "addmult-I-I-I-I",
        "4",
        "15",
        "10"
      ],
      "154"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF124;&#xF106;&#xF117;&#xF137;&#xF142;&#xF13D;&#xF121;&#xF12B;&#xF11B;&#xF132;&#xF143;&#xF121;",
    "stanza": 1474
  },
  {
    "role": "code",
    "lines": [
      "begin",
      "  (test1 set-I-V 87)",
      "  (= (test1 get-I) 87);"
    ],
    "preprocessed": "begin\n  (test1 set-I-V 87)\n  (= (test1 get-I) 87);",
    "code": "210001100322100110110132100110100132101011133221132210011011013210011010103321010111332233",
    "parse": [
      "begin",
      [
        "test1",
        "set-I-V",
        "87"
      ],
      [
        "=",
        [
          "test1",
          "get-I"
        ],
        "87"
      ]
    ],
    "spider": "&#xF12A;&#xF11D;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF124;&#xF106;&#xF11A;&#xF127;&#xF118;&#xF121;&#xF132;&#xF136;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF124;&#xF106;&#xF11B;&#xF121;&#xF127;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1475
  },
  {
    "role": "code",
    "lines": [
      "= (test1 fact-I-I 0) 1;"
    ],
    "preprocessed": "= (test1 fact-I-I 0) 1;",
    "code": "2113221001101101321001101011320332132233",
    "parse": [
      "=",
      [
        "test1",
        "fact-I-I",
        "0"
      ],
      "1"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF124;&#xF106;&#xF11C;&#xF133;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 1476
  },
  {
    "role": "code",
    "lines": [
      "= (test1 fact-I-I 1) 1;"
    ],
    "preprocessed": "= (test1 fact-I-I 1) 1;",
    "code": "2113221001101101321001101011321332132233",
    "parse": [
      "=",
      [
        "test1",
        "fact-I-I",
        "1"
      ],
      "1"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF124;&#xF106;&#xF11C;&#xF134;&#xF121;&#xF134;&#xF132;&#xF143;&#xF121;",
    "stanza": 1477
  },
  {
    "role": "code",
    "lines": [
      "= (test1 fact-I-I 5) 120;"
    ],
    "preprocessed": "= (test1 fact-I-I 5) 120;",
    "code": "211322100110110132100110101132101332111100032233",
    "parse": [
      "=",
      [
        "test1",
        "fact-I-I",
        "5"
      ],
      "120"
    ],
    "spider": "&#xF136;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF124;&#xF106;&#xF11C;&#xF138;&#xF121;&#xF129;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 1478
  },
  {
    "role": "comment",
    "lines": [
      "# Yay! testing says this works.",
      "# So structure for bytecode interpretation is in place.",
      "# Very few opcodes actually implemented yet though."
    ],
    "stanza": 1479
  },
  {
    "role": "file",
    "lines": [
      "== COS_Geo =="
    ],
    "stanza": 1480
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "another simple little text-adventure space",
    "section_category": "MUD",
    "section_index": 56,
    "stanza": 1481
  },
  {
    "role": "comment",
    "lines": [
      "# let us try to make a slightly more interesting world"
    ],
    "stanza": 1482
  },
  {
    "role": "code",
    "lines": [
      "define make-table",
      "  (lambda (lst)",
      "    (crunch (? x | ? h | ",
      "           assign name (car | x) |",
      "           assign obj (cdr | x) |",
      "           hash-add (h) (name) (obj))",
      "        (append (hash-null) (lst))));"
    ],
    "preprocessed": "define make-table\n  (lambda (lst)\n    (crunch (? x | ? h | \n           assign name (car | x) |\n           assign obj (cdr | x) |\n           hash-add (h) (name) (obj))\n        (append (hash-null) (lst))));",
    "code": "2110132100110111032211010322100100033221100101322110032100111312321100321000111131232111032100111103221011031232100111331232111032110001113221011131232100111331232100011103221000111133221001111033221100011133322110111003221001000133221001000333332233",
    "parse": [
      "define",
      "make-table",
      [
        "lambda",
        [
          "lst"
        ],
        [
          "crunch",
          [
            "?",
            "x",
            [
              -1,
              "?",
              "h",
              [
                -1,
                "assign",
                "name",
                [
                  "car",
                  [
                    -1,
                    "x"
                  ]
                ],
                [
                  -1,
                  "assign",
                  "obj",
                  [
                    "cdr",
                    [
                      -1,
                      "x"
                    ]
                  ],
                  [
                    -1,
                    "hash-add",
                    [
                      "h"
                    ],
                    [
                      "name"
                    ],
                    [
                      "obj"
                    ]
                  ]
                ]
              ]
            ]
          ],
          [
            "append",
            [
              "hash-null"
            ],
            [
              "lst"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF106;&#xF11F;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF126;&#xF119;&#xF121;&#xF132;&#xF128;&#xF116;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF13F;&#xF12A;&#xF120;&#xF101;&#xF143;&#xF141;&#xF12B;&#xF11F;&#xF132;&#xF123;&#xF117;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF101;&#xF143;&#xF141;&#xF12E;&#xF118;&#xF132;&#xF123;&#xF118;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF101;&#xF143;&#xF12A;&#xF11F;&#xF132;&#xF12A;&#xF120;&#xF121;&#xF132;&#xF12B;&#xF11F;&#xF121;&#xF132;&#xF12E;&#xF118;&#xF121;&#xF121;&#xF132;&#xF12F;&#xF11D;&#xF132;&#xF12B;&#xF112;&#xF121;&#xF132;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1483
  },
  {
    "role": "comment",
    "lines": [
      "# note, the quoted strings below are just represented as a big number,",
      "# nothing special"
    ],
    "stanza": 1484
  },
  {
    "role": "code",
    "lines": [
      "define geo-map ",
      "  (make-table",
      "   (map",
      "    (? name (cons (name) (room new (name))))",
      "    (vector \"boston\" \"dublin\" \"paris\" \"genoa\")));"
    ],
    "preprocessed": "define geo-map \n  (make-table\n   (map\n    (? name (cons (name) (room new (name))))\n    (vector \"boston\" \"dublin\" \"paris\" \"genoa\")));",
    "code": "211013210011011113221001101110322110001132211003210011110322101013221001111033221111111032110100113221001111033333221000032100111000032100111000132100111001032100111001133332233",
    "parse": [
      "define",
      "geo-map",
      [
        "make-table",
        [
          "map",
          [
            "?",
            "name",
            [
              "cons",
              [
                "name"
              ],
              [
                "room",
                "new",
                [
                  "name"
                ]
              ]
            ]
          ],
          [
            "vector",
            "\"boston\"",
            "\"dublin\"",
            "\"paris\"",
            "\"genoa\""
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF106;&#xF120;&#xF132;&#xF124;&#xF106;&#xF11F;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF12B;&#xF11F;&#xF132;&#xF123;&#xF116;&#xF132;&#xF12B;&#xF11F;&#xF121;&#xF132;&#xF131;&#xF11F;&#xF12F;&#xF114;&#xF132;&#xF12B;&#xF11F;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF124;&#xF107;&#xF111;&#xF124;&#xF107;&#xF112;&#xF124;&#xF107;&#xF113;&#xF124;&#xF107;&#xF114;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1485
  },
  {
    "role": "code",
    "lines": [
      "define my-links",
      "  (map ",
      "   (? entry (assign src (car | entry) |",
      "            assign dest (cdr | entry) |",
      "            door new (geo-map | src) (geo-map | dest)))",
      "   (vector",
      "    (cons \"boston\" \"dublin\")",
      "    (cons \"dublin\" \"paris\")",
      "    (cons \"boston\" \"paris\")",
      "    (cons \"paris\" \"genoa\")));"
    ],
    "preprocessed": "define my-links\n  (map \n   (? entry (assign src (car | entry) |\n            assign dest (cdr | entry) |\n            door new (geo-map | src) (geo-map | dest)))\n   (vector\n    (cons \"boston\" \"dublin\")\n    (cons \"dublin\" \"paris\")\n    (cons \"boston\" \"paris\")\n    (cons \"paris\" \"genoa\")));",
    "code": "2110132100111010032211000113221100321001110101322111032111111013221011031232100111010133123211103210000000032210111312321001110101331232111111003211010011322100110111131232111111013322100110111131232100000000333322100003221010132100111000032100111000133221010132100111000132100111001033221010132100111000032100111001033221010132100111001032100111001133332233",
    "parse": [
      "define",
      "my-links",
      [
        "map",
        [
          "?",
          "entry",
          [
            "assign",
            "src",
            [
              "car",
              [
                -1,
                "entry"
              ]
            ],
            [
              -1,
              "assign",
              "dest",
              [
                "cdr",
                [
                  -1,
                  "entry"
                ]
              ],
              [
                -1,
                "door",
                "new",
                [
                  "geo-map",
                  [
                    -1,
                    "src"
                  ]
                ],
                [
                  "geo-map",
                  [
                    -1,
                    "dest"
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          "vector",
          [
            "cons",
            "\"boston\"",
            "\"dublin\""
          ],
          [
            "cons",
            "\"dublin\"",
            "\"paris\""
          ],
          [
            "cons",
            "\"boston\"",
            "\"paris\""
          ],
          [
            "cons",
            "\"paris\"",
            "\"genoa\""
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF107;&#xF115;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF107;&#xF116;&#xF132;&#xF141;&#xF131;&#xF11E;&#xF132;&#xF123;&#xF117;&#xF101;&#xF143;&#xF124;&#xF107;&#xF116;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF100;&#xF111;&#xF132;&#xF123;&#xF118;&#xF101;&#xF143;&#xF124;&#xF107;&#xF116;&#xF121;&#xF101;&#xF143;&#xF131;&#xF11D;&#xF12F;&#xF114;&#xF132;&#xF124;&#xF106;&#xF120;&#xF101;&#xF143;&#xF131;&#xF11E;&#xF121;&#xF132;&#xF124;&#xF106;&#xF120;&#xF101;&#xF143;&#xF123;&#xF100;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF116;&#xF124;&#xF107;&#xF111;&#xF124;&#xF107;&#xF112;&#xF121;&#xF132;&#xF123;&#xF116;&#xF124;&#xF107;&#xF112;&#xF124;&#xF107;&#xF113;&#xF121;&#xF132;&#xF123;&#xF116;&#xF124;&#xF107;&#xF111;&#xF124;&#xF107;&#xF113;&#xF121;&#xF132;&#xF123;&#xF116;&#xF124;&#xF107;&#xF113;&#xF124;&#xF107;&#xF114;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1486
  },
  {
    "role": "code",
    "lines": [
      "define myrobo (robo new);"
    ],
    "preprocessed": "define myrobo (robo new);",
    "code": "21101321001000113221000110103211010011332233",
    "parse": [
      "define",
      "myrobo",
      [
        "robo",
        "new"
      ]
    ],
    "spider": "&#xF140;&#xF123;&#xF102;&#xF114;&#xF132;&#xF123;&#xF101;&#xF11B;&#xF12F;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1487
  },
  {
    "role": "code",
    "lines": [
      "myrobo set-room (geo-map \"dublin\");"
    ],
    "preprocessed": "myrobo set-room (geo-map \"dublin\");",
    "code": "2100100011321000100003221001101111321001110001332233",
    "parse": [
      "myrobo",
      "set-room",
      [
        "geo-map",
        "\"dublin\""
      ]
    ],
    "spider": "&#xF123;&#xF102;&#xF114;&#xF123;&#xF101;&#xF111;&#xF132;&#xF124;&#xF106;&#xF120;&#xF124;&#xF107;&#xF112;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1488
  },
  {
    "role": "code",
    "lines": [
      "equal \"dublin\" | myrobo get-room name;"
    ],
    "preprocessed": "equal \"dublin\" | myrobo get-room name;",
    "code": "210003210011100013123210010001132100010010321001111032233",
    "parse": [
      "equal",
      "\"dublin\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "spider": "&#xF13B;&#xF124;&#xF107;&#xF112;&#xF101;&#xF143;&#xF123;&#xF102;&#xF114;&#xF123;&#xF101;&#xF113;&#xF12B;&#xF11F;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1489
  },
  {
    "role": "code",
    "lines": [
      "myrobo update;"
    ],
    "preprocessed": "myrobo update;",
    "code": "21001000113210001010132233",
    "parse": [
      "myrobo",
      "update"
    ],
    "spider": "&#xF123;&#xF102;&#xF114;&#xF123;&#xF101;&#xF116;&#xF132;&#xF143;&#xF121;",
    "stanza": 1490
  },
  {
    "role": "code",
    "lines": [
      "equal \"paris\" | myrobo get-room name;"
    ],
    "preprocessed": "equal \"paris\" | myrobo get-room name;",
    "code": "210003210011100103123210010001132100010010321001111032233",
    "parse": [
      "equal",
      "\"paris\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "spider": "&#xF13B;&#xF124;&#xF107;&#xF113;&#xF101;&#xF143;&#xF123;&#xF102;&#xF114;&#xF123;&#xF101;&#xF113;&#xF12B;&#xF11F;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1491
  },
  {
    "role": "code",
    "lines": [
      "myrobo update;"
    ],
    "preprocessed": "myrobo update;",
    "code": "21001000113210001010132233",
    "parse": [
      "myrobo",
      "update"
    ],
    "spider": "&#xF123;&#xF102;&#xF114;&#xF123;&#xF101;&#xF116;&#xF132;&#xF143;&#xF121;",
    "stanza": 1492
  },
  {
    "role": "code",
    "lines": [
      "equal \"genoa\" | myrobo get-room name;"
    ],
    "preprocessed": "equal \"genoa\" | myrobo get-room name;",
    "code": "210003210011100113123210010001132100010010321001111032233",
    "parse": [
      "equal",
      "\"genoa\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "spider": "&#xF13B;&#xF124;&#xF107;&#xF114;&#xF101;&#xF143;&#xF123;&#xF102;&#xF114;&#xF123;&#xF101;&#xF113;&#xF12B;&#xF11F;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1493
  },
  {
    "role": "code",
    "lines": [
      "myrobo update;"
    ],
    "preprocessed": "myrobo update;",
    "code": "21001000113210001010132233",
    "parse": [
      "myrobo",
      "update"
    ],
    "spider": "&#xF123;&#xF102;&#xF114;&#xF123;&#xF101;&#xF116;&#xF132;&#xF143;&#xF121;",
    "stanza": 1494
  },
  {
    "role": "code",
    "lines": [
      "equal \"paris\" | myrobo get-room name;"
    ],
    "preprocessed": "equal \"paris\" | myrobo get-room name;",
    "code": "210003210011100103123210010001132100010010321001111032233",
    "parse": [
      "equal",
      "\"paris\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "spider": "&#xF13B;&#xF124;&#xF107;&#xF113;&#xF101;&#xF143;&#xF123;&#xF102;&#xF114;&#xF123;&#xF101;&#xF113;&#xF12B;&#xF11F;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1495
  },
  {
    "role": "code",
    "lines": [
      "myrobo update;"
    ],
    "preprocessed": "myrobo update;",
    "code": "21001000113210001010132233",
    "parse": [
      "myrobo",
      "update"
    ],
    "spider": "&#xF123;&#xF102;&#xF114;&#xF123;&#xF101;&#xF116;&#xF132;&#xF143;&#xF121;",
    "stanza": 1496
  },
  {
    "role": "code",
    "lines": [
      "equal \"boston\" | myrobo get-room name;"
    ],
    "preprocessed": "equal \"boston\" | myrobo get-room name;",
    "code": "210003210011100003123210010001132100010010321001111032233",
    "parse": [
      "equal",
      "\"boston\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "spider": "&#xF13B;&#xF124;&#xF107;&#xF111;&#xF101;&#xF143;&#xF123;&#xF102;&#xF114;&#xF123;&#xF101;&#xF113;&#xF12B;&#xF11F;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1497
  },
  {
    "role": "code",
    "lines": [
      "myrobo update;"
    ],
    "preprocessed": "myrobo update;",
    "code": "21001000113210001010132233",
    "parse": [
      "myrobo",
      "update"
    ],
    "spider": "&#xF123;&#xF102;&#xF114;&#xF123;&#xF101;&#xF116;&#xF132;&#xF143;&#xF121;",
    "stanza": 1498
  },
  {
    "role": "code",
    "lines": [
      "equal \"dublin\" | myrobo get-room name;"
    ],
    "preprocessed": "equal \"dublin\" | myrobo get-room name;",
    "code": "210003210011100013123210010001132100010010321001111032233",
    "parse": [
      "equal",
      "\"dublin\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "spider": "&#xF13B;&#xF124;&#xF107;&#xF112;&#xF101;&#xF143;&#xF123;&#xF102;&#xF114;&#xF123;&#xF101;&#xF113;&#xF12B;&#xF11F;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1499
  },
  {
    "role": "code",
    "lines": [
      "myrobo update;"
    ],
    "preprocessed": "myrobo update;",
    "code": "21001000113210001010132233",
    "parse": [
      "myrobo",
      "update"
    ],
    "spider": "&#xF123;&#xF102;&#xF114;&#xF123;&#xF101;&#xF116;&#xF132;&#xF143;&#xF121;",
    "stanza": 1500
  },
  {
    "role": "code",
    "lines": [
      "equal \"paris\" | myrobo get-room name;"
    ],
    "preprocessed": "equal \"paris\" | myrobo get-room name;",
    "code": "210003210011100103123210010001132100010010321001111032233",
    "parse": [
      "equal",
      "\"paris\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "spider": "&#xF13B;&#xF124;&#xF107;&#xF113;&#xF101;&#xF143;&#xF123;&#xF102;&#xF114;&#xF123;&#xF101;&#xF113;&#xF12B;&#xF11F;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1501
  },
  {
    "role": "comment",
    "lines": [
      "# all characters should update together"
    ],
    "stanza": 1502
  },
  {
    "role": "code",
    "lines": [
      "class world (the-places the-links)",
      "       (field things (container new))",
      "       (field names (cell new (hash-null)))",
      "       (field places (cell new 0))",
      "       (field links (cell new 0))",
      "       (method new ",
      "           (begin",
      "         (places set",
      "            (make-table",
      "             (map",
      "              (? name (cons (name) (room new (name))))",
      "              (the-places))))",
      "         (links set",
      "            (map ",
      "             (? entry (assign src (car | entry) |",
      "                      assign dest (cdr | entry) |",
      "                      door new ",
      "                      (places get | src) ",
      "                      (places get | dest)))",
      "             (the-links)))))",
      "       (method add (lambda (place name val) ",
      "             (begin",
      "               (val set-room (places get | place))",
      "               (val set-name | name)",
      "               (names set (hash-add (names get)",
      "                        (name)",
      "                        (val)))",
      "               (things add (val)))))",
      "       (method find (lambda (n) (names get (n) get-room name)))",
      "       (method reachable (lambda (place)",
      "               (let ((exits",
      "                  (select-match (lambda (x) ",
      "                          (instanceof door (x)))",
      "                        (places get (place) inventory))))",
      "                 (map (? door (door access-from ",
      "                        (places get | place)",
      "                        name))",
      "                  (exits)))))",
      "       (method update (begin ",
      "            (map (? x (x update)) ",
      "                 (things inventory))",
      "            (true)));"
    ],
    "preprocessed": "class world (the-places the-links)\n       (field things (container new))\n       (field names (cell new (hash-null)))\n       (field places (cell new 0))\n       (field links (cell new 0))\n       (method new \n           (begin\n         (places set\n            (make-table\n             (map\n              (? name (cons (name) (room new (name))))\n              (the-places))))\n         (links set\n            (map \n             (? entry (assign src (car | entry) |\n                      assign dest (cdr | entry) |\n                      door new \n                      (places get | src) \n                      (places get | dest)))\n             (the-links)))))\n       (method add (lambda (place name val) \n             (begin\n               (val set-room (places get | place))\n               (val set-name | name)\n               (names set (hash-add (names get)\n                        (name)\n                        (val)))\n               (things add (val)))))\n       (method find (lambda (n) (names get (n) get-room name)))\n       (method reachable (lambda (place)\n               (let ((exits\n                  (select-match (lambda (x) \n                          (instanceof door (x)))\n                        (places get (place) inventory))))\n                 (map (? door (door access-from \n                        (places get | place)\n                        name))\n                  (exits)))))\n       (method update (begin \n            (map (? x (x update)) \n                 (things inventory))\n            (true)));",
    "code
    "parse": [
      "class",
      "world",
      [
        "the-places",
        "the-links"
      ],
      [
        "field",
        "things",
        [
          "container",
          "new"
        ]
      ],
      [
        "field",
        "names",
        [
          "cell",
          "new",
          [
            "hash-null"
          ]
        ]
      ],
      [
        "field",
        "places",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "links",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "new",
        [
          "begin",
          [
            "places",
            "set",
            [
              "make-table",
              [
                "map",
                [
                  "?",
                  "name",
                  [
                    "cons",
                    [
                      "name"
                    ],
                    [
                      "room",
                      "new",
                      [
                        "name"
                      ]
                    ]
                  ]
                ],
                [
                  "the-places"
                ]
              ]
            ]
          ],
          [
            "links",
            "set",
            [
              "map",
              [
                "?",
                "entry",
                [
                  "assign",
                  "src",
                  [
                    "car",
                    [
                      -1,
                      "entry"
                    ]
                  ],
                  [
                    -1,
                    "assign",
                    "dest",
                    [
                      "cdr",
                      [
                        -1,
                        "entry"
                      ]
                    ],
                    [
                      -1,
                      "door",
                      "new",
                      [
                        "places",
                        "get",
                        [
                          -1,
                          "src"
                        ]
                      ],
                      [
                        "places",
                        "get",
                        [
                          -1,
                          "dest"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "the-links"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "add",
        [
          "lambda",
          [
            "place",
            "name",
            "val"
          ],
          [
            "begin",
            [
              "val",
              "set-room",
              [
                "places",
                "get",
                [
                  -1,
                  "place"
                ]
              ]
            ],
            [
              "val",
              "set-name",
              [
                -1,
                "name"
              ]
            ],
            [
              "names",
              "set",
              [
                "hash-add",
                [
                  "names",
                  "get"
                ],
                [
                  "name"
                ],
                [
                  "val"
                ]
              ]
            ],
            [
              "things",
              "add",
              [
                "val"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "find",
        [
          "lambda",
          [
            "n"
          ],
          [
            "names",
            "get",
            [
              "n"
            ],
            "get-room",
            "name"
          ]
        ]
      ],
      [
        "method",
        "reachable",
        [
          "lambda",
          [
            "place"
          ],
          [
            "let",
            [
              [
                "exits",
                [
                  "select-match",
                  [
                    "lambda",
                    [
                      "x"
                    ],
                    [
                      "instanceof",
                      "door",
                      [
                        "x"
                      ]
                    ]
                  ],
                  [
                    "places",
                    "get",
                    [
                      "place"
                    ],
                    "inventory"
                  ]
                ]
              ]
            ],
            [
              "map",
              [
                "?",
                "door",
                [
                  "door",
                  "access-from",
                  [
                    "places",
                    "get",
                    [
                      -1,
                      "place"
                    ]
                  ],
                  "name"
                ]
              ],
              [
                "exits"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "update",
        [
          "begin",
          [
            "map",
            [
              "?",
              "x",
              [
                "x",
                "update"
              ]
            ],
            [
              "things",
              "inventory"
            ]
          ],
          [
            "true"
          ]
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF124;&#xF107;&#xF117;&#xF132;&#xF124;&#xF107;&#xF118;&#xF124;&#xF107;&#xF119;&#xF121;&#xF132;&#xF130;&#xF119;&#xF124;&#xF107;&#xF11A;&#xF132;&#xF12E;&#xF11F;&#xF12F;&#xF114;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF124;&#xF107;&#xF11B;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF132;&#xF12B;&#xF112;&#xF121;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF124;&#xF107;&#xF11C;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF12A;&#xF115;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF114;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF124;&#xF107;&#xF11C;&#xF131;&#xF117;&#xF132;&#xF124;&#xF106;&#xF11F;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF12B;&#xF11F;&#xF132;&#xF123;&#xF116;&#xF132;&#xF12B;&#xF11F;&#xF121;&#xF132;&#xF131;&#xF11F;&#xF12F;&#xF114;&#xF132;&#xF12B;&#xF11F;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF107;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12A;&#xF115;&#xF131;&#xF117;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF107;&#xF116;&#xF132;&#xF141;&#xF131;&#xF11E;&#xF132;&#xF123;&#xF117;&#xF101;&#xF143;&#xF124;&#xF107;&#xF116;&#xF121;&#xF101;&#xF143;&#xF141;&#xF123;&#xF100;&#xF111;&#xF132;&#xF123;&#xF118;&#xF101;&#xF143;&#xF124;&#xF107;&#xF116;&#xF121;&#xF101;&#xF143;&#xF131;&#xF11D;&#xF12F;&#xF114;&#xF132;&#xF124;&#xF107;&#xF11C;&#xF131;&#xF116;&#xF101;&#xF143;&#xF131;&#xF11E;&#xF121;&#xF132;&#xF124;&#xF107;&#xF11C;&#xF131;&#xF116;&#xF101;&#xF143;&#xF123;&#xF100;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF107;&#xF119;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF129;&#xF114;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF107;&#xF11D;&#xF12B;&#xF11F;&#xF124;&#xF102;&#xF11B;&#xF121;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF124;&#xF102;&#xF11B;&#xF123;&#xF101;&#xF111;&#xF132;&#xF124;&#xF107;&#xF11C;&#xF131;&#xF116;&#xF101;&#xF143;&#xF124;&#xF107;&#xF11D;&#xF121;&#xF121;&#xF132;&#xF124;&#xF102;&#xF11B;&#xF123;&#xF101;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF11F;&#xF121;&#xF132;&#xF124;&#xF107;&#xF11B;&#xF131;&#xF117;&#xF132;&#xF12A;&#xF11F;&#xF132;&#xF124;&#xF107;&#xF11B;&#xF131;&#xF116;&#xF121;&#xF132;&#xF12B;&#xF11F;&#xF121;&#xF132;&#xF124;&#xF102;&#xF11B;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF107;&#xF11A;&#xF129;&#xF114;&#xF132;&#xF124;&#xF102;&#xF11B;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF107;&#xF11E;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF126;&#xF115;&#xF121;&#xF132;&#xF124;&#xF107;&#xF11B;&#xF131;&#xF116;&#xF132;&#xF126;&#xF115;&#xF121;&#xF123;&#xF101;&#xF113;&#xF12B;&#xF11F;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF107;&#xF11F;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF107;&#xF11D;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF123;&#xF101;&#xF11E;&#xF132;&#xF12F;&#xF11E;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12D;&#xF11C;&#xF131;&#xF11D;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF107;&#xF11C;&#xF131;&#xF116;&#xF132;&#xF124;&#xF107;&#xF11D;&#xF121;&#xF12F;&#xF111;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF131;&#xF11D;&#xF132;&#xF131;&#xF11D;&#xF123;&#xF100;&#xF112;&#xF132;&#xF124;&#xF107;&#xF11C;&#xF131;&#xF116;&#xF101;&#xF143;&#xF124;&#xF107;&#xF11D;&#xF121;&#xF12B;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF123;&#xF101;&#xF11E;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF101;&#xF116;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF128;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF132;&#xF124;&#xF118;&#xF123;&#xF101;&#xF116;&#xF121;&#xF121;&#xF132;&#xF124;&#xF107;&#xF11A;&#xF12F;&#xF111;&#xF121;&#xF121;&#xF132;&#xF134;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1503
  },
  {
    "role": "code",
    "lines": [
      "define geo-world",
      "  (world new ",
      "     (vector \"boston\" \"dublin\" \"paris\" \"genoa\")",
      "     (vector",
      "      (cons \"boston\" \"dublin\")",
      "      (cons \"dublin\" \"paris\")",
      "      (cons \"boston\" \"paris\")",
      "      (cons \"paris\" \"genoa\")));"
    ],
    "preprocessed": "define geo-world\n  (world new \n     (vector \"boston\" \"dublin\" \"paris\" \"genoa\")\n     (vector\n      (cons \"boston\" \"dublin\")\n      (cons \"dublin\" \"paris\")\n      (cons \"boston\" \"paris\")\n      (cons \"paris\" \"genoa\")));",
    "code": "2110132100111111132210011101103211010011322100003210011100003210011100013210011100103210011100113322100003221010132100111000032100111000133221010132100111000132100111001033221010132100111000032100111001033221010132100111001032100111001133332233",
    "parse": [
      "define",
      "geo-world",
      [
        "world",
        "new",
        [
          "vector",
          "\"boston\"",
          "\"dublin\"",
          "\"paris\"",
          "\"genoa\""
        ],
        [
          "vector",
          [
            "cons",
            "\"boston\"",
            "\"dublin\""
          ],
          [
            "cons",
            "\"dublin\"",
            "\"paris\""
          ],
          [
            "cons",
            "\"boston\"",
            "\"paris\""
          ],
          [
            "cons",
            "\"paris\"",
            "\"genoa\""
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF107;&#xF120;&#xF132;&#xF124;&#xF107;&#xF117;&#xF12F;&#xF114;&#xF132;&#xF123;&#xF111;&#xF124;&#xF107;&#xF111;&#xF124;&#xF107;&#xF112;&#xF124;&#xF107;&#xF113;&#xF124;&#xF107;&#xF114;&#xF121;&#xF132;&#xF123;&#xF111;&#xF132;&#xF123;&#xF116;&#xF124;&#xF107;&#xF111;&#xF124;&#xF107;&#xF112;&#xF121;&#xF132;&#xF123;&#xF116;&#xF124;&#xF107;&#xF112;&#xF124;&#xF107;&#xF113;&#xF121;&#xF132;&#xF123;&#xF116;&#xF124;&#xF107;&#xF111;&#xF124;&#xF107;&#xF113;&#xF121;&#xF132;&#xF123;&#xF116;&#xF124;&#xF107;&#xF113;&#xF124;&#xF107;&#xF114;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1504
  },
  {
    "role": "code",
    "lines": [
      "geo-world add \"dublin\" \"robo1\" (robo new);"
    ],
    "preprocessed": "geo-world add \"dublin\" \"robo1\" (robo new);",
    "code": "210011111113211100113210011100013210100000003221000110103211010011332233",
    "parse": [
      "geo-world",
      "add",
      "\"dublin\"",
      "\"robo1\"",
      [
        "robo",
        "new"
      ]
    ],
    "spider": "&#xF124;&#xF107;&#xF120;&#xF129;&#xF114;&#xF124;&#xF107;&#xF112;&#xF124;&#xF108;&#xF111;&#xF132;&#xF123;&#xF101;&#xF11B;&#xF12F;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1505
  },
  {
    "role": "code",
    "lines": [
      "geo-world add \"genoa\" \"robo2\" (robo new);"
    ],
    "preprocessed": "geo-world add \"genoa\" \"robo2\" (robo new);",
    "code": "210011111113211100113210011100113210100000013221000110103211010011332233",
    "parse": [
      "geo-world",
      "add",
      "\"genoa\"",
      "\"robo2\"",
      [
        "robo",
        "new"
      ]
    ],
    "spider": "&#xF124;&#xF107;&#xF120;&#xF129;&#xF114;&#xF124;&#xF107;&#xF114;&#xF124;&#xF108;&#xF112;&#xF132;&#xF123;&#xF101;&#xF11B;&#xF12F;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1506
  },
  {
    "role": "code",
    "lines": [
      "equal \"dublin\" | geo-world find \"robo1\";"
    ],
    "preprocessed": "equal \"dublin\" | geo-world find \"robo1\";",
    "code": "2100032100111000131232100111111132100111110132101000000032233",
    "parse": [
      "equal",
      "\"dublin\"",
      [
        -1,
        "geo-world",
        "find",
        "\"robo1\""
      ]
    ],
    "spider": "&#xF13B;&#xF124;&#xF107;&#xF112;&#xF101;&#xF143;&#xF124;&#xF107;&#xF120;&#xF124;&#xF107;&#xF11E;&#xF124;&#xF108;&#xF111;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | geo-world find \"robo1\";"
    ],
    "stanza": 1507
  },
  {
    "role": "code",
    "lines": [
      "equal \"genoa\" | geo-world find \"robo2\";"
    ],
    "preprocessed": "equal \"genoa\" | geo-world find \"robo2\";",
    "code": "2100032100111001131232100111111132100111110132101000000132233",
    "parse": [
      "equal",
      "\"genoa\"",
      [
        -1,
        "geo-world",
        "find",
        "\"robo2\""
      ]
    ],
    "spider": "&#xF13B;&#xF124;&#xF107;&#xF114;&#xF101;&#xF143;&#xF124;&#xF107;&#xF120;&#xF124;&#xF107;&#xF11E;&#xF124;&#xF108;&#xF112;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | geo-world find \"robo2\";"
    ],
    "stanza": 1508
  },
  {
    "role": "code",
    "lines": [
      "geo-world update;"
    ],
    "preprocessed": "geo-world update;",
    "code": "210011111113210001010132233",
    "parse": [
      "geo-world",
      "update"
    ],
    "spider": "&#xF124;&#xF107;&#xF120;&#xF123;&#xF101;&#xF116;&#xF132;&#xF143;&#xF121;",
    "stanza": 1509
  },
  {
    "role": "code",
    "lines": [
      "equal \"paris\" | geo-world find \"robo1\";"
    ],
    "preprocessed": "equal \"paris\" | geo-world find \"robo1\";",
    "code": "2100032100111001031232100111111132100111110132101000000032233",
    "parse": [
      "equal",
      "\"paris\"",
      [
        -1,
        "geo-world",
        "find",
        "\"robo1\""
      ]
    ],
    "spider": "&#xF13B;&#xF124;&#xF107;&#xF113;&#xF101;&#xF143;&#xF124;&#xF107;&#xF120;&#xF124;&#xF107;&#xF11E;&#xF124;&#xF108;&#xF111;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | geo-world find \"robo1\";"
    ],
    "stanza": 1510
  },
  {
    "role": "code",
    "lines": [
      "equal \"paris\" | geo-world find \"robo2\";"
    ],
    "preprocessed": "equal \"paris\" | geo-world find \"robo2\";",
    "code": "2100032100111001031232100111111132100111110132101000000132233",
    "parse": [
      "equal",
      "\"paris\"",
      [
        -1,
        "geo-world",
        "find",
        "\"robo2\""
      ]
    ],
    "spider": "&#xF13B;&#xF124;&#xF107;&#xF113;&#xF101;&#xF143;&#xF124;&#xF107;&#xF120;&#xF124;&#xF107;&#xF11E;&#xF124;&#xF108;&#xF112;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | geo-world find \"robo2\";"
    ],
    "stanza": 1511
  },
  {
    "role": "code",
    "lines": [
      "equal (vector \"paris\" \"dublin\") | geo-world reachable \"boston\";"
    ],
    "preprocessed": "equal (vector \"paris\" \"dublin\") | geo-world reachable \"boston\";",
    "code": "2100032210000321001110010321001110001331232100111111132100111111032100111000032233",
    "parse": [
      "equal",
      [
        "vector",
        "\"paris\"",
        "\"dublin\""
      ],
      [
        -1,
        "geo-world",
        "reachable",
        "\"boston\""
      ]
    ],
    "spider": "&#xF13B;&#xF132;&#xF123;&#xF111;&#xF124;&#xF107;&#xF113;&#xF124;&#xF107;&#xF112;&#xF121;&#xF101;&#xF143;&#xF124;&#xF107;&#xF120;&#xF124;&#xF107;&#xF11F;&#xF124;&#xF107;&#xF111;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | geo-world reachable \"boston\";"
    ],
    "stanza": 1512
  },
  {
    "role": "code",
    "lines": [
      "equal (vector \"paris\") | geo-world reachable \"genoa\";"
    ],
    "preprocessed": "equal (vector \"paris\") | geo-world reachable \"genoa\";",
    "code": "2100032210000321001110010331232100111111132100111111032100111001132233",
    "parse": [
      "equal",
      [
        "vector",
        "\"paris\""
      ],
      [
        -1,
        "geo-world",
        "reachable",
        "\"genoa\""
      ]
    ],
    "spider": "&#xF13B;&#xF132;&#xF123;&#xF111;&#xF124;&#xF107;&#xF113;&#xF121;&#xF101;&#xF143;&#xF124;&#xF107;&#xF120;&#xF124;&#xF107;&#xF11F;&#xF124;&#xF107;&#xF114;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | geo-world reachable \"genoa\";"
    ],
    "stanza": 1513
  },
  {
    "role": "file",
    "lines": [
      "== COS_JList_impl =="
    ],
    "stanza": 1514
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "native implementation of a Java list, hash classes",
    "section_category": "JAVA",
    "section_index": 57,
    "stanza": 1515
  },
  {
    "role": "code",
    "lines": [
      "define flex-equals",
      "  (lambda (x y) ",
      "    (if (number? | x)",
      "    (if (number? | y)",
      "        (= (x) (y))",
      "        (false))",
      "    (if (number? | y)",
      "        (false)",
      "        (x equals (y)))));"
    ],
    "preprocessed": "define flex-equals\n  (lambda (x y) \n    (if (number? | x)\n    (if (number? | y)\n        (= (x) (y))\n        (false))\n    (if (number? | y)\n        (false)\n        (x equals (y)))));",
    "code": "21101321010000010322110103221001113211001133221111322110003123210011133221111322110003123211001133221132210011133221100113332203332211113221100031232110011332203322100111321111110003221100113333332233",
    "parse": [
      "define",
      "flex-equals",
      [
        "lambda",
        [
          "x",
          "y"
        ],
        [
          "if",
          [
            "number?",
            [
              -1,
              "x"
            ]
          ],
          [
            "if",
            [
              "number?",
              [
                -1,
                "y"
              ]
            ],
            [
              "=",
              [
                "x"
              ],
              [
                "y"
              ]
            ],
            [
              "false"
            ]
          ],
          [
            "if",
            [
              "number?",
              [
                -1,
                "y"
              ]
            ],
            [
              "false"
            ],
            [
              "x",
              "equals",
              [
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF108;&#xF113;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF125;&#xF114;&#xF121;&#xF132;&#xF142;&#xF132;&#xF123;&#xF119;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF142;&#xF132;&#xF123;&#xF119;&#xF101;&#xF143;&#xF125;&#xF114;&#xF121;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF125;&#xF114;&#xF121;&#xF121;&#xF132;&#xF133;&#xF121;&#xF121;&#xF132;&#xF142;&#xF132;&#xF123;&#xF119;&#xF101;&#xF143;&#xF125;&#xF114;&#xF121;&#xF132;&#xF133;&#xF121;&#xF132;&#xF124;&#xF118;&#xF123;&#xF10F;&#xF119;&#xF132;&#xF125;&#xF114;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1516
  },
  {
    "role": "code",
    "lines": [
      "define remove-object",
      "  (lambda (x) ",
      "    (remove-match (lambda (y) ",
      "            (flex-equals (x) (y)))));"
    ],
    "preprocessed": "define remove-object\n  (lambda (x) \n    (remove-match (lambda (y) \n            (flex-equals (x) (y)))));",
    "code": "2110132101000001132211010322100111332211000011322110103221100113322101000001032210011133221100113333332233",
    "parse": [
      "define",
      "remove-object",
      [
        "lambda",
        [
          "x"
        ],
        [
          "remove-match",
          [
            "lambda",
            [
              "y"
            ],
            [
              "flex-equals",
              [
                "x"
              ],
              [
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF108;&#xF114;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12E;&#xF114;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF125;&#xF114;&#xF121;&#xF132;&#xF124;&#xF108;&#xF113;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF125;&#xF114;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1517
  },
  {
    "role": "code",
    "lines": [
      "define contains-object",
      "  (lambda (x lst)",
      "    (if (> (list-length | lst) 0)",
      "    (if (flex-equals (head | lst) (x))",
      "        (true)",
      "        (contains-object (x) (tail | lst)))",
      "    (false)));"
    ],
    "preprocessed": "define contains-object\n  (lambda (x lst)\n    (if (> (list-length | lst) 0)\n    (if (flex-equals (head | lst) (x))\n        (true)\n        (contains-object (x) (tail | lst)))\n    (false)));",
    "code": "21101321010000100322110103221001113210010003322111132210032210010103123210010003320332211113221010000010322100011131232100100033221001113332213322101000010032210011133221001001312321001000333322033332233",
    "parse": [
      "define",
      "contains-object",
      [
        "lambda",
        [
          "x",
          "lst"
        ],
        [
          "if",
          [
            ">",
            [
              "list-length",
              [
                -1,
                "lst"
              ]
            ],
            "0"
          ],
          [
            "if",
            [
              "flex-equals",
              [
                "head",
                [
                  -1,
                  "lst"
                ]
              ],
              [
                "x"
              ]
            ],
            [
              "true"
            ],
            [
              "contains-object",
              [
                "x"
              ],
              [
                "tail",
                [
                  -1,
                  "lst"
                ]
              ]
            ]
          ],
          [
            "false"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF108;&#xF115;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF126;&#xF119;&#xF121;&#xF132;&#xF142;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF101;&#xF143;&#xF126;&#xF119;&#xF121;&#xF133;&#xF121;&#xF132;&#xF142;&#xF132;&#xF124;&#xF108;&#xF113;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF126;&#xF119;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF134;&#xF121;&#xF132;&#xF124;&#xF108;&#xF115;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF126;&#xF119;&#xF121;&#xF121;&#xF121;&#xF132;&#xF133;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1518
  },
  {
    "role": "code",
    "lines": [
      "class COS_JList ()",
      "       (field super ((java lang Object) new))",
      "       (method unknown (lambda (x) (super (x))))",
      "       (field contents (cell new (vector)))",
      "       (method <init>-V (self))",
      "       (method <init> (self <init>-V))",
      "       (method add-Object-V (lambda (x)",
      "             (contents set (prepend (x) (contents get)))))",
      "       (method add (self add-Object-V))",
      "       (method remove-Object-Z (lambda (x)",
      "            (contents set ",
      "                  (remove-object (x) (contents get)))))",
      "       (method remove (self remove-Object-Z))",
      "       (method contains-Object-Z (lambda (x)",
      "                   (contains-object (x) (contents get))))",
      "       (method contains (self contains-Object-Z))",
      "       (method get-I-Object (lambda (x)",
      "             (list-ref (contents get) (x))))",
      "       (method get (self get-I-Object))",
      "       (method iterator-Iterator (COS_JListIterator new (self)))",
      "       (method iterator (self iterator-Iterator))",
      "       (method size-V-I (list-length (contents get)))",
      "       (method size (self size-V-I));"
    ],
    "preprocessed": "class COS_JList ()\n       (field super ((java lang Object) new))\n       (method unknown (lambda (x) (super (x))))\n       (field contents (cell new (vector)))\n       (method <init>-V (self))\n       (method <init> (self <init>-V))\n       (method add-Object-V (lambda (x)\n             (contents set (prepend (x) (contents get)))))\n       (method add (self add-Object-V))\n       (method remove-Object-Z (lambda (x)\n            (contents set \n                  (remove-object (x) (contents get)))))\n       (method remove (self remove-Object-Z))\n       (method contains-Object-Z (lambda (x)\n                   (contains-object (x) (contents get))))\n       (method contains (self contains-Object-Z))\n       (method get-I-Object (lambda (x)\n             (list-ref (contents get) (x))))\n       (method get (self get-I-Object))\n       (method iterator-Iterator (COS_JListIterator new (self)))\n       (method iterator (self iterator-Iterator))\n       (method size-V-I (list-length (contents get)))\n       (method size (self size-V-I));",
    "code
    "parse": [
      "class",
      "COS_JList",
      [],
      [
        "field",
        "super",
        [
          [
            "java",
            "lang",
            "Object"
          ],
          "new"
        ]
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            "super",
            [
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "contents",
        [
          "cell",
          "new",
          [
            "vector"
          ]
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "add-Object-V",
        [
          "lambda",
          [
            "x"
          ],
          [
            "contents",
            "set",
            [
              "prepend",
              [
                "x"
              ],
              [
                "contents",
                "get"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "add",
        [
          "self",
          "add-Object-V"
        ]
      ],
      [
        "method",
        "remove-Object-Z",
        [
          "lambda",
          [
            "x"
          ],
          [
            "contents",
            "set",
            [
              "remove-object",
              [
                "x"
              ],
              [
                "contents",
                "get"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "remove",
        [
          "self",
          "remove-Object-Z"
        ]
      ],
      [
        "method",
        "contains-Object-Z",
        [
          "lambda",
          [
            "x"
          ],
          [
            "contains-object",
            [
              "x"
            ],
            [
              "contents",
              "get"
            ]
          ]
        ]
      ],
      [
        "method",
        "contains",
        [
          "self",
          "contains-Object-Z"
        ]
      ],
      [
        "method",
        "get-I-Object",
        [
          "lambda",
          [
            "x"
          ],
          [
            "list-ref",
            [
              "contents",
              "get"
            ],
            [
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "get",
        [
          "self",
          "get-I-Object"
        ]
      ],
      [
        "method",
        "iterator-Iterator",
        [
          "COS_JListIterator",
          "new",
          [
            "self"
          ]
        ]
      ],
      [
        "method",
        "iterator",
        [
          "self",
          "iterator-Iterator"
        ]
      ],
      [
        "method",
        "size-V-I",
        [
          "list-length",
          [
            "contents",
            "get"
          ]
        ]
      ],
      [
        "method",
        "size",
        [
          "self",
          "size-V-I"
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF124;&#xF108;&#xF116;&#xF143;&#xF132;&#xF130;&#xF119;&#xF12F;&#xF117;&#xF132;&#xF132;&#xF124;&#xF100;&#xF116;&#xF124;&#xF106;&#xF111;&#xF123;&#xF10F;&#xF114;&#xF121;&#xF12F;&#xF114;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11C;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12F;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF12E;&#xF120;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF132;&#xF123;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF116;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF117;&#xF132;&#xF12C;&#xF115;&#xF123;&#xF10F;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF108;&#xF117;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12E;&#xF120;&#xF131;&#xF117;&#xF132;&#xF126;&#xF11D;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12E;&#xF120;&#xF131;&#xF116;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF129;&#xF114;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF108;&#xF117;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF108;&#xF118;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12E;&#xF120;&#xF131;&#xF117;&#xF132;&#xF124;&#xF108;&#xF114;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12E;&#xF120;&#xF131;&#xF116;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF112;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF108;&#xF118;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF108;&#xF119;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF108;&#xF115;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12E;&#xF120;&#xF131;&#xF116;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF108;&#xF11A;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF108;&#xF119;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF108;&#xF11B;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF126;&#xF11C;&#xF132;&#xF12E;&#xF120;&#xF131;&#xF116;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF131;&#xF116;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF108;&#xF11B;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF108;&#xF11C;&#xF132;&#xF124;&#xF108;&#xF11D;&#xF12F;&#xF114;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF108;&#xF11E;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF108;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF108;&#xF11F;&#xF132;&#xF126;&#xF11B;&#xF132;&#xF12E;&#xF120;&#xF131;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF108;&#xF120;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF108;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1519
  },
  {
    "role": "code",
    "lines": [
      "define test1 (COS_JList new);"
    ],
    "preprocessed": "define test1 (COS_JList new);",
    "code": "2110132100110110132210100001013211010011332233",
    "parse": [
      "define",
      "test1",
      [
        "COS_JList",
        "new"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF106;&#xF11E;&#xF132;&#xF124;&#xF108;&#xF116;&#xF12F;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1520
  },
  {
    "role": "code",
    "lines": [
      "begin (test1 add-Object-V (test1))",
      "       (= 1 | test1 size-V-I);"
    ],
    "preprocessed": "begin (test1 add-Object-V (test1))\n       (= 1 | test1 size-V-I);",
    "code": "210001100322100110110132101000011032210011011013332211321312321001101101321010001110332233",
    "parse": [
      "begin",
      [
        "test1",
        "add-Object-V",
        [
          "test1"
        ]
      ],
      [
        "=",
        "1",
        [
          -1,
          "test1",
          "size-V-I"
        ]
      ]
    ],
    "spider": "&#xF12A;&#xF11D;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF124;&#xF108;&#xF117;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF121;&#xF121;&#xF132;&#xF136;&#xF134;&#xF101;&#xF143;&#xF124;&#xF106;&#xF11E;&#xF124;&#xF108;&#xF11F;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1521
  },
  {
    "role": "code",
    "lines": [
      "test1 == (test1 get-I-Object 0);"
    ],
    "preprocessed": "test1 == (test1 get-I-Object 0);",
    "code": "2100110110132111011003221001101101321010001010320332233",
    "parse": [
      "test1",
      "==",
      [
        "test1",
        "get-I-Object",
        "0"
      ]
    ],
    "spider": "&#xF124;&#xF106;&#xF11E;&#xF130;&#xF11D;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF124;&#xF108;&#xF11B;&#xF133;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1522
  },
  {
    "role": "code",
    "lines": [
      "class COS_JHashMap ()",
      "       (field super ((java lang Object) new))",
      "       (method unknown (lambda (x) (super (x))))",
      "       (field contents (cell new (? x 0)))",
      "       (method <init>-V (self))",
      "       (method <init> (self <init>-V))",
      "       (method put-Object-Object-V (lambda (x y)",
      "                     (let ((prev | contents get))",
      "                       (contents set ",
      "                         (? z ",
      "                            (if (flex-equals (z) (x))",
      "                            (y)",
      "                            (prev (z))))))))",
      "       (method put (self put-Object-Object-V))",
      "       (method get-Object-Object (lambda (x)",
      "                   (contents get (x))))",
      "       (method get (self get-Object-Object));"
    ],
    "preprocessed": "class COS_JHashMap ()\n       (field super ((java lang Object) new))\n       (method unknown (lambda (x) (super (x))))\n       (field contents (cell new (? x 0)))\n       (method <init>-V (self))\n       (method <init> (self <init>-V))\n       (method put-Object-Object-V (lambda (x y)\n                     (let ((prev | contents get))\n                       (contents set \n                         (? z \n                            (if (flex-equals (z) (x))\n                            (y)\n                            (prev (z))))))))\n       (method put (self put-Object-Object-V))\n       (method get-Object-Object (lambda (x)\n                   (contents get (x))))\n       (method get (self get-Object-Object));",
    "code
    "parse": [
      "class",
      "COS_JHashMap",
      [],
      [
        "field",
        "super",
        [
          [
            "java",
            "lang",
            "Object"
          ],
          "new"
        ]
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            "super",
            [
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "contents",
        [
          "cell",
          "new",
          [
            "?",
            "x",
            "0"
          ]
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "put-Object-Object-V",
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "let",
            [
              [
                "prev",
                [
                  -1,
                  "contents",
                  "get"
                ]
              ]
            ],
            [
              "contents",
              "set",
              [
                "?",
                "z",
                [
                  "if",
                  [
                    "flex-equals",
                    [
                      "z"
                    ],
                    [
                      "x"
                    ]
                  ],
                  [
                    "y"
                  ],
                  [
                    "prev",
                    [
                      "z"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "put",
        [
          "self",
          "put-Object-Object-V"
        ]
      ],
      [
        "method",
        "get-Object-Object",
        [
          "lambda",
          [
            "x"
          ],
          [
            "contents",
            "get",
            [
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "get",
        [
          "self",
          "get-Object-Object"
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF124;&#xF109;&#xF111;&#xF143;&#xF132;&#xF130;&#xF119;&#xF12F;&#xF117;&#xF132;&#xF132;&#xF124;&#xF100;&#xF116;&#xF124;&#xF106;&#xF111;&#xF123;&#xF10F;&#xF114;&#xF121;&#xF12F;&#xF114;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11C;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12F;&#xF117;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF12E;&#xF120;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF133;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF116;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF117;&#xF132;&#xF12C;&#xF115;&#xF123;&#xF10F;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF109;&#xF112;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF125;&#xF114;&#xF121;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF128;&#xF111;&#xF101;&#xF143;&#xF12E;&#xF120;&#xF131;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12E;&#xF120;&#xF131;&#xF117;&#xF132;&#xF13F;&#xF125;&#xF115;&#xF132;&#xF142;&#xF132;&#xF124;&#xF108;&#xF113;&#xF132;&#xF125;&#xF115;&#xF121;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF125;&#xF114;&#xF121;&#xF132;&#xF128;&#xF111;&#xF132;&#xF125;&#xF115;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF109;&#xF113;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF109;&#xF112;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF109;&#xF114;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF118;&#xF121;&#xF132;&#xF12E;&#xF120;&#xF131;&#xF116;&#xF132;&#xF124;&#xF118;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF131;&#xF116;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF109;&#xF114;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1523
  },
  {
    "role": "code",
    "lines": [
      "define test2 (COS_JHashMap new);"
    ],
    "preprocessed": "define test2 (COS_JHashMap new);",
    "code": "2110132101001010032210100100003211010011332233",
    "parse": [
      "define",
      "test2",
      [
        "COS_JHashMap",
        "new"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF109;&#xF115;&#xF132;&#xF124;&#xF109;&#xF111;&#xF12F;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1524
  },
  {
    "role": "code",
    "lines": [
      "begin (test2 put-Object-Object-V 5 10)",
      "       (= 10 | test2 get 5);"
    ],
    "preprocessed": "begin (test2 put-Object-Object-V 5 10)\n       (= 10 | test2 get 5);",
    "code": "210001100322101001010032101001000132101321010332211321010312321010010100321111010132101332233",
    "parse": [
      "begin",
      [
        "test2",
        "put-Object-Object-V",
        "5",
        "10"
      ],
      [
        "=",
        "10",
        [
          -1,
          "test2",
          "get",
          "5"
        ]
      ]
    ],
    "spider": "&#xF12A;&#xF11D;&#xF132;&#xF124;&#xF109;&#xF115;&#xF124;&#xF109;&#xF112;&#xF138;&#xF13D;&#xF121;&#xF132;&#xF136;&#xF13D;&#xF101;&#xF143;&#xF124;&#xF109;&#xF115;&#xF131;&#xF116;&#xF138;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1525
  },
  {
    "role": "file",
    "lines": [
      "== COS_JList =="
    ],
    "stanza": 1526
  },
  {
    "role": "comment",
    "lines": [
      "# There is Java code for COS_JList available"
    ],
    "stanza": 1527
  },
  {
    "role": "file",
    "lines": [
      "== COS_JHashMap =="
    ],
    "stanza": 1528
  },
  {
    "role": "comment",
    "lines": [
      "# There is Java code for COS_JHashMap available"
    ],
    "stanza": 1529
  },
  {
    "role": "file",
    "lines": [
      "== COS_JList_test =="
    ],
    "stanza": 1530
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "testing the JList class",
    "section_category": "JAVA",
    "section_index": 58,
    "stanza": 1531
  },
  {
    "role": "code",
    "lines": [
      "define test1 (COS_JList new);"
    ],
    "preprocessed": "define test1 (COS_JList new);",
    "code": "2110132100110110132210100001013211010011332233",
    "parse": [
      "define",
      "test1",
      [
        "COS_JList",
        "new"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF106;&#xF11E;&#xF132;&#xF124;&#xF108;&#xF116;&#xF12F;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1532
  },
  {
    "role": "code",
    "lines": [
      "begin (test1 add-Object-V (test1))",
      "       (= 1 (test1 size-V-I));"
    ],
    "preprocessed": "begin (test1 add-Object-V (test1))\n       (= 1 (test1 size-V-I));",
    "code": "21000110032210011011013210100001103221001101101333221132132210011011013210100011103332233",
    "parse": [
      "begin",
      [
        "test1",
        "add-Object-V",
        [
          "test1"
        ]
      ],
      [
        "=",
        "1",
        [
          "test1",
          "size-V-I"
        ]
      ]
    ],
    "spider": "&#xF12A;&#xF11D;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF124;&#xF108;&#xF117;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF121;&#xF121;&#xF132;&#xF136;&#xF134;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF124;&#xF108;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1533
  },
  {
    "role": "code",
    "lines": [
      "(test1 get-I-Object 0) == (test1);"
    ],
    "preprocessed": "(test1 get-I-Object 0) == (test1);",
    "code": "221001101101321010001010320332111011003221001101101332233",
    "parse": [
      [
        "test1",
        "get-I-Object",
        "0"
      ],
      "==",
      [
        "test1"
      ]
    ],
    "spider": "&#xF132;&#xF124;&#xF106;&#xF11E;&#xF124;&#xF108;&#xF11B;&#xF133;&#xF121;&#xF130;&#xF11D;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1534
  },
  {
    "role": "file",
    "lines": [
      "== COS_JListIterator_impl =="
    ],
    "stanza": 1535
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "basic iterator implementation",
    "section_category": "JAVA",
    "section_index": 59,
    "stanza": 1536
  },
  {
    "role": "code",
    "lines": [
      "class COS_JListIterator (ref)",
      "       (field pipe (cell new (ref contents get)))",
      "       (method <init>-V (self))",
      "       (method <init> (self <init>-V))",
      "       (method hasNext-Z (> (list-length | pipe get) 0))",
      "       (method hasNext (self hasNext-Z))",
      "       (method next (self next-Object))",
      "       (method next-Object ",
      "           (let ((result (head | pipe get)))",
      "         (begin ",
      "           (pipe set | tail | pipe get)",
      "           (result))));"
    ],
    "preprocessed": "class COS_JListIterator (ref)\n       (field pipe (cell new (ref contents get)))\n       (method <init>-V (self))\n       (method <init> (self <init>-V))\n       (method hasNext-Z (> (list-length | pipe get) 0))\n       (method hasNext (self hasNext-Z))\n       (method next (self next-Object))\n       (method next-Object \n           (let ((result (head | pipe get)))\n         (begin \n           (pipe set | tail | pipe get)\n           (result))));",
    "code": "21110001132101000110032210100101013322111010003210100101103221111001032110100113221010010101321100111132111101013333221001111132111110101322101001003332210011111321111101103221010010032111110101333221001111132101001011132210032210010103123210100101103211110101332033322100111113210100110003221010010032101001011133322100111113210101111322101001003210100110013332210011111321010011001322101101132221001001010322100011131232101001011032111101013333221000110032210100101103211110110312321001001312321010010110321111010133221001001010333332233",
    "parse": [
      "class",
      "COS_JListIterator",
      [
        "ref"
      ],
      [
        "field",
        "pipe",
        [
          "cell",
          "new",
          [
            "ref",
            "contents",
            "get"
          ]
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "hasNext-Z",
        [
          ">",
          [
            "list-length",
            [
              -1,
              "pipe",
              "get"
            ]
          ],
          "0"
        ]
      ],
      [
        "method",
        "hasNext",
        [
          "self",
          "hasNext-Z"
        ]
      ],
      [
        "method",
        "next",
        [
          "self",
          "next-Object"
        ]
      ],
      [
        "method",
        "next-Object",
        [
          "let",
          [
            [
              "result",
              [
                "head",
                [
                  -1,
                  "pipe",
                  "get"
                ]
              ]
            ]
          ],
          [
            "begin",
            [
              "pipe",
              "set",
              [
                -1,
                "tail",
                [
                  -1,
                  "pipe",
                  "get"
                ]
              ]
            ],
            [
              "result"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF124;&#xF108;&#xF11D;&#xF132;&#xF124;&#xF109;&#xF116;&#xF121;&#xF132;&#xF130;&#xF119;&#xF124;&#xF109;&#xF117;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF132;&#xF124;&#xF109;&#xF116;&#xF12E;&#xF120;&#xF131;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF116;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF117;&#xF132;&#xF12C;&#xF115;&#xF123;&#xF10F;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF109;&#xF118;&#xF132;&#xF137;&#xF132;&#xF126;&#xF11B;&#xF101;&#xF143;&#xF124;&#xF109;&#xF117;&#xF131;&#xF116;&#xF121;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF109;&#xF119;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF109;&#xF118;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12C;&#xF120;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF109;&#xF11A;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF109;&#xF11A;&#xF132;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF104;&#xF11B;&#xF132;&#xF126;&#xF118;&#xF101;&#xF143;&#xF124;&#xF109;&#xF117;&#xF131;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12A;&#xF11D;&#xF132;&#xF124;&#xF109;&#xF117;&#xF131;&#xF117;&#xF101;&#xF143;&#xF126;&#xF11A;&#xF101;&#xF143;&#xF124;&#xF109;&#xF117;&#xF131;&#xF116;&#xF121;&#xF132;&#xF124;&#xF104;&#xF11B;&#xF121;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1537
  },
  {
    "role": "code",
    "lines": [
      "define test1 (COS_JList new);"
    ],
    "preprocessed": "define test1 (COS_JList new);",
    "code": "2110132100110110132210100001013211010011332233",
    "parse": [
      "define",
      "test1",
      [
        "COS_JList",
        "new"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF106;&#xF11E;&#xF132;&#xF124;&#xF108;&#xF116;&#xF12F;&#xF114;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1538
  },
  {
    "role": "code",
    "lines": [
      "begin",
      "  (test1 add 15)",
      "  (test1 add 72)",
      "  (test1 add 99)",
      "  (true);"
    ],
    "preprocessed": "begin\n  (test1 add 15)\n  (test1 add 72)\n  (test1 add 99)\n  (true);",
    "code": "2100011003221001101101321110011321111332210011011013211100113210010003322100110110132111001132110001133221332233",
    "parse": [
      "begin",
      [
        "test1",
        "add",
        "15"
      ],
      [
        "test1",
        "add",
        "72"
      ],
      [
        "test1",
        "add",
        "99"
      ],
      [
        "true"
      ]
    ],
    "spider": "&#xF12A;&#xF11D;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF129;&#xF114;&#xF142;&#xF121;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF129;&#xF114;&#xF126;&#xF119;&#xF121;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF129;&#xF114;&#xF128;&#xF114;&#xF121;&#xF132;&#xF134;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1539
  },
  {
    "role": "code",
    "lines": [
      "define iter1 (test1 iterator);"
    ],
    "preprocessed": "define iter1 (test1 iterator);",
    "code": "211013210100110103221001101101321010001101332233",
    "parse": [
      "define",
      "iter1",
      [
        "test1",
        "iterator"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF109;&#xF11B;&#xF132;&#xF124;&#xF106;&#xF11E;&#xF124;&#xF108;&#xF11E;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1540
  },
  {
    "role": "code",
    "lines": [
      "iter1 hasNext;"
    ],
    "preprocessed": "iter1 hasNext;",
    "code": "2101001101032101001100032233",
    "parse": [
      "iter1",
      "hasNext"
    ],
    "spider": "&#xF124;&#xF109;&#xF11B;&#xF124;&#xF109;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 1541
  },
  {
    "role": "code",
    "lines": [
      "equal 99 | iter1 next;"
    ],
    "preprocessed": "equal 99 | iter1 next;",
    "code": "21000321100011312321010011010321010111132233",
    "parse": [
      "equal",
      "99",
      [
        -1,
        "iter1",
        "next"
      ]
    ],
    "spider": "&#xF13B;&#xF128;&#xF114;&#xF101;&#xF143;&#xF124;&#xF109;&#xF11B;&#xF12C;&#xF120;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | iter1 next;"
    ],
    "stanza": 1542
  },
  {
    "role": "code",
    "lines": [
      "iter1 hasNext;"
    ],
    "preprocessed": "iter1 hasNext;",
    "code": "2101001101032101001100032233",
    "parse": [
      "iter1",
      "hasNext"
    ],
    "spider": "&#xF124;&#xF109;&#xF11B;&#xF124;&#xF109;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 1543
  },
  {
    "role": "code",
    "lines": [
      "equal 72 | iter1 next;"
    ],
    "preprocessed": "equal 72 | iter1 next;",
    "code": "21000321001000312321010011010321010111132233",
    "parse": [
      "equal",
      "72",
      [
        -1,
        "iter1",
        "next"
      ]
    ],
    "spider": "&#xF13B;&#xF126;&#xF119;&#xF101;&#xF143;&#xF124;&#xF109;&#xF11B;&#xF12C;&#xF120;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | iter1 next;"
    ],
    "stanza": 1544
  },
  {
    "role": "code",
    "lines": [
      "iter1 hasNext;"
    ],
    "preprocessed": "iter1 hasNext;",
    "code": "2101001101032101001100032233",
    "parse": [
      "iter1",
      "hasNext"
    ],
    "spider": "&#xF124;&#xF109;&#xF11B;&#xF124;&#xF109;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 1545
  },
  {
    "role": "code",
    "lines": [
      "equal 15 | iter1 next;"
    ],
    "preprocessed": "equal 15 | iter1 next;",
    "code": "21000321111312321010011010321010111132233",
    "parse": [
      "equal",
      "15",
      [
        -1,
        "iter1",
        "next"
      ]
    ],
    "spider": "&#xF13B;&#xF142;&#xF101;&#xF143;&#xF124;&#xF109;&#xF11B;&#xF12C;&#xF120;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | iter1 next;"
    ],
    "stanza": 1546
  },
  {
    "role": "code",
    "lines": [
      "not | iter1 hasNext;"
    ],
    "preprocessed": "not | iter1 hasNext;",
    "code": "210131232101001101032101001100032233",
    "parse": [
      "not",
      [
        -1,
        "iter1",
        "hasNext"
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF124;&#xF109;&#xF11B;&#xF124;&#xF109;&#xF119;&#xF132;&#xF143;&#xF121;",
    "stanza": 1547
  },
  {
    "role": "file",
    "lines": [
      "== COS_JListIterator =="
    ],
    "stanza": 1548
  },
  {
    "role": "comment",
    "lines": [
      "# There is Java code for COS_JListIterator available"
    ],
    "stanza": 1549
  },
  {
    "role": "file",
    "lines": [
      "== COS_JDoor =="
    ],
    "stanza": 1550
  },
  {
    "role": "comment",
    "lines": [
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# ",
      "# public class COS_JDoor {",
      "#     private COS_JRoom src, dest;",
      "#     private String src_cmd, dest_cmd;",
      "# ",
      "#     public COS_JDoor(COS_JRoom src, String src_cmd,",
      "#              COS_JRoom dest, String dest_cmd) {",
      "#     this.src = src;",
      "#     this.dest = dest;",
      "#     this.src_cmd = src_cmd;",
      "#     this.dest_cmd = dest_cmd;",
      "#     src.addDoor(this);",
      "#     dest.addDoor(this);",
      "#     }",
      "# ",
      "#     public COS_JRoom apply(COS_JRoom src, String cmd) {",
      "#     if (src == this.src) {",
      "#         if (src_cmd.equals(cmd)) {",
      "#         return this.dest;",
      "#         }",
      "#     }",
      "#     if (src == this.dest) {",
      "#         if (dest_cmd.equals(cmd)) {",
      "#         return this.src;",
      "#         }",
      "#     }",
      "#     return null;",
      "#     }",
      "# ",
      "#     public COS_JRoom apply(COS_JRoom src) {",
      "#     if (src==this.src) {",
      "#         return this.dest;",
      "#     }",
      "#     if (src==this.dest) {",
      "#         return this.src;",
      "#     }",
      "#     return null;",
      "#     }",
      "# }"
    ],
    "section_description": "class translation 'COS_JDoor'",
    "section_category": "JAVA",
    "section_index": 60,
    "stanza": 1551
  },
  {
    "role": "code",
    "lines": [
      "class COS_JDoor ()",
      "   (field super-ref (make-cell 0))",
      "   (method new (set! (super-ref) ((java lang Object) | this)))",
      "   (method super (? x | (get! | super-ref) | x))",
      "   (method unknown (? x | self super | x))",
      "   (field src (cell new 0))",
      "   (field dest (cell new 0))",
      "   (field src_cmd (cell new 0))",
      "   (field dest_cmd (cell new 0))",
      "   (method <init>-COS_JRoom-String-COS_JRoom-String-V",
      "     (lambda (arg0 arg1 arg2 arg3) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)) (pair 3 (arg2)) (pair 4 (arg3)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 2) (jvm aload 0))",
      "         ((= (x) 3) (jvm aload 1))",
      "         ((= (x) 4) (jvm putfield src (COS_JRoom)))",
      "         ((= (x) 5) (jvm aload 0))",
      "         ((= (x) 6) (jvm aload 3))",
      "         ((= (x) 7) (jvm putfield dest (COS_JRoom)))",
      "         ((= (x) 8) (jvm aload 0))",
      "         ((= (x) 9) (jvm aload 2))",
      "         ((= (x) 10) (jvm putfield src_cmd (java lang String)))",
      "         ((= (x) 11) (jvm aload 0))",
      "         ((= (x) 12) (jvm aload 4))",
      "         ((= (x) 13) (jvm putfield dest_cmd (java lang String)))",
      "         ((= (x) 14) (jvm aload 1))",
      "         ((= (x) 15) (jvm aload 0))",
      "         ((= (x) 16) (jvm invokevirtual addDoor-COS_JDoor-V 1 0))",
      "         ((= (x) 17) (jvm aload 3))",
      "         ((= (x) 18) (jvm aload 0))",
      "         ((= (x) 19) (jvm invokevirtual addDoor-COS_JDoor-V 1 0))",
      "         ((= (x) 20) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> (self <init>-COS_JRoom-String-COS_JRoom-String-V))",
      "",
      "   (method apply-COS_JRoom-String-COS_JRoom",
      "     (lambda (arg0 arg1) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 1))",
      "         ((= (x) 1) (jvm aload 0))",
      "         ((= (x) 2) (jvm getfield src (COS_JRoom)))",
      "         ((= (x) 3) (jvm if_acmpne 12))",
      "         ((= (x) 4) (jvm aload 0))",
      "         ((= (x) 5) (jvm getfield src_cmd (java lang String)))",
      "         ((= (x) 6) (jvm aload 2))",
      "         ((= (x) 7) (jvm invokevirtual equals-Object-Z 1 1))",
      "         ((= (x) 8) (jvm ifeq 12))",
      "         ((= (x) 9) (jvm aload 0))",
      "         ((= (x) 10) (jvm getfield dest (COS_JRoom)))",
      "         ((= (x) 11) (jvm areturn))",
      "         ((= (x) 12) (jvm aload 1))",
      "         ((= (x) 13) (jvm aload 0))",
      "         ((= (x) 14) (jvm getfield dest (COS_JRoom)))",
      "         ((= (x) 15) (jvm if_acmpne 24))",
      "         ((= (x) 16) (jvm aload 0))",
      "         ((= (x) 17) (jvm getfield dest_cmd (java lang String)))",
      "         ((= (x) 18) (jvm aload 2))",
      "         ((= (x) 19) (jvm invokevirtual equals-Object-Z 1 1))",
      "         ((= (x) 20) (jvm ifeq 24))",
      "         ((= (x) 21) (jvm aload 0))",
      "         ((= (x) 22) (jvm getfield src (COS_JRoom)))",
      "         ((= (x) 23) (jvm areturn))",
      "         ((= (x) 24) (jvm aconst_null))",
      "         ((= (x) 25) (jvm areturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method apply (self apply-COS_JRoom-String-COS_JRoom))",
      "",
      "   (method apply-COS_JRoom-COS_JRoom",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 1))",
      "         ((= (x) 1) (jvm aload 0))",
      "         ((= (x) 2) (jvm getfield src (COS_JRoom)))",
      "         ((= (x) 3) (jvm if_acmpne 7))",
      "         ((= (x) 4) (jvm aload 0))",
      "         ((= (x) 5) (jvm getfield dest (COS_JRoom)))",
      "         ((= (x) 6) (jvm areturn))",
      "         ((= (x) 7) (jvm aload 1))",
      "         ((= (x) 8) (jvm aload 0))",
      "         ((= (x) 9) (jvm getfield dest (COS_JRoom)))",
      "         ((= (x) 10) (jvm if_acmpne 14))",
      "         ((= (x) 11) (jvm aload 0))",
      "         ((= (x) 12) (jvm getfield src (COS_JRoom)))",
      "         ((= (x) 13) (jvm areturn))",
      "         ((= (x) 14) (jvm aconst_null))",
      "         ((= (x) 15) (jvm areturn))",
      "         (jvm return))",
      "   )",
      "",
      " ;"
    ],
    "preprocessed": "class COS_JDoor ()\n   (field super-ref (make-cell 0))\n   (method new (set! (super-ref) ((java lang Object) | this)))\n   (method super (? x | (get! | super-ref) | x))\n   (method unknown (? x | self super | x))\n   (field src (cell new 0))\n   (field dest (cell new 0))\n   (field src_cmd (cell new 0))\n   (field dest_cmd (cell new 0))\n   (method <init>-COS_JRoom-String-COS_JRoom-String-V\n     (lambda (arg0 arg1 arg2 arg3) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)) (pair 3 (arg2)) (pair 4 (arg3)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm invokespecial <init>-V 0 0))\n         ((= (x) 2) (jvm aload 0))\n         ((= (x) 3) (jvm aload 1))\n         ((= (x) 4) (jvm putfield src (COS_JRoom)))\n         ((= (x) 5) (jvm aload 0))\n         ((= (x) 6) (jvm aload 3))\n         ((= (x) 7) (jvm putfield dest (COS_JRoom)))\n         ((= (x) 8) (jvm aload 0))\n         ((= (x) 9) (jvm aload 2))\n         ((= (x) 10) (jvm putfield src_cmd (java lang String)))\n         ((= (x) 11) (jvm aload 0))\n         ((= (x) 12) (jvm aload 4))\n         ((= (x) 13) (jvm putfield dest_cmd (java lang String)))\n         ((= (x) 14) (jvm aload 1))\n         ((= (x) 15) (jvm aload 0))\n         ((= (x) 16) (jvm invokevirtual addDoor-COS_JDoor-V 1 0))\n         ((= (x) 17) (jvm aload 3))\n         ((= (x) 18) (jvm aload 0))\n         ((= (x) 19) (jvm invokevirtual addDoor-COS_JDoor-V 1 0))\n         ((= (x) 20) (jvm return))\n         (jvm return))\n   )\n\n   (method <init> (self <init>-COS_JRoom-String-COS_JRoom-String-V))\n\n   (method apply-COS_JRoom-String-COS_JRoom\n     (lambda (arg0 arg1) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 1))\n         ((= (x) 1) (jvm aload 0))\n         ((= (x) 2) (jvm getfield src (COS_JRoom)))\n         ((= (x) 3) (jvm if_acmpne 12))\n         ((= (x) 4) (jvm aload 0))\n         ((= (x) 5) (jvm getfield src_cmd (java lang String)))\n         ((= (x) 6) (jvm aload 2))\n         ((= (x) 7) (jvm invokevirtual equals-Object-Z 1 1))\n         ((= (x) 8) (jvm ifeq 12))\n         ((= (x) 9) (jvm aload 0))\n         ((= (x) 10) (jvm getfield dest (COS_JRoom)))\n         ((= (x) 11) (jvm areturn))\n         ((= (x) 12) (jvm aload 1))\n         ((= (x) 13) (jvm aload 0))\n         ((= (x) 14) (jvm getfield dest (COS_JRoom)))\n         ((= (x) 15) (jvm if_acmpne 24))\n         ((= (x) 16) (jvm aload 0))\n         ((= (x) 17) (jvm getfield dest_cmd (java lang String)))\n         ((= (x) 18) (jvm aload 2))\n         ((= (x) 19) (jvm invokevirtual equals-Object-Z 1 1))\n         ((= (x) 20) (jvm ifeq 24))\n         ((= (x) 21) (jvm aload 0))\n         ((= (x) 22) (jvm getfield src (COS_JRoom)))\n         ((= (x) 23) (jvm areturn))\n         ((= (x) 24) (jvm aconst_null))\n         ((= (x) 25) (jvm areturn))\n         (jvm return))\n   )\n\n   (method apply (self apply-COS_JRoom-String-COS_JRoom))\n\n   (method apply-COS_JRoom-COS_JRoom\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)) (pair 1 (arg0)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 1))\n         ((= (x) 1) (jvm aload 0))\n         ((= (x) 2) (jvm getfield src (COS_JRoom)))\n         ((= (x) 3) (jvm if_acmpne 7))\n         ((= (x) 4) (jvm aload 0))\n         ((= (x) 5) (jvm getfield dest (COS_JRoom)))\n         ((= (x) 6) (jvm areturn))\n         ((= (x) 7) (jvm aload 1))\n         ((= (x) 8) (jvm aload 0))\n         ((= (x) 9) (jvm getfield dest (COS_JRoom)))\n         ((= (x) 10) (jvm if_acmpne 14))\n         ((= (x) 11) (jvm aload 0))\n         ((= (x) 12) (jvm getfield src (COS_JRoom)))\n         ((= (x) 13) (jvm areturn))\n         ((= (x) 14) (jvm aconst_null))\n         ((= (x) 15) (jvm areturn))\n         (jvm return))\n   )\n\n ;",
    "code": "2111000113210100110113232211101000321111000132211011320333221001111132110100113221110032211110001332221000000101321001100000321111100113312321110001033332210011111321101011032211003210011131232211101312321111000133123210011133322100111113211101011322110032100111312321010010032110101103123210011133322111010003211111101322111100103211010011320333221110100032100000000322111100103211010011320333221110100032101001110032211110010321101001132033322111010003210100111013221111001032110100113203332210011111321010011110322110103221001011101321001011110321001100111321010011111331232101101132221000011010312321111001032110100113123210010101312321000032210011103203221010010033322100111032132210010111013332210011103210322100101111033322100111032113221001100111333221001110321003221010011111333322100001101131232111100103211010011312321000033312321001011011322100001101033221000011011331232110032100101101031232110032100111312321100000032221132210011133203322100101101032100010011032033322211322100111332133221001011010321001001101321111101013203203332221132210011133210332210010110103210001001103203332221132210011133211332210010110103210001001103213332221132210011133210033221001011010321000101110321111110132210101000003333222113221001113321013322100101101032100010011032033322211322100111332110332210010110103210001001103211333222113221001113321113322100101101032100010111032100000000322101010000033332221132210011133210003322100101101032100010011032033322211322100111332100133221001011010321000100110321033322211322100111332101033221001011010321000101110321010011100322100000010132100110000032100000001033332221132210011133210113322100101101032100010011032033322211322100111332110033221001011010321000100110321003332221132210011133211013322100101101032100010111032101001110132210000001013210011000003210000000103333222113221001113321110332210010110103210001001103213332221132210011133211113322100101101032100010011032033322211322100111332100003322100101101032100100100132101010000132132033322211322100111332100013322100101101032100010011032113332221132210011133210010332210010110103210001001103203332221132210011133210011332210010110103210010010013210101000013213203332221132210011133210100332210010110103211000110333221001011010321100011033332210011111321111101103221010010032101001111033322100111113210101000103221101032210010111013210010111103312321011011322210000110103123211110010321101001131232100101013123210000322100111032032210100100333221001110321322100101110133322100111032103221001011110333322100001101131232111100103211010011312321000033312321001011011322100001101033221000011011331232110032100101101031232110032100111312321100000032221132210011133203322100101101032100010011032133322211322100111332133221001011010321000100110320333222113221001113321033221001011010321000101100321111110132210101000003333222113221001113321133221001011010321000111101321100333222113221001113321003322100101101032100010011032033322211322100111332101332210010110103210001011003210100111003221000000101321001100000321000000010333322211322100111332110332210010110103210001001103210333222113221001113321113322100101101032100100100132111110111321321333222113221001113321000332210010110103210001110103211003332221132210011133210013322100101101032100010011032033322211322100111332101033221001011010321000101100321000000003221010100000333322211322100111332101133221001011010321001000111333222113221001113321100332210010110103210001001103213332221132210011133211013322100101101032100010011032033322211322100111332111033221001011010321000101100321000000003221010100000333322211322100111332111133221001011010321000111101321100033322211322100111332100003322100101101032100010011032033322211322100111332100013322100101101032100010110032101001110132210000001013210011000003210000000103333222113221001113321001033221001011010321000100110321033322211322100111332100113322100101101032100100100132111110111321321333222113221001113321010033221001011010321000111010321100033322211322100111332101013322100101101032100010011032033322211322100111332101103322100101101032100010110032111111013221010100000333322211322100111332101113322100101101032100100011133322211322100111332110003322100101101032100010101133322211322100111332110013322100101101032100100011133322100101101032110001103333221001111132110001032210100100321010100010333221001111132101010001132211010322100101110133123210110113222100001101031232111100103211010011312321001010131232100003221001110320322101001003332210011103213221001011101333322100001101131232111100103211010011312321000033312321001011011322100001101033221000011011331232110032100101101031232110032100111312321100000032221132210011133203322100101101032100010011032133322211322100111332133221001011010321000100110320333222113221001113321033221001011010321000101100321111110132210101000003333222113221001113321133221001011010321000111101321113332221132210011133210033221001011010321000100110320333222113221001113321013322100101101032100010110032100000000322101010000033332221132210011133211033221001011010321001000111333222113221001113321113322100101101032100010011032133322211322100111332100033221001011010321000100110320333222113221001113321001332210010110103210001011003210000000032210101000003333222113221001113321010332210010110103210001111013211103332221132210011133210113322100101101032100010011032033322211322100111332110033221001011010321000101100321111110132210101000003333222113221001113321101332210010110103210010001113332221132210011133211103322100101101032100010101133322211322100111332111133221001011010321001000111333221001011010321100011033332233",
    "parse": [
      "class",
      "COS_JDoor",
      [],
      [
        "field",
        "super-ref",
        [
          "make-cell",
          "0"
        ]
      ],
      [
        "method",
        "new",
        [
          "set!",
          [
            "super-ref"
          ],
          [
            [
              "java",
              "lang",
              "Object"
            ],
            [
              -1,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -1,
                "super-ref"
              ]
            ],
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "src",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "dest",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "src_cmd",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "dest_cmd",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "<init>-COS_JRoom-String-COS_JRoom-String-V",
        [
          "lambda",
          [
            "arg0",
            "arg1",
            "arg2",
            "arg3"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        "2",
                        [
                          "arg1"
                        ]
                      ],
                      [
                        "pair",
                        "3",
                        [
                          "arg2"
                        ]
                      ],
                      [
                        "pair",
                        "4",
                        [
                          "arg3"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "src",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "5"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "6"
                      ],
                      [
                        "jvm",
                        "aload",
                        "3"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "7"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "dest",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "8"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "9"
                      ],
                      [
                        "jvm",
                        "aload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "10"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "src_cmd",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "11"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "12"
                      ],
                      [
                        "jvm",
                        "aload",
                        "4"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "13"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "dest_cmd",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "14"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "15"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "16"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "addDoor-COS_JDoor-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "17"
                      ],
                      [
                        "jvm",
                        "aload",
                        "3"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "18"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "19"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "addDoor-COS_JDoor-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "20"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-COS_JRoom-String-COS_JRoom-String-V"
        ]
      ],
      [
        "method",
        "apply-COS_JRoom-String-COS_JRoom",
        [
          "lambda",
          [
            "arg0",
            "arg1"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        "2",
                        [
                          "arg1"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "src",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "if_acmpne",
                        "12"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "5"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "src_cmd",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "6"
                      ],
                      [
                        "jvm",
                        "aload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "7"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "equals-Object-Z",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "8"
                      ],
                      [
                        "jvm",
                        "ifeq",
                        "12"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "9"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "10"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "dest",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "11"
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "12"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "13"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "14"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "dest",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "15"
                      ],
                      [
                        "jvm",
                        "if_acmpne",
                        "24"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "16"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "17"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "dest_cmd",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "18"
                      ],
                      [
                        "jvm",
                        "aload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "19"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "equals-Object-Z",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "20"
                      ],
                      [
                        "jvm",
                        "ifeq",
                        "24"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "21"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "22"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "src",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "23"
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "24"
                      ],
                      [
                        "jvm",
                        "aconst_null"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "25"
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "apply",
        [
          "self",
          "apply-COS_JRoom-String-COS_JRoom"
        ]
      ],
      [
        "method",
        "apply-COS_JRoom-COS_JRoom",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "src",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "if_acmpne",
                        "7"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "5"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "dest",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "6"
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "7"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "8"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "9"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "dest",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "10"
                      ],
                      [
                        "jvm",
                        "if_acmpne",
                        "14"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "11"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "12"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "src",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "13"
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "14"
                      ],
                      [
                        "jvm",
                        "aconst_null"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "15"
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF124;&#xF109;&#xF11C;&#xF143;&#xF132;&#xF130;&#xF119;&#xF131;&#xF112;&#xF132;&#xF123;&#xF11C;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF114;&#xF132;&#xF123;&#xF11D;&#xF132;&#xF131;&#xF112;&#xF121;&#xF132;&#xF132;&#xF124;&#xF100;&#xF116;&#xF124;&#xF106;&#xF111;&#xF123;&#xF10F;&#xF114;&#xF121;&#xF101;&#xF143;&#xF130;&#xF113;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF117;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF132;&#xF123;&#xF11E;&#xF101;&#xF143;&#xF131;&#xF112;&#xF121;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11C;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12C;&#xF115;&#xF12F;&#xF117;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF131;&#xF11E;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF123;&#xF100;&#xF111;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF124;&#xF109;&#xF11D;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF124;&#xF109;&#xF11E;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF109;&#xF11F;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF124;&#xF105;&#xF11F;&#xF124;&#xF106;&#xF118;&#xF124;&#xF109;&#xF120;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF135;&#xF132;&#xF124;&#xF105;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF136;&#xF132;&#xF124;&#xF106;&#xF118;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF137;&#xF132;&#xF124;&#xF109;&#xF120;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11E;&#xF123;&#xF10F;&#xF116;&#xF133;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF131;&#xF11E;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF138;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF139;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF136;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF123;&#xF100;&#xF111;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13B;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13C;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF135;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13D;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF124;&#xF109;&#xF11D;&#xF132;&#xF124;&#xF100;&#xF116;&#xF124;&#xF106;&#xF111;&#xF124;&#xF100;&#xF113;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13E;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13F;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF137;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF140;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF124;&#xF109;&#xF11E;&#xF132;&#xF124;&#xF100;&#xF116;&#xF124;&#xF106;&#xF111;&#xF124;&#xF100;&#xF113;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF141;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF142;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF111;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF10A;&#xF112;&#xF134;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF112;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF136;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF113;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF114;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF10A;&#xF112;&#xF134;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF115;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF117;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF109;&#xF11F;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10A;&#xF113;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF124;&#xF105;&#xF11F;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF135;&#xF132;&#xF124;&#xF105;&#xF11F;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF131;&#xF11E;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF11E;&#xF13F;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF138;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF124;&#xF109;&#xF11D;&#xF132;&#xF124;&#xF100;&#xF116;&#xF124;&#xF106;&#xF111;&#xF124;&#xF100;&#xF113;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF139;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF135;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF123;&#xF10F;&#xF118;&#xF134;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13B;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF11B;&#xF13F;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13C;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13D;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF123;&#xF100;&#xF111;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13E;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF118;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13F;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF140;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF141;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF123;&#xF100;&#xF111;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF142;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF11E;&#xF123;&#xF119;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF111;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF112;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF124;&#xF109;&#xF11E;&#xF132;&#xF124;&#xF100;&#xF116;&#xF124;&#xF106;&#xF111;&#xF124;&#xF100;&#xF113;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF113;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF135;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF114;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF123;&#xF10F;&#xF118;&#xF134;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF115;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF11B;&#xF123;&#xF119;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF116;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF117;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF131;&#xF11E;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF118;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF118;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF119;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF11A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF118;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF128;&#xF113;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10A;&#xF113;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10A;&#xF114;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF131;&#xF11E;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF11E;&#xF13A;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF138;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF123;&#xF100;&#xF111;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF139;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF118;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13B;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13C;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF123;&#xF100;&#xF111;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13D;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF11E;&#xF141;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13E;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13F;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF131;&#xF11E;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF140;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF118;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF141;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF142;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF118;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1552
  },
  {
    "role": "file",
    "lines": [
      "== COS_JThing =="
    ],
    "stanza": 1553
  },
  {
    "role": "comment",
    "lines": [
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# ",
      "# public class COS_JThing extends COS_JNamed {",
      "#     private COS_JRoom location;",
      "#     private COS_JRoom nextLocation;",
      "# ",
      "#     public void setRoom(COS_JRoom location) {",
      "#     if (this.location!=null) {",
      "#         this.location.removeThing(this);",
      "#     }",
      "#     this.location = location;",
      "#     location.addThing(this);",
      "#     this.nextLocation = location;",
      "#     }",
      "#     ",
      "#     public COS_JRoom getRoom() {",
      "#     return location;",
      "#     }",
      "# ",
      "#     public void setNextRoom(COS_JRoom location) {",
      "#     nextLocation = location;",
      "#     }",
      "# ",
      "#     public void postUpdate() {",
      "#     if (nextLocation!=location) {",
      "#         setRoom(nextLocation);",
      "#     }",
      "#     }",
      "# }",
      "# "
    ],
    "section_description": "class translation 'COS_JThing'",
    "section_category": "JAVA",
    "section_index": 61,
    "stanza": 1554
  },
  {
    "role": "code",
    "lines": [
      "class COS_JThing ()",
      "   (field super-ref (make-cell 0))",
      "   (method new (set! (super-ref) ((COS_JNamed) | this)))",
      "   (method super (? x | (get! | super-ref) | x))",
      "   (method unknown (? x | self super | x))",
      "   (field location (cell new 0))",
      "   (field nextLocation (cell new 0))",
      "   (method <init>-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 2) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> (self <init>-V))",
      "",
      "   (method setRoom-COS_JRoom-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield location (COS_JRoom)))",
      "         ((= (x) 2) (jvm ifnull 7))",
      "         ((= (x) 3) (jvm aload 0))",
      "         ((= (x) 4) (jvm getfield location (COS_JRoom)))",
      "         ((= (x) 5) (jvm aload 0))",
      "         ((= (x) 6) (jvm invokevirtual removeThing-COS_JThing-V 1 0))",
      "         ((= (x) 7) (jvm aload 0))",
      "         ((= (x) 8) (jvm aload 1))",
      "         ((= (x) 9) (jvm putfield location (COS_JRoom)))",
      "         ((= (x) 10) (jvm aload 1))",
      "         ((= (x) 11) (jvm aload 0))",
      "         ((= (x) 12) (jvm invokevirtual addThing-COS_JThing-V 1 0))",
      "         ((= (x) 13) (jvm aload 0))",
      "         ((= (x) 14) (jvm aload 1))",
      "         ((= (x) 15) (jvm putfield nextLocation (COS_JRoom)))",
      "         ((= (x) 16) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method setRoom (self setRoom-COS_JRoom-V))",
      "",
      "   (method getRoom-COS_JRoom",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield location (COS_JRoom)))",
      "         ((= (x) 2) (jvm areturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method getRoom (self getRoom-COS_JRoom))",
      "",
      "   (method setNextRoom-COS_JRoom-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm aload 1))",
      "         ((= (x) 2) (jvm putfield nextLocation (COS_JRoom)))",
      "         ((= (x) 3) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method setNextRoom (self setNextRoom-COS_JRoom-V))",
      "",
      "   (method postUpdate-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield nextLocation (COS_JRoom)))",
      "         ((= (x) 2) (jvm aload 0))",
      "         ((= (x) 3) (jvm getfield location (COS_JRoom)))",
      "         ((= (x) 4) (jvm if_acmpeq 9))",
      "         ((= (x) 5) (jvm aload 0))",
      "         ((= (x) 6) (jvm aload 0))",
      "         ((= (x) 7) (jvm getfield nextLocation (COS_JRoom)))",
      "         ((= (x) 8) (jvm invokevirtual setRoom-COS_JRoom-V 1 0))",
      "         ((= (x) 9) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method postUpdate (self postUpdate-V))",
      "",
      " ;"
    ],
    "preprocessed": "class COS_JThing ()\n   (field super-ref (make-cell 0))\n   (method new (set! (super-ref) ((COS_JNamed) | this)))\n   (method super (? x | (get! | super-ref) | x))\n   (method unknown (? x | self super | x))\n   (field location (cell new 0))\n   (field nextLocation (cell new 0))\n   (method <init>-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm invokespecial <init>-V 0 0))\n         ((= (x) 2) (jvm return))\n         (jvm return))\n   )\n\n   (method <init> (self <init>-V))\n\n   (method setRoom-COS_JRoom-V\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)) (pair 1 (arg0)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm getfield location (COS_JRoom)))\n         ((= (x) 2) (jvm ifnull 7))\n         ((= (x) 3) (jvm aload 0))\n         ((= (x) 4) (jvm getfield location (COS_JRoom)))\n         ((= (x) 5) (jvm aload 0))\n         ((= (x) 6) (jvm invokevirtual removeThing-COS_JThing-V 1 0))\n         ((= (x) 7) (jvm aload 0))\n         ((= (x) 8) (jvm aload 1))\n         ((= (x) 9) (jvm putfield location (COS_JRoom)))\n         ((= (x) 10) (jvm aload 1))\n         ((= (x) 11) (jvm aload 0))\n         ((= (x) 12) (jvm invokevirtual addThing-COS_JThing-V 1 0))\n         ((= (x) 13) (jvm aload 0))\n         ((= (x) 14) (jvm aload 1))\n         ((= (x) 15) (jvm putfield nextLocation (COS_JRoom)))\n         ((= (x) 16) (jvm return))\n         (jvm return))\n   )\n\n   (method setRoom (self setRoom-COS_JRoom-V))\n\n   (method getRoom-COS_JRoom\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm getfield location (COS_JRoom)))\n         ((= (x) 2) (jvm areturn))\n         (jvm return))\n   )\n\n   (method getRoom (self getRoom-COS_JRoom))\n\n   (method setNextRoom-COS_JRoom-V\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)) (pair 1 (arg0)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm aload 1))\n         ((= (x) 2) (jvm putfield nextLocation (COS_JRoom)))\n         ((= (x) 3) (jvm return))\n         (jvm return))\n   )\n\n   (method setNextRoom (self setNextRoom-COS_JRoom-V))\n\n   (method postUpdate-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm getfield nextLocation (COS_JRoom)))\n         ((= (x) 2) (jvm aload 0))\n         ((= (x) 3) (jvm getfield location (COS_JRoom)))\n         ((= (x) 4) (jvm if_acmpeq 9))\n         ((= (x) 5) (jvm aload 0))\n         ((= (x) 6) (jvm aload 0))\n         ((= (x) 7) (jvm getfield nextLocation (COS_JRoom)))\n         ((= (x) 8) (jvm invokevirtual setRoom-COS_JRoom-V 1 0))\n         ((= (x) 9) (jvm return))\n         (jvm return))\n   )\n\n   (method postUpdate (self postUpdate-V))\n\n ;",
    "code
    "parse": [
      "class",
      "COS_JThing",
      [],
      [
        "field",
        "super-ref",
        [
          "make-cell",
          "0"
        ]
      ],
      [
        "method",
        "new",
        [
          "set!",
          [
            "super-ref"
          ],
          [
            [
              "COS_JNamed"
            ],
            [
              -1,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -1,
                "super-ref"
              ]
            ],
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "location",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "nextLocation",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "setRoom-COS_JRoom-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "location",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "ifnull",
                        "7"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "location",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "5"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "6"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "removeThing-COS_JThing-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "7"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "8"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "9"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "location",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "10"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "11"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "12"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "addThing-COS_JThing-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "13"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "14"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "15"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "nextLocation",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "16"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "setRoom",
        [
          "self",
          "setRoom-COS_JRoom-V"
        ]
      ],
      [
        "method",
        "getRoom-COS_JRoom",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "location",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "getRoom",
        [
          "self",
          "getRoom-COS_JRoom"
        ]
      ],
      [
        "method",
        "setNextRoom-COS_JRoom-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "nextLocation",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "setNextRoom",
        [
          "self",
          "setNextRoom-COS_JRoom-V"
        ]
      ],
      [
        "method",
        "postUpdate-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "nextLocation",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "location",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "if_acmpeq",
                        "9"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "5"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "6"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "7"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "nextLocation",
                        [
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "8"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "setRoom-COS_JRoom-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "9"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "postUpdate",
        [
          "self",
          "postUpdate-V"
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF124;&#xF10A;&#xF115;&#xF143;&#xF132;&#xF130;&#xF119;&#xF131;&#xF112;&#xF132;&#xF123;&#xF11C;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF114;&#xF132;&#xF123;&#xF11D;&#xF132;&#xF131;&#xF112;&#xF121;&#xF132;&#xF132;&#xF124;&#xF10A;&#xF116;&#xF121;&#xF101;&#xF143;&#xF130;&#xF113;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF117;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF132;&#xF123;&#xF11E;&#xF101;&#xF143;&#xF131;&#xF112;&#xF121;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11C;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12C;&#xF115;&#xF12F;&#xF117;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF123;&#xF100;&#xF120;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF124;&#xF10A;&#xF117;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF116;&#xF132;&#xF123;&#xF11B;&#xF143;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11E;&#xF123;&#xF10F;&#xF116;&#xF133;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF117;&#xF132;&#xF12C;&#xF115;&#xF123;&#xF10F;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10A;&#xF118;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF123;&#xF100;&#xF120;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF114;&#xF13A;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF123;&#xF100;&#xF120;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF138;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF139;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF10A;&#xF119;&#xF134;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13B;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13C;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF123;&#xF100;&#xF120;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13D;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13E;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13F;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF10A;&#xF11A;&#xF134;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF140;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF141;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF142;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF124;&#xF10A;&#xF117;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF111;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10A;&#xF11B;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10A;&#xF118;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10A;&#xF11C;&#xF132;&#xF123;&#xF11B;&#xF143;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF123;&#xF100;&#xF120;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF118;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10A;&#xF11D;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10A;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10A;&#xF11E;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF124;&#xF10A;&#xF117;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10A;&#xF11F;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10A;&#xF11E;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10A;&#xF120;&#xF132;&#xF123;&#xF11B;&#xF143;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF124;&#xF10A;&#xF117;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF123;&#xF100;&#xF120;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF11F;&#xF13C;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF138;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF139;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF124;&#xF10A;&#xF117;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13B;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF10A;&#xF118;&#xF134;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13C;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10B;&#xF111;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10A;&#xF120;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1555
  },
  {
    "role": "file",
    "lines": [
      "== COS_JRoom =="
    ],
    "stanza": 1556
  },
  {
    "role": "comment",
    "lines": [
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# ",
      "# import java.util.Iterator;",
      "# ",
      "# public class COS_JRoom extends COS_JNamed {",
      "#     //private COS_JList content = new COS_JList();",
      "#     //private COS_JList doors = new COS_JList();",
      "# ",
      "#     private COS_JList content;",
      "#     private COS_JList doors;",
      "# ",
      "#     public COS_JRoom() {",
      "#     content = new COS_JList();",
      "#     doors = new COS_JList();",
      "#     }",
      "# ",
      "#     public COS_JList get() {",
      "#     return content;",
      "#     }",
      "# ",
      "#     public Iterator getDoors() {",
      "#     return doors.iterator();",
      "#     }",
      "# ",
      "#     public void addDoor(COS_JDoor door) {",
      "#     //System.out.println(\"add door -> \" + getName());",
      "#     doors.add(door);",
      "#     }",
      "# ",
      "#     public void addThing(COS_JThing thing) {",
      "#     content.add(thing);",
      "#     }",
      "# ",
      "#     public void removeThing(COS_JThing thing) {",
      "#     content.remove(thing);",
      "#     }",
      "# }"
    ],
    "section_description": "class translation 'COS_JRoom'",
    "section_category": "JAVA",
    "section_index": 62,
    "stanza": 1557
  },
  {
    "role": "code",
    "lines": [
      "class COS_JRoom ()",
      "   (field super-ref (make-cell 0))",
      "   (method new (set! (super-ref) ((COS_JNamed) | this)))",
      "   (method super (? x | (get! | super-ref) | x))",
      "   (method unknown (? x | self super | x))",
      "   (field content (cell new 0))",
      "   (field doors (cell new 0))",
      "   (method <init>-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 2) (jvm aload 0))",
      "         ((= (x) 3) (jvm new (COS_JList)))",
      "         ((= (x) 4) (jvm dup))",
      "         ((= (x) 5) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 6) (jvm putfield content (COS_JList)))",
      "         ((= (x) 7) (jvm aload 0))",
      "         ((= (x) 8) (jvm new (COS_JList)))",
      "         ((= (x) 9) (jvm dup))",
      "         ((= (x) 10) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 11) (jvm putfield doors (COS_JList)))",
      "         ((= (x) 12) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> (self <init>-V))",
      "",
      "   (method get-COS_JList",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield content (COS_JList)))",
      "         ((= (x) 2) (jvm areturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method get (self get-COS_JList))",
      "",
      "   (method getDoors-Iterator",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield doors (COS_JList)))",
      "         ((= (x) 2) (jvm invokevirtual iterator-Iterator 0 1))",
      "         ((= (x) 3) (jvm areturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method getDoors (self getDoors-Iterator))",
      "",
      "   (method addDoor-COS_JDoor-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield doors (COS_JList)))",
      "         ((= (x) 2) (jvm aload 1))",
      "         ((= (x) 3) (jvm invokevirtual add-Object-V 1 0))",
      "         ((= (x) 4) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method addDoor (self addDoor-COS_JDoor-V))",
      "",
      "   (method addThing-COS_JThing-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield content (COS_JList)))",
      "         ((= (x) 2) (jvm aload 1))",
      "         ((= (x) 3) (jvm invokevirtual add-Object-V 1 0))",
      "         ((= (x) 4) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method addThing (self addThing-COS_JThing-V))",
      "",
      "   (method removeThing-COS_JThing-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield content (COS_JList)))",
      "         ((= (x) 2) (jvm aload 1))",
      "         ((= (x) 3) (jvm invokevirtual remove-Object-Z 1 1))",
      "         ((= (x) 4) (jvm pop))",
      "         ((= (x) 5) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method removeThing (self removeThing-COS_JThing-V))",
      "",
      " ;"
    ],
    "preprocessed": "class COS_JRoom ()\n   (field super-ref (make-cell 0))\n   (method new (set! (super-ref) ((COS_JNamed) | this)))\n   (method super (? x | (get! | super-ref) | x))\n   (method unknown (? x | self super | x))\n   (field content (cell new 0))\n   (field doors (cell new 0))\n   (method <init>-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm invokespecial <init>-V 0 0))\n         ((= (x) 2) (jvm aload 0))\n         ((= (x) 3) (jvm new (COS_JList)))\n         ((= (x) 4) (jvm dup))\n         ((= (x) 5) (jvm invokespecial <init>-V 0 0))\n         ((= (x) 6) (jvm putfield content (COS_JList)))\n         ((= (x) 7) (jvm aload 0))\n         ((= (x) 8) (jvm new (COS_JList)))\n         ((= (x) 9) (jvm dup))\n         ((= (x) 10) (jvm invokespecial <init>-V 0 0))\n         ((= (x) 11) (jvm putfield doors (COS_JList)))\n         ((= (x) 12) (jvm return))\n         (jvm return))\n   )\n\n   (method <init> (self <init>-V))\n\n   (method get-COS_JList\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm getfield content (COS_JList)))\n         ((= (x) 2) (jvm areturn))\n         (jvm return))\n   )\n\n   (method get (self get-COS_JList))\n\n   (method getDoors-Iterator\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm getfield doors (COS_JList)))\n         ((= (x) 2) (jvm invokevirtual iterator-Iterator 0 1))\n         ((= (x) 3) (jvm areturn))\n         (jvm return))\n   )\n\n   (method getDoors (self getDoors-Iterator))\n\n   (method addDoor-COS_JDoor-V\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)) (pair 1 (arg0)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm getfield doors (COS_JList)))\n         ((= (x) 2) (jvm aload 1))\n         ((= (x) 3) (jvm invokevirtual add-Object-V 1 0))\n         ((= (x) 4) (jvm return))\n         (jvm return))\n   )\n\n   (method addDoor (self addDoor-COS_JDoor-V))\n\n   (method addThing-COS_JThing-V\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)) (pair 1 (arg0)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm getfield content (COS_JList)))\n         ((= (x) 2) (jvm aload 1))\n         ((= (x) 3) (jvm invokevirtual add-Object-V 1 0))\n         ((= (x) 4) (jvm return))\n         (jvm return))\n   )\n\n   (method addThing (self addThing-COS_JThing-V))\n\n   (method removeThing-COS_JThing-V\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)) (pair 1 (arg0)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm getfield content (COS_JList)))\n         ((= (x) 2) (jvm aload 1))\n         ((= (x) 3) (jvm invokevirtual remove-Object-Z 1 1))\n         ((= (x) 4) (jvm pop))\n         ((= (x) 5) (jvm return))\n         (jvm return))\n   )\n\n   (method removeThing (self removeThing-COS_JThing-V))\n\n ;",
    "code
    "parse": [
      "class",
      "COS_JRoom",
      [],
      [
        "field",
        "super-ref",
        [
          "make-cell",
          "0"
        ]
      ],
      [
        "method",
        "new",
        [
          "set!",
          [
            "super-ref"
          ],
          [
            [
              "COS_JNamed"
            ],
            [
              -1,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -1,
                "super-ref"
              ]
            ],
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "content",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "doors",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "new",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "5"
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "6"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "content",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "7"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "8"
                      ],
                      [
                        "jvm",
                        "new",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "9"
                      ],
                      [
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "10"
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "11"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "doors",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "12"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "get-COS_JList",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "content",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "get",
        [
          "self",
          "get-COS_JList"
        ]
      ],
      [
        "method",
        "getDoors-Iterator",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "doors",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "iterator-Iterator",
                        "0",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "getDoors",
        [
          "self",
          "getDoors-Iterator"
        ]
      ],
      [
        "method",
        "addDoor-COS_JDoor-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "doors",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "add-Object-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "addDoor",
        [
          "self",
          "addDoor-COS_JDoor-V"
        ]
      ],
      [
        "method",
        "addThing-COS_JThing-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "content",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "add-Object-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "addThing",
        [
          "self",
          "addThing-COS_JThing-V"
        ]
      ],
      [
        "method",
        "removeThing-COS_JThing-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "content",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "remove-Object-Z",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "pop"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "5"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "removeThing",
        [
          "self",
          "removeThing-COS_JThing-V"
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF124;&#xF10A;&#xF111;&#xF143;&#xF132;&#xF130;&#xF119;&#xF131;&#xF112;&#xF132;&#xF123;&#xF11C;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF114;&#xF132;&#xF123;&#xF11D;&#xF132;&#xF131;&#xF112;&#xF121;&#xF132;&#xF132;&#xF124;&#xF10A;&#xF116;&#xF121;&#xF101;&#xF143;&#xF130;&#xF113;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF117;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF132;&#xF123;&#xF11E;&#xF101;&#xF143;&#xF131;&#xF112;&#xF121;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11C;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12C;&#xF115;&#xF12F;&#xF117;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF131;&#xF115;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF124;&#xF10B;&#xF112;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF116;&#xF132;&#xF123;&#xF11B;&#xF143;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11E;&#xF123;&#xF10F;&#xF116;&#xF133;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12F;&#xF114;&#xF132;&#xF124;&#xF108;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF111;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF138;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11E;&#xF123;&#xF10F;&#xF116;&#xF133;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF139;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF131;&#xF115;&#xF132;&#xF124;&#xF108;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13B;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12F;&#xF114;&#xF132;&#xF124;&#xF108;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13C;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF111;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13D;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11E;&#xF123;&#xF10F;&#xF116;&#xF133;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13E;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF124;&#xF10B;&#xF112;&#xF132;&#xF124;&#xF108;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13F;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF117;&#xF132;&#xF12C;&#xF115;&#xF123;&#xF10F;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10B;&#xF113;&#xF132;&#xF123;&#xF11B;&#xF143;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF131;&#xF115;&#xF132;&#xF124;&#xF108;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF118;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF131;&#xF116;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10B;&#xF113;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10B;&#xF114;&#xF132;&#xF123;&#xF11B;&#xF143;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF124;&#xF10B;&#xF112;&#xF132;&#xF124;&#xF108;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF108;&#xF11C;&#xF133;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF118;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10B;&#xF115;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10B;&#xF114;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10A;&#xF112;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF124;&#xF10B;&#xF112;&#xF132;&#xF124;&#xF108;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF108;&#xF117;&#xF134;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10B;&#xF116;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10A;&#xF112;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10A;&#xF11A;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF131;&#xF115;&#xF132;&#xF124;&#xF108;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF108;&#xF117;&#xF134;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10B;&#xF117;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10A;&#xF11A;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10A;&#xF119;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF131;&#xF115;&#xF132;&#xF124;&#xF108;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF108;&#xF118;&#xF134;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF10B;&#xF118;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF138;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10B;&#xF119;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10A;&#xF119;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1558
  },
  {
    "role": "file",
    "lines": [
      "== COS_JNamed =="
    ],
    "stanza": 1559
  },
  {
    "role": "comment",
    "lines": [
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# ",
      "# public class COS_JNamed {",
      "#     private String name = \"-\";",
      "#     private COS_JWorld world = null;",
      "# ",
      "#     void setName(String name) {",
      "#     this.name = name;",
      "#     }",
      "# ",
      "#     String getName() {",
      "#     return name;",
      "#     }",
      "# ",
      "#     void setWorld(COS_JWorld world) {",
      "#     this.world = world;",
      "#     }",
      "# ",
      "#     COS_JWorld getWorld() {",
      "#     return world;",
      "#     }",
      "# ",
      "#     void update() {",
      "#     }",
      "# ",
      "#     void postUpdate() {",
      "#     }",
      "# }"
    ],
    "section_description": "class translation 'COS_JNamed'",
    "section_category": "JAVA",
    "section_index": 63,
    "stanza": 1560
  },
  {
    "role": "code",
    "lines": [
      "class COS_JNamed ()",
      "   (field super-ref (make-cell 0))",
      "   (method new (set! (super-ref) ((java lang Object) | this)))",
      "   (method super (? x | (get! | super-ref) | x))",
      "   (method unknown (? x | self super | x))",
      "   (field name (cell new 0))",
      "   (field world (cell new 0))",
      "   (method <init>-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 2) (jvm aload 0))",
      "         ((= (x) 3) (jvm ldc (String new int-init \"-\")))",
      "         ((= (x) 4) (jvm putfield name (java lang String)))",
      "         ((= (x) 5) (jvm aload 0))",
      "         ((= (x) 6) (jvm aconst_null))",
      "         ((= (x) 7) (jvm putfield world (COS_JWorld)))",
      "         ((= (x) 8) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> (self <init>-V))",
      "",
      "   (method setName-String-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm aload 1))",
      "         ((= (x) 2) (jvm putfield name (java lang String)))",
      "         ((= (x) 3) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method setName (self setName-String-V))",
      "",
      "   (method getName-String",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield name (java lang String)))",
      "         ((= (x) 2) (jvm areturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method getName (self getName-String))",
      "",
      "   (method setWorld-COS_JWorld-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm aload 1))",
      "         ((= (x) 2) (jvm putfield world (COS_JWorld)))",
      "         ((= (x) 3) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method setWorld (self setWorld-COS_JWorld-V))",
      "",
      "   (method getWorld-COS_JWorld",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield world (COS_JWorld)))",
      "         ((= (x) 2) (jvm areturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method getWorld (self getWorld-COS_JWorld))",
      "",
      "   (method update-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method update (self update-V))",
      "",
      "   (method postUpdate-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method postUpdate (self postUpdate-V))",
      "",
      " ;"
    ],
    "preprocessed": "class COS_JNamed ()\n   (field super-ref (make-cell 0))\n   (method new (set! (super-ref) ((java lang Object) | this)))\n   (method super (? x | (get! | super-ref) | x))\n   (method unknown (? x | self super | x))\n   (field name (cell new 0))\n   (field world (cell new 0))\n   (method <init>-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm invokespecial <init>-V 0 0))\n         ((= (x) 2) (jvm aload 0))\n         ((= (x) 3) (jvm ldc (String new int-init \"-\")))\n         ((= (x) 4) (jvm putfield name (java lang String)))\n         ((= (x) 5) (jvm aload 0))\n         ((= (x) 6) (jvm aconst_null))\n         ((= (x) 7) (jvm putfield world (COS_JWorld)))\n         ((= (x) 8) (jvm return))\n         (jvm return))\n   )\n\n   (method <init> (self <init>-V))\n\n   (method setName-String-V\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)) (pair 1 (arg0)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm aload 1))\n         ((= (x) 2) (jvm putfield name (java lang String)))\n         ((= (x) 3) (jvm return))\n         (jvm return))\n   )\n\n   (method setName (self setName-String-V))\n\n   (method getName-String\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm getfield name (java lang String)))\n         ((= (x) 2) (jvm areturn))\n         (jvm return))\n   )\n\n   (method getName (self getName-String))\n\n   (method setWorld-COS_JWorld-V\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)) (pair 1 (arg0)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm aload 1))\n         ((= (x) 2) (jvm putfield world (COS_JWorld)))\n         ((= (x) 3) (jvm return))\n         (jvm return))\n   )\n\n   (method setWorld (self setWorld-COS_JWorld-V))\n\n   (method getWorld-COS_JWorld\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm getfield world (COS_JWorld)))\n         ((= (x) 2) (jvm areturn))\n         (jvm return))\n   )\n\n   (method getWorld (self getWorld-COS_JWorld))\n\n   (method update-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm return))\n         (jvm return))\n   )\n\n   (method update (self update-V))\n\n   (method postUpdate-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm return))\n         (jvm return))\n   )\n\n   (method postUpdate (self postUpdate-V))\n\n ;",
    "code
    "parse": [
      "class",
      "COS_JNamed",
      [],
      [
        "field",
        "super-ref",
        [
          "make-cell",
          "0"
        ]
      ],
      [
        "method",
        "new",
        [
          "set!",
          [
            "super-ref"
          ],
          [
            [
              "java",
              "lang",
              "Object"
            ],
            [
              -1,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -1,
                "super-ref"
              ]
            ],
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "name",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "world",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "ldc",
                        [
                          "String",
                          "new",
                          "int-init",
                          "\"-\""
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "name",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "5"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "6"
                      ],
                      [
                        "jvm",
                        "aconst_null"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "7"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "world",
                        [
                          "COS_JWorld"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "8"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "setName-String-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "name",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "setName",
        [
          "self",
          "setName-String-V"
        ]
      ],
      [
        "method",
        "getName-String",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "name",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "getName",
        [
          "self",
          "getName-String"
        ]
      ],
      [
        "method",
        "setWorld-COS_JWorld-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "world",
                        [
                          "COS_JWorld"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "setWorld",
        [
          "self",
          "setWorld-COS_JWorld-V"
        ]
      ],
      [
        "method",
        "getWorld-COS_JWorld",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "world",
                        [
                          "COS_JWorld"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "getWorld",
        [
          "self",
          "getWorld-COS_JWorld"
        ]
      ],
      [
        "method",
        "update-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "update",
        [
          "self",
          "update-V"
        ]
      ],
      [
        "method",
        "postUpdate-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "postUpdate",
        [
          "self",
          "postUpdate-V"
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF124;&#xF10A;&#xF116;&#xF143;&#xF132;&#xF130;&#xF119;&#xF131;&#xF112;&#xF132;&#xF123;&#xF11C;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF114;&#xF132;&#xF123;&#xF11D;&#xF132;&#xF131;&#xF112;&#xF121;&#xF132;&#xF132;&#xF124;&#xF100;&#xF116;&#xF124;&#xF106;&#xF111;&#xF123;&#xF10F;&#xF114;&#xF121;&#xF101;&#xF143;&#xF130;&#xF113;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF117;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF132;&#xF123;&#xF11E;&#xF101;&#xF143;&#xF131;&#xF112;&#xF121;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11C;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12C;&#xF115;&#xF12F;&#xF117;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF12B;&#xF11F;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF124;&#xF107;&#xF117;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF116;&#xF132;&#xF123;&#xF11B;&#xF143;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11E;&#xF123;&#xF10F;&#xF116;&#xF133;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11A;&#xF132;&#xF124;&#xF100;&#xF113;&#xF12F;&#xF114;&#xF124;&#xF100;&#xF115;&#xF124;&#xF10B;&#xF11A;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF12B;&#xF11F;&#xF132;&#xF124;&#xF100;&#xF116;&#xF124;&#xF106;&#xF111;&#xF124;&#xF100;&#xF113;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF138;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF139;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF124;&#xF107;&#xF117;&#xF132;&#xF124;&#xF10B;&#xF11B;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13B;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF117;&#xF132;&#xF12C;&#xF115;&#xF123;&#xF10F;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10B;&#xF11C;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF12B;&#xF11F;&#xF132;&#xF124;&#xF100;&#xF116;&#xF124;&#xF106;&#xF111;&#xF124;&#xF100;&#xF113;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10B;&#xF11D;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10B;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10B;&#xF11E;&#xF132;&#xF123;&#xF11B;&#xF143;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF12B;&#xF11F;&#xF132;&#xF124;&#xF100;&#xF116;&#xF124;&#xF106;&#xF111;&#xF124;&#xF100;&#xF113;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF118;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10B;&#xF11F;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10B;&#xF11E;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10B;&#xF120;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF124;&#xF107;&#xF117;&#xF132;&#xF124;&#xF10B;&#xF11B;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10C;&#xF111;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10B;&#xF120;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10C;&#xF112;&#xF132;&#xF123;&#xF11B;&#xF143;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF124;&#xF107;&#xF117;&#xF132;&#xF124;&#xF10B;&#xF11B;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF118;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10C;&#xF113;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10C;&#xF112;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10C;&#xF114;&#xF132;&#xF123;&#xF11B;&#xF143;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF101;&#xF116;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10C;&#xF114;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10A;&#xF120;&#xF132;&#xF123;&#xF11B;&#xF143;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10B;&#xF111;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10A;&#xF120;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1561
  },
  {
    "role": "file",
    "lines": [
      "== COS_JWorld =="
    ],
    "stanza": 1562
  },
  {
    "role": "comment",
    "lines": [
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# ",
      "# import java.util.Iterator;",
      "# ",
      "# public class COS_JWorld {",
      "#     private COS_JHashMap content;",
      "#     private COS_JList inventory;",
      "# ",
      "#     public COS_JWorld() {",
      "#     content = new COS_JHashMap();",
      "#     inventory = new COS_JList();",
      "#     }",
      "# ",
      "#     public void add(COS_JNamed named, String name) {",
      "#     named.setName(name);",
      "#     content.put(named.getName(),named);",
      "#     inventory.add(named);",
      "#     }",
      "# ",
      "#     public COS_JNamed get(String name) {",
      "#     return (COS_JNamed)content.get(new String(name));",
      "#     }",
      "# ",
      "#     public void update() {",
      "#     for (Iterator i = inventory.iterator(); i.hasNext(); ) {",
      "#         COS_JNamed o = (COS_JNamed) i.next();",
      "#         o.update();",
      "#     }",
      "#     for (Iterator i = inventory.iterator(); i.hasNext(); ) {",
      "#         COS_JNamed o = (COS_JNamed) i.next();",
      "#         o.postUpdate();",
      "#     }",
      "#     }",
      "# }"
    ],
    "section_description": "class translation 'COS_JWorld'",
    "section_category": "JAVA",
    "section_index": 64,
    "stanza": 1563
  },
  {
    "role": "code",
    "lines": [
      "class COS_JWorld ()",
      "   (field super-ref (make-cell 0))",
      "   (method new (set! (super-ref) ((java lang Object) | this)))",
      "   (method super (? x | (get! | super-ref) | x))",
      "   (method unknown (? x | self super | x))",
      "   (field content (cell new 0))",
      "   (field inventory (cell new 0))",
      "   (method <init>-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 2) (jvm aload 0))",
      "         ((= (x) 3) (jvm new (COS_JHashMap)))",
      "         ((= (x) 4) (jvm dup))",
      "         ((= (x) 5) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 6) (jvm putfield content (COS_JHashMap)))",
      "         ((= (x) 7) (jvm aload 0))",
      "         ((= (x) 8) (jvm new (COS_JList)))",
      "         ((= (x) 9) (jvm dup))",
      "         ((= (x) 10) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 11) (jvm putfield inventory (COS_JList)))",
      "         ((= (x) 12) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> (self <init>-V))",
      "",
      "   (method add-COS_JNamed-String-V",
      "     (lambda (arg0 arg1) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 1))",
      "         ((= (x) 1) (jvm aload 2))",
      "         ((= (x) 2) (jvm invokevirtual setName-String-V 1 0))",
      "         ((= (x) 3) (jvm aload 0))",
      "         ((= (x) 4) (jvm getfield content (COS_JHashMap)))",
      "         ((= (x) 5) (jvm aload 1))",
      "         ((= (x) 6) (jvm invokevirtual getName-String 0 1))",
      "         ((= (x) 7) (jvm aload 1))",
      "         ((= (x) 8) (jvm invokevirtual put-Object-Object-V 2 0))",
      "         ((= (x) 9) (jvm aload 0))",
      "         ((= (x) 10) (jvm getfield inventory (COS_JList)))",
      "         ((= (x) 11) (jvm aload 1))",
      "         ((= (x) 12) (jvm invokevirtual add-Object-V 1 0))",
      "         ((= (x) 13) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method add (self add-COS_JNamed-String-V))",
      "",
      "   (method get-String-COS_JNamed",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)) (pair 1 (arg0)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield content (COS_JHashMap)))",
      "         ((= (x) 2) (jvm new (java lang String)))",
      "         ((= (x) 3) (jvm dup))",
      "         ((= (x) 4) (jvm aload 1))",
      "         ((= (x) 5) (jvm invokespecial <init>-String-V 1 0))",
      "         ((= (x) 6) (jvm invokevirtual get-Object-Object 1 1))",
      "         ((= (x) 7) (jvm checkcast (COS_JNamed)))",
      "         ((= (x) 8) (jvm areturn))",
      "         (jvm return))",
      "   )",
      "",
      "   (method get (self get-String-COS_JNamed))",
      "",
      "   (method update-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm getfield inventory (COS_JList)))",
      "         ((= (x) 2) (jvm invokevirtual iterator-Iterator 0 1))",
      "         ((= (x) 3) (jvm astore 1))",
      "         ((= (x) 4) (jvm aload 1))",
      "         ((= (x) 5) (jvm invokeinterface hasNext-Z 0 1 1))",
      "         ((= (x) 6) (jvm ifeq 14))",
      "         ((= (x) 7) (jvm aload 1))",
      "         ((= (x) 8) (jvm invokeinterface next-Object 0 1 1))",
      "         ((= (x) 9) (jvm checkcast (COS_JNamed)))",
      "         ((= (x) 10) (jvm astore 2))",
      "         ((= (x) 11) (jvm aload 2))",
      "         ((= (x) 12) (jvm invokevirtual update-V 0 0))",
      "         ((= (x) 13) (jvm goto 4))",
      "         ((= (x) 14) (jvm aload 0))",
      "         ((= (x) 15) (jvm getfield inventory (COS_JList)))",
      "         ((= (x) 16) (jvm invokevirtual iterator-Iterator 0 1))",
      "         ((= (x) 17) (jvm astore 1))",
      "         ((= (x) 18) (jvm aload 1))",
      "         ((= (x) 19) (jvm invokeinterface hasNext-Z 0 1 1))",
      "         ((= (x) 20) (jvm ifeq 28))",
      "         ((= (x) 21) (jvm aload 1))",
      "         ((= (x) 22) (jvm invokeinterface next-Object 0 1 1))",
      "         ((= (x) 23) (jvm checkcast (COS_JNamed)))",
      "         ((= (x) 24) (jvm astore 2))",
      "         ((= (x) 25) (jvm aload 2))",
      "         ((= (x) 26) (jvm invokevirtual postUpdate-V 0 0))",
      "         ((= (x) 27) (jvm goto 18))",
      "         ((= (x) 28) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method update (self update-V))",
      "",
      " ;"
    ],
    "preprocessed": "class COS_JWorld ()\n   (field super-ref (make-cell 0))\n   (method new (set! (super-ref) ((java lang Object) | this)))\n   (method super (? x | (get! | super-ref) | x))\n   (method unknown (? x | self super | x))\n   (field content (cell new 0))\n   (field inventory (cell new 0))\n   (method <init>-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm invokespecial <init>-V 0 0))\n         ((= (x) 2) (jvm aload 0))\n         ((= (x) 3) (jvm new (COS_JHashMap)))\n         ((= (x) 4) (jvm dup))\n         ((= (x) 5) (jvm invokespecial <init>-V 0 0))\n         ((= (x) 6) (jvm putfield content (COS_JHashMap)))\n         ((= (x) 7) (jvm aload 0))\n         ((= (x) 8) (jvm new (COS_JList)))\n         ((= (x) 9) (jvm dup))\n         ((= (x) 10) (jvm invokespecial <init>-V 0 0))\n         ((= (x) 11) (jvm putfield inventory (COS_JList)))\n         ((= (x) 12) (jvm return))\n         (jvm return))\n   )\n\n   (method <init> (self <init>-V))\n\n   (method add-COS_JNamed-String-V\n     (lambda (arg0 arg1) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)) (pair 1 (arg0)) (pair 2 (arg1)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 1))\n         ((= (x) 1) (jvm aload 2))\n         ((= (x) 2) (jvm invokevirtual setName-String-V 1 0))\n         ((= (x) 3) (jvm aload 0))\n         ((= (x) 4) (jvm getfield content (COS_JHashMap)))\n         ((= (x) 5) (jvm aload 1))\n         ((= (x) 6) (jvm invokevirtual getName-String 0 1))\n         ((= (x) 7) (jvm aload 1))\n         ((= (x) 8) (jvm invokevirtual put-Object-Object-V 2 0))\n         ((= (x) 9) (jvm aload 0))\n         ((= (x) 10) (jvm getfield inventory (COS_JList)))\n         ((= (x) 11) (jvm aload 1))\n         ((= (x) 12) (jvm invokevirtual add-Object-V 1 0))\n         ((= (x) 13) (jvm return))\n         (jvm return))\n   )\n\n   (method add (self add-COS_JNamed-String-V))\n\n   (method get-String-COS_JNamed\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)) (pair 1 (arg0)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm getfield content (COS_JHashMap)))\n         ((= (x) 2) (jvm new (java lang String)))\n         ((= (x) 3) (jvm dup))\n         ((= (x) 4) (jvm aload 1))\n         ((= (x) 5) (jvm invokespecial <init>-String-V 1 0))\n         ((= (x) 6) (jvm invokevirtual get-Object-Object 1 1))\n         ((= (x) 7) (jvm checkcast (COS_JNamed)))\n         ((= (x) 8) (jvm areturn))\n         (jvm return))\n   )\n\n   (method get (self get-String-COS_JNamed))\n\n   (method update-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm getfield inventory (COS_JList)))\n         ((= (x) 2) (jvm invokevirtual iterator-Iterator 0 1))\n         ((= (x) 3) (jvm astore 1))\n         ((= (x) 4) (jvm aload 1))\n         ((= (x) 5) (jvm invokeinterface hasNext-Z 0 1 1))\n         ((= (x) 6) (jvm ifeq 14))\n         ((= (x) 7) (jvm aload 1))\n         ((= (x) 8) (jvm invokeinterface next-Object 0 1 1))\n         ((= (x) 9) (jvm checkcast (COS_JNamed)))\n         ((= (x) 10) (jvm astore 2))\n         ((= (x) 11) (jvm aload 2))\n         ((= (x) 12) (jvm invokevirtual update-V 0 0))\n         ((= (x) 13) (jvm goto 4))\n         ((= (x) 14) (jvm aload 0))\n         ((= (x) 15) (jvm getfield inventory (COS_JList)))\n         ((= (x) 16) (jvm invokevirtual iterator-Iterator 0 1))\n         ((= (x) 17) (jvm astore 1))\n         ((= (x) 18) (jvm aload 1))\n         ((= (x) 19) (jvm invokeinterface hasNext-Z 0 1 1))\n         ((= (x) 20) (jvm ifeq 28))\n         ((= (x) 21) (jvm aload 1))\n         ((= (x) 22) (jvm invokeinterface next-Object 0 1 1))\n         ((= (x) 23) (jvm checkcast (COS_JNamed)))\n         ((= (x) 24) (jvm astore 2))\n         ((= (x) 25) (jvm aload 2))\n         ((= (x) 26) (jvm invokevirtual postUpdate-V 0 0))\n         ((= (x) 27) (jvm goto 18))\n         ((= (x) 28) (jvm return))\n         (jvm return))\n   )\n\n   (method update (self update-V))\n\n ;",
    "code
    "parse": [
      "class",
      "COS_JWorld",
      [],
      [
        "field",
        "super-ref",
        [
          "make-cell",
          "0"
        ]
      ],
      [
        "method",
        "new",
        [
          "set!",
          [
            "super-ref"
          ],
          [
            [
              "java",
              "lang",
              "Object"
            ],
            [
              -1,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -1,
                "super-ref"
              ]
            ],
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "content",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "inventory",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "new",
                        [
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "5"
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "6"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "content",
                        [
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "7"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "8"
                      ],
                      [
                        "jvm",
                        "new",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "9"
                      ],
                      [
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "10"
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "11"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "inventory",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "12"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "add-COS_JNamed-String-V",
        [
          "lambda",
          [
            "arg0",
            "arg1"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        "2",
                        [
                          "arg1"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "aload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "setName-String-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "content",
                        [
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "5"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "6"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "getName-String",
                        "0",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "7"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "8"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "put-Object-Object-V",
                        "2",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "9"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "10"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "inventory",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "11"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "12"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "add-Object-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "13"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "add",
        [
          "self",
          "add-COS_JNamed-String-V"
        ]
      ],
      [
        "method",
        "get-String-COS_JNamed",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "content",
                        [
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "new",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "5"
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-String-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "6"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "get-Object-Object",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "7"
                      ],
                      [
                        "jvm",
                        "checkcast",
                        [
                          "COS_JNamed"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "8"
                      ],
                      [
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "get",
        [
          "self",
          "get-String-COS_JNamed"
        ]
      ],
      [
        "method",
        "update-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "inventory",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "iterator-Iterator",
                        "0",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "astore",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "5"
                      ],
                      [
                        "jvm",
                        "invokeinterface",
                        "hasNext-Z",
                        "0",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "6"
                      ],
                      [
                        "jvm",
                        "ifeq",
                        "14"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "7"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "8"
                      ],
                      [
                        "jvm",
                        "invokeinterface",
                        "next-Object",
                        "0",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "9"
                      ],
                      [
                        "jvm",
                        "checkcast",
                        [
                          "COS_JNamed"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "10"
                      ],
                      [
                        "jvm",
                        "astore",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "11"
                      ],
                      [
                        "jvm",
                        "aload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "12"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "update-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "13"
                      ],
                      [
                        "jvm",
                        "goto",
                        "4"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "14"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "15"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "inventory",
                        [
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "16"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "iterator-Iterator",
                        "0",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "17"
                      ],
                      [
                        "jvm",
                        "astore",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "18"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "19"
                      ],
                      [
                        "jvm",
                        "invokeinterface",
                        "hasNext-Z",
                        "0",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "20"
                      ],
                      [
                        "jvm",
                        "ifeq",
                        "28"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "21"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "22"
                      ],
                      [
                        "jvm",
                        "invokeinterface",
                        "next-Object",
                        "0",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "23"
                      ],
                      [
                        "jvm",
                        "checkcast",
                        [
                          "COS_JNamed"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "24"
                      ],
                      [
                        "jvm",
                        "astore",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "25"
                      ],
                      [
                        "jvm",
                        "aload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "26"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "postUpdate-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "27"
                      ],
                      [
                        "jvm",
                        "goto",
                        "18"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "28"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "update",
        [
          "self",
          "update-V"
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF124;&#xF10B;&#xF11B;&#xF143;&#xF132;&#xF130;&#xF119;&#xF131;&#xF112;&#xF132;&#xF123;&#xF11C;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF114;&#xF132;&#xF123;&#xF11D;&#xF132;&#xF131;&#xF112;&#xF121;&#xF132;&#xF132;&#xF124;&#xF100;&#xF116;&#xF124;&#xF106;&#xF111;&#xF123;&#xF10F;&#xF114;&#xF121;&#xF101;&#xF143;&#xF130;&#xF113;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF117;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF132;&#xF123;&#xF11E;&#xF101;&#xF143;&#xF131;&#xF112;&#xF121;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11C;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12C;&#xF115;&#xF12F;&#xF117;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF131;&#xF115;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF12F;&#xF111;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF116;&#xF132;&#xF123;&#xF11B;&#xF143;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11E;&#xF123;&#xF10F;&#xF116;&#xF133;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12F;&#xF114;&#xF132;&#xF124;&#xF109;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF111;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF138;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11E;&#xF123;&#xF10F;&#xF116;&#xF133;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF139;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF131;&#xF115;&#xF132;&#xF124;&#xF109;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13B;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12F;&#xF114;&#xF132;&#xF124;&#xF108;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13C;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF111;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13D;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11E;&#xF123;&#xF10F;&#xF116;&#xF133;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13E;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF12F;&#xF111;&#xF132;&#xF124;&#xF108;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13F;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF117;&#xF132;&#xF12C;&#xF115;&#xF123;&#xF10F;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10C;&#xF115;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF124;&#xF105;&#xF11F;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF135;&#xF132;&#xF124;&#xF105;&#xF11F;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF135;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF10B;&#xF11C;&#xF134;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF131;&#xF115;&#xF132;&#xF124;&#xF109;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF138;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF139;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF10B;&#xF11E;&#xF133;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13B;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF109;&#xF112;&#xF135;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13C;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13D;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF12F;&#xF111;&#xF132;&#xF124;&#xF108;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13E;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13F;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF108;&#xF117;&#xF134;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF140;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF129;&#xF114;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10C;&#xF116;&#xF132;&#xF123;&#xF11B;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF132;&#xF126;&#xF11F;&#xF134;&#xF132;&#xF124;&#xF105;&#xF11E;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF131;&#xF115;&#xF132;&#xF124;&#xF109;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12F;&#xF114;&#xF132;&#xF124;&#xF100;&#xF116;&#xF124;&#xF106;&#xF111;&#xF124;&#xF100;&#xF113;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF111;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF138;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11E;&#xF124;&#xF100;&#xF114;&#xF134;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF139;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF109;&#xF114;&#xF134;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF113;&#xF132;&#xF124;&#xF10A;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13B;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF118;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF131;&#xF116;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10C;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10C;&#xF114;&#xF132;&#xF123;&#xF11B;&#xF143;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF12F;&#xF111;&#xF132;&#xF124;&#xF108;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF108;&#xF11C;&#xF133;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF114;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF138;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11D;&#xF124;&#xF109;&#xF118;&#xF133;&#xF134;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF139;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF11B;&#xF141;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13B;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11D;&#xF124;&#xF109;&#xF11A;&#xF133;&#xF134;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13C;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF113;&#xF132;&#xF124;&#xF10A;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13D;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF114;&#xF135;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13E;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF135;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13F;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF10C;&#xF114;&#xF133;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF140;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF115;&#xF137;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF141;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF142;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF12F;&#xF111;&#xF132;&#xF124;&#xF108;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF111;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF108;&#xF11C;&#xF133;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF112;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF114;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF113;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF114;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11D;&#xF124;&#xF109;&#xF118;&#xF133;&#xF134;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF115;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF11B;&#xF123;&#xF11D;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF116;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF117;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11D;&#xF124;&#xF109;&#xF11A;&#xF133;&#xF134;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF118;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF113;&#xF132;&#xF124;&#xF10A;&#xF116;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF119;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF114;&#xF135;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF11A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF135;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF10A;&#xF120;&#xF133;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF11C;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF115;&#xF123;&#xF113;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF11D;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF101;&#xF116;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10C;&#xF114;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1564
  },
  {
    "role": "file",
    "lines": [
      "== COS_JRobo =="
    ],
    "stanza": 1565
  },
  {
    "role": "comment",
    "lines": [
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# ",
      "# import java.util.Iterator;",
      "# ",
      "# public class COS_JRobo extends COS_JThing {",
      "#     private COS_JHashMap times;",
      "#     private int now;",
      "# ",
      "#     public COS_JRobo() {",
      "#     times = new COS_JHashMap();",
      "#     now = 1;",
      "#     }",
      "# ",
      "#     public void update() {",
      "#     COS_JRoom location = getRoom();",
      "#     //System.out.println(\"Updating robo...\");",
      "#     if (location!=null) {",
      "#         int oldestTime = now;",
      "#         COS_JDoor oldestDoor = null;",
      "#         for (Iterator i = location.getDoors(); i.hasNext(); ) {",
      "#         COS_JDoor door = (COS_JDoor) i.next();",
      "#         //System.out.println(\" scanning door \");",
      "#         Integer t = (Integer)times.get(door);",
      "#         int v = 0;",
      "#         if (t!=null) {",
      "#             v = t.intValue();",
      "#         }",
      "#         if (v<oldestTime) {",
      "#             oldestTime = v;",
      "#             oldestDoor = door;",
      "#         }",
      "#         }",
      "#         if (oldestDoor!=null) {",
      "#         times.put(oldestDoor,new Integer(now));",
      "#         setNextRoom(oldestDoor.apply(location));",
      "#         }",
      "#     }",
      "#     now++;",
      "#     }",
      "# }",
      "# "
    ],
    "section_description": "class translation 'COS_JRobo'",
    "section_category": "JAVA",
    "section_index": 65,
    "stanza": 1566
  },
  {
    "role": "code",
    "lines": [
      "class COS_JRobo ()",
      "   (field super-ref (make-cell 0))",
      "   (method new (set! (super-ref) ((COS_JThing) | this)))",
      "   (method super (? x | (get! | super-ref) | x))",
      "   (method unknown (? x | self super | x))",
      "   (field times (cell new 0))",
      "   (field now ((int) new))",
      "   (method <init>-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 2) (jvm aload 0))",
      "         ((= (x) 3) (jvm new (COS_JHashMap)))",
      "         ((= (x) 4) (jvm dup))",
      "         ((= (x) 5) (jvm invokespecial <init>-V 0 0))",
      "         ((= (x) 6) (jvm putfield times (COS_JHashMap)))",
      "         ((= (x) 7) (jvm aload 0))",
      "         ((= (x) 8) (jvm iconst 1))",
      "         ((= (x) 9) (jvm putfield now (int)))",
      "         ((= (x) 10) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> (self <init>-V))",
      "",
      "   (method update-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 (self)))",
      "           (stack | cell new | vector)) |",
      "      state-machine (vars) (stack) | ? jvm | ? x | cond",
      "         ((= (x) 0) (jvm aload 0))",
      "         ((= (x) 1) (jvm invokevirtual getRoom-COS_JRoom 0 1))",
      "         ((= (x) 2) (jvm astore 1))",
      "         ((= (x) 3) (jvm aload 1))",
      "         ((= (x) 4) (jvm ifnull 57))",
      "         ((= (x) 5) (jvm aload 0))",
      "         ((= (x) 6) (jvm getfield now (int)))",
      "         ((= (x) 7) (jvm istore 2))",
      "         ((= (x) 8) (jvm aconst_null))",
      "         ((= (x) 9) (jvm astore 3))",
      "         ((= (x) 10) (jvm aload 1))",
      "         ((= (x) 11) (jvm invokevirtual getDoors-Iterator 0 1))",
      "         ((= (x) 12) (jvm astore 4))",
      "         ((= (x) 13) (jvm aload 4))",
      "         ((= (x) 14) (jvm invokeinterface hasNext-Z 0 1 1))",
      "         ((= (x) 15) (jvm ifeq 41))",
      "         ((= (x) 16) (jvm aload 4))",
      "         ((= (x) 17) (jvm invokeinterface next-Object 0 1 1))",
      "         ((= (x) 18) (jvm checkcast (COS_JDoor)))",
      "         ((= (x) 19) (jvm astore 5))",
      "         ((= (x) 20) (jvm aload 0))",
      "         ((= (x) 21) (jvm getfield times (COS_JHashMap)))",
      "         ((= (x) 22) (jvm aload 5))",
      "         ((= (x) 23) (jvm invokevirtual get-Object-Object 1 1))",
      "         ((= (x) 24) (jvm checkcast (java lang Integer)))",
      "         ((= (x) 25) (jvm astore 6))",
      "         ((= (x) 26) (jvm iconst 0))",
      "         ((= (x) 27) (jvm istore 7))",
      "         ((= (x) 28) (jvm aload 6))",
      "         ((= (x) 29) (jvm ifnull 33))",
      "         ((= (x) 30) (jvm aload 6))",
      "         ((= (x) 31) (jvm invokevirtual intValue-I 0 1))",
      "         ((= (x) 32) (jvm istore 7))",
      "         ((= (x) 33) (jvm iload 7))",
      "         ((= (x) 34) (jvm iload 2))",
      "         ((= (x) 35) (jvm if_icmpge 40))",
      "         ((= (x) 36) (jvm iload 7))",
      "         ((= (x) 37) (jvm istore 2))",
      "         ((= (x) 38) (jvm aload 5))",
      "         ((= (x) 39) (jvm astore 3))",
      "         ((= (x) 40) (jvm goto 13))",
      "         ((= (x) 41) (jvm aload 3))",
      "         ((= (x) 42) (jvm ifnull 57))",
      "         ((= (x) 43) (jvm aload 0))",
      "         ((= (x) 44) (jvm getfield times (COS_JHashMap)))",
      "         ((= (x) 45) (jvm aload 3))",
      "         ((= (x) 46) (jvm new (java lang Integer)))",
      "         ((= (x) 47) (jvm dup))",
      "         ((= (x) 48) (jvm aload 0))",
      "         ((= (x) 49) (jvm getfield now (int)))",
      "         ((= (x) 50) (jvm invokespecial <init>-I-V 1 0))",
      "         ((= (x) 51) (jvm invokevirtual put-Object-Object-V 2 0))",
      "         ((= (x) 52) (jvm aload 0))",
      "         ((= (x) 53) (jvm aload 3))",
      "         ((= (x) 54) (jvm aload 1))",
      "         ((= (x) 55) (jvm invokevirtual apply-COS_JRoom-COS_JRoom 1 1))",
      "         ((= (x) 56) (jvm invokevirtual setNextRoom-COS_JRoom-V 1 0))",
      "         ((= (x) 57) (jvm aload 0))",
      "         ((= (x) 58) (jvm dup))",
      "         ((= (x) 59) (jvm getfield now (int)))",
      "         ((= (x) 60) (jvm iconst 1))",
      "         ((= (x) 61) (jvm iadd))",
      "         ((= (x) 62) (jvm putfield now (int)))",
      "         ((= (x) 63) (jvm return))",
      "         (jvm return))",
      "   )",
      "",
      "   (method update (self update-V))",
      "",
      " ;"
    ],
    "preprocessed": "class COS_JRobo ()\n   (field super-ref (make-cell 0))\n   (method new (set! (super-ref) ((COS_JThing) | this)))\n   (method super (? x | (get! | super-ref) | x))\n   (method unknown (? x | self super | x))\n   (field times (cell new 0))\n   (field now ((int) new))\n   (method <init>-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm invokespecial <init>-V 0 0))\n         ((= (x) 2) (jvm aload 0))\n         ((= (x) 3) (jvm new (COS_JHashMap)))\n         ((= (x) 4) (jvm dup))\n         ((= (x) 5) (jvm invokespecial <init>-V 0 0))\n         ((= (x) 6) (jvm putfield times (COS_JHashMap)))\n         ((= (x) 7) (jvm aload 0))\n         ((= (x) 8) (jvm iconst 1))\n         ((= (x) 9) (jvm putfield now (int)))\n         ((= (x) 10) (jvm return))\n         (jvm return))\n   )\n\n   (method <init> (self <init>-V))\n\n   (method update-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 (self)))\n           (stack | cell new | vector)) |\n      state-machine (vars) (stack) | ? jvm | ? x | cond\n         ((= (x) 0) (jvm aload 0))\n         ((= (x) 1) (jvm invokevirtual getRoom-COS_JRoom 0 1))\n         ((= (x) 2) (jvm astore 1))\n         ((= (x) 3) (jvm aload 1))\n         ((= (x) 4) (jvm ifnull 57))\n         ((= (x) 5) (jvm aload 0))\n         ((= (x) 6) (jvm getfield now (int)))\n         ((= (x) 7) (jvm istore 2))\n         ((= (x) 8) (jvm aconst_null))\n         ((= (x) 9) (jvm astore 3))\n         ((= (x) 10) (jvm aload 1))\n         ((= (x) 11) (jvm invokevirtual getDoors-Iterator 0 1))\n         ((= (x) 12) (jvm astore 4))\n         ((= (x) 13) (jvm aload 4))\n         ((= (x) 14) (jvm invokeinterface hasNext-Z 0 1 1))\n         ((= (x) 15) (jvm ifeq 41))\n         ((= (x) 16) (jvm aload 4))\n         ((= (x) 17) (jvm invokeinterface next-Object 0 1 1))\n         ((= (x) 18) (jvm checkcast (COS_JDoor)))\n         ((= (x) 19) (jvm astore 5))\n         ((= (x) 20) (jvm aload 0))\n         ((= (x) 21) (jvm getfield times (COS_JHashMap)))\n         ((= (x) 22) (jvm aload 5))\n         ((= (x) 23) (jvm invokevirtual get-Object-Object 1 1))\n         ((= (x) 24) (jvm checkcast (java lang Integer)))\n         ((= (x) 25) (jvm astore 6))\n         ((= (x) 26) (jvm iconst 0))\n         ((= (x) 27) (jvm istore 7))\n         ((= (x) 28) (jvm aload 6))\n         ((= (x) 29) (jvm ifnull 33))\n         ((= (x) 30) (jvm aload 6))\n         ((= (x) 31) (jvm invokevirtual intValue-I 0 1))\n         ((= (x) 32) (jvm istore 7))\n         ((= (x) 33) (jvm iload 7))\n         ((= (x) 34) (jvm iload 2))\n         ((= (x) 35) (jvm if_icmpge 40))\n         ((= (x) 36) (jvm iload 7))\n         ((= (x) 37) (jvm istore 2))\n         ((= (x) 38) (jvm aload 5))\n         ((= (x) 39) (jvm astore 3))\n         ((= (x) 40) (jvm goto 13))\n         ((= (x) 41) (jvm aload 3))\n         ((= (x) 42) (jvm ifnull 57))\n         ((= (x) 43) (jvm aload 0))\n         ((= (x) 44) (jvm getfield times (COS_JHashMap)))\n         ((= (x) 45) (jvm aload 3))\n         ((= (x) 46) (jvm new (java lang Integer)))\n         ((= (x) 47) (jvm dup))\n         ((= (x) 48) (jvm aload 0))\n         ((= (x) 49) (jvm getfield now (int)))\n         ((= (x) 50) (jvm invokespecial <init>-I-V 1 0))\n         ((= (x) 51) (jvm invokevirtual put-Object-Object-V 2 0))\n         ((= (x) 52) (jvm aload 0))\n         ((= (x) 53) (jvm aload 3))\n         ((= (x) 54) (jvm aload 1))\n         ((= (x) 55) (jvm invokevirtual apply-COS_JRoom-COS_JRoom 1 1))\n         ((= (x) 56) (jvm invokevirtual setNextRoom-COS_JRoom-V 1 0))\n         ((= (x) 57) (jvm aload 0))\n         ((= (x) 58) (jvm dup))\n         ((= (x) 59) (jvm getfield now (int)))\n         ((= (x) 60) (jvm iconst 1))\n         ((= (x) 61) (jvm iadd))\n         ((= (x) 62) (jvm putfield now (int)))\n         ((= (x) 63) (jvm return))\n         (jvm return))\n   )\n\n   (method update (self update-V))\n\n ;",
    "code
    "parse": [
      "class",
      "COS_JRobo",
      [],
      [
        "field",
        "super-ref",
        [
          "make-cell",
          "0"
        ]
      ],
      [
        "method",
        "new",
        [
          "set!",
          [
            "super-ref"
          ],
          [
            [
              "COS_JThing"
            ],
            [
              -1,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -1,
                "super-ref"
              ]
            ],
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -1,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "times",
        [
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "now",
        [
          [
            "int"
          ],
          "new"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "new",
                        [
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "5"
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "6"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "times",
                        [
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "7"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "8"
                      ],
                      [
                        "jvm",
                        "iconst",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "9"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "now",
                        [
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "10"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "update-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                "vars"
              ],
              [
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "0"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "1"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "getRoom-COS_JRoom",
                        "0",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "2"
                      ],
                      [
                        "jvm",
                        "astore",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "3"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "4"
                      ],
                      [
                        "jvm",
                        "ifnull",
                        "57"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "5"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "6"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "now",
                        [
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "7"
                      ],
                      [
                        "jvm",
                        "istore",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "8"
                      ],
                      [
                        "jvm",
                        "aconst_null"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "9"
                      ],
                      [
                        "jvm",
                        "astore",
                        "3"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "10"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "11"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "getDoors-Iterator",
                        "0",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "12"
                      ],
                      [
                        "jvm",
                        "astore",
                        "4"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "13"
                      ],
                      [
                        "jvm",
                        "aload",
                        "4"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "14"
                      ],
                      [
                        "jvm",
                        "invokeinterface",
                        "hasNext-Z",
                        "0",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "15"
                      ],
                      [
                        "jvm",
                        "ifeq",
                        "41"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "16"
                      ],
                      [
                        "jvm",
                        "aload",
                        "4"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "17"
                      ],
                      [
                        "jvm",
                        "invokeinterface",
                        "next-Object",
                        "0",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "18"
                      ],
                      [
                        "jvm",
                        "checkcast",
                        [
                          "COS_JDoor"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "19"
                      ],
                      [
                        "jvm",
                        "astore",
                        "5"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "20"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "21"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "times",
                        [
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "22"
                      ],
                      [
                        "jvm",
                        "aload",
                        "5"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "23"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "get-Object-Object",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "24"
                      ],
                      [
                        "jvm",
                        "checkcast",
                        [
                          "java",
                          "lang",
                          "Integer"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "25"
                      ],
                      [
                        "jvm",
                        "astore",
                        "6"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "26"
                      ],
                      [
                        "jvm",
                        "iconst",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "27"
                      ],
                      [
                        "jvm",
                        "istore",
                        "7"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "28"
                      ],
                      [
                        "jvm",
                        "aload",
                        "6"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "29"
                      ],
                      [
                        "jvm",
                        "ifnull",
                        "33"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "30"
                      ],
                      [
                        "jvm",
                        "aload",
                        "6"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "31"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "intValue-I",
                        "0",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "32"
                      ],
                      [
                        "jvm",
                        "istore",
                        "7"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "33"
                      ],
                      [
                        "jvm",
                        "iload",
                        "7"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "34"
                      ],
                      [
                        "jvm",
                        "iload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "35"
                      ],
                      [
                        "jvm",
                        "if_icmpge",
                        "40"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "36"
                      ],
                      [
                        "jvm",
                        "iload",
                        "7"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "37"
                      ],
                      [
                        "jvm",
                        "istore",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "38"
                      ],
                      [
                        "jvm",
                        "aload",
                        "5"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "39"
                      ],
                      [
                        "jvm",
                        "astore",
                        "3"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "40"
                      ],
                      [
                        "jvm",
                        "goto",
                        "13"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "41"
                      ],
                      [
                        "jvm",
                        "aload",
                        "3"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "42"
                      ],
                      [
                        "jvm",
                        "ifnull",
                        "57"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "43"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "44"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "times",
                        [
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "45"
                      ],
                      [
                        "jvm",
                        "aload",
                        "3"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "46"
                      ],
                      [
                        "jvm",
                        "new",
                        [
                          "java",
                          "lang",
                          "Integer"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "47"
                      ],
                      [
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "48"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "49"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "now",
                        [
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "50"
                      ],
                      [
                        "jvm",
                        "invokespecial",
                        "<init>-I-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "51"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "put-Object-Object-V",
                        "2",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "52"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "53"
                      ],
                      [
                        "jvm",
                        "aload",
                        "3"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "54"
                      ],
                      [
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "55"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "apply-COS_JRoom-COS_JRoom",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "56"
                      ],
                      [
                        "jvm",
                        "invokevirtual",
                        "setNextRoom-COS_JRoom-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "57"
                      ],
                      [
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "58"
                      ],
                      [
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "59"
                      ],
                      [
                        "jvm",
                        "getfield",
                        "now",
                        [
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "60"
                      ],
                      [
                        "jvm",
                        "iconst",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "61"
                      ],
                      [
                        "jvm",
                        "iadd"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "62"
                      ],
                      [
                        "jvm",
                        "putfield",
                        "now",
                        [
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          "x"
                        ],
                        "63"
                      ],
                      [
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "update",
        [
          "self",
          "update-V"
        ]
      ]
    ],
    "spider": "&#xF130;&#xF114;&#xF124;&#xF10C;&#xF117;&#xF143;&#xF132;&#xF130;&#xF119;&#xF131;&#xF112;&#xF132;&#xF123;&#xF11C;&#xF133;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF114;&#xF132;&#xF123;&#xF11D;&#xF132;&#xF131;&#xF112;&#xF121;&#xF132;&#xF132;&#xF124;&#xF10A;&#xF115;&#xF121;&#xF101;&#xF143;&#xF130;&#xF113;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF12F;&#xF117;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF132;&#xF123;&#xF11E;&#xF101;&#xF143;&#xF131;&#xF112;&#xF121;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF130;&#xF11C;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12C;&#xF115;&#xF12F;&#xF117;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF124;&#xF10C;&#xF118;&#xF132;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF133;&#xF121;&#xF121;&#xF132;&#xF130;&#xF119;&#xF124;&#xF10C;&#xF119;&#xF132;&#xF132;&#xF12D;&#xF11A;&#xF121;&#xF12F;&#xF114;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF116;&#xF132;&#xF123;&#xF11B;&#xF143;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11E;&#xF123;&#xF10F;&#xF116;&#xF133;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12F;&#xF114;&#xF132;&#xF124;&#xF109;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF111;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF138;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11E;&#xF123;&#xF10F;&#xF116;&#xF133;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF139;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF124;&#xF10C;&#xF118;&#xF132;&#xF124;&#xF109;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13B;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF119;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13C;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF124;&#xF10C;&#xF119;&#xF132;&#xF12D;&#xF11A;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13D;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF10F;&#xF117;&#xF132;&#xF12C;&#xF115;&#xF123;&#xF10F;&#xF116;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF124;&#xF10C;&#xF114;&#xF132;&#xF123;&#xF11B;&#xF143;&#xF101;&#xF143;&#xF127;&#xF11C;&#xF132;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF12B;&#xF116;&#xF101;&#xF143;&#xF123;&#xF111;&#xF132;&#xF126;&#xF11F;&#xF133;&#xF132;&#xF12C;&#xF115;&#xF121;&#xF121;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF101;&#xF143;&#xF131;&#xF113;&#xF12F;&#xF114;&#xF101;&#xF143;&#xF123;&#xF111;&#xF121;&#xF121;&#xF101;&#xF143;&#xF124;&#xF105;&#xF11C;&#xF132;&#xF124;&#xF101;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF101;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF105;&#xF11B;&#xF101;&#xF143;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF12E;&#xF111;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF133;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF134;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF10A;&#xF11C;&#xF133;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF135;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF114;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF136;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF137;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF114;&#xF125;&#xF11A;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF138;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF139;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF124;&#xF10C;&#xF119;&#xF132;&#xF12D;&#xF11A;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF115;&#xF135;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13B;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13C;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF114;&#xF136;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13D;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13E;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF10B;&#xF114;&#xF133;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF13F;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF114;&#xF137;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF140;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF137;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF141;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11D;&#xF124;&#xF109;&#xF118;&#xF133;&#xF134;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF142;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF11B;&#xF124;&#xF11A;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF111;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF137;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF112;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11D;&#xF124;&#xF109;&#xF11A;&#xF133;&#xF134;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF113;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF113;&#xF132;&#xF124;&#xF109;&#xF11C;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF114;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF114;&#xF138;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF115;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF116;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF124;&#xF10C;&#xF118;&#xF132;&#xF124;&#xF109;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF117;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF138;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF118;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF109;&#xF114;&#xF134;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF119;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF113;&#xF132;&#xF124;&#xF100;&#xF116;&#xF124;&#xF106;&#xF111;&#xF123;&#xF10F;&#xF11D;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF11A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF114;&#xF139;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF119;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF11C;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF115;&#xF13A;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF11D;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF139;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF11E;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF114;&#xF124;&#xF112;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF11F;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF139;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF123;&#xF120;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF10C;&#xF11A;&#xF133;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF124;&#xF111;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF115;&#xF13A;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF124;&#xF112;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF13A;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF124;&#xF113;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF135;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF124;&#xF114;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF120;&#xF124;&#xF119;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF124;&#xF115;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF118;&#xF13A;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF124;&#xF116;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF115;&#xF135;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF124;&#xF117;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF138;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF124;&#xF118;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF114;&#xF136;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF124;&#xF119;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF115;&#xF140;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF124;&#xF11A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF136;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF124;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF114;&#xF125;&#xF11A;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF124;&#xF11C;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF124;&#xF11D;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF124;&#xF10C;&#xF118;&#xF132;&#xF124;&#xF109;&#xF111;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF124;&#xF11E;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF136;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF124;&#xF11F;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12F;&#xF114;&#xF132;&#xF124;&#xF100;&#xF116;&#xF124;&#xF106;&#xF111;&#xF123;&#xF10F;&#xF11D;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF124;&#xF120;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF111;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF125;&#xF111;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF125;&#xF112;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF124;&#xF10C;&#xF119;&#xF132;&#xF12D;&#xF11A;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF125;&#xF113;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11E;&#xF123;&#xF10F;&#xF11E;&#xF134;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF125;&#xF114;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF109;&#xF112;&#xF135;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF125;&#xF115;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF125;&#xF116;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF136;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF125;&#xF117;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF125;&#xF118;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF10A;&#xF114;&#xF134;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF125;&#xF119;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF104;&#xF11A;&#xF124;&#xF10A;&#xF11E;&#xF134;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF125;&#xF11A;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF117;&#xF133;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF125;&#xF11B;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF111;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF125;&#xF11C;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11D;&#xF124;&#xF10C;&#xF119;&#xF132;&#xF12D;&#xF11A;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF125;&#xF11D;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF119;&#xF134;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF125;&#xF11E;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF103;&#xF113;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF125;&#xF11F;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF124;&#xF102;&#xF11F;&#xF124;&#xF10C;&#xF119;&#xF132;&#xF12D;&#xF11A;&#xF121;&#xF121;&#xF121;&#xF132;&#xF132;&#xF136;&#xF132;&#xF124;&#xF118;&#xF121;&#xF125;&#xF120;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF132;&#xF124;&#xF105;&#xF11B;&#xF12E;&#xF117;&#xF121;&#xF121;&#xF121;&#xF132;&#xF12B;&#xF120;&#xF123;&#xF101;&#xF116;&#xF132;&#xF12C;&#xF115;&#xF124;&#xF10C;&#xF114;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1567
  },
  {
    "role": "file",
    "lines": [
      "== COS_JRoom_test =="
    ],
    "stanza": 1568
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "test JRoom, JDoor, JThing, etc",
    "section_category": "JAVA",
    "section_index": 66,
    "stanza": 1569
  },
  {
    "role": "code",
    "lines": [
      "define s (? x | String new int-init | x);"
    ],
    "preprocessed": "define s (? x | String new int-init | x);",
    "code": "21101321011001010322110032100111312321000000010321101001132100000010031232100111332233",
    "parse": [
      "define",
      "s",
      [
        "?",
        "x",
        [
          -1,
          "String",
          "new",
          "int-init",
          [
            -1,
            "x"
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF10C;&#xF11B;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF124;&#xF100;&#xF113;&#xF12F;&#xF114;&#xF124;&#xF100;&#xF115;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1570
  },
  {
    "role": "code",
    "lines": [
      "define room1 (COS_JRoom new <init>);"
    ],
    "preprocessed": "define room1 (COS_JRoom new <init>);",
    "code": "211013210110010113221010100000321101001132111110110332233",
    "parse": [
      "define",
      "room1",
      [
        "COS_JRoom",
        "new",
        "<init>"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF10C;&#xF11C;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF12F;&#xF114;&#xF123;&#xF10F;&#xF117;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1571
  },
  {
    "role": "code",
    "lines": [
      "define room2 (COS_JRoom new <init>);"
    ],
    "preprocessed": "define room2 (COS_JRoom new <init>);",
    "code": "211013210110011003221010100000321101001132111110110332233",
    "parse": [
      "define",
      "room2",
      [
        "COS_JRoom",
        "new",
        "<init>"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF10C;&#xF11D;&#xF132;&#xF124;&#xF10A;&#xF111;&#xF12F;&#xF114;&#xF123;&#xF10F;&#xF117;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1572
  },
  {
    "role": "code",
    "lines": [
      "define door12 (COS_JDoor new <init> ",
      "              (room1) (s \"south\") (room2) (s \"north\"));"
    ],
    "preprocessed": "define door12 (COS_JDoor new <init> \n              (room1) (s \"south\") (room2) (s \"north\"));",
    "code": "21101321011001101322101001101132110100113211111011032210110010113322101100101032101100111033221011001100332210110010103210110011113332233",
    "parse": [
      "define",
      "door12",
      [
        "COS_JDoor",
        "new",
        "<init>",
        [
          "room1"
        ],
        [
          "s",
          "\"south\""
        ],
        [
          "room2"
        ],
        [
          "s",
          "\"north\""
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF10C;&#xF11E;&#xF132;&#xF124;&#xF109;&#xF11C;&#xF12F;&#xF114;&#xF123;&#xF10F;&#xF117;&#xF132;&#xF124;&#xF10C;&#xF11C;&#xF121;&#xF132;&#xF124;&#xF10C;&#xF11B;&#xF124;&#xF10C;&#xF11F;&#xF121;&#xF132;&#xF124;&#xF10C;&#xF11D;&#xF121;&#xF132;&#xF124;&#xF10C;&#xF11B;&#xF124;&#xF10C;&#xF120;&#xF121;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1573
  },
  {
    "role": "code",
    "lines": [
      "define jworld (COS_JWorld new <init>);"
    ],
    "preprocessed": "define jworld (COS_JWorld new <init>);",
    "code": "211013210110100003221010111010321101001132111110110332233",
    "parse": [
      "define",
      "jworld",
      [
        "COS_JWorld",
        "new",
        "<init>"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF10D;&#xF111;&#xF132;&#xF124;&#xF10B;&#xF11B;&#xF12F;&#xF114;&#xF123;&#xF10F;&#xF117;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1574
  },
  {
    "role": "code",
    "lines": [
      "define thing1 (COS_JThing new <init>);"
    ],
    "preprocessed": "define thing1 (COS_JThing new <init>);",
    "code": "211013210110100013221010100100321101001132111110110332233",
    "parse": [
      "define",
      "thing1",
      [
        "COS_JThing",
        "new",
        "<init>"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF10D;&#xF112;&#xF132;&#xF124;&#xF10A;&#xF115;&#xF12F;&#xF114;&#xF123;&#xF10F;&#xF117;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1575
  },
  {
    "role": "code",
    "lines": [
      "define robo1 (COS_JRobo new <init>);"
    ],
    "preprocessed": "define robo1 (COS_JRobo new <init>);",
    "code": "211013210110100103221011000110321101001132111110110332233",
    "parse": [
      "define",
      "robo1",
      [
        "COS_JRobo",
        "new",
        "<init>"
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF10D;&#xF113;&#xF132;&#xF124;&#xF10C;&#xF117;&#xF12F;&#xF114;&#xF123;&#xF10F;&#xF117;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1576
  },
  {
    "role": "code",
    "lines": [
      "act | jworld add (thing1) | s \"bus\";"
    ],
    "preprocessed": "act | jworld add (thing1) | s \"bus\";",
    "code": "21111110013123210110100003211100113221011010001331232101100101032101101001132233",
    "parse": [
      "act",
      [
        -1,
        "jworld",
        "add",
        [
          "thing1"
        ],
        [
          -1,
          "s",
          "\"bus\""
        ]
      ]
    ],
    "spider": "&#xF123;&#xF10F;&#xF11A;&#xF101;&#xF143;&#xF124;&#xF10D;&#xF111;&#xF129;&#xF114;&#xF132;&#xF124;&#xF10D;&#xF112;&#xF121;&#xF101;&#xF143;&#xF124;&#xF10C;&#xF11B;&#xF124;&#xF10D;&#xF114;&#xF132;&#xF143;&#xF121;",
    "stanza": 1577
  },
  {
    "role": "code",
    "lines": [
      "act | jworld add (robo1) | s \"autobus\";"
    ],
    "preprocessed": "act | jworld add (robo1) | s \"autobus\";",
    "code": "21111110013123210110100003211100113221011010010331232101100101032101101010032233",
    "parse": [
      "act",
      [
        -1,
        "jworld",
        "add",
        [
          "robo1"
        ],
        [
          -1,
          "s",
          "\"autobus\""
        ]
      ]
    ],
    "spider": "&#xF123;&#xF10F;&#xF11A;&#xF101;&#xF143;&#xF124;&#xF10D;&#xF111;&#xF129;&#xF114;&#xF132;&#xF124;&#xF10D;&#xF113;&#xF121;&#xF101;&#xF143;&#xF124;&#xF10C;&#xF11B;&#xF124;&#xF10D;&#xF115;&#xF132;&#xF143;&#xF121;",
    "stanza": 1578
  },
  {
    "role": "code",
    "lines": [
      "act | jworld add (room1) | s \"boston\";"
    ],
    "preprocessed": "act | jworld add (room1) | s \"boston\";",
    "code": "21111110013123210110100003211100113221011001011331232101100101032100111000032233",
    "parse": [
      "act",
      [
        -1,
        "jworld",
        "add",
        [
          "room1"
        ],
        [
          -1,
          "s",
          "\"boston\""
        ]
      ]
    ],
    "spider": "&#xF123;&#xF10F;&#xF11A;&#xF101;&#xF143;&#xF124;&#xF10D;&#xF111;&#xF129;&#xF114;&#xF132;&#xF124;&#xF10C;&#xF11C;&#xF121;&#xF101;&#xF143;&#xF124;&#xF10C;&#xF11B;&#xF124;&#xF107;&#xF111;&#xF132;&#xF143;&#xF121;",
    "stanza": 1579
  },
  {
    "role": "code",
    "lines": [
      "act | jworld add (room2) | s \"newyork\";"
    ],
    "preprocessed": "act | jworld add (room2) | s \"newyork\";",
    "code": "21111110013123210110100003211100113221011001100331232101100101032101101010132233",
    "parse": [
      "act",
      [
        -1,
        "jworld",
        "add",
        [
          "room2"
        ],
        [
          -1,
          "s",
          "\"newyork\""
        ]
      ]
    ],
    "spider": "&#xF123;&#xF10F;&#xF11A;&#xF101;&#xF143;&#xF124;&#xF10D;&#xF111;&#xF129;&#xF114;&#xF132;&#xF124;&#xF10C;&#xF11D;&#xF121;&#xF101;&#xF143;&#xF124;&#xF10C;&#xF11B;&#xF124;&#xF10D;&#xF116;&#xF132;&#xF143;&#xF121;",
    "stanza": 1580
  },
  {
    "role": "code",
    "lines": [
      "begin (room1 get add (room1))",
      "       (= 1 | room1 get size);"
    ],
    "preprocessed": "begin (room1 get add (room1))\n       (= 1 | room1 get size);",
    "code": "21000110032210110010113211110101321110011322101100101133322113213123210110010113211110101321010001111332233",
    "parse": [
      "begin",
      [
        "room1",
        "get",
        "add",
        [
          "room1"
        ]
      ],
      [
        "=",
        "1",
        [
          -1,
          "room1",
          "get",
          "size"
        ]
      ]
    ],
    "spider": "&#xF12A;&#xF11D;&#xF132;&#xF124;&#xF10C;&#xF11C;&#xF131;&#xF116;&#xF129;&#xF114;&#xF132;&#xF124;&#xF10C;&#xF11C;&#xF121;&#xF121;&#xF132;&#xF136;&#xF134;&#xF101;&#xF143;&#xF124;&#xF10C;&#xF11C;&#xF131;&#xF116;&#xF124;&#xF108;&#xF120;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1581
  },
  {
    "role": "code",
    "lines": [
      "= 1 | room1 get size;"
    ],
    "preprocessed": "= 1 | room1 get size;",
    "code": "211321312321011001011321111010132101000111132233",
    "parse": [
      "=",
      "1",
      [
        -1,
        "room1",
        "get",
        "size"
      ]
    ],
    "spider": "&#xF136;&#xF134;&#xF101;&#xF143;&#xF124;&#xF10C;&#xF11C;&#xF131;&#xF116;&#xF124;&#xF108;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 1582
  },
  {
    "role": "code",
    "lines": [
      "= 0 | room2 get size;"
    ],
    "preprocessed": "= 0 | room2 get size;",
    "code": "211320312321011001100321111010132101000111132233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "room2",
        "get",
        "size"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF124;&#xF10C;&#xF11D;&#xF131;&#xF116;&#xF124;&#xF108;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 1583
  },
  {
    "role": "code",
    "lines": [
      "act | thing1 setRoom (room1);"
    ],
    "preprocessed": "act | thing1 setRoom (room1);",
    "code": "21111110013123210110100013210101010103221011001011332233",
    "parse": [
      "act",
      [
        -1,
        "thing1",
        "setRoom",
        [
          "room1"
        ]
      ]
    ],
    "spider": "&#xF123;&#xF10F;&#xF11A;&#xF101;&#xF143;&#xF124;&#xF10D;&#xF112;&#xF124;&#xF10A;&#xF11B;&#xF132;&#xF124;&#xF10C;&#xF11C;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1584
  },
  {
    "role": "code",
    "lines": [
      "= 2 | room1 get size;"
    ],
    "preprocessed": "= 2 | room1 get size;",
    "code": "2113210312321011001011321111010132101000111132233",
    "parse": [
      "=",
      "2",
      [
        -1,
        "room1",
        "get",
        "size"
      ]
    ],
    "spider": "&#xF136;&#xF135;&#xF101;&#xF143;&#xF124;&#xF10C;&#xF11C;&#xF131;&#xF116;&#xF124;&#xF108;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 1585
  },
  {
    "role": "code",
    "lines": [
      "= 0 | room2 get size;"
    ],
    "preprocessed": "= 0 | room2 get size;",
    "code": "211320312321011001100321111010132101000111132233",
    "parse": [
      "=",
      "0",
      [
        -1,
        "room2",
        "get",
        "size"
      ]
    ],
    "spider": "&#xF136;&#xF133;&#xF101;&#xF143;&#xF124;&#xF10C;&#xF11D;&#xF131;&#xF116;&#xF124;&#xF108;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 1586
  },
  {
    "role": "code",
    "lines": [
      "act | thing1 setRoom (room2);"
    ],
    "preprocessed": "act | thing1 setRoom (room2);",
    "code": "21111110013123210110100013210101010103221011001100332233",
    "parse": [
      "act",
      [
        -1,
        "thing1",
        "setRoom",
        [
          "room2"
        ]
      ]
    ],
    "spider": "&#xF123;&#xF10F;&#xF11A;&#xF101;&#xF143;&#xF124;&#xF10D;&#xF112;&#xF124;&#xF10A;&#xF11B;&#xF132;&#xF124;&#xF10C;&#xF11D;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1587
  },
  {
    "role": "code",
    "lines": [
      "room1 get size;"
    ],
    "preprocessed": "room1 get size;",
    "code": "21011001011321111010132101000111132233",
    "parse": [
      "room1",
      "get",
      "size"
    ],
    "spider": "&#xF124;&#xF10C;&#xF11C;&#xF131;&#xF116;&#xF124;&#xF108;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 1588
  },
  {
    "role": "code",
    "lines": [
      "room2 get size;"
    ],
    "preprocessed": "room2 get size;",
    "code": "21011001100321111010132101000111132233",
    "parse": [
      "room2",
      "get",
      "size"
    ],
    "spider": "&#xF124;&#xF10C;&#xF11D;&#xF131;&#xF116;&#xF124;&#xF108;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 1589
  },
  {
    "role": "code",
    "lines": [
      "thing1 equals (thing1);"
    ],
    "preprocessed": "thing1 equals (thing1);",
    "code": "21011010001321111110003221011010001332233",
    "parse": [
      "thing1",
      "equals",
      [
        "thing1"
      ]
    ],
    "spider": "&#xF124;&#xF10D;&#xF112;&#xF123;&#xF10F;&#xF119;&#xF132;&#xF124;&#xF10D;&#xF112;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1590
  },
  {
    "role": "code",
    "lines": [
      "room1 equals (room1);"
    ],
    "preprocessed": "room1 equals (room1);",
    "code": "21011001011321111110003221011001011332233",
    "parse": [
      "room1",
      "equals",
      [
        "room1"
      ]
    ],
    "spider": "&#xF124;&#xF10C;&#xF11C;&#xF123;&#xF10F;&#xF119;&#xF132;&#xF124;&#xF10C;&#xF11C;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1591
  },
  {
    "role": "code",
    "lines": [
      "not | thing1 equals (room1);"
    ],
    "preprocessed": "not | thing1 equals (room1);",
    "code": "2101312321011010001321111110003221011001011332233",
    "parse": [
      "not",
      [
        -1,
        "thing1",
        "equals",
        [
          "room1"
        ]
      ]
    ],
    "spider": "&#xF138;&#xF101;&#xF143;&#xF124;&#xF10D;&#xF112;&#xF123;&#xF10F;&#xF119;&#xF132;&#xF124;&#xF10C;&#xF11C;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1592
  },
  {
    "role": "code",
    "lines": [
      "equal \"newyork\" | door12 apply (room1) (s \"south\") getName intValue;"
    ],
    "preprocessed": "equal \"newyork\" | door12 apply (room1) (s \"south\") getName intValue;",
    "code": "2100032101101010131232101100110132110001032210110010113322101100101032101100111033210101111103211111111132233",
    "parse": [
      "equal",
      "\"newyork\"",
      [
        -1,
        "door12",
        "apply",
        [
          "room1"
        ],
        [
          "s",
          "\"south\""
        ],
        "getName",
        "intValue"
      ]
    ],
    "spider": "&#xF13B;&#xF124;&#xF10D;&#xF116;&#xF101;&#xF143;&#xF124;&#xF10C;&#xF11E;&#xF128;&#xF113;&#xF132;&#xF124;&#xF10C;&#xF11C;&#xF121;&#xF132;&#xF124;&#xF10C;&#xF11B;&#xF124;&#xF10C;&#xF11F;&#xF121;&#xF124;&#xF10B;&#xF11F;&#xF123;&#xF10F;&#xF120;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | door12 apply (room1) (s \"south\") getName intValue;"
    ],
    "stanza": 1593
  },
  {
    "role": "code",
    "lines": [
      "equal \"boston\" | door12 apply (room2) (s \"north\") getName intValue;"
    ],
    "preprocessed": "equal \"boston\" | door12 apply (room2) (s \"north\") getName intValue;",
    "code": "2100032100111000031232101100110132110001032210110011003322101100101032101100111133210101111103211111111132233",
    "parse": [
      "equal",
      "\"boston\"",
      [
        -1,
        "door12",
        "apply",
        [
          "room2"
        ],
        [
          "s",
          "\"north\""
        ],
        "getName",
        "intValue"
      ]
    ],
    "spider": "&#xF13B;&#xF124;&#xF107;&#xF111;&#xF101;&#xF143;&#xF124;&#xF10C;&#xF11E;&#xF128;&#xF113;&#xF132;&#xF124;&#xF10C;&#xF11D;&#xF121;&#xF132;&#xF124;&#xF10C;&#xF11B;&#xF124;&#xF10C;&#xF120;&#xF121;&#xF124;&#xF10B;&#xF11F;&#xF123;&#xF10F;&#xF120;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | door12 apply (room2) (s \"north\") getName intValue;"
    ],
    "stanza": 1594
  },
  {
    "role": "code",
    "lines": [
      "define o",
      "  (? x | jworld get | s | x);"
    ],
    "preprocessed": "define o\n  (? x | jworld get | s | x);",
    "code": "21101321000000000322110032100111312321011010000321111010131232101100101031232100111332233",
    "parse": [
      "define",
      "o",
      [
        "?",
        "x",
        [
          -1,
          "jworld",
          "get",
          [
            -1,
            "s",
            [
              -1,
              "x"
            ]
          ]
        ]
      ]
    ],
    "spider": "&#xF140;&#xF124;&#xF100;&#xF111;&#xF132;&#xF13F;&#xF124;&#xF118;&#xF101;&#xF143;&#xF124;&#xF10D;&#xF111;&#xF131;&#xF116;&#xF101;&#xF143;&#xF124;&#xF10C;&#xF11B;&#xF101;&#xF143;&#xF124;&#xF118;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1595
  },
  {
    "role": "code",
    "lines": [
      "= \"newyork\" | (o \"bus\") getRoom getName intValue;"
    ],
    "preprocessed": "= \"newyork\" | (o \"bus\") getRoom getName intValue;",
    "code": "211321011010101312322100000000032101101001133210101011003210101111103211111111132233",
    "parse": [
      "=",
      "\"newyork\"",
      [
        -1,
        [
          "o",
          "\"bus\""
        ],
        "getRoom",
        "getName",
        "intValue"
      ]
    ],
    "spider": "&#xF136;&#xF124;&#xF10D;&#xF116;&#xF101;&#xF143;&#xF132;&#xF124;&#xF100;&#xF111;&#xF124;&#xF10D;&#xF114;&#xF121;&#xF124;&#xF10A;&#xF11D;&#xF124;&#xF10B;&#xF11F;&#xF123;&#xF10F;&#xF120;&#xF132;&#xF143;&#xF121;",
    "stanza": 1596
  },
  {
    "role": "code",
    "lines": [
      "act | robo1 setRoom (room1);"
    ],
    "preprocessed": "act | robo1 setRoom (room1);",
    "code": "21111110013123210110100103210101010103221011001011332233",
    "parse": [
      "act",
      [
        -1,
        "robo1",
        "setRoom",
        [
          "room1"
        ]
      ]
    ],
    "spider": "&#xF123;&#xF10F;&#xF11A;&#xF101;&#xF143;&#xF124;&#xF10D;&#xF113;&#xF124;&#xF10A;&#xF11B;&#xF132;&#xF124;&#xF10C;&#xF11C;&#xF121;&#xF132;&#xF143;&#xF121;",
    "stanza": 1597
  },
  {
    "role": "code",
    "lines": [
      "equal \"boston\" | (o \"autobus\") getRoom getName intValue;"
    ],
    "preprocessed": "equal \"boston\" | (o \"autobus\") getRoom getName intValue;",
    "code": "21000321001110000312322100000000032101101010033210101011003210101111103211111111132233",
    "parse": [
      "equal",
      "\"boston\"",
      [
        -1,
        [
          "o",
          "\"autobus\""
        ],
        "getRoom",
        "getName",
        "intValue"
      ]
    ],
    "spider": "&#xF13B;&#xF124;&#xF107;&#xF111;&#xF101;&#xF143;&#xF132;&#xF124;&#xF100;&#xF111;&#xF124;&#xF10D;&#xF115;&#xF121;&#xF124;&#xF10A;&#xF11D;&#xF124;&#xF10B;&#xF11F;&#xF123;&#xF10F;&#xF120;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | (o \"autobus\") getRoom getName intValue;"
    ],
    "stanza": 1598
  },
  {
    "role": "code",
    "lines": [
      "act | jworld update;"
    ],
    "preprocessed": "act | jworld update;",
    "code": "21111110013123210110100003210001010132233",
    "parse": [
      "act",
      [
        -1,
        "jworld",
        "update"
      ]
    ],
    "spider": "&#xF123;&#xF10F;&#xF11A;&#xF101;&#xF143;&#xF124;&#xF10D;&#xF111;&#xF123;&#xF101;&#xF116;&#xF132;&#xF143;&#xF121;",
    "stanza": 1599
  },
  {
    "role": "code",
    "lines": [
      "equal \"newyork\" | (o \"autobus\") getRoom getName intValue;"
    ],
    "preprocessed": "equal \"newyork\" | (o \"autobus\") getRoom getName intValue;",
    "code": "21000321011010101312322100000000032101101010033210101011003210101111103211111111132233",
    "parse": [
      "equal",
      "\"newyork\"",
      [
        -1,
        [
          "o",
          "\"autobus\""
        ],
        "getRoom",
        "getName",
        "intValue"
      ]
    ],
    "spider": "&#xF13B;&#xF124;&#xF10D;&#xF116;&#xF101;&#xF143;&#xF132;&#xF124;&#xF100;&#xF111;&#xF124;&#xF10D;&#xF115;&#xF121;&#xF124;&#xF10A;&#xF11D;&#xF124;&#xF10B;&#xF11F;&#xF123;&#xF10F;&#xF120;&#xF132;&#xF143;&#xF121;",
    "lines_original": [
      "demo | (o \"autobus\") getRoom getName intValue;"
    ],
    "stanza": 1600
  }
]