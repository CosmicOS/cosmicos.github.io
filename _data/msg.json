[
  {
    "role": "file",
    "lines": [
      "== COS_License =="
    ],
    "stanza": 0
  },
  {
    "role": "comment",
    "lines": [
      "#   Author: Paul Fitzpatrick, paulfitz@alum.mit.edu",
      "#   Copyright (c) 2018 Paul Fitzpatrick",
      "#",
      "#   This file is part of CosmicOS.",
      "#",
      "#   CosmicOS is free software; you can redistribute it and/or modify",
      "#   it under the terms of the GNU General Public License as published by",
      "#   the Free Software Foundation; either version 2 of the License, or",
      "#   (at your option) any later version.",
      "#",
      "#   CosmicOS is distributed in the hope that it will be useful,",
      "#   but WITHOUT ANY WARRANTY; without even the implied warranty of",
      "#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the",
      "#   GNU General Public License for more details.",
      "#",
      "#   You should have received a copy of the GNU General Public License",
      "#   along with CosmicOS; if not, write to the Free Software",
      "#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA",
      "#"
    ],
    "stanza": 1
  },
  {
    "role": "file",
    "lines": [
      "== COS_Intro =="
    ],
    "stanza": 2
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Here we count up from zero, go through some primes, that sort of",
      "thing.  Just like in the movies!  There is some syntax around the",
      "numbers, and a structure to the \"lesson,\" but it will be fine for the",
      "listener to ignore all that for now.  Hopefully what they will pick up",
      "on is:",
      "",
      " * There are some repeating patterns.",
      " * Between those patterns, there's a specific short unit repeating",
      "   a varying number of times (we count in unary).",
      " * The number of times it varies smells like math.",
      "",
      "We'll get to a more compact representation of numbers later, once",
      "we've established the basics.",
      ""
    ],
    "section_description": "introduce numbers (in unary notation)",
    "section_category": "MATH",
    "section_index": 0,
    "stanza": 3
  },
  {
    "role": "code",
    "lines": [
      "intro unary;"
    ],
    "preprocessed": "intro unary;",
    "dt": false,
    "parse": [
      "intro",
      "unary"
    ],
    "code": "12100103121111111132233",
    "spider": "&#xf156;&#xf24a;&#xf147;&#xf183;&#xf24b;",
    "stanza": 4
  },
  {
    "role": "code",
    "lines": [
      "intro is:int;"
    ],
    "preprocessed": "intro is:int;",
    "dt": false,
    "parse": [
      "intro",
      "is:int"
    ],
    "code": "121001031212111101312111110332233",
    "spider": "&#xf156;&#xf24a;&#xf181;&#xf182;&#xf24b;",
    "stanza": 5
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 0;"
    ],
    "preprocessed": "is:int | unary 0;",
    "dt": false,
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "0"
      ]
    ],
    "code": "1212111101312111110330231211111111302032233",
    "spider": "&#xf181;&#xf182;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 6
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 0;"
    ],
    "preprocessed": "is:int | unary 1 0;",
    "dt": false,
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "0"
      ]
    ],
    "code": "12121111013121111103302312111111113021302032233",
    "spider": "&#xf181;&#xf182;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 7
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 0;",
    "dt": false,
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121211110131211111033023121111111130213021302032233",
    "spider": "&#xf181;&#xf182;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 8
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1212111101312111110330231211111111302130213021302032233",
    "spider": "&#xf181;&#xf182;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 9
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12121111013121111103302312111111113021302130213021302032233",
    "spider": "&#xf181;&#xf182;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 10
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121211110131211111033023121111111130213021302130213021302032233",
    "spider": "&#xf181;&#xf182;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 11
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1212111101312111110330231211111111302130213021302130213021302032233",
    "spider": "&#xf181;&#xf182;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 12
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12121111013121111103302312111111113021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf182;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 13
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121211110131211111033023121111111130213021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf182;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 14
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1212111101312111110330231211111111302130213021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf182;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 15
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12121111013121111103302312111111113021302130213021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf182;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 16
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121211110131211111033023121111111130213021302130213021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf182;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 17
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1212111101312111110330231211111111302130213021302130213021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf182;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 18
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12121111013121111103302312111111113021302130213021302130213021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf182;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 19
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121211110131211111033023121111111130213021302130213021302130213021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf182;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 20
  },
  {
    "role": "code",
    "lines": [
      "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:int | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:int",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1212111101312111110330231211111111302130213021302130213021302130213021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf182;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 21
  },
  {
    "role": "code",
    "lines": [
      "intro is:square;"
    ],
    "preprocessed": "intro is:square;",
    "dt": false,
    "parse": [
      "intro",
      "is:square"
    ],
    "code": "121001031212111101312111111332233",
    "spider": "&#xf156;&#xf24a;&#xf181;&#xf183;&#xf24b;",
    "stanza": 22
  },
  {
    "role": "code",
    "lines": [
      "is:square | unary 0;"
    ],
    "preprocessed": "is:square | unary 0;",
    "dt": false,
    "parse": [
      "is:square",
      [
        -1,
        "unary",
        "0"
      ]
    ],
    "code": "1212111101312111111330231211111111302032233",
    "spider": "&#xf181;&#xf183;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 23
  },
  {
    "role": "code",
    "lines": [
      "is:square | unary 1 0;"
    ],
    "preprocessed": "is:square | unary 1 0;",
    "dt": false,
    "parse": [
      "is:square",
      [
        -1,
        "unary",
        "1",
        "0"
      ]
    ],
    "code": "12121111013121111113302312111111113021302032233",
    "spider": "&#xf181;&#xf183;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 24
  },
  {
    "role": "code",
    "lines": [
      "is:square | unary 1 1 1 1 0;"
    ],
    "preprocessed": "is:square | unary 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:square",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12121111013121111113302312111111113021302130213021302032233",
    "spider": "&#xf181;&#xf183;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 25
  },
  {
    "role": "code",
    "lines": [
      "is:square | unary 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:square | unary 1 1 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:square",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1212111101312111111330231211111111302130213021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf183;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 26
  },
  {
    "role": "code",
    "lines": [
      "is:square | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:square | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:square",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12121111013121111113302312111111113021302130213021302130213021302130213021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf183;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 27
  },
  {
    "role": "code",
    "lines": [
      "is:square | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:square | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:square",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12121111013121111113302312111111113021302130213021302130213021302130213021302130213021302130213021302130213021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf183;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 28
  },
  {
    "role": "code",
    "lines": [
      "intro is:prime;"
    ],
    "preprocessed": "intro is:prime;",
    "dt": false,
    "parse": [
      "intro",
      "is:prime"
    ],
    "code": "1210010312121111013121000000332233",
    "spider": "&#xf156;&#xf24a;&#xf181;&#xf145;&#xf144;&#xf24b;",
    "stanza": 29
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 0;",
    "dt": false,
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1212111101312100000033023121111111130213021302032233",
    "spider": "&#xf181;&#xf145;&#xf144;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 30
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12121111013121000000330231211111111302130213021302032233",
    "spider": "&#xf181;&#xf145;&#xf144;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 31
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1212111101312100000033023121111111130213021302130213021302032233",
    "spider": "&#xf181;&#xf145;&#xf144;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 32
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121211110131210000003302312111111113021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf145;&#xf144;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 33
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1212111101312100000033023121111111130213021302130213021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf145;&#xf144;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 34
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121211110131210000003302312111111113021302130213021302130213021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf145;&#xf144;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 35
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1212111101312100000033023121111111130213021302130213021302130213021302130213021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf145;&#xf144;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 36
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121211110131210000003302312111111113021302130213021302130213021302130213021302130213021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf145;&#xf144;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 37
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1212111101312100000033023121111111130213021302130213021302130213021302130213021302130213021302130213021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf145;&#xf144;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 38
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1212111101312100000033023121111111130213021302130213021302130213021302130213021302130213021302130213021302130213021302130213021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf145;&#xf144;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 39
  },
  {
    "role": "code",
    "lines": [
      "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;"
    ],
    "preprocessed": "is:prime | unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0;",
    "dt": false,
    "parse": [
      "is:prime",
      [
        -1,
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121211110131210000003302312111111113021302130213021302130213021302130213021302130213021302130213021302130213021302130213021302130213021302130213021302130213021302032233",
    "spider": "&#xf181;&#xf145;&#xf144;&#xf248;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 40
  },
  {
    "role": "file",
    "lines": [
      "== COS_Compare =="
    ],
    "stanza": 41
  },
  {
    "role": "doc",
    "lines": [
      "",
      "We've hopefully cued our listeners to be looking for mathematical",
      "patterns.  So let's give them some more.  It doesn't matter so much",
      "what patterns we give, as long as they are clear, and that there are",
      "several of them.  Eventually we'll want the listener to start turning",
      "things around, and use the parts of the message they understand (the",
      "mathematical patterns) to learn something about the parts they don't",
      "(the message structure and syntax).",
      "",
      "Let's take a shot at introducing ways of comparing numbers.",
      "No doubt we're revealing a feudal, reductive mindset in which",
      "all things must be ranked in a hierachy.  ¯\\\\\\_(ツ)_/¯.",
      "",
      "Equality is introduced by a series of true statements of the form `X = X` ",
      "(the syntax is a little different than regular math, more like ",
      "`= X X`, but that isn't important yet).  The listener will hopefully",
      "discern a number getting repeated twice within the \"sentence\"",
      "structure they've been seeing, but won't be sure yet what we are",
      "driving at until we introduce non-equality and contrast with it.",
      "",
      ""
    ],
    "section_description": "introduce equality and inequality of numbers",
    "section_category": "MATH",
    "section_index": 1,
    "stanza": 42
  },
  {
    "role": "code",
    "lines": [
      "intro =;"
    ],
    "preprocessed": "intro =;",
    "dt": false,
    "parse": [
      "intro",
      "="
    ],
    "code": "12100103121132233",
    "spider": "&#xf156;&#xf24a;&#xf147;&#xf24b;",
    "stanza": 43
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 0) (unary 1 0);"
    ],
    "preprocessed": "= (unary 1 0) (unary 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "code": "121132121111111130213020332121111111130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 44
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12113212111111113021302130203321211111111302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 45
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 0) (unary 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1211321211111111302130213021302033212111111113021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 46
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 0) (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121132121111111130213021302130213020332121111111130213021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 47
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 0) (unary 1 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 0) (unary 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12113212111111113021302130213021302130203321211111111302130213021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 48
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1211321211111111302130213021302130213021302033212111111113021302130213021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 49
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121132121111111130213021302130213021302130213020332121111111130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 50
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12113212111111113021302130213021302130213021302130203321211111111302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 51
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 0) (unary 1 0);"
    ],
    "preprocessed": "= (unary 1 0) (unary 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "code": "121132121111111130213020332121111111130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 52
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1211321211111111302130213021302130213021302033212111111113021302130213021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 53
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12113212111111113021302130203321211111111302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 54
  },
  {
    "role": "doc",
    "lines": [
      "Now introduce symbols for 'greater than' and 'less than,' and contrast with equality.",
      "Hopefully the listener will start to understand what part of the sentences are numbers, what part is a function of the relationship between the numbers, and what parts are just meaningless (for now) scaffolding around all that.",
      "There's an ambiguity between the 'greater than' and 'less than' symbols, depending on how you interpret the sentences, but it doesn't matter yet."
    ],
    "stanza": 55
  },
  {
    "role": "code",
    "lines": [
      "intro >;"
    ],
    "preprocessed": "intro >;",
    "dt": false,
    "parse": [
      "intro",
      ">"
    ],
    "code": "121001031210032233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf24b;",
    "stanza": 56
  },
  {
    "role": "code",
    "lines": [
      "intro <;"
    ],
    "preprocessed": "intro <;",
    "dt": false,
    "parse": [
      "intro",
      "<"
    ],
    "code": "12100103121032233",
    "spider": "&#xf156;&#xf24a;&#xf146;&#xf24b;",
    "stanza": 57
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 0) (unary 1 0);"
    ],
    "preprocessed": "= (unary 1 0) (unary 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "code": "121132121111111130213020332121111111130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 58
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "< (unary 1 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210321211111111302130203321211111111302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 59
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 0) (unary 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12103212111111113021302033212111111113021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 60
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 0) (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121032121111111130213020332121111111130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 61
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 0) (unary 1 0);"
    ],
    "preprocessed": "> (unary 1 1 0) (unary 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "code": "12100321211111111302130213020332121111111130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 62
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12113212111111113021302130203321211111111302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 63
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 0) (unary 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121032121111111130213021302033212111111113021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 64
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 0) (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210321211111111302130213020332121111111130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 65
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 0) (unary 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "code": "121003212111111113021302130213020332121111111130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 66
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210032121111111130213021302130203321211111111302130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 67
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 0) (unary 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1211321211111111302130213021302033212111111113021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 68
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 1 0) (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12103212111111113021302130213020332121111111130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 69
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 0) (unary 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "code": "1210032121111111130213021302130213020332121111111130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 70
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12100321211111111302130213021302130203321211111111302130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 71
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 0) (unary 1 1 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121003212111111113021302130213021302033212111111113021302130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 72
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 0) (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121132121111111130213021302130213020332121111111130213021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 73
  },
  {
    "role": "doc",
    "lines": [
      "Add some random examples."
    ],
    "stanza": 74
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 0) (unary 1 1 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121003212111111113021302130213021302033212111111113021302130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 75
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 0);"
    ],
    "preprocessed": "> (unary 1 1 1 0) (unary 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "code": "12100321211111111302130213021302033212111111113020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 76
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 0) (unary 0);"
    ],
    "preprocessed": "> (unary 1 0) (unary 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "code": "121003212111111113021302033212111111113020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 77
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 1 1 1 0) (unary 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 1 1 1 1 0) (unary 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "code": "1210032121111111130213021302130213021302130213021302033212111111113020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 78
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121003212111111113021302130213021302130213021302033212111111113021302130213021302130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 79
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 1 1 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210032121111111130213021302130213021302130203321211111111302130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 80
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 0) (unary 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 1 0) (unary 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "code": "1210032121111111130213021302130213021302033212111111113020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 81
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 1 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 1 1 1 1 1 0) (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121003212111111113021302130213021302130213021302130213020332121111111130213021302130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 82
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 1 0) (unary 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 1 0) (unary 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "code": "12100321211111111302130213021302130213020332121111111130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 83
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 0) (unary 0);"
    ],
    "preprocessed": "> (unary 1 1 0) (unary 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "code": "1210032121111111130213021302033212111111113020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 84
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 0) (unary 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "code": "121003212111111113021302130213020332121111111130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 85
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12103212111111113021302130213021302130213021302033212111111113021302130213021302130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 86
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 1 0) (unary 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 1 0) (unary 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210321211111111302130213021302033212111111113021302130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 87
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 0) (unary 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121032121111111130213021302033212111111113021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 88
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 0) (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210321211111111302130213020332121111111130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 89
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 0);"
    ],
    "preprocessed": "< (unary 0) (unary 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "code": "12103212111111113020332121111111130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 90
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 0) (unary 1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12103212111111113020332121111111130213021302130213021302130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 91
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "< (unary 0) (unary 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210321211111111302033212111111113021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 92
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 0) (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12103212111111113020332121111111130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 93
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 1 1 0) (unary 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 1 1 0) (unary 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12103212111111113021302130213021302033212111111113021302130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 94
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 1 0);"
    ],
    "preprocessed": "< (unary 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121032121111111130203321211111111302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 95
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 0) (unary 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 0) (unary 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210321211111111302130203321211111111302130213021302130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 96
  },
  {
    "role": "doc",
    "lines": [
      "Even more random examples.  We shouldn't be shy about piling on examples at this early stage of the message.  Even just the repetition of the sentence structure with many small variations could help guide the listener at a more fundamental level than what we're ostensibly trying to communicate here."
    ],
    "stanza": 97
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 0) (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121132121111111130213021302130213020332121111111130213021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 98
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12100321211111111302130213021302130203321211111111302130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 99
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "< (unary 1 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210321211111111302130203321211111111302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 100
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210032121111111130213021302130203321211111111302130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 101
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 0) (unary 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "code": "121003212111111113021302130213021302033212111111113020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 102
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 0) (unary 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "code": "121003212111111113021302130213020332121111111130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 103
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 1 0);"
    ],
    "preprocessed": "< (unary 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121032121111111130203321211111111302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 104
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 0);"
    ],
    "preprocessed": "> (unary 1 1 1 0) (unary 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "code": "12100321211111111302130213021302033212111111113020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 105
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 0) (unary 1 0);"
    ],
    "preprocessed": "> (unary 1 1 0) (unary 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "code": "12100321211111111302130213020332121111111130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 106
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 1 0) (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12103212111111113021302130213020332121111111130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 107
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210032121111111130213021302130203321211111111302130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 108
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12100321211111111302130213021302130203321211111111302130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 109
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12113212111111113021302130203321211111111302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 110
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 1 0);"
    ],
    "preprocessed": "< (unary 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121032121111111130203321211111111302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 111
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 0) (unary 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "code": "121003212111111113021302130213021302033212111111113020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 112
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 0) (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210321211111111302130213020332121111111130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 113
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 0) (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121032121111111130213020332121111111130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 114
  },
  {
    "role": "code",
    "lines": [
      "> (unary 1 1 1 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "> (unary 1 1 1 1 0) (unary 1 1 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121003212111111113021302130213021302033212111111113021302130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 115
  },
  {
    "role": "code",
    "lines": [
      "< (unary 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 0) (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12103212111111113020332121111111130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 116
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 0) (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210321211111111302130213020332121111111130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 117
  },
  {
    "role": "code",
    "lines": [
      "< (unary 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary 1 1 0) (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210321211111111302130213020332121111111130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 118
  },
  {
    "role": "file",
    "lines": [
      "== COS_NotLogic =="
    ],
    "stanza": 119
  },
  {
    "role": "doc",
    "lines": [
      "",
      "At this point, the listener can find numbers in our sentences, and has some",
      "idea of symbols related to equality and inequality.  But the structure of the",
      "sentences remains a mystery.  Let's introduce more math, so that we can show",
      "different sentence structures.  First, let's introduce logical negation.",
      "We construct some sentences the listener should know are wrong, and put \"not\"",
      "in front of them.",
      "",
      ""
    ],
    "section_description": "introduce logical negation",
    "section_category": "MATH",
    "section_index": 2,
    "stanza": 120
  },
  {
    "role": "code",
    "lines": [
      "intro not;"
    ],
    "preprocessed": "intro not;",
    "dt": false,
    "parse": [
      "intro",
      "not"
    ],
    "code": "121001031210132233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf24b;",
    "stanza": 121
  },
  {
    "role": "doc",
    "lines": [
      "Show an equality, then negate two conflicting inequalities."
    ],
    "stanza": 122
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) (unary  0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "code": "1211321211111111302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 123
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  0) (unary  0);"
    ],
    "preprocessed": "not | < (unary  0) (unary  0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "1210130231210321211111111302033212111111113020332233",
    "spider": "&#xf149;&#xf248;&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 124
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  0) (unary  0);"
    ],
    "preprocessed": "not | > (unary  0) (unary  0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "12101302312100321211111111302033212111111113020332233",
    "spider": "&#xf149;&#xf248;&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 125
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) (unary  1 1 1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 0) (unary  1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121132121111111130213021302130213020332121111111130213021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 126
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 0) (unary  1 1 1 1 0);"
    ],
    "preprocessed": "not | < (unary  1 1 1 1 0) (unary  1 1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121013023121032121111111130213021302130213020332121111111130213021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 127
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 1 1 0) (unary  1 1 1 1 0);"
    ],
    "preprocessed": "not | > (unary  1 1 1 1 0) (unary  1 1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1210130231210032121111111130213021302130213020332121111111130213021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 128
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1211321211111111302130213021302130213021302033212111111113021302130213021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 129
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | < (unary  1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1210130231210321211111111302130213021302130213021302033212111111113021302130213021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 130
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | > (unary  1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12101302312100321211111111302130213021302130213021302033212111111113021302130213021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 131
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 0) (unary  1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12113212111111113021302130203321211111111302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 132
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "not | < (unary  1 1 0) (unary  1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12101302312103212111111113021302130203321211111111302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 133
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "not | > (unary  1 1 0) (unary  1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121013023121003212111111113021302130203321211111111302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 134
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) (unary  1 1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 0) (unary  1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1211321211111111302130213021302033212111111113021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 135
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 0) (unary  1 1 1 0);"
    ],
    "preprocessed": "not | < (unary  1 1 1 0) (unary  1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1210130231210321211111111302130213021302033212111111113021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 136
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 1 0) (unary  1 1 1 0);"
    ],
    "preprocessed": "not | > (unary  1 1 1 0) (unary  1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12101302312100321211111111302130213021302033212111111113021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 137
  },
  {
    "role": "doc",
    "lines": [
      "Show an inequality, then two negations."
    ],
    "stanza": 138
  },
  {
    "role": "code",
    "lines": [
      "< (unary  1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary  1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12103212111111113021302130213020332121111111130213021302130213021302130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 139
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | = (unary  1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12101302312113212111111113021302130213020332121111111130213021302130213021302130213021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 140
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | > (unary  1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121013023121003212111111113021302130213020332121111111130213021302130213021302130213021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 141
  },
  {
    "role": "code",
    "lines": [
      "< (unary  1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary  1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210321211111111302130213021302130213020332121111111130213021302130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 142
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | = (unary  1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1210130231211321211111111302130213021302130213020332121111111130213021302130213021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 143
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | > (unary  1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12101302312100321211111111302130213021302130213020332121111111130213021302130213021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 144
  },
  {
    "role": "code",
    "lines": [
      "< (unary  1 0) (unary  1 1 0);"
    ],
    "preprocessed": "< (unary  1 0) (unary  1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210321211111111302130203321211111111302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 145
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 0) (unary  1 1 0);"
    ],
    "preprocessed": "not | = (unary  1 0) (unary  1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1210130231211321211111111302130203321211111111302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 146
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 0) (unary  1 1 0);"
    ],
    "preprocessed": "not | > (unary  1 0) (unary  1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12101302312100321211111111302130203321211111111302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 147
  },
  {
    "role": "code",
    "lines": [
      "< (unary  0) (unary  1 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary  0) (unary  1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121032121111111130203321211111111302130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 148
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  0) (unary  1 1 1 1 1 0);"
    ],
    "preprocessed": "not | = (unary  0) (unary  1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121013023121132121111111130203321211111111302130213021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 149
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  0) (unary  1 1 1 1 1 0);"
    ],
    "preprocessed": "not | > (unary  0) (unary  1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1210130231210032121111111130203321211111111302130213021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 150
  },
  {
    "role": "code",
    "lines": [
      "< (unary  1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "< (unary  1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "<",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12103212111111113021302130213021302130213021302130203321211111111302130213021302130213021302130213021302130213021302130213020332233",
    "spider": "&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 151
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | = (unary  1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12101302312113212111111113021302130213021302130213021302130203321211111111302130213021302130213021302130213021302130213021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 152
  },
  {
    "role": "code",
    "lines": [
      "not | > (unary  1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | > (unary  1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        ">",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121013023121003212111111113021302130213021302130213021302130203321211111111302130213021302130213021302130213021302130213021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 153
  },
  {
    "role": "doc",
    "lines": [
      "Show another batch of inequalities with negations."
    ],
    "stanza": 154
  },
  {
    "role": "code",
    "lines": [
      "> (unary  1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);"
    ],
    "preprocessed": "> (unary  1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210032121111111130213021302130213021302130213021302130213021302033212111111113021302130213021302130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 155
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | = (unary  1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121013023121132121111111130213021302130213021302130213021302130213021302033212111111113021302130213021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 156
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | < (unary  1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121013023121032121111111130213021302130213021302130213021302130213021302033212111111113021302130213021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 157
  },
  {
    "role": "code",
    "lines": [
      "> (unary  1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "> (unary  1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210032121111111130213021302130213021302130213021302130213021302130203321211111111302130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 158
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "not | = (unary  1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121013023121132121111111130213021302130213021302130213021302130213021302130203321211111111302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 159
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "not | < (unary  1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121013023121032121111111130213021302130213021302130213021302130213021302130203321211111111302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 160
  },
  {
    "role": "code",
    "lines": [
      "> (unary  1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "> (unary  1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1210032121111111130213021302130213021302130213021302130213020332121111111130213021302130213021302130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 161
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | = (unary  1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121013023121132121111111130213021302130213021302130213021302130213020332121111111130213021302130213021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 162
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | < (unary  1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121013023121032121111111130213021302130213021302130213021302130213020332121111111130213021302130213021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 163
  },
  {
    "role": "code",
    "lines": [
      "> (unary  1 1 1 1 0) (unary  0);"
    ],
    "preprocessed": "> (unary  1 1 1 1 0) (unary  0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "0"
      ]
    ],
    "code": "121003212111111113021302130213021302033212111111113020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 164
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 0) (unary  0);"
    ],
    "preprocessed": "not | = (unary  1 1 1 1 0) (unary  0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "12101302312113212111111113021302130213021302033212111111113020332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 165
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 0) (unary  0);"
    ],
    "preprocessed": "not | < (unary  1 1 1 1 0) (unary  0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "12101302312103212111111113021302130213021302033212111111113020332233",
    "spider": "&#xf149;&#xf248;&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 166
  },
  {
    "role": "code",
    "lines": [
      "> (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "> (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      ">",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121003212111111113021302130213021302130213021302130213021302130213021302130213021302033212111111113021302130213021302130213021302130213020332233",
    "spider": "&#xf148;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 167
  },
  {
    "role": "code",
    "lines": [
      "not | = (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | = (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12101302312113212111111113021302130213021302130213021302130213021302130213021302130213021302033212111111113021302130213021302130213021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 168
  },
  {
    "role": "code",
    "lines": [
      "not | < (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "not | < (unary  1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0) (unary  1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "<",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12101302312103212111111113021302130213021302130213021302130213021302130213021302130213021302033212111111113021302130213021302130213021302130213020332233",
    "spider": "&#xf149;&#xf248;&#xf146;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 169
  },
  {
    "role": "file",
    "lines": [
      "== COS_Addition =="
    ],
    "stanza": 170
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Let's introduce some arithmetic, to show off still more sentence structure.",
      "We show sentences of the mathematical form `X = Y + Z`, which in our message look like",
      "`= X | + Y Z`.  From this, and the negation lesson, the listener will hopefully",
      "start picking up on how to chain operations.",
      "",
      "If the listener didn't already have a pretty clear idea of what `=` is,",
      "then these sentences could just as easily be interpreted as being about subtraction.",
      "Even having an idea of `=`, syntax is still fuzzy enough that this lesson may not",
      "be unambiguous by itself.",
      ""
    ],
    "section_description": "introduce addition",
    "section_category": "MATH",
    "section_index": 3,
    "stanza": 171
  },
  {
    "role": "code",
    "lines": [
      "intro +;"
    ],
    "preprocessed": "intro +;",
    "dt": false,
    "parse": [
      "intro",
      "+"
    ],
    "code": "1210010312101032233",
    "spider": "&#xf156;&#xf24a;&#xf14e;&#xf24b;",
    "stanza": 172
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | + (unary  0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 0) | + (unary  0) (unary  1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12113212111111113021302130203302312101032121111111130203321211111111302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 173
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 1 0) | + (unary  1 1 1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 1 0) | + (unary  1 1 1 1 0) (unary  1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12113212111111113021302130213021302130203302312101032121111111130213021302130213020332121111111130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 174
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | + (unary  1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  1 1 0) | + (unary  1 1 0) (unary  0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "12113212111111113021302130203302312101032121111111130213021302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 175
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | + (unary  0) (unary  1 1 1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 0) | + (unary  0) (unary  1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130213021302130213020330231210103212111111113020332121111111130213021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 176
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | + (unary  1 1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 0) | + (unary  1 1 1 0) (unary  1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130213021302130213020330231210103212111111113021302130213020332121111111130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 177
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | + (unary  1 0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 0) | + (unary  1 0) (unary  1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302130213021302033023121010321211111111302130203321211111111302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 178
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | + (unary  0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | + (unary  0) (unary  0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302033023121010321211111111302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 179
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | + (unary  1 1 1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 0) | + (unary  1 1 1 1 0) (unary  0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130213021302130213020330231210103212111111113021302130213021302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 180
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | + (unary  1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 0) | + (unary  1 1 0) (unary  1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302130213021302033023121010321211111111302130213020332121111111130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 181
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | + (unary  1 1 1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 0) | + (unary  1 1 1 1 0) (unary  0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130213021302130213020330231210103212111111113021302130213021302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 182
  },
  {
    "role": "file",
    "lines": [
      "== COS_Subtraction =="
    ],
    "stanza": 183
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Introduce subtraction via `= X | - Y Z` sentences.  Until syntax is fully understood,",
      "an ambiguity may remain between this and addition.",
      ""
    ],
    "section_description": "introduce subtraction",
    "section_category": "MATH",
    "section_index": 4,
    "stanza": 184
  },
  {
    "role": "code",
    "lines": [
      "intro -;"
    ],
    "preprocessed": "intro -;",
    "dt": false,
    "parse": [
      "intro",
      "-"
    ],
    "code": "1210010312101132233",
    "spider": "&#xf156;&#xf24a;&#xf14f;&#xf24b;",
    "stanza": 185
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | - (unary  1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  0) | - (unary  1 1 0) (unary  1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12113212111111113020330231210113212111111113021302130203321211111111302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14f;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 186
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | - (unary  1 1 1 1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 0) | - (unary  1 1 1 1 1 0) (unary  1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12113212111111113021302130213021302033023121011321211111111302130213021302130213020332121111111130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14f;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 187
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | - (unary  1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  1 1 0) | - (unary  1 1 0) (unary  0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "12113212111111113021302130203302312101132121111111130213021302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14f;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 188
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | - (unary  1 1 1 1 0) (unary  1 1 1 1 0);"
    ],
    "preprocessed": "= (unary  0) | - (unary  1 1 1 1 0) (unary  1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130203302312101132121111111130213021302130213020332121111111130213021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14f;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 189
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | - (unary  1 1 1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 0) | - (unary  1 1 1 1 0) (unary  1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130213021302130203302312101132121111111130213021302130213020332121111111130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14f;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 190
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 0) | - (unary  1 1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  1 0) | - (unary  1 1 1 0) (unary  1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302130203302312101132121111111130213021302130203321211111111302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14f;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 191
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | - (unary  0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | - (unary  0) (unary  0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302033023121011321211111111302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14f;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 192
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | - (unary  1 1 1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 0) | - (unary  1 1 1 1 0) (unary  0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130213021302130213020330231210113212111111113021302130213021302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14f;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 193
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | - (unary  1 1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 0) | - (unary  1 1 1 0) (unary  1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302130213020330231210113212111111113021302130213020332121111111130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14f;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 194
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | - (unary  1 1 1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 0) | - (unary  1 1 1 1 0) (unary  0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "-",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130213021302130213020330231210113212111111113021302130213021302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14f;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 195
  },
  {
    "role": "file",
    "lines": [
      "== COS_Multiplication =="
    ],
    "stanza": 196
  },
  {
    "role": "doc",
    "lines": [
      "",
      "While we're at it, let's introduce multiplication with `= X | * Y Z` sentences.",
      "As for addition and subtraction, there will be some ambiguity as to whether we are",
      "presenting multiplication or division here, until syntax is clearly understood.",
      ""
    ],
    "section_description": "introduce multiplication",
    "section_category": "MATH",
    "section_index": 5,
    "stanza": 197
  },
  {
    "role": "code",
    "lines": [
      "intro *;"
    ],
    "preprocessed": "intro *;",
    "dt": false,
    "parse": [
      "intro",
      "*"
    ],
    "code": "1210010312100132233",
    "spider": "&#xf156;&#xf24a;&#xf14d;&#xf24b;",
    "stanza": 198
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  0) (unary  0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302033023121001321211111111302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 199
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  0) (unary  1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12113212111111113020330231210013212111111113020332121111111130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 200
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  0) (unary  1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130203302312100132121111111130203321211111111302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 201
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  1 1 1 0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  0) (unary  1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302033023121001321211111111302033212111111113021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 202
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  1 0) (unary  0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "12113212111111113020330231210013212111111113021302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 203
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 0) | * (unary  1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 0) | * (unary  1 0) (unary  1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302130203302312100132121111111130213020332121111111130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 204
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | * (unary  1 0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 0) | * (unary  1 0) (unary  1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130213021302033023121001321211111111302130203321211111111302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 205
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | * (unary  1 0) (unary  1 1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 0) | * (unary  1 0) (unary  1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12113212111111113021302130213020330231210013212111111113021302033212111111113021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 206
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  1 1 0) (unary  0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130203302312100132121111111130213021302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 207
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | * (unary  1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 0) | * (unary  1 1 0) (unary  1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130213021302033023121001321211111111302130213020332121111111130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 208
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 0) | * (unary  1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 0) | * (unary  1 1 0) (unary  1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130213021302130213020330231210013212111111113021302130203321211111111302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 209
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 1 1 0) | * (unary  1 1 0) (unary  1 1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 1 1 0) | * (unary  1 1 0) (unary  1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130213021302130213021302130203302312100132121111111130213021302033212111111113021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 210
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  1 1 1 0) (unary  0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302033023121001321211111111302130213021302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 211
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | * (unary  1 1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 0) | * (unary  1 1 1 0) (unary  1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12113212111111113021302130213020330231210013212111111113021302130213020332121111111130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 212
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 1 1 0) | * (unary  1 1 1 0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 1 1 0) | * (unary  1 1 1 0) (unary  1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130213021302130213021302130203302312100132121111111130213021302130203321211111111302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 213
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 1 1 1 1 1 1 0) | * (unary  1 1 1 0) (unary  1 1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 1 1 1 1 1 1 0) | * (unary  1 1 1 0) (unary  1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302130213021302130213021302130213021302033023121001321211111111302130213021302033212111111113021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 214
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  0) (unary  1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12113212111111113020330231210013212111111113020332121111111130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 215
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | * (unary  1 1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 0) | * (unary  1 1 1 0) (unary  1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12113212111111113021302130213020330231210013212111111113021302130213020332121111111130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 216
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  1 1 0) (unary  0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130203302312100132121111111130213021302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 217
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  1 1 1 0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  0) (unary  1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302033023121001321211111111302033212111111113021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 218
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 1 0) | * (unary  1 1 1 0) (unary  1 0);"
    ],
    "preprocessed": "= (unary  1 1 1 0) | * (unary  1 1 1 0) (unary  1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12113212111111113021302130213020330231210013212111111113021302130213020332121111111130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 219
  },
  {
    "role": "code",
    "lines": [
      "= (unary  1 1 0) | * (unary  1 0) (unary  1 1 0);"
    ],
    "preprocessed": "= (unary  1 1 0) | * (unary  1 0) (unary  1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130213021302033023121001321211111111302130203321211111111302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 220
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  0) (unary  0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302033023121001321211111111302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 221
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  1 1 1 0) (unary  0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302033023121001321211111111302130213021302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 222
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  1 1 0) (unary  0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130203302312100132121111111130213021302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 223
  },
  {
    "role": "code",
    "lines": [
      "= (unary  0) | * (unary  1 1 1 0) (unary  0);"
    ],
    "preprocessed": "= (unary  0) | * (unary  1 1 1 0) (unary  0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302033023121001321211111111302130213021302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 224
  },
  {
    "role": "file",
    "lines": [
      "== COS_Binary =="
    ],
    "stanza": 225
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Switch from unary numbers to another representation.  The best representation",
      "will depend on the details of how the message is being transmitted, and the",
      "rest of the message doesn't depend on that choice for correctness (though the",
      "choice will have implications for how easy the message will be to interpret).",
      "As a base-line, imagine we use a binary representation.",
      "",
      "It isn't important for the listener to understand, but it might be worth explaining",
      "at this point how the unary representation worked.  In fact there's no special",
      "syntax used, just three objects:",
      "",
      " * The number `0`.",
      " * The number `1`.",
      " * A function (called `unary` in English) that takes a value and:",
      "   - If passed `0`, the function returns `0`",
      "   - If passed `1`, the function returns another function, just like itself,",
      "     except with any ultimate return value increased by `1`.",
      "",
      "Using syntax defined later in the message, `unary` could be defined as:",
      "",
      "```",
      "@ unary-v | ? v | ? x | if (= $x 0) $v (unary-v | + $v 1)",
      "@ unary | unary-v 0",
      "```",
      "",
      "If you know Lisp/Scheme/etc, just read `@` as `define`, `?` as",
      "`lambda`, and `|` as opening a parenthesis that gets closed at the end",
      "of the statement.",
      "",
      "Anyway, all of this is a digression, but it is worth knowing that as much as possible",
      "the message is built from itself, so that in the end everything dovetails nicely.",
      "",
      ""
    ],
    "section_description": "introduce non-unary representation of numbers",
    "section_category": "MATH",
    "section_index": 6,
    "stanza": 226
  },
  {
    "role": "code",
    "lines": [
      "= 0 (unary 0);"
    ],
    "preprocessed": "= 0 (unary 0);",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        "unary",
        "0"
      ]
    ],
    "code": "121130203212111111113020332233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 227
  },
  {
    "role": "code",
    "lines": [
      "= 1 (unary 1 0);"
    ],
    "preprocessed": "= 1 (unary 1 0);",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "code": "1211302132121111111130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 228
  },
  {
    "role": "code",
    "lines": [
      "= 2 (unary 1 1 0);"
    ],
    "preprocessed": "= 2 (unary 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121130210321211111111302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 229
  },
  {
    "role": "code",
    "lines": [
      "= 3 (unary 1 1 1 0);"
    ],
    "preprocessed": "= 3 (unary 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "3",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1211302113212111111113021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf207;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 230
  },
  {
    "role": "code",
    "lines": [
      "= 4 (unary 1 1 1 1 0);"
    ],
    "preprocessed": "= 4 (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121130210032121111111130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 231
  },
  {
    "role": "code",
    "lines": [
      "= 5 (unary 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 5 (unary 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "5",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1211302101321211111111302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf209;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 232
  },
  {
    "role": "code",
    "lines": [
      "= 6 (unary 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 6 (unary 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "6",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12113021103212111111113021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf20a;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 233
  },
  {
    "role": "code",
    "lines": [
      "= 7 (unary 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 7 (unary 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "7",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121130211132121111111130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf20b;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 234
  },
  {
    "role": "code",
    "lines": [
      "= 8 (unary 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 8 (unary 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "8",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12113021000321211111111302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf20c;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 235
  },
  {
    "role": "code",
    "lines": [
      "= 9 (unary 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 9 (unary 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "9",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121130210013212111111113021302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf20d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 236
  },
  {
    "role": "code",
    "lines": [
      "= 10 (unary 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 10 (unary 1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "10",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1211302101032121111111130213021302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf20e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 237
  },
  {
    "role": "code",
    "lines": [
      "= 11 (unary 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 11 (unary 1 1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "11",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12113021011321211111111302130213021302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf20f;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 238
  },
  {
    "role": "code",
    "lines": [
      "= 12 (unary 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 12 (unary 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "12",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121130211003212111111113021302130213021302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf210;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 239
  },
  {
    "role": "code",
    "lines": [
      "= 13 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 13 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "13",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1211302110132121111111130213021302130213021302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf211;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 240
  },
  {
    "role": "code",
    "lines": [
      "= 14 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 14 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "14",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12113021110321211111111302130213021302130213021302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf212;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 241
  },
  {
    "role": "code",
    "lines": [
      "= 15 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 15 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "15",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121130211113212111111113021302130213021302130213021302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf213;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 242
  },
  {
    "role": "code",
    "lines": [
      "= 1 (unary 1 0);"
    ],
    "preprocessed": "= 1 (unary 1 0);",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "code": "1211302132121111111130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 243
  },
  {
    "role": "code",
    "lines": [
      "= 2 (unary 1 1 0);"
    ],
    "preprocessed": "= 2 (unary 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121130210321211111111302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 244
  },
  {
    "role": "code",
    "lines": [
      "= 4 (unary 1 1 1 1 0);"
    ],
    "preprocessed": "= 4 (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121130210032121111111130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 245
  },
  {
    "role": "code",
    "lines": [
      "= 8 (unary 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 8 (unary 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "8",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12113021000321211111111302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf20c;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 246
  },
  {
    "role": "code",
    "lines": [
      "= 16 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 16 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "16",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12113021000032121111111130213021302130213021302130213021302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf214;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 247
  },
  {
    "role": "code",
    "lines": [
      "= 5 (unary 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 5 (unary 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "5",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1211302101321211111111302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf209;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 248
  },
  {
    "role": "code",
    "lines": [
      "= 14 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 14 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "14",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12113021110321211111111302130213021302130213021302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf212;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 249
  },
  {
    "role": "code",
    "lines": [
      "= 2 (unary 1 1 0);"
    ],
    "preprocessed": "= 2 (unary 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        "unary",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121130210321211111111302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 250
  },
  {
    "role": "code",
    "lines": [
      "= 3 (unary 1 1 1 0);"
    ],
    "preprocessed": "= 3 (unary 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "3",
      [
        "unary",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1211302113212111111113021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf207;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 251
  },
  {
    "role": "code",
    "lines": [
      "= 0 (unary 0);"
    ],
    "preprocessed": "= 0 (unary 0);",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        "unary",
        "0"
      ]
    ],
    "code": "121130203212111111113020332233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 252
  },
  {
    "role": "code",
    "lines": [
      "= 13 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 13 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "13",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1211302110132121111111130213021302130213021302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf211;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 253
  },
  {
    "role": "code",
    "lines": [
      "= 11 (unary 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 11 (unary 1 1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "11",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12113021011321211111111302130213021302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf20f;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 254
  },
  {
    "role": "code",
    "lines": [
      "= 1 (unary 1 0);"
    ],
    "preprocessed": "= 1 (unary 1 0);",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        "unary",
        "1",
        "0"
      ]
    ],
    "code": "1211302132121111111130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 255
  },
  {
    "role": "code",
    "lines": [
      "= 9 (unary 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 9 (unary 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "9",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121130210013212111111113021302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf20d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 256
  },
  {
    "role": "code",
    "lines": [
      "= 15 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 15 (unary 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "15",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121130211113212111111113021302130213021302130213021302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf213;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 257
  },
  {
    "role": "code",
    "lines": [
      "= 8 (unary 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 8 (unary 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "8",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12113021000321211111111302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf20c;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 258
  },
  {
    "role": "code",
    "lines": [
      "= 7 (unary 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 7 (unary 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "7",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121130211132121111111130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf20b;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 259
  },
  {
    "role": "code",
    "lines": [
      "= 6 (unary 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 6 (unary 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "6",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "12113021103212111111113021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf20a;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 260
  },
  {
    "role": "code",
    "lines": [
      "= 4 (unary 1 1 1 1 0);"
    ],
    "preprocessed": "= 4 (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121130210032121111111130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 261
  },
  {
    "role": "code",
    "lines": [
      "= 12 (unary 1 1 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 12 (unary 1 1 1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "12",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "121130211003212111111113021302130213021302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf210;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 262
  },
  {
    "role": "code",
    "lines": [
      "= 10 (unary 1 1 1 1 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= 10 (unary 1 1 1 1 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      "10",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ]
    ],
    "code": "1211302101032121111111130213021302130213021302130213021302130213020332233",
    "spider": "&#xf147;&#xf24a;&#xf20e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 263
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 1 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 1 1 0) (unary 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302130213021302130213021302130213021302033023121010321211111111302130213021302130213021302033212111111113021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 264
  },
  {
    "role": "code",
    "lines": [
      "= 9 | + 6 3;"
    ],
    "preprocessed": "= 9 | + 6 3;",
    "dt": false,
    "parse": [
      "=",
      "9",
      [
        -1,
        "+",
        "6",
        "3"
      ]
    ],
    "code": "1211302100130231210103021103021132233",
    "spider": "&#xf147;&#xf24a;&#xf20d;&#xf248;&#xf14e;&#xf24a;&#xf20a;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 265
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 0) | + (unary 0) (unary 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 0) | + (unary 0) (unary 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302130213021302130213021302033023121010321211111111302033212111111113021302130213021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 266
  },
  {
    "role": "code",
    "lines": [
      "= 6 | + 0 6;"
    ],
    "preprocessed": "= 6 | + 0 6;",
    "dt": false,
    "parse": [
      "=",
      "6",
      [
        -1,
        "+",
        "0",
        "6"
      ]
    ],
    "code": "12113021103023121010302030211032233",
    "spider": "&#xf147;&#xf24a;&#xf20a;&#xf248;&#xf14e;&#xf24a;&#xf204;&#xf24a;&#xf20a;&#xf24b;",
    "stanza": 267
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130213021302130213021302130213021302130213020330231210103212111111113021302130213021302130213020332121111111130213021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 268
  },
  {
    "role": "code",
    "lines": [
      "= 10 | + 6 4;"
    ],
    "preprocessed": "= 10 | + 6 4;",
    "dt": false,
    "parse": [
      "=",
      "10",
      [
        -1,
        "+",
        "6",
        "4"
      ]
    ],
    "code": "12113021010302312101030211030210032233",
    "spider": "&#xf147;&#xf24a;&#xf20e;&#xf248;&#xf14e;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 269
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 0) | + (unary 1 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 0) | + (unary 1 1 1 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12113212111111113021302130213021302130203302312101032121111111130213021302130203321211111111302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 270
  },
  {
    "role": "code",
    "lines": [
      "= 5 | + 3 2;"
    ],
    "preprocessed": "= 5 | + 3 2;",
    "dt": false,
    "parse": [
      "=",
      "5",
      [
        -1,
        "+",
        "3",
        "2"
      ]
    ],
    "code": "12113021013023121010302113021032233",
    "spider": "&#xf147;&#xf24a;&#xf209;&#xf248;&#xf14e;&#xf24a;&#xf207;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 271
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 0) | + (unary 1 0) (unary 0);"
    ],
    "preprocessed": "= (unary 1 0) | + (unary 1 0) (unary 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130213020330231210103212111111113021302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 272
  },
  {
    "role": "code",
    "lines": [
      "= 1 | + 1 0;"
    ],
    "preprocessed": "= 1 | + 1 0;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "+",
        "1",
        "0"
      ]
    ],
    "code": "1211302130231210103021302032233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 273
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 0) | + (unary 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 0) | + (unary 1 1 0) (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302130213021302130213021302033023121010321211111111302130213020332121111111130213021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 274
  },
  {
    "role": "code",
    "lines": [
      "= 6 | + 2 4;"
    ],
    "preprocessed": "= 6 | + 2 4;",
    "dt": false,
    "parse": [
      "=",
      "6",
      [
        -1,
        "+",
        "2",
        "4"
      ]
    ],
    "code": "121130211030231210103021030210032233",
    "spider": "&#xf147;&#xf24a;&#xf20a;&#xf248;&#xf14e;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 275
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 1 1 0) (unary 1 1 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302130213021302130213021302130213021302130213021302033023121010321211111111302130213021302130213021302033212111111113021302130213021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 276
  },
  {
    "role": "code",
    "lines": [
      "= 12 | + 6 6;"
    ],
    "preprocessed": "= 12 | + 6 6;",
    "dt": false,
    "parse": [
      "=",
      "12",
      [
        -1,
        "+",
        "6",
        "6"
      ]
    ],
    "code": "12113021100302312101030211030211032233",
    "spider": "&#xf147;&#xf24a;&#xf210;&#xf248;&#xf14e;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf24b;",
    "stanza": 277
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 0) (unary 1 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 1 1 0) | + (unary 1 1 1 1 0) (unary 1 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "+",
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12113212111111113021302130213021302130213021302130203302312101032121111111130213021302130213020332121111111130213021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 278
  },
  {
    "role": "code",
    "lines": [
      "= 8 | + 4 4;"
    ],
    "preprocessed": "= 8 | + 4 4;",
    "dt": false,
    "parse": [
      "=",
      "8",
      [
        -1,
        "+",
        "4",
        "4"
      ]
    ],
    "code": "12113021000302312101030210030210032233",
    "spider": "&#xf147;&#xf24a;&#xf20c;&#xf248;&#xf14e;&#xf24a;&#xf208;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 279
  },
  {
    "role": "code",
    "lines": [
      "= (unary 0) | * (unary 0) (unary 1 1 0);"
    ],
    "preprocessed": "= (unary 0) | * (unary 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130203302312100132121111111130203321211111111302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 280
  },
  {
    "role": "code",
    "lines": [
      "= 0 | * 0 2;"
    ],
    "preprocessed": "= 0 | * 0 2;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "*",
        "0",
        "2"
      ]
    ],
    "code": "12113020302312100130203021032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf14d;&#xf24a;&#xf204;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 281
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 0) | * (unary 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 0) | * (unary 1 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130213021302033023121001321211111111302130203321211111111302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 282
  },
  {
    "role": "code",
    "lines": [
      "= 2 | * 1 2;"
    ],
    "preprocessed": "= 2 | * 1 2;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "*",
        "1",
        "2"
      ]
    ],
    "code": "121130210302312100130213021032233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf14d;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 283
  },
  {
    "role": "code",
    "lines": [
      "= (unary 0) | * (unary 0) (unary 1 0);"
    ],
    "preprocessed": "= (unary 0) | * (unary 0) (unary 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "code": "12113212111111113020330231210013212111111113020332121111111130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 284
  },
  {
    "role": "code",
    "lines": [
      "= 0 | * 0 1;"
    ],
    "preprocessed": "= 0 | * 0 1;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "*",
        "0",
        "1"
      ]
    ],
    "code": "1211302030231210013020302132233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf14d;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 285
  },
  {
    "role": "code",
    "lines": [
      "= (unary 0) | * (unary 1 1 1 0) (unary 0);"
    ],
    "preprocessed": "= (unary 0) | * (unary 1 1 1 0) (unary 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302033023121001321211111111302130213021302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 286
  },
  {
    "role": "code",
    "lines": [
      "= 0 | * 3 0;"
    ],
    "preprocessed": "= 0 | * 3 0;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "*",
        "3",
        "0"
      ]
    ],
    "code": "12113020302312100130211302032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf14d;&#xf24a;&#xf207;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 287
  },
  {
    "role": "code",
    "lines": [
      "= (unary 0) | * (unary 0) (unary 0);"
    ],
    "preprocessed": "= (unary 0) | * (unary 0) (unary 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302033023121001321211111111302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 288
  },
  {
    "role": "code",
    "lines": [
      "= 0 | * 0 0;"
    ],
    "preprocessed": "= 0 | * 0 0;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "*",
        "0",
        "0"
      ]
    ],
    "code": "1211302030231210013020302032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf14d;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 289
  },
  {
    "role": "code",
    "lines": [
      "= (unary 0) | * (unary 1 0) (unary 0);"
    ],
    "preprocessed": "= (unary 0) | * (unary 1 0) (unary 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "0"
        ],
        [
          "unary",
          "0"
        ]
      ]
    ],
    "code": "12113212111111113020330231210013212111111113021302033212111111113020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 290
  },
  {
    "role": "code",
    "lines": [
      "= 0 | * 1 0;"
    ],
    "preprocessed": "= 0 | * 1 0;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "*",
        "1",
        "0"
      ]
    ],
    "code": "1211302030231210013021302032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf14d;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 291
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 0) | * (unary 1 1 0) (unary 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 0) | * (unary 1 1 0) (unary 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121132121111111130213021302130213020330231210013212111111113021302130203321211111111302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 292
  },
  {
    "role": "code",
    "lines": [
      "= 4 | * 2 2;"
    ],
    "preprocessed": "= 4 | * 2 2;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        "*",
        "2",
        "2"
      ]
    ],
    "code": "12113021003023121001302103021032233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf14d;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 293
  },
  {
    "role": "code",
    "lines": [
      "= (unary 1 1 1 1 1 1 1 1 1 0) | * (unary 1 1 1 0) (unary 1 1 1 0);"
    ],
    "preprocessed": "= (unary 1 1 1 1 1 1 1 1 1 0) | * (unary 1 1 1 0) (unary 1 1 1 0);",
    "dt": false,
    "parse": [
      "=",
      [
        "unary",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "0"
      ],
      [
        -1,
        "*",
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ],
        [
          "unary",
          "1",
          "1",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1211321211111111302130213021302130213021302130213021302033023121001321211111111302130213021302033212111111113021302130213020332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 294
  },
  {
    "role": "code",
    "lines": [
      "= 9 | * 3 3;"
    ],
    "preprocessed": "= 9 | * 3 3;",
    "dt": false,
    "parse": [
      "=",
      "9",
      [
        -1,
        "*",
        "3",
        "3"
      ]
    ],
    "code": "121130210013023121001302113021132233",
    "spider": "&#xf147;&#xf24a;&#xf20d;&#xf248;&#xf14d;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 295
  },
  {
    "role": "file",
    "lines": [
      "== COS_Evaluation =="
    ],
    "stanza": 296
  },
  {
    "role": "doc",
    "lines": [
      "",
      "We've advanced enough that we're starting to have choices about how",
      "something is expressed.  Let's pause to acknowledge that, and",
      "reinforce some syntactic equivalences so the listener can be confident",
      "of them.",
      "",
      "Parentheses play a role in grouping expressions, just like in regular",
      "math.  To reduce the mental burden of tracking nesting, we use a `|` shortcut",
      "that means \"add parentheses between this point and as far as you can go.\"  So for",
      "example `(= 7 | + 3 4)` is equivalent to `(= 7 (+ 3 4))`.",
      ""
    ],
    "section_description": "show alternative groupings",
    "section_category": "MATH",
    "section_index": 7,
    "stanza": 297
  },
  {
    "role": "code",
    "lines": [
      "= 6 6;"
    ],
    "preprocessed": "= 6 6;",
    "dt": false,
    "parse": [
      "=",
      "6",
      "6"
    ],
    "code": "121130211030211032233",
    "spider": "&#xf147;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf24b;",
    "stanza": 298
  },
  {
    "role": "code",
    "lines": [
      "= 6 (+ 1 5);"
    ],
    "preprocessed": "= 6 (+ 1 5);",
    "dt": false,
    "parse": [
      "=",
      "6",
      [
        "+",
        "1",
        "5"
      ]
    ],
    "code": "1211302110321210103021302101332233",
    "spider": "&#xf147;&#xf24a;&#xf20a;&#xf246;&#xf14e;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 299
  },
  {
    "role": "code",
    "lines": [
      "= 6 | + 1 5;"
    ],
    "preprocessed": "= 6 | + 1 5;",
    "dt": false,
    "parse": [
      "=",
      "6",
      [
        -1,
        "+",
        "1",
        "5"
      ]
    ],
    "code": "12113021103023121010302130210132233",
    "spider": "&#xf147;&#xf24a;&#xf20a;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 300
  },
  {
    "role": "code",
    "lines": [
      "= 6 | + 1 (+ 4 1);"
    ],
    "preprocessed": "= 6 | + 1 (+ 4 1);",
    "dt": false,
    "parse": [
      "=",
      "6",
      [
        -1,
        "+",
        "1",
        [
          "+",
          "4",
          "1"
        ]
      ]
    ],
    "code": "121130211030231210103021321210103021003021332233",
    "spider": "&#xf147;&#xf24a;&#xf20a;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf246;&#xf14e;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 301
  },
  {
    "role": "code",
    "lines": [
      "= 6 | + 1 | + 4 1;"
    ],
    "preprocessed": "= 6 | + 1 | + 4 1;",
    "dt": false,
    "parse": [
      "=",
      "6",
      [
        -1,
        "+",
        "1",
        [
          -1,
          "+",
          "4",
          "1"
        ]
      ]
    ],
    "code": "1211302110302312101030213023121010302100302132233",
    "spider": "&#xf147;&#xf24a;&#xf20a;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf248;&#xf14e;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 302
  },
  {
    "role": "code",
    "lines": [
      "= 6 (+ 1 5);"
    ],
    "preprocessed": "= 6 (+ 1 5);",
    "dt": false,
    "parse": [
      "=",
      "6",
      [
        "+",
        "1",
        "5"
      ]
    ],
    "code": "1211302110321210103021302101332233",
    "spider": "&#xf147;&#xf24a;&#xf20a;&#xf246;&#xf14e;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 303
  },
  {
    "role": "code",
    "lines": [
      "= (+ 3 3) (+ 1 5);"
    ],
    "preprocessed": "= (+ 3 3) (+ 1 5);",
    "dt": false,
    "parse": [
      "=",
      [
        "+",
        "3",
        "3"
      ],
      [
        "+",
        "1",
        "5"
      ]
    ],
    "code": "12113212101030211302113321210103021302101332233",
    "spider": "&#xf147;&#xf246;&#xf14e;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf14e;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 304
  },
  {
    "role": "code",
    "lines": [
      "= (+ 3 (- 5 2)) (+ 1 5);"
    ],
    "preprocessed": "= (+ 3 (- 5 2)) (+ 1 5);",
    "dt": false,
    "parse": [
      "=",
      [
        "+",
        "3",
        [
          "-",
          "5",
          "2"
        ]
      ],
      [
        "+",
        "1",
        "5"
      ]
    ],
    "code": "12113212101030211321210113021013021033321210103021302101332233",
    "spider": "&#xf147;&#xf246;&#xf14e;&#xf24a;&#xf207;&#xf246;&#xf14f;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf245;&#xf246;&#xf14e;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 305
  },
  {
    "role": "code",
    "lines": [
      "= (+ 3 | - 5 2) (+ 1 5);"
    ],
    "preprocessed": "= (+ 3 | - 5 2) (+ 1 5);",
    "dt": false,
    "parse": [
      "=",
      [
        "+",
        "3",
        [
          -1,
          "-",
          "5",
          "2"
        ]
      ],
      [
        "+",
        "1",
        "5"
      ]
    ],
    "code": "121132121010302113023121011302101302103321210103021302101332233",
    "spider": "&#xf147;&#xf246;&#xf14e;&#xf24a;&#xf207;&#xf248;&#xf14f;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf14e;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 306
  },
  {
    "role": "code",
    "lines": [
      "= (+ 3 | - 5 2) | + 1 5;"
    ],
    "preprocessed": "= (+ 3 | - 5 2) | + 1 5;",
    "dt": false,
    "parse": [
      "=",
      [
        "+",
        "3",
        [
          -1,
          "-",
          "5",
          "2"
        ]
      ],
      [
        -1,
        "+",
        "1",
        "5"
      ]
    ],
    "code": "1211321210103021130231210113021013021033023121010302130210132233",
    "spider": "&#xf147;&#xf246;&#xf14e;&#xf24a;&#xf207;&#xf248;&#xf14f;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 307
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "show local assignment",
    "section_category": "MATH",
    "section_index": 8,
    "stanza": 308
  },
  {
    "role": "doc",
    "lines": [
      "An expression starting with `assign` is a way to name values for use within that expression. To use the assigned value, simply place its name at the beginning of an expression.  For example, a value assigned to `x` can be used by writing `(x)`. The name is entirely arbitrary, and can be just an integer."
    ],
    "stanza": 309
  },
  {
    "role": "code",
    "lines": [
      "intro assign;"
    ],
    "preprocessed": "intro assign;",
    "dt": false,
    "parse": [
      "intro",
      "assign"
    ],
    "code": "1210010312111032233",
    "spider": "&#xf156;&#xf24a;&#xf152;&#xf24b;",
    "stanza": 310
  },
  {
    "role": "code",
    "lines": [
      "assign x 1 | = (x) 1;"
    ],
    "preprocessed": "assign x 1 | = (x) 1;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      "1",
      [
        -1,
        "=",
        [
          "x"
        ],
        "1"
      ]
    ],
    "code": "12111031210100130213023121132121010013302132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf205;&#xf248;&#xf147;&#xf246;&#xf16d;&#xf245;&#xf205;&#xf24b;",
    "stanza": 311
  },
  {
    "role": "code",
    "lines": [
      "assign x 2 | = (x) 2;"
    ],
    "preprocessed": "assign x 2 | = (x) 2;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      "2",
      [
        -1,
        "=",
        [
          "x"
        ],
        "2"
      ]
    ],
    "code": "1211103121010013021030231211321210100133021032233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf206;&#xf248;&#xf147;&#xf246;&#xf16d;&#xf245;&#xf206;&#xf24b;",
    "stanza": 312
  },
  {
    "role": "code",
    "lines": [
      "assign x 3 | = (x) 3;"
    ],
    "preprocessed": "assign x 3 | = (x) 3;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      "3",
      [
        -1,
        "=",
        [
          "x"
        ],
        "3"
      ]
    ],
    "code": "1211103121010013021130231211321210100133021132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf207;&#xf248;&#xf147;&#xf246;&#xf16d;&#xf245;&#xf207;&#xf24b;",
    "stanza": 313
  },
  {
    "role": "code",
    "lines": [
      "assign y 1 | = (y) 1;"
    ],
    "preprocessed": "assign y 1 | = (y) 1;",
    "dt": false,
    "parse": [
      "assign",
      "y",
      "1",
      [
        -1,
        "=",
        [
          "y"
        ],
        "1"
      ]
    ],
    "code": "1211103121000001302130231211321210000013302132233",
    "spider": "&#xf152;&#xf24a;&#xf145;&#xf145;&#xf24a;&#xf205;&#xf248;&#xf147;&#xf246;&#xf145;&#xf145;&#xf245;&#xf205;&#xf24b;",
    "stanza": 314
  },
  {
    "role": "code",
    "lines": [
      "assign y 2 | = (y) 2;"
    ],
    "preprocessed": "assign y 2 | = (y) 2;",
    "dt": false,
    "parse": [
      "assign",
      "y",
      "2",
      [
        -1,
        "=",
        [
          "y"
        ],
        "2"
      ]
    ],
    "code": "121110312100000130210302312113212100000133021032233",
    "spider": "&#xf152;&#xf24a;&#xf145;&#xf145;&#xf24a;&#xf206;&#xf248;&#xf147;&#xf246;&#xf145;&#xf145;&#xf245;&#xf206;&#xf24b;",
    "stanza": 315
  },
  {
    "role": "code",
    "lines": [
      "assign y 3 | = (y) 3;"
    ],
    "preprocessed": "assign y 3 | = (y) 3;",
    "dt": false,
    "parse": [
      "assign",
      "y",
      "3",
      [
        -1,
        "=",
        [
          "y"
        ],
        "3"
      ]
    ],
    "code": "121110312100000130211302312113212100000133021132233",
    "spider": "&#xf152;&#xf24a;&#xf145;&#xf145;&#xf24a;&#xf207;&#xf248;&#xf147;&#xf246;&#xf145;&#xf145;&#xf245;&#xf207;&#xf24b;",
    "stanza": 316
  },
  {
    "role": "code",
    "lines": [
      "assign x 3 | = 9 (* (x) (x));"
    ],
    "preprocessed": "assign x 3 | = 9 (* (x) (x));",
    "dt": false,
    "parse": [
      "assign",
      "x",
      "3",
      [
        -1,
        "=",
        "9",
        [
          "*",
          [
            "x"
          ],
          [
            "x"
          ]
        ]
      ]
    ],
    "code": "12111031210100130211302312113021001321210013212101001332121010013332233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf207;&#xf248;&#xf147;&#xf24a;&#xf20d;&#xf246;&#xf14d;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf16d;&#xf245;&#xf245;&#xf24b;",
    "stanza": 317
  },
  {
    "role": "code",
    "lines": [
      "assign x 4 | = 16 (* (x) (x));"
    ],
    "preprocessed": "assign x 4 | = 16 (* (x) (x));",
    "dt": false,
    "parse": [
      "assign",
      "x",
      "4",
      [
        -1,
        "=",
        "16",
        [
          "*",
          [
            "x"
          ],
          [
            "x"
          ]
        ]
      ]
    ],
    "code": "1211103121010013021003023121130210000321210013212101001332121010013332233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf208;&#xf248;&#xf147;&#xf24a;&#xf214;&#xf246;&#xf14d;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf16d;&#xf245;&#xf245;&#xf24b;",
    "stanza": 318
  },
  {
    "role": "code",
    "lines": [
      "assign z 3 | = 9 (* (z) (z));"
    ],
    "preprocessed": "assign z 3 | = 9 (* (z) (z));",
    "dt": false,
    "parse": [
      "assign",
      "z",
      "3",
      [
        -1,
        "=",
        "9",
        [
          "*",
          [
            "z"
          ],
          [
            "z"
          ]
        ]
      ]
    ],
    "code": "12111031210000103021130231211302100132121001321210000103321210000103332233",
    "spider": "&#xf152;&#xf24a;&#xf145;&#xf146;&#xf24a;&#xf207;&#xf248;&#xf147;&#xf24a;&#xf20d;&#xf246;&#xf14d;&#xf246;&#xf145;&#xf146;&#xf245;&#xf246;&#xf145;&#xf146;&#xf245;&#xf245;&#xf24b;",
    "stanza": 319
  },
  {
    "role": "code",
    "lines": [
      "assign z 4 | = 16 (* (z) (z));"
    ],
    "preprocessed": "assign z 4 | = 16 (* (z) (z));",
    "dt": false,
    "parse": [
      "assign",
      "z",
      "4",
      [
        -1,
        "=",
        "16",
        [
          "*",
          [
            "z"
          ],
          [
            "z"
          ]
        ]
      ]
    ],
    "code": "1211103121000010302100302312113021000032121001321210000103321210000103332233",
    "spider": "&#xf152;&#xf24a;&#xf145;&#xf146;&#xf24a;&#xf208;&#xf248;&#xf147;&#xf24a;&#xf214;&#xf246;&#xf14d;&#xf246;&#xf145;&#xf146;&#xf245;&#xf246;&#xf145;&#xf146;&#xf245;&#xf245;&#xf24b;",
    "stanza": 320
  },
  {
    "role": "code",
    "lines": [
      "assign x (+) | = 7 (x 4 3);"
    ],
    "preprocessed": "assign x (+) | = 7 (x 4 3);",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "+"
      ],
      [
        -1,
        "=",
        "7",
        [
          "x",
          "4",
          "3"
        ]
      ]
    ],
    "code": "12111031210100132121010330231211302111321210100130210030211332233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf14e;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf20b;&#xf246;&#xf16d;&#xf24a;&#xf208;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 321
  },
  {
    "role": "code",
    "lines": [
      "assign y (+) | = 12 (y 6 6);"
    ],
    "preprocessed": "assign y (+) | = 12 (y 6 6);",
    "dt": false,
    "parse": [
      "assign",
      "y",
      [
        "+"
      ],
      [
        -1,
        "=",
        "12",
        [
          "y",
          "6",
          "6"
        ]
      ]
    ],
    "code": "121110312100000132121010330231211302110032121000001302110302110332233",
    "spider": "&#xf152;&#xf24a;&#xf145;&#xf145;&#xf246;&#xf14e;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf210;&#xf246;&#xf145;&#xf145;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf245;&#xf24b;",
    "stanza": 322
  },
  {
    "role": "code",
    "lines": [
      "assign z (+) | = 9 (z 7 2);"
    ],
    "preprocessed": "assign z (+) | = 9 (z 7 2);",
    "dt": false,
    "parse": [
      "assign",
      "z",
      [
        "+"
      ],
      [
        -1,
        "=",
        "9",
        [
          "z",
          "7",
          "2"
        ]
      ]
    ],
    "code": "12111031210000103212101033023121130210013212100001030211130210332233",
    "spider": "&#xf152;&#xf24a;&#xf145;&#xf146;&#xf246;&#xf14e;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf20d;&#xf246;&#xf145;&#xf146;&#xf24a;&#xf20b;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 323
  },
  {
    "role": "code",
    "lines": [
      "assign a (-) | = 1 (a 4 3);"
    ],
    "preprocessed": "assign a (-) | = 1 (a 4 3);",
    "dt": false,
    "parse": [
      "assign",
      "a",
      [
        "-"
      ],
      [
        -1,
        "=",
        "1",
        [
          "a",
          "4",
          "3"
        ]
      ]
    ],
    "code": "12111031210000113212101133023121130213212100001130210030211332233",
    "spider": "&#xf152;&#xf24a;&#xf145;&#xf147;&#xf246;&#xf14f;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf205;&#xf246;&#xf145;&#xf147;&#xf24a;&#xf208;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 324
  },
  {
    "role": "code",
    "lines": [
      "assign b (-) | = 0 (b 6 6);"
    ],
    "preprocessed": "assign b (-) | = 0 (b 6 6);",
    "dt": false,
    "parse": [
      "assign",
      "b",
      [
        "-"
      ],
      [
        -1,
        "=",
        "0",
        [
          "b",
          "6",
          "6"
        ]
      ]
    ],
    "code": "121110312100010032121011330231211302032121000100302110302110332233",
    "spider": "&#xf152;&#xf24a;&#xf145;&#xf148;&#xf246;&#xf14f;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf204;&#xf246;&#xf145;&#xf148;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf245;&#xf24b;",
    "stanza": 325
  },
  {
    "role": "code",
    "lines": [
      "assign c (-) | = 5 (c 7 2);"
    ],
    "preprocessed": "assign c (-) | = 5 (c 7 2);",
    "dt": false,
    "parse": [
      "assign",
      "c",
      [
        "-"
      ],
      [
        -1,
        "=",
        "5",
        [
          "c",
          "7",
          "2"
        ]
      ]
    ],
    "code": "1211103121000101321210113302312113021013212100010130211130210332233",
    "spider": "&#xf152;&#xf24a;&#xf145;&#xf149;&#xf246;&#xf14f;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf209;&#xf246;&#xf145;&#xf149;&#xf24a;&#xf20b;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 326
  },
  {
    "role": "code",
    "lines": [
      "assign z (*) | = 12 (z 4 3);"
    ],
    "preprocessed": "assign z (*) | = 12 (z 4 3);",
    "dt": false,
    "parse": [
      "assign",
      "z",
      [
        "*"
      ],
      [
        -1,
        "=",
        "12",
        [
          "z",
          "4",
          "3"
        ]
      ]
    ],
    "code": "12111031210000103212100133023121130211003212100001030210030211332233",
    "spider": "&#xf152;&#xf24a;&#xf145;&#xf146;&#xf246;&#xf14d;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf210;&#xf246;&#xf145;&#xf146;&#xf24a;&#xf208;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 327
  },
  {
    "role": "code",
    "lines": [
      "assign y (*) | = 36 (y 6 6);"
    ],
    "preprocessed": "assign y (*) | = 36 (y 6 6);",
    "dt": false,
    "parse": [
      "assign",
      "y",
      [
        "*"
      ],
      [
        -1,
        "=",
        "36",
        [
          "y",
          "6",
          "6"
        ]
      ]
    ],
    "code": "12111031210000013212100133023121130210010032121000001302110302110332233",
    "spider": "&#xf152;&#xf24a;&#xf145;&#xf145;&#xf246;&#xf14d;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf228;&#xf246;&#xf145;&#xf145;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf245;&#xf24b;",
    "stanza": 328
  },
  {
    "role": "code",
    "lines": [
      "assign x (*) | = 14 (x 7 2);"
    ],
    "preprocessed": "assign x (*) | = 14 (x 7 2);",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "*"
      ],
      [
        -1,
        "=",
        "14",
        [
          "x",
          "7",
          "2"
        ]
      ]
    ],
    "code": "121110312101001321210013302312113021110321210100130211130210332233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf14d;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf212;&#xf246;&#xf16d;&#xf24a;&#xf20b;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 329
  },
  {
    "role": "code",
    "lines": [
      "assign x (=) | x 4 4;"
    ],
    "preprocessed": "assign x (=) | x 4 4;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "="
      ],
      [
        -1,
        "x",
        "4",
        "4"
      ]
    ],
    "code": "121110312101001321211330231210100130210030210032233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf147;&#xf245;&#xf248;&#xf16d;&#xf24a;&#xf208;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 330
  },
  {
    "role": "code",
    "lines": [
      "assign x (=) | x 4 (+ 2 2);"
    ],
    "preprocessed": "assign x (=) | x 4 (+ 2 2);",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "="
      ],
      [
        -1,
        "x",
        "4",
        [
          "+",
          "2",
          "2"
        ]
      ]
    ],
    "code": "1211103121010013212113302312101001302100321210103021030210332233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf147;&#xf245;&#xf248;&#xf16d;&#xf24a;&#xf208;&#xf246;&#xf14e;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 331
  },
  {
    "role": "code",
    "lines": [
      "assign x 1 | assign y 2 | = 3 (+ (x) (y));"
    ],
    "preprocessed": "assign x 1 | assign y 2 | = 3 (+ (x) (y));",
    "dt": false,
    "parse": [
      "assign",
      "x",
      "1",
      [
        -1,
        "assign",
        "y",
        "2",
        [
          -1,
          "=",
          "3",
          [
            "+",
            [
              "x"
            ],
            [
              "y"
            ]
          ]
        ]
      ]
    ],
    "code": "1211103121010013021302312111031210000013021030231211302113212101032121010013321210000013332233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf205;&#xf248;&#xf152;&#xf24a;&#xf145;&#xf145;&#xf24a;&#xf206;&#xf248;&#xf147;&#xf24a;&#xf207;&#xf246;&#xf14e;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf145;&#xf245;&#xf245;&#xf24b;",
    "stanza": 332
  },
  {
    "role": "code",
    "lines": [
      "assign x 2 | assign y 7 | = 5 (- (y) (x));"
    ],
    "preprocessed": "assign x 2 | assign y 7 | = 5 (- (y) (x));",
    "dt": false,
    "parse": [
      "assign",
      "x",
      "2",
      [
        -1,
        "assign",
        "y",
        "7",
        [
          -1,
          "=",
          "5",
          [
            "-",
            [
              "y"
            ],
            [
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "1211103121010013021030231211103121000001302111302312113021013212101132121000001332121010013332233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf206;&#xf248;&#xf152;&#xf24a;&#xf145;&#xf145;&#xf24a;&#xf20b;&#xf248;&#xf147;&#xf24a;&#xf209;&#xf246;&#xf14f;&#xf246;&#xf145;&#xf145;&#xf245;&#xf246;&#xf16d;&#xf245;&#xf245;&#xf24b;",
    "stanza": 333
  },
  {
    "role": "code",
    "lines": [
      "assign x (+) | assign y 3 | = 4 (x 1 (y));"
    ],
    "preprocessed": "assign x (+) | assign y 3 | = 4 (x 1 (y));",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "+"
      ],
      [
        -1,
        "assign",
        "y",
        "3",
        [
          -1,
          "=",
          "4",
          [
            "x",
            "1",
            [
              "y"
            ]
          ]
        ]
      ]
    ],
    "code": "12111031210100132121010330231211103121000001302113023121130210032121010013021321210000013332233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf14e;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf145;&#xf145;&#xf24a;&#xf207;&#xf248;&#xf147;&#xf24a;&#xf208;&#xf246;&#xf16d;&#xf24a;&#xf205;&#xf246;&#xf145;&#xf145;&#xf245;&#xf245;&#xf24b;",
    "stanza": 334
  },
  {
    "role": "doc",
    "lines": [
      "We are pretty ruthless about adding syntax to reduce parentheses.  So let's allow writing `(x)` as `$x` (or equivalent in other renderings).  This and `|` are in fact global options for the message that you can turn off if they are not to your taste."
    ],
    "stanza": 335
  },
  {
    "role": "code",
    "lines": [
      "assign x 1 | = (x) 1;"
    ],
    "preprocessed": "assign x 1 | = (x) 1;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      "1",
      [
        -1,
        "=",
        [
          "x"
        ],
        "1"
      ]
    ],
    "code": "12111031210100130213023121132121010013302132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf205;&#xf248;&#xf147;&#xf246;&#xf16d;&#xf245;&#xf205;&#xf24b;",
    "stanza": 336
  },
  {
    "role": "code",
    "lines": [
      "assign x 1 | = $x 1;"
    ],
    "preprocessed": "assign x 1 | = $x 1;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      "1",
      [
        -1,
        "=",
        [
          -2,
          "x"
        ],
        "1"
      ]
    ],
    "code": "121110312101001302130231211312312101001302132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf205;&#xf248;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 337
  },
  {
    "role": "code",
    "lines": [
      "assign x 4 | = 16 (* (x) (x));"
    ],
    "preprocessed": "assign x 4 | = 16 (* (x) (x));",
    "dt": false,
    "parse": [
      "assign",
      "x",
      "4",
      [
        -1,
        "=",
        "16",
        [
          "*",
          [
            "x"
          ],
          [
            "x"
          ]
        ]
      ]
    ],
    "code": "1211103121010013021003023121130210000321210013212101001332121010013332233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf208;&#xf248;&#xf147;&#xf24a;&#xf214;&#xf246;&#xf14d;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf16d;&#xf245;&#xf245;&#xf24b;",
    "stanza": 338
  },
  {
    "role": "code",
    "lines": [
      "assign x 4 | = 16 (* $x $x);"
    ],
    "preprocessed": "assign x 4 | = 16 (* $x $x);",
    "dt": false,
    "parse": [
      "assign",
      "x",
      "4",
      [
        -1,
        "=",
        "16",
        [
          "*",
          [
            -2,
            "x"
          ],
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "code": "121110312101001302100302312113021000032121001312312101001312312101001332233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf208;&#xf248;&#xf147;&#xf24a;&#xf214;&#xf246;&#xf14d;&#xf249;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf24b;",
    "stanza": 339
  },
  {
    "role": "code",
    "lines": [
      "assign x 4 | = 16 | * $x $x;"
    ],
    "preprocessed": "assign x 4 | = 16 | * $x $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      "4",
      [
        -1,
        "=",
        "16",
        [
          -1,
          "*",
          [
            -2,
            "x"
          ],
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "code": "1211103121010013021003023121130210000302312100131231210100131231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf208;&#xf248;&#xf147;&#xf24a;&#xf214;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 340
  },
  {
    "role": "doc",
    "lines": [
      "Add more examples to give hints about scoping and other odd corners."
    ],
    "stanza": 341
  },
  {
    "role": "code",
    "lines": [
      "= 2 | assign x 1 | + $x 1;"
    ],
    "preprocessed": "= 2 | assign x 1 | + $x 1;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "assign",
        "x",
        "1",
        [
          -1,
          "+",
          [
            -2,
            "x"
          ],
          "1"
        ]
      ]
    ],
    "code": "121130210302312111031210100130213023121010312312101001302132233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf205;&#xf248;&#xf14e;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 342
  },
  {
    "role": "code",
    "lines": [
      "= 1 | assign x 1 $x;"
    ],
    "preprocessed": "= 1 | assign x 1 $x;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "assign",
        "x",
        "1",
        [
          -2,
          "x"
        ]
      ]
    ],
    "code": "121130213023121110312101001302131231210100132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf205;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 343
  },
  {
    "role": "code",
    "lines": [
      "= 14 | assign x 1 14;"
    ],
    "preprocessed": "= 14 | assign x 1 14;",
    "dt": false,
    "parse": [
      "=",
      "14",
      [
        -1,
        "assign",
        "x",
        "1",
        "14"
      ]
    ],
    "code": "1211302111030231211103121010013021302111032233",
    "spider": "&#xf147;&#xf24a;&#xf212;&#xf248;&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf205;&#xf24a;&#xf212;&#xf24b;",
    "stanza": 344
  },
  {
    "role": "code",
    "lines": [
      "= 4 | assign x (assign y 3 | + 1 $y) $x;"
    ],
    "preprocessed": "= 4 | assign x (assign y 3 | + 1 $y) $x;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        "assign",
        "x",
        [
          "assign",
          "y",
          "3",
          [
            -1,
            "+",
            "1",
            [
              -2,
              "y"
            ]
          ]
        ],
        [
          -2,
          "x"
        ]
      ]
    ],
    "code": "1211302100302312111031210100132121110312100000130211302312101030213123121000001331231210100132233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf152;&#xf24a;&#xf145;&#xf145;&#xf24a;&#xf207;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf249;&#xf145;&#xf145;&#xf245;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 345
  },
  {
    "role": "code",
    "lines": [
      "= 4 | assign x (assign x 3 | + 1 $x) $x;"
    ],
    "preprocessed": "= 4 | assign x (assign x 3 | + 1 $x) $x;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        "assign",
        "x",
        [
          "assign",
          "x",
          "3",
          [
            -1,
            "+",
            "1",
            [
              -2,
              "x"
            ]
          ]
        ],
        [
          -2,
          "x"
        ]
      ]
    ],
    "code": "12113021003023121110312101001321211103121010013021130231210103021312312101001331231210100132233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf207;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 346
  },
  {
    "role": "doc",
    "lines": [
      "We're ready for functions.  `?` starts a lambda function.  Now we can have fun!"
    ],
    "stanza": 347
  },
  {
    "role": "code",
    "lines": [
      "= 0 | (? x $x) 0;"
    ],
    "preprocessed": "= 0 | (? x $x) 0;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        "0"
      ]
    ],
    "code": "12113020302321211003121010013123121010013302032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf24b;",
    "stanza": 348
  },
  {
    "role": "code",
    "lines": [
      "= 1 | (? x $x) 1;"
    ],
    "preprocessed": "= 1 | (? x $x) 1;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        "1"
      ]
    ],
    "code": "12113021302321211003121010013123121010013302132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf205;&#xf24b;",
    "stanza": 349
  },
  {
    "role": "code",
    "lines": [
      "= 2 | (? x $x) 2;"
    ],
    "preprocessed": "= 2 | (? x $x) 2;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        "2"
      ]
    ],
    "code": "1211302103023212110031210100131231210100133021032233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf206;&#xf24b;",
    "stanza": 350
  },
  {
    "role": "code",
    "lines": [
      "= 3 | (? x $x) 3;"
    ],
    "preprocessed": "= 3 | (? x $x) 3;",
    "dt": false,
    "parse": [
      "=",
      "3",
      [
        -1,
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        "3"
      ]
    ],
    "code": "1211302113023212110031210100131231210100133021132233",
    "spider": "&#xf147;&#xf24a;&#xf207;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf207;&#xf24b;",
    "stanza": 351
  },
  {
    "role": "code",
    "lines": [
      "= 4 | (? x $x) 4;"
    ],
    "preprocessed": "= 4 | (? x $x) 4;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        "4"
      ]
    ],
    "code": "121130210030232121100312101001312312101001330210032233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf208;&#xf24b;",
    "stanza": 352
  },
  {
    "role": "code",
    "lines": [
      "= 5 | (? x $x) 5;"
    ],
    "preprocessed": "= 5 | (? x $x) 5;",
    "dt": false,
    "parse": [
      "=",
      "5",
      [
        -1,
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        "5"
      ]
    ],
    "code": "121130210130232121100312101001312312101001330210132233",
    "spider": "&#xf147;&#xf24a;&#xf209;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf209;&#xf24b;",
    "stanza": 353
  },
  {
    "role": "code",
    "lines": [
      "= 1 | (? x | + 1 $x) 0;"
    ],
    "preprocessed": "= 1 | (? x | + 1 $x) 0;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            "1",
            [
              -2,
              "x"
            ]
          ]
        ],
        "0"
      ]
    ],
    "code": "1211302130232121100312101001302312101030213123121010013302032233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf24b;",
    "stanza": 354
  },
  {
    "role": "code",
    "lines": [
      "= 2 | (? x | + 1 $x) 1;"
    ],
    "preprocessed": "= 2 | (? x | + 1 $x) 1;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            "1",
            [
              -2,
              "x"
            ]
          ]
        ],
        "1"
      ]
    ],
    "code": "12113021030232121100312101001302312101030213123121010013302132233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf249;&#xf16d;&#xf245;&#xf205;&#xf24b;",
    "stanza": 355
  },
  {
    "role": "code",
    "lines": [
      "= 3 | (? x | + 1 $x) 2;"
    ],
    "preprocessed": "= 3 | (? x | + 1 $x) 2;",
    "dt": false,
    "parse": [
      "=",
      "3",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            "1",
            [
              -2,
              "x"
            ]
          ]
        ],
        "2"
      ]
    ],
    "code": "121130211302321211003121010013023121010302131231210100133021032233",
    "spider": "&#xf147;&#xf24a;&#xf207;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf249;&#xf16d;&#xf245;&#xf206;&#xf24b;",
    "stanza": 356
  },
  {
    "role": "code",
    "lines": [
      "= 4 | (? x | + 1 $x) 3;"
    ],
    "preprocessed": "= 4 | (? x | + 1 $x) 3;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            "1",
            [
              -2,
              "x"
            ]
          ]
        ],
        "3"
      ]
    ],
    "code": "1211302100302321211003121010013023121010302131231210100133021132233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf249;&#xf16d;&#xf245;&#xf207;&#xf24b;",
    "stanza": 357
  },
  {
    "role": "code",
    "lines": [
      "= 5 | (? x | + 1 $x) 4;"
    ],
    "preprocessed": "= 5 | (? x | + 1 $x) 4;",
    "dt": false,
    "parse": [
      "=",
      "5",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            "1",
            [
              -2,
              "x"
            ]
          ]
        ],
        "4"
      ]
    ],
    "code": "12113021013023212110031210100130231210103021312312101001330210032233",
    "spider": "&#xf147;&#xf24a;&#xf209;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf249;&#xf16d;&#xf245;&#xf208;&#xf24b;",
    "stanza": 358
  },
  {
    "role": "code",
    "lines": [
      "= 6 | (? x | + 1 $x) 5;"
    ],
    "preprocessed": "= 6 | (? x | + 1 $x) 5;",
    "dt": false,
    "parse": [
      "=",
      "6",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "+",
            "1",
            [
              -2,
              "x"
            ]
          ]
        ],
        "5"
      ]
    ],
    "code": "12113021103023212110031210100130231210103021312312101001330210132233",
    "spider": "&#xf147;&#xf24a;&#xf20a;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf249;&#xf16d;&#xf245;&#xf209;&#xf24b;",
    "stanza": 359
  },
  {
    "role": "code",
    "lines": [
      "= 0 | (? x | * $x $x) 0;"
    ],
    "preprocessed": "= 0 | (? x | * $x $x) 0;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -2,
              "x"
            ]
          ]
        ],
        "0"
      ]
    ],
    "code": "121130203023212110031210100130231210013123121010013123121010013302032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf24b;",
    "stanza": 360
  },
  {
    "role": "code",
    "lines": [
      "= 1 | (? x | * $x $x) 1;"
    ],
    "preprocessed": "= 1 | (? x | * $x $x) 1;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -2,
              "x"
            ]
          ]
        ],
        "1"
      ]
    ],
    "code": "121130213023212110031210100130231210013123121010013123121010013302132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf205;&#xf24b;",
    "stanza": 361
  },
  {
    "role": "code",
    "lines": [
      "= 4 | (? x | * $x $x) 2;"
    ],
    "preprocessed": "= 4 | (? x | * $x $x) 2;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -2,
              "x"
            ]
          ]
        ],
        "2"
      ]
    ],
    "code": "121130210030232121100312101001302312100131231210100131231210100133021032233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf206;&#xf24b;",
    "stanza": 362
  },
  {
    "role": "code",
    "lines": [
      "= 9 | (? x | * $x $x) 3;"
    ],
    "preprocessed": "= 9 | (? x | * $x $x) 3;",
    "dt": false,
    "parse": [
      "=",
      "9",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -2,
              "x"
            ]
          ]
        ],
        "3"
      ]
    ],
    "code": "1211302100130232121100312101001302312100131231210100131231210100133021132233",
    "spider": "&#xf147;&#xf24a;&#xf20d;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf207;&#xf24b;",
    "stanza": 363
  },
  {
    "role": "code",
    "lines": [
      "= 16 | (? x | * $x $x) 4;"
    ],
    "preprocessed": "= 16 | (? x | * $x $x) 4;",
    "dt": false,
    "parse": [
      "=",
      "16",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -2,
              "x"
            ]
          ]
        ],
        "4"
      ]
    ],
    "code": "121130210000302321211003121010013023121001312312101001312312101001330210032233",
    "spider": "&#xf147;&#xf24a;&#xf214;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf208;&#xf24b;",
    "stanza": 364
  },
  {
    "role": "code",
    "lines": [
      "= 25 | (? x | * $x $x) 5;"
    ],
    "preprocessed": "= 25 | (? x | * $x $x) 5;",
    "dt": false,
    "parse": [
      "=",
      "25",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -2,
              "x"
            ]
          ]
        ],
        "5"
      ]
    ],
    "code": "121130211001302321211003121010013023121001312312101001312312101001330210132233",
    "spider": "&#xf147;&#xf24a;&#xf21d;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf209;&#xf24b;",
    "stanza": 365
  },
  {
    "role": "code",
    "lines": [
      "= 0 | (? y | * $y $y) 0;"
    ],
    "preprocessed": "= 0 | (? y | * $y $y) 0;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        [
          "?",
          "y",
          [
            -1,
            "*",
            [
              -2,
              "y"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "0"
      ]
    ],
    "code": "121130203023212110031210000013023121001312312100000131231210000013302032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14d;&#xf249;&#xf145;&#xf145;&#xf249;&#xf145;&#xf145;&#xf245;&#xf204;&#xf24b;",
    "stanza": 366
  },
  {
    "role": "code",
    "lines": [
      "= 1 | (? y | * $y $y) 1;"
    ],
    "preprocessed": "= 1 | (? y | * $y $y) 1;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        [
          "?",
          "y",
          [
            -1,
            "*",
            [
              -2,
              "y"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "1"
      ]
    ],
    "code": "121130213023212110031210000013023121001312312100000131231210000013302132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14d;&#xf249;&#xf145;&#xf145;&#xf249;&#xf145;&#xf145;&#xf245;&#xf205;&#xf24b;",
    "stanza": 367
  },
  {
    "role": "code",
    "lines": [
      "= 4 | (? y | * $y $y) 2;"
    ],
    "preprocessed": "= 4 | (? y | * $y $y) 2;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        [
          "?",
          "y",
          [
            -1,
            "*",
            [
              -2,
              "y"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "2"
      ]
    ],
    "code": "121130210030232121100312100000130231210013123121000001312312100000133021032233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14d;&#xf249;&#xf145;&#xf145;&#xf249;&#xf145;&#xf145;&#xf245;&#xf206;&#xf24b;",
    "stanza": 368
  },
  {
    "role": "code",
    "lines": [
      "= 9 | (? y | * $y $y) 3;"
    ],
    "preprocessed": "= 9 | (? y | * $y $y) 3;",
    "dt": false,
    "parse": [
      "=",
      "9",
      [
        -1,
        [
          "?",
          "y",
          [
            -1,
            "*",
            [
              -2,
              "y"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "3"
      ]
    ],
    "code": "1211302100130232121100312100000130231210013123121000001312312100000133021132233",
    "spider": "&#xf147;&#xf24a;&#xf20d;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14d;&#xf249;&#xf145;&#xf145;&#xf249;&#xf145;&#xf145;&#xf245;&#xf207;&#xf24b;",
    "stanza": 369
  },
  {
    "role": "code",
    "lines": [
      "= 16 | (? y | * $y $y) 4;"
    ],
    "preprocessed": "= 16 | (? y | * $y $y) 4;",
    "dt": false,
    "parse": [
      "=",
      "16",
      [
        -1,
        [
          "?",
          "y",
          [
            -1,
            "*",
            [
              -2,
              "y"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "4"
      ]
    ],
    "code": "121130210000302321211003121000001302312100131231210000013123121000001330210032233",
    "spider": "&#xf147;&#xf24a;&#xf214;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14d;&#xf249;&#xf145;&#xf145;&#xf249;&#xf145;&#xf145;&#xf245;&#xf208;&#xf24b;",
    "stanza": 370
  },
  {
    "role": "code",
    "lines": [
      "= 25 | (? y | * $y $y) 5;"
    ],
    "preprocessed": "= 25 | (? y | * $y $y) 5;",
    "dt": false,
    "parse": [
      "=",
      "25",
      [
        -1,
        [
          "?",
          "y",
          [
            -1,
            "*",
            [
              -2,
              "y"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "5"
      ]
    ],
    "code": "121130211001302321211003121000001302312100131231210000013123121000001330210132233",
    "spider": "&#xf147;&#xf24a;&#xf21d;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14d;&#xf249;&#xf145;&#xf145;&#xf249;&#xf145;&#xf145;&#xf245;&#xf209;&#xf24b;",
    "stanza": 371
  },
  {
    "role": "doc",
    "lines": [
      "Emphasize the arbitrary nature of names, and hint that things we've learned already like addition could possibly be re-imagined as a named value."
    ],
    "stanza": 372
  },
  {
    "role": "code",
    "lines": [
      "= 0 | (? + | * $+ $+) 0;"
    ],
    "preprocessed": "= 0 | (? + | * $+ $+) 0;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        [
          "?",
          "+",
          [
            -1,
            "*",
            [
              -2,
              "+"
            ],
            [
              -2,
              "+"
            ]
          ]
        ],
        "0"
      ]
    ],
    "code": "121130203023212110031210103023121001312312101031231210103302032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf14e;&#xf248;&#xf14d;&#xf249;&#xf14e;&#xf249;&#xf14e;&#xf245;&#xf204;&#xf24b;",
    "stanza": 373
  },
  {
    "role": "code",
    "lines": [
      "= 1 | (? + | * $+ $+) 1;"
    ],
    "preprocessed": "= 1 | (? + | * $+ $+) 1;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        [
          "?",
          "+",
          [
            -1,
            "*",
            [
              -2,
              "+"
            ],
            [
              -2,
              "+"
            ]
          ]
        ],
        "1"
      ]
    ],
    "code": "121130213023212110031210103023121001312312101031231210103302132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf14e;&#xf248;&#xf14d;&#xf249;&#xf14e;&#xf249;&#xf14e;&#xf245;&#xf205;&#xf24b;",
    "stanza": 374
  },
  {
    "role": "code",
    "lines": [
      "= 4 | (? + | * $+ $+) 2;"
    ],
    "preprocessed": "= 4 | (? + | * $+ $+) 2;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        [
          "?",
          "+",
          [
            -1,
            "*",
            [
              -2,
              "+"
            ],
            [
              -2,
              "+"
            ]
          ]
        ],
        "2"
      ]
    ],
    "code": "121130210030232121100312101030231210013123121010312312101033021032233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf14e;&#xf248;&#xf14d;&#xf249;&#xf14e;&#xf249;&#xf14e;&#xf245;&#xf206;&#xf24b;",
    "stanza": 375
  },
  {
    "role": "code",
    "lines": [
      "= 9 | (? + | * $+ $+) 3;"
    ],
    "preprocessed": "= 9 | (? + | * $+ $+) 3;",
    "dt": false,
    "parse": [
      "=",
      "9",
      [
        -1,
        [
          "?",
          "+",
          [
            -1,
            "*",
            [
              -2,
              "+"
            ],
            [
              -2,
              "+"
            ]
          ]
        ],
        "3"
      ]
    ],
    "code": "1211302100130232121100312101030231210013123121010312312101033021132233",
    "spider": "&#xf147;&#xf24a;&#xf20d;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf14e;&#xf248;&#xf14d;&#xf249;&#xf14e;&#xf249;&#xf14e;&#xf245;&#xf207;&#xf24b;",
    "stanza": 376
  },
  {
    "role": "code",
    "lines": [
      "= 16 | (? + | * $+ $+) 4;"
    ],
    "preprocessed": "= 16 | (? + | * $+ $+) 4;",
    "dt": false,
    "parse": [
      "=",
      "16",
      [
        -1,
        [
          "?",
          "+",
          [
            -1,
            "*",
            [
              -2,
              "+"
            ],
            [
              -2,
              "+"
            ]
          ]
        ],
        "4"
      ]
    ],
    "code": "121130210000302321211003121010302312100131231210103123121010330210032233",
    "spider": "&#xf147;&#xf24a;&#xf214;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf14e;&#xf248;&#xf14d;&#xf249;&#xf14e;&#xf249;&#xf14e;&#xf245;&#xf208;&#xf24b;",
    "stanza": 377
  },
  {
    "role": "code",
    "lines": [
      "= 25 | (? + | * $+ $+) 5;"
    ],
    "preprocessed": "= 25 | (? + | * $+ $+) 5;",
    "dt": false,
    "parse": [
      "=",
      "25",
      [
        -1,
        [
          "?",
          "+",
          [
            -1,
            "*",
            [
              -2,
              "+"
            ],
            [
              -2,
              "+"
            ]
          ]
        ],
        "5"
      ]
    ],
    "code": "121130211001302321211003121010302312100131231210103123121010330210132233",
    "spider": "&#xf147;&#xf24a;&#xf21d;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf14e;&#xf248;&#xf14d;&#xf249;&#xf14e;&#xf249;&#xf14e;&#xf245;&#xf209;&#xf24b;",
    "stanza": 378
  },
  {
    "role": "code",
    "lines": [
      "= 0 | (? 5 | * $5 $5) 0;"
    ],
    "preprocessed": "= 0 | (? 5 | * $5 $5) 0;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        [
          "?",
          "5",
          [
            -1,
            "*",
            [
              -2,
              "5"
            ],
            [
              -2,
              "5"
            ]
          ]
        ],
        "0"
      ]
    ],
    "code": "121130203023212110030210130231210013123021013123021013302032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf209;&#xf248;&#xf14d;&#xf249;&#xf209;&#xf249;&#xf209;&#xf245;&#xf204;&#xf24b;",
    "stanza": 379
  },
  {
    "role": "code",
    "lines": [
      "= 1 | (? 5 | * $5 $5) 1;"
    ],
    "preprocessed": "= 1 | (? 5 | * $5 $5) 1;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        [
          "?",
          "5",
          [
            -1,
            "*",
            [
              -2,
              "5"
            ],
            [
              -2,
              "5"
            ]
          ]
        ],
        "1"
      ]
    ],
    "code": "121130213023212110030210130231210013123021013123021013302132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf209;&#xf248;&#xf14d;&#xf249;&#xf209;&#xf249;&#xf209;&#xf245;&#xf205;&#xf24b;",
    "stanza": 380
  },
  {
    "role": "code",
    "lines": [
      "= 4 | (? 5 | * $5 $5) 2;"
    ],
    "preprocessed": "= 4 | (? 5 | * $5 $5) 2;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        [
          "?",
          "5",
          [
            -1,
            "*",
            [
              -2,
              "5"
            ],
            [
              -2,
              "5"
            ]
          ]
        ],
        "2"
      ]
    ],
    "code": "121130210030232121100302101302312100131230210131230210133021032233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf209;&#xf248;&#xf14d;&#xf249;&#xf209;&#xf249;&#xf209;&#xf245;&#xf206;&#xf24b;",
    "stanza": 381
  },
  {
    "role": "code",
    "lines": [
      "= 9 | (? 5 | * $5 $5) 3;"
    ],
    "preprocessed": "= 9 | (? 5 | * $5 $5) 3;",
    "dt": false,
    "parse": [
      "=",
      "9",
      [
        -1,
        [
          "?",
          "5",
          [
            -1,
            "*",
            [
              -2,
              "5"
            ],
            [
              -2,
              "5"
            ]
          ]
        ],
        "3"
      ]
    ],
    "code": "1211302100130232121100302101302312100131230210131230210133021132233",
    "spider": "&#xf147;&#xf24a;&#xf20d;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf209;&#xf248;&#xf14d;&#xf249;&#xf209;&#xf249;&#xf209;&#xf245;&#xf207;&#xf24b;",
    "stanza": 382
  },
  {
    "role": "code",
    "lines": [
      "= 16 | (? 5 | * $5 $5) 4;"
    ],
    "preprocessed": "= 16 | (? 5 | * $5 $5) 4;",
    "dt": false,
    "parse": [
      "=",
      "16",
      [
        -1,
        [
          "?",
          "5",
          [
            -1,
            "*",
            [
              -2,
              "5"
            ],
            [
              -2,
              "5"
            ]
          ]
        ],
        "4"
      ]
    ],
    "code": "121130210000302321211003021013023121001312302101312302101330210032233",
    "spider": "&#xf147;&#xf24a;&#xf214;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf209;&#xf248;&#xf14d;&#xf249;&#xf209;&#xf249;&#xf209;&#xf245;&#xf208;&#xf24b;",
    "stanza": 383
  },
  {
    "role": "code",
    "lines": [
      "= 25 | (? 5 | * $5 $5) 5;"
    ],
    "preprocessed": "= 25 | (? 5 | * $5 $5) 5;",
    "dt": false,
    "parse": [
      "=",
      "25",
      [
        -1,
        [
          "?",
          "5",
          [
            -1,
            "*",
            [
              -2,
              "5"
            ],
            [
              -2,
              "5"
            ]
          ]
        ],
        "5"
      ]
    ],
    "code": "121130211001302321211003021013023121001312302101312302101330210132233",
    "spider": "&#xf147;&#xf24a;&#xf21d;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf209;&#xf248;&#xf14d;&#xf249;&#xf209;&#xf249;&#xf209;&#xf245;&#xf209;&#xf24b;",
    "stanza": 384
  },
  {
    "role": "doc",
    "lines": [
      "Show that we can name functions and use them later - still within a single expression for now."
    ],
    "stanza": 385
  },
  {
    "role": "code",
    "lines": [
      "assign x (? y | * $y $y) | = 25 | x 5;"
    ],
    "preprocessed": "assign x (? y | * $y $y) | = 25 | x 5;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "?",
        "y",
        [
          -1,
          "*",
          [
            -2,
            "y"
          ],
          [
            -2,
            "y"
          ]
        ]
      ],
      [
        -1,
        "=",
        "25",
        [
          -1,
          "x",
          "5"
        ]
      ]
    ],
    "code": "1211103121010013212110031210000013023121001312312100000131231210000013302312113021100130231210100130210132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14d;&#xf249;&#xf145;&#xf145;&#xf249;&#xf145;&#xf145;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf21d;&#xf248;&#xf16d;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 386
  },
  {
    "role": "code",
    "lines": [
      "assign x (? y | + $y 1) | = 6 | x 5;"
    ],
    "preprocessed": "assign x (? y | + $y 1) | = 6 | x 5;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "?",
        "y",
        [
          -1,
          "+",
          [
            -2,
            "y"
          ],
          "1"
        ]
      ],
      [
        -1,
        "=",
        "6",
        [
          -1,
          "x",
          "5"
        ]
      ]
    ],
    "code": "12111031210100132121100312100000130231210103123121000001302133023121130211030231210100130210132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14e;&#xf249;&#xf145;&#xf145;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf20a;&#xf248;&#xf16d;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 387
  },
  {
    "role": "code",
    "lines": [
      "assign x (? x | + $x 1) | = 6 | x 5;"
    ],
    "preprocessed": "assign x (? x | + $x 1) | = 6 | x 5;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "?",
        "x",
        [
          -1,
          "+",
          [
            -2,
            "x"
          ],
          "1"
        ]
      ],
      [
        -1,
        "=",
        "6",
        [
          -1,
          "x",
          "5"
        ]
      ]
    ],
    "code": "121110312101001321211003121010013023121010312312101001302133023121130211030231210100130210132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14e;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf20a;&#xf248;&#xf16d;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 388
  },
  {
    "role": "code",
    "lines": [
      "assign y (? x | + $x 1) | = 6 | y 5;"
    ],
    "preprocessed": "assign y (? x | + $x 1) | = 6 | y 5;",
    "dt": false,
    "parse": [
      "assign",
      "y",
      [
        "?",
        "x",
        [
          -1,
          "+",
          [
            -2,
            "x"
          ],
          "1"
        ]
      ],
      [
        -1,
        "=",
        "6",
        [
          -1,
          "y",
          "5"
        ]
      ]
    ],
    "code": "12111031210000013212110031210100130231210103123121010013021330231211302110302312100000130210132233",
    "spider": "&#xf152;&#xf24a;&#xf145;&#xf145;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14e;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf20a;&#xf248;&#xf145;&#xf145;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 389
  },
  {
    "role": "doc",
    "lines": [
      "Show that we can nest functions to take multiple values."
    ],
    "stanza": 390
  },
  {
    "role": "code",
    "lines": [
      "= 52 | * 4 13;"
    ],
    "preprocessed": "= 52 | * 4 13;",
    "dt": false,
    "parse": [
      "=",
      "52",
      [
        -1,
        "*",
        "4",
        "13"
      ]
    ],
    "code": "12113021101003023121001302100302110132233",
    "spider": "&#xf147;&#xf24a;&#xf238;&#xf248;&#xf14d;&#xf24a;&#xf208;&#xf24a;&#xf211;&#xf24b;",
    "stanza": 391
  },
  {
    "role": "code",
    "lines": [
      "= 52 | (? x | * $x 4) 13;"
    ],
    "preprocessed": "= 52 | (? x | * $x 4) 13;",
    "dt": false,
    "parse": [
      "=",
      "52",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            "4"
          ]
        ],
        "13"
      ]
    ],
    "code": "12113021101003023212110031210100130231210013123121010013021003302110132233",
    "spider": "&#xf147;&#xf24a;&#xf238;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf211;&#xf24b;",
    "stanza": 392
  },
  {
    "role": "code",
    "lines": [
      "= 52 | (? x | ? y | * $x $y) 13 4;"
    ],
    "preprocessed": "= 52 | (? x | ? y | * $x $y) 13 4;",
    "dt": false,
    "parse": [
      "=",
      "52",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "?",
            "y",
            [
              -1,
              "*",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ],
        "13",
        "4"
      ]
    ],
    "code": "12113021101003023212110031210100130231211003121000001302312100131231210100131231210000013302110130210032233",
    "spider": "&#xf147;&#xf24a;&#xf238;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf211;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 393
  },
  {
    "role": "code",
    "lines": [
      "= 53 | (? x | ? y | + 1 | * $x $y) 13 4;"
    ],
    "preprocessed": "= 53 | (? x | ? y | + 1 | * $x $y) 13 4;",
    "dt": false,
    "parse": [
      "=",
      "53",
      [
        -1,
        [
          "?",
          "x",
          [
            -1,
            "?",
            "y",
            [
              -1,
              "+",
              "1",
              [
                -1,
                "*",
                [
                  -2,
                  "x"
                ],
                [
                  -2,
                  "y"
                ]
              ]
            ]
          ]
        ],
        "13",
        "4"
      ]
    ],
    "code": "1211302110101302321211003121010013023121100312100000130231210103021302312100131231210100131231210000013302110130210032233",
    "spider": "&#xf147;&#xf24a;&#xf239;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf211;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 394
  },
  {
    "role": "code",
    "lines": [
      "assign z (? x | ? y | + 1 | * $x $y) | = 53 | z 13 4;"
    ],
    "preprocessed": "assign z (? x | ? y | + 1 | * $x $y) | = 53 | z 13 4;",
    "dt": false,
    "parse": [
      "assign",
      "z",
      [
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "+",
            "1",
            [
              -1,
              "*",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ]
      ],
      [
        -1,
        "=",
        "53",
        [
          -1,
          "z",
          "13",
          "4"
        ]
      ]
    ],
    "code": "1211103121000010321211003121010013023121100312100000130231210103021302312100131231210100131231210000013302312113021101013023121000010302110130210032233",
    "spider": "&#xf152;&#xf24a;&#xf145;&#xf146;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf239;&#xf248;&#xf145;&#xf146;&#xf24a;&#xf211;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 395
  },
  {
    "role": "file",
    "lines": [
      "== COS_DefineFunction =="
    ],
    "stanza": 396
  },
  {
    "role": "doc",
    "lines": [
      "",
      "We've set up a way to name a value within an expression.  Now let's go beyond that,",
      "and introduce a way to name a value in one sentence and use it in a later sentence.",
      "In other words, a message-level memory.  After this, we'll be able to define new",
      "symbols from existing ones, with less need for large numbers of examples.",
      "",
      "We introduce a `define` symbol that works just like `assign`, except that it applies",
      "to the rest of the message rather than the rest of the sentence.",
      "",
      "A sentence of the form `define X Y` means that `$X` will evaluate to `Y` from that",
      "point on (unless `X` is changed by another `define`).",
      "",
      "The `meaning-of-life-universe-everything` symbol here is entirely arbitrary, and",
      "won't be encoded as anything particularly meaningful in the message.",
      ""
    ],
    "section_description": "demonstrate existence of memory",
    "section_category": "MATH",
    "section_index": 9,
    "stanza": 397
  },
  {
    "role": "code",
    "lines": [
      "define meaning-of-life-universe-everything 39;"
    ],
    "preprocessed": "define meaning-of-life-universe-everything 39;",
    "dt": true,
    "parse": [
      "define",
      "meaning-of-life-universe-everything",
      "39"
    ],
    "code": "121101312100011030210011132233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf14a;&#xf24a;&#xf22b;&#xf24b;",
    "stanza": 398
  },
  {
    "role": "code",
    "lines": [
      "= 39 $meaning-of-life-universe-everything;"
    ],
    "preprocessed": "= 39 $meaning-of-life-universe-everything;",
    "dt": false,
    "parse": [
      "=",
      "39",
      [
        -2,
        "meaning-of-life-universe-everything"
      ]
    ],
    "code": "1211302100111312312100011032233",
    "spider": "&#xf147;&#xf24a;&#xf22b;&#xf249;&#xf145;&#xf14a;&#xf24b;",
    "stanza": 399
  },
  {
    "role": "code",
    "lines": [
      "= $meaning-of-life-universe-everything 39;"
    ],
    "preprocessed": "= $meaning-of-life-universe-everything 39;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "meaning-of-life-universe-everything"
      ],
      "39"
    ],
    "code": "1211312312100011030210011132233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf14a;&#xf24a;&#xf22b;&#xf24b;",
    "stanza": 400
  },
  {
    "role": "code",
    "lines": [
      "= 49 | + 10 $meaning-of-life-universe-everything;"
    ],
    "preprocessed": "= 49 | + 10 $meaning-of-life-universe-everything;",
    "dt": false,
    "parse": [
      "=",
      "49",
      [
        -1,
        "+",
        "10",
        [
          -2,
          "meaning-of-life-universe-everything"
        ]
      ]
    ],
    "code": "121130211000130231210103021010312312100011032233",
    "spider": "&#xf147;&#xf24a;&#xf235;&#xf248;&#xf14e;&#xf24a;&#xf20e;&#xf249;&#xf145;&#xf14a;&#xf24b;",
    "stanza": 401
  },
  {
    "role": "code",
    "lines": [
      "define meaning-of-life-universe-everything 40;"
    ],
    "preprocessed": "define meaning-of-life-universe-everything 40;",
    "dt": true,
    "parse": [
      "define",
      "meaning-of-life-universe-everything",
      "40"
    ],
    "code": "121101312100011030210100032233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf14a;&#xf24a;&#xf22c;&#xf24b;",
    "stanza": 402
  },
  {
    "role": "code",
    "lines": [
      "= $meaning-of-life-universe-everything 40;"
    ],
    "preprocessed": "= $meaning-of-life-universe-everything 40;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "meaning-of-life-universe-everything"
      ],
      "40"
    ],
    "code": "1211312312100011030210100032233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf14a;&#xf24a;&#xf22c;&#xf24b;",
    "stanza": 403
  },
  {
    "role": "code",
    "lines": [
      "= 80 | * $meaning-of-life-universe-everything 2;"
    ],
    "preprocessed": "= 80 | * $meaning-of-life-universe-everything 2;",
    "dt": false,
    "parse": [
      "=",
      "80",
      [
        -1,
        "*",
        [
          -2,
          "meaning-of-life-universe-everything"
        ],
        "2"
      ]
    ],
    "code": "12113021010000302312100131231210001103021032233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf214;&#xf248;&#xf14d;&#xf249;&#xf145;&#xf14a;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 404
  },
  {
    "role": "code",
    "lines": [
      "define meaning-of-life-universe-everything | + 1 $meaning-of-life-universe-everything;"
    ],
    "preprocessed": "define meaning-of-life-universe-everything | + 1 $meaning-of-life-universe-everything;",
    "dt": true,
    "parse": [
      "define",
      "meaning-of-life-universe-everything",
      [
        -1,
        "+",
        "1",
        [
          -2,
          "meaning-of-life-universe-everything"
        ]
      ]
    ],
    "code": "121101312100011030231210103021312312100011032233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf14a;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf249;&#xf145;&#xf14a;&#xf24b;",
    "stanza": 405
  },
  {
    "role": "code",
    "lines": [
      "= $meaning-of-life-universe-everything 41;"
    ],
    "preprocessed": "= $meaning-of-life-universe-everything 41;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "meaning-of-life-universe-everything"
      ],
      "41"
    ],
    "code": "1211312312100011030210100132233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf14a;&#xf24a;&#xf22d;&#xf24b;",
    "stanza": 406
  },
  {
    "role": "code",
    "lines": [
      "assign x (+ 1 $meaning-of-life-universe-everything) | define meaning-of-life-universe-everything $x;"
    ],
    "preprocessed": "assign x (+ 1 $meaning-of-life-universe-everything) | define meaning-of-life-universe-everything $x;",
    "dt": true,
    "parse": [
      "assign",
      "x",
      [
        "+",
        "1",
        [
          -2,
          "meaning-of-life-universe-everything"
        ]
      ],
      [
        -1,
        "define",
        "meaning-of-life-universe-everything",
        [
          -2,
          "x"
        ]
      ]
    ],
    "code": "121110312101001321210103021312312100011033023121101312100011031231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf14e;&#xf24a;&#xf205;&#xf249;&#xf145;&#xf14a;&#xf245;&#xf248;&#xf151;&#xf24a;&#xf145;&#xf14a;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 407
  },
  {
    "role": "code",
    "lines": [
      "= $meaning-of-life-universe-everything 42;"
    ],
    "preprocessed": "= $meaning-of-life-universe-everything 42;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "meaning-of-life-universe-everything"
      ],
      "42"
    ],
    "code": "1211312312100011030210101032233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf14a;&#xf24a;&#xf22e;&#xf24b;",
    "stanza": 408
  },
  {
    "role": "doc",
    "lines": [
      "Now we can start defining and naming functions.  Here's one to square an integer."
    ],
    "stanza": 409
  },
  {
    "role": "code",
    "lines": [
      "intro square;"
    ],
    "preprocessed": "intro square;",
    "dt": false,
    "parse": [
      "intro",
      "square"
    ],
    "code": "121001031211111132233",
    "spider": "&#xf156;&#xf24a;&#xf183;&#xf24b;",
    "stanza": 410
  },
  {
    "role": "code",
    "lines": [
      "define square | ? x | * $x $x;"
    ],
    "preprocessed": "define square | ? x | * $x $x;",
    "dt": true,
    "parse": [
      "define",
      "square",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "*",
          [
            -2,
            "x"
          ],
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "code": "1211013121111113023121100312101001302312100131231210100131231210100132233",
    "spider": "&#xf151;&#xf24a;&#xf183;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 411
  },
  {
    "role": "code",
    "lines": [
      "= 9 | square 3;"
    ],
    "preprocessed": "= 9 | square 3;",
    "dt": false,
    "parse": [
      "=",
      "9",
      [
        -1,
        "square",
        "3"
      ]
    ],
    "code": "121130210013023121111113021132233",
    "spider": "&#xf147;&#xf24a;&#xf20d;&#xf248;&#xf183;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 412
  },
  {
    "role": "code",
    "lines": [
      "= 81 | square 9;"
    ],
    "preprocessed": "= 81 | square 9;",
    "dt": false,
    "parse": [
      "=",
      "81",
      [
        -1,
        "square",
        "9"
      ]
    ],
    "code": "12113021010001302312111111302100132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf215;&#xf248;&#xf183;&#xf24a;&#xf20d;&#xf24b;",
    "stanza": 413
  },
  {
    "role": "code",
    "lines": [
      "= 1 | square 1;"
    ],
    "preprocessed": "= 1 | square 1;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "square",
        "1"
      ]
    ],
    "code": "12113021302312111111302132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf183;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 414
  },
  {
    "role": "code",
    "lines": [
      "= 4 | square 2;"
    ],
    "preprocessed": "= 4 | square 2;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        "square",
        "2"
      ]
    ],
    "code": "12113021003023121111113021032233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf183;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 415
  },
  {
    "role": "code",
    "lines": [
      "= 0 | square 0;"
    ],
    "preprocessed": "= 0 | square 0;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "square",
        "0"
      ]
    ],
    "code": "12113020302312111111302032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf183;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 416
  },
  {
    "role": "doc",
    "lines": [
      "Here's a function to increment an integer."
    ],
    "stanza": 417
  },
  {
    "role": "code",
    "lines": [
      "intro ++;"
    ],
    "preprocessed": "intro ++;",
    "dt": false,
    "parse": [
      "intro",
      "++"
    ],
    "code": "1210010312100011132233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf14b;&#xf24b;",
    "stanza": 418
  },
  {
    "role": "code",
    "lines": [
      "define ++ | ? x | + $x 1;"
    ],
    "preprocessed": "define ++ | ? x | + $x 1;",
    "dt": true,
    "parse": [
      "define",
      "++",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "+",
          [
            -2,
            "x"
          ],
          "1"
        ]
      ]
    ],
    "code": "121101312100011130231211003121010013023121010312312101001302132233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf14b;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14e;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 419
  },
  {
    "role": "code",
    "lines": [
      "= 4 | ++ 3;"
    ],
    "preprocessed": "= 4 | ++ 3;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        "++",
        "3"
      ]
    ],
    "code": "121130210030231210001113021132233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf145;&#xf14b;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 420
  },
  {
    "role": "code",
    "lines": [
      "= 10 | ++ 9;"
    ],
    "preprocessed": "= 10 | ++ 9;",
    "dt": false,
    "parse": [
      "=",
      "10",
      [
        -1,
        "++",
        "9"
      ]
    ],
    "code": "121130210103023121000111302100132233",
    "spider": "&#xf147;&#xf24a;&#xf20e;&#xf248;&#xf145;&#xf14b;&#xf24a;&#xf20d;&#xf24b;",
    "stanza": 421
  },
  {
    "role": "code",
    "lines": [
      "= 2 | ++ 1;"
    ],
    "preprocessed": "= 2 | ++ 1;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "++",
        "1"
      ]
    ],
    "code": "1211302103023121000111302132233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf145;&#xf14b;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 422
  },
  {
    "role": "code",
    "lines": [
      "= 3 | ++ 2;"
    ],
    "preprocessed": "= 3 | ++ 2;",
    "dt": false,
    "parse": [
      "=",
      "3",
      [
        -1,
        "++",
        "2"
      ]
    ],
    "code": "12113021130231210001113021032233",
    "spider": "&#xf147;&#xf24a;&#xf207;&#xf248;&#xf145;&#xf14b;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 423
  },
  {
    "role": "code",
    "lines": [
      "= 1 | ++ 0;"
    ],
    "preprocessed": "= 1 | ++ 0;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "++",
        "0"
      ]
    ],
    "code": "121130213023121000111302032233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf145;&#xf14b;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 424
  },
  {
    "role": "file",
    "lines": [
      "== COS_TrueFalse =="
    ],
    "stanza": 425
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Now that we have functions, we could introduce some clever definitions of true, false,",
      "and conditionals, where:",
      "",
      " * `if` is `? x | ? y | ? z | x $y $z`",
      " * `true` is `? y | ? z | y`",
      " * `false` is `? y | ? z | z`",
      " ",
      "This is a neat implementation, but maybe a bit confusing.  So let's",
      "not actually commit to a type for truth values in the message yet,",
      "but just equate them with the results of equality `=`.",
      "",
      "Once we have truth values, we can introduce conditionals and build up to fun stuff.",
      "",
      "One slightly sneaky thing we do is to code `true` and `false` as `$1`",
      "and `$0`.  This could be helpful, or confusing, I'm not sure.  Nothing",
      "else in the message depends on this so it can be adjusted to taste.",
      ""
    ],
    "section_description": "introduce true and false",
    "section_category": "MATH",
    "section_index": 10,
    "stanza": 426
  },
  {
    "role": "code",
    "lines": [
      "intro true;"
    ],
    "preprocessed": "intro true;",
    "dt": false,
    "parse": [
      "intro",
      "true"
    ],
    "code": "1210010312132233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf24b;",
    "stanza": 427
  },
  {
    "role": "code",
    "lines": [
      "intro false;"
    ],
    "preprocessed": "intro false;",
    "dt": false,
    "parse": [
      "intro",
      "false"
    ],
    "code": "1210010312032233",
    "spider": "&#xf156;&#xf24a;&#xf144;&#xf24b;",
    "stanza": 428
  },
  {
    "role": "code",
    "lines": [
      "define true | = 0 0;"
    ],
    "preprocessed": "define true | = 0 0;",
    "dt": true,
    "parse": [
      "define",
      "true",
      [
        -1,
        "=",
        "0",
        "0"
      ]
    ],
    "code": "1211013121302312113020302032233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf248;&#xf147;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 429
  },
  {
    "role": "code",
    "lines": [
      "define false | = 0 1;"
    ],
    "preprocessed": "define false | = 0 1;",
    "dt": true,
    "parse": [
      "define",
      "false",
      [
        -1,
        "=",
        "0",
        "1"
      ]
    ],
    "code": "1211013120302312113020302132233",
    "spider": "&#xf151;&#xf24a;&#xf144;&#xf248;&#xf147;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 430
  },
  {
    "role": "code",
    "lines": [
      "= $true (= 2 2);"
    ],
    "preprocessed": "= $true (= 2 2);",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        "=",
        "2",
        "2"
      ]
    ],
    "code": "121131231213212113021030210332233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf246;&#xf147;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 431
  },
  {
    "role": "code",
    "lines": [
      "= $true (> 4 2);"
    ],
    "preprocessed": "= $true (> 4 2);",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        ">",
        "4",
        "2"
      ]
    ],
    "code": "12113123121321210030210030210332233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf246;&#xf148;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 432
  },
  {
    "role": "code",
    "lines": [
      "= $true (= 1 1);"
    ],
    "preprocessed": "= $true (= 1 1);",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        "=",
        "1",
        "1"
      ]
    ],
    "code": "1211312312132121130213021332233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf246;&#xf147;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 433
  },
  {
    "role": "code",
    "lines": [
      "= $true (> 6 4);"
    ],
    "preprocessed": "= $true (> 6 4);",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        ">",
        "6",
        "4"
      ]
    ],
    "code": "121131231213212100302110302100332233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf246;&#xf148;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 434
  },
  {
    "role": "code",
    "lines": [
      "= $true (< 3 4);"
    ],
    "preprocessed": "= $true (< 3 4);",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        "<",
        "3",
        "4"
      ]
    ],
    "code": "1211312312132121030211302100332233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf246;&#xf146;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 435
  },
  {
    "role": "code",
    "lines": [
      "= (= 5 5) $true;"
    ],
    "preprocessed": "= (= 5 5) $true;",
    "dt": false,
    "parse": [
      "=",
      [
        "=",
        "5",
        "5"
      ],
      [
        -2,
        "true"
      ]
    ],
    "code": "12113212113021013021013312312132233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf24a;&#xf209;&#xf24a;&#xf209;&#xf245;&#xf249;&#xf145;&#xf24b;",
    "stanza": 436
  },
  {
    "role": "code",
    "lines": [
      "= (= 3 3) $true;"
    ],
    "preprocessed": "= (= 3 3) $true;",
    "dt": false,
    "parse": [
      "=",
      [
        "=",
        "3",
        "3"
      ],
      [
        -2,
        "true"
      ]
    ],
    "code": "121132121130211302113312312132233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf245;&#xf249;&#xf145;&#xf24b;",
    "stanza": 437
  },
  {
    "role": "code",
    "lines": [
      "= (= 4 4) $true;"
    ],
    "preprocessed": "= (= 4 4) $true;",
    "dt": false,
    "parse": [
      "=",
      [
        "=",
        "4",
        "4"
      ],
      [
        -2,
        "true"
      ]
    ],
    "code": "12113212113021003021003312312132233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf24a;&#xf208;&#xf24a;&#xf208;&#xf245;&#xf249;&#xf145;&#xf24b;",
    "stanza": 438
  },
  {
    "role": "code",
    "lines": [
      "= (= 3 3) $true;"
    ],
    "preprocessed": "= (= 3 3) $true;",
    "dt": false,
    "parse": [
      "=",
      [
        "=",
        "3",
        "3"
      ],
      [
        -2,
        "true"
      ]
    ],
    "code": "121132121130211302113312312132233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf245;&#xf249;&#xf145;&#xf24b;",
    "stanza": 439
  },
  {
    "role": "code",
    "lines": [
      "= (= 0 0) $true;"
    ],
    "preprocessed": "= (= 0 0) $true;",
    "dt": false,
    "parse": [
      "=",
      [
        "=",
        "0",
        "0"
      ],
      [
        -2,
        "true"
      ]
    ],
    "code": "1211321211302030203312312132233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf249;&#xf145;&#xf24b;",
    "stanza": 440
  },
  {
    "role": "code",
    "lines": [
      "= $false (< 6 2);"
    ],
    "preprocessed": "= $false (< 6 2);",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        "<",
        "6",
        "2"
      ]
    ],
    "code": "1211312312032121030211030210332233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf246;&#xf146;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 441
  },
  {
    "role": "code",
    "lines": [
      "= $false (< 4 2);"
    ],
    "preprocessed": "= $false (< 4 2);",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        "<",
        "4",
        "2"
      ]
    ],
    "code": "1211312312032121030210030210332233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf246;&#xf146;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 442
  },
  {
    "role": "code",
    "lines": [
      "= $false (< 4 1);"
    ],
    "preprocessed": "= $false (< 4 1);",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        "<",
        "4",
        "1"
      ]
    ],
    "code": "121131231203212103021003021332233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf246;&#xf146;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 443
  },
  {
    "role": "code",
    "lines": [
      "= $false (> 0 0);"
    ],
    "preprocessed": "= $false (> 0 0);",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        ">",
        "0",
        "0"
      ]
    ],
    "code": "12113123120321210030203020332233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf246;&#xf148;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 444
  },
  {
    "role": "code",
    "lines": [
      "= $false (> 0 5);"
    ],
    "preprocessed": "= $false (> 0 5);",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        ">",
        "0",
        "5"
      ]
    ],
    "code": "1211312312032121003020302101332233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf246;&#xf148;&#xf24a;&#xf204;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 445
  },
  {
    "role": "code",
    "lines": [
      "= (= 3 2) $false;"
    ],
    "preprocessed": "= (= 3 2) $false;",
    "dt": false,
    "parse": [
      "=",
      [
        "=",
        "3",
        "2"
      ],
      [
        -2,
        "false"
      ]
    ],
    "code": "121132121130211302103312312032233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf206;&#xf245;&#xf249;&#xf144;&#xf24b;",
    "stanza": 446
  },
  {
    "role": "code",
    "lines": [
      "= (> 2 3) $false;"
    ],
    "preprocessed": "= (> 2 3) $false;",
    "dt": false,
    "parse": [
      "=",
      [
        ">",
        "2",
        "3"
      ],
      [
        -2,
        "false"
      ]
    ],
    "code": "1211321210030210302113312312032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf245;&#xf249;&#xf144;&#xf24b;",
    "stanza": 447
  },
  {
    "role": "code",
    "lines": [
      "= (> 4 5) $false;"
    ],
    "preprocessed": "= (> 4 5) $false;",
    "dt": false,
    "parse": [
      "=",
      [
        ">",
        "4",
        "5"
      ],
      [
        -2,
        "false"
      ]
    ],
    "code": "121132121003021003021013312312032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf24a;&#xf208;&#xf24a;&#xf209;&#xf245;&#xf249;&#xf144;&#xf24b;",
    "stanza": 448
  },
  {
    "role": "code",
    "lines": [
      "= (> 2 6) $false;"
    ],
    "preprocessed": "= (> 2 6) $false;",
    "dt": false,
    "parse": [
      "=",
      [
        ">",
        "2",
        "6"
      ],
      [
        -2,
        "false"
      ]
    ],
    "code": "12113212100302103021103312312032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf24a;&#xf206;&#xf24a;&#xf20a;&#xf245;&#xf249;&#xf144;&#xf24b;",
    "stanza": 449
  },
  {
    "role": "code",
    "lines": [
      "= (> 1 6) $false;"
    ],
    "preprocessed": "= (> 1 6) $false;",
    "dt": false,
    "parse": [
      "=",
      [
        ">",
        "1",
        "6"
      ],
      [
        -2,
        "false"
      ]
    ],
    "code": "1211321210030213021103312312032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf24a;&#xf205;&#xf24a;&#xf20a;&#xf245;&#xf249;&#xf144;&#xf24b;",
    "stanza": 450
  },
  {
    "role": "code",
    "lines": [
      "= $true $true;"
    ],
    "preprocessed": "= $true $true;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        -2,
        "true"
      ]
    ],
    "code": "12113123121312312132233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf249;&#xf145;&#xf24b;",
    "stanza": 451
  },
  {
    "role": "code",
    "lines": [
      "= $false $false;"
    ],
    "preprocessed": "= $false $false;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -2,
        "false"
      ]
    ],
    "code": "12113123120312312032233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf249;&#xf144;&#xf24b;",
    "stanza": 452
  },
  {
    "role": "code",
    "lines": [
      "not | = $true $false;"
    ],
    "preprocessed": "not | = $true $false;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          -2,
          "true"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "code": "12101302312113123121312312032233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf249;&#xf145;&#xf249;&#xf144;&#xf24b;",
    "stanza": 453
  },
  {
    "role": "code",
    "lines": [
      "not | = $false $true;"
    ],
    "preprocessed": "not | = $false $true;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          -2,
          "false"
        ],
        [
          -2,
          "true"
        ]
      ]
    ],
    "code": "12101302312113123120312312132233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf249;&#xf144;&#xf249;&#xf145;&#xf24b;",
    "stanza": 454
  },
  {
    "role": "code",
    "lines": [
      "= (> 4 2) (< 1 4);"
    ],
    "preprocessed": "= (> 4 2) (< 1 4);",
    "dt": false,
    "parse": [
      "=",
      [
        ">",
        "4",
        "2"
      ],
      [
        "<",
        "1",
        "4"
      ]
    ],
    "code": "121132121003021003021033212103021302100332233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf205;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 455
  },
  {
    "role": "code",
    "lines": [
      "= (= 3 3) (< 3 5);"
    ],
    "preprocessed": "= (= 3 3) (< 3 5);",
    "dt": false,
    "parse": [
      "=",
      [
        "=",
        "3",
        "3"
      ],
      [
        "<",
        "3",
        "5"
      ]
    ],
    "code": "12113212113021130211332121030211302101332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf207;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 456
  },
  {
    "role": "code",
    "lines": [
      "= (= 0 0) (= 4 4);"
    ],
    "preprocessed": "= (= 0 0) (= 4 4);",
    "dt": false,
    "parse": [
      "=",
      [
        "=",
        "0",
        "0"
      ],
      [
        "=",
        "4",
        "4"
      ]
    ],
    "code": "1211321211302030203321211302100302100332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf208;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 457
  },
  {
    "role": "code",
    "lines": [
      "= (> 6 4) (< 3 5);"
    ],
    "preprocessed": "= (> 6 4) (< 3 5);",
    "dt": false,
    "parse": [
      "=",
      [
        ">",
        "6",
        "4"
      ],
      [
        "<",
        "3",
        "5"
      ]
    ],
    "code": "12113212100302110302100332121030211302101332233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf207;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 458
  },
  {
    "role": "code",
    "lines": [
      "= (< 5 6) (< 0 2);"
    ],
    "preprocessed": "= (< 5 6) (< 0 2);",
    "dt": false,
    "parse": [
      "=",
      [
        "<",
        "5",
        "6"
      ],
      [
        "<",
        "0",
        "2"
      ]
    ],
    "code": "12113212103021013021103321210302030210332233",
    "spider": "&#xf147;&#xf246;&#xf146;&#xf24a;&#xf209;&#xf24a;&#xf20a;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf204;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 459
  },
  {
    "role": "code",
    "lines": [
      "= (= 5 1) (> 2 4);"
    ],
    "preprocessed": "= (= 5 1) (> 2 4);",
    "dt": false,
    "parse": [
      "=",
      [
        "=",
        "5",
        "1"
      ],
      [
        ">",
        "2",
        "4"
      ]
    ],
    "code": "121132121130210130213321210030210302100332233",
    "spider": "&#xf147;&#xf246;&#xf147;&#xf24a;&#xf209;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 460
  },
  {
    "role": "code",
    "lines": [
      "= (> 4 6) (> 1 3);"
    ],
    "preprocessed": "= (> 4 6) (> 1 3);",
    "dt": false,
    "parse": [
      "=",
      [
        ">",
        "4",
        "6"
      ],
      [
        ">",
        "1",
        "3"
      ]
    ],
    "code": "1211321210030210030211033212100302130211332233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf205;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 461
  },
  {
    "role": "code",
    "lines": [
      "= (> 2 5) (= 5 3);"
    ],
    "preprocessed": "= (> 2 5) (= 5 3);",
    "dt": false,
    "parse": [
      "=",
      [
        ">",
        "2",
        "5"
      ],
      [
        "=",
        "5",
        "3"
      ]
    ],
    "code": "1211321210030210302101332121130210130211332233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf24a;&#xf206;&#xf24a;&#xf209;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 462
  },
  {
    "role": "code",
    "lines": [
      "= (< 2 1) (< 6 4);"
    ],
    "preprocessed": "= (< 2 1) (< 6 4);",
    "dt": false,
    "parse": [
      "=",
      [
        "<",
        "2",
        "1"
      ],
      [
        "<",
        "6",
        "4"
      ]
    ],
    "code": "12113212103021030213321210302110302100332233",
    "spider": "&#xf147;&#xf246;&#xf146;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 463
  },
  {
    "role": "code",
    "lines": [
      "= (< 6 2) (> 4 5);"
    ],
    "preprocessed": "= (< 6 2) (> 4 5);",
    "dt": false,
    "parse": [
      "=",
      [
        "<",
        "6",
        "2"
      ],
      [
        ">",
        "4",
        "5"
      ]
    ],
    "code": "12113212103021103021033212100302100302101332233",
    "spider": "&#xf147;&#xf246;&#xf146;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf208;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 464
  },
  {
    "role": "code",
    "lines": [
      "not | = (> 0 1) (= 0 0);"
    ],
    "preprocessed": "not | = (> 0 1) (= 0 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          ">",
          "0",
          "1"
        ],
        [
          "=",
          "0",
          "0"
        ]
      ]
    ],
    "code": "1210130231211321210030203021332121130203020332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf148;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 465
  },
  {
    "role": "code",
    "lines": [
      "not | = (< 6 4) (= 5 5);"
    ],
    "preprocessed": "not | = (< 6 4) (= 5 5);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "<",
          "6",
          "4"
        ],
        [
          "=",
          "5",
          "5"
        ]
      ]
    ],
    "code": "12101302312113212103021103021003321211302101302101332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf146;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf209;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 466
  },
  {
    "role": "code",
    "lines": [
      "not | = (= 4 2) (> 1 0);"
    ],
    "preprocessed": "not | = (= 4 2) (> 1 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "=",
          "4",
          "2"
        ],
        [
          ">",
          "1",
          "0"
        ]
      ]
    ],
    "code": "1210130231211321211302100302103321210030213020332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf147;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 467
  },
  {
    "role": "code",
    "lines": [
      "not | = (> 5 6) (< 1 3);"
    ],
    "preprocessed": "not | = (> 5 6) (< 1 3);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          ">",
          "5",
          "6"
        ],
        [
          "<",
          "1",
          "3"
        ]
      ]
    ],
    "code": "121013023121132121003021013021103321210302130211332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf148;&#xf24a;&#xf209;&#xf24a;&#xf20a;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf205;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 468
  },
  {
    "role": "code",
    "lines": [
      "not | = (> 3 6) (> 5 4);"
    ],
    "preprocessed": "not | = (> 3 6) (> 5 4);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          ">",
          "3",
          "6"
        ],
        [
          ">",
          "5",
          "4"
        ]
      ]
    ],
    "code": "121013023121132121003021130211033212100302101302100332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf148;&#xf24a;&#xf207;&#xf24a;&#xf20a;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 469
  },
  {
    "role": "code",
    "lines": [
      "not | = (= 2 2) (> 0 3);"
    ],
    "preprocessed": "not | = (= 2 2) (> 0 3);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "=",
          "2",
          "2"
        ],
        [
          ">",
          "0",
          "3"
        ]
      ]
    ],
    "code": "1210130231211321211302103021033212100302030211332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf147;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf204;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 470
  },
  {
    "role": "code",
    "lines": [
      "not | = (> 5 2) (= 2 3);"
    ],
    "preprocessed": "not | = (> 5 2) (= 2 3);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          ">",
          "5",
          "2"
        ],
        [
          "=",
          "2",
          "3"
        ]
      ]
    ],
    "code": "121013023121132121003021013021033212113021030211332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf148;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 471
  },
  {
    "role": "code",
    "lines": [
      "not | = (> 4 1) (< 2 0);"
    ],
    "preprocessed": "not | = (> 4 1) (< 2 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          ">",
          "4",
          "1"
        ],
        [
          "<",
          "2",
          "0"
        ]
      ]
    ],
    "code": "1210130231211321210030210030213321210302103020332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf148;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf206;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 472
  },
  {
    "role": "code",
    "lines": [
      "not | = (= 2 2) (< 3 2);"
    ],
    "preprocessed": "not | = (= 2 2) (< 3 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "=",
          "2",
          "2"
        ],
        [
          "<",
          "3",
          "2"
        ]
      ]
    ],
    "code": "1210130231211321211302103021033212103021130210332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf147;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf207;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 473
  },
  {
    "role": "code",
    "lines": [
      "not | = (< 0 1) (> 3 4);"
    ],
    "preprocessed": "not | = (< 0 1) (> 3 4);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "<",
          "0",
          "1"
        ],
        [
          ">",
          "3",
          "4"
        ]
      ]
    ],
    "code": "1210130231211321210302030213321210030211302100332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf146;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 474
  },
  {
    "role": "file",
    "lines": [
      "== COS_If =="
    ],
    "stanza": 475
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Now that we spent some time looking at `true` and `false`, let's show",
      "a way to build conditional expressions.  We start with an `if` expression,",
      "of the form `if CONDITION E1 E2`, which evaluates to `E1` if the `CONDITION`",
      "is `true`, otherwise `E2`.",
      "",
      "If the listener is trying to map the language we are describing onto",
      "their own system of computation, it is pretty important that `if` be",
      "\"lazy,\" and completely skip evaluating the branch not taken.  That",
      "should become clear fairly soon if they were to try an \"eager\" `if`.",
      ""
    ],
    "section_description": "show conditionals",
    "section_category": "MATH",
    "section_index": 11,
    "stanza": 476
  },
  {
    "role": "code",
    "lines": [
      "intro if;"
    ],
    "preprocessed": "intro if;",
    "dt": false,
    "parse": [
      "intro",
      "if"
    ],
    "code": "1210010312111132233",
    "spider": "&#xf156;&#xf24a;&#xf153;&#xf24b;",
    "stanza": 477
  },
  {
    "role": "code",
    "lines": [
      "= 28 | if (< 3 0) 24 28;"
    ],
    "preprocessed": "= 28 | if (< 3 0) 24 28;",
    "dt": false,
    "parse": [
      "=",
      "28",
      [
        -1,
        "if",
        [
          "<",
          "3",
          "0"
        ],
        "24",
        "28"
      ]
    ],
    "code": "12113021110030231211113212103021130203302110003021110032233",
    "spider": "&#xf147;&#xf24a;&#xf220;&#xf248;&#xf153;&#xf246;&#xf146;&#xf24a;&#xf207;&#xf24a;&#xf204;&#xf245;&#xf21c;&#xf24a;&#xf220;&#xf24b;",
    "stanza": 478
  },
  {
    "role": "code",
    "lines": [
      "= 27 | if (> 2 4) 29 27;"
    ],
    "preprocessed": "= 27 | if (> 2 4) 29 27;",
    "dt": false,
    "parse": [
      "=",
      "27",
      [
        -1,
        "if",
        [
          ">",
          "2",
          "4"
        ],
        "29",
        "27"
      ]
    ],
    "code": "12113021101130231211113212100302103021003302111013021101132233",
    "spider": "&#xf147;&#xf24a;&#xf21f;&#xf248;&#xf153;&#xf246;&#xf148;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf245;&#xf221;&#xf24a;&#xf21f;&#xf24b;",
    "stanza": 479
  },
  {
    "role": "code",
    "lines": [
      "= 29 | if (= 3 1) 20 29;"
    ],
    "preprocessed": "= 29 | if (= 3 1) 20 29;",
    "dt": false,
    "parse": [
      "=",
      "29",
      [
        -1,
        "if",
        [
          "=",
          "3",
          "1"
        ],
        "20",
        "29"
      ]
    ],
    "code": "12113021110130231211113212113021130213302101003021110132233",
    "spider": "&#xf147;&#xf24a;&#xf221;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf205;&#xf245;&#xf218;&#xf24a;&#xf221;&#xf24b;",
    "stanza": 480
  },
  {
    "role": "code",
    "lines": [
      "= 21 | if (= 0 0) 21 26;"
    ],
    "preprocessed": "= 21 | if (= 0 0) 21 26;",
    "dt": false,
    "parse": [
      "=",
      "21",
      [
        -1,
        "if",
        [
          "=",
          "0",
          "0"
        ],
        "21",
        "26"
      ]
    ],
    "code": "1211302101013023121111321211302030203302101013021101032233",
    "spider": "&#xf147;&#xf24a;&#xf219;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf219;&#xf24a;&#xf21e;&#xf24b;",
    "stanza": 481
  },
  {
    "role": "code",
    "lines": [
      "= 29 | if (> 5 3) 29 23;"
    ],
    "preprocessed": "= 29 | if (> 5 3) 29 23;",
    "dt": false,
    "parse": [
      "=",
      "29",
      [
        -1,
        "if",
        [
          ">",
          "5",
          "3"
        ],
        "29",
        "23"
      ]
    ],
    "code": "12113021110130231211113212100302101302113302111013021011132233",
    "spider": "&#xf147;&#xf24a;&#xf221;&#xf248;&#xf153;&#xf246;&#xf148;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf245;&#xf221;&#xf24a;&#xf21b;&#xf24b;",
    "stanza": 482
  },
  {
    "role": "code",
    "lines": [
      "= 26 | if (> 1 0) 26 22;"
    ],
    "preprocessed": "= 26 | if (> 1 0) 26 22;",
    "dt": false,
    "parse": [
      "=",
      "26",
      [
        -1,
        "if",
        [
          ">",
          "1",
          "0"
        ],
        "26",
        "22"
      ]
    ],
    "code": "12113021101030231211113212100302130203302110103021011032233",
    "spider": "&#xf147;&#xf24a;&#xf21e;&#xf248;&#xf153;&#xf246;&#xf148;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf21e;&#xf24a;&#xf21a;&#xf24b;",
    "stanza": 483
  },
  {
    "role": "code",
    "lines": [
      "= 21 | if (= 3 3) 21 27;"
    ],
    "preprocessed": "= 21 | if (= 3 3) 21 27;",
    "dt": false,
    "parse": [
      "=",
      "21",
      [
        -1,
        "if",
        [
          "=",
          "3",
          "3"
        ],
        "21",
        "27"
      ]
    ],
    "code": "121130210101302312111132121130211302113302101013021101132233",
    "spider": "&#xf147;&#xf24a;&#xf219;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf245;&#xf219;&#xf24a;&#xf21f;&#xf24b;",
    "stanza": 484
  },
  {
    "role": "code",
    "lines": [
      "= 23 | if (> 4 4) 25 23;"
    ],
    "preprocessed": "= 23 | if (> 4 4) 25 23;",
    "dt": false,
    "parse": [
      "=",
      "23",
      [
        -1,
        "if",
        [
          ">",
          "4",
          "4"
        ],
        "25",
        "23"
      ]
    ],
    "code": "121130210111302312111132121003021003021003302110013021011132233",
    "spider": "&#xf147;&#xf24a;&#xf21b;&#xf248;&#xf153;&#xf246;&#xf148;&#xf24a;&#xf208;&#xf24a;&#xf208;&#xf245;&#xf21d;&#xf24a;&#xf21b;&#xf24b;",
    "stanza": 485
  },
  {
    "role": "doc",
    "lines": [
      "We can now define more interesting functions.  Here's the maximum of two integers:"
    ],
    "stanza": 486
  },
  {
    "role": "code",
    "lines": [
      "intro max;"
    ],
    "preprocessed": "intro max;",
    "dt": false,
    "parse": [
      "intro",
      "max"
    ],
    "code": "1210010312100100032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf14c;&#xf24b;",
    "stanza": 487
  },
  {
    "role": "code",
    "lines": [
      "define max | ? x | ? y | if (> $x $y) $x $y;"
    ],
    "preprocessed": "define max | ? x | ? y | if (> $x $y) $x $y;",
    "dt": true,
    "parse": [
      "define",
      "max",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              ">",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ],
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210010003023121100312101001302312110031210000013023121111321210031231210100131231210000013312312101001312312100000132233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf14c;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf153;&#xf246;&#xf148;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf24b;",
    "stanza": 488
  },
  {
    "role": "code",
    "lines": [
      "= 0 | max 0 0;"
    ],
    "preprocessed": "= 0 | max 0 0;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "max",
        "0",
        "0"
      ]
    ],
    "code": "1211302030231210010003020302032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf14c;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 489
  },
  {
    "role": "code",
    "lines": [
      "= 1 | max 0 1;"
    ],
    "preprocessed": "= 1 | max 0 1;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "max",
        "0",
        "1"
      ]
    ],
    "code": "1211302130231210010003020302132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf145;&#xf14c;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 490
  },
  {
    "role": "code",
    "lines": [
      "= 2 | max 0 2;"
    ],
    "preprocessed": "= 2 | max 0 2;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "max",
        "0",
        "2"
      ]
    ],
    "code": "121130210302312100100030203021032233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf145;&#xf14c;&#xf24a;&#xf204;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 491
  },
  {
    "role": "code",
    "lines": [
      "= 1 | max 1 0;"
    ],
    "preprocessed": "= 1 | max 1 0;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "max",
        "1",
        "0"
      ]
    ],
    "code": "1211302130231210010003021302032233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf145;&#xf14c;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 492
  },
  {
    "role": "code",
    "lines": [
      "= 1 | max 1 1;"
    ],
    "preprocessed": "= 1 | max 1 1;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "max",
        "1",
        "1"
      ]
    ],
    "code": "1211302130231210010003021302132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf145;&#xf14c;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 493
  },
  {
    "role": "code",
    "lines": [
      "= 2 | max 1 2;"
    ],
    "preprocessed": "= 2 | max 1 2;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "max",
        "1",
        "2"
      ]
    ],
    "code": "121130210302312100100030213021032233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf145;&#xf14c;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 494
  },
  {
    "role": "code",
    "lines": [
      "= 2 | max 2 0;"
    ],
    "preprocessed": "= 2 | max 2 0;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "max",
        "2",
        "0"
      ]
    ],
    "code": "121130210302312100100030210302032233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf145;&#xf14c;&#xf24a;&#xf206;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 495
  },
  {
    "role": "code",
    "lines": [
      "= 2 | max 2 1;"
    ],
    "preprocessed": "= 2 | max 2 1;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "max",
        "2",
        "1"
      ]
    ],
    "code": "121130210302312100100030210302132233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf145;&#xf14c;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 496
  },
  {
    "role": "code",
    "lines": [
      "= 2 | max 2 2;"
    ],
    "preprocessed": "= 2 | max 2 2;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "max",
        "2",
        "2"
      ]
    ],
    "code": "1211302103023121001000302103021032233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf145;&#xf14c;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 497
  },
  {
    "role": "doc",
    "lines": [
      "Now the minimum of two integers:"
    ],
    "stanza": 498
  },
  {
    "role": "code",
    "lines": [
      "intro min;"
    ],
    "preprocessed": "intro min;",
    "dt": false,
    "parse": [
      "intro",
      "min"
    ],
    "code": "1210010312100100132233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf14d;&#xf24b;",
    "stanza": 499
  },
  {
    "role": "code",
    "lines": [
      "define min | ? x | ? y | if (< $x $y) $x $y;"
    ],
    "preprocessed": "define min | ? x | ? y | if (< $x $y) $x $y;",
    "dt": true,
    "parse": [
      "define",
      "min",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              "<",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ],
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121001001302312110031210100130231211003121000001302312111132121031231210100131231210000013312312101001312312100000132233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf14d;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf153;&#xf246;&#xf146;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf24b;",
    "stanza": 500
  },
  {
    "role": "code",
    "lines": [
      "= 0 | min 0 0;"
    ],
    "preprocessed": "= 0 | min 0 0;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "min",
        "0",
        "0"
      ]
    ],
    "code": "1211302030231210010013020302032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf14d;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 501
  },
  {
    "role": "code",
    "lines": [
      "= 0 | min 0 1;"
    ],
    "preprocessed": "= 0 | min 0 1;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "min",
        "0",
        "1"
      ]
    ],
    "code": "1211302030231210010013020302132233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf14d;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 502
  },
  {
    "role": "code",
    "lines": [
      "= 0 | min 0 2;"
    ],
    "preprocessed": "= 0 | min 0 2;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "min",
        "0",
        "2"
      ]
    ],
    "code": "12113020302312100100130203021032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf14d;&#xf24a;&#xf204;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 503
  },
  {
    "role": "code",
    "lines": [
      "= 0 | min 1 0;"
    ],
    "preprocessed": "= 0 | min 1 0;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "min",
        "1",
        "0"
      ]
    ],
    "code": "1211302030231210010013021302032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf14d;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 504
  },
  {
    "role": "code",
    "lines": [
      "= 1 | min 1 1;"
    ],
    "preprocessed": "= 1 | min 1 1;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "min",
        "1",
        "1"
      ]
    ],
    "code": "1211302130231210010013021302132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf145;&#xf14d;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 505
  },
  {
    "role": "code",
    "lines": [
      "= 1 | min 1 2;"
    ],
    "preprocessed": "= 1 | min 1 2;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "min",
        "1",
        "2"
      ]
    ],
    "code": "12113021302312100100130213021032233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf145;&#xf14d;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 506
  },
  {
    "role": "code",
    "lines": [
      "= 0 | min 2 0;"
    ],
    "preprocessed": "= 0 | min 2 0;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "min",
        "2",
        "0"
      ]
    ],
    "code": "12113020302312100100130210302032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf14d;&#xf24a;&#xf206;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 507
  },
  {
    "role": "code",
    "lines": [
      "= 1 | min 2 1;"
    ],
    "preprocessed": "= 1 | min 2 1;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "min",
        "2",
        "1"
      ]
    ],
    "code": "12113021302312100100130210302132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf145;&#xf14d;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 508
  },
  {
    "role": "code",
    "lines": [
      "= 2 | min 2 2;"
    ],
    "preprocessed": "= 2 | min 2 2;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "min",
        "2",
        "2"
      ]
    ],
    "code": "1211302103023121001001302103021032233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf145;&#xf14d;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 509
  },
  {
    "role": "doc",
    "lines": [
      "Why should human CS students be the only ones the factorial example is inflicted on..."
    ],
    "stanza": 510
  },
  {
    "role": "code",
    "lines": [
      "intro factorial;"
    ],
    "preprocessed": "intro factorial;",
    "dt": false,
    "parse": [
      "intro",
      "factorial"
    ],
    "code": "1210010312100101032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf14e;&#xf24b;",
    "stanza": 511
  },
  {
    "role": "code",
    "lines": [
      "define factorial | ? x | if (< $x 1) 1 | * $x | factorial | - $x 1;"
    ],
    "preprocessed": "define factorial | ? x | if (< $x 1) 1 | * $x | factorial | - $x 1;",
    "dt": true,
    "parse": [
      "define",
      "factorial",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "<",
            [
              -2,
              "x"
            ],
            "1"
          ],
          "1",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            [
              -1,
              "factorial",
              [
                -1,
                "-",
                [
                  -2,
                  "x"
                ],
                "1"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312100101030231211003121010013023121111321210312312101001302133021302312100131231210100130231210010103023121011312312101001302132233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf14e;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf146;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf205;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf248;&#xf145;&#xf14e;&#xf248;&#xf14f;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 512
  },
  {
    "role": "code",
    "lines": [
      "= 1 | factorial 1;"
    ],
    "preprocessed": "= 1 | factorial 1;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "factorial",
        "1"
      ]
    ],
    "code": "121130213023121001010302132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf145;&#xf14e;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 513
  },
  {
    "role": "code",
    "lines": [
      "= 2 | factorial 2;"
    ],
    "preprocessed": "= 2 | factorial 2;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "factorial",
        "2"
      ]
    ],
    "code": "12113021030231210010103021032233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf145;&#xf14e;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 514
  },
  {
    "role": "code",
    "lines": [
      "= 6 | factorial 3;"
    ],
    "preprocessed": "= 6 | factorial 3;",
    "dt": false,
    "parse": [
      "=",
      "6",
      [
        -1,
        "factorial",
        "3"
      ]
    ],
    "code": "121130211030231210010103021132233",
    "spider": "&#xf147;&#xf24a;&#xf20a;&#xf248;&#xf145;&#xf14e;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 515
  },
  {
    "role": "code",
    "lines": [
      "= 24 | factorial 4;"
    ],
    "preprocessed": "= 24 | factorial 4;",
    "dt": false,
    "parse": [
      "=",
      "24",
      [
        -1,
        "factorial",
        "4"
      ]
    ],
    "code": "121130211000302312100101030210032233",
    "spider": "&#xf147;&#xf24a;&#xf21c;&#xf248;&#xf145;&#xf14e;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 516
  },
  {
    "role": "code",
    "lines": [
      "= 120 | factorial 5;"
    ],
    "preprocessed": "= 120 | factorial 5;",
    "dt": false,
    "parse": [
      "=",
      "120",
      [
        -1,
        "factorial",
        "5"
      ]
    ],
    "code": "12113021111000302312100101030210132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf23c;&#xf248;&#xf145;&#xf14e;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 517
  },
  {
    "role": "file",
    "lines": [
      "== COS_AndLogic =="
    ],
    "stanza": 518
  },
  {
    "role": "doc",
    "lines": [
      "",
      "We continue introducing symbols related to math and logic.  Now we will often",
      "be able to both define them and give examples, so the listener has multiple",
      "paths to understanding.",
      "",
      "Here is `and`, which evaluates to `true` if both its two arguments are `true`,",
      "and `false` otherwise.  We don't talk about wbat happens if you pass it integers",
      "or something funky.  There'd be value in getting into talking about types, but",
      "it might be a bit much just now.",
      ""
    ],
    "section_description": "introduce the AND logical operator",
    "section_category": "MATH",
    "section_index": 12,
    "stanza": 519
  },
  {
    "role": "code",
    "lines": [
      "intro and;"
    ],
    "preprocessed": "intro and;",
    "dt": false,
    "parse": [
      "intro",
      "and"
    ],
    "code": "121001031211032233",
    "spider": "&#xf156;&#xf24a;&#xf14a;&#xf24b;",
    "stanza": 520
  },
  {
    "role": "code",
    "lines": [
      "define and | ? x | ? y | if $x $y $false;"
    ],
    "preprocessed": "define and | ? x | ? y | if $x $y $false;",
    "dt": true,
    "parse": [
      "define",
      "and",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ],
            [
              -2,
              "false"
            ]
          ]
        ]
      ]
    ],
    "code": "12110131211030231211003121010013023121100312100000130231211113123121010013123121000001312312032233",
    "spider": "&#xf151;&#xf24a;&#xf14a;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf153;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf249;&#xf144;&#xf24b;",
    "stanza": 521
  },
  {
    "role": "code",
    "lines": [
      "not | and $false $false;"
    ],
    "preprocessed": "not | and $false $false;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          -2,
          "false"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "code": "121013023121103123120312312032233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf249;&#xf144;&#xf249;&#xf144;&#xf24b;",
    "stanza": 522
  },
  {
    "role": "code",
    "lines": [
      "not | and $false $true;"
    ],
    "preprocessed": "not | and $false $true;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          -2,
          "false"
        ],
        [
          -2,
          "true"
        ]
      ]
    ],
    "code": "121013023121103123120312312132233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf249;&#xf144;&#xf249;&#xf145;&#xf24b;",
    "stanza": 523
  },
  {
    "role": "code",
    "lines": [
      "not | and $true $false;"
    ],
    "preprocessed": "not | and $true $false;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          -2,
          "true"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "code": "121013023121103123121312312032233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf249;&#xf145;&#xf249;&#xf144;&#xf24b;",
    "stanza": 524
  },
  {
    "role": "code",
    "lines": [
      "and $true $true;"
    ],
    "preprocessed": "and $true $true;",
    "dt": false,
    "parse": [
      "and",
      [
        -2,
        "true"
      ],
      [
        -2,
        "true"
      ]
    ],
    "code": "121103123121312312132233",
    "spider": "&#xf14a;&#xf249;&#xf145;&#xf249;&#xf145;&#xf24b;",
    "stanza": 525
  },
  {
    "role": "code",
    "lines": [
      "= $false | and $false $false;"
    ],
    "preprocessed": "= $false | and $false $false;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -1,
        "and",
        [
          -2,
          "false"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "code": "121131231203023121103123120312312032233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf248;&#xf14a;&#xf249;&#xf144;&#xf249;&#xf144;&#xf24b;",
    "stanza": 526
  },
  {
    "role": "code",
    "lines": [
      "= $false | and $false $true;"
    ],
    "preprocessed": "= $false | and $false $true;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -1,
        "and",
        [
          -2,
          "false"
        ],
        [
          -2,
          "true"
        ]
      ]
    ],
    "code": "121131231203023121103123120312312132233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf248;&#xf14a;&#xf249;&#xf144;&#xf249;&#xf145;&#xf24b;",
    "stanza": 527
  },
  {
    "role": "code",
    "lines": [
      "= $false | and $true $false;"
    ],
    "preprocessed": "= $false | and $true $false;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -1,
        "and",
        [
          -2,
          "true"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "code": "121131231203023121103123121312312032233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf248;&#xf14a;&#xf249;&#xf145;&#xf249;&#xf144;&#xf24b;",
    "stanza": 528
  },
  {
    "role": "code",
    "lines": [
      "= $true | and $true $true;"
    ],
    "preprocessed": "= $true | and $true $true;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        -1,
        "and",
        [
          -2,
          "true"
        ],
        [
          -2,
          "true"
        ]
      ]
    ],
    "code": "121131231213023121103123121312312132233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf248;&#xf14a;&#xf249;&#xf145;&#xf249;&#xf145;&#xf24b;",
    "stanza": 529
  },
  {
    "role": "code",
    "lines": [
      "and (= 2 2) (> 4 2);"
    ],
    "preprocessed": "and (= 2 2) (> 4 2);",
    "dt": false,
    "parse": [
      "and",
      [
        "=",
        "2",
        "2"
      ],
      [
        ">",
        "4",
        "2"
      ]
    ],
    "code": "1211032121130210302103321210030210030210332233",
    "spider": "&#xf14a;&#xf246;&#xf147;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 530
  },
  {
    "role": "code",
    "lines": [
      "and (= 1 1) (> 6 4);"
    ],
    "preprocessed": "and (= 1 1) (> 6 4);",
    "dt": false,
    "parse": [
      "and",
      [
        "=",
        "1",
        "1"
      ],
      [
        ">",
        "6",
        "4"
      ]
    ],
    "code": "121103212113021302133212100302110302100332233",
    "spider": "&#xf14a;&#xf246;&#xf147;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 531
  },
  {
    "role": "code",
    "lines": [
      "and (< 3 4) (= 5 5);"
    ],
    "preprocessed": "and (< 3 4) (= 5 5);",
    "dt": false,
    "parse": [
      "and",
      [
        "<",
        "3",
        "4"
      ],
      [
        "=",
        "5",
        "5"
      ]
    ],
    "code": "12110321210302113021003321211302101302101332233",
    "spider": "&#xf14a;&#xf246;&#xf146;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf209;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 532
  },
  {
    "role": "code",
    "lines": [
      "and (= 3 3) (= 4 4);"
    ],
    "preprocessed": "and (= 3 3) (= 4 4);",
    "dt": false,
    "parse": [
      "and",
      [
        "=",
        "3",
        "3"
      ],
      [
        "=",
        "4",
        "4"
      ]
    ],
    "code": "1211032121130211302113321211302100302100332233",
    "spider": "&#xf14a;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf208;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 533
  },
  {
    "role": "code",
    "lines": [
      "and (= 3 3) (= 0 0);"
    ],
    "preprocessed": "and (= 3 3) (= 0 0);",
    "dt": false,
    "parse": [
      "and",
      [
        "=",
        "3",
        "3"
      ],
      [
        "=",
        "0",
        "0"
      ]
    ],
    "code": "121103212113021130211332121130203020332233",
    "spider": "&#xf14a;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 534
  },
  {
    "role": "code",
    "lines": [
      "and (< 5 7) (> 5 3);"
    ],
    "preprocessed": "and (< 5 7) (> 5 3);",
    "dt": false,
    "parse": [
      "and",
      [
        "<",
        "5",
        "7"
      ],
      [
        ">",
        "5",
        "3"
      ]
    ],
    "code": "121103212103021013021113321210030210130211332233",
    "spider": "&#xf14a;&#xf246;&#xf146;&#xf24a;&#xf209;&#xf24a;&#xf20b;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 535
  },
  {
    "role": "code",
    "lines": [
      "and (> 5 4) (> 1 0);"
    ],
    "preprocessed": "and (> 5 4) (> 1 0);",
    "dt": false,
    "parse": [
      "and",
      [
        ">",
        "5",
        "4"
      ],
      [
        ">",
        "1",
        "0"
      ]
    ],
    "code": "1211032121003021013021003321210030213020332233",
    "spider": "&#xf14a;&#xf246;&#xf148;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 536
  },
  {
    "role": "code",
    "lines": [
      "and (> 3 0) (= 3 3);"
    ],
    "preprocessed": "and (> 3 0) (= 3 3);",
    "dt": false,
    "parse": [
      "and",
      [
        ">",
        "3",
        "0"
      ],
      [
        "=",
        "3",
        "3"
      ]
    ],
    "code": "12110321210030211302033212113021130211332233",
    "spider": "&#xf14a;&#xf246;&#xf148;&#xf24a;&#xf207;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 537
  },
  {
    "role": "code",
    "lines": [
      "and (< 3 4) (< 3 6);"
    ],
    "preprocessed": "and (< 3 4) (< 3 6);",
    "dt": false,
    "parse": [
      "and",
      [
        "<",
        "3",
        "4"
      ],
      [
        "<",
        "3",
        "6"
      ]
    ],
    "code": "1211032121030211302100332121030211302110332233",
    "spider": "&#xf14a;&#xf246;&#xf146;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf207;&#xf24a;&#xf20a;&#xf245;&#xf24b;",
    "stanza": 538
  },
  {
    "role": "code",
    "lines": [
      "and (> 5 4) (> 5 4);"
    ],
    "preprocessed": "and (> 5 4) (> 5 4);",
    "dt": false,
    "parse": [
      "and",
      [
        ">",
        "5",
        "4"
      ],
      [
        ">",
        "5",
        "4"
      ]
    ],
    "code": "12110321210030210130210033212100302101302100332233",
    "spider": "&#xf14a;&#xf246;&#xf148;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 539
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 6 4) (< 3 1);"
    ],
    "preprocessed": "not | and (> 6 4) (< 3 1);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          "6",
          "4"
        ],
        [
          "<",
          "3",
          "1"
        ]
      ]
    ],
    "code": "1210130231211032121003021103021003321210302113021332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf148;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf207;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 540
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 3 1) (> 3 3);"
    ],
    "preprocessed": "not | and (> 3 1) (> 3 3);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          "3",
          "1"
        ],
        [
          ">",
          "3",
          "3"
        ]
      ]
    ],
    "code": "121013023121103212100302113021332121003021130211332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf148;&#xf24a;&#xf207;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 541
  },
  {
    "role": "code",
    "lines": [
      "not | and (= 0 0) (= 5 4);"
    ],
    "preprocessed": "not | and (= 0 0) (= 5 4);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "=",
          "0",
          "0"
        ],
        [
          "=",
          "5",
          "4"
        ]
      ]
    ],
    "code": "12101302312110321211302030203321211302101302100332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 542
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 2 4) (> 4 6);"
    ],
    "preprocessed": "not | and (< 2 4) (> 4 6);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "2",
          "4"
        ],
        [
          ">",
          "4",
          "6"
        ]
      ]
    ],
    "code": "121013023121103212103021030210033212100302100302110332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf146;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf245;&#xf24b;",
    "stanza": 543
  },
  {
    "role": "code",
    "lines": [
      "not | and (= 3 3) (= 3 1);"
    ],
    "preprocessed": "not | and (= 3 3) (= 3 1);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "=",
          "3",
          "3"
        ],
        [
          "=",
          "3",
          "1"
        ]
      ]
    ],
    "code": "1210130231211032121130211302113321211302113021332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 544
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 1 5) (< 3 6);"
    ],
    "preprocessed": "not | and (> 1 5) (< 3 6);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          "1",
          "5"
        ],
        [
          "<",
          "3",
          "6"
        ]
      ]
    ],
    "code": "1210130231211032121003021302101332121030211302110332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf148;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf207;&#xf24a;&#xf20a;&#xf245;&#xf24b;",
    "stanza": 545
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 6 2) (= 2 2);"
    ],
    "preprocessed": "not | and (< 6 2) (= 2 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "6",
          "2"
        ],
        [
          "=",
          "2",
          "2"
        ]
      ]
    ],
    "code": "121013023121103212103021103021033212113021030210332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf146;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 546
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 2 5) (= 5 5);"
    ],
    "preprocessed": "not | and (> 2 5) (= 5 5);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          "2",
          "5"
        ],
        [
          "=",
          "5",
          "5"
        ]
      ]
    ],
    "code": "121013023121103212100302103021013321211302101302101332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf148;&#xf24a;&#xf206;&#xf24a;&#xf209;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf209;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 547
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 6 2) (= 3 3);"
    ],
    "preprocessed": "not | and (< 6 2) (= 3 3);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "6",
          "2"
        ],
        [
          "=",
          "3",
          "3"
        ]
      ]
    ],
    "code": "121013023121103212103021103021033212113021130211332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf146;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 548
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 4 3) (> 5 2);"
    ],
    "preprocessed": "not | and (< 4 3) (> 5 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "4",
          "3"
        ],
        [
          ">",
          "5",
          "2"
        ]
      ]
    ],
    "code": "12101302312110321210302100302113321210030210130210332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf146;&#xf24a;&#xf208;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 549
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 5 4) (= 1 2);"
    ],
    "preprocessed": "not | and (< 5 4) (= 1 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "5",
          "4"
        ],
        [
          "=",
          "1",
          "2"
        ]
      ]
    ],
    "code": "121013023121103212103021013021003321211302130210332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf146;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 550
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 6 4) (= 5 1);"
    ],
    "preprocessed": "not | and (< 6 4) (= 5 1);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "6",
          "4"
        ],
        [
          "=",
          "5",
          "1"
        ]
      ]
    ],
    "code": "1210130231211032121030211030210033212113021013021332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf146;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf209;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 551
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 2 6) (= 1 5);"
    ],
    "preprocessed": "not | and (> 2 6) (= 1 5);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          "2",
          "6"
        ],
        [
          "=",
          "1",
          "5"
        ]
      ]
    ],
    "code": "1210130231211032121003021030211033212113021302101332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf148;&#xf24a;&#xf206;&#xf24a;&#xf20a;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 552
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 6 3) (= 2 3);"
    ],
    "preprocessed": "not | and (< 6 3) (= 2 3);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "6",
          "3"
        ],
        [
          "=",
          "2",
          "3"
        ]
      ]
    ],
    "code": "121013023121103212103021103021133212113021030211332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf146;&#xf24a;&#xf20a;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 553
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 6 4) (> 0 1);"
    ],
    "preprocessed": "not | and (< 6 4) (> 0 1);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "6",
          "4"
        ],
        [
          ">",
          "0",
          "1"
        ]
      ]
    ],
    "code": "121013023121103212103021103021003321210030203021332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf146;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 554
  },
  {
    "role": "code",
    "lines": [
      "not | and (= 3 5) (< 4 1);"
    ],
    "preprocessed": "not | and (= 3 5) (< 4 1);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "=",
          "3",
          "5"
        ],
        [
          "<",
          "4",
          "1"
        ]
      ]
    ],
    "code": "121013023121103212113021130210133212103021003021332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf209;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 555
  },
  {
    "role": "code",
    "lines": [
      "not | and (= 4 1) (< 4 2);"
    ],
    "preprocessed": "not | and (= 4 1) (< 4 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "=",
          "4",
          "1"
        ],
        [
          "<",
          "4",
          "2"
        ]
      ]
    ],
    "code": "121013023121103212113021003021332121030210030210332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf147;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 556
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 6 3) (= 3 0);"
    ],
    "preprocessed": "not | and (< 6 3) (= 3 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "6",
          "3"
        ],
        [
          "=",
          "3",
          "0"
        ]
      ]
    ],
    "code": "12101302312110321210302110302113321211302113020332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf146;&#xf24a;&#xf20a;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 557
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 4 2) (< 4 6);"
    ],
    "preprocessed": "not | and (< 4 2) (< 4 6);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "4",
          "2"
        ],
        [
          "<",
          "4",
          "6"
        ]
      ]
    ],
    "code": "12101302312110321210302100302103321210302100302110332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf146;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf245;&#xf24b;",
    "stanza": 558
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 4 1) (< 5 2);"
    ],
    "preprocessed": "not | and (> 4 1) (< 5 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          "4",
          "1"
        ],
        [
          "<",
          "5",
          "2"
        ]
      ]
    ],
    "code": "1210130231211032121003021003021332121030210130210332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf148;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 559
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 0 1) (> 7 5);"
    ],
    "preprocessed": "not | and (> 0 1) (> 7 5);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          "0",
          "1"
        ],
        [
          ">",
          "7",
          "5"
        ]
      ]
    ],
    "code": "1210130231211032121003020302133212100302111302101332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf148;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf20b;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 560
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 3 4) (> 3 6);"
    ],
    "preprocessed": "not | and (< 3 4) (> 3 6);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "3",
          "4"
        ],
        [
          ">",
          "3",
          "6"
        ]
      ]
    ],
    "code": "12101302312110321210302113021003321210030211302110332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf146;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf207;&#xf24a;&#xf20a;&#xf245;&#xf24b;",
    "stanza": 561
  },
  {
    "role": "code",
    "lines": [
      "not | and (> 1 2) (> 6 4);"
    ],
    "preprocessed": "not | and (> 1 2) (> 6 4);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          ">",
          "1",
          "2"
        ],
        [
          ">",
          "6",
          "4"
        ]
      ]
    ],
    "code": "12101302312110321210030213021033212100302110302100332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf148;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 562
  },
  {
    "role": "code",
    "lines": [
      "not | and (< 0 1) (= 4 5);"
    ],
    "preprocessed": "not | and (< 0 1) (= 4 5);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "and",
        [
          "<",
          "0",
          "1"
        ],
        [
          "=",
          "4",
          "5"
        ]
      ]
    ],
    "code": "12101302312110321210302030213321211302100302101332233",
    "spider": "&#xf149;&#xf248;&#xf14a;&#xf246;&#xf146;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf208;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 563
  },
  {
    "role": "code",
    "lines": [
      "and (< 4 6) (< 5 7);"
    ],
    "preprocessed": "and (< 4 6) (< 5 7);",
    "dt": false,
    "parse": [
      "and",
      [
        "<",
        "4",
        "6"
      ],
      [
        "<",
        "5",
        "7"
      ]
    ],
    "code": "121103212103021003021103321210302101302111332233",
    "spider": "&#xf14a;&#xf246;&#xf146;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf209;&#xf24a;&#xf20b;&#xf245;&#xf24b;",
    "stanza": 564
  },
  {
    "role": "file",
    "lines": [
      "== COS_OrLogic =="
    ],
    "stanza": 565
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Here is `or`, which evaluates to `true` if either of its arguments are `true`,",
      "and `false` otherwise.  Again, we just don't talk about what happens if you",
      "pass in any unexpected values, like integers or functions.  The message is",
      "constructed so that the problem never comes up.",
      ""
    ],
    "section_description": "introduce the OR logical operator",
    "section_category": "MATH",
    "section_index": 13,
    "stanza": 566
  },
  {
    "role": "code",
    "lines": [
      "intro or;"
    ],
    "preprocessed": "intro or;",
    "dt": false,
    "parse": [
      "intro",
      "or"
    ],
    "code": "121001031211132233",
    "spider": "&#xf156;&#xf24a;&#xf14b;&#xf24b;",
    "stanza": 567
  },
  {
    "role": "code",
    "lines": [
      "define or | ? x | ? y | if $x $true $y"
    ],
    "preprocessed": "define or | ? x | ? y | if $x $true $y",
    "dt": true,
    "parse": [
      "define",
      "or",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              -2,
              "x"
            ],
            [
              -2,
              "true"
            ],
            [
              -2,
              "y"
            ]
          ]
        ]
      ]
    ],
    "code": "12110131211130231211003121010013023121100312100000130231211113123121010013123121312312100000132233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf153;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf249;&#xf145;&#xf145;&#xf24b;",
    "stanza": 568
  },
  {
    "role": "code",
    "lines": [
      "not | or $false $false;"
    ],
    "preprocessed": "not | or $false $false;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          -2,
          "false"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "code": "121013023121113123120312312032233",
    "spider": "&#xf149;&#xf248;&#xf14b;&#xf249;&#xf144;&#xf249;&#xf144;&#xf24b;",
    "stanza": 569
  },
  {
    "role": "code",
    "lines": [
      "or $false $true;"
    ],
    "preprocessed": "or $false $true;",
    "dt": false,
    "parse": [
      "or",
      [
        -2,
        "false"
      ],
      [
        -2,
        "true"
      ]
    ],
    "code": "121113123120312312132233",
    "spider": "&#xf14b;&#xf249;&#xf144;&#xf249;&#xf145;&#xf24b;",
    "stanza": 570
  },
  {
    "role": "code",
    "lines": [
      "or $true $false;"
    ],
    "preprocessed": "or $true $false;",
    "dt": false,
    "parse": [
      "or",
      [
        -2,
        "true"
      ],
      [
        -2,
        "false"
      ]
    ],
    "code": "121113123121312312032233",
    "spider": "&#xf14b;&#xf249;&#xf145;&#xf249;&#xf144;&#xf24b;",
    "stanza": 571
  },
  {
    "role": "code",
    "lines": [
      "or $true $true;"
    ],
    "preprocessed": "or $true $true;",
    "dt": false,
    "parse": [
      "or",
      [
        -2,
        "true"
      ],
      [
        -2,
        "true"
      ]
    ],
    "code": "121113123121312312132233",
    "spider": "&#xf14b;&#xf249;&#xf145;&#xf249;&#xf145;&#xf24b;",
    "stanza": 572
  },
  {
    "role": "code",
    "lines": [
      "= $false | or $false $false;"
    ],
    "preprocessed": "= $false | or $false $false;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -1,
        "or",
        [
          -2,
          "false"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "code": "121131231203023121113123120312312032233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf248;&#xf14b;&#xf249;&#xf144;&#xf249;&#xf144;&#xf24b;",
    "stanza": 573
  },
  {
    "role": "code",
    "lines": [
      "= $true | or $false $true;"
    ],
    "preprocessed": "= $true | or $false $true;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        -1,
        "or",
        [
          -2,
          "false"
        ],
        [
          -2,
          "true"
        ]
      ]
    ],
    "code": "121131231213023121113123120312312132233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf248;&#xf14b;&#xf249;&#xf144;&#xf249;&#xf145;&#xf24b;",
    "stanza": 574
  },
  {
    "role": "code",
    "lines": [
      "= $true | or $true $false;"
    ],
    "preprocessed": "= $true | or $true $false;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        -1,
        "or",
        [
          -2,
          "true"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "code": "121131231213023121113123121312312032233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf248;&#xf14b;&#xf249;&#xf145;&#xf249;&#xf144;&#xf24b;",
    "stanza": 575
  },
  {
    "role": "code",
    "lines": [
      "= $true | or $true $true;"
    ],
    "preprocessed": "= $true | or $true $true;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        -1,
        "or",
        [
          -2,
          "true"
        ],
        [
          -2,
          "true"
        ]
      ]
    ],
    "code": "121131231213023121113123121312312132233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf248;&#xf14b;&#xf249;&#xf145;&#xf249;&#xf145;&#xf24b;",
    "stanza": 576
  },
  {
    "role": "code",
    "lines": [
      "or (= 2 2) (> 4 2);"
    ],
    "preprocessed": "or (= 2 2) (> 4 2);",
    "dt": false,
    "parse": [
      "or",
      [
        "=",
        "2",
        "2"
      ],
      [
        ">",
        "4",
        "2"
      ]
    ],
    "code": "1211132121130210302103321210030210030210332233",
    "spider": "&#xf14b;&#xf246;&#xf147;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 577
  },
  {
    "role": "code",
    "lines": [
      "or (= 1 1) (> 6 4);"
    ],
    "preprocessed": "or (= 1 1) (> 6 4);",
    "dt": false,
    "parse": [
      "or",
      [
        "=",
        "1",
        "1"
      ],
      [
        ">",
        "6",
        "4"
      ]
    ],
    "code": "121113212113021302133212100302110302100332233",
    "spider": "&#xf14b;&#xf246;&#xf147;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 578
  },
  {
    "role": "code",
    "lines": [
      "or (< 3 4) (= 5 5);"
    ],
    "preprocessed": "or (< 3 4) (= 5 5);",
    "dt": false,
    "parse": [
      "or",
      [
        "<",
        "3",
        "4"
      ],
      [
        "=",
        "5",
        "5"
      ]
    ],
    "code": "12111321210302113021003321211302101302101332233",
    "spider": "&#xf14b;&#xf246;&#xf146;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf209;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 579
  },
  {
    "role": "code",
    "lines": [
      "or (= 3 3) (= 4 4);"
    ],
    "preprocessed": "or (= 3 3) (= 4 4);",
    "dt": false,
    "parse": [
      "or",
      [
        "=",
        "3",
        "3"
      ],
      [
        "=",
        "4",
        "4"
      ]
    ],
    "code": "1211132121130211302113321211302100302100332233",
    "spider": "&#xf14b;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf208;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 580
  },
  {
    "role": "code",
    "lines": [
      "or (= 3 3) (= 0 0);"
    ],
    "preprocessed": "or (= 3 3) (= 0 0);",
    "dt": false,
    "parse": [
      "or",
      [
        "=",
        "3",
        "3"
      ],
      [
        "=",
        "0",
        "0"
      ]
    ],
    "code": "121113212113021130211332121130203020332233",
    "spider": "&#xf14b;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 581
  },
  {
    "role": "code",
    "lines": [
      "or (< 5 7) (> 5 3);"
    ],
    "preprocessed": "or (< 5 7) (> 5 3);",
    "dt": false,
    "parse": [
      "or",
      [
        "<",
        "5",
        "7"
      ],
      [
        ">",
        "5",
        "3"
      ]
    ],
    "code": "121113212103021013021113321210030210130211332233",
    "spider": "&#xf14b;&#xf246;&#xf146;&#xf24a;&#xf209;&#xf24a;&#xf20b;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 582
  },
  {
    "role": "code",
    "lines": [
      "or (> 5 4) (> 1 0);"
    ],
    "preprocessed": "or (> 5 4) (> 1 0);",
    "dt": false,
    "parse": [
      "or",
      [
        ">",
        "5",
        "4"
      ],
      [
        ">",
        "1",
        "0"
      ]
    ],
    "code": "1211132121003021013021003321210030213020332233",
    "spider": "&#xf14b;&#xf246;&#xf148;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 583
  },
  {
    "role": "code",
    "lines": [
      "or (> 3 0) (= 3 3);"
    ],
    "preprocessed": "or (> 3 0) (= 3 3);",
    "dt": false,
    "parse": [
      "or",
      [
        ">",
        "3",
        "0"
      ],
      [
        "=",
        "3",
        "3"
      ]
    ],
    "code": "12111321210030211302033212113021130211332233",
    "spider": "&#xf14b;&#xf246;&#xf148;&#xf24a;&#xf207;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 584
  },
  {
    "role": "code",
    "lines": [
      "or (< 3 4) (< 3 6);"
    ],
    "preprocessed": "or (< 3 4) (< 3 6);",
    "dt": false,
    "parse": [
      "or",
      [
        "<",
        "3",
        "4"
      ],
      [
        "<",
        "3",
        "6"
      ]
    ],
    "code": "1211132121030211302100332121030211302110332233",
    "spider": "&#xf14b;&#xf246;&#xf146;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf207;&#xf24a;&#xf20a;&#xf245;&#xf24b;",
    "stanza": 585
  },
  {
    "role": "code",
    "lines": [
      "or (> 5 4) (> 5 4);"
    ],
    "preprocessed": "or (> 5 4) (> 5 4);",
    "dt": false,
    "parse": [
      "or",
      [
        ">",
        "5",
        "4"
      ],
      [
        ">",
        "5",
        "4"
      ]
    ],
    "code": "12111321210030210130210033212100302101302100332233",
    "spider": "&#xf14b;&#xf246;&#xf148;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 586
  },
  {
    "role": "code",
    "lines": [
      "or (> 6 4) (< 3 1);"
    ],
    "preprocessed": "or (> 6 4) (< 3 1);",
    "dt": false,
    "parse": [
      "or",
      [
        ">",
        "6",
        "4"
      ],
      [
        "<",
        "3",
        "1"
      ]
    ],
    "code": "1211132121003021103021003321210302113021332233",
    "spider": "&#xf14b;&#xf246;&#xf148;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf207;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 587
  },
  {
    "role": "code",
    "lines": [
      "or (> 3 1) (> 3 3);"
    ],
    "preprocessed": "or (> 3 1) (> 3 3);",
    "dt": false,
    "parse": [
      "or",
      [
        ">",
        "3",
        "1"
      ],
      [
        ">",
        "3",
        "3"
      ]
    ],
    "code": "121113212100302113021332121003021130211332233",
    "spider": "&#xf14b;&#xf246;&#xf148;&#xf24a;&#xf207;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 588
  },
  {
    "role": "code",
    "lines": [
      "or (= 0 0) (= 5 4);"
    ],
    "preprocessed": "or (= 0 0) (= 5 4);",
    "dt": false,
    "parse": [
      "or",
      [
        "=",
        "0",
        "0"
      ],
      [
        "=",
        "5",
        "4"
      ]
    ],
    "code": "12111321211302030203321211302101302100332233",
    "spider": "&#xf14b;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 589
  },
  {
    "role": "code",
    "lines": [
      "or (< 2 4) (> 4 6);"
    ],
    "preprocessed": "or (< 2 4) (> 4 6);",
    "dt": false,
    "parse": [
      "or",
      [
        "<",
        "2",
        "4"
      ],
      [
        ">",
        "4",
        "6"
      ]
    ],
    "code": "121113212103021030210033212100302100302110332233",
    "spider": "&#xf14b;&#xf246;&#xf146;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf245;&#xf24b;",
    "stanza": 590
  },
  {
    "role": "code",
    "lines": [
      "or (= 3 3) (= 3 1);"
    ],
    "preprocessed": "or (= 3 3) (= 3 1);",
    "dt": false,
    "parse": [
      "or",
      [
        "=",
        "3",
        "3"
      ],
      [
        "=",
        "3",
        "1"
      ]
    ],
    "code": "1211132121130211302113321211302113021332233",
    "spider": "&#xf14b;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 591
  },
  {
    "role": "code",
    "lines": [
      "or (> 1 5) (< 3 6);"
    ],
    "preprocessed": "or (> 1 5) (< 3 6);",
    "dt": false,
    "parse": [
      "or",
      [
        ">",
        "1",
        "5"
      ],
      [
        "<",
        "3",
        "6"
      ]
    ],
    "code": "1211132121003021302101332121030211302110332233",
    "spider": "&#xf14b;&#xf246;&#xf148;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf207;&#xf24a;&#xf20a;&#xf245;&#xf24b;",
    "stanza": 592
  },
  {
    "role": "code",
    "lines": [
      "or (< 6 2) (= 2 2);"
    ],
    "preprocessed": "or (< 6 2) (= 2 2);",
    "dt": false,
    "parse": [
      "or",
      [
        "<",
        "6",
        "2"
      ],
      [
        "=",
        "2",
        "2"
      ]
    ],
    "code": "121113212103021103021033212113021030210332233",
    "spider": "&#xf14b;&#xf246;&#xf146;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 593
  },
  {
    "role": "code",
    "lines": [
      "or (> 2 5) (= 5 5);"
    ],
    "preprocessed": "or (> 2 5) (= 5 5);",
    "dt": false,
    "parse": [
      "or",
      [
        ">",
        "2",
        "5"
      ],
      [
        "=",
        "5",
        "5"
      ]
    ],
    "code": "121113212100302103021013321211302101302101332233",
    "spider": "&#xf14b;&#xf246;&#xf148;&#xf24a;&#xf206;&#xf24a;&#xf209;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf209;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 594
  },
  {
    "role": "code",
    "lines": [
      "or (< 6 2) (= 3 3);"
    ],
    "preprocessed": "or (< 6 2) (= 3 3);",
    "dt": false,
    "parse": [
      "or",
      [
        "<",
        "6",
        "2"
      ],
      [
        "=",
        "3",
        "3"
      ]
    ],
    "code": "121113212103021103021033212113021130211332233",
    "spider": "&#xf14b;&#xf246;&#xf146;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 595
  },
  {
    "role": "code",
    "lines": [
      "or (< 4 3) (> 5 2);"
    ],
    "preprocessed": "or (< 4 3) (> 5 2);",
    "dt": false,
    "parse": [
      "or",
      [
        "<",
        "4",
        "3"
      ],
      [
        ">",
        "5",
        "2"
      ]
    ],
    "code": "12111321210302100302113321210030210130210332233",
    "spider": "&#xf14b;&#xf246;&#xf146;&#xf24a;&#xf208;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 596
  },
  {
    "role": "code",
    "lines": [
      "not | or (< 5 4) (= 1 2);"
    ],
    "preprocessed": "not | or (< 5 4) (= 1 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "<",
          "5",
          "4"
        ],
        [
          "=",
          "1",
          "2"
        ]
      ]
    ],
    "code": "121013023121113212103021013021003321211302130210332233",
    "spider": "&#xf149;&#xf248;&#xf14b;&#xf246;&#xf146;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 597
  },
  {
    "role": "code",
    "lines": [
      "not | or (< 6 4) (= 5 1);"
    ],
    "preprocessed": "not | or (< 6 4) (= 5 1);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "<",
          "6",
          "4"
        ],
        [
          "=",
          "5",
          "1"
        ]
      ]
    ],
    "code": "1210130231211132121030211030210033212113021013021332233",
    "spider": "&#xf149;&#xf248;&#xf14b;&#xf246;&#xf146;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf209;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 598
  },
  {
    "role": "code",
    "lines": [
      "not | or (> 2 6) (= 1 5);"
    ],
    "preprocessed": "not | or (> 2 6) (= 1 5);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          ">",
          "2",
          "6"
        ],
        [
          "=",
          "1",
          "5"
        ]
      ]
    ],
    "code": "1210130231211132121003021030211033212113021302101332233",
    "spider": "&#xf149;&#xf248;&#xf14b;&#xf246;&#xf148;&#xf24a;&#xf206;&#xf24a;&#xf20a;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 599
  },
  {
    "role": "code",
    "lines": [
      "not | or (< 6 3) (= 2 3);"
    ],
    "preprocessed": "not | or (< 6 3) (= 2 3);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "<",
          "6",
          "3"
        ],
        [
          "=",
          "2",
          "3"
        ]
      ]
    ],
    "code": "121013023121113212103021103021133212113021030211332233",
    "spider": "&#xf149;&#xf248;&#xf14b;&#xf246;&#xf146;&#xf24a;&#xf20a;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 600
  },
  {
    "role": "code",
    "lines": [
      "not | or (< 6 4) (> 0 1);"
    ],
    "preprocessed": "not | or (< 6 4) (> 0 1);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "<",
          "6",
          "4"
        ],
        [
          ">",
          "0",
          "1"
        ]
      ]
    ],
    "code": "121013023121113212103021103021003321210030203021332233",
    "spider": "&#xf149;&#xf248;&#xf14b;&#xf246;&#xf146;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 601
  },
  {
    "role": "code",
    "lines": [
      "not | or (= 3 5) (< 4 1);"
    ],
    "preprocessed": "not | or (= 3 5) (< 4 1);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "=",
          "3",
          "5"
        ],
        [
          "<",
          "4",
          "1"
        ]
      ]
    ],
    "code": "121013023121113212113021130210133212103021003021332233",
    "spider": "&#xf149;&#xf248;&#xf14b;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf209;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 602
  },
  {
    "role": "code",
    "lines": [
      "not | or (= 4 1) (< 4 2);"
    ],
    "preprocessed": "not | or (= 4 1) (< 4 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "=",
          "4",
          "1"
        ],
        [
          "<",
          "4",
          "2"
        ]
      ]
    ],
    "code": "121013023121113212113021003021332121030210030210332233",
    "spider": "&#xf149;&#xf248;&#xf14b;&#xf246;&#xf147;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 603
  },
  {
    "role": "code",
    "lines": [
      "not | or (< 6 3) (= 3 0);"
    ],
    "preprocessed": "not | or (< 6 3) (= 3 0);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "or",
        [
          "<",
          "6",
          "3"
        ],
        [
          "=",
          "3",
          "0"
        ]
      ]
    ],
    "code": "12101302312111321210302110302113321211302113020332233",
    "spider": "&#xf149;&#xf248;&#xf14b;&#xf246;&#xf146;&#xf24a;&#xf20a;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf207;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 604
  },
  {
    "role": "code",
    "lines": [
      "or (< 4 2) (< 4 6);"
    ],
    "preprocessed": "or (< 4 2) (< 4 6);",
    "dt": false,
    "parse": [
      "or",
      [
        "<",
        "4",
        "2"
      ],
      [
        "<",
        "4",
        "6"
      ]
    ],
    "code": "12111321210302100302103321210302100302110332233",
    "spider": "&#xf14b;&#xf246;&#xf146;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf245;&#xf24b;",
    "stanza": 605
  },
  {
    "role": "code",
    "lines": [
      "or (> 4 1) (< 5 2);"
    ],
    "preprocessed": "or (> 4 1) (< 5 2);",
    "dt": false,
    "parse": [
      "or",
      [
        ">",
        "4",
        "1"
      ],
      [
        "<",
        "5",
        "2"
      ]
    ],
    "code": "1211132121003021003021332121030210130210332233",
    "spider": "&#xf14b;&#xf246;&#xf148;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 606
  },
  {
    "role": "code",
    "lines": [
      "or (> 0 1) (> 7 5);"
    ],
    "preprocessed": "or (> 0 1) (> 7 5);",
    "dt": false,
    "parse": [
      "or",
      [
        ">",
        "0",
        "1"
      ],
      [
        ">",
        "7",
        "5"
      ]
    ],
    "code": "1211132121003020302133212100302111302101332233",
    "spider": "&#xf14b;&#xf246;&#xf148;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf20b;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 607
  },
  {
    "role": "code",
    "lines": [
      "or (< 3 4) (> 3 6);"
    ],
    "preprocessed": "or (< 3 4) (> 3 6);",
    "dt": false,
    "parse": [
      "or",
      [
        "<",
        "3",
        "4"
      ],
      [
        ">",
        "3",
        "6"
      ]
    ],
    "code": "12111321210302113021003321210030211302110332233",
    "spider": "&#xf14b;&#xf246;&#xf146;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf207;&#xf24a;&#xf20a;&#xf245;&#xf24b;",
    "stanza": 608
  },
  {
    "role": "code",
    "lines": [
      "or (> 1 2) (> 6 4);"
    ],
    "preprocessed": "or (> 1 2) (> 6 4);",
    "dt": false,
    "parse": [
      "or",
      [
        ">",
        "1",
        "2"
      ],
      [
        ">",
        "6",
        "4"
      ]
    ],
    "code": "12111321210030213021033212100302110302100332233",
    "spider": "&#xf14b;&#xf246;&#xf148;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf148;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 609
  },
  {
    "role": "code",
    "lines": [
      "or (< 0 1) (= 4 5);"
    ],
    "preprocessed": "or (< 0 1) (= 4 5);",
    "dt": false,
    "parse": [
      "or",
      [
        "<",
        "0",
        "1"
      ],
      [
        "=",
        "4",
        "5"
      ]
    ],
    "code": "12111321210302030213321211302100302101332233",
    "spider": "&#xf14b;&#xf246;&#xf146;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf208;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 610
  },
  {
    "role": "code",
    "lines": [
      "or (< 4 6) (< 5 7);"
    ],
    "preprocessed": "or (< 4 6) (< 5 7);",
    "dt": false,
    "parse": [
      "or",
      [
        "<",
        "4",
        "6"
      ],
      [
        "<",
        "5",
        "7"
      ]
    ],
    "code": "121113212103021003021103321210302101302111332233",
    "spider": "&#xf14b;&#xf246;&#xf146;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf245;&#xf246;&#xf146;&#xf24a;&#xf209;&#xf24a;&#xf20b;&#xf245;&#xf24b;",
    "stanza": 611
  },
  {
    "role": "doc",
    "lines": [
      "Now is an opportune moment to add `<=` and `>=` definitions.",
      "There are shorter definitions, like just negating `>` and `<`, but this feels more natural?"
    ],
    "stanza": 612
  },
  {
    "role": "code",
    "lines": [
      "define >= | ? x | ? y | or (> $x $y) (= $x $y);"
    ],
    "preprocessed": "define >= | ? x | ? y | or (> $x $y) (= $x $y);",
    "dt": true,
    "parse": [
      "define",
      ">=",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "or",
            [
              ">",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ],
            [
              "=",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210010113023121100312101001302312110031210000013023121113212100312312101001312312100000133212113123121010013123121000001332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf14f;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14b;&#xf246;&#xf148;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf24b;",
    "stanza": 613
  },
  {
    "role": "code",
    "lines": [
      "define <= | ? x | ? y | or (< $x $y) (= $x $y);"
    ],
    "preprocessed": "define <= | ? x | ? y | or (< $x $y) (= $x $y);",
    "dt": true,
    "parse": [
      "define",
      "<=",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "or",
            [
              "<",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ],
            [
              "=",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121001100302312110031210100130231211003121000001302312111321210312312101001312312100000133212113123121010013123121000001332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf150;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14b;&#xf246;&#xf146;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf24b;",
    "stanza": 614
  },
  {
    "role": "code",
    "lines": [
      ">= 0 0;"
    ],
    "preprocessed": ">= 0 0;",
    "dt": false,
    "parse": [
      ">=",
      "0",
      "0"
    ],
    "code": "1210010113020302032233",
    "spider": "&#xf145;&#xf14f;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 615
  },
  {
    "role": "code",
    "lines": [
      "<= 0 0;"
    ],
    "preprocessed": "<= 0 0;",
    "dt": false,
    "parse": [
      "<=",
      "0",
      "0"
    ],
    "code": "1210011003020302032233",
    "spider": "&#xf145;&#xf150;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 616
  },
  {
    "role": "code",
    "lines": [
      "not | >= 0 1;"
    ],
    "preprocessed": "not | >= 0 1;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        ">=",
        "0",
        "1"
      ]
    ],
    "code": "1210130231210010113020302132233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf14f;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 617
  },
  {
    "role": "code",
    "lines": [
      "<= 0 1;"
    ],
    "preprocessed": "<= 0 1;",
    "dt": false,
    "parse": [
      "<=",
      "0",
      "1"
    ],
    "code": "1210011003020302132233",
    "spider": "&#xf145;&#xf150;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 618
  },
  {
    "role": "code",
    "lines": [
      "not | >= 0 2;"
    ],
    "preprocessed": "not | >= 0 2;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        ">=",
        "0",
        "2"
      ]
    ],
    "code": "12101302312100101130203021032233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf14f;&#xf24a;&#xf204;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 619
  },
  {
    "role": "code",
    "lines": [
      "<= 0 2;"
    ],
    "preprocessed": "<= 0 2;",
    "dt": false,
    "parse": [
      "<=",
      "0",
      "2"
    ],
    "code": "12100110030203021032233",
    "spider": "&#xf145;&#xf150;&#xf24a;&#xf204;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 620
  },
  {
    "role": "code",
    "lines": [
      ">= 1 0;"
    ],
    "preprocessed": ">= 1 0;",
    "dt": false,
    "parse": [
      ">=",
      "1",
      "0"
    ],
    "code": "1210010113021302032233",
    "spider": "&#xf145;&#xf14f;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 621
  },
  {
    "role": "code",
    "lines": [
      "not | <= 1 0;"
    ],
    "preprocessed": "not | <= 1 0;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "<=",
        "1",
        "0"
      ]
    ],
    "code": "1210130231210011003021302032233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf150;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 622
  },
  {
    "role": "code",
    "lines": [
      ">= 1 1;"
    ],
    "preprocessed": ">= 1 1;",
    "dt": false,
    "parse": [
      ">=",
      "1",
      "1"
    ],
    "code": "1210010113021302132233",
    "spider": "&#xf145;&#xf14f;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 623
  },
  {
    "role": "code",
    "lines": [
      "<= 1 1;"
    ],
    "preprocessed": "<= 1 1;",
    "dt": false,
    "parse": [
      "<=",
      "1",
      "1"
    ],
    "code": "1210011003021302132233",
    "spider": "&#xf145;&#xf150;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 624
  },
  {
    "role": "code",
    "lines": [
      "not | >= 1 2;"
    ],
    "preprocessed": "not | >= 1 2;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        ">=",
        "1",
        "2"
      ]
    ],
    "code": "12101302312100101130213021032233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf14f;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 625
  },
  {
    "role": "code",
    "lines": [
      "<= 1 2;"
    ],
    "preprocessed": "<= 1 2;",
    "dt": false,
    "parse": [
      "<=",
      "1",
      "2"
    ],
    "code": "12100110030213021032233",
    "spider": "&#xf145;&#xf150;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 626
  },
  {
    "role": "code",
    "lines": [
      ">= 2 0;"
    ],
    "preprocessed": ">= 2 0;",
    "dt": false,
    "parse": [
      ">=",
      "2",
      "0"
    ],
    "code": "12100101130210302032233",
    "spider": "&#xf145;&#xf14f;&#xf24a;&#xf206;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 627
  },
  {
    "role": "code",
    "lines": [
      "not | <= 2 0;"
    ],
    "preprocessed": "not | <= 2 0;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "<=",
        "2",
        "0"
      ]
    ],
    "code": "12101302312100110030210302032233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf150;&#xf24a;&#xf206;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 628
  },
  {
    "role": "code",
    "lines": [
      ">= 2 1;"
    ],
    "preprocessed": ">= 2 1;",
    "dt": false,
    "parse": [
      ">=",
      "2",
      "1"
    ],
    "code": "12100101130210302132233",
    "spider": "&#xf145;&#xf14f;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 629
  },
  {
    "role": "code",
    "lines": [
      "not | <= 2 1;"
    ],
    "preprocessed": "not | <= 2 1;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "<=",
        "2",
        "1"
      ]
    ],
    "code": "12101302312100110030210302132233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf150;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 630
  },
  {
    "role": "code",
    "lines": [
      ">= 2 2;"
    ],
    "preprocessed": ">= 2 2;",
    "dt": false,
    "parse": [
      ">=",
      "2",
      "2"
    ],
    "code": "121001011302103021032233",
    "spider": "&#xf145;&#xf14f;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 631
  },
  {
    "role": "code",
    "lines": [
      "<= 2 2;"
    ],
    "preprocessed": "<= 2 2;",
    "dt": false,
    "parse": [
      "<=",
      "2",
      "2"
    ],
    "code": "121001100302103021032233",
    "spider": "&#xf145;&#xf150;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 632
  },
  {
    "role": "file",
    "lines": [
      "== COS_Cons =="
    ],
    "stanza": 633
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Now we introduce our first data structure.  The expression `cons X Y` stores `X` and `Y`",
      "in a pair.  We can then pull `X` out from the pair with `car (cons X Y)`, and we can",
      "get `Y` out from the pair with `cdr (cons X Y)`.  Apologies for the arcane names,",
      "they are inherited from Lisp (and they'll be encoded as something else in the",
      "message anyway).",
      "",
      "We give a definition of `cons` that is a bit funky.  The `cons X Y` expression",
      "constructs a function which takes a single argument, also a function.  That",
      "argument gets called with `X` and `Y`.  That means to pull `X` back out, we",
      "just need to call `cons X Y` with a function like `? a | ? b $a`.  Likewise for",
      "`Y`.  That is exactly what `car` and `cdr` do.",
      "",
      "Definitions like that can be a bit hard to think about.  But the great",
      "thing is that you can apply definitions like these without initially",
      "understanding them.  So if the listener wants to try them out, they",
      "can there's an element of interactivity beyond what a plain text",
      "message could give.",
      ""
    ],
    "section_description": "introduce pairs",
    "section_category": "MATH",
    "section_index": 14,
    "stanza": 634
  },
  {
    "role": "code",
    "lines": [
      "intro cons;"
    ],
    "preprocessed": "intro cons;",
    "dt": false,
    "parse": [
      "intro",
      "cons"
    ],
    "code": "12100103121010132233",
    "spider": "&#xf156;&#xf24a;&#xf159;&#xf24b;",
    "stanza": 635
  },
  {
    "role": "code",
    "lines": [
      "intro car;"
    ],
    "preprocessed": "intro car;",
    "dt": false,
    "parse": [
      "intro",
      "car"
    ],
    "code": "12100103121011032233",
    "spider": "&#xf156;&#xf24a;&#xf15a;&#xf24b;",
    "stanza": 636
  },
  {
    "role": "code",
    "lines": [
      "intro cdr;"
    ],
    "preprocessed": "intro cdr;",
    "dt": false,
    "parse": [
      "intro",
      "cdr"
    ],
    "code": "12100103121011132233",
    "spider": "&#xf156;&#xf24a;&#xf15b;&#xf24b;",
    "stanza": 637
  },
  {
    "role": "code",
    "lines": [
      "define cons | ? x | ? y | ? z | z $x $y;"
    ],
    "preprocessed": "define cons | ? x | ? y | ? z | z $x $y;",
    "dt": true,
    "parse": [
      "define",
      "cons",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "?",
            "z",
            [
              -1,
              "z",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210101302312110031210100130231211003121000001302312110031210000103023121000010312312101001312312100000132233",
    "spider": "&#xf151;&#xf24a;&#xf159;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf146;&#xf248;&#xf145;&#xf146;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf24b;",
    "stanza": 638
  },
  {
    "role": "code",
    "lines": [
      "define car | ? z | z | ? x | ? y $x;"
    ],
    "preprocessed": "define car | ? z | z | ? x | ? y $x;",
    "dt": true,
    "parse": [
      "define",
      "car",
      [
        -1,
        "?",
        "z",
        [
          -1,
          "z",
          [
            -1,
            "?",
            "x",
            [
              -1,
              "?",
              "y",
              [
                -2,
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121011030231211003121000010302312100001030231211003121010013023121100312100000131231210100132233",
    "spider": "&#xf151;&#xf24a;&#xf15a;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf146;&#xf248;&#xf145;&#xf146;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 639
  },
  {
    "role": "code",
    "lines": [
      "define cdr | ? z | z | ? x | ? y $y;"
    ],
    "preprocessed": "define cdr | ? z | z | ? x | ? y $y;",
    "dt": true,
    "parse": [
      "define",
      "cdr",
      [
        -1,
        "?",
        "z",
        [
          -1,
          "z",
          [
            -1,
            "?",
            "x",
            [
              -1,
              "?",
              "y",
              [
                -2,
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210111302312110031210000103023121000010302312110031210100130231211003121000001312312100000132233",
    "spider": "&#xf151;&#xf24a;&#xf15b;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf146;&#xf248;&#xf145;&#xf146;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf249;&#xf145;&#xf145;&#xf24b;",
    "stanza": 640
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 0 4) | = 0 | car $x;"
    ],
    "preprocessed": "assign x (cons 0 4) | = 0 | car $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "0",
        "4"
      ],
      [
        -1,
        "=",
        "0",
        [
          -1,
          "car",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "code": "121110312101001321210101302030210033023121130203023121011031231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf204;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf15a;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 641
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 0 4) | = 4 | cdr $x;"
    ],
    "preprocessed": "assign x (cons 0 4) | = 4 | cdr $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "0",
        "4"
      ],
      [
        -1,
        "=",
        "4",
        [
          -1,
          "cdr",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "code": "12111031210100132121010130203021003302312113021003023121011131231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf204;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf208;&#xf248;&#xf15b;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 642
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 6 2) | = 6 | car $x;"
    ],
    "preprocessed": "assign x (cons 6 2) | = 6 | car $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "6",
        "2"
      ],
      [
        -1,
        "=",
        "6",
        [
          -1,
          "car",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "code": "121110312101001321210101302110302103302312113021103023121011031231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf20a;&#xf248;&#xf15a;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 643
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 6 2) | = 2 | cdr $x;"
    ],
    "preprocessed": "assign x (cons 6 2) | = 2 | cdr $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "6",
        "2"
      ],
      [
        -1,
        "=",
        "2",
        [
          -1,
          "cdr",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "code": "12111031210100132121010130211030210330231211302103023121011131231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf206;&#xf248;&#xf15b;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 644
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 3 9) | = 3 | car $x;"
    ],
    "preprocessed": "assign x (cons 3 9) | = 3 | car $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "3",
        "9"
      ],
      [
        -1,
        "=",
        "3",
        [
          -1,
          "car",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "code": "121110312101001321210101302113021001330231211302113023121011031231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf207;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf207;&#xf248;&#xf15a;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 645
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 3 9) | = 9 | cdr $x;"
    ],
    "preprocessed": "assign x (cons 3 9) | = 9 | cdr $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "3",
        "9"
      ],
      [
        -1,
        "=",
        "9",
        [
          -1,
          "cdr",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "code": "12111031210100132121010130211302100133023121130210013023121011131231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf207;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf20d;&#xf248;&#xf15b;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 646
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 7 | cons 10 2) | = 7 | car $x;"
    ],
    "preprocessed": "assign x (cons 7 | cons 10 2) | = 7 | car $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "7",
        [
          -1,
          "cons",
          "10",
          "2"
        ]
      ],
      [
        -1,
        "=",
        "7",
        [
          -1,
          "car",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "code": "121110312101001321210101302111302312101013021010302103302312113021113023121011031231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf20b;&#xf248;&#xf159;&#xf24a;&#xf20e;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf20b;&#xf248;&#xf15a;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 647
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 7 | cons 10 2) | = 10 | car | cdr $x;"
    ],
    "preprocessed": "assign x (cons 7 | cons 10 2) | = 10 | car | cdr $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "7",
        [
          -1,
          "cons",
          "10",
          "2"
        ]
      ],
      [
        -1,
        "=",
        "10",
        [
          -1,
          "car",
          [
            -1,
            "cdr",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "121110312101001321210101302111302312101013021010302103302312113021010302312101103023121011131231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf20b;&#xf248;&#xf159;&#xf24a;&#xf20e;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf20e;&#xf248;&#xf15a;&#xf248;&#xf15b;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 648
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 7 | cons 10 2) | = 2 | cdr | cdr $x;"
    ],
    "preprocessed": "assign x (cons 7 | cons 10 2) | = 2 | cdr | cdr $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "7",
        [
          -1,
          "cons",
          "10",
          "2"
        ]
      ],
      [
        -1,
        "=",
        "2",
        [
          -1,
          "cdr",
          [
            -1,
            "cdr",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "1211103121010013212101013021113023121010130210103021033023121130210302312101113023121011131231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf20b;&#xf248;&#xf159;&#xf24a;&#xf20e;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf206;&#xf248;&#xf15b;&#xf248;&#xf15b;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 649
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 1 | cons 15 17) | = 1 | car $x;"
    ],
    "preprocessed": "assign x (cons 1 | cons 15 17) | = 1 | car $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "1",
        [
          -1,
          "cons",
          "15",
          "17"
        ]
      ],
      [
        -1,
        "=",
        "1",
        [
          -1,
          "car",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "code": "12111031210100132121010130213023121010130211113021000133023121130213023121011031231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf205;&#xf248;&#xf159;&#xf24a;&#xf213;&#xf24a;&#xf215;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf205;&#xf248;&#xf15a;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 650
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 1 | cons 15 17) | = 15 | car | cdr $x;"
    ],
    "preprocessed": "assign x (cons 1 | cons 15 17) | = 15 | car | cdr $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "1",
        [
          -1,
          "cons",
          "15",
          "17"
        ]
      ],
      [
        -1,
        "=",
        "15",
        [
          -1,
          "car",
          [
            -1,
            "cdr",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "1211103121010013212101013021302312101013021111302100013302312113021111302312101103023121011131231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf205;&#xf248;&#xf159;&#xf24a;&#xf213;&#xf24a;&#xf215;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf213;&#xf248;&#xf15a;&#xf248;&#xf15b;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 651
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 1 | cons 15 17) | = 17 | cdr | cdr $x;"
    ],
    "preprocessed": "assign x (cons 1 | cons 15 17) | = 17 | cdr | cdr $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "1",
        [
          -1,
          "cons",
          "15",
          "17"
        ]
      ],
      [
        -1,
        "=",
        "17",
        [
          -1,
          "cdr",
          [
            -1,
            "cdr",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "12111031210100132121010130213023121010130211113021000133023121130210001302312101113023121011131231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf205;&#xf248;&#xf159;&#xf24a;&#xf213;&#xf24a;&#xf215;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf215;&#xf248;&#xf15b;&#xf248;&#xf15b;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 652
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 8 | cons 14 9) | = 8 | car $x;"
    ],
    "preprocessed": "assign x (cons 8 | cons 14 9) | = 8 | car $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "8",
        [
          -1,
          "cons",
          "14",
          "9"
        ]
      ],
      [
        -1,
        "=",
        "8",
        [
          -1,
          "car",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "code": "1211103121010013212101013021000302312101013021110302100133023121130210003023121011031231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf20c;&#xf248;&#xf159;&#xf24a;&#xf212;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf20c;&#xf248;&#xf15a;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 653
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 8 | cons 14 9) | = 14 | car | cdr $x;"
    ],
    "preprocessed": "assign x (cons 8 | cons 14 9) | = 14 | car | cdr $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "8",
        [
          -1,
          "cons",
          "14",
          "9"
        ]
      ],
      [
        -1,
        "=",
        "14",
        [
          -1,
          "car",
          [
            -1,
            "cdr",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "121110312101001321210101302100030231210101302111030210013302312113021110302312101103023121011131231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf20c;&#xf248;&#xf159;&#xf24a;&#xf212;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf212;&#xf248;&#xf15a;&#xf248;&#xf15b;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 654
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 8 | cons 14 9) | = 9 | cdr | cdr $x;"
    ],
    "preprocessed": "assign x (cons 8 | cons 14 9) | = 9 | cdr | cdr $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "8",
        [
          -1,
          "cons",
          "14",
          "9"
        ]
      ],
      [
        -1,
        "=",
        "9",
        [
          -1,
          "cdr",
          [
            -1,
            "cdr",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "121110312101001321210101302100030231210101302111030210013302312113021001302312101113023121011131231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf20c;&#xf248;&#xf159;&#xf24a;&#xf212;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf20d;&#xf248;&#xf15b;&#xf248;&#xf15b;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 655
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 3 | car $x;"
    ],
    "preprocessed": "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 3 | car $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "3",
        [
          -1,
          "cons",
          "0",
          [
            -1,
            "cons",
            "2",
            [
              -1,
              "cons",
              "4",
              "1"
            ]
          ]
        ]
      ],
      [
        -1,
        "=",
        "3",
        [
          -1,
          "car",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "code": "121110312101001321210101302113023121010130203023121010130210302312101013021003021330231211302113023121011031231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf207;&#xf248;&#xf159;&#xf24a;&#xf204;&#xf248;&#xf159;&#xf24a;&#xf206;&#xf248;&#xf159;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf207;&#xf248;&#xf15a;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 656
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 0 | car | cdr $x;"
    ],
    "preprocessed": "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 0 | car | cdr $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "3",
        [
          -1,
          "cons",
          "0",
          [
            -1,
            "cons",
            "2",
            [
              -1,
              "cons",
              "4",
              "1"
            ]
          ]
        ]
      ],
      [
        -1,
        "=",
        "0",
        [
          -1,
          "car",
          [
            -1,
            "cdr",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "1211103121010013212101013021130231210101302030231210101302103023121010130210030213302312113020302312101103023121011131231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf207;&#xf248;&#xf159;&#xf24a;&#xf204;&#xf248;&#xf159;&#xf24a;&#xf206;&#xf248;&#xf159;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf15a;&#xf248;&#xf15b;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 657
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 2 | car | cdr | cdr $x;"
    ],
    "preprocessed": "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 2 | car | cdr | cdr $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "3",
        [
          -1,
          "cons",
          "0",
          [
            -1,
            "cons",
            "2",
            [
              -1,
              "cons",
              "4",
              "1"
            ]
          ]
        ]
      ],
      [
        -1,
        "=",
        "2",
        [
          -1,
          "car",
          [
            -1,
            "cdr",
            [
              -1,
              "cdr",
              [
                -2,
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211103121010013212101013021130231210101302030231210101302103023121010130210030213302312113021030231210110302312101113023121011131231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf207;&#xf248;&#xf159;&#xf24a;&#xf204;&#xf248;&#xf159;&#xf24a;&#xf206;&#xf248;&#xf159;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf206;&#xf248;&#xf15a;&#xf248;&#xf15b;&#xf248;&#xf15b;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 658
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 4 | car | cdr | cdr | cdr $x;"
    ],
    "preprocessed": "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 4 | car | cdr | cdr | cdr $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "3",
        [
          -1,
          "cons",
          "0",
          [
            -1,
            "cons",
            "2",
            [
              -1,
              "cons",
              "4",
              "1"
            ]
          ]
        ]
      ],
      [
        -1,
        "=",
        "4",
        [
          -1,
          "car",
          [
            -1,
            "cdr",
            [
              -1,
              "cdr",
              [
                -1,
                "cdr",
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211103121010013212101013021130231210101302030231210101302103023121010130210030213302312113021003023121011030231210111302312101113023121011131231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf207;&#xf248;&#xf159;&#xf24a;&#xf204;&#xf248;&#xf159;&#xf24a;&#xf206;&#xf248;&#xf159;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf208;&#xf248;&#xf15a;&#xf248;&#xf15b;&#xf248;&#xf15b;&#xf248;&#xf15b;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 659
  },
  {
    "role": "code",
    "lines": [
      "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 1 | cdr | cdr | cdr | cdr $x;"
    ],
    "preprocessed": "assign x (cons 3 | cons 0 | cons 2 | cons 4 1) | = 1 | cdr | cdr | cdr | cdr $x;",
    "dt": false,
    "parse": [
      "assign",
      "x",
      [
        "cons",
        "3",
        [
          -1,
          "cons",
          "0",
          [
            -1,
            "cons",
            "2",
            [
              -1,
              "cons",
              "4",
              "1"
            ]
          ]
        ]
      ],
      [
        -1,
        "=",
        "1",
        [
          -1,
          "cdr",
          [
            -1,
            "cdr",
            [
              -1,
              "cdr",
              [
                -1,
                "cdr",
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12111031210100132121010130211302312101013020302312101013021030231210101302100302133023121130213023121011130231210111302312101113023121011131231210100132233",
    "spider": "&#xf152;&#xf24a;&#xf16d;&#xf246;&#xf159;&#xf24a;&#xf207;&#xf248;&#xf159;&#xf24a;&#xf204;&#xf248;&#xf159;&#xf24a;&#xf206;&#xf248;&#xf159;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf205;&#xf248;&#xf15b;&#xf248;&#xf15b;&#xf248;&#xf15b;&#xf248;&#xf15b;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 660
  },
  {
    "role": "file",
    "lines": [
      "== COS_Mutable =="
    ],
    "stanza": 661
  },
  {
    "role": "doc",
    "lines": [
      "",
      "With `define`, we showed that there is a global memory, where we can associate a",
      "symbol with a value.  That's nice, but it can be handy to separate memory from",
      "naming.  In this section we introduce `make-cell X`, which creates a \"cell\"",
      "of memory and puts `X` in it.  The cell can be read with `get!`, like",
      "`get! | make-cell X`, or written to with `set!`, like `set! (make-cell-X) Y`.",
      ""
    ],
    "section_description": "introduce mutable cells",
    "section_category": "MATH",
    "section_index": 15,
    "stanza": 662
  },
  {
    "role": "code",
    "lines": [
      "intro make-cell;"
    ],
    "preprocessed": "intro make-cell;",
    "dt": false,
    "parse": [
      "intro",
      "make-cell"
    ],
    "code": "12100103121101132233",
    "spider": "&#xf156;&#xf24a;&#xf15f;&#xf24b;",
    "stanza": 663
  },
  {
    "role": "code",
    "lines": [
      "intro set!;"
    ],
    "preprocessed": "intro set!;",
    "dt": true,
    "parse": [
      "intro",
      "set!"
    ],
    "code": "12100103121110032233",
    "spider": "&#xf156;&#xf24a;&#xf160;&#xf24b;",
    "stanza": 664
  },
  {
    "role": "code",
    "lines": [
      "intro get!;"
    ],
    "preprocessed": "intro get!;",
    "dt": false,
    "parse": [
      "intro",
      "get!"
    ],
    "code": "12100103121110132233",
    "spider": "&#xf156;&#xf24a;&#xf161;&#xf24b;",
    "stanza": 665
  },
  {
    "role": "code",
    "lines": [
      "define demo:make-cell:x | make-cell 14;"
    ],
    "preprocessed": "define demo:make-cell:x | make-cell 14;",
    "dt": true,
    "parse": [
      "define",
      "demo:make-cell:x",
      [
        -1,
        "make-cell",
        "14"
      ]
    ],
    "code": "1211013121210010031211011312101001330231211011302111032233",
    "spider": "&#xf151;&#xf24a;&#xf168;&#xf15f;&#xf16d;&#xf248;&#xf15f;&#xf24a;&#xf212;&#xf24b;",
    "stanza": 666
  },
  {
    "role": "code",
    "lines": [
      "= (get! $demo:make-cell:x) 14;"
    ],
    "preprocessed": "= (get! $demo:make-cell:x) 14;",
    "dt": false,
    "parse": [
      "=",
      [
        "get!",
        [
          -2,
          "demo:make-cell:x"
        ]
      ],
      "14"
    ],
    "code": "1211321211101312312121001003121101131210100133302111032233",
    "spider": "&#xf147;&#xf246;&#xf161;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf245;&#xf212;&#xf24b;",
    "stanza": 667
  },
  {
    "role": "code",
    "lines": [
      "set! $demo:make-cell:x 15;"
    ],
    "preprocessed": "set! $demo:make-cell:x 15;",
    "dt": true,
    "parse": [
      "set!",
      [
        -2,
        "demo:make-cell:x"
      ],
      "15"
    ],
    "code": "121110031231212100100312110113121010013302111132233",
    "spider": "&#xf160;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf213;&#xf24b;",
    "stanza": 668
  },
  {
    "role": "code",
    "lines": [
      "= (get! $demo:make-cell:x) 15;"
    ],
    "preprocessed": "= (get! $demo:make-cell:x) 15;",
    "dt": false,
    "parse": [
      "=",
      [
        "get!",
        [
          -2,
          "demo:make-cell:x"
        ]
      ],
      "15"
    ],
    "code": "1211321211101312312121001003121101131210100133302111132233",
    "spider": "&#xf147;&#xf246;&#xf161;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf245;&#xf213;&#xf24b;",
    "stanza": 669
  },
  {
    "role": "code",
    "lines": [
      "set! $demo:make-cell:x 5;"
    ],
    "preprocessed": "set! $demo:make-cell:x 5;",
    "dt": true,
    "parse": [
      "set!",
      [
        -2,
        "demo:make-cell:x"
      ],
      "5"
    ],
    "code": "12111003123121210010031211011312101001330210132233",
    "spider": "&#xf160;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf209;&#xf24b;",
    "stanza": 670
  },
  {
    "role": "code",
    "lines": [
      "set! $demo:make-cell:x 7;"
    ],
    "preprocessed": "set! $demo:make-cell:x 7;",
    "dt": true,
    "parse": [
      "set!",
      [
        -2,
        "demo:make-cell:x"
      ],
      "7"
    ],
    "code": "12111003123121210010031211011312101001330211132233",
    "spider": "&#xf160;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf20b;&#xf24b;",
    "stanza": 671
  },
  {
    "role": "code",
    "lines": [
      "= (get! $demo:make-cell:x) 7;"
    ],
    "preprocessed": "= (get! $demo:make-cell:x) 7;",
    "dt": false,
    "parse": [
      "=",
      [
        "get!",
        [
          -2,
          "demo:make-cell:x"
        ]
      ],
      "7"
    ],
    "code": "121132121110131231212100100312110113121010013330211132233",
    "spider": "&#xf147;&#xf246;&#xf161;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf245;&#xf20b;&#xf24b;",
    "stanza": 672
  },
  {
    "role": "code",
    "lines": [
      "define demo:make-cell:y | make-cell 11;"
    ],
    "preprocessed": "define demo:make-cell:y | make-cell 11;",
    "dt": true,
    "parse": [
      "define",
      "demo:make-cell:y",
      [
        -1,
        "make-cell",
        "11"
      ]
    ],
    "code": "12110131212100100312110113121000001330231211011302101132233",
    "spider": "&#xf151;&#xf24a;&#xf168;&#xf15f;&#xf145;&#xf145;&#xf248;&#xf15f;&#xf24a;&#xf20f;&#xf24b;",
    "stanza": 673
  },
  {
    "role": "code",
    "lines": [
      "= (get! $demo:make-cell:y) 11;"
    ],
    "preprocessed": "= (get! $demo:make-cell:y) 11;",
    "dt": false,
    "parse": [
      "=",
      [
        "get!",
        [
          -2,
          "demo:make-cell:y"
        ]
      ],
      "11"
    ],
    "code": "12113212111013123121210010031211011312100000133302101132233",
    "spider": "&#xf147;&#xf246;&#xf161;&#xf249;&#xf168;&#xf15f;&#xf145;&#xf145;&#xf245;&#xf20f;&#xf24b;",
    "stanza": 674
  },
  {
    "role": "code",
    "lines": [
      "set! $demo:make-cell:y 22;"
    ],
    "preprocessed": "set! $demo:make-cell:y 22;",
    "dt": true,
    "parse": [
      "set!",
      [
        -2,
        "demo:make-cell:y"
      ],
      "22"
    ],
    "code": "12111003123121210010031211011312100000133021011032233",
    "spider": "&#xf160;&#xf249;&#xf168;&#xf15f;&#xf145;&#xf145;&#xf21a;&#xf24b;",
    "stanza": 675
  },
  {
    "role": "code",
    "lines": [
      "= (get! $demo:make-cell:y) 22;"
    ],
    "preprocessed": "= (get! $demo:make-cell:y) 22;",
    "dt": false,
    "parse": [
      "=",
      [
        "get!",
        [
          -2,
          "demo:make-cell:y"
        ]
      ],
      "22"
    ],
    "code": "121132121110131231212100100312110113121000001333021011032233",
    "spider": "&#xf147;&#xf246;&#xf161;&#xf249;&#xf168;&#xf15f;&#xf145;&#xf145;&#xf245;&#xf21a;&#xf24b;",
    "stanza": 676
  },
  {
    "role": "code",
    "lines": [
      "= (get! $demo:make-cell:x) 7;"
    ],
    "preprocessed": "= (get! $demo:make-cell:x) 7;",
    "dt": false,
    "parse": [
      "=",
      [
        "get!",
        [
          -2,
          "demo:make-cell:x"
        ]
      ],
      "7"
    ],
    "code": "121132121110131231212100100312110113121010013330211132233",
    "spider": "&#xf147;&#xf246;&#xf161;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf245;&#xf20b;&#xf24b;",
    "stanza": 677
  },
  {
    "role": "code",
    "lines": [
      "= 29 (+ (get! $demo:make-cell:x) | get! $demo:make-cell:y);"
    ],
    "preprocessed": "= 29 (+ (get! $demo:make-cell:x) | get! $demo:make-cell:y);",
    "dt": false,
    "parse": [
      "=",
      "29",
      [
        "+",
        [
          "get!",
          [
            -2,
            "demo:make-cell:x"
          ]
        ],
        [
          -1,
          "get!",
          [
            -2,
            "demo:make-cell:y"
          ]
        ]
      ]
    ],
    "code": "1211302111013212101032121110131231212100100312110113121010013330231211101312312121001003121101131210000013332233",
    "spider": "&#xf147;&#xf24a;&#xf221;&#xf246;&#xf14e;&#xf246;&#xf161;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf245;&#xf248;&#xf161;&#xf249;&#xf168;&#xf15f;&#xf145;&#xf145;&#xf245;&#xf24b;",
    "stanza": 678
  },
  {
    "role": "code",
    "lines": [
      "if (= (get! $demo:make-cell:x) 7) (set! $demo:make-cell:x 88) (set! $demo:make-cell:x 99);"
    ],
    "preprocessed": "if (= (get! $demo:make-cell:x) 7) (set! $demo:make-cell:x 88) (set! $demo:make-cell:x 99);",
    "dt": true,
    "parse": [
      "if",
      [
        "=",
        [
          "get!",
          [
            -2,
            "demo:make-cell:x"
          ]
        ],
        "7"
      ],
      [
        "set!",
        [
          -2,
          "demo:make-cell:x"
        ],
        "88"
      ],
      [
        "set!",
        [
          -2,
          "demo:make-cell:x"
        ],
        "99"
      ]
    ],
    "code": "12111132121132121110131231212100100312110113121010013330211133212111003123121210010031211011312101001330210110003321211100312312121001003121101131210100133021100011332233",
    "spider": "&#xf153;&#xf246;&#xf147;&#xf246;&#xf161;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf245;&#xf20b;&#xf245;&#xf246;&#xf160;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf205;&#xf21c;&#xf245;&#xf246;&#xf160;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf205;&#xf227;&#xf245;&#xf24b;",
    "stanza": 679
  },
  {
    "role": "code",
    "lines": [
      "= (get! $demo:make-cell:x) 88;"
    ],
    "preprocessed": "= (get! $demo:make-cell:x) 88;",
    "dt": false,
    "parse": [
      "=",
      [
        "get!",
        [
          -2,
          "demo:make-cell:x"
        ]
      ],
      "88"
    ],
    "code": "1211321211101312312121001003121101131210100133302101100032233",
    "spider": "&#xf147;&#xf246;&#xf161;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf245;&#xf205;&#xf21c;&#xf24b;",
    "stanza": 680
  },
  {
    "role": "code",
    "lines": [
      "if (= (get! $demo:make-cell:x) 7) (set! $demo:make-cell:x 88) (set! $demo:make-cell:x 99);"
    ],
    "preprocessed": "if (= (get! $demo:make-cell:x) 7) (set! $demo:make-cell:x 88) (set! $demo:make-cell:x 99);",
    "dt": true,
    "parse": [
      "if",
      [
        "=",
        [
          "get!",
          [
            -2,
            "demo:make-cell:x"
          ]
        ],
        "7"
      ],
      [
        "set!",
        [
          -2,
          "demo:make-cell:x"
        ],
        "88"
      ],
      [
        "set!",
        [
          -2,
          "demo:make-cell:x"
        ],
        "99"
      ]
    ],
    "code": "12111132121132121110131231212100100312110113121010013330211133212111003123121210010031211011312101001330210110003321211100312312121001003121101131210100133021100011332233",
    "spider": "&#xf153;&#xf246;&#xf147;&#xf246;&#xf161;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf245;&#xf20b;&#xf245;&#xf246;&#xf160;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf205;&#xf21c;&#xf245;&#xf246;&#xf160;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf205;&#xf227;&#xf245;&#xf24b;",
    "stanza": 681
  },
  {
    "role": "code",
    "lines": [
      "= (get! $demo:make-cell:x) 99;"
    ],
    "preprocessed": "= (get! $demo:make-cell:x) 99;",
    "dt": false,
    "parse": [
      "=",
      [
        "get!",
        [
          -2,
          "demo:make-cell:x"
        ]
      ],
      "99"
    ],
    "code": "1211321211101312312121001003121101131210100133302110001132233",
    "spider": "&#xf147;&#xf246;&#xf161;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf245;&#xf205;&#xf227;&#xf24b;",
    "stanza": 682
  },
  {
    "role": "file",
    "lines": [
      "== COS_ListPre =="
    ],
    "stanza": 683
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Lists are a handy data structure to have.  We'd like to get to the point",
      "in the message where we can make lists like this: `vector 1 4 5`,",
      "`vector 77 $undefined (vector 1 2 3) 14`, etc.  But",
      "`vector` can't be a function in the language we've described up to now,",
      "it just can't work syntactically.",
      "What we can do is make lists like this: `(list 3) 1 4 5`,",
      "`(list 4) 77 $undefined ((list 3) 1 2 3) 14`, where we manually",
      "specify how many values are in the list.",
      "And then we can introduce a way to transform the syntax of the language,",
      "so that `vector 1 4 5` gets rewritten to `(list 3) 1 4 5` prior to being",
      "evaluated.",
      "",
      "An alternative would be just to introduce some special new syntax for",
      "lists, and give examples.  If the listener finds our transformation approach",
      "confusing, they can simply ignore it and pick the message up again once",
      "`vector` is in place.  But by giving the transformation, we offer a second",
      "way to understand and experiment with the concepts being introduced.",
      ""
    ],
    "section_description": "introduce lists",
    "section_category": "MATH",
    "section_index": 16,
    "stanza": 684
  },
  {
    "role": "code",
    "lines": [
      "intro list;"
    ],
    "preprocessed": "intro list;",
    "dt": false,
    "parse": [
      "intro",
      "list"
    ],
    "code": "1210010312100110132233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf151;&#xf24b;",
    "stanza": 685
  },
  {
    "role": "code",
    "lines": [
      "define list:n | ? n | ? ret |",
      "  if (= $n 1) (? x | ret 1 $x) |",
      "  ? x | list:n (- $n 1) | ? y | ? z | ret (+ 1 $y) | cons $x $z;"
    ],
    "preprocessed": "define list:n | ? n | ? ret |\n  if (= $n 1) (? x | ret 1 $x) |\n  ? x | list:n (- $n 1) | ? y | ? z | ret (+ 1 $y) | cons $x $z;",
    "dt": true,
    "parse": [
      "define",
      "list:n",
      [
        -1,
        "?",
        "n",
        [
          -1,
          "?",
          "ret",
          [
            -1,
            "if",
            [
              "=",
              [
                -2,
                "n"
              ],
              "1"
            ],
            [
              "?",
              "x",
              [
                -1,
                "ret",
                "1",
                [
                  -2,
                  "x"
                ]
              ]
            ],
            [
              -1,
              "?",
              "x",
              [
                -1,
                "list:n",
                [
                  "-",
                  [
                    -2,
                    "n"
                  ],
                  "1"
                ],
                [
                  -1,
                  "?",
                  "y",
                  [
                    -1,
                    "?",
                    "z",
                    [
                      -1,
                      "ret",
                      [
                        "+",
                        "1",
                        [
                          -2,
                          "y"
                        ]
                      ],
                      [
                        -1,
                        "cons",
                        [
                          -2,
                          "x"
                        ],
                        [
                          -2,
                          "z"
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131212100110131210011103302312110031210011103023121100312100111130231211113212113123121001110302133212110031210100130231210011113021312312101001330231211003121010013023121210011013121001110332121011312312100111030213302312110031210000013023121100312100001030231210011113212101030213123121000001330231210101312312101001312312100001032233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf151;&#xf145;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf153;&#xf248;&#xf153;&#xf246;&#xf147;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf145;&#xf153;&#xf24a;&#xf205;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf145;&#xf151;&#xf145;&#xf152;&#xf246;&#xf14f;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf146;&#xf248;&#xf145;&#xf153;&#xf246;&#xf14e;&#xf24a;&#xf205;&#xf249;&#xf145;&#xf145;&#xf245;&#xf248;&#xf159;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf146;&#xf24b;",
    "stanza": 686
  },
  {
    "role": "code",
    "lines": [
      "define list | ? n | if (= $n 0) (cons 0 0) (list:n $n $cons);"
    ],
    "preprocessed": "define list | ? n | if (= $n 0) (cons 0 0) (list:n $n $cons);",
    "dt": true,
    "parse": [
      "define",
      "list",
      [
        -1,
        "?",
        "n",
        [
          -1,
          "if",
          [
            "=",
            [
              -2,
              "n"
            ],
            "0"
          ],
          [
            "cons",
            "0",
            "0"
          ],
          [
            "list:n",
            [
              -2,
              "n"
            ],
            [
              -2,
              "cons"
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121001101302312110031210011103023121111321211312312100111030203321210101302030203321212100110131210011103312312100111031231210101332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf151;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf152;&#xf248;&#xf153;&#xf246;&#xf147;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf159;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf145;&#xf151;&#xf145;&#xf152;&#xf249;&#xf145;&#xf152;&#xf249;&#xf159;&#xf245;&#xf24b;",
    "stanza": 687
  },
  {
    "role": "code",
    "lines": [
      "intro undefined;"
    ],
    "preprocessed": "intro undefined;",
    "dt": false,
    "parse": [
      "intro",
      "undefined"
    ],
    "code": "121001031210000032233",
    "spider": "&#xf156;&#xf24a;&#xf164;&#xf24b;",
    "stanza": 688
  },
  {
    "role": "code",
    "lines": [
      "= $undefined $undefined;"
    ],
    "preprocessed": "= $undefined $undefined;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "undefined"
      ],
      [
        -2,
        "undefined"
      ]
    ],
    "code": "121131231210000031231210000032233",
    "spider": "&#xf147;&#xf249;&#xf164;&#xf249;&#xf164;&#xf24b;",
    "stanza": 689
  },
  {
    "role": "code",
    "lines": [
      "not | = $undefined 0;"
    ],
    "preprocessed": "not | = $undefined 0;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          -2,
          "undefined"
        ],
        "0"
      ]
    ],
    "code": "1210130231211312312100000302032233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf249;&#xf164;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 690
  },
  {
    "role": "code",
    "lines": [
      "not | = $undefined 1;"
    ],
    "preprocessed": "not | = $undefined 1;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          -2,
          "undefined"
        ],
        "1"
      ]
    ],
    "code": "1210130231211312312100000302132233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf249;&#xf164;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 691
  },
  {
    "role": "code",
    "lines": [
      "not | = $undefined 2;"
    ],
    "preprocessed": "not | = $undefined 2;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          -2,
          "undefined"
        ],
        "2"
      ]
    ],
    "code": "12101302312113123121000003021032233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf249;&#xf164;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 692
  },
  {
    "role": "code",
    "lines": [
      "intro head;"
    ],
    "preprocessed": "intro head;",
    "dt": false,
    "parse": [
      "intro",
      "head"
    ],
    "code": "1210010312101000032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf154;&#xf24b;",
    "stanza": 693
  },
  {
    "role": "code",
    "lines": [
      "define head | ? x:list |",
      "  if (= 0 | car $x:list) $undefined |",
      "  if (= 1 | car $x:list) (cdr $x:list) |",
      "  car | cdr $x:list;"
    ],
    "preprocessed": "define head | ? x:list |\n  if (= 0 | car $x:list) $undefined |\n  if (= 1 | car $x:list) (cdr $x:list) |\n  car | cdr $x:list;",
    "dt": true,
    "parse": [
      "define",
      "head",
      [
        -1,
        "?",
        "x:list",
        [
          -1,
          "if",
          [
            "=",
            "0",
            [
              -1,
              "car",
              [
                -2,
                "x:list"
              ]
            ]
          ],
          [
            -2,
            "undefined"
          ],
          [
            -1,
            "if",
            [
              "=",
              "1",
              [
                -1,
                "car",
                [
                  -2,
                  "x:list"
                ]
              ]
            ],
            [
              "cdr",
              [
                -2,
                "x:list"
              ]
            ],
            [
              -1,
              "car",
              [
                -1,
                "cdr",
                [
                  -2,
                  "x:list"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312101000030231211003121210100131210011013302312111132121130203023121011031231212101001312100110133312312100000302312111132121130213023121011031231212101001312100110133321210111312312121010013121001101333023121011030231210111312312121010013121001101332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf15a;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf249;&#xf164;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf205;&#xf248;&#xf15a;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf246;&#xf15b;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf248;&#xf15a;&#xf248;&#xf15b;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf24b;",
    "stanza": 694
  },
  {
    "role": "code",
    "lines": [
      "intro tail;"
    ],
    "preprocessed": "intro tail;",
    "dt": false,
    "parse": [
      "intro",
      "tail"
    ],
    "code": "1210010312101000132233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf155;&#xf24b;",
    "stanza": 695
  },
  {
    "role": "code",
    "lines": [
      "define tail | ? x:list |",
      "  if (= 0 | car $x:list) $undefined |",
      "  if (= 1 | car $x:list) (cons 0 0) |",
      "  cons (- (car $x:list) 1) | cdr | cdr $x:list;"
    ],
    "preprocessed": "define tail | ? x:list |\n  if (= 0 | car $x:list) $undefined |\n  if (= 1 | car $x:list) (cons 0 0) |\n  cons (- (car $x:list) 1) | cdr | cdr $x:list;",
    "dt": true,
    "parse": [
      "define",
      "tail",
      [
        -1,
        "?",
        "x:list",
        [
          -1,
          "if",
          [
            "=",
            "0",
            [
              -1,
              "car",
              [
                -2,
                "x:list"
              ]
            ]
          ],
          [
            -2,
            "undefined"
          ],
          [
            -1,
            "if",
            [
              "=",
              "1",
              [
                -1,
                "car",
                [
                  -2,
                  "x:list"
                ]
              ]
            ],
            [
              "cons",
              "0",
              "0"
            ],
            [
              -1,
              "cons",
              [
                "-",
                [
                  "car",
                  [
                    -2,
                    "x:list"
                  ]
                ],
                "1"
              ],
              [
                -1,
                "cdr",
                [
                  -1,
                  "cdr",
                  [
                    -2,
                    "x:list"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312101000130231211003121210100131210011013302312111132121130203023121011031231212101001312100110133312312100000302312111132121130213023121011031231212101001312100110133321210101302030203302312101013212101132121011031231212101001312100110133302133023121011130231210111312312121010013121001101332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf155;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf15a;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf249;&#xf164;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf205;&#xf248;&#xf15a;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf246;&#xf159;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf159;&#xf246;&#xf14f;&#xf246;&#xf15a;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf205;&#xf245;&#xf248;&#xf15b;&#xf248;&#xf15b;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf24b;",
    "stanza": 696
  },
  {
    "role": "code",
    "lines": [
      "= 17 | head | (list 4) 17 4 3 0;"
    ],
    "preprocessed": "= 17 | head | (list 4) 17 4 3 0;",
    "dt": false,
    "parse": [
      "=",
      "17",
      [
        -1,
        "head",
        [
          -1,
          [
            "list",
            "4"
          ],
          "17",
          "4",
          "3",
          "0"
        ]
      ]
    ],
    "code": "12113021000130231210100003023212100110130210033021000130210030211302032233",
    "spider": "&#xf147;&#xf24a;&#xf215;&#xf248;&#xf145;&#xf154;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf215;&#xf24a;&#xf208;&#xf24a;&#xf207;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 697
  },
  {
    "role": "code",
    "lines": [
      "= 14 | head | (list 9) 14 0 12 19 11 9 8 0 17;"
    ],
    "preprocessed": "= 14 | head | (list 9) 14 0 12 19 11 9 8 0 17;",
    "dt": false,
    "parse": [
      "=",
      "14",
      [
        -1,
        "head",
        [
          -1,
          [
            "list",
            "9"
          ],
          "14",
          "0",
          "12",
          "19",
          "11",
          "9",
          "8",
          "0",
          "17"
        ]
      ]
    ],
    "code": "12113021110302312101000030232121001101302100133021110302030211003021001130210113021001302100030203021000132233",
    "spider": "&#xf147;&#xf24a;&#xf212;&#xf248;&#xf145;&#xf154;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20d;&#xf245;&#xf212;&#xf24a;&#xf204;&#xf24a;&#xf210;&#xf24a;&#xf217;&#xf24a;&#xf20f;&#xf24a;&#xf20d;&#xf24a;&#xf20c;&#xf24a;&#xf204;&#xf24a;&#xf215;&#xf24b;",
    "stanza": 698
  },
  {
    "role": "code",
    "lines": [
      "= 16 | head | (list 6) 16 9 0 17 17 10;"
    ],
    "preprocessed": "= 16 | head | (list 6) 16 9 0 17 17 10;",
    "dt": false,
    "parse": [
      "=",
      "16",
      [
        -1,
        "head",
        [
          -1,
          [
            "list",
            "6"
          ],
          "16",
          "9",
          "0",
          "17",
          "17",
          "10"
        ]
      ]
    ],
    "code": "121130210000302312101000030232121001101302110330210000302100130203021000130210001302101032233",
    "spider": "&#xf147;&#xf24a;&#xf214;&#xf248;&#xf145;&#xf154;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20a;&#xf245;&#xf214;&#xf24a;&#xf20d;&#xf24a;&#xf204;&#xf24a;&#xf215;&#xf24a;&#xf215;&#xf24a;&#xf20e;&#xf24b;",
    "stanza": 699
  },
  {
    "role": "code",
    "lines": [
      "= 5 | head | (list 5) 5 3 1 5 11;"
    ],
    "preprocessed": "= 5 | head | (list 5) 5 3 1 5 11;",
    "dt": false,
    "parse": [
      "=",
      "5",
      [
        -1,
        "head",
        [
          -1,
          [
            "list",
            "5"
          ],
          "5",
          "3",
          "1",
          "5",
          "11"
        ]
      ]
    ],
    "code": "12113021013023121010000302321210011013021013302101302113021302101302101132233",
    "spider": "&#xf147;&#xf24a;&#xf209;&#xf248;&#xf145;&#xf154;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf209;&#xf245;&#xf209;&#xf24a;&#xf207;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf24a;&#xf20f;&#xf24b;",
    "stanza": 700
  },
  {
    "role": "code",
    "lines": [
      "= 15 | head | (list 9) 15 10 12 4 13 6 13 1 6;"
    ],
    "preprocessed": "= 15 | head | (list 9) 15 10 12 4 13 6 13 1 6;",
    "dt": false,
    "parse": [
      "=",
      "15",
      [
        -1,
        "head",
        [
          -1,
          [
            "list",
            "9"
          ],
          "15",
          "10",
          "12",
          "4",
          "13",
          "6",
          "13",
          "1",
          "6"
        ]
      ]
    ],
    "code": "121130211113023121010000302321210011013021001330211113021010302110030210030211013021103021101302130211032233",
    "spider": "&#xf147;&#xf24a;&#xf213;&#xf248;&#xf145;&#xf154;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20d;&#xf245;&#xf213;&#xf24a;&#xf20e;&#xf24a;&#xf210;&#xf24a;&#xf208;&#xf24a;&#xf211;&#xf24a;&#xf20a;&#xf24a;&#xf211;&#xf24a;&#xf205;&#xf24a;&#xf20a;&#xf24b;",
    "stanza": 701
  },
  {
    "role": "code",
    "lines": [
      "= 4 | head | tail | (list 10) 1 4 3 7 0 1 2 11 13 3;"
    ],
    "preprocessed": "= 4 | head | tail | (list 10) 1 4 3 7 0 1 2 11 13 3;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        "head",
        [
          -1,
          "tail",
          [
            -1,
            [
              "list",
              "10"
            ],
            "1",
            "4",
            "3",
            "7",
            "0",
            "1",
            "2",
            "11",
            "13",
            "3"
          ]
        ]
      ]
    ],
    "code": "12113021003023121010000302312101000130232121001101302101033021302100302113021113020302130210302101130211013021132233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20e;&#xf245;&#xf205;&#xf24a;&#xf208;&#xf24a;&#xf207;&#xf24a;&#xf20b;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf20f;&#xf24a;&#xf211;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 702
  },
  {
    "role": "code",
    "lines": [
      "= 3 | head | tail | (list 5) 15 3 19 16 17;"
    ],
    "preprocessed": "= 3 | head | tail | (list 5) 15 3 19 16 17;",
    "dt": false,
    "parse": [
      "=",
      "3",
      [
        -1,
        "head",
        [
          -1,
          "tail",
          [
            -1,
            [
              "list",
              "5"
            ],
            "15",
            "3",
            "19",
            "16",
            "17"
          ]
        ]
      ]
    ],
    "code": "1211302113023121010000302312101000130232121001101302101330211113021130210011302100003021000132233",
    "spider": "&#xf147;&#xf24a;&#xf207;&#xf248;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf209;&#xf245;&#xf213;&#xf24a;&#xf207;&#xf24a;&#xf217;&#xf24a;&#xf214;&#xf24a;&#xf215;&#xf24b;",
    "stanza": 703
  },
  {
    "role": "code",
    "lines": [
      "= 8 | head | tail | (list 6) 6 8 13 9 18 2;"
    ],
    "preprocessed": "= 8 | head | tail | (list 6) 6 8 13 9 18 2;",
    "dt": false,
    "parse": [
      "=",
      "8",
      [
        -1,
        "head",
        [
          -1,
          "tail",
          [
            -1,
            [
              "list",
              "6"
            ],
            "6",
            "8",
            "13",
            "9",
            "18",
            "2"
          ]
        ]
      ]
    ],
    "code": "1211302100030231210100003023121010001302321210011013021103302110302100030211013021001302100103021032233",
    "spider": "&#xf147;&#xf24a;&#xf20c;&#xf248;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20a;&#xf245;&#xf20a;&#xf24a;&#xf20c;&#xf24a;&#xf211;&#xf24a;&#xf20d;&#xf24a;&#xf216;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 704
  },
  {
    "role": "code",
    "lines": [
      "= 3 | head | tail | (list 8) 5 3 10 13 2 8 6 12;"
    ],
    "preprocessed": "= 3 | head | tail | (list 8) 5 3 10 13 2 8 6 12;",
    "dt": false,
    "parse": [
      "=",
      "3",
      [
        -1,
        "head",
        [
          -1,
          "tail",
          [
            -1,
            [
              "list",
              "8"
            ],
            "5",
            "3",
            "10",
            "13",
            "2",
            "8",
            "6",
            "12"
          ]
        ]
      ]
    ],
    "code": "1211302113023121010000302312101000130232121001101302100033021013021130210103021101302103021000302110302110032233",
    "spider": "&#xf147;&#xf24a;&#xf207;&#xf248;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20c;&#xf245;&#xf209;&#xf24a;&#xf207;&#xf24a;&#xf20e;&#xf24a;&#xf211;&#xf24a;&#xf206;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf24a;&#xf210;&#xf24b;",
    "stanza": 705
  },
  {
    "role": "code",
    "lines": [
      "= 11 | head | tail | (list 10) 14 11 18 9 9 11 3 10 16 2;"
    ],
    "preprocessed": "= 11 | head | tail | (list 10) 14 11 18 9 9 11 3 10 16 2;",
    "dt": false,
    "parse": [
      "=",
      "11",
      [
        -1,
        "head",
        [
          -1,
          "tail",
          [
            -1,
            [
              "list",
              "10"
            ],
            "14",
            "11",
            "18",
            "9",
            "9",
            "11",
            "3",
            "10",
            "16",
            "2"
          ]
        ]
      ]
    ],
    "code": "121130210113023121010000302312101000130232121001101302101033021110302101130210010302100130210013021011302113021010302100003021032233",
    "spider": "&#xf147;&#xf24a;&#xf20f;&#xf248;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20e;&#xf245;&#xf212;&#xf24a;&#xf20f;&#xf24a;&#xf216;&#xf24a;&#xf20d;&#xf24a;&#xf20d;&#xf24a;&#xf20f;&#xf24a;&#xf207;&#xf24a;&#xf20e;&#xf24a;&#xf214;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 706
  },
  {
    "role": "code",
    "lines": [
      "= 16 | head | tail | tail | (list 7) 19 7 16 17 12 1 18;"
    ],
    "preprocessed": "= 16 | head | tail | tail | (list 7) 19 7 16 17 12 1 18;",
    "dt": false,
    "parse": [
      "=",
      "16",
      [
        -1,
        "head",
        [
          -1,
          "tail",
          [
            -1,
            "tail",
            [
              -1,
              [
                "list",
                "7"
              ],
              "19",
              "7",
              "16",
              "17",
              "12",
              "1",
              "18"
            ]
          ]
        ]
      ]
    ],
    "code": "121130210000302312101000030231210100013023121010001302321210011013021113302100113021113021000030210001302110030213021001032233",
    "spider": "&#xf147;&#xf24a;&#xf214;&#xf248;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf248;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20b;&#xf245;&#xf217;&#xf24a;&#xf20b;&#xf24a;&#xf214;&#xf24a;&#xf215;&#xf24a;&#xf210;&#xf24a;&#xf205;&#xf24a;&#xf216;&#xf24b;",
    "stanza": 707
  },
  {
    "role": "code",
    "lines": [
      "= 18 | head | tail | tail | (list 6) 16 9 18 5 11 17;"
    ],
    "preprocessed": "= 18 | head | tail | tail | (list 6) 16 9 18 5 11 17;",
    "dt": false,
    "parse": [
      "=",
      "18",
      [
        -1,
        "head",
        [
          -1,
          "tail",
          [
            -1,
            "tail",
            [
              -1,
              [
                "list",
                "6"
              ],
              "16",
              "9",
              "18",
              "5",
              "11",
              "17"
            ]
          ]
        ]
      ]
    ],
    "code": "1211302100103023121010000302312101000130231210100013023212100110130211033021000030210013021001030210130210113021000132233",
    "spider": "&#xf147;&#xf24a;&#xf216;&#xf248;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf248;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20a;&#xf245;&#xf214;&#xf24a;&#xf20d;&#xf24a;&#xf216;&#xf24a;&#xf209;&#xf24a;&#xf20f;&#xf24a;&#xf215;&#xf24b;",
    "stanza": 708
  },
  {
    "role": "code",
    "lines": [
      "= 15 | head | tail | tail | (list 4) 1 0 15 18;"
    ],
    "preprocessed": "= 15 | head | tail | tail | (list 4) 1 0 15 18;",
    "dt": false,
    "parse": [
      "=",
      "15",
      [
        -1,
        "head",
        [
          -1,
          "tail",
          [
            -1,
            "tail",
            [
              -1,
              [
                "list",
                "4"
              ],
              "1",
              "0",
              "15",
              "18"
            ]
          ]
        ]
      ]
    ],
    "code": "121130211113023121010000302312101000130231210100013023212100110130210033021302030211113021001032233",
    "spider": "&#xf147;&#xf24a;&#xf213;&#xf248;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf248;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf205;&#xf24a;&#xf204;&#xf24a;&#xf213;&#xf24a;&#xf216;&#xf24b;",
    "stanza": 709
  },
  {
    "role": "code",
    "lines": [
      "= 4 | head | tail | tail | (list 6) 0 0 4 19 1 5;"
    ],
    "preprocessed": "= 4 | head | tail | tail | (list 6) 0 0 4 19 1 5;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        "head",
        [
          -1,
          "tail",
          [
            -1,
            "tail",
            [
              -1,
              [
                "list",
                "6"
              ],
              "0",
              "0",
              "4",
              "19",
              "1",
              "5"
            ]
          ]
        ]
      ]
    ],
    "code": "12113021003023121010000302312101000130231210100013023212100110130211033020302030210030210011302130210132233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf248;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20a;&#xf245;&#xf204;&#xf24a;&#xf204;&#xf24a;&#xf208;&#xf24a;&#xf217;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 710
  },
  {
    "role": "code",
    "lines": [
      "= 7 | head | tail | tail | (list 4) 7 1 7 14;"
    ],
    "preprocessed": "= 7 | head | tail | tail | (list 4) 7 1 7 14;",
    "dt": false,
    "parse": [
      "=",
      "7",
      [
        -1,
        "head",
        [
          -1,
          "tail",
          [
            -1,
            "tail",
            [
              -1,
              [
                "list",
                "4"
              ],
              "7",
              "1",
              "7",
              "14"
            ]
          ]
        ]
      ]
    ],
    "code": "12113021113023121010000302312101000130231210100013023212100110130210033021113021302111302111032233",
    "spider": "&#xf147;&#xf24a;&#xf20b;&#xf248;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf248;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf20b;&#xf24a;&#xf205;&#xf24a;&#xf20b;&#xf24a;&#xf212;&#xf24b;",
    "stanza": 711
  },
  {
    "role": "code",
    "lines": [
      "intro list-length;"
    ],
    "preprocessed": "intro list-length;",
    "dt": false,
    "parse": [
      "intro",
      "list-length"
    ],
    "code": "1210010312101001032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf156;&#xf24b;",
    "stanza": 712
  },
  {
    "role": "code",
    "lines": [
      "define list-length $car;"
    ],
    "preprocessed": "define list-length $car;",
    "dt": true,
    "parse": [
      "define",
      "list-length",
      [
        -2,
        "car"
      ]
    ],
    "code": "12110131210100103123121011032233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf156;&#xf249;&#xf15a;&#xf24b;",
    "stanza": 713
  },
  {
    "role": "code",
    "lines": [
      "= 4 | list-length | (list 4) 1 9 3 6;"
    ],
    "preprocessed": "= 4 | list-length | (list 4) 1 9 3 6;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        "list-length",
        [
          -1,
          [
            "list",
            "4"
          ],
          "1",
          "9",
          "3",
          "6"
        ]
      ]
    ],
    "code": "12113021003023121010010302321210011013021003302130210013021130211032233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf145;&#xf156;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf205;&#xf24a;&#xf20d;&#xf24a;&#xf207;&#xf24a;&#xf20a;&#xf24b;",
    "stanza": 714
  },
  {
    "role": "code",
    "lines": [
      "= 1 | list-length | (list 1) 6;"
    ],
    "preprocessed": "= 1 | list-length | (list 1) 6;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "list-length",
        [
          -1,
          [
            "list",
            "1"
          ],
          "6"
        ]
      ]
    ],
    "code": "121130213023121010010302321210011013021330211032233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf145;&#xf156;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf205;&#xf245;&#xf20a;&#xf24b;",
    "stanza": 715
  },
  {
    "role": "code",
    "lines": [
      "= 9 | list-length | (list 9) 6 2 5 8 7 4 1 3 0;"
    ],
    "preprocessed": "= 9 | list-length | (list 9) 6 2 5 8 7 4 1 3 0;",
    "dt": false,
    "parse": [
      "=",
      "9",
      [
        -1,
        "list-length",
        [
          -1,
          [
            "list",
            "9"
          ],
          "6",
          "2",
          "5",
          "8",
          "7",
          "4",
          "1",
          "3",
          "0"
        ]
      ]
    ],
    "code": "1211302100130231210100103023212100110130210013302110302103021013021000302111302100302130211302032233",
    "spider": "&#xf147;&#xf24a;&#xf20d;&#xf248;&#xf145;&#xf156;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20d;&#xf245;&#xf20a;&#xf24a;&#xf206;&#xf24a;&#xf209;&#xf24a;&#xf20c;&#xf24a;&#xf20b;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf24a;&#xf207;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 716
  },
  {
    "role": "code",
    "lines": [
      "= 7 | list-length | (list 7) 6 0 1 9 4 5 2;"
    ],
    "preprocessed": "= 7 | list-length | (list 7) 6 0 1 9 4 5 2;",
    "dt": false,
    "parse": [
      "=",
      "7",
      [
        -1,
        "list-length",
        [
          -1,
          [
            "list",
            "7"
          ],
          "6",
          "0",
          "1",
          "9",
          "4",
          "5",
          "2"
        ]
      ]
    ],
    "code": "121130211130231210100103023212100110130211133021103020302130210013021003021013021032233",
    "spider": "&#xf147;&#xf24a;&#xf20b;&#xf248;&#xf145;&#xf156;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20b;&#xf245;&#xf20a;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24a;&#xf20d;&#xf24a;&#xf208;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 717
  },
  {
    "role": "code",
    "lines": [
      "= 6 | list-length | (list 6) 2 4 7 0 3 8;"
    ],
    "preprocessed": "= 6 | list-length | (list 6) 2 4 7 0 3 8;",
    "dt": false,
    "parse": [
      "=",
      "6",
      [
        -1,
        "list-length",
        [
          -1,
          [
            "list",
            "6"
          ],
          "2",
          "4",
          "7",
          "0",
          "3",
          "8"
        ]
      ]
    ],
    "code": "1211302110302312101001030232121001101302110330210302100302111302030211302100032233",
    "spider": "&#xf147;&#xf24a;&#xf20a;&#xf248;&#xf145;&#xf156;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20a;&#xf245;&#xf206;&#xf24a;&#xf208;&#xf24a;&#xf20b;&#xf24a;&#xf204;&#xf24a;&#xf207;&#xf24a;&#xf20c;&#xf24b;",
    "stanza": 718
  },
  {
    "role": "code",
    "lines": [
      "intro list-ref;"
    ],
    "preprocessed": "intro list-ref;",
    "dt": false,
    "parse": [
      "intro",
      "list-ref"
    ],
    "code": "1210010312101001132233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf157;&#xf24b;",
    "stanza": 719
  },
  {
    "role": "code",
    "lines": [
      "define list-ref | ? x:list | ? n |",
      "  if (= 0 | car $x:list) $undefined |",
      "  if (= $n 0) (head $x:list) |",
      "  list-ref (tail $x:list) | - $n 1;"
    ],
    "preprocessed": "define list-ref | ? x:list | ? n |\n  if (= 0 | car $x:list) $undefined |\n  if (= $n 0) (head $x:list) |\n  list-ref (tail $x:list) | - $n 1;",
    "dt": true,
    "parse": [
      "define",
      "list-ref",
      [
        -1,
        "?",
        "x:list",
        [
          -1,
          "?",
          "n",
          [
            -1,
            "if",
            [
              "=",
              "0",
              [
                -1,
                "car",
                [
                  -2,
                  "x:list"
                ]
              ]
            ],
            [
              -2,
              "undefined"
            ],
            [
              -1,
              "if",
              [
                "=",
                [
                  -2,
                  "n"
                ],
                "0"
              ],
              [
                "head",
                [
                  -2,
                  "x:list"
                ]
              ],
              [
                -1,
                "list-ref",
                [
                  "tail",
                  [
                    -2,
                    "x:list"
                  ]
                ],
                [
                  -1,
                  "-",
                  [
                    -2,
                    "n"
                  ],
                  "1"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210100113023121100312121010013121001101330231211003121001110302312111132121130203023121011031231212101001312100110133312312100000302312111132121131231210011103020332121010000312312121010013121001101333023121010011321210100013123121210100131210011013330231210113123121001110302132233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf157;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf152;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf15a;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf249;&#xf164;&#xf248;&#xf153;&#xf246;&#xf147;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf248;&#xf145;&#xf157;&#xf246;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf248;&#xf14f;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 720
  },
  {
    "role": "code",
    "lines": [
      "= 15 | list-ref ((list 4) 5 8 15 3) 2;"
    ],
    "preprocessed": "= 15 | list-ref ((list 4) 5 8 15 3) 2;",
    "dt": false,
    "parse": [
      "=",
      "15",
      [
        -1,
        "list-ref",
        [
          [
            "list",
            "4"
          ],
          "5",
          "8",
          "15",
          "3"
        ],
        "2"
      ]
    ],
    "code": "1211302111130231210100113221210011013021003302101302100030211113021133021032233",
    "spider": "&#xf147;&#xf24a;&#xf213;&#xf248;&#xf145;&#xf157;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf209;&#xf24a;&#xf20c;&#xf24a;&#xf213;&#xf24a;&#xf207;&#xf245;&#xf206;&#xf24b;",
    "stanza": 721
  },
  {
    "role": "code",
    "lines": [
      "= 7 | list-ref ((list 7) 12 19 0 15 1 8 7) 6;"
    ],
    "preprocessed": "= 7 | list-ref ((list 7) 12 19 0 15 1 8 7) 6;",
    "dt": false,
    "parse": [
      "=",
      "7",
      [
        -1,
        "list-ref",
        [
          [
            "list",
            "7"
          ],
          "12",
          "19",
          "0",
          "15",
          "1",
          "8",
          "7"
        ],
        "6"
      ]
    ],
    "code": "1211302111302312101001132212100110130211133021100302100113020302111130213021000302111330211032233",
    "spider": "&#xf147;&#xf24a;&#xf20b;&#xf248;&#xf145;&#xf157;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20b;&#xf245;&#xf210;&#xf24a;&#xf217;&#xf24a;&#xf204;&#xf24a;&#xf213;&#xf24a;&#xf205;&#xf24a;&#xf20c;&#xf24a;&#xf20b;&#xf245;&#xf20a;&#xf24b;",
    "stanza": 722
  },
  {
    "role": "code",
    "lines": [
      "= 4 | list-ref ((list 2) 4 6) 0;"
    ],
    "preprocessed": "= 4 | list-ref ((list 2) 4 6) 0;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        "list-ref",
        [
          [
            "list",
            "2"
          ],
          "4",
          "6"
        ],
        "0"
      ]
    ],
    "code": "121130210030231210100113221210011013021033021003021103302032233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf145;&#xf157;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf208;&#xf24a;&#xf20a;&#xf245;&#xf204;&#xf24b;",
    "stanza": 723
  },
  {
    "role": "code",
    "lines": [
      "= 13 | list-ref ((list 4) 11 10 13 8) 2;"
    ],
    "preprocessed": "= 13 | list-ref ((list 4) 11 10 13 8) 2;",
    "dt": false,
    "parse": [
      "=",
      "13",
      [
        -1,
        "list-ref",
        [
          [
            "list",
            "4"
          ],
          "11",
          "10",
          "13",
          "8"
        ],
        "2"
      ]
    ],
    "code": "1211302110130231210100113221210011013021003302101130210103021101302100033021032233",
    "spider": "&#xf147;&#xf24a;&#xf211;&#xf248;&#xf145;&#xf157;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf20f;&#xf24a;&#xf20e;&#xf24a;&#xf211;&#xf24a;&#xf20c;&#xf245;&#xf206;&#xf24b;",
    "stanza": 724
  },
  {
    "role": "code",
    "lines": [
      "= 2 | list-ref ((list 6) 9 2 9 8 10 12) 1;"
    ],
    "preprocessed": "= 2 | list-ref ((list 6) 9 2 9 8 10 12) 1;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "list-ref",
        [
          [
            "list",
            "6"
          ],
          "9",
          "2",
          "9",
          "8",
          "10",
          "12"
        ],
        "1"
      ]
    ],
    "code": "1211302103023121010011322121001101302110330210013021030210013021000302101030211003302132233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf145;&#xf157;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20a;&#xf245;&#xf20d;&#xf24a;&#xf206;&#xf24a;&#xf20d;&#xf24a;&#xf20c;&#xf24a;&#xf20e;&#xf24a;&#xf210;&#xf245;&#xf205;&#xf24b;",
    "stanza": 725
  },
  {
    "role": "code",
    "lines": [
      "= 7 | list-ref ((list 4) 18 7 12 13) 1;"
    ],
    "preprocessed": "= 7 | list-ref ((list 4) 18 7 12 13) 1;",
    "dt": false,
    "parse": [
      "=",
      "7",
      [
        -1,
        "list-ref",
        [
          [
            "list",
            "4"
          ],
          "18",
          "7",
          "12",
          "13"
        ],
        "1"
      ]
    ],
    "code": "12113021113023121010011322121001101302100330210010302111302110030211013302132233",
    "spider": "&#xf147;&#xf24a;&#xf20b;&#xf248;&#xf145;&#xf157;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf216;&#xf24a;&#xf20b;&#xf24a;&#xf210;&#xf24a;&#xf211;&#xf245;&#xf205;&#xf24b;",
    "stanza": 726
  },
  {
    "role": "code",
    "lines": [
      "= 2 | list-ref ((list 9) 3 3 5 6 2 16 10 1 1) 4;"
    ],
    "preprocessed": "= 2 | list-ref ((list 9) 3 3 5 6 2 16 10 1 1) 4;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "list-ref",
        [
          [
            "list",
            "9"
          ],
          "3",
          "3",
          "5",
          "6",
          "2",
          "16",
          "10",
          "1",
          "1"
        ],
        "4"
      ]
    ],
    "code": "12113021030231210100113221210011013021001330211302113021013021103021030210000302101030213021330210032233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf145;&#xf157;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20d;&#xf245;&#xf207;&#xf24a;&#xf207;&#xf24a;&#xf209;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf24a;&#xf214;&#xf24a;&#xf20e;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf208;&#xf24b;",
    "stanza": 727
  },
  {
    "role": "code",
    "lines": [
      "= 13 | list-ref ((list 7) 11 13 9 12 5 7 5) 1;"
    ],
    "preprocessed": "= 13 | list-ref ((list 7) 11 13 9 12 5 7 5) 1;",
    "dt": false,
    "parse": [
      "=",
      "13",
      [
        -1,
        "list-ref",
        [
          [
            "list",
            "7"
          ],
          "11",
          "13",
          "9",
          "12",
          "5",
          "7",
          "5"
        ],
        "1"
      ]
    ],
    "code": "121130211013023121010011322121001101302111330210113021101302100130211003021013021113021013302132233",
    "spider": "&#xf147;&#xf24a;&#xf211;&#xf248;&#xf145;&#xf157;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20b;&#xf245;&#xf20f;&#xf24a;&#xf211;&#xf24a;&#xf20d;&#xf24a;&#xf210;&#xf24a;&#xf209;&#xf24a;&#xf20b;&#xf24a;&#xf209;&#xf245;&#xf205;&#xf24b;",
    "stanza": 728
  },
  {
    "role": "code",
    "lines": [
      "= 17 | list-ref ((list 9) 13 17 14 16 0 2 9 3 5) 1;"
    ],
    "preprocessed": "= 17 | list-ref ((list 9) 13 17 14 16 0 2 9 3 5) 1;",
    "dt": false,
    "parse": [
      "=",
      "17",
      [
        -1,
        "list-ref",
        [
          [
            "list",
            "9"
          ],
          "13",
          "17",
          "14",
          "16",
          "0",
          "2",
          "9",
          "3",
          "5"
        ],
        "1"
      ]
    ],
    "code": "1211302100013023121010011322121001101302100133021101302100013021110302100003020302103021001302113021013302132233",
    "spider": "&#xf147;&#xf24a;&#xf215;&#xf248;&#xf145;&#xf157;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20d;&#xf245;&#xf211;&#xf24a;&#xf215;&#xf24a;&#xf212;&#xf24a;&#xf214;&#xf24a;&#xf204;&#xf24a;&#xf206;&#xf24a;&#xf20d;&#xf24a;&#xf207;&#xf24a;&#xf209;&#xf245;&#xf205;&#xf24b;",
    "stanza": 729
  },
  {
    "role": "code",
    "lines": [
      "= 1 | list-ref ((list 9) 18 10 4 1 17 18 8 8 8) 3;"
    ],
    "preprocessed": "= 1 | list-ref ((list 9) 18 10 4 1 17 18 8 8 8) 3;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "list-ref",
        [
          [
            "list",
            "9"
          ],
          "18",
          "10",
          "4",
          "1",
          "17",
          "18",
          "8",
          "8",
          "8"
        ],
        "3"
      ]
    ],
    "code": "121130213023121010011322121001101302100133021001030210103021003021302100013021001030210003021000302100033021132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf145;&#xf157;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20d;&#xf245;&#xf216;&#xf24a;&#xf20e;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf24a;&#xf215;&#xf24a;&#xf216;&#xf24a;&#xf20c;&#xf24a;&#xf20c;&#xf24a;&#xf20c;&#xf245;&#xf207;&#xf24b;",
    "stanza": 730
  },
  {
    "role": "code",
    "lines": [
      "intro function?;"
    ],
    "preprocessed": "intro function?;",
    "dt": false,
    "parse": [
      "intro",
      "function?"
    ],
    "code": "121001031210110032233",
    "spider": "&#xf156;&#xf24a;&#xf170;&#xf24b;",
    "stanza": 731
  },
  {
    "role": "code",
    "lines": [
      "function? | ? x 1;"
    ],
    "preprocessed": "function? | ? x 1;",
    "dt": false,
    "parse": [
      "function?",
      [
        -1,
        "?",
        "x",
        "1"
      ]
    ],
    "code": "121011003023121100312101001302132233",
    "spider": "&#xf170;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 732
  },
  {
    "role": "code",
    "lines": [
      "not | function? 1;"
    ],
    "preprocessed": "not | function? 1;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "function?",
        "1"
      ]
    ],
    "code": "12101302312101100302132233",
    "spider": "&#xf149;&#xf248;&#xf170;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 733
  },
  {
    "role": "code",
    "lines": [
      "not | function? | + 1 1;"
    ],
    "preprocessed": "not | function? | + 1 1;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "function?",
        [
          -1,
          "+",
          "1",
          "1"
        ]
      ]
    ],
    "code": "1210130231210110030231210103021302132233",
    "spider": "&#xf149;&#xf248;&#xf170;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 734
  },
  {
    "role": "code",
    "lines": [
      "function? | ? y | + $y 2;"
    ],
    "preprocessed": "function? | ? y | + $y 2;",
    "dt": false,
    "parse": [
      "function?",
      [
        -1,
        "?",
        "y",
        [
          -1,
          "+",
          [
            -2,
            "y"
          ],
          "2"
        ]
      ]
    ],
    "code": "1210110030231211003121000001302312101031231210000013021032233",
    "spider": "&#xf170;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14e;&#xf249;&#xf145;&#xf145;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 735
  },
  {
    "role": "code",
    "lines": [
      "function? $*;"
    ],
    "preprocessed": "function? $*;",
    "dt": false,
    "parse": [
      "function?",
      [
        -2,
        "*"
      ]
    ],
    "code": "12101100312312100132233",
    "spider": "&#xf170;&#xf249;&#xf14d;&#xf24b;",
    "stanza": 736
  },
  {
    "role": "code",
    "lines": [
      "not | function? | = 1 2;"
    ],
    "preprocessed": "not | function? | = 1 2;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "function?",
        [
          -1,
          "=",
          "1",
          "2"
        ]
      ]
    ],
    "code": "121013023121011003023121130213021032233",
    "spider": "&#xf149;&#xf248;&#xf170;&#xf248;&#xf147;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 737
  },
  {
    "role": "code",
    "lines": [
      "intro equal;"
    ],
    "preprocessed": "intro equal;",
    "dt": false,
    "parse": [
      "intro",
      "equal"
    ],
    "code": "1210010312100032233",
    "spider": "&#xf156;&#xf24a;&#xf14c;&#xf24b;",
    "stanza": 738
  },
  {
    "role": "code",
    "lines": [
      "define equal | ? x | ? y |",
      "  if (not | = (function? $x) (function? $y)) $false |",
      "  if (function? $x) (list= $x $y) (= $x $y);"
    ],
    "preprocessed": "define equal | ? x | ? y |\n  if (not | = (function? $x) (function? $y)) $false |\n  if (function? $x) (list= $x $y) (= $x $y);",
    "dt": true,
    "parse": [
      "define",
      "equal",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              "not",
              [
                -1,
                "=",
                [
                  "function?",
                  [
                    -2,
                    "x"
                  ]
                ],
                [
                  "function?",
                  [
                    -2,
                    "y"
                  ]
                ]
              ]
            ],
            [
              -2,
              "false"
            ],
            [
              -1,
              "if",
              [
                "function?",
                [
                  -2,
                  "x"
                ]
              ],
              [
                "list=",
                [
                  -2,
                  "x"
                ],
                [
                  -2,
                  "y"
                ]
              ],
              [
                "=",
                [
                  -2,
                  "x"
                ],
                [
                  -2,
                  "y"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210003023121100312101001302312110031210000013023121111321210130231211321210110031231210100133212101100312312100000133312312030231211113212101100312312101001332121010100312312101001312312100000133212113123121010013123121000001332233",
    "spider": "&#xf151;&#xf24a;&#xf14c;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf147;&#xf246;&#xf170;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf170;&#xf249;&#xf145;&#xf145;&#xf245;&#xf245;&#xf249;&#xf144;&#xf248;&#xf153;&#xf246;&#xf170;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf158;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf24b;",
    "stanza": 739
  },
  {
    "role": "code",
    "lines": [
      "intro list=;"
    ],
    "preprocessed": "intro list=;",
    "dt": false,
    "parse": [
      "intro",
      "list="
    ],
    "code": "1210010312101010032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf158;&#xf24b;",
    "stanza": 740
  },
  {
    "role": "code",
    "lines": [
      "define list= | ? x | ? y |",
      "  if (not | = (list-length $x) (list-length $y)) $false |",
      "  if (= 0 | list-length $x) $true |",
      "  if (not | equal (head $x) (head $y)) $false |",
      "  list= (tail $x) (tail $y);"
    ],
    "preprocessed": "define list= | ? x | ? y |\n  if (not | = (list-length $x) (list-length $y)) $false |\n  if (= 0 | list-length $x) $true |\n  if (not | equal (head $x) (head $y)) $false |\n  list= (tail $x) (tail $y);",
    "dt": true,
    "parse": [
      "define",
      "list=",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              "not",
              [
                -1,
                "=",
                [
                  "list-length",
                  [
                    -2,
                    "x"
                  ]
                ],
                [
                  "list-length",
                  [
                    -2,
                    "y"
                  ]
                ]
              ]
            ],
            [
              -2,
              "false"
            ],
            [
              -1,
              "if",
              [
                "=",
                "0",
                [
                  -1,
                  "list-length",
                  [
                    -2,
                    "x"
                  ]
                ]
              ],
              [
                -2,
                "true"
              ],
              [
                -1,
                "if",
                [
                  "not",
                  [
                    -1,
                    "equal",
                    [
                      "head",
                      [
                        -2,
                        "x"
                      ]
                    ],
                    [
                      "head",
                      [
                        -2,
                        "y"
                      ]
                    ]
                  ]
                ],
                [
                  -2,
                  "false"
                ],
                [
                  -1,
                  "list=",
                  [
                    "tail",
                    [
                      -2,
                      "x"
                    ]
                  ],
                  [
                    "tail",
                    [
                      -2,
                      "y"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210101003023121100312101001302312110031210000013023121111321210130231211321210100103123121010013321210100103123121000001333123120302312111132121130203023121010010312312101001331231213023121111321210130231210003212101000031231210100133212101000031231210000013331231203023121010100321210100013123121010013321210100013123121000001332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf158;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf147;&#xf246;&#xf145;&#xf156;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf156;&#xf249;&#xf145;&#xf145;&#xf245;&#xf245;&#xf249;&#xf144;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf145;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf14c;&#xf246;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf154;&#xf249;&#xf145;&#xf145;&#xf245;&#xf245;&#xf249;&#xf144;&#xf248;&#xf145;&#xf158;&#xf246;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf155;&#xf249;&#xf145;&#xf145;&#xf245;&#xf24b;",
    "stanza": 741
  },
  {
    "role": "code",
    "lines": [
      "equal 1 1;"
    ],
    "preprocessed": "equal 1 1;",
    "dt": false,
    "parse": [
      "equal",
      "1",
      "1"
    ],
    "code": "1210003021302132233",
    "spider": "&#xf14c;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 742
  },
  {
    "role": "code",
    "lines": [
      "equal ((list 2) 5 3) ((list 2) 5 3);"
    ],
    "preprocessed": "equal ((list 2) 5 3) ((list 2) 5 3);",
    "dt": false,
    "parse": [
      "equal",
      [
        [
          "list",
          "2"
        ],
        "5",
        "3"
      ],
      [
        [
          "list",
          "2"
        ],
        "5",
        "3"
      ]
    ],
    "code": "12100032212100110130210330210130211332212100110130210330210130211332233",
    "spider": "&#xf14c;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf209;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf209;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 743
  },
  {
    "role": "code",
    "lines": [
      "not | equal ((list 2) 5 3) ((list 3) 5 3 9);"
    ],
    "preprocessed": "not | equal ((list 2) 5 3) ((list 3) 5 3 9);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "equal",
        [
          [
            "list",
            "2"
          ],
          "5",
          "3"
        ],
        [
          [
            "list",
            "3"
          ],
          "5",
          "3",
          "9"
        ]
      ]
    ],
    "code": "121013023121000322121001101302103302101302113322121001101302113302101302113021001332233",
    "spider": "&#xf149;&#xf248;&#xf14c;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf209;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf209;&#xf24a;&#xf207;&#xf24a;&#xf20d;&#xf245;&#xf24b;",
    "stanza": 744
  },
  {
    "role": "code",
    "lines": [
      "not | equal ((list 2) 5 3) ((list 2) 5 4);"
    ],
    "preprocessed": "not | equal ((list 2) 5 3) ((list 2) 5 4);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "equal",
        [
          [
            "list",
            "2"
          ],
          "5",
          "3"
        ],
        [
          [
            "list",
            "2"
          ],
          "5",
          "4"
        ]
      ]
    ],
    "code": "121013023121000322121001101302103302101302113322121001101302103302101302100332233",
    "spider": "&#xf149;&#xf248;&#xf14c;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf209;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf209;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 745
  },
  {
    "role": "code",
    "lines": [
      "not | equal ((list 2) 5 3) ((list 2) 4 3);"
    ],
    "preprocessed": "not | equal ((list 2) 5 3) ((list 2) 4 3);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "equal",
        [
          [
            "list",
            "2"
          ],
          "5",
          "3"
        ],
        [
          [
            "list",
            "2"
          ],
          "4",
          "3"
        ]
      ]
    ],
    "code": "12101302312100032212100110130210330210130211332212100110130210330210030211332233",
    "spider": "&#xf149;&#xf248;&#xf14c;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf209;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf208;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 746
  },
  {
    "role": "code",
    "lines": [
      "not | equal ((list 2) 5 3) 12;"
    ],
    "preprocessed": "not | equal ((list 2) 5 3) 12;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "equal",
        [
          [
            "list",
            "2"
          ],
          "5",
          "3"
        ],
        "12"
      ]
    ],
    "code": "121013023121000322121001101302103302101302113302110032233",
    "spider": "&#xf149;&#xf248;&#xf14c;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf209;&#xf24a;&#xf207;&#xf245;&#xf210;&#xf24b;",
    "stanza": 747
  },
  {
    "role": "code",
    "lines": [
      "equal ((list 3) 5 3 9) ((list 3) 5 3 9);"
    ],
    "preprocessed": "equal ((list 3) 5 3 9) ((list 3) 5 3 9);",
    "dt": false,
    "parse": [
      "equal",
      [
        [
          "list",
          "3"
        ],
        "5",
        "3",
        "9"
      ],
      [
        [
          "list",
          "3"
        ],
        "5",
        "3",
        "9"
      ]
    ],
    "code": "1210003221210011013021133021013021130210013322121001101302113302101302113021001332233",
    "spider": "&#xf14c;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf209;&#xf24a;&#xf207;&#xf24a;&#xf20d;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf209;&#xf24a;&#xf207;&#xf24a;&#xf20d;&#xf245;&#xf24b;",
    "stanza": 748
  },
  {
    "role": "code",
    "lines": [
      "equal ((list 3) 5 ((list 2) 15 1) 9) ((list 3) 5 ((list 2) 15 1) 9);"
    ],
    "preprocessed": "equal ((list 3) 5 ((list 2) 15 1) 9) ((list 3) 5 ((list 2) 15 1) 9);",
    "dt": false,
    "parse": [
      "equal",
      [
        [
          "list",
          "3"
        ],
        "5",
        [
          [
            "list",
            "2"
          ],
          "15",
          "1"
        ],
        "9"
      ],
      [
        [
          "list",
          "3"
        ],
        "5",
        [
          [
            "list",
            "2"
          ],
          "15",
          "1"
        ],
        "9"
      ]
    ],
    "code": "121000322121001101302113302101322121001101302103302111130213302100133221210011013021133021013221210011013021033021111302133021001332233",
    "spider": "&#xf14c;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf209;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf213;&#xf24a;&#xf205;&#xf245;&#xf20d;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf209;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf213;&#xf24a;&#xf205;&#xf245;&#xf20d;&#xf245;&#xf24b;",
    "stanza": 749
  },
  {
    "role": "code",
    "lines": [
      "not | equal ((list 3) 5 ((list 2) 15 1) 9) ((list 3) 5 ((list 2) 14 1) 9);"
    ],
    "preprocessed": "not | equal ((list 3) 5 ((list 2) 15 1) 9) ((list 3) 5 ((list 2) 14 1) 9);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "equal",
        [
          [
            "list",
            "3"
          ],
          "5",
          [
            [
              "list",
              "2"
            ],
            "15",
            "1"
          ],
          "9"
        ],
        [
          [
            "list",
            "3"
          ],
          "5",
          [
            [
              "list",
              "2"
            ],
            "14",
            "1"
          ],
          "9"
        ]
      ]
    ],
    "code": "121013023121000322121001101302113302101322121001101302103302111130213302100133221210011013021133021013221210011013021033021110302133021001332233",
    "spider": "&#xf149;&#xf248;&#xf14c;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf209;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf213;&#xf24a;&#xf205;&#xf245;&#xf20d;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf209;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf212;&#xf24a;&#xf205;&#xf245;&#xf20d;&#xf245;&#xf24b;",
    "stanza": 750
  },
  {
    "role": "code",
    "lines": [
      "not | equal ((list 3) 5 3 9) ((list 3) 5 ((list 2) 14 1) 9);"
    ],
    "preprocessed": "not | equal ((list 3) 5 3 9) ((list 3) 5 ((list 2) 14 1) 9);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "equal",
        [
          [
            "list",
            "3"
          ],
          "5",
          "3",
          "9"
        ],
        [
          [
            "list",
            "3"
          ],
          "5",
          [
            [
              "list",
              "2"
            ],
            "14",
            "1"
          ],
          "9"
        ]
      ]
    ],
    "code": "12101302312100032212100110130211330210130211302100133221210011013021133021013221210011013021033021110302133021001332233",
    "spider": "&#xf149;&#xf248;&#xf14c;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf209;&#xf24a;&#xf207;&#xf24a;&#xf20d;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf209;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf212;&#xf24a;&#xf205;&#xf245;&#xf20d;&#xf245;&#xf24b;",
    "stanza": 751
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 8) 7 15 18 11 13 0 13 6) 7;"
    ],
    "preprocessed": "= (head | (list 8) 7 15 18 11 13 0 13 6) 7;",
    "dt": false,
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "8"
          ],
          "7",
          "15",
          "18",
          "11",
          "13",
          "0",
          "13",
          "6"
        ]
      ],
      "7"
    ],
    "code": "12113212101000030232121001101302100033021113021111302100103021011302110130203021101302110330211132233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf154;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20c;&#xf245;&#xf20b;&#xf24a;&#xf213;&#xf24a;&#xf216;&#xf24a;&#xf20f;&#xf24a;&#xf211;&#xf24a;&#xf204;&#xf24a;&#xf211;&#xf24a;&#xf20a;&#xf245;&#xf20b;&#xf24b;",
    "stanza": 752
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 8) 7 15 18 11 13 0 13 6) ((list 7) 15 18 11 13 0 13 6);"
    ],
    "preprocessed": "list= (tail | (list 8) 7 15 18 11 13 0 13 6) ((list 7) 15 18 11 13 0 13 6);",
    "dt": false,
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "8"
          ],
          "7",
          "15",
          "18",
          "11",
          "13",
          "0",
          "13",
          "6"
        ]
      ],
      [
        [
          "list",
          "7"
        ],
        "15",
        "18",
        "11",
        "13",
        "0",
        "13",
        "6"
      ]
    ],
    "code": "1210101003212101000130232121001101302100033021113021111302100103021011302110130203021101302110332212100110130211133021111302100103021011302110130203021101302110332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20c;&#xf245;&#xf20b;&#xf24a;&#xf213;&#xf24a;&#xf216;&#xf24a;&#xf20f;&#xf24a;&#xf211;&#xf24a;&#xf204;&#xf24a;&#xf211;&#xf24a;&#xf20a;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20b;&#xf245;&#xf213;&#xf24a;&#xf216;&#xf24a;&#xf20f;&#xf24a;&#xf211;&#xf24a;&#xf204;&#xf24a;&#xf211;&#xf24a;&#xf20a;&#xf245;&#xf24b;",
    "stanza": 753
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 9) 7 17 11 10 1 3 18 13 5) 7;"
    ],
    "preprocessed": "= (head | (list 9) 7 17 11 10 1 3 18 13 5) 7;",
    "dt": false,
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "9"
          ],
          "7",
          "17",
          "11",
          "10",
          "1",
          "3",
          "18",
          "13",
          "5"
        ]
      ],
      "7"
    ],
    "code": "12113212101000030232121001101302100133021113021000130210113021010302130211302100103021101302101330211132233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf154;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20d;&#xf245;&#xf20b;&#xf24a;&#xf215;&#xf24a;&#xf20f;&#xf24a;&#xf20e;&#xf24a;&#xf205;&#xf24a;&#xf207;&#xf24a;&#xf216;&#xf24a;&#xf211;&#xf24a;&#xf209;&#xf245;&#xf20b;&#xf24b;",
    "stanza": 754
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 9) 7 17 11 10 1 3 18 13 5) ((list 8) 17 11 10 1 3 18 13 5);"
    ],
    "preprocessed": "list= (tail | (list 9) 7 17 11 10 1 3 18 13 5) ((list 8) 17 11 10 1 3 18 13 5);",
    "dt": false,
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "9"
          ],
          "7",
          "17",
          "11",
          "10",
          "1",
          "3",
          "18",
          "13",
          "5"
        ]
      ],
      [
        [
          "list",
          "8"
        ],
        "17",
        "11",
        "10",
        "1",
        "3",
        "18",
        "13",
        "5"
      ]
    ],
    "code": "12101010032121010001302321210011013021001330211130210001302101130210103021302113021001030211013021013322121001101302100033021000130210113021010302130211302100103021101302101332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20d;&#xf245;&#xf20b;&#xf24a;&#xf215;&#xf24a;&#xf20f;&#xf24a;&#xf20e;&#xf24a;&#xf205;&#xf24a;&#xf207;&#xf24a;&#xf216;&#xf24a;&#xf211;&#xf24a;&#xf209;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20c;&#xf245;&#xf215;&#xf24a;&#xf20f;&#xf24a;&#xf20e;&#xf24a;&#xf205;&#xf24a;&#xf207;&#xf24a;&#xf216;&#xf24a;&#xf211;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 755
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 7) 0 15 15 10 12 2 4) 0;"
    ],
    "preprocessed": "= (head | (list 7) 0 15 15 10 12 2 4) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "7"
          ],
          "0",
          "15",
          "15",
          "10",
          "12",
          "2",
          "4"
        ]
      ],
      "0"
    ],
    "code": "12113212101000030232121001101302111330203021111302111130210103021100302103021003302032233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf154;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20b;&#xf245;&#xf204;&#xf24a;&#xf213;&#xf24a;&#xf213;&#xf24a;&#xf20e;&#xf24a;&#xf210;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf245;&#xf204;&#xf24b;",
    "stanza": 756
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 7) 0 15 15 10 12 2 4) ((list 6) 15 15 10 12 2 4);"
    ],
    "preprocessed": "list= (tail | (list 7) 0 15 15 10 12 2 4) ((list 6) 15 15 10 12 2 4);",
    "dt": false,
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "7"
          ],
          "0",
          "15",
          "15",
          "10",
          "12",
          "2",
          "4"
        ]
      ],
      [
        [
          "list",
          "6"
        ],
        "15",
        "15",
        "10",
        "12",
        "2",
        "4"
      ]
    ],
    "code": "12101010032121010001302321210011013021113302030211113021111302101030211003021030210033221210011013021103302111130211113021010302110030210302100332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20b;&#xf245;&#xf204;&#xf24a;&#xf213;&#xf24a;&#xf213;&#xf24a;&#xf20e;&#xf24a;&#xf210;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20a;&#xf245;&#xf213;&#xf24a;&#xf213;&#xf24a;&#xf20e;&#xf24a;&#xf210;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 757
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 5) 18 12 3 18 8) 18;"
    ],
    "preprocessed": "= (head | (list 5) 18 12 3 18 8) 18;",
    "dt": false,
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "5"
          ],
          "18",
          "12",
          "3",
          "18",
          "8"
        ]
      ],
      "18"
    ],
    "code": "1211321210100003023212100110130210133021001030211003021130210010302100033021001032233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf154;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf209;&#xf245;&#xf216;&#xf24a;&#xf210;&#xf24a;&#xf207;&#xf24a;&#xf216;&#xf24a;&#xf20c;&#xf245;&#xf216;&#xf24b;",
    "stanza": 758
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 5) 18 12 3 18 8) ((list 4) 12 3 18 8);"
    ],
    "preprocessed": "list= (tail | (list 5) 18 12 3 18 8) ((list 4) 12 3 18 8);",
    "dt": false,
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "5"
          ],
          "18",
          "12",
          "3",
          "18",
          "8"
        ]
      ],
      [
        [
          "list",
          "4"
        ],
        "12",
        "3",
        "18",
        "8"
      ]
    ],
    "code": "121010100321210100013023212100110130210133021001030211003021130210010302100033221210011013021003302110030211302100103021000332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf209;&#xf245;&#xf216;&#xf24a;&#xf210;&#xf24a;&#xf207;&#xf24a;&#xf216;&#xf24a;&#xf20c;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf210;&#xf24a;&#xf207;&#xf24a;&#xf216;&#xf24a;&#xf20c;&#xf245;&#xf24b;",
    "stanza": 759
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 2) 17 13) 17;"
    ],
    "preprocessed": "= (head | (list 2) 17 13) 17;",
    "dt": false,
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "2"
          ],
          "17",
          "13"
        ]
      ],
      "17"
    ],
    "code": "1211321210100003023212100110130210330210001302110133021000132233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf154;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf215;&#xf24a;&#xf211;&#xf245;&#xf215;&#xf24b;",
    "stanza": 760
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 2) 17 13) ((list 1) 13);"
    ],
    "preprocessed": "list= (tail | (list 2) 17 13) ((list 1) 13);",
    "dt": false,
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "2"
          ],
          "17",
          "13"
        ]
      ],
      [
        [
          "list",
          "1"
        ],
        "13"
      ]
    ],
    "code": "12101010032121010001302321210011013021033021000130211013322121001101302133021101332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf215;&#xf24a;&#xf211;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf205;&#xf245;&#xf211;&#xf245;&#xf24b;",
    "stanza": 761
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 5) 5 6 1 19 13) 5;"
    ],
    "preprocessed": "= (head | (list 5) 5 6 1 19 13) 5;",
    "dt": false,
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "5"
          ],
          "5",
          "6",
          "1",
          "19",
          "13"
        ]
      ],
      "5"
    ],
    "code": "1211321210100003023212100110130210133021013021103021302100113021101330210132233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf154;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf209;&#xf245;&#xf209;&#xf24a;&#xf20a;&#xf24a;&#xf205;&#xf24a;&#xf217;&#xf24a;&#xf211;&#xf245;&#xf209;&#xf24b;",
    "stanza": 762
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 5) 5 6 1 19 13) ((list 4) 6 1 19 13);"
    ],
    "preprocessed": "list= (tail | (list 5) 5 6 1 19 13) ((list 4) 6 1 19 13);",
    "dt": false,
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "5"
          ],
          "5",
          "6",
          "1",
          "19",
          "13"
        ]
      ],
      [
        [
          "list",
          "4"
        ],
        "6",
        "1",
        "19",
        "13"
      ]
    ],
    "code": "121010100321210100013023212100110130210133021013021103021302100113021101332212100110130210033021103021302100113021101332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf209;&#xf245;&#xf209;&#xf24a;&#xf20a;&#xf24a;&#xf205;&#xf24a;&#xf217;&#xf24a;&#xf211;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf20a;&#xf24a;&#xf205;&#xf24a;&#xf217;&#xf24a;&#xf211;&#xf245;&#xf24b;",
    "stanza": 763
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 9) 5 1 6 14 6 15 4 16 5) 5;"
    ],
    "preprocessed": "= (head | (list 9) 5 1 6 14 6 15 4 16 5) 5;",
    "dt": false,
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "9"
          ],
          "5",
          "1",
          "6",
          "14",
          "6",
          "15",
          "4",
          "16",
          "5"
        ]
      ],
      "5"
    ],
    "code": "121132121010000302321210011013021001330210130213021103021110302110302111130210030210000302101330210132233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf154;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20d;&#xf245;&#xf209;&#xf24a;&#xf205;&#xf24a;&#xf20a;&#xf24a;&#xf212;&#xf24a;&#xf20a;&#xf24a;&#xf213;&#xf24a;&#xf208;&#xf24a;&#xf214;&#xf24a;&#xf209;&#xf245;&#xf209;&#xf24b;",
    "stanza": 764
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 9) 5 1 6 14 6 15 4 16 5) ((list 8) 1 6 14 6 15 4 16 5);"
    ],
    "preprocessed": "list= (tail | (list 9) 5 1 6 14 6 15 4 16 5) ((list 8) 1 6 14 6 15 4 16 5);",
    "dt": false,
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "9"
          ],
          "5",
          "1",
          "6",
          "14",
          "6",
          "15",
          "4",
          "16",
          "5"
        ]
      ],
      [
        [
          "list",
          "8"
        ],
        "1",
        "6",
        "14",
        "6",
        "15",
        "4",
        "16",
        "5"
      ]
    ],
    "code": "1210101003212101000130232121001101302100133021013021302110302111030211030211113021003021000030210133221210011013021000330213021103021110302110302111130210030210000302101332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20d;&#xf245;&#xf209;&#xf24a;&#xf205;&#xf24a;&#xf20a;&#xf24a;&#xf212;&#xf24a;&#xf20a;&#xf24a;&#xf213;&#xf24a;&#xf208;&#xf24a;&#xf214;&#xf24a;&#xf209;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20c;&#xf245;&#xf205;&#xf24a;&#xf20a;&#xf24a;&#xf212;&#xf24a;&#xf20a;&#xf24a;&#xf213;&#xf24a;&#xf208;&#xf24a;&#xf214;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 765
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 4) 16 8 6 18) 16;"
    ],
    "preprocessed": "= (head | (list 4) 16 8 6 18) 16;",
    "dt": false,
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "4"
          ],
          "16",
          "8",
          "6",
          "18"
        ]
      ],
      "16"
    ],
    "code": "1211321210100003023212100110130210033021000030210003021103021001033021000032233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf154;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf214;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf24a;&#xf216;&#xf245;&#xf214;&#xf24b;",
    "stanza": 766
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 4) 16 8 6 18) ((list 3) 8 6 18);"
    ],
    "preprocessed": "list= (tail | (list 4) 16 8 6 18) ((list 3) 8 6 18);",
    "dt": false,
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "4"
          ],
          "16",
          "8",
          "6",
          "18"
        ]
      ],
      [
        [
          "list",
          "3"
        ],
        "8",
        "6",
        "18"
      ]
    ],
    "code": "12101010032121010001302321210011013021003302100003021000302110302100103322121001101302113302100030211030210010332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf214;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf24a;&#xf216;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf20c;&#xf24a;&#xf20a;&#xf24a;&#xf216;&#xf245;&#xf24b;",
    "stanza": 767
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 3) 9 1 1) 9;"
    ],
    "preprocessed": "= (head | (list 3) 9 1 1) 9;",
    "dt": false,
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "3"
          ],
          "9",
          "1",
          "1"
        ]
      ],
      "9"
    ],
    "code": "121132121010000302321210011013021133021001302130213302100132233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf154;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf20d;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf20d;&#xf24b;",
    "stanza": 768
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 3) 9 1 1) ((list 2) 1 1);"
    ],
    "preprocessed": "list= (tail | (list 3) 9 1 1) ((list 2) 1 1);",
    "dt": false,
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "3"
          ],
          "9",
          "1",
          "1"
        ]
      ],
      [
        [
          "list",
          "2"
        ],
        "1",
        "1"
      ]
    ],
    "code": "1210101003212101000130232121001101302113302100130213021332212100110130210330213021332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf20d;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 769
  },
  {
    "role": "code",
    "lines": [
      "= (head | (list 4) 11 16 11 2) 11;"
    ],
    "preprocessed": "= (head | (list 4) 11 16 11 2) 11;",
    "dt": false,
    "parse": [
      "=",
      [
        "head",
        [
          -1,
          [
            "list",
            "4"
          ],
          "11",
          "16",
          "11",
          "2"
        ]
      ],
      "11"
    ],
    "code": "1211321210100003023212100110130210033021011302100003021011302103302101132233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf154;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf20f;&#xf24a;&#xf214;&#xf24a;&#xf20f;&#xf24a;&#xf206;&#xf245;&#xf20f;&#xf24b;",
    "stanza": 770
  },
  {
    "role": "code",
    "lines": [
      "list= (tail | (list 4) 11 16 11 2) ((list 3) 16 11 2);"
    ],
    "preprocessed": "list= (tail | (list 4) 11 16 11 2) ((list 3) 16 11 2);",
    "dt": false,
    "parse": [
      "list=",
      [
        "tail",
        [
          -1,
          [
            "list",
            "4"
          ],
          "11",
          "16",
          "11",
          "2"
        ]
      ],
      [
        [
          "list",
          "3"
        ],
        "16",
        "11",
        "2"
      ]
    ],
    "code": "12101010032121010001302321210011013021003302101130210000302101130210332212100110130211330210000302101130210332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf155;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf20f;&#xf24a;&#xf214;&#xf24a;&#xf20f;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf214;&#xf24a;&#xf20f;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 771
  },
  {
    "role": "code",
    "lines": [
      "intro prepend;"
    ],
    "preprocessed": "intro prepend;",
    "dt": false,
    "parse": [
      "intro",
      "prepend"
    ],
    "code": "1210010312101010132233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf159;&#xf24b;",
    "stanza": 772
  },
  {
    "role": "code",
    "lines": [
      "define prepend | ? x | ? x:list |",
      "  cons (+ (car $x:list) 1)",
      "       (if (= (car $x:list) 0) $x | cons $x | cdr $x:list);"
    ],
    "preprocessed": "define prepend | ? x | ? x:list |\n  cons (+ (car $x:list) 1)\n       (if (= (car $x:list) 0) $x | cons $x | cdr $x:list);",
    "dt": true,
    "parse": [
      "define",
      "prepend",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "x:list",
          [
            -1,
            "cons",
            [
              "+",
              [
                "car",
                [
                  -2,
                  "x:list"
                ]
              ],
              "1"
            ],
            [
              "if",
              [
                "=",
                [
                  "car",
                  [
                    -2,
                    "x:list"
                  ]
                ],
                "0"
              ],
              [
                -2,
                "x"
              ],
              [
                -1,
                "cons",
                [
                  -2,
                  "x"
                ],
                [
                  -1,
                  "cdr",
                  [
                    -2,
                    "x:list"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210101013023121100312101001302312110031212101001312100110133023121010132121010321210110312312121010013121001101333021332121111321211321210110312312121010013121001101333020331231210100130231210101312312101001302312101113123121210100131210011013332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf159;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf159;&#xf246;&#xf14e;&#xf246;&#xf15a;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf205;&#xf245;&#xf246;&#xf153;&#xf246;&#xf147;&#xf246;&#xf15a;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf204;&#xf245;&#xf249;&#xf16d;&#xf248;&#xf159;&#xf249;&#xf16d;&#xf248;&#xf15b;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf24b;",
    "stanza": 773
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 14 | (list 0)) ((list 1) 14);"
    ],
    "preprocessed": "list= (prepend 14 | (list 0)) ((list 1) 14);",
    "dt": false,
    "parse": [
      "list=",
      [
        "prepend",
        "14",
        [
          -1,
          [
            "list",
            "0"
          ]
        ]
      ],
      [
        [
          "list",
          "1"
        ],
        "14"
      ]
    ],
    "code": "12101010032121010101302111030232121001101302033322121001101302133021110332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf159;&#xf24a;&#xf212;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf204;&#xf245;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf205;&#xf245;&#xf212;&#xf245;&#xf24b;",
    "stanza": 774
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 6 | (list 1) 4) ((list 2) 6 4);"
    ],
    "preprocessed": "list= (prepend 6 | (list 1) 4) ((list 2) 6 4);",
    "dt": false,
    "parse": [
      "list=",
      [
        "prepend",
        "6",
        [
          -1,
          [
            "list",
            "1"
          ],
          "4"
        ]
      ],
      [
        [
          "list",
          "2"
        ],
        "6",
        "4"
      ]
    ],
    "code": "1210101003212101010130211030232121001101302133021003322121001101302103302110302100332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf159;&#xf24a;&#xf20a;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf205;&#xf245;&#xf208;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf20a;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 775
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 19 | (list 2) 17 14) ((list 3) 19 17 14);"
    ],
    "preprocessed": "list= (prepend 19 | (list 2) 17 14) ((list 3) 19 17 14);",
    "dt": false,
    "parse": [
      "list=",
      [
        "prepend",
        "19",
        [
          -1,
          [
            "list",
            "2"
          ],
          "17",
          "14"
        ]
      ],
      [
        [
          "list",
          "3"
        ],
        "19",
        "17",
        "14"
      ]
    ],
    "code": "121010100321210101013021001130232121001101302103302100013021110332212100110130211330210011302100013021110332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf159;&#xf24a;&#xf217;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf215;&#xf24a;&#xf212;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf217;&#xf24a;&#xf215;&#xf24a;&#xf212;&#xf245;&#xf24b;",
    "stanza": 776
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 13 | (list 3) 12 7 16) ((list 4) 13 12 7 16);"
    ],
    "preprocessed": "list= (prepend 13 | (list 3) 12 7 16) ((list 4) 13 12 7 16);",
    "dt": false,
    "parse": [
      "list=",
      [
        "prepend",
        "13",
        [
          -1,
          [
            "list",
            "3"
          ],
          "12",
          "7",
          "16"
        ]
      ],
      [
        [
          "list",
          "4"
        ],
        "13",
        "12",
        "7",
        "16"
      ]
    ],
    "code": "12101010032121010101302110130232121001101302113302110030211130210000332212100110130210033021101302110030211130210000332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf159;&#xf24a;&#xf211;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf210;&#xf24a;&#xf20b;&#xf24a;&#xf214;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf211;&#xf24a;&#xf210;&#xf24a;&#xf20b;&#xf24a;&#xf214;&#xf245;&#xf24b;",
    "stanza": 777
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 4 | (list 4) 15 18 6 10) ((list 5) 4 15 18 6 10);"
    ],
    "preprocessed": "list= (prepend 4 | (list 4) 15 18 6 10) ((list 5) 4 15 18 6 10);",
    "dt": false,
    "parse": [
      "list=",
      [
        "prepend",
        "4",
        [
          -1,
          [
            "list",
            "4"
          ],
          "15",
          "18",
          "6",
          "10"
        ]
      ],
      [
        [
          "list",
          "5"
        ],
        "4",
        "15",
        "18",
        "6",
        "10"
      ]
    ],
    "code": "121010100321210101013021003023212100110130210033021111302100103021103021010332212100110130210133021003021111302100103021103021010332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf159;&#xf24a;&#xf208;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf213;&#xf24a;&#xf216;&#xf24a;&#xf20a;&#xf24a;&#xf20e;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf209;&#xf245;&#xf208;&#xf24a;&#xf213;&#xf24a;&#xf216;&#xf24a;&#xf20a;&#xf24a;&#xf20e;&#xf245;&#xf24b;",
    "stanza": 778
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 8 | (list 5) 2 19 15 13 13) ((list 6) 8 2 19 15 13 13);"
    ],
    "preprocessed": "list= (prepend 8 | (list 5) 2 19 15 13 13) ((list 6) 8 2 19 15 13 13);",
    "dt": false,
    "parse": [
      "list=",
      [
        "prepend",
        "8",
        [
          -1,
          [
            "list",
            "5"
          ],
          "2",
          "19",
          "15",
          "13",
          "13"
        ]
      ],
      [
        [
          "list",
          "6"
        ],
        "8",
        "2",
        "19",
        "15",
        "13",
        "13"
      ]
    ],
    "code": "12101010032121010101302100030232121001101302101330210302100113021111302110130211013322121001101302110330210003021030210011302111130211013021101332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf159;&#xf24a;&#xf20c;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf209;&#xf245;&#xf206;&#xf24a;&#xf217;&#xf24a;&#xf213;&#xf24a;&#xf211;&#xf24a;&#xf211;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20a;&#xf245;&#xf20c;&#xf24a;&#xf206;&#xf24a;&#xf217;&#xf24a;&#xf213;&#xf24a;&#xf211;&#xf24a;&#xf211;&#xf245;&#xf24b;",
    "stanza": 779
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 11 | (list 6) 0 17 15 4 10 7) ((list 7) 11 0 17 15 4 10 7);"
    ],
    "preprocessed": "list= (prepend 11 | (list 6) 0 17 15 4 10 7) ((list 7) 11 0 17 15 4 10 7);",
    "dt": false,
    "parse": [
      "list=",
      [
        "prepend",
        "11",
        [
          -1,
          [
            "list",
            "6"
          ],
          "0",
          "17",
          "15",
          "4",
          "10",
          "7"
        ]
      ],
      [
        [
          "list",
          "7"
        ],
        "11",
        "0",
        "17",
        "15",
        "4",
        "10",
        "7"
      ]
    ],
    "code": "1210101003212101010130210113023212100110130211033020302100013021111302100302101030211133221210011013021113302101130203021000130211113021003021010302111332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf159;&#xf24a;&#xf20f;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20a;&#xf245;&#xf204;&#xf24a;&#xf215;&#xf24a;&#xf213;&#xf24a;&#xf208;&#xf24a;&#xf20e;&#xf24a;&#xf20b;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20b;&#xf245;&#xf20f;&#xf24a;&#xf204;&#xf24a;&#xf215;&#xf24a;&#xf213;&#xf24a;&#xf208;&#xf24a;&#xf20e;&#xf24a;&#xf20b;&#xf245;&#xf24b;",
    "stanza": 780
  },
  {
    "role": "code",
    "lines": [
      "list= (prepend 15 | (list 7) 2 12 18 12 4 1 12) ((list 8) 15 2 12 18 12 4 1 12);"
    ],
    "preprocessed": "list= (prepend 15 | (list 7) 2 12 18 12 4 1 12) ((list 8) 15 2 12 18 12 4 1 12);",
    "dt": false,
    "parse": [
      "list=",
      [
        "prepend",
        "15",
        [
          -1,
          [
            "list",
            "7"
          ],
          "2",
          "12",
          "18",
          "12",
          "4",
          "1",
          "12"
        ]
      ],
      [
        [
          "list",
          "8"
        ],
        "15",
        "2",
        "12",
        "18",
        "12",
        "4",
        "1",
        "12"
      ]
    ],
    "code": "12101010032121010101302111130232121001101302111330210302110030210010302110030210030213021100332212100110130210003302111130210302110030210010302110030210030213021100332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf159;&#xf24a;&#xf213;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20b;&#xf245;&#xf206;&#xf24a;&#xf210;&#xf24a;&#xf216;&#xf24a;&#xf210;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf24a;&#xf210;&#xf245;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20c;&#xf245;&#xf213;&#xf24a;&#xf206;&#xf24a;&#xf210;&#xf24a;&#xf216;&#xf24a;&#xf210;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf24a;&#xf210;&#xf245;&#xf24b;",
    "stanza": 781
  },
  {
    "role": "code",
    "lines": [
      "intro pair;"
    ],
    "preprocessed": "intro pair;",
    "dt": false,
    "parse": [
      "intro",
      "pair"
    ],
    "code": "1210010312101011032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf15a;&#xf24b;",
    "stanza": 782
  },
  {
    "role": "code",
    "lines": [
      "intro first;"
    ],
    "preprocessed": "intro first;",
    "dt": false,
    "parse": [
      "intro",
      "first"
    ],
    "code": "1210010312101011132233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf15b;&#xf24b;",
    "stanza": 783
  },
  {
    "role": "code",
    "lines": [
      "intro second;"
    ],
    "preprocessed": "intro second;",
    "dt": false,
    "parse": [
      "intro",
      "second"
    ],
    "code": "1210010312101100032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf15c;&#xf24b;",
    "stanza": 784
  },
  {
    "role": "code",
    "lines": [
      "define pair | list 2;"
    ],
    "preprocessed": "define pair | list 2;",
    "dt": true,
    "parse": [
      "define",
      "pair",
      [
        -1,
        "list",
        "2"
      ]
    ],
    "code": "121101312101011030231210011013021032233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf15a;&#xf248;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 785
  },
  {
    "role": "code",
    "lines": [
      "define first | ? x:list | head $x:list;"
    ],
    "preprocessed": "define first | ? x:list | head $x:list;",
    "dt": true,
    "parse": [
      "define",
      "first",
      [
        -1,
        "?",
        "x:list",
        [
          -1,
          "head",
          [
            -2,
            "x:list"
          ]
        ]
      ]
    ],
    "code": "1211013121010111302312110031212101001312100110133023121010000312312121010013121001101332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf15b;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf24b;",
    "stanza": 786
  },
  {
    "role": "code",
    "lines": [
      "define second | ? x:list | head | tail $x:list;"
    ],
    "preprocessed": "define second | ? x:list | head | tail $x:list;",
    "dt": true,
    "parse": [
      "define",
      "second",
      [
        -1,
        "?",
        "x:list",
        [
          -1,
          "head",
          [
            -1,
            "tail",
            [
              -2,
              "x:list"
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210110003023121100312121010013121001101330231210100003023121010001312312121010013121001101332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf15c;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf24b;",
    "stanza": 787
  },
  {
    "role": "code",
    "lines": [
      "list= (pair 4 5) | (list 2) 4 5;"
    ],
    "preprocessed": "list= (pair 4 5) | (list 2) 4 5;",
    "dt": false,
    "parse": [
      "list=",
      [
        "pair",
        "4",
        "5"
      ],
      [
        -1,
        [
          "list",
          "2"
        ],
        "4",
        "5"
      ]
    ],
    "code": "1210101003212101011030210030210133023212100110130210330210030210132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf208;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf208;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 788
  },
  {
    "role": "code",
    "lines": [
      "= (first | pair 4 5) 4;"
    ],
    "preprocessed": "= (first | pair 4 5) 4;",
    "dt": false,
    "parse": [
      "=",
      [
        "first",
        [
          -1,
          "pair",
          "4",
          "5"
        ]
      ],
      "4"
    ],
    "code": "1211321210101113023121010110302100302101330210032233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf15b;&#xf248;&#xf145;&#xf15a;&#xf24a;&#xf208;&#xf24a;&#xf209;&#xf245;&#xf208;&#xf24b;",
    "stanza": 789
  },
  {
    "role": "code",
    "lines": [
      "= (second | pair 4 5) 5;"
    ],
    "preprocessed": "= (second | pair 4 5) 5;",
    "dt": false,
    "parse": [
      "=",
      [
        "second",
        [
          -1,
          "pair",
          "4",
          "5"
        ]
      ],
      "5"
    ],
    "code": "1211321210110003023121010110302100302101330210132233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf15c;&#xf248;&#xf145;&#xf15a;&#xf24a;&#xf208;&#xf24a;&#xf209;&#xf245;&#xf209;&#xf24b;",
    "stanza": 790
  },
  {
    "role": "code",
    "lines": [
      "list= (pair 6 4) | (list 2) 6 4;"
    ],
    "preprocessed": "list= (pair 6 4) | (list 2) 6 4;",
    "dt": false,
    "parse": [
      "list=",
      [
        "pair",
        "6",
        "4"
      ],
      [
        -1,
        [
          "list",
          "2"
        ],
        "6",
        "4"
      ]
    ],
    "code": "1210101003212101011030211030210033023212100110130210330211030210032233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf20a;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 791
  },
  {
    "role": "code",
    "lines": [
      "= (first | pair 6 4) 6;"
    ],
    "preprocessed": "= (first | pair 6 4) 6;",
    "dt": false,
    "parse": [
      "=",
      [
        "first",
        [
          -1,
          "pair",
          "6",
          "4"
        ]
      ],
      "6"
    ],
    "code": "1211321210101113023121010110302110302100330211032233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf15b;&#xf248;&#xf145;&#xf15a;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf245;&#xf20a;&#xf24b;",
    "stanza": 792
  },
  {
    "role": "code",
    "lines": [
      "= (second | pair 6 4) 4;"
    ],
    "preprocessed": "= (second | pair 6 4) 4;",
    "dt": false,
    "parse": [
      "=",
      [
        "second",
        [
          -1,
          "pair",
          "6",
          "4"
        ]
      ],
      "4"
    ],
    "code": "1211321210110003023121010110302110302100330210032233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf15c;&#xf248;&#xf145;&#xf15a;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf245;&#xf208;&#xf24b;",
    "stanza": 793
  },
  {
    "role": "code",
    "lines": [
      "list= (pair 8 9) | (list 2) 8 9;"
    ],
    "preprocessed": "list= (pair 8 9) | (list 2) 8 9;",
    "dt": false,
    "parse": [
      "list=",
      [
        "pair",
        "8",
        "9"
      ],
      [
        -1,
        [
          "list",
          "2"
        ],
        "8",
        "9"
      ]
    ],
    "code": "12101010032121010110302100030210013302321210011013021033021000302100132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf20c;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf20c;&#xf24a;&#xf20d;&#xf24b;",
    "stanza": 794
  },
  {
    "role": "code",
    "lines": [
      "= (first | pair 8 9) 8;"
    ],
    "preprocessed": "= (first | pair 8 9) 8;",
    "dt": false,
    "parse": [
      "=",
      [
        "first",
        [
          -1,
          "pair",
          "8",
          "9"
        ]
      ],
      "8"
    ],
    "code": "1211321210101113023121010110302100030210013302100032233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf15b;&#xf248;&#xf145;&#xf15a;&#xf24a;&#xf20c;&#xf24a;&#xf20d;&#xf245;&#xf20c;&#xf24b;",
    "stanza": 795
  },
  {
    "role": "code",
    "lines": [
      "= (second | pair 8 9) 9;"
    ],
    "preprocessed": "= (second | pair 8 9) 9;",
    "dt": false,
    "parse": [
      "=",
      [
        "second",
        [
          -1,
          "pair",
          "8",
          "9"
        ]
      ],
      "9"
    ],
    "code": "1211321210110003023121010110302100030210013302100132233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf15c;&#xf248;&#xf145;&#xf15a;&#xf24a;&#xf20c;&#xf24a;&#xf20d;&#xf245;&#xf20d;&#xf24b;",
    "stanza": 796
  },
  {
    "role": "file",
    "lines": [
      "== COS_Map =="
    ],
    "stanza": 797
  },
  {
    "role": "doc",
    "lines": [
      "",
      "For programming and for math, it is handy to be able to apply an element-wise",
      "transform to a list, and some kind of accumulator to pull out a summary.",
      ""
    ],
    "section_description": "introduce map and reduce",
    "section_category": "MATH",
    "section_index": 17,
    "stanza": 798
  },
  {
    "role": "code",
    "lines": [
      "intro map;"
    ],
    "preprocessed": "intro map;",
    "dt": false,
    "parse": [
      "intro",
      "map"
    ],
    "code": "1210010312101100132233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf15d;&#xf24b;",
    "stanza": 799
  },
  {
    "role": "code",
    "lines": [
      "define map | ? x:? | ? x:list |",
      "  if (= 0 | list-length $x:list) (list 0) |",
      "  prepend (x:? | head $x:list) (map $x:? | tail $x:list);"
    ],
    "preprocessed": "define map | ? x:? | ? x:list |\n  if (= 0 | list-length $x:list) (list 0) |\n  prepend (x:? | head $x:list) (map $x:? | tail $x:list);",
    "dt": true,
    "parse": [
      "define",
      "map",
      [
        -1,
        "?",
        "x:?",
        [
          -1,
          "?",
          "x:list",
          [
            -1,
            "if",
            [
              "=",
              "0",
              [
                -1,
                "list-length",
                [
                  -2,
                  "x:list"
                ]
              ]
            ],
            [
              "list",
              "0"
            ],
            [
              -1,
              "prepend",
              [
                "x:?",
                [
                  -1,
                  "head",
                  [
                    -2,
                    "x:list"
                  ]
                ]
              ],
              [
                "map",
                [
                  -2,
                  "x:?"
                ],
                [
                  -1,
                  "tail",
                  [
                    -2,
                    "x:list"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121011001302312110031212101001312110033023121100312121010013121001101330231211113212113020302312101001031231212101001312100110133321210011013020330231210101013212121010013121100330231210100003123121210100131210011013332121011001312312121010013121100330231210100013123121210100131210011013332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf15d;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf150;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf145;&#xf159;&#xf246;&#xf16d;&#xf150;&#xf248;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf246;&#xf145;&#xf15d;&#xf249;&#xf16d;&#xf150;&#xf248;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf24b;",
    "stanza": 800
  },
  {
    "role": "code",
    "lines": [
      "list= ((list 3) 12 34 6) | map (? x | * $x 2) | (list 3) 6 17 3;"
    ],
    "preprocessed": "list= ((list 3) 12 34 6) | map (? x | * $x 2) | (list 3) 6 17 3;",
    "dt": false,
    "parse": [
      "list=",
      [
        [
          "list",
          "3"
        ],
        "12",
        "34",
        "6"
      ],
      [
        -1,
        "map",
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            "2"
          ]
        ],
        [
          -1,
          [
            "list",
            "3"
          ],
          "6",
          "17",
          "3"
        ]
      ]
    ],
    "code": "12101010032212100110130211330211003021000103021103302312101100132121100312101001302312100131231210100130210330232121001101302113302110302100013021132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf210;&#xf24a;&#xf226;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf20a;&#xf24a;&#xf215;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 801
  },
  {
    "role": "code",
    "lines": [
      "list= ((list 4) 34 20 14 8) | map (? x | * $x 2) | (list 4) 17 10 7 4;"
    ],
    "preprocessed": "list= ((list 4) 34 20 14 8) | map (? x | * $x 2) | (list 4) 17 10 7 4;",
    "dt": false,
    "parse": [
      "list=",
      [
        [
          "list",
          "4"
        ],
        "34",
        "20",
        "14",
        "8"
      ],
      [
        -1,
        "map",
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            "2"
          ]
        ],
        [
          -1,
          [
            "list",
            "4"
          ],
          "17",
          "10",
          "7",
          "4"
        ]
      ]
    ],
    "code": "121010100322121001101302100330210001030210100302111030210003302312101100132121100312101001302312100131231210100130210330232121001101302100330210001302101030211130210032233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf226;&#xf24a;&#xf218;&#xf24a;&#xf212;&#xf24a;&#xf20c;&#xf245;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf215;&#xf24a;&#xf20e;&#xf24a;&#xf20b;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 802
  },
  {
    "role": "code",
    "lines": [
      "list= ((list 5) 8 4 16 0 6) | map (? x | * $x 2) | (list 5) 4 2 8 0 3;"
    ],
    "preprocessed": "list= ((list 5) 8 4 16 0 6) | map (? x | * $x 2) | (list 5) 4 2 8 0 3;",
    "dt": false,
    "parse": [
      "list=",
      [
        [
          "list",
          "5"
        ],
        "8",
        "4",
        "16",
        "0",
        "6"
      ],
      [
        -1,
        "map",
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            "2"
          ]
        ],
        [
          -1,
          [
            "list",
            "5"
          ],
          "4",
          "2",
          "8",
          "0",
          "3"
        ]
      ]
    ],
    "code": "121010100322121001101302101330210003021003021000030203021103302312101100132121100312101001302312100131231210100130210330232121001101302101330210030210302100030203021132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf209;&#xf245;&#xf20c;&#xf24a;&#xf208;&#xf24a;&#xf214;&#xf24a;&#xf204;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf209;&#xf245;&#xf208;&#xf24a;&#xf206;&#xf24a;&#xf20c;&#xf24a;&#xf204;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 803
  },
  {
    "role": "code",
    "lines": [
      "list= ((list 6) 36 4 28 10 6 20) | map (? x | * $x 2) | (list 6) 18 2 14 5 3 10;"
    ],
    "preprocessed": "list= ((list 6) 36 4 28 10 6 20) | map (? x | * $x 2) | (list 6) 18 2 14 5 3 10;",
    "dt": false,
    "parse": [
      "list=",
      [
        [
          "list",
          "6"
        ],
        "36",
        "4",
        "28",
        "10",
        "6",
        "20"
      ],
      [
        -1,
        "map",
        [
          "?",
          "x",
          [
            -1,
            "*",
            [
              -2,
              "x"
            ],
            "2"
          ]
        ],
        [
          -1,
          [
            "list",
            "6"
          ],
          "18",
          "2",
          "14",
          "5",
          "3",
          "10"
        ]
      ]
    ],
    "code": "121010100322121001101302110330210010030210030211100302101030211030210100330231210110013212110031210100130231210013123121010013021033023212100110130211033021001030210302111030210130211302101032233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20a;&#xf245;&#xf228;&#xf24a;&#xf208;&#xf24a;&#xf220;&#xf24a;&#xf20e;&#xf24a;&#xf20a;&#xf24a;&#xf218;&#xf245;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20a;&#xf245;&#xf216;&#xf24a;&#xf206;&#xf24a;&#xf212;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf24a;&#xf20e;&#xf24b;",
    "stanza": 804
  },
  {
    "role": "code",
    "lines": [
      "list= ((list 3) 42 42 42) | map (? x 42) | (list 3) 16 2 11;"
    ],
    "preprocessed": "list= ((list 3) 42 42 42) | map (? x 42) | (list 3) 16 2 11;",
    "dt": false,
    "parse": [
      "list=",
      [
        [
          "list",
          "3"
        ],
        "42",
        "42",
        "42"
      ],
      [
        -1,
        "map",
        [
          "?",
          "x",
          "42"
        ],
        [
          -1,
          [
            "list",
            "3"
          ],
          "16",
          "2",
          "11"
        ]
      ]
    ],
    "code": "12101010032212100110130211330210101030210101030210101033023121011001321211003121010013021010103302321210011013021133021000030210302101132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf22e;&#xf24a;&#xf22e;&#xf24a;&#xf22e;&#xf245;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf24a;&#xf22e;&#xf245;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf214;&#xf24a;&#xf206;&#xf24a;&#xf20f;&#xf24b;",
    "stanza": 805
  },
  {
    "role": "code",
    "lines": [
      "list= ((list 4) 42 42 42 42) | map (? x 42) | (list 4) 15 18 6 0;"
    ],
    "preprocessed": "list= ((list 4) 42 42 42 42) | map (? x 42) | (list 4) 15 18 6 0;",
    "dt": false,
    "parse": [
      "list=",
      [
        [
          "list",
          "4"
        ],
        "42",
        "42",
        "42",
        "42"
      ],
      [
        -1,
        "map",
        [
          "?",
          "x",
          "42"
        ],
        [
          -1,
          [
            "list",
            "4"
          ],
          "15",
          "18",
          "6",
          "0"
        ]
      ]
    ],
    "code": "121010100322121001101302100330210101030210101030210101030210101033023121011001321211003121010013021010103302321210011013021003302111130210010302110302032233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf22e;&#xf24a;&#xf22e;&#xf24a;&#xf22e;&#xf24a;&#xf22e;&#xf245;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf24a;&#xf22e;&#xf245;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf213;&#xf24a;&#xf216;&#xf24a;&#xf20a;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 806
  },
  {
    "role": "code",
    "lines": [
      "list= ((list 5) 42 42 42 42 42) | map (? x 42) | (list 5) 19 11 5 17 2;"
    ],
    "preprocessed": "list= ((list 5) 42 42 42 42 42) | map (? x 42) | (list 5) 19 11 5 17 2;",
    "dt": false,
    "parse": [
      "list=",
      [
        [
          "list",
          "5"
        ],
        "42",
        "42",
        "42",
        "42",
        "42"
      ],
      [
        -1,
        "map",
        [
          "?",
          "x",
          "42"
        ],
        [
          -1,
          [
            "list",
            "5"
          ],
          "19",
          "11",
          "5",
          "17",
          "2"
        ]
      ]
    ],
    "code": "121010100322121001101302101330210101030210101030210101030210101030210101033023121011001321211003121010013021010103302321210011013021013302100113021011302101302100013021032233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf209;&#xf245;&#xf22e;&#xf24a;&#xf22e;&#xf24a;&#xf22e;&#xf24a;&#xf22e;&#xf24a;&#xf22e;&#xf245;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf24a;&#xf22e;&#xf245;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf209;&#xf245;&#xf217;&#xf24a;&#xf20f;&#xf24a;&#xf209;&#xf24a;&#xf215;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 807
  },
  {
    "role": "code",
    "lines": [
      "list= ((list 6) 42 42 42 42 42 42) | map (? x 42) | (list 6) 11 19 5 3 12 6;"
    ],
    "preprocessed": "list= ((list 6) 42 42 42 42 42 42) | map (? x 42) | (list 6) 11 19 5 3 12 6;",
    "dt": false,
    "parse": [
      "list=",
      [
        [
          "list",
          "6"
        ],
        "42",
        "42",
        "42",
        "42",
        "42",
        "42"
      ],
      [
        -1,
        "map",
        [
          "?",
          "x",
          "42"
        ],
        [
          -1,
          [
            "list",
            "6"
          ],
          "11",
          "19",
          "5",
          "3",
          "12",
          "6"
        ]
      ]
    ],
    "code": "12101010032212100110130211033021010103021010103021010103021010103021010103021010103302312101100132121100312101001302101010330232121001101302110330210113021001130210130211302110030211032233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20a;&#xf245;&#xf22e;&#xf24a;&#xf22e;&#xf24a;&#xf22e;&#xf24a;&#xf22e;&#xf24a;&#xf22e;&#xf24a;&#xf22e;&#xf245;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf24a;&#xf22e;&#xf245;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20a;&#xf245;&#xf20f;&#xf24a;&#xf217;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf24a;&#xf210;&#xf24a;&#xf20a;&#xf24b;",
    "stanza": 808
  },
  {
    "role": "code",
    "lines": [
      "intro reduce;"
    ],
    "preprocessed": "intro reduce;",
    "dt": false,
    "parse": [
      "intro",
      "reduce"
    ],
    "code": "1210010312101101032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf15e;&#xf24b;",
    "stanza": 809
  },
  {
    "role": "code",
    "lines": [
      "define reduce | ? x:? | ? x:list |",
      "  if (= 0 | list-length $x:list) $undefined |",
      "  if (= 1 | list-length $x:list) (head $x:list) |",
      "  x:? (head $x:list) (reduce $x:? | tail $x:list);"
    ],
    "preprocessed": "define reduce | ? x:? | ? x:list |\n  if (= 0 | list-length $x:list) $undefined |\n  if (= 1 | list-length $x:list) (head $x:list) |\n  x:? (head $x:list) (reduce $x:? | tail $x:list);",
    "dt": true,
    "parse": [
      "define",
      "reduce",
      [
        -1,
        "?",
        "x:?",
        [
          -1,
          "?",
          "x:list",
          [
            -1,
            "if",
            [
              "=",
              "0",
              [
                -1,
                "list-length",
                [
                  -2,
                  "x:list"
                ]
              ]
            ],
            [
              -2,
              "undefined"
            ],
            [
              -1,
              "if",
              [
                "=",
                "1",
                [
                  -1,
                  "list-length",
                  [
                    -2,
                    "x:list"
                  ]
                ]
              ],
              [
                "head",
                [
                  -2,
                  "x:list"
                ]
              ],
              [
                -1,
                "x:?",
                [
                  "head",
                  [
                    -2,
                    "x:list"
                  ]
                ],
                [
                  "reduce",
                  [
                    -2,
                    "x:?"
                  ],
                  [
                    -1,
                    "tail",
                    [
                      -2,
                      "x:list"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210110103023121100312121010013121100330231211003121210100131210011013302312111132121130203023121010010312312121010013121001101333123121000003023121111321211302130231210100103123121210100131210011013332121010000312312121010013121001101333023121210100131211003321210100003123121210100131210011013332121011010312312121010013121100330231210100013123121210100131210011013332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf15e;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf150;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf249;&#xf164;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf205;&#xf248;&#xf145;&#xf156;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf246;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf248;&#xf16d;&#xf150;&#xf246;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf246;&#xf145;&#xf15e;&#xf249;&#xf16d;&#xf150;&#xf248;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf24b;",
    "stanza": 810
  },
  {
    "role": "code",
    "lines": [
      "= 21 | reduce $+ | (list 3) 3 7 11;"
    ],
    "preprocessed": "= 21 | reduce $+ | (list 3) 3 7 11;",
    "dt": false,
    "parse": [
      "=",
      "21",
      [
        -1,
        "reduce",
        [
          -2,
          "+"
        ],
        [
          -1,
          [
            "list",
            "3"
          ],
          "3",
          "7",
          "11"
        ]
      ]
    ],
    "code": "121130210101302312101101031231210103023212100110130211330211302111302101132233",
    "spider": "&#xf147;&#xf24a;&#xf219;&#xf248;&#xf145;&#xf15e;&#xf249;&#xf14e;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf207;&#xf24a;&#xf20b;&#xf24a;&#xf20f;&#xf24b;",
    "stanza": 811
  },
  {
    "role": "code",
    "lines": [
      "= 43 | reduce $+ | (list 4) 13 11 19 0;"
    ],
    "preprocessed": "= 43 | reduce $+ | (list 4) 13 11 19 0;",
    "dt": false,
    "parse": [
      "=",
      "43",
      [
        -1,
        "reduce",
        [
          -2,
          "+"
        ],
        [
          -1,
          [
            "list",
            "4"
          ],
          "13",
          "11",
          "19",
          "0"
        ]
      ]
    ],
    "code": "1211302101011302312101101031231210103023212100110130210033021101302101130210011302032233",
    "spider": "&#xf147;&#xf24a;&#xf22f;&#xf248;&#xf145;&#xf15e;&#xf249;&#xf14e;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf211;&#xf24a;&#xf20f;&#xf24a;&#xf217;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 812
  },
  {
    "role": "code",
    "lines": [
      "= 41 | reduce $+ | (list 5) 9 2 10 8 12;"
    ],
    "preprocessed": "= 41 | reduce $+ | (list 5) 9 2 10 8 12;",
    "dt": false,
    "parse": [
      "=",
      "41",
      [
        -1,
        "reduce",
        [
          -2,
          "+"
        ],
        [
          -1,
          [
            "list",
            "5"
          ],
          "9",
          "2",
          "10",
          "8",
          "12"
        ]
      ]
    ],
    "code": "12113021010013023121011010312312101030232121001101302101330210013021030210103021000302110032233",
    "spider": "&#xf147;&#xf24a;&#xf22d;&#xf248;&#xf145;&#xf15e;&#xf249;&#xf14e;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf209;&#xf245;&#xf20d;&#xf24a;&#xf206;&#xf24a;&#xf20e;&#xf24a;&#xf20c;&#xf24a;&#xf210;&#xf24b;",
    "stanza": 813
  },
  {
    "role": "code",
    "lines": [
      "= 50 | reduce $+ | (list 6) 10 1 2 12 14 11;"
    ],
    "preprocessed": "= 50 | reduce $+ | (list 6) 10 1 2 12 14 11;",
    "dt": false,
    "parse": [
      "=",
      "50",
      [
        -1,
        "reduce",
        [
          -2,
          "+"
        ],
        [
          -1,
          [
            "list",
            "6"
          ],
          "10",
          "1",
          "2",
          "12",
          "14",
          "11"
        ]
      ]
    ],
    "code": "121130211001030231210110103123121010302321210011013021103302101030213021030211003021110302101132233",
    "spider": "&#xf147;&#xf24a;&#xf236;&#xf248;&#xf145;&#xf15e;&#xf249;&#xf14e;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20a;&#xf245;&#xf20e;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf210;&#xf24a;&#xf212;&#xf24a;&#xf20f;&#xf24b;",
    "stanza": 814
  },
  {
    "role": "file",
    "lines": [
      "== COS_Translate =="
    ],
    "stanza": 815
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "how to change the imagined interpreter",
    "section_category": "SYNTAX",
    "section_index": 18,
    "stanza": 816
  },
  {
    "role": "code",
    "lines": [
      "intro translate;"
    ],
    "preprocessed": "intro translate;",
    "dt": false,
    "parse": [
      "intro",
      "translate"
    ],
    "code": "12100103121100132233",
    "spider": "&#xf156;&#xf24a;&#xf15d;&#xf24b;",
    "stanza": 817
  },
  {
    "role": "code",
    "lines": [
      "define translate:begin $translate;"
    ],
    "preprocessed": "define translate:begin $translate;",
    "dt": true,
    "parse": [
      "define",
      "translate:begin",
      [
        -2,
        "translate"
      ]
    ],
    "code": "1211013121211001312101101133123121100132233",
    "spider": "&#xf151;&#xf24a;&#xf15d;&#xf145;&#xf15f;&#xf249;&#xf15d;&#xf24b;",
    "stanza": 818
  },
  {
    "role": "code",
    "lines": [
      "define translate | ? x | if (= $x 32) 64 | translate:begin $x;"
    ],
    "preprocessed": "define translate | ? x | if (= $x 32) 64 | translate:begin $x;",
    "dt": true,
    "parse": [
      "define",
      "translate",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "=",
            [
              -2,
              "x"
            ],
            "32"
          ],
          "64",
          [
            -1,
            "translate:begin",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "12110131211001302312110031210100130231211113212113123121010013021000003302100000030231212110013121011011331231210100132233",
    "spider": "&#xf151;&#xf24a;&#xf15d;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf224;&#xf245;&#xf205;&#xf204;&#xf248;&#xf15d;&#xf145;&#xf15f;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 819
  },
  {
    "role": "code",
    "lines": [
      "= 32 64;"
    ],
    "preprocessed": "= 32 64;",
    "dt": false,
    "parse": [
      "=",
      "32",
      "64"
    ],
    "code": "1211302100000302100000032233",
    "spider": "&#xf147;&#xf24a;&#xf224;&#xf24a;&#xf205;&#xf204;&#xf24b;",
    "stanza": 820
  },
  {
    "role": "code",
    "lines": [
      "= (+ 32 64) 128;"
    ],
    "preprocessed": "= (+ 32 64) 128;",
    "dt": false,
    "parse": [
      "=",
      [
        "+",
        "32",
        "64"
      ],
      "128"
    ],
    "code": "121132121010302100000302100000033021000000032233",
    "spider": "&#xf147;&#xf246;&#xf14e;&#xf24a;&#xf224;&#xf24a;&#xf205;&#xf204;&#xf245;&#xf206;&#xf204;&#xf24b;",
    "stanza": 821
  },
  {
    "role": "code",
    "lines": [
      "define translate $translate:begin;"
    ],
    "preprocessed": "define translate $translate:begin;",
    "dt": true,
    "parse": [
      "define",
      "translate",
      [
        -2,
        "translate:begin"
      ]
    ],
    "code": "1211013121100131231212110013121011011332233",
    "spider": "&#xf151;&#xf24a;&#xf15d;&#xf249;&#xf15d;&#xf145;&#xf15f;&#xf24b;",
    "stanza": 822
  },
  {
    "role": "code",
    "lines": [
      "not | = 32 64;"
    ],
    "preprocessed": "not | = 32 64;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        "32",
        "64"
      ]
    ],
    "code": "1210130231211302100000302100000032233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf24a;&#xf224;&#xf24a;&#xf205;&#xf204;&#xf24b;",
    "stanza": 823
  },
  {
    "role": "code",
    "lines": [
      "= (+ 32 64) 96;"
    ],
    "preprocessed": "= (+ 32 64) 96;",
    "dt": false,
    "parse": [
      "=",
      [
        "+",
        "32",
        "64"
      ],
      "96"
    ],
    "code": "12113212101030210000030210000003302110000032233",
    "spider": "&#xf147;&#xf246;&#xf14e;&#xf24a;&#xf224;&#xf24a;&#xf205;&#xf204;&#xf245;&#xf205;&#xf224;&#xf24b;",
    "stanza": 824
  },
  {
    "role": "doc",
    "lines": [
      "Now let's do something useful: define a special form for lists."
    ],
    "stanza": 825
  },
  {
    "role": "code",
    "lines": [
      "intro vector;"
    ],
    "preprocessed": "intro vector;",
    "dt": false,
    "parse": [
      "intro",
      "vector"
    ],
    "code": "12100103121000032233",
    "spider": "&#xf156;&#xf24a;&#xf154;&#xf24b;",
    "stanza": 826
  },
  {
    "role": "code",
    "lines": [
      "define translate | ? x |",
      "  if (not | function? $x) (translate:begin $x) |",
      "  if (not | = vector | head $x) (translate:begin $x) |",
      "  translate | prepend ((list 2) list | list-length | tail $x) | tail $x;"
    ],
    "preprocessed": "define translate | ? x |\n  if (not | function? $x) (translate:begin $x) |\n  if (not | = vector | head $x) (translate:begin $x) |\n  translate | prepend ((list 2) list | list-length | tail $x) | tail $x;",
    "dt": true,
    "parse": [
      "define",
      "translate",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "not",
            [
              -1,
              "function?",
              [
                -2,
                "x"
              ]
            ]
          ],
          [
            "translate:begin",
            [
              -2,
              "x"
            ]
          ],
          [
            -1,
            "if",
            [
              "not",
              [
                -1,
                "=",
                "vector",
                [
                  -1,
                  "head",
                  [
                    -2,
                    "x"
                  ]
                ]
              ]
            ],
            [
              "translate:begin",
              [
                -2,
                "x"
              ]
            ],
            [
              -1,
              "translate",
              [
                -1,
                "prepend",
                [
                  [
                    "list",
                    "2"
                  ],
                  "list",
                  [
                    -1,
                    "list-length",
                    [
                      -1,
                      "tail",
                      [
                        -2,
                        "x"
                      ]
                    ]
                  ]
                ],
                [
                  -1,
                  "tail",
                  [
                    -2,
                    "x"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121100130231211003121010013023121111321210130231210110031231210100133212121100131210110113312312101001330231211113212101302312113121000030231210100003123121010013321212110013121011011331231210100133023121100130231210101013221210011013021033121001101302312101001030231210100013123121010013302312101000131231210100132233",
    "spider": "&#xf151;&#xf24a;&#xf15d;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf170;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf15d;&#xf145;&#xf15f;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf147;&#xf24a;&#xf154;&#xf248;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf15d;&#xf145;&#xf15f;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf15d;&#xf248;&#xf145;&#xf159;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf206;&#xf245;&#xf145;&#xf151;&#xf248;&#xf145;&#xf156;&#xf248;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 827
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 1 2 3) | (list 3) 1 2 3;"
    ],
    "preprocessed": "list= (vector 1 2 3) | (list 3) 1 2 3;",
    "dt": false,
    "parse": [
      "list=",
      [
        "vector",
        "1",
        "2",
        "3"
      ],
      [
        -1,
        [
          "list",
          "3"
        ],
        "1",
        "2",
        "3"
      ]
    ],
    "code": "121010100321210000302130210302113302321210011013021133021302103021132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf207;&#xf245;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 828
  },
  {
    "role": "file",
    "lines": [
      "== COS_List =="
    ],
    "stanza": 829
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "some more list functions",
    "section_category": "MATH",
    "section_index": 19,
    "stanza": 830
  },
  {
    "role": "code",
    "lines": [
      "intro list:find;"
    ],
    "preprocessed": "intro list:find;",
    "dt": false,
    "parse": [
      "intro",
      "list:find"
    ],
    "code": "12100103121210011013121011100332233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf151;&#xf145;&#xf160;&#xf24b;",
    "stanza": 831
  },
  {
    "role": "code",
    "lines": [
      "define list:find:0 | ? x:list | ? y | ? n |",
      "  if (= (list-length $x:list) 0) $undefined |",
      "  if (equal (head $x:list) $y) $n |",
      "  list:find:0 (tail $x:list) $y (+ $n 1);"
    ],
    "preprocessed": "define list:find:0 | ? x:list | ? y | ? n |\n  if (= (list-length $x:list) 0) $undefined |\n  if (equal (head $x:list) $y) $n |\n  list:find:0 (tail $x:list) $y (+ $n 1);",
    "dt": true,
    "parse": [
      "define",
      "list:find:0",
      [
        -1,
        "?",
        "x:list",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "?",
            "n",
            [
              -1,
              "if",
              [
                "=",
                [
                  "list-length",
                  [
                    -2,
                    "x:list"
                  ]
                ],
                "0"
              ],
              [
                -2,
                "undefined"
              ],
              [
                -1,
                "if",
                [
                  "equal",
                  [
                    "head",
                    [
                      -2,
                      "x:list"
                    ]
                  ],
                  [
                    -2,
                    "y"
                  ]
                ],
                [
                  -2,
                  "n"
                ],
                [
                  -1,
                  "list:find:0",
                  [
                    "tail",
                    [
                      -2,
                      "x:list"
                    ]
                  ],
                  [
                    -2,
                    "y"
                  ],
                  [
                    "+",
                    [
                      -2,
                      "n"
                    ],
                    "1"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131212100110131210111003020330231211003121210100131210011013302312110031210000013023121100312100111030231211113212113212101001031231212101001312100110133302033123121000003023121111321210003212101000031231212101001312100110133312312100000133123121001110302312121001101312101110030203321210100013123121210100131210011013331231210000013212101031231210011103021332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf151;&#xf145;&#xf160;&#xf204;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf152;&#xf248;&#xf153;&#xf246;&#xf147;&#xf246;&#xf145;&#xf156;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf204;&#xf245;&#xf249;&#xf164;&#xf248;&#xf153;&#xf246;&#xf14c;&#xf246;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf249;&#xf145;&#xf145;&#xf245;&#xf249;&#xf145;&#xf152;&#xf248;&#xf145;&#xf151;&#xf145;&#xf160;&#xf204;&#xf246;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf249;&#xf145;&#xf145;&#xf246;&#xf14e;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 832
  },
  {
    "role": "code",
    "lines": [
      "define list:find | ? x:list | ? y | list:find:0 $x:list $y 0;"
    ],
    "preprocessed": "define list:find | ? x:list | ? y | list:find:0 $x:list $y 0;",
    "dt": true,
    "parse": [
      "define",
      "list:find",
      [
        -1,
        "?",
        "x:list",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "list:find:0",
            [
              -2,
              "x:list"
            ],
            [
              -2,
              "y"
            ],
            "0"
          ]
        ]
      ]
    ],
    "code": "12110131212100110131210111003302312110031212101001312100110133023121100312100000130231212100110131210111003020331231212101001312100110133123121000001302032233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf151;&#xf145;&#xf160;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf145;&#xf151;&#xf145;&#xf160;&#xf204;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf249;&#xf145;&#xf145;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 833
  },
  {
    "role": "code",
    "lines": [
      "= (list:find ((list 4) 17 4 3 0) 0) 3;"
    ],
    "preprocessed": "= (list:find ((list 4) 17 4 3 0) 0) 3;",
    "dt": false,
    "parse": [
      "=",
      [
        "list:find",
        [
          [
            "list",
            "4"
          ],
          "17",
          "4",
          "3",
          "0"
        ],
        "0"
      ],
      "3"
    ],
    "code": "12113212121001101312101110033221210011013021003302100013021003021130203302033021132233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf151;&#xf145;&#xf160;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf215;&#xf24a;&#xf208;&#xf24a;&#xf207;&#xf24a;&#xf204;&#xf245;&#xf204;&#xf245;&#xf207;&#xf24b;",
    "stanza": 834
  },
  {
    "role": "code",
    "lines": [
      "= (list:find ((list 8) 0 12 19 11 9 8 0 17) 9) 4;"
    ],
    "preprocessed": "= (list:find ((list 8) 0 12 19 11 9 8 0 17) 9) 4;",
    "dt": false,
    "parse": [
      "=",
      [
        "list:find",
        [
          [
            "list",
            "8"
          ],
          "0",
          "12",
          "19",
          "11",
          "9",
          "8",
          "0",
          "17"
        ],
        "9"
      ],
      "4"
    ],
    "code": "121132121210011013121011100332212100110130210003302030211003021001130210113021001302100030203021000133021001330210032233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf151;&#xf145;&#xf160;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20c;&#xf245;&#xf204;&#xf24a;&#xf210;&#xf24a;&#xf217;&#xf24a;&#xf20f;&#xf24a;&#xf20d;&#xf24a;&#xf20c;&#xf24a;&#xf204;&#xf24a;&#xf215;&#xf245;&#xf20d;&#xf245;&#xf208;&#xf24b;",
    "stanza": 835
  },
  {
    "role": "code",
    "lines": [
      "= (list:find ((list 9) 9 0 17 17 10 8 5 3 1) 17) 2;"
    ],
    "preprocessed": "= (list:find ((list 9) 9 0 17 17 10 8 5 3 1) 17) 2;",
    "dt": false,
    "parse": [
      "=",
      [
        "list:find",
        [
          [
            "list",
            "9"
          ],
          "9",
          "0",
          "17",
          "17",
          "10",
          "8",
          "5",
          "3",
          "1"
        ],
        "17"
      ],
      "2"
    ],
    "code": "1211321212100110131210111003322121001101302100133021001302030210001302100013021010302100030210130211302133021000133021032233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf151;&#xf145;&#xf160;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20d;&#xf245;&#xf20d;&#xf24a;&#xf204;&#xf24a;&#xf215;&#xf24a;&#xf215;&#xf24a;&#xf20e;&#xf24a;&#xf20c;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf24a;&#xf205;&#xf245;&#xf215;&#xf245;&#xf206;&#xf24b;",
    "stanza": 836
  },
  {
    "role": "code",
    "lines": [
      "= (list:find ((list 6) 17 15 10 12 4 13) 15) 1;"
    ],
    "preprocessed": "= (list:find ((list 6) 17 15 10 12 4 13) 15) 1;",
    "dt": false,
    "parse": [
      "=",
      [
        "list:find",
        [
          [
            "list",
            "6"
          ],
          "17",
          "15",
          "10",
          "12",
          "4",
          "13"
        ],
        "15"
      ],
      "1"
    ],
    "code": "12113212121001101312101110033221210011013021103302100013021111302101030211003021003021101330211113302132233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf151;&#xf145;&#xf160;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20a;&#xf245;&#xf215;&#xf24a;&#xf213;&#xf24a;&#xf20e;&#xf24a;&#xf210;&#xf24a;&#xf208;&#xf24a;&#xf211;&#xf245;&#xf213;&#xf245;&#xf205;&#xf24b;",
    "stanza": 837
  },
  {
    "role": "code",
    "lines": [
      "= (list:find ((list 7) 1 6 18 1 4 3 7) 1) 0;"
    ],
    "preprocessed": "= (list:find ((list 7) 1 6 18 1 4 3 7) 1) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "list:find",
        [
          [
            "list",
            "7"
          ],
          "1",
          "6",
          "18",
          "1",
          "4",
          "3",
          "7"
        ],
        "1"
      ],
      "0"
    ],
    "code": "12113212121001101312101110033221210011013021113302130211030210010302130210030211302111330213302032233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf151;&#xf145;&#xf160;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20b;&#xf245;&#xf205;&#xf24a;&#xf20a;&#xf24a;&#xf216;&#xf24a;&#xf205;&#xf24a;&#xf208;&#xf24a;&#xf207;&#xf24a;&#xf20b;&#xf245;&#xf205;&#xf245;&#xf204;&#xf24b;",
    "stanza": 838
  },
  {
    "role": "code",
    "lines": [
      "= (list:find ((list 1) 2) 2) 0;"
    ],
    "preprocessed": "= (list:find ((list 1) 2) 2) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "list:find",
        [
          [
            "list",
            "1"
          ],
          "2"
        ],
        "2"
      ],
      "0"
    ],
    "code": "121132121210011013121011100332212100110130213302103302103302032233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf151;&#xf145;&#xf160;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf205;&#xf245;&#xf206;&#xf245;&#xf206;&#xf245;&#xf204;&#xf24b;",
    "stanza": 839
  },
  {
    "role": "code",
    "lines": [
      "= (list:find ((list 7) 3 7 15 3 19 16 17) 3) 0;"
    ],
    "preprocessed": "= (list:find ((list 7) 3 7 15 3 19 16 17) 3) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "list:find",
        [
          [
            "list",
            "7"
          ],
          "3",
          "7",
          "15",
          "3",
          "19",
          "16",
          "17"
        ],
        "3"
      ],
      "0"
    ],
    "code": "12113212121001101312101110033221210011013021113302113021113021111302113021001130210000302100013302113302032233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf151;&#xf145;&#xf160;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20b;&#xf245;&#xf207;&#xf24a;&#xf20b;&#xf24a;&#xf213;&#xf24a;&#xf207;&#xf24a;&#xf217;&#xf24a;&#xf214;&#xf24a;&#xf215;&#xf245;&#xf207;&#xf245;&#xf204;&#xf24b;",
    "stanza": 840
  },
  {
    "role": "code",
    "lines": [
      "= (list:find ((list 4) 8 13 9 18) 8) 0;"
    ],
    "preprocessed": "= (list:find ((list 4) 8 13 9 18) 8) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "list:find",
        [
          [
            "list",
            "4"
          ],
          "8",
          "13",
          "9",
          "18"
        ],
        "8"
      ],
      "0"
    ],
    "code": "1211321212100110131210111003322121001101302100330210003021101302100130210010330210003302032233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf151;&#xf145;&#xf160;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf20c;&#xf24a;&#xf211;&#xf24a;&#xf20d;&#xf24a;&#xf216;&#xf245;&#xf20c;&#xf245;&#xf204;&#xf24b;",
    "stanza": 841
  },
  {
    "role": "code",
    "lines": [
      "= (list:find ((list 8) 5 3 10 13 2 8 6 12) 12) 7;"
    ],
    "preprocessed": "= (list:find ((list 8) 5 3 10 13 2 8 6 12) 12) 7;",
    "dt": false,
    "parse": [
      "=",
      [
        "list:find",
        [
          [
            "list",
            "8"
          ],
          "5",
          "3",
          "10",
          "13",
          "2",
          "8",
          "6",
          "12"
        ],
        "12"
      ],
      "7"
    ],
    "code": "1211321212100110131210111003322121001101302100033021013021130210103021101302103021000302110302110033021100330211132233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf151;&#xf145;&#xf160;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20c;&#xf245;&#xf209;&#xf24a;&#xf207;&#xf24a;&#xf20e;&#xf24a;&#xf211;&#xf24a;&#xf206;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf24a;&#xf210;&#xf245;&#xf210;&#xf245;&#xf20b;&#xf24b;",
    "stanza": 842
  },
  {
    "role": "code",
    "lines": [
      "= (list:find ((list 8) 11 18 9 9 11 3 10 16) 18) 1;"
    ],
    "preprocessed": "= (list:find ((list 8) 11 18 9 9 11 3 10 16) 18) 1;",
    "dt": false,
    "parse": [
      "=",
      [
        "list:find",
        [
          [
            "list",
            "8"
          ],
          "11",
          "18",
          "9",
          "9",
          "11",
          "3",
          "10",
          "16"
        ],
        "18"
      ],
      "1"
    ],
    "code": "121132121210011013121011100332212100110130210003302101130210010302100130210013021011302113021010302100003302100103302132233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf151;&#xf145;&#xf160;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20c;&#xf245;&#xf20f;&#xf24a;&#xf216;&#xf24a;&#xf20d;&#xf24a;&#xf20d;&#xf24a;&#xf20f;&#xf24a;&#xf207;&#xf24a;&#xf20e;&#xf24a;&#xf214;&#xf245;&#xf216;&#xf245;&#xf205;&#xf24b;",
    "stanza": 843
  },
  {
    "role": "code",
    "lines": [
      "= (list:find ((list 4) 19 6 15 16) 11) $undefined;"
    ],
    "preprocessed": "= (list:find ((list 4) 19 6 15 16) 11) $undefined;",
    "dt": false,
    "parse": [
      "=",
      [
        "list:find",
        [
          [
            "list",
            "4"
          ],
          "19",
          "6",
          "15",
          "16"
        ],
        "11"
      ],
      [
        -2,
        "undefined"
      ]
    ],
    "code": "121132121210011013121011100332212100110130210033021001130211030211113021000033021011331231210000032233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf151;&#xf145;&#xf160;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf208;&#xf245;&#xf217;&#xf24a;&#xf20a;&#xf24a;&#xf213;&#xf24a;&#xf214;&#xf245;&#xf20f;&#xf245;&#xf249;&#xf164;&#xf24b;",
    "stanza": 844
  },
  {
    "role": "code",
    "lines": [
      "= (list:find ((list 6) 0 1 5 19 2 8) 7) $undefined;"
    ],
    "preprocessed": "= (list:find ((list 6) 0 1 5 19 2 8) 7) $undefined;",
    "dt": false,
    "parse": [
      "=",
      [
        "list:find",
        [
          [
            "list",
            "6"
          ],
          "0",
          "1",
          "5",
          "19",
          "2",
          "8"
        ],
        "7"
      ],
      [
        -2,
        "undefined"
      ]
    ],
    "code": "1211321212100110131210111003322121001101302110330203021302101302100113021030210003302111331231210000032233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf151;&#xf145;&#xf160;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20a;&#xf245;&#xf204;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf24a;&#xf217;&#xf24a;&#xf206;&#xf24a;&#xf20c;&#xf245;&#xf20b;&#xf245;&#xf249;&#xf164;&#xf24b;",
    "stanza": 845
  },
  {
    "role": "code",
    "lines": [
      "= (list:find ((list 8) 18 2 17 7 12 3 11 8) 6) $undefined;"
    ],
    "preprocessed": "= (list:find ((list 8) 18 2 17 7 12 3 11 8) 6) $undefined;",
    "dt": false,
    "parse": [
      "=",
      [
        "list:find",
        [
          [
            "list",
            "8"
          ],
          "18",
          "2",
          "17",
          "7",
          "12",
          "3",
          "11",
          "8"
        ],
        "6"
      ],
      [
        -2,
        "undefined"
      ]
    ],
    "code": "121132121210011013121011100332212100110130210003302100103021030210001302111302110030211302101130210003302110331231210000032233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf151;&#xf145;&#xf160;&#xf246;&#xf246;&#xf145;&#xf151;&#xf24a;&#xf20c;&#xf245;&#xf216;&#xf24a;&#xf206;&#xf24a;&#xf215;&#xf24a;&#xf20b;&#xf24a;&#xf210;&#xf24a;&#xf207;&#xf24a;&#xf20f;&#xf24a;&#xf20c;&#xf245;&#xf20a;&#xf245;&#xf249;&#xf164;&#xf24b;",
    "stanza": 846
  },
  {
    "role": "code",
    "lines": [
      "intro last;"
    ],
    "preprocessed": "intro last;",
    "dt": false,
    "parse": [
      "intro",
      "last"
    ],
    "code": "1210010312101110132233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf161;&#xf24b;",
    "stanza": 847
  },
  {
    "role": "code",
    "lines": [
      "define last | ? x | list-ref $x | - (list-length $x) 1;"
    ],
    "preprocessed": "define last | ? x | list-ref $x | - (list-length $x) 1;",
    "dt": true,
    "parse": [
      "define",
      "last",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "list-ref",
          [
            -2,
            "x"
          ],
          [
            -1,
            "-",
            [
              "list-length",
              [
                -2,
                "x"
              ]
            ],
            "1"
          ]
        ]
      ]
    ],
    "code": "1211013121011101302312110031210100130231210100113123121010013023121011321210100103123121010013302132233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf161;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf145;&#xf157;&#xf249;&#xf16d;&#xf248;&#xf14f;&#xf246;&#xf145;&#xf156;&#xf249;&#xf16d;&#xf245;&#xf205;&#xf24b;",
    "stanza": 848
  },
  {
    "role": "code",
    "lines": [
      "intro except-last;"
    ],
    "preprocessed": "intro except-last;",
    "dt": false,
    "parse": [
      "intro",
      "except-last"
    ],
    "code": "1210010312101111032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf162;&#xf24b;",
    "stanza": 849
  },
  {
    "role": "code",
    "lines": [
      "define except-last | ? x |",
      "  if (>= 1 | list-length $x) (vector) |",
      "  prepend (head $x) | except-last | tail $x;"
    ],
    "preprocessed": "define except-last | ? x |\n  if (>= 1 | list-length $x) (vector) |\n  prepend (head $x) | except-last | tail $x;",
    "dt": true,
    "parse": [
      "define",
      "except-last",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            ">=",
            "1",
            [
              -1,
              "list-length",
              [
                -2,
                "x"
              ]
            ]
          ],
          [
            "vector"
          ],
          [
            -1,
            "prepend",
            [
              "head",
              [
                -2,
                "x"
              ]
            ],
            [
              -1,
              "except-last",
              [
                -1,
                "tail",
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210111103023121100312101001302312111132121001011302130231210100103123121010013321210000330231210101013212101000031231210100133023121011110302312101000131231210100132233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf162;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf145;&#xf14f;&#xf24a;&#xf205;&#xf248;&#xf145;&#xf156;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf154;&#xf245;&#xf248;&#xf145;&#xf159;&#xf246;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf145;&#xf162;&#xf248;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 850
  },
  {
    "role": "code",
    "lines": [
      "= 15 | last | vector 4 5 15;"
    ],
    "preprocessed": "= 15 | last | vector 4 5 15;",
    "dt": false,
    "parse": [
      "=",
      "15",
      [
        -1,
        "last",
        [
          -1,
          "vector",
          "4",
          "5",
          "15"
        ]
      ]
    ],
    "code": "12113021111302312101110130231210000302100302101302111132233",
    "spider": "&#xf147;&#xf24a;&#xf213;&#xf248;&#xf145;&#xf161;&#xf248;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf209;&#xf24a;&#xf213;&#xf24b;",
    "stanza": 851
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 4 5) | except-last | vector 4 5 15;"
    ],
    "preprocessed": "list= (vector 4 5) | except-last | vector 4 5 15;",
    "dt": false,
    "parse": [
      "list=",
      [
        "vector",
        "4",
        "5"
      ],
      [
        -1,
        "except-last",
        [
          -1,
          "vector",
          "4",
          "5",
          "15"
        ]
      ]
    ],
    "code": "1210101003212100003021003021013302312101111030231210000302100302101302111132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf145;&#xf162;&#xf248;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf209;&#xf24a;&#xf213;&#xf24b;",
    "stanza": 852
  },
  {
    "role": "code",
    "lines": [
      "intro list:reverse;"
    ],
    "preprocessed": "intro list:reverse;",
    "dt": false,
    "parse": [
      "intro",
      "list:reverse"
    ],
    "code": "12100103121210011013121011111332233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf151;&#xf145;&#xf163;&#xf24b;",
    "stanza": 853
  },
  {
    "role": "code",
    "lines": [
      "define list:reverse | ? x:list |",
      "  if (<= (list-length $x:list) 1) $x:list |",
      "  prepend (last $x:list) | list:reverse | except-last $x:list;"
    ],
    "preprocessed": "define list:reverse | ? x:list |\n  if (<= (list-length $x:list) 1) $x:list |\n  prepend (last $x:list) | list:reverse | except-last $x:list;",
    "dt": true,
    "parse": [
      "define",
      "list:reverse",
      [
        -1,
        "?",
        "x:list",
        [
          -1,
          "if",
          [
            "<=",
            [
              "list-length",
              [
                -2,
                "x:list"
              ]
            ],
            "1"
          ],
          [
            -2,
            "x:list"
          ],
          [
            -1,
            "prepend",
            [
              "last",
              [
                -2,
                "x:list"
              ]
            ],
            [
              -1,
              "list:reverse",
              [
                -1,
                "except-last",
                [
                  -2,
                  "x:list"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121210011013121011111330231211003121210100131210011013302312111132121001100321210100103123121210100131210011013330213312312121010013121001101330231210101013212101110131231212101001312100110133302312121001101312101111133023121011110312312121010013121001101332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf151;&#xf145;&#xf163;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf153;&#xf246;&#xf145;&#xf150;&#xf246;&#xf145;&#xf156;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf205;&#xf245;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf145;&#xf159;&#xf246;&#xf145;&#xf161;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf248;&#xf145;&#xf151;&#xf145;&#xf163;&#xf248;&#xf145;&#xf162;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf24b;",
    "stanza": 854
  },
  {
    "role": "code",
    "lines": [
      "list= (list:reverse | vector 1 2 3) (vector 3 2 1);"
    ],
    "preprocessed": "list= (list:reverse | vector 1 2 3) (vector 3 2 1);",
    "dt": false,
    "parse": [
      "list=",
      [
        "list:reverse",
        [
          -1,
          "vector",
          "1",
          "2",
          "3"
        ]
      ],
      [
        "vector",
        "3",
        "2",
        "1"
      ]
    ],
    "code": "1210101003212121001101312101111133023121000030213021030211332121000030211302103021332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf151;&#xf145;&#xf163;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf207;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 855
  },
  {
    "role": "code",
    "lines": [
      "list= (list:reverse | vector 50 1 33 99) (vector 99 33 1 50);"
    ],
    "preprocessed": "list= (list:reverse | vector 50 1 33 99) (vector 99 33 1 50);",
    "dt": false,
    "parse": [
      "list=",
      [
        "list:reverse",
        [
          -1,
          "vector",
          "50",
          "1",
          "33",
          "99"
        ]
      ],
      [
        "vector",
        "99",
        "33",
        "1",
        "50"
      ]
    ],
    "code": "1210101003212121001101312101111133023121000030211001030213021000013021100011332121000030211000113021000013021302110010332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf145;&#xf151;&#xf145;&#xf163;&#xf248;&#xf154;&#xf24a;&#xf236;&#xf24a;&#xf205;&#xf24a;&#xf225;&#xf24a;&#xf205;&#xf227;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf227;&#xf24a;&#xf225;&#xf24a;&#xf205;&#xf24a;&#xf236;&#xf245;&#xf24b;",
    "stanza": 856
  },
  {
    "role": "code",
    "lines": [
      "intro append;"
    ],
    "preprocessed": "intro append;",
    "dt": false,
    "parse": [
      "intro",
      "append"
    ],
    "code": "1210010312110000032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf164;&#xf24b;",
    "stanza": 857
  },
  {
    "role": "code",
    "lines": [
      "define append | ? x | ? lst |",
      "  if (= 0 | list-length $lst) (vector $x) |",
      "  prepend (head | $lst) | append $x | tail $lst;"
    ],
    "preprocessed": "define append | ? x | ? lst |\n  if (= 0 | list-length $lst) (vector $x) |\n  prepend (head | $lst) | append $x | tail $lst;",
    "dt": true,
    "parse": [
      "define",
      "append",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "lst",
          [
            -1,
            "if",
            [
              "=",
              "0",
              [
                -1,
                "list-length",
                [
                  -2,
                  "lst"
                ]
              ]
            ],
            [
              "vector",
              [
                -2,
                "x"
              ]
            ],
            [
              -1,
              "prepend",
              [
                "head",
                [
                  -1,
                  [
                    -2,
                    "lst"
                  ]
                ]
              ],
              [
                -1,
                "append",
                [
                  -2,
                  "x"
                ],
                [
                  -1,
                  "tail",
                  [
                    -2,
                    "lst"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131211000003023121100312101001302312110031211000013023121111321211302030231210100103123121100001332121000031231210100133023121010101321210100003023123121100001330231211000003123121010013023121010001312312110000132233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf164;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf165;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf249;&#xf145;&#xf165;&#xf245;&#xf246;&#xf154;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf145;&#xf159;&#xf246;&#xf145;&#xf154;&#xf248;&#xf249;&#xf145;&#xf165;&#xf245;&#xf248;&#xf145;&#xf164;&#xf249;&#xf16d;&#xf248;&#xf145;&#xf155;&#xf249;&#xf145;&#xf165;&#xf24b;",
    "stanza": 858
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 1 2 5) | append 5 | vector 1 2;"
    ],
    "preprocessed": "list= (vector 1 2 5) | append 5 | vector 1 2;",
    "dt": false,
    "parse": [
      "list=",
      [
        "vector",
        "1",
        "2",
        "5"
      ],
      [
        -1,
        "append",
        "5",
        [
          -1,
          "vector",
          "1",
          "2"
        ]
      ]
    ],
    "code": "121010100321210000302130210302101330231211000003021013023121000030213021032233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf145;&#xf164;&#xf24a;&#xf209;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 859
  },
  {
    "role": "code",
    "lines": [
      "intro select-match;"
    ],
    "preprocessed": "intro select-match;",
    "dt": false,
    "parse": [
      "intro",
      "select-match"
    ],
    "code": "1210010312110001032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf166;&#xf24b;",
    "stanza": 860
  },
  {
    "role": "code",
    "lines": [
      "define select-match | ? test | ? lst |",
      "  if (= 0 | list-length $lst) $lst |",
      "  if (not | test | head $lst) (select-match $test | tail $lst) |",
      "  prepend (head $lst) (select-match $test | tail $lst);"
    ],
    "preprocessed": "define select-match | ? test | ? lst |\n  if (= 0 | list-length $lst) $lst |\n  if (not | test | head $lst) (select-match $test | tail $lst) |\n  prepend (head $lst) (select-match $test | tail $lst);",
    "dt": true,
    "parse": [
      "define",
      "select-match",
      [
        -1,
        "?",
        "test",
        [
          -1,
          "?",
          "lst",
          [
            -1,
            "if",
            [
              "=",
              "0",
              [
                -1,
                "list-length",
                [
                  -2,
                  "lst"
                ]
              ]
            ],
            [
              -2,
              "lst"
            ],
            [
              -1,
              "if",
              [
                "not",
                [
                  -1,
                  "test",
                  [
                    -1,
                    "head",
                    [
                      -2,
                      "lst"
                    ]
                  ]
                ]
              ],
              [
                "select-match",
                [
                  -2,
                  "test"
                ],
                [
                  -1,
                  "tail",
                  [
                    -2,
                    "lst"
                  ]
                ]
              ],
              [
                -1,
                "prepend",
                [
                  "head",
                  [
                    -2,
                    "lst"
                  ]
                ],
                [
                  "select-match",
                  [
                    -2,
                    "test"
                  ],
                  [
                    -1,
                    "tail",
                    [
                      -2,
                      "lst"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312110001030231211003121100011302312110031211000013023121111321211302030231210100103123121100001331231211000013023121111321210130231211000113023121010000312312110000133212110001031231211000113023121010001312312110000133023121010101321210100003123121100001332121100010312312110001130231210100013123121100001332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf166;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf167;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf165;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf249;&#xf145;&#xf165;&#xf245;&#xf249;&#xf145;&#xf165;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf145;&#xf167;&#xf248;&#xf145;&#xf154;&#xf249;&#xf145;&#xf165;&#xf245;&#xf246;&#xf145;&#xf166;&#xf249;&#xf145;&#xf167;&#xf248;&#xf145;&#xf155;&#xf249;&#xf145;&#xf165;&#xf245;&#xf248;&#xf145;&#xf159;&#xf246;&#xf145;&#xf154;&#xf249;&#xf145;&#xf165;&#xf245;&#xf246;&#xf145;&#xf166;&#xf249;&#xf145;&#xf167;&#xf248;&#xf145;&#xf155;&#xf249;&#xf145;&#xf165;&#xf245;&#xf24b;",
    "stanza": 861
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 14 19 13) | select-match (? x | > $x 10) | vector 1 14 19 3 13 0 4;"
    ],
    "preprocessed": "list= (vector 14 19 13) | select-match (? x | > $x 10) | vector 1 14 19 3 13 0 4;",
    "dt": false,
    "parse": [
      "list=",
      [
        "vector",
        "14",
        "19",
        "13"
      ],
      [
        -1,
        "select-match",
        [
          "?",
          "x",
          [
            -1,
            ">",
            [
              -2,
              "x"
            ],
            "10"
          ]
        ],
        [
          -1,
          "vector",
          "1",
          "14",
          "19",
          "3",
          "13",
          "0",
          "4"
        ]
      ]
    ],
    "code": "1210101003212100003021110302100113021101330231211000103212110031210100130231210031231210100130210103302312100003021302111030210011302113021101302030210032233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf154;&#xf24a;&#xf212;&#xf24a;&#xf217;&#xf24a;&#xf211;&#xf245;&#xf248;&#xf145;&#xf166;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf148;&#xf249;&#xf16d;&#xf24a;&#xf20e;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf212;&#xf24a;&#xf217;&#xf24a;&#xf207;&#xf24a;&#xf211;&#xf24a;&#xf204;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 862
  },
  {
    "role": "file",
    "lines": [
      "== COS_Series =="
    ],
    "stanza": 863
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Just in passing, give approximate values for `pi` and `e`.",
      ""
    ],
    "section_description": "introduce pi and e",
    "section_category": "MATH",
    "section_index": 20,
    "stanza": 864
  },
  {
    "role": "code",
    "lines": [
      "intro minus;"
    ],
    "preprocessed": "intro minus;",
    "dt": false,
    "parse": [
      "intro",
      "minus"
    ],
    "code": "1210010312110010032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf168;&#xf24b;",
    "stanza": 865
  },
  {
    "role": "code",
    "lines": [
      "define minus | ? x | - 0 $x;"
    ],
    "preprocessed": "define minus | ? x | - 0 $x;",
    "dt": true,
    "parse": [
      "define",
      "minus",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "-",
          "0",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "code": "121101312110010030231211003121010013023121011302031231210100132233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf168;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14f;&#xf24a;&#xf204;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 866
  },
  {
    "role": "code",
    "lines": [
      "= 0 | + 4 | minus 4;"
    ],
    "preprocessed": "= 0 | + 4 | minus 4;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "+",
        "4",
        [
          -1,
          "minus",
          "4"
        ]
      ]
    ],
    "code": "121130203023121010302100302312110010030210032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf14e;&#xf24a;&#xf208;&#xf248;&#xf145;&#xf168;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 867
  },
  {
    "role": "code",
    "lines": [
      "= 8 | + 10 | minus 2;"
    ],
    "preprocessed": "= 8 | + 10 | minus 2;",
    "dt": false,
    "parse": [
      "=",
      "8",
      [
        -1,
        "+",
        "10",
        [
          -1,
          "minus",
          "2"
        ]
      ]
    ],
    "code": "121130210003023121010302101030231211001003021032233",
    "spider": "&#xf147;&#xf24a;&#xf20c;&#xf248;&#xf14e;&#xf24a;&#xf20e;&#xf248;&#xf145;&#xf168;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 868
  },
  {
    "role": "code",
    "lines": [
      "intro frac;"
    ],
    "preprocessed": "intro frac;",
    "dt": false,
    "parse": [
      "intro",
      "frac"
    ],
    "code": "121001031211000032233",
    "spider": "&#xf156;&#xf24a;&#xf174;&#xf24b;",
    "stanza": 869
  },
  {
    "role": "code",
    "lines": [
      "= 40 | frac 40 1;"
    ],
    "preprocessed": "= 40 | frac 40 1;",
    "dt": false,
    "parse": [
      "=",
      "40",
      [
        -1,
        "frac",
        "40",
        "1"
      ]
    ],
    "code": "1211302101000302312110000302101000302132233",
    "spider": "&#xf147;&#xf24a;&#xf22c;&#xf248;&#xf174;&#xf24a;&#xf22c;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 870
  },
  {
    "role": "code",
    "lines": [
      "= 20 | frac 40 2;"
    ],
    "preprocessed": "= 20 | frac 40 2;",
    "dt": false,
    "parse": [
      "=",
      "20",
      [
        -1,
        "frac",
        "40",
        "2"
      ]
    ],
    "code": "1211302101003023121100003021010003021032233",
    "spider": "&#xf147;&#xf24a;&#xf218;&#xf248;&#xf174;&#xf24a;&#xf22c;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 871
  },
  {
    "role": "code",
    "lines": [
      "= 10 | frac 40 4;"
    ],
    "preprocessed": "= 10 | frac 40 4;",
    "dt": false,
    "parse": [
      "=",
      "10",
      [
        -1,
        "frac",
        "40",
        "4"
      ]
    ],
    "code": "1211302101030231211000030210100030210032233",
    "spider": "&#xf147;&#xf24a;&#xf20e;&#xf248;&#xf174;&#xf24a;&#xf22c;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 872
  },
  {
    "role": "code",
    "lines": [
      "= 5 | frac 40 8;"
    ],
    "preprocessed": "= 5 | frac 40 8;",
    "dt": false,
    "parse": [
      "=",
      "5",
      [
        -1,
        "frac",
        "40",
        "8"
      ]
    ],
    "code": "1211302101302312110000302101000302100032233",
    "spider": "&#xf147;&#xf24a;&#xf209;&#xf248;&#xf174;&#xf24a;&#xf22c;&#xf24a;&#xf20c;&#xf24b;",
    "stanza": 873
  },
  {
    "role": "code",
    "lines": [
      "= 1 | + (frac 1 2) (frac 1 2);"
    ],
    "preprocessed": "= 1 | + (frac 1 2) (frac 1 2);",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "+",
        [
          "frac",
          "1",
          "2"
        ],
        [
          "frac",
          "1",
          "2"
        ]
      ]
    ],
    "code": "121130213023121010321211000030213021033212110000302130210332233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf14e;&#xf246;&#xf174;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf174;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 874
  },
  {
    "role": "code",
    "lines": [
      "= 2 | + (frac 3 2) (frac 1 2);"
    ],
    "preprocessed": "= 2 | + (frac 3 2) (frac 1 2);",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "+",
        [
          "frac",
          "3",
          "2"
        ],
        [
          "frac",
          "1",
          "2"
        ]
      ]
    ],
    "code": "12113021030231210103212110000302113021033212110000302130210332233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf14e;&#xf246;&#xf174;&#xf24a;&#xf207;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf174;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 875
  },
  {
    "role": "code",
    "lines": [
      "= 1 | + (frac 3 5) (frac 2 5);"
    ],
    "preprocessed": "= 1 | + (frac 3 5) (frac 2 5);",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "+",
        [
          "frac",
          "3",
          "5"
        ],
        [
          "frac",
          "2",
          "5"
        ]
      ]
    ],
    "code": "1211302130231210103212110000302113021013321211000030210302101332233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf14e;&#xf246;&#xf174;&#xf24a;&#xf207;&#xf24a;&#xf209;&#xf245;&#xf246;&#xf174;&#xf24a;&#xf206;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 876
  },
  {
    "role": "code",
    "lines": [
      "intro abs;"
    ],
    "preprocessed": "intro abs;",
    "dt": false,
    "parse": [
      "intro",
      "abs"
    ],
    "code": "1210010312110010132233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf169;&#xf24b;",
    "stanza": 877
  },
  {
    "role": "code",
    "lines": [
      "define abs | ? x | if (> $x 0) $x (- 0 $x);"
    ],
    "preprocessed": "define abs | ? x | if (> $x 0) $x (- 0 $x);",
    "dt": true,
    "parse": [
      "define",
      "abs",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            ">",
            [
              -2,
              "x"
            ],
            "0"
          ],
          [
            -2,
            "x"
          ],
          [
            "-",
            "0",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "121101312110010130231211003121010013023121111321210031231210100130203312312101001321210113020312312101001332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf169;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf148;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf249;&#xf16d;&#xf246;&#xf14f;&#xf24a;&#xf204;&#xf249;&#xf16d;&#xf245;&#xf24b;",
    "stanza": 878
  },
  {
    "role": "code",
    "lines": [
      "= 4 | abs 4;"
    ],
    "preprocessed": "= 4 | abs 4;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        "abs",
        "4"
      ]
    ],
    "code": "1211302100302312110010130210032233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf145;&#xf169;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 879
  },
  {
    "role": "code",
    "lines": [
      "= 4 | abs | minus 4;"
    ],
    "preprocessed": "= 4 | abs | minus 4;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        "abs",
        [
          -1,
          "minus",
          "4"
        ]
      ]
    ],
    "code": "12113021003023121100101302312110010030210032233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf145;&#xf169;&#xf248;&#xf145;&#xf168;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 880
  },
  {
    "role": "code",
    "lines": [
      "intro within;"
    ],
    "preprocessed": "intro within;",
    "dt": false,
    "parse": [
      "intro",
      "within"
    ],
    "code": "1210010312110011032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf16a;&#xf24b;",
    "stanza": 881
  },
  {
    "role": "code",
    "lines": [
      "define demo:epsilon | frac 1 10000;"
    ],
    "preprocessed": "define demo:epsilon | frac 1 10000;",
    "dt": true,
    "parse": [
      "define",
      "demo:epsilon",
      [
        -1,
        "frac",
        "1",
        "10000"
      ]
    ],
    "code": "121101312121001003121100111330231211000030213021001110001000032233",
    "spider": "&#xf151;&#xf24a;&#xf168;&#xf145;&#xf16b;&#xf248;&#xf174;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf220;&#xf214;&#xf24b;",
    "stanza": 882
  },
  {
    "role": "code",
    "lines": [
      "define within | ? epsilon | ? x | ? y | < (abs | - $x $y) $epsilon;"
    ],
    "preprocessed": "define within | ? epsilon | ? x | ? y | < (abs | - $x $y) $epsilon;",
    "dt": true,
    "parse": [
      "define",
      "within",
      [
        -1,
        "?",
        "epsilon",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "?",
            "y",
            [
              -1,
              "<",
              [
                "abs",
                [
                  -1,
                  "-",
                  [
                    -2,
                    "x"
                  ],
                  [
                    -2,
                    "y"
                  ]
                ]
              ],
              [
                -2,
                "epsilon"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121100110302312110031211001113023121100312101001302312110031210000013023121032121100101302312101131231210100131231210000013312312110011132233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf16a;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf16b;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf146;&#xf246;&#xf145;&#xf169;&#xf248;&#xf14f;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf249;&#xf145;&#xf16b;&#xf24b;",
    "stanza": 883
  },
  {
    "role": "code",
    "lines": [
      "not | within $demo:epsilon 1 2;"
    ],
    "preprocessed": "not | within $demo:epsilon 1 2;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "within",
        [
          -2,
          "demo:epsilon"
        ],
        "1",
        "2"
      ]
    ],
    "code": "121013023121100110312312121001003121100111330213021032233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf16a;&#xf249;&#xf168;&#xf145;&#xf16b;&#xf205;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 884
  },
  {
    "role": "code",
    "lines": [
      "not | within $demo:epsilon 2 1;"
    ],
    "preprocessed": "not | within $demo:epsilon 2 1;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "within",
        [
          -2,
          "demo:epsilon"
        ],
        "2",
        "1"
      ]
    ],
    "code": "121013023121100110312312121001003121100111330210302132233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf16a;&#xf249;&#xf168;&#xf145;&#xf16b;&#xf206;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 885
  },
  {
    "role": "code",
    "lines": [
      "within $demo:epsilon 2 2;"
    ],
    "preprocessed": "within $demo:epsilon 2 2;",
    "dt": false,
    "parse": [
      "within",
      [
        -2,
        "demo:epsilon"
      ],
      "2",
      "2"
    ],
    "code": "1211001103123121210010031211001113302103021032233",
    "spider": "&#xf145;&#xf16a;&#xf249;&#xf168;&#xf145;&#xf16b;&#xf206;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 886
  },
  {
    "role": "code",
    "lines": [
      "within $demo:epsilon 2 | + 2 (frac $demo:epsilon 2);"
    ],
    "preprocessed": "within $demo:epsilon 2 | + 2 (frac $demo:epsilon 2);",
    "dt": false,
    "parse": [
      "within",
      [
        -2,
        "demo:epsilon"
      ],
      "2",
      [
        -1,
        "+",
        "2",
        [
          "frac",
          [
            -2,
            "demo:epsilon"
          ],
          "2"
        ]
      ]
    ],
    "code": "1211001103123121210010031211001113302103023121010302103212110000312312121001003121100111330210332233",
    "spider": "&#xf145;&#xf16a;&#xf249;&#xf168;&#xf145;&#xf16b;&#xf206;&#xf248;&#xf14e;&#xf24a;&#xf206;&#xf246;&#xf174;&#xf249;&#xf168;&#xf145;&#xf16b;&#xf206;&#xf245;&#xf24b;",
    "stanza": 887
  },
  {
    "role": "code",
    "lines": [
      "not | within $demo:epsilon 2 | + 2 (* $demo:epsilon 2);"
    ],
    "preprocessed": "not | within $demo:epsilon 2 | + 2 (* $demo:epsilon 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "within",
        [
          -2,
          "demo:epsilon"
        ],
        "2",
        [
          -1,
          "+",
          "2",
          [
            "*",
            [
              -2,
              "demo:epsilon"
            ],
            "2"
          ]
        ]
      ]
    ],
    "code": "12101302312110011031231212100100312110011133021030231210103021032121001312312121001003121100111330210332233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf16a;&#xf249;&#xf168;&#xf145;&#xf16b;&#xf206;&#xf248;&#xf14e;&#xf24a;&#xf206;&#xf246;&#xf14d;&#xf249;&#xf168;&#xf145;&#xf16b;&#xf206;&#xf245;&#xf24b;",
    "stanza": 888
  },
  {
    "role": "code",
    "lines": [
      "intro range;"
    ],
    "preprocessed": "intro range;",
    "dt": false,
    "parse": [
      "intro",
      "range"
    ],
    "code": "1210010312110100032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf16c;&#xf24b;",
    "stanza": 889
  },
  {
    "role": "code",
    "lines": [
      "define range | ? x:- | ? x:+ |",
      "  if (<= $x:+ $x:-) (vector) |",
      "  prepend $x:- | range (+ 1 $x:-) $x:+;"
    ],
    "preprocessed": "define range | ? x:- | ? x:+ |\n  if (<= $x:+ $x:-) (vector) |\n  prepend $x:- | range (+ 1 $x:-) $x:+;",
    "dt": true,
    "parse": [
      "define",
      "range",
      [
        -1,
        "?",
        "x:-",
        [
          -1,
          "?",
          "x:+",
          [
            -1,
            "if",
            [
              "<=",
              [
                -2,
                "x:+"
              ],
              [
                -2,
                "x:-"
              ]
            ],
            [
              "vector"
            ],
            [
              -1,
              "prepend",
              [
                -2,
                "x:-"
              ],
              [
                -1,
                "range",
                [
                  "+",
                  "1",
                  [
                    -2,
                    "x:-"
                  ]
                ],
                [
                  -2,
                  "x:+"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131211010003023121100312121010013121011330231211003121210100131210103302312111132121001100312312121010013121010331231212101001312101133321210000330231210101013123121210100131210113302312110100032121010302131231212101001312101133312312121010013121010332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf16c;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf14f;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf14e;&#xf248;&#xf153;&#xf246;&#xf145;&#xf150;&#xf249;&#xf16d;&#xf14e;&#xf249;&#xf16d;&#xf14f;&#xf245;&#xf246;&#xf154;&#xf245;&#xf248;&#xf145;&#xf159;&#xf249;&#xf16d;&#xf14f;&#xf248;&#xf145;&#xf16c;&#xf246;&#xf14e;&#xf24a;&#xf205;&#xf249;&#xf16d;&#xf14f;&#xf245;&#xf249;&#xf16d;&#xf14e;&#xf24b;",
    "stanza": 890
  },
  {
    "role": "code",
    "lines": [
      "= 6 | reduce $+ | range 0 4;"
    ],
    "preprocessed": "= 6 | reduce $+ | range 0 4;",
    "dt": false,
    "parse": [
      "=",
      "6",
      [
        -1,
        "reduce",
        [
          -2,
          "+"
        ],
        [
          -1,
          "range",
          "0",
          "4"
        ]
      ]
    ],
    "code": "1211302110302312101101031231210103023121101000302030210032233",
    "spider": "&#xf147;&#xf24a;&#xf20a;&#xf248;&#xf145;&#xf15e;&#xf249;&#xf14e;&#xf248;&#xf145;&#xf16c;&#xf24a;&#xf204;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 891
  },
  {
    "role": "code",
    "lines": [
      "= 12 | reduce $+ | map (? x | * $x 2) | range 0 4;"
    ],
    "preprocessed": "= 12 | reduce $+ | map (? x | * $x 2) | range 0 4;",
    "dt": false,
    "parse": [
      "=",
      "12",
      [
        -1,
        "reduce",
        [
          -2,
          "+"
        ],
        [
          -1,
          "map",
          [
            "?",
            "x",
            [
              -1,
              "*",
              [
                -2,
                "x"
              ],
              "2"
            ]
          ],
          [
            -1,
            "range",
            "0",
            "4"
          ]
        ]
      ]
    ],
    "code": "121130211003023121011010312312101030231210110013212110031210100130231210013123121010013021033023121101000302030210032233",
    "spider": "&#xf147;&#xf24a;&#xf210;&#xf248;&#xf145;&#xf15e;&#xf249;&#xf14e;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf145;&#xf16c;&#xf24a;&#xf204;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 892
  },
  {
    "role": "code",
    "lines": [
      "= 3 | reduce $+ | range 3 4;"
    ],
    "preprocessed": "= 3 | reduce $+ | range 3 4;",
    "dt": false,
    "parse": [
      "=",
      "3",
      [
        -1,
        "reduce",
        [
          -2,
          "+"
        ],
        [
          -1,
          "range",
          "3",
          "4"
        ]
      ]
    ],
    "code": "1211302113023121011010312312101030231211010003021130210032233",
    "spider": "&#xf147;&#xf24a;&#xf207;&#xf248;&#xf145;&#xf15e;&#xf249;&#xf14e;&#xf248;&#xf145;&#xf16c;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 893
  },
  {
    "role": "code",
    "lines": [
      "intro even;"
    ],
    "preprocessed": "intro even;",
    "dt": false,
    "parse": [
      "intro",
      "even"
    ],
    "code": "121001031211101132233",
    "spider": "&#xf156;&#xf24a;&#xf17f;&#xf24b;",
    "stanza": 894
  },
  {
    "role": "code",
    "lines": [
      "not | even 1;"
    ],
    "preprocessed": "not | even 1;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "even",
        "1"
      ]
    ],
    "code": "12101302312111011302132233",
    "spider": "&#xf149;&#xf248;&#xf17f;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 895
  },
  {
    "role": "code",
    "lines": [
      "even 2;"
    ],
    "preprocessed": "even 2;",
    "dt": false,
    "parse": [
      "even",
      "2"
    ],
    "code": "121110113021032233",
    "spider": "&#xf17f;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 896
  },
  {
    "role": "code",
    "lines": [
      "not | even 3;"
    ],
    "preprocessed": "not | even 3;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "even",
        "3"
      ]
    ],
    "code": "121013023121110113021132233",
    "spider": "&#xf149;&#xf248;&#xf17f;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 897
  },
  {
    "role": "code",
    "lines": [
      "even 4;"
    ],
    "preprocessed": "even 4;",
    "dt": false,
    "parse": [
      "even",
      "4"
    ],
    "code": "1211101130210032233",
    "spider": "&#xf17f;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 898
  },
  {
    "role": "code",
    "lines": [
      "not | even 5;"
    ],
    "preprocessed": "not | even 5;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "even",
        "5"
      ]
    ],
    "code": "1210130231211101130210132233",
    "spider": "&#xf149;&#xf248;&#xf17f;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 899
  },
  {
    "role": "code",
    "lines": [
      "intro odd;"
    ],
    "preprocessed": "intro odd;",
    "dt": false,
    "parse": [
      "intro",
      "odd"
    ],
    "code": "1210010312110100132233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf16d;&#xf24b;",
    "stanza": 900
  },
  {
    "role": "code",
    "lines": [
      "define odd | ? x | not | even $x;"
    ],
    "preprocessed": "define odd | ? x | not | even $x;",
    "dt": true,
    "parse": [
      "define",
      "odd",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "not",
          [
            -1,
            "even",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121101001302312110031210100130231210130231211101131231210100132233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf149;&#xf248;&#xf17f;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 901
  },
  {
    "role": "code",
    "lines": [
      "odd 1;"
    ],
    "preprocessed": "odd 1;",
    "dt": false,
    "parse": [
      "odd",
      "1"
    ],
    "code": "121101001302132233",
    "spider": "&#xf145;&#xf16d;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 902
  },
  {
    "role": "code",
    "lines": [
      "even 2;"
    ],
    "preprocessed": "even 2;",
    "dt": false,
    "parse": [
      "even",
      "2"
    ],
    "code": "121110113021032233",
    "spider": "&#xf17f;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 903
  },
  {
    "role": "code",
    "lines": [
      "odd 3;"
    ],
    "preprocessed": "odd 3;",
    "dt": false,
    "parse": [
      "odd",
      "3"
    ],
    "code": "1211010013021132233",
    "spider": "&#xf145;&#xf16d;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 904
  },
  {
    "role": "code",
    "lines": [
      "even 4;"
    ],
    "preprocessed": "even 4;",
    "dt": false,
    "parse": [
      "even",
      "4"
    ],
    "code": "1211101130210032233",
    "spider": "&#xf17f;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 905
  },
  {
    "role": "code",
    "lines": [
      "odd 5;"
    ],
    "preprocessed": "odd 5;",
    "dt": false,
    "parse": [
      "odd",
      "5"
    ],
    "code": "12110100130210132233",
    "spider": "&#xf145;&#xf16d;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 906
  },
  {
    "role": "code",
    "lines": [
      "intro decimal;"
    ],
    "preprocessed": "intro decimal;",
    "dt": false,
    "parse": [
      "intro",
      "decimal"
    ],
    "code": "1210010312110101032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf16e;&#xf24b;",
    "stanza": 907
  },
  {
    "role": "code",
    "lines": [
      "define float | ? x:list | ? y | ? z |",
      "  if (= 0 | list-length | $x:list) 0 |",
      "  + (* $z | head $x:list) |",
      "  float (tail $x:list) $y (* $y $z);"
    ],
    "preprocessed": "define float | ? x:list | ? y | ? z |\n  if (= 0 | list-length | $x:list) 0 |\n  + (* $z | head $x:list) |\n  float (tail $x:list) $y (* $y $z);",
    "dt": true,
    "parse": [
      "define",
      "float",
      [
        -1,
        "?",
        "x:list",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "?",
            "z",
            [
              -1,
              "if",
              [
                "=",
                "0",
                [
                  -1,
                  "list-length",
                  [
                    -1,
                    [
                      -2,
                      "x:list"
                    ]
                  ]
                ]
              ],
              "0",
              [
                -1,
                "+",
                [
                  "*",
                  [
                    -2,
                    "z"
                  ],
                  [
                    -1,
                    "head",
                    [
                      -2,
                      "x:list"
                    ]
                  ]
                ],
                [
                  -1,
                  "float",
                  [
                    "tail",
                    [
                      -2,
                      "x:list"
                    ]
                  ],
                  [
                    -2,
                    "y"
                  ],
                  [
                    "*",
                    [
                      -2,
                      "y"
                    ],
                    [
                      -2,
                      "z"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312110101130231211003121210100131210011013302312110031210000013023121100312100001030231211113212113020302312101001030231231212101001312100110133302030231210103212100131231210000103023121010000312312121010013121001101333023121101011321210100013123121210100131210011013331231210000013212100131231210000013123121000010332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf16f;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf146;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf248;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf204;&#xf248;&#xf14e;&#xf246;&#xf14d;&#xf249;&#xf145;&#xf146;&#xf248;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf248;&#xf145;&#xf16f;&#xf246;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf249;&#xf145;&#xf145;&#xf246;&#xf14d;&#xf249;&#xf145;&#xf145;&#xf249;&#xf145;&#xf146;&#xf245;&#xf24b;",
    "stanza": 908
  },
  {
    "role": "code",
    "lines": [
      "define decimal | ? x | ? x:list | + $x | float $x:list (frac 1 10) (frac 1 10);"
    ],
    "preprocessed": "define decimal | ? x | ? x:list | + $x | float $x:list (frac 1 10) (frac 1 10);",
    "dt": true,
    "parse": [
      "define",
      "decimal",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "x:list",
          [
            -1,
            "+",
            [
              -2,
              "x"
            ],
            [
              -1,
              "float",
              [
                -2,
                "x:list"
              ],
              [
                "frac",
                "1",
                "10"
              ],
              [
                "frac",
                "1",
                "10"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131211010103023121100312101001302312110031212101001312100110133023121010312312101001302312110101131231212101001312100110133212110000302130210103321211000030213021010332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf16e;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf14e;&#xf249;&#xf16d;&#xf248;&#xf145;&#xf16f;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf246;&#xf174;&#xf24a;&#xf205;&#xf24a;&#xf20e;&#xf245;&#xf246;&#xf174;&#xf24a;&#xf205;&#xf24a;&#xf20e;&#xf245;&#xf24b;",
    "stanza": 909
  },
  {
    "role": "code",
    "lines": [
      "within $demo:epsilon (frac 1 3) | decimal 0 | vector 3 3 3 3 3 3;"
    ],
    "preprocessed": "within $demo:epsilon (frac 1 3) | decimal 0 | vector 3 3 3 3 3 3;",
    "dt": false,
    "parse": [
      "within",
      [
        -2,
        "demo:epsilon"
      ],
      [
        "frac",
        "1",
        "3"
      ],
      [
        -1,
        "decimal",
        "0",
        [
          -1,
          "vector",
          "3",
          "3",
          "3",
          "3",
          "3",
          "3"
        ]
      ]
    ],
    "code": "121100110312312121001003121100111332121100003021302113302312110101030203023121000030211302113021130211302113021132233",
    "spider": "&#xf145;&#xf16a;&#xf249;&#xf168;&#xf145;&#xf16b;&#xf246;&#xf174;&#xf24a;&#xf205;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf145;&#xf16e;&#xf24a;&#xf204;&#xf248;&#xf154;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 910
  },
  {
    "role": "code",
    "lines": [
      "within $demo:epsilon (frac 9 7) | decimal 1 | vector 2 8 5 7 1 4;"
    ],
    "preprocessed": "within $demo:epsilon (frac 9 7) | decimal 1 | vector 2 8 5 7 1 4;",
    "dt": false,
    "parse": [
      "within",
      [
        -2,
        "demo:epsilon"
      ],
      [
        "frac",
        "9",
        "7"
      ],
      [
        -1,
        "decimal",
        "1",
        [
          -1,
          "vector",
          "2",
          "8",
          "5",
          "7",
          "1",
          "4"
        ]
      ]
    ],
    "code": "12110011031231212100100312110011133212110000302100130211133023121101010302130231210000302103021000302101302111302130210032233",
    "spider": "&#xf145;&#xf16a;&#xf249;&#xf168;&#xf145;&#xf16b;&#xf246;&#xf174;&#xf24a;&#xf20d;&#xf24a;&#xf20b;&#xf245;&#xf248;&#xf145;&#xf16e;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf20c;&#xf24a;&#xf209;&#xf24a;&#xf20b;&#xf24a;&#xf205;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 911
  },
  {
    "role": "code",
    "lines": [
      "intro e;"
    ],
    "preprocessed": "intro e;",
    "dt": false,
    "parse": [
      "intro",
      "e"
    ],
    "code": "121001031211000132233",
    "spider": "&#xf156;&#xf24a;&#xf175;&#xf24b;",
    "stanza": 912
  },
  {
    "role": "code",
    "lines": [
      "define e:hat | reduce $+ | map (? x | frac 1 | factorial $x) | range 0 100;"
    ],
    "preprocessed": "define e:hat | reduce $+ | map (? x | frac 1 | factorial $x) | range 0 100;",
    "dt": true,
    "parse": [
      "define",
      "e:hat",
      [
        -1,
        "reduce",
        [
          -2,
          "+"
        ],
        [
          -1,
          "map",
          [
            "?",
            "x",
            [
              -1,
              "frac",
              "1",
              [
                -1,
                "factorial",
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ],
          [
            -1,
            "range",
            "0",
            "100"
          ]
        ]
      ]
    ],
    "code": "12110131212110001312110110033023121011010312312101030231210110013212110031210100130231211000030213023121001010312312101001330231211010003020302110010032233",
    "spider": "&#xf151;&#xf24a;&#xf175;&#xf145;&#xf170;&#xf248;&#xf145;&#xf15e;&#xf249;&#xf14e;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf174;&#xf24a;&#xf205;&#xf248;&#xf145;&#xf14e;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf145;&#xf16c;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf228;&#xf24b;",
    "stanza": 913
  },
  {
    "role": "code",
    "lines": [
      "within $demo:epsilon $e $e:hat;"
    ],
    "preprocessed": "within $demo:epsilon $e $e:hat;",
    "dt": false,
    "parse": [
      "within",
      [
        -2,
        "demo:epsilon"
      ],
      [
        -2,
        "e"
      ],
      [
        -2,
        "e:hat"
      ]
    ],
    "code": "1211001103123121210010031211001113312312110001312312121100013121101100332233",
    "spider": "&#xf145;&#xf16a;&#xf249;&#xf168;&#xf145;&#xf16b;&#xf249;&#xf175;&#xf249;&#xf175;&#xf145;&#xf170;&#xf24b;",
    "stanza": 914
  },
  {
    "role": "code",
    "lines": [
      "within $demo:epsilon $e | decimal 2 | vector 7 1 8 2 8;"
    ],
    "preprocessed": "within $demo:epsilon $e | decimal 2 | vector 7 1 8 2 8;",
    "dt": false,
    "parse": [
      "within",
      [
        -2,
        "demo:epsilon"
      ],
      [
        -2,
        "e"
      ],
      [
        -1,
        "decimal",
        "2",
        [
          -1,
          "vector",
          "7",
          "1",
          "8",
          "2",
          "8"
        ]
      ]
    ],
    "code": "1211001103123121210010031211001113312312110001302312110101030210302312100003021113021302100030210302100032233",
    "spider": "&#xf145;&#xf16a;&#xf249;&#xf168;&#xf145;&#xf16b;&#xf249;&#xf175;&#xf248;&#xf145;&#xf16e;&#xf24a;&#xf206;&#xf248;&#xf154;&#xf24a;&#xf20b;&#xf24a;&#xf205;&#xf24a;&#xf20c;&#xf24a;&#xf206;&#xf24a;&#xf20c;&#xf24b;",
    "stanza": 915
  },
  {
    "role": "code",
    "lines": [
      "intro pi;"
    ],
    "preprocessed": "intro pi;",
    "dt": false,
    "parse": [
      "intro",
      "pi"
    ],
    "code": "121001031211001032233",
    "spider": "&#xf156;&#xf24a;&#xf176;&#xf24b;",
    "stanza": 916
  },
  {
    "role": "code",
    "lines": [
      "define pi:part | ? x | frac (if (even $x) (minus 1) 1) | * (* $x 2) | * (+ 1 | * $x 2) (+ 2 | * $x 2);"
    ],
    "preprocessed": "define pi:part | ? x | frac (if (even $x) (minus 1) 1) | * (* $x 2) | * (+ 1 | * $x 2) (+ 2 | * $x 2);",
    "dt": true,
    "parse": [
      "define",
      "pi:part",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "frac",
          [
            "if",
            [
              "even",
              [
                -2,
                "x"
              ]
            ],
            [
              "minus",
              "1"
            ],
            "1"
          ],
          [
            -1,
            "*",
            [
              "*",
              [
                -2,
                "x"
              ],
              "2"
            ],
            [
              -1,
              "*",
              [
                "+",
                "1",
                [
                  -1,
                  "*",
                  [
                    -2,
                    "x"
                  ],
                  "2"
                ]
              ],
              [
                "+",
                "2",
                [
                  -1,
                  "*",
                  [
                    -2,
                    "x"
                  ],
                  "2"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312121100103121101101330231211003121010013023121100003212111132121110113123121010013321211001003021330213302312100132121001312312101001302103302312100132121010302130231210013123121010013021033212101030210302312100131231210100130210332233",
    "spider": "&#xf151;&#xf24a;&#xf176;&#xf145;&#xf171;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf174;&#xf246;&#xf153;&#xf246;&#xf17f;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf168;&#xf24a;&#xf205;&#xf245;&#xf205;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf14d;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf14e;&#xf24a;&#xf205;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf14e;&#xf24a;&#xf206;&#xf248;&#xf14d;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 917
  },
  {
    "role": "code",
    "lines": [
      "define pi:hat | + 3 | * 4 | reduce $+ | map $pi:part | range 1 100;"
    ],
    "preprocessed": "define pi:hat | + 3 | * 4 | reduce $+ | map $pi:part | range 1 100;",
    "dt": true,
    "parse": [
      "define",
      "pi:hat",
      [
        -1,
        "+",
        "3",
        [
          -1,
          "*",
          "4",
          [
            -1,
            "reduce",
            [
              -2,
              "+"
            ],
            [
              -1,
              "map",
              [
                -2,
                "pi:part"
              ],
              [
                -1,
                "range",
                "1",
                "100"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131212110010312110110033023121010302113023121001302100302312101101031231210103023121011001312312121100103121101101330231211010003021302110010032233",
    "spider": "&#xf151;&#xf24a;&#xf176;&#xf145;&#xf170;&#xf248;&#xf14e;&#xf24a;&#xf207;&#xf248;&#xf14d;&#xf24a;&#xf208;&#xf248;&#xf145;&#xf15e;&#xf249;&#xf14e;&#xf248;&#xf145;&#xf15d;&#xf249;&#xf176;&#xf145;&#xf171;&#xf248;&#xf145;&#xf16c;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf228;&#xf24b;",
    "stanza": 918
  },
  {
    "role": "code",
    "lines": [
      "within $demo:epsilon $pi $pi:hat;"
    ],
    "preprocessed": "within $demo:epsilon $pi $pi:hat;",
    "dt": false,
    "parse": [
      "within",
      [
        -2,
        "demo:epsilon"
      ],
      [
        -2,
        "pi"
      ],
      [
        -2,
        "pi:hat"
      ]
    ],
    "code": "1211001103123121210010031211001113312312110010312312121100103121101100332233",
    "spider": "&#xf145;&#xf16a;&#xf249;&#xf168;&#xf145;&#xf16b;&#xf249;&#xf176;&#xf249;&#xf176;&#xf145;&#xf170;&#xf24b;",
    "stanza": 919
  },
  {
    "role": "code",
    "lines": [
      "within $demo:epsilon $pi | decimal 3 | vector 1 4 1 5 9 2 6 5 3 5;"
    ],
    "preprocessed": "within $demo:epsilon $pi | decimal 3 | vector 1 4 1 5 9 2 6 5 3 5;",
    "dt": false,
    "parse": [
      "within",
      [
        -2,
        "demo:epsilon"
      ],
      [
        -2,
        "pi"
      ],
      [
        -1,
        "decimal",
        "3",
        [
          -1,
          "vector",
          "1",
          "4",
          "1",
          "5",
          "9",
          "2",
          "6",
          "5",
          "3",
          "5"
        ]
      ]
    ],
    "code": "121100110312312121001003121100111331231211001030231211010103021130231210000302130210030213021013021001302103021103021013021130210132233",
    "spider": "&#xf145;&#xf16a;&#xf249;&#xf168;&#xf145;&#xf16b;&#xf249;&#xf176;&#xf248;&#xf145;&#xf16e;&#xf24a;&#xf207;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf24a;&#xf20d;&#xf24a;&#xf206;&#xf24a;&#xf20a;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 920
  },
  {
    "role": "code",
    "lines": [
      "intro power:10;"
    ],
    "preprocessed": "intro power:10;",
    "dt": false,
    "parse": [
      "intro",
      "power:10"
    ],
    "code": "12100103121211011103021010332233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf172;&#xf20e;&#xf24b;",
    "stanza": 921
  },
  {
    "role": "code",
    "lines": [
      "define power:10 | ? n |",
      "  if (= $n 0) 1 |",
      "  assign part (if (>= $n 0) 10 (frac 1 10)) |",
      "  reduce $* | map (? x $part) | range 0 (abs $n);"
    ],
    "preprocessed": "define power:10 | ? n |\n  if (= $n 0) 1 |\n  assign part (if (>= $n 0) 10 (frac 1 10)) |\n  reduce $* | map (? x $part) | range 0 (abs $n);",
    "dt": true,
    "parse": [
      "define",
      "power:10",
      [
        -1,
        "?",
        "n",
        [
          -1,
          "if",
          [
            "=",
            [
              -2,
              "n"
            ],
            "0"
          ],
          "1",
          [
            -1,
            "assign",
            "part",
            [
              "if",
              [
                ">=",
                [
                  -2,
                  "n"
                ],
                "0"
              ],
              "10",
              [
                "frac",
                "1",
                "10"
              ]
            ],
            [
              -1,
              "reduce",
              [
                -2,
                "*"
              ],
              [
                -1,
                "map",
                [
                  "?",
                  "x",
                  [
                    -2,
                    "part"
                  ]
                ],
                [
                  -1,
                  "range",
                  "0",
                  [
                    "abs",
                    [
                      -2,
                      "n"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312121101110302101033023121100312100111030231211113212113123121001110302033021302312111031211011013212111132121001011312312100111030203302101032121100003021302101033302312101101031231210013023121011001321211003121010013123121101101330231211010003020321211001013123121001110332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf172;&#xf20e;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf152;&#xf248;&#xf153;&#xf246;&#xf147;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf204;&#xf245;&#xf205;&#xf248;&#xf152;&#xf24a;&#xf145;&#xf171;&#xf246;&#xf153;&#xf246;&#xf145;&#xf14f;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf204;&#xf245;&#xf20e;&#xf246;&#xf174;&#xf24a;&#xf205;&#xf24a;&#xf20e;&#xf245;&#xf245;&#xf248;&#xf145;&#xf15e;&#xf249;&#xf14d;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf145;&#xf171;&#xf245;&#xf248;&#xf145;&#xf16c;&#xf24a;&#xf204;&#xf246;&#xf145;&#xf169;&#xf249;&#xf145;&#xf152;&#xf245;&#xf24b;",
    "stanza": 922
  },
  {
    "role": "code",
    "lines": [
      "define float:= | ? x | ? y |",
      "  if (= $x $y) $true |",
      "  within (frac (+ $x $y) 200000) $x $y;"
    ],
    "preprocessed": "define float:= | ? x | ? y |\n  if (= $x $y) $true |\n  within (frac (+ $x $y) 200000) $x $y;",
    "dt": true,
    "parse": [
      "define",
      "float:=",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              "=",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ],
            [
              -2,
              "true"
            ],
            [
              -1,
              "within",
              [
                "frac",
                [
                  "+",
                  [
                    -2,
                    "x"
                  ],
                  [
                    -2,
                    "y"
                  ]
                ],
                "200000"
              ],
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131212110101131211330231211003121010013023121100312100000130231211113212113123121010013123121000001331231213023121100110321211000032121010312312101001312312100000133021100001101010000003312312101001312312100000132233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf16f;&#xf147;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf153;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf249;&#xf145;&#xf248;&#xf145;&#xf16a;&#xf246;&#xf174;&#xf246;&#xf14e;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf234;&#xf239;&#xf204;&#xf245;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf24b;",
    "stanza": 923
  },
  {
    "role": "code",
    "lines": [
      "float:= 10 | power:10 1;"
    ],
    "preprocessed": "float:= 10 | power:10 1;",
    "dt": false,
    "parse": [
      "float:=",
      "10",
      [
        -1,
        "power:10",
        "1"
      ]
    ],
    "code": "12121101011312113302101030231212110111030210103302132233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf20e;&#xf248;&#xf145;&#xf172;&#xf20e;&#xf205;&#xf24b;",
    "stanza": 924
  },
  {
    "role": "code",
    "lines": [
      "float:= 100 | power:10 2;"
    ],
    "preprocessed": "float:= 100 | power:10 2;",
    "dt": false,
    "parse": [
      "float:=",
      "100",
      [
        -1,
        "power:10",
        "2"
      ]
    ],
    "code": "121211010113121133021100100302312121101110302101033021032233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf205;&#xf228;&#xf248;&#xf145;&#xf172;&#xf20e;&#xf206;&#xf24b;",
    "stanza": 925
  },
  {
    "role": "code",
    "lines": [
      "float:= 1000 | power:10 3;"
    ],
    "preprocessed": "float:= 1000 | power:10 3;",
    "dt": false,
    "parse": [
      "float:=",
      "1000",
      [
        -1,
        "power:10",
        "3"
      ]
    ],
    "code": "121211010113121133021111101000302312121101110302101033021132233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf213;&#xf22c;&#xf248;&#xf145;&#xf172;&#xf20e;&#xf207;&#xf24b;",
    "stanza": 926
  },
  {
    "role": "code",
    "lines": [
      "float:= (frac 1 10) | power:10 | minus 1;"
    ],
    "preprocessed": "float:= (frac 1 10) | power:10 | minus 1;",
    "dt": false,
    "parse": [
      "float:=",
      [
        "frac",
        "1",
        "10"
      ],
      [
        -1,
        "power:10",
        [
          -1,
          "minus",
          "1"
        ]
      ]
    ],
    "code": "121211010113121133212110000302130210103302312121101110302101033023121100100302132233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf174;&#xf24a;&#xf205;&#xf24a;&#xf20e;&#xf245;&#xf248;&#xf145;&#xf172;&#xf20e;&#xf248;&#xf145;&#xf168;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 927
  },
  {
    "role": "code",
    "lines": [
      "float:= (frac 1 100) | power:10 | minus 2;"
    ],
    "preprocessed": "float:= (frac 1 100) | power:10 | minus 2;",
    "dt": false,
    "parse": [
      "float:=",
      [
        "frac",
        "1",
        "100"
      ],
      [
        -1,
        "power:10",
        [
          -1,
          "minus",
          "2"
        ]
      ]
    ],
    "code": "1212110101131211332121100003021302110010033023121211011103021010330231211001003021032233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf174;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf228;&#xf245;&#xf248;&#xf145;&#xf172;&#xf20e;&#xf248;&#xf145;&#xf168;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 928
  },
  {
    "role": "code",
    "lines": [
      "float:= 1 | power:10 0;"
    ],
    "preprocessed": "float:= 1 | power:10 0;",
    "dt": false,
    "parse": [
      "float:=",
      "1",
      [
        -1,
        "power:10",
        "0"
      ]
    ],
    "code": "12121101011312113302130231212110111030210103302032233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf205;&#xf248;&#xf145;&#xf172;&#xf20e;&#xf204;&#xf24b;",
    "stanza": 929
  },
  {
    "role": "code",
    "lines": [
      "define decimal:power | ? x:power | ? x:int | ? x:list |",
      "  * (power:10 $x:power) (decimal $x:int $x:list);"
    ],
    "preprocessed": "define decimal:power | ? x:power | ? x:int | ? x:list |\n  * (power:10 $x:power) (decimal $x:int $x:list);",
    "dt": true,
    "parse": [
      "define",
      "decimal:power",
      [
        -1,
        "?",
        "x:power",
        [
          -1,
          "?",
          "x:int",
          [
            -1,
            "?",
            "x:list",
            [
              -1,
              "*",
              [
                "power:10",
                [
                  -2,
                  "x:power"
                ]
              ],
              [
                "decimal",
                [
                  -2,
                  "x:int"
                ],
                [
                  -2,
                  "x:list"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121211010103121101110330231211003121210100131211011103302312110031212101001312111110330231211003121210100131210011013302312100132121211011103021010331231212101001312110111033321211010103123121210100131211111033123121210100131210011013332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf16e;&#xf145;&#xf172;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf172;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf182;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf14d;&#xf246;&#xf145;&#xf172;&#xf20e;&#xf249;&#xf16d;&#xf145;&#xf172;&#xf245;&#xf246;&#xf145;&#xf16e;&#xf249;&#xf16d;&#xf182;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf24b;",
    "stanza": 930
  },
  {
    "role": "code",
    "lines": [
      "float:= 1530 | decimal:power 3 1 | vector 5 3;"
    ],
    "preprocessed": "float:= 1530 | decimal:power 3 1 | vector 5 3;",
    "dt": false,
    "parse": [
      "float:=",
      "1530",
      [
        -1,
        "decimal:power",
        "3",
        "1",
        [
          -1,
          "vector",
          "5",
          "3"
        ]
      ]
    ],
    "code": "121211010113121133021011111101030231212110101031211011103302113021302312100003021013021132233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf21b;&#xf23e;&#xf248;&#xf145;&#xf16e;&#xf145;&#xf172;&#xf207;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 931
  },
  {
    "role": "code",
    "lines": [
      "float:= 15300 | decimal:power 4 1 | vector 5 3;"
    ],
    "preprocessed": "float:= 15300 | decimal:power 4 1 | vector 5 3;",
    "dt": false,
    "parse": [
      "float:=",
      "15300",
      [
        -1,
        "decimal:power",
        "4",
        "1",
        [
          -1,
          "vector",
          "5",
          "3"
        ]
      ]
    ],
    "code": "1212110101131211330211101111000100302312121101010312110111033021003021302312100003021013021132233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf207;&#xf233;&#xf208;&#xf248;&#xf145;&#xf16e;&#xf145;&#xf172;&#xf208;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 932
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 1 | vector 5 3) | decimal:power 0 1 | vector 5 3;"
    ],
    "preprocessed": "float:= (decimal 1 | vector 5 3) | decimal:power 0 1 | vector 5 3;",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "1",
        [
          -1,
          "vector",
          "5",
          "3"
        ]
      ],
      [
        -1,
        "decimal:power",
        "0",
        "1",
        [
          -1,
          "vector",
          "5",
          "3"
        ]
      ]
    ],
    "code": "12121101011312113321211010103021302312100003021013021133023121211010103121101110330203021302312100003021013021132233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf145;&#xf16e;&#xf145;&#xf172;&#xf204;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 933
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 0 | vector 0 0 1 5 3) | decimal:power (minus 3) 1 | vector 5 3;"
    ],
    "preprocessed": "float:= (decimal 0 | vector 0 0 1 5 3) | decimal:power (minus 3) 1 | vector 5 3;",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "0",
        [
          -1,
          "vector",
          "0",
          "0",
          "1",
          "5",
          "3"
        ]
      ],
      [
        -1,
        "decimal:power",
        [
          "minus",
          "3"
        ],
        "1",
        [
          -1,
          "vector",
          "5",
          "3"
        ]
      ]
    ],
    "code": "121211010113121133212110101030203023121000030203020302130210130211330231212110101031211011103321211001003021133021302312100003021013021132233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf204;&#xf248;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf145;&#xf16e;&#xf145;&#xf172;&#xf246;&#xf145;&#xf168;&#xf24a;&#xf207;&#xf245;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 934
  },
  {
    "role": "code",
    "lines": [
      "intro pow:int;"
    ],
    "preprocessed": "intro pow:int;",
    "dt": false,
    "parse": [
      "intro",
      "pow:int"
    ],
    "code": "121001031212101111312111110332233",
    "spider": "&#xf156;&#xf24a;&#xf173;&#xf182;&#xf24b;",
    "stanza": 935
  },
  {
    "role": "code",
    "lines": [
      "define pow:int | ? x | ? n |",
      "  if (= $n 0) 1 |",
      "  assign part (if (>= $n 0) $x (frac 1 $x)) |",
      "  reduce $* | map (? y $part) | range 0 (abs $n);"
    ],
    "preprocessed": "define pow:int | ? x | ? n |\n  if (= $n 0) 1 |\n  assign part (if (>= $n 0) $x (frac 1 $x)) |\n  reduce $* | map (? y $part) | range 0 (abs $n);",
    "dt": true,
    "parse": [
      "define",
      "pow:int",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "n",
          [
            -1,
            "if",
            [
              "=",
              [
                -2,
                "n"
              ],
              "0"
            ],
            "1",
            [
              -1,
              "assign",
              "part",
              [
                "if",
                [
                  ">=",
                  [
                    -2,
                    "n"
                  ],
                  "0"
                ],
                [
                  -2,
                  "x"
                ],
                [
                  "frac",
                  "1",
                  [
                    -2,
                    "x"
                  ]
                ]
              ],
              [
                -1,
                "reduce",
                [
                  -2,
                  "*"
                ],
                [
                  -1,
                  "map",
                  [
                    "?",
                    "y",
                    [
                      -2,
                      "part"
                    ]
                  ],
                  [
                    -1,
                    "range",
                    "0",
                    [
                      "abs",
                      [
                        -2,
                        "n"
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121210111131211111033023121100312101001302312110031210011103023121111321211312312100111030203302130231211103121101101321211113212100101131231210011103020331231210100132121100003021312312101001333023121011010312312100130231210110013212110031210000013123121101101330231211010003020321211001013123121001110332233",
    "spider": "&#xf151;&#xf24a;&#xf173;&#xf182;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf152;&#xf248;&#xf153;&#xf246;&#xf147;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf204;&#xf245;&#xf205;&#xf248;&#xf152;&#xf24a;&#xf145;&#xf171;&#xf246;&#xf153;&#xf246;&#xf145;&#xf14f;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf204;&#xf245;&#xf249;&#xf16d;&#xf246;&#xf174;&#xf24a;&#xf205;&#xf249;&#xf16d;&#xf245;&#xf245;&#xf248;&#xf145;&#xf15e;&#xf249;&#xf14d;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf249;&#xf145;&#xf171;&#xf245;&#xf248;&#xf145;&#xf16c;&#xf24a;&#xf204;&#xf246;&#xf145;&#xf169;&#xf249;&#xf145;&#xf152;&#xf245;&#xf24b;",
    "stanza": 936
  },
  {
    "role": "code",
    "lines": [
      "= 100 | pow:int 10 2;"
    ],
    "preprocessed": "= 100 | pow:int 10 2;",
    "dt": false,
    "parse": [
      "=",
      "100",
      [
        -1,
        "pow:int",
        "10",
        "2"
      ]
    ],
    "code": "1211302110010030231212101111312111110330210103021032233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf228;&#xf248;&#xf173;&#xf182;&#xf20e;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 937
  },
  {
    "role": "code",
    "lines": [
      "= 25 | pow:int 5 2;"
    ],
    "preprocessed": "= 25 | pow:int 5 2;",
    "dt": false,
    "parse": [
      "=",
      "25",
      [
        -1,
        "pow:int",
        "5",
        "2"
      ]
    ],
    "code": "1211302110013023121210111131211111033021013021032233",
    "spider": "&#xf147;&#xf24a;&#xf21d;&#xf248;&#xf173;&#xf182;&#xf209;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 938
  },
  {
    "role": "code",
    "lines": [
      "= 4 | pow:int 2 2;"
    ],
    "preprocessed": "= 4 | pow:int 2 2;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        "pow:int",
        "2",
        "2"
      ]
    ],
    "code": "1211302100302312121011113121111103302103021032233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf173;&#xf182;&#xf206;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 939
  },
  {
    "role": "code",
    "lines": [
      "= 8 | pow:int 2 3;"
    ],
    "preprocessed": "= 8 | pow:int 2 3;",
    "dt": false,
    "parse": [
      "=",
      "8",
      [
        -1,
        "pow:int",
        "2",
        "3"
      ]
    ],
    "code": "12113021000302312121011113121111103302103021132233",
    "spider": "&#xf147;&#xf24a;&#xf20c;&#xf248;&#xf173;&#xf182;&#xf206;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 940
  },
  {
    "role": "code",
    "lines": [
      "= 16 | pow:int 2 4;"
    ],
    "preprocessed": "= 16 | pow:int 2 4;",
    "dt": false,
    "parse": [
      "=",
      "16",
      [
        -1,
        "pow:int",
        "2",
        "4"
      ]
    ],
    "code": "1211302100003023121210111131211111033021030210032233",
    "spider": "&#xf147;&#xf24a;&#xf214;&#xf248;&#xf173;&#xf182;&#xf206;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 941
  },
  {
    "role": "code",
    "lines": [
      "= 1 | pow:int 2 0;"
    ],
    "preprocessed": "= 1 | pow:int 2 0;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "pow:int",
        "2",
        "0"
      ]
    ],
    "code": "1211302130231212101111312111110330210302032233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf173;&#xf182;&#xf206;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 942
  },
  {
    "role": "code",
    "lines": [
      "= (frac 1 2) | pow:int 2 | minus 1;"
    ],
    "preprocessed": "= (frac 1 2) | pow:int 2 | minus 1;",
    "dt": false,
    "parse": [
      "=",
      [
        "frac",
        "1",
        "2"
      ],
      [
        -1,
        "pow:int",
        "2",
        [
          -1,
          "minus",
          "1"
        ]
      ]
    ],
    "code": "121132121100003021302103302312121011113121111103302103023121100100302132233",
    "spider": "&#xf147;&#xf246;&#xf174;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf173;&#xf182;&#xf206;&#xf248;&#xf145;&#xf168;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 943
  },
  {
    "role": "code",
    "lines": [
      "intro pow;"
    ],
    "preprocessed": "intro pow;",
    "dt": false,
    "parse": [
      "intro",
      "pow"
    ],
    "code": "121001031210111132233",
    "spider": "&#xf156;&#xf24a;&#xf173;&#xf24b;",
    "stanza": 944
  },
  {
    "role": "code",
    "lines": [
      "= 1 | pow 2 0;"
    ],
    "preprocessed": "= 1 | pow 2 0;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "pow",
        "2",
        "0"
      ]
    ],
    "code": "1211302130231210111130210302032233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf173;&#xf24a;&#xf206;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 945
  },
  {
    "role": "code",
    "lines": [
      "= 2 | pow 2 1;"
    ],
    "preprocessed": "= 2 | pow 2 1;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "pow",
        "2",
        "1"
      ]
    ],
    "code": "12113021030231210111130210302132233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf173;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 946
  },
  {
    "role": "code",
    "lines": [
      "= 4 | pow 2 2;"
    ],
    "preprocessed": "= 4 | pow 2 2;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        "pow",
        "2",
        "2"
      ]
    ],
    "code": "1211302100302312101111302103021032233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf173;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 947
  },
  {
    "role": "code",
    "lines": [
      "= 8 | pow 2 3;"
    ],
    "preprocessed": "= 8 | pow 2 3;",
    "dt": false,
    "parse": [
      "=",
      "8",
      [
        -1,
        "pow",
        "2",
        "3"
      ]
    ],
    "code": "12113021000302312101111302103021132233",
    "spider": "&#xf147;&#xf24a;&#xf20c;&#xf248;&#xf173;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 948
  },
  {
    "role": "code",
    "lines": [
      "= 16 | pow 2 4;"
    ],
    "preprocessed": "= 16 | pow 2 4;",
    "dt": false,
    "parse": [
      "=",
      "16",
      [
        -1,
        "pow",
        "2",
        "4"
      ]
    ],
    "code": "1211302100003023121011113021030210032233",
    "spider": "&#xf147;&#xf24a;&#xf214;&#xf248;&#xf173;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 949
  },
  {
    "role": "code",
    "lines": [
      "= 1 | pow 3 0;"
    ],
    "preprocessed": "= 1 | pow 3 0;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "pow",
        "3",
        "0"
      ]
    ],
    "code": "1211302130231210111130211302032233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf173;&#xf24a;&#xf207;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 950
  },
  {
    "role": "code",
    "lines": [
      "= 3 | pow 3 1;"
    ],
    "preprocessed": "= 3 | pow 3 1;",
    "dt": false,
    "parse": [
      "=",
      "3",
      [
        -1,
        "pow",
        "3",
        "1"
      ]
    ],
    "code": "12113021130231210111130211302132233",
    "spider": "&#xf147;&#xf24a;&#xf207;&#xf248;&#xf173;&#xf24a;&#xf207;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 951
  },
  {
    "role": "code",
    "lines": [
      "= 9 | pow 3 2;"
    ],
    "preprocessed": "= 9 | pow 3 2;",
    "dt": false,
    "parse": [
      "=",
      "9",
      [
        -1,
        "pow",
        "3",
        "2"
      ]
    ],
    "code": "12113021001302312101111302113021032233",
    "spider": "&#xf147;&#xf24a;&#xf20d;&#xf248;&#xf173;&#xf24a;&#xf207;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 952
  },
  {
    "role": "code",
    "lines": [
      "= 27 | pow 3 3;"
    ],
    "preprocessed": "= 27 | pow 3 3;",
    "dt": false,
    "parse": [
      "=",
      "27",
      [
        -1,
        "pow",
        "3",
        "3"
      ]
    ],
    "code": "121130211011302312101111302113021132233",
    "spider": "&#xf147;&#xf24a;&#xf21f;&#xf248;&#xf173;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 953
  },
  {
    "role": "code",
    "lines": [
      "= 81 | pow 3 4;"
    ],
    "preprocessed": "= 81 | pow 3 4;",
    "dt": false,
    "parse": [
      "=",
      "81",
      [
        -1,
        "pow",
        "3",
        "4"
      ]
    ],
    "code": "121130210100013023121011113021130210032233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf215;&#xf248;&#xf173;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 954
  },
  {
    "role": "code",
    "lines": [
      "= 1 | pow 4 0;"
    ],
    "preprocessed": "= 1 | pow 4 0;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "pow",
        "4",
        "0"
      ]
    ],
    "code": "12113021302312101111302100302032233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf173;&#xf24a;&#xf208;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 955
  },
  {
    "role": "code",
    "lines": [
      "= 4 | pow 4 1;"
    ],
    "preprocessed": "= 4 | pow 4 1;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        "pow",
        "4",
        "1"
      ]
    ],
    "code": "1211302100302312101111302100302132233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf173;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 956
  },
  {
    "role": "code",
    "lines": [
      "= 16 | pow 4 2;"
    ],
    "preprocessed": "= 16 | pow 4 2;",
    "dt": false,
    "parse": [
      "=",
      "16",
      [
        -1,
        "pow",
        "4",
        "2"
      ]
    ],
    "code": "1211302100003023121011113021003021032233",
    "spider": "&#xf147;&#xf24a;&#xf214;&#xf248;&#xf173;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 957
  },
  {
    "role": "code",
    "lines": [
      "= 64 | pow 4 3;"
    ],
    "preprocessed": "= 64 | pow 4 3;",
    "dt": false,
    "parse": [
      "=",
      "64",
      [
        -1,
        "pow",
        "4",
        "3"
      ]
    ],
    "code": "121130210000003023121011113021003021132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf204;&#xf248;&#xf173;&#xf24a;&#xf208;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 958
  },
  {
    "role": "code",
    "lines": [
      "= 256 | pow 4 4;"
    ],
    "preprocessed": "= 256 | pow 4 4;",
    "dt": false,
    "parse": [
      "=",
      "256",
      [
        -1,
        "pow",
        "4",
        "4"
      ]
    ],
    "code": "121130210000000030231210111130210030210032233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf204;&#xf248;&#xf173;&#xf24a;&#xf208;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 959
  },
  {
    "role": "code",
    "lines": [
      "= 1 | pow 5 0;"
    ],
    "preprocessed": "= 1 | pow 5 0;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "pow",
        "5",
        "0"
      ]
    ],
    "code": "12113021302312101111302101302032233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf173;&#xf24a;&#xf209;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 960
  },
  {
    "role": "code",
    "lines": [
      "= 5 | pow 5 1;"
    ],
    "preprocessed": "= 5 | pow 5 1;",
    "dt": false,
    "parse": [
      "=",
      "5",
      [
        -1,
        "pow",
        "5",
        "1"
      ]
    ],
    "code": "1211302101302312101111302101302132233",
    "spider": "&#xf147;&#xf24a;&#xf209;&#xf248;&#xf173;&#xf24a;&#xf209;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 961
  },
  {
    "role": "code",
    "lines": [
      "= 25 | pow 5 2;"
    ],
    "preprocessed": "= 25 | pow 5 2;",
    "dt": false,
    "parse": [
      "=",
      "25",
      [
        -1,
        "pow",
        "5",
        "2"
      ]
    ],
    "code": "1211302110013023121011113021013021032233",
    "spider": "&#xf147;&#xf24a;&#xf21d;&#xf248;&#xf173;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 962
  },
  {
    "role": "code",
    "lines": [
      "= 125 | pow 5 3;"
    ],
    "preprocessed": "= 125 | pow 5 3;",
    "dt": false,
    "parse": [
      "=",
      "125",
      [
        -1,
        "pow",
        "5",
        "3"
      ]
    ],
    "code": "121130211111013023121011113021013021132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf241;&#xf248;&#xf173;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 963
  },
  {
    "role": "code",
    "lines": [
      "= 625 | pow 5 4;"
    ],
    "preprocessed": "= 625 | pow 5 4;",
    "dt": false,
    "parse": [
      "=",
      "625",
      [
        -1,
        "pow",
        "5",
        "4"
      ]
    ],
    "code": "1211302100111000130231210111130210130210032233",
    "spider": "&#xf147;&#xf24a;&#xf20d;&#xf235;&#xf248;&#xf173;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 964
  },
  {
    "role": "code",
    "lines": [
      "float:= 1 | pow 2 0;"
    ],
    "preprocessed": "float:= 1 | pow 2 0;",
    "dt": false,
    "parse": [
      "float:=",
      "1",
      [
        -1,
        "pow",
        "2",
        "0"
      ]
    ],
    "code": "12121101011312113302130231210111130210302032233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf205;&#xf248;&#xf173;&#xf24a;&#xf206;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 965
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 1 | vector 1 8 9 2 0) | pow 2 (decimal 0 | vector 2 5);"
    ],
    "preprocessed": "float:= (decimal 1 | vector 1 8 9 2 0) | pow 2 (decimal 0 | vector 2 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "1",
        [
          -1,
          "vector",
          "1",
          "8",
          "9",
          "2",
          "0"
        ]
      ],
      [
        -1,
        "pow",
        "2",
        [
          "decimal",
          "0",
          [
            -1,
            "vector",
            "2",
            "5"
          ]
        ]
      ]
    ],
    "code": "12121101011312113321211010103021302312100003021302100030210013021030203302312101111302103212110101030203023121000030210302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf20c;&#xf24a;&#xf20d;&#xf24a;&#xf206;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf206;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf204;&#xf248;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 966
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 1 | vector 4 1 4 2 1) | pow 2 (decimal 0 | vector 5);"
    ],
    "preprocessed": "float:= (decimal 1 | vector 4 1 4 2 1) | pow 2 (decimal 0 | vector 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "1",
        [
          -1,
          "vector",
          "4",
          "1",
          "4",
          "2",
          "1"
        ]
      ],
      [
        -1,
        "pow",
        "2",
        [
          "decimal",
          "0",
          [
            -1,
            "vector",
            "5"
          ]
        ]
      ]
    ],
    "code": "1212110101131211332121101010302130231210000302100302130210030210302133023121011113021032121101010302030231210000302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf206;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf204;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 967
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 1 | vector 6 8 1 7 9) | pow 2 (decimal 0 | vector 7 5);"
    ],
    "preprocessed": "float:= (decimal 1 | vector 6 8 1 7 9) | pow 2 (decimal 0 | vector 7 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "1",
        [
          -1,
          "vector",
          "6",
          "8",
          "1",
          "7",
          "9"
        ]
      ],
      [
        -1,
        "pow",
        "2",
        [
          "decimal",
          "0",
          [
            -1,
            "vector",
            "7",
            "5"
          ]
        ]
      ]
    ],
    "code": "121211010113121133212110101030213023121000030211030210003021302111302100133023121011113021032121101010302030231210000302111302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf24a;&#xf205;&#xf24a;&#xf20b;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf206;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf204;&#xf248;&#xf154;&#xf24a;&#xf20b;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 968
  },
  {
    "role": "code",
    "lines": [
      "float:= 2 | pow 2 1;"
    ],
    "preprocessed": "float:= 2 | pow 2 1;",
    "dt": false,
    "parse": [
      "float:=",
      "2",
      [
        -1,
        "pow",
        "2",
        "1"
      ]
    ],
    "code": "121211010113121133021030231210111130210302132233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf206;&#xf248;&#xf173;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 969
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 2 | vector 3 7 8 4 1) | pow 2 (decimal 1 | vector 2 5);"
    ],
    "preprocessed": "float:= (decimal 2 | vector 3 7 8 4 1) | pow 2 (decimal 1 | vector 2 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "2",
        [
          -1,
          "vector",
          "3",
          "7",
          "8",
          "4",
          "1"
        ]
      ],
      [
        -1,
        "pow",
        "2",
        [
          "decimal",
          "1",
          [
            -1,
            "vector",
            "2",
            "5"
          ]
        ]
      ]
    ],
    "code": "1212110101131211332121101010302103023121000030211302111302100030210030213302312101111302103212110101030213023121000030210302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf206;&#xf248;&#xf154;&#xf24a;&#xf207;&#xf24a;&#xf20b;&#xf24a;&#xf20c;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf206;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 970
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 2 | vector 8 2 8 4 2) | pow 2 (decimal 1 | vector 5);"
    ],
    "preprocessed": "float:= (decimal 2 | vector 8 2 8 4 2) | pow 2 (decimal 1 | vector 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "2",
        [
          -1,
          "vector",
          "8",
          "2",
          "8",
          "4",
          "2"
        ]
      ],
      [
        -1,
        "pow",
        "2",
        [
          "decimal",
          "1",
          [
            -1,
            "vector",
            "5"
          ]
        ]
      ]
    ],
    "code": "1212110101131211332121101010302103023121000030210003021030210003021003021033023121011113021032121101010302130231210000302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf206;&#xf248;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf206;&#xf24a;&#xf20c;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf206;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 971
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 3 | vector 3 6 3 5 8) | pow 2 (decimal 1 | vector 7 5);"
    ],
    "preprocessed": "float:= (decimal 3 | vector 3 6 3 5 8) | pow 2 (decimal 1 | vector 7 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "3",
        [
          -1,
          "vector",
          "3",
          "6",
          "3",
          "5",
          "8"
        ]
      ],
      [
        -1,
        "pow",
        "2",
        [
          "decimal",
          "1",
          [
            -1,
            "vector",
            "7",
            "5"
          ]
        ]
      ]
    ],
    "code": "121211010113121133212110101030211302312100003021130211030211302101302100033023121011113021032121101010302130231210000302111302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf207;&#xf248;&#xf154;&#xf24a;&#xf207;&#xf24a;&#xf20a;&#xf24a;&#xf207;&#xf24a;&#xf209;&#xf24a;&#xf20c;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf206;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf20b;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 972
  },
  {
    "role": "code",
    "lines": [
      "float:= 4 | pow 2 2;"
    ],
    "preprocessed": "float:= 4 | pow 2 2;",
    "dt": false,
    "parse": [
      "float:=",
      "4",
      [
        -1,
        "pow",
        "2",
        "2"
      ]
    ],
    "code": "12121101011312113302100302312101111302103021032233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf208;&#xf248;&#xf173;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 973
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 4 | vector 7 5 6 8 2) | pow 2 (decimal 2 | vector 2 5);"
    ],
    "preprocessed": "float:= (decimal 4 | vector 7 5 6 8 2) | pow 2 (decimal 2 | vector 2 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "4",
        [
          -1,
          "vector",
          "7",
          "5",
          "6",
          "8",
          "2"
        ]
      ],
      [
        -1,
        "pow",
        "2",
        [
          "decimal",
          "2",
          [
            -1,
            "vector",
            "2",
            "5"
          ]
        ]
      ]
    ],
    "code": "12121101011312113321211010103021003023121000030211130210130211030210003021033023121011113021032121101010302103023121000030210302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf208;&#xf248;&#xf154;&#xf24a;&#xf20b;&#xf24a;&#xf209;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf206;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf206;&#xf248;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 974
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 5 | vector 6 5 6 8 5) | pow 2 (decimal 2 | vector 5);"
    ],
    "preprocessed": "float:= (decimal 5 | vector 6 5 6 8 5) | pow 2 (decimal 2 | vector 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "5",
        [
          -1,
          "vector",
          "6",
          "5",
          "6",
          "8",
          "5"
        ]
      ],
      [
        -1,
        "pow",
        "2",
        [
          "decimal",
          "2",
          [
            -1,
            "vector",
            "5"
          ]
        ]
      ]
    ],
    "code": "1212110101131211332121101010302101302312100003021103021013021103021000302101330231210111130210321211010103021030231210000302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf209;&#xf248;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf209;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf206;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf206;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 975
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 6 | vector 7 2 7 1 7) | pow 2 (decimal 2 | vector 7 5);"
    ],
    "preprocessed": "float:= (decimal 6 | vector 7 2 7 1 7) | pow 2 (decimal 2 | vector 7 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "6",
        [
          -1,
          "vector",
          "7",
          "2",
          "7",
          "1",
          "7"
        ]
      ],
      [
        -1,
        "pow",
        "2",
        [
          "decimal",
          "2",
          [
            -1,
            "vector",
            "7",
            "5"
          ]
        ]
      ]
    ],
    "code": "121211010113121133212110101030211030231210000302111302103021113021302111330231210111130210321211010103021030231210000302111302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf20a;&#xf248;&#xf154;&#xf24a;&#xf20b;&#xf24a;&#xf206;&#xf24a;&#xf20b;&#xf24a;&#xf205;&#xf24a;&#xf20b;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf206;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf206;&#xf248;&#xf154;&#xf24a;&#xf20b;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 976
  },
  {
    "role": "code",
    "lines": [
      "float:= 8 | pow 2 3;"
    ],
    "preprocessed": "float:= 8 | pow 2 3;",
    "dt": false,
    "parse": [
      "float:=",
      "8",
      [
        -1,
        "pow",
        "2",
        "3"
      ]
    ],
    "code": "121211010113121133021000302312101111302103021132233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf20c;&#xf248;&#xf173;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 977
  },
  {
    "role": "code",
    "lines": [
      "float:= 1 | pow 3 0;"
    ],
    "preprocessed": "float:= 1 | pow 3 0;",
    "dt": false,
    "parse": [
      "float:=",
      "1",
      [
        -1,
        "pow",
        "3",
        "0"
      ]
    ],
    "code": "12121101011312113302130231210111130211302032233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf205;&#xf248;&#xf173;&#xf24a;&#xf207;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 978
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 1 | vector 3 1 6 0 7) | pow 3 (decimal 0 | vector 2 5);"
    ],
    "preprocessed": "float:= (decimal 1 | vector 3 1 6 0 7) | pow 3 (decimal 0 | vector 2 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "1",
        [
          -1,
          "vector",
          "3",
          "1",
          "6",
          "0",
          "7"
        ]
      ],
      [
        -1,
        "pow",
        "3",
        [
          "decimal",
          "0",
          [
            -1,
            "vector",
            "2",
            "5"
          ]
        ]
      ]
    ],
    "code": "121211010113121133212110101030213023121000030211302130211030203021113302312101111302113212110101030203023121000030210302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf207;&#xf24a;&#xf205;&#xf24a;&#xf20a;&#xf24a;&#xf204;&#xf24a;&#xf20b;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf207;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf204;&#xf248;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 979
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 1 | vector 7 3 2 0 5) | pow 3 (decimal 0 | vector 5);"
    ],
    "preprocessed": "float:= (decimal 1 | vector 7 3 2 0 5) | pow 3 (decimal 0 | vector 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "1",
        [
          -1,
          "vector",
          "7",
          "3",
          "2",
          "0",
          "5"
        ]
      ],
      [
        -1,
        "pow",
        "3",
        [
          "decimal",
          "0",
          [
            -1,
            "vector",
            "5"
          ]
        ]
      ]
    ],
    "code": "12121101011312113321211010103021302312100003021113021130210302030210133023121011113021132121101010302030231210000302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf20b;&#xf24a;&#xf207;&#xf24a;&#xf206;&#xf24a;&#xf204;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf207;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf204;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 980
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 2 | vector 2 7 9 5 0) | pow 3 (decimal 0 | vector 7 5);"
    ],
    "preprocessed": "float:= (decimal 2 | vector 2 7 9 5 0) | pow 3 (decimal 0 | vector 7 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "2",
        [
          -1,
          "vector",
          "2",
          "7",
          "9",
          "5",
          "0"
        ]
      ],
      [
        -1,
        "pow",
        "3",
        [
          "decimal",
          "0",
          [
            -1,
            "vector",
            "7",
            "5"
          ]
        ]
      ]
    ],
    "code": "12121101011312113321211010103021030231210000302103021113021001302101302033023121011113021132121101010302030231210000302111302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf206;&#xf248;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf20b;&#xf24a;&#xf20d;&#xf24a;&#xf209;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf207;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf204;&#xf248;&#xf154;&#xf24a;&#xf20b;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 981
  },
  {
    "role": "code",
    "lines": [
      "float:= 3 | pow 3 1;"
    ],
    "preprocessed": "float:= 3 | pow 3 1;",
    "dt": false,
    "parse": [
      "float:=",
      "3",
      [
        -1,
        "pow",
        "3",
        "1"
      ]
    ],
    "code": "121211010113121133021130231210111130211302132233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf207;&#xf248;&#xf173;&#xf24a;&#xf207;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 982
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 3 | vector 9 4 8 2 2) | pow 3 (decimal 1 | vector 2 5);"
    ],
    "preprocessed": "float:= (decimal 3 | vector 9 4 8 2 2) | pow 3 (decimal 1 | vector 2 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "3",
        [
          -1,
          "vector",
          "9",
          "4",
          "8",
          "2",
          "2"
        ]
      ],
      [
        -1,
        "pow",
        "3",
        [
          "decimal",
          "1",
          [
            -1,
            "vector",
            "2",
            "5"
          ]
        ]
      ]
    ],
    "code": "121211010113121133212110101030211302312100003021001302100302100030210302103302312101111302113212110101030213023121000030210302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf207;&#xf248;&#xf154;&#xf24a;&#xf20d;&#xf24a;&#xf208;&#xf24a;&#xf20c;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf207;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 983
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 5 | vector 1 9 6 1 5) | pow 3 (decimal 1 | vector 5);"
    ],
    "preprocessed": "float:= (decimal 5 | vector 1 9 6 1 5) | pow 3 (decimal 1 | vector 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "5",
        [
          -1,
          "vector",
          "1",
          "9",
          "6",
          "1",
          "5"
        ]
      ],
      [
        -1,
        "pow",
        "3",
        [
          "decimal",
          "1",
          [
            -1,
            "vector",
            "5"
          ]
        ]
      ]
    ],
    "code": "12121101011312113321211010103021013023121000030213021001302110302130210133023121011113021132121101010302130231210000302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf209;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf20d;&#xf24a;&#xf20a;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf207;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 984
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 6 | vector 8 3 8 5 2) | pow 3 (decimal 1 | vector 7 5);"
    ],
    "preprocessed": "float:= (decimal 6 | vector 8 3 8 5 2) | pow 3 (decimal 1 | vector 7 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "6",
        [
          -1,
          "vector",
          "8",
          "3",
          "8",
          "5",
          "2"
        ]
      ],
      [
        -1,
        "pow",
        "3",
        [
          "decimal",
          "1",
          [
            -1,
            "vector",
            "7",
            "5"
          ]
        ]
      ]
    ],
    "code": "12121101011312113321211010103021103023121000030210003021130210003021013021033023121011113021132121101010302130231210000302111302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf20a;&#xf248;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf207;&#xf24a;&#xf20c;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf207;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf20b;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 985
  },
  {
    "role": "code",
    "lines": [
      "float:= 9 | pow 3 2;"
    ],
    "preprocessed": "float:= 9 | pow 3 2;",
    "dt": false,
    "parse": [
      "float:=",
      "9",
      [
        -1,
        "pow",
        "3",
        "2"
      ]
    ],
    "code": "121211010113121133021001302312101111302113021032233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf20d;&#xf248;&#xf173;&#xf24a;&#xf207;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 986
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 11 | vector 8 4 4 6 6) | pow 3 (decimal 2 | vector 2 5);"
    ],
    "preprocessed": "float:= (decimal 11 | vector 8 4 4 6 6) | pow 3 (decimal 2 | vector 2 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "11",
        [
          -1,
          "vector",
          "8",
          "4",
          "4",
          "6",
          "6"
        ]
      ],
      [
        -1,
        "pow",
        "3",
        [
          "decimal",
          "2",
          [
            -1,
            "vector",
            "2",
            "5"
          ]
        ]
      ]
    ],
    "code": "1212110101131211332121101010302101130231210000302100030210030210030211030211033023121011113021132121101010302103023121000030210302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf20f;&#xf248;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf208;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf207;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf206;&#xf248;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 987
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 15 | vector 5 8 8 4 5) | pow 3 (decimal 2 | vector 5);"
    ],
    "preprocessed": "float:= (decimal 15 | vector 5 8 8 4 5) | pow 3 (decimal 2 | vector 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "15",
        [
          -1,
          "vector",
          "5",
          "8",
          "8",
          "4",
          "5"
        ]
      ],
      [
        -1,
        "pow",
        "3",
        [
          "decimal",
          "2",
          [
            -1,
            "vector",
            "5"
          ]
        ]
      ]
    ],
    "code": "121211010113121133212110101030211113023121000030210130210003021000302100302101330231210111130211321211010103021030231210000302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf213;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf20c;&#xf24a;&#xf20c;&#xf24a;&#xf208;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf207;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf206;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 988
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 20 | vector 5 1 5 5 6) | pow 3 (decimal 2 | vector 7 5);"
    ],
    "preprocessed": "float:= (decimal 20 | vector 5 1 5 5 6) | pow 3 (decimal 2 | vector 7 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "20",
        [
          -1,
          "vector",
          "5",
          "1",
          "5",
          "5",
          "6"
        ]
      ],
      [
        -1,
        "pow",
        "3",
        [
          "decimal",
          "2",
          [
            -1,
            "vector",
            "7",
            "5"
          ]
        ]
      ]
    ],
    "code": "121211010113121133212110101030210100302312100003021013021302101302101302110330231210111130211321211010103021030231210000302111302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf218;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf24a;&#xf209;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf207;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf206;&#xf248;&#xf154;&#xf24a;&#xf20b;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 989
  },
  {
    "role": "code",
    "lines": [
      "float:= 27 | pow 3 3;"
    ],
    "preprocessed": "float:= 27 | pow 3 3;",
    "dt": false,
    "parse": [
      "float:=",
      "27",
      [
        -1,
        "pow",
        "3",
        "3"
      ]
    ],
    "code": "1212110101131211330211011302312101111302113021132233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf21f;&#xf248;&#xf173;&#xf24a;&#xf207;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 990
  },
  {
    "role": "code",
    "lines": [
      "float:= 1 | pow 4 0;"
    ],
    "preprocessed": "float:= 1 | pow 4 0;",
    "dt": false,
    "parse": [
      "float:=",
      "1",
      [
        -1,
        "pow",
        "4",
        "0"
      ]
    ],
    "code": "121211010113121133021302312101111302100302032233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf205;&#xf248;&#xf173;&#xf24a;&#xf208;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 991
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 1 | vector 4 1 4 2 1) | pow 4 (decimal 0 | vector 2 5);"
    ],
    "preprocessed": "float:= (decimal 1 | vector 4 1 4 2 1) | pow 4 (decimal 0 | vector 2 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "1",
        [
          -1,
          "vector",
          "4",
          "1",
          "4",
          "2",
          "1"
        ]
      ],
      [
        -1,
        "pow",
        "4",
        [
          "decimal",
          "0",
          [
            -1,
            "vector",
            "2",
            "5"
          ]
        ]
      ]
    ],
    "code": "1212110101131211332121101010302130231210000302100302130210030210302133023121011113021003212110101030203023121000030210302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf208;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf204;&#xf248;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 992
  },
  {
    "role": "code",
    "lines": [
      "float:= 2 | pow 4 (decimal 0 | vector 5);"
    ],
    "preprocessed": "float:= 2 | pow 4 (decimal 0 | vector 5);",
    "dt": false,
    "parse": [
      "float:=",
      "2",
      [
        -1,
        "pow",
        "4",
        [
          "decimal",
          "0",
          [
            -1,
            "vector",
            "5"
          ]
        ]
      ]
    ],
    "code": "121211010113121133021030231210111130210032121101010302030231210000302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf206;&#xf248;&#xf173;&#xf24a;&#xf208;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf204;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 993
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 2 | vector 8 2 8 4 2) | pow 4 (decimal 0 | vector 7 5);"
    ],
    "preprocessed": "float:= (decimal 2 | vector 8 2 8 4 2) | pow 4 (decimal 0 | vector 7 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "2",
        [
          -1,
          "vector",
          "8",
          "2",
          "8",
          "4",
          "2"
        ]
      ],
      [
        -1,
        "pow",
        "4",
        [
          "decimal",
          "0",
          [
            -1,
            "vector",
            "7",
            "5"
          ]
        ]
      ]
    ],
    "code": "12121101011312113321211010103021030231210000302100030210302100030210030210330231210111130210032121101010302030231210000302111302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf206;&#xf248;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf206;&#xf24a;&#xf20c;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf208;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf204;&#xf248;&#xf154;&#xf24a;&#xf20b;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 994
  },
  {
    "role": "code",
    "lines": [
      "float:= 4 | pow 4 1;"
    ],
    "preprocessed": "float:= 4 | pow 4 1;",
    "dt": false,
    "parse": [
      "float:=",
      "4",
      [
        -1,
        "pow",
        "4",
        "1"
      ]
    ],
    "code": "12121101011312113302100302312101111302100302132233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf208;&#xf248;&#xf173;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 995
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 5 | vector 6 5 6 8 5) | pow 4 (decimal 1 | vector 2 5);"
    ],
    "preprocessed": "float:= (decimal 5 | vector 6 5 6 8 5) | pow 4 (decimal 1 | vector 2 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "5",
        [
          -1,
          "vector",
          "6",
          "5",
          "6",
          "8",
          "5"
        ]
      ],
      [
        -1,
        "pow",
        "4",
        [
          "decimal",
          "1",
          [
            -1,
            "vector",
            "2",
            "5"
          ]
        ]
      ]
    ],
    "code": "121211010113121133212110101030210130231210000302110302101302110302100030210133023121011113021003212110101030213023121000030210302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf209;&#xf248;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf209;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf208;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 996
  },
  {
    "role": "code",
    "lines": [
      "float:= 8 | pow 4 (decimal 1 | vector 5);"
    ],
    "preprocessed": "float:= 8 | pow 4 (decimal 1 | vector 5);",
    "dt": false,
    "parse": [
      "float:=",
      "8",
      [
        -1,
        "pow",
        "4",
        [
          "decimal",
          "1",
          [
            -1,
            "vector",
            "5"
          ]
        ]
      ]
    ],
    "code": "12121101011312113302100030231210111130210032121101010302130231210000302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf20c;&#xf248;&#xf173;&#xf24a;&#xf208;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 997
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 11 | vector 3 1 3 7 0) | pow 4 (decimal 1 | vector 7 5);"
    ],
    "preprocessed": "float:= (decimal 11 | vector 3 1 3 7 0) | pow 4 (decimal 1 | vector 7 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "11",
        [
          -1,
          "vector",
          "3",
          "1",
          "3",
          "7",
          "0"
        ]
      ],
      [
        -1,
        "pow",
        "4",
        [
          "decimal",
          "1",
          [
            -1,
            "vector",
            "7",
            "5"
          ]
        ]
      ]
    ],
    "code": "1212110101131211332121101010302101130231210000302113021302113021113020330231210111130210032121101010302130231210000302111302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf20f;&#xf248;&#xf154;&#xf24a;&#xf207;&#xf24a;&#xf205;&#xf24a;&#xf207;&#xf24a;&#xf20b;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf208;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf20b;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 998
  },
  {
    "role": "code",
    "lines": [
      "float:= 16 | pow 4 2;"
    ],
    "preprocessed": "float:= 16 | pow 4 2;",
    "dt": false,
    "parse": [
      "float:=",
      "16",
      [
        -1,
        "pow",
        "4",
        "2"
      ]
    ],
    "code": "12121101011312113302100003023121011113021003021032233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf214;&#xf248;&#xf173;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 999
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 22 | vector 6 2 7 4 1) | pow 4 (decimal 2 | vector 2 5);"
    ],
    "preprocessed": "float:= (decimal 22 | vector 6 2 7 4 1) | pow 4 (decimal 2 | vector 2 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "22",
        [
          -1,
          "vector",
          "6",
          "2",
          "7",
          "4",
          "1"
        ]
      ],
      [
        -1,
        "pow",
        "4",
        [
          "decimal",
          "2",
          [
            -1,
            "vector",
            "2",
            "5"
          ]
        ]
      ]
    ],
    "code": "12121101011312113321211010103021011030231210000302110302103021113021003021330231210111130210032121101010302103023121000030210302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf21a;&#xf248;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf24a;&#xf20b;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf208;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf206;&#xf248;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 1000
  },
  {
    "role": "code",
    "lines": [
      "float:= 32 | pow 4 (decimal 2 | vector 5);"
    ],
    "preprocessed": "float:= 32 | pow 4 (decimal 2 | vector 5);",
    "dt": false,
    "parse": [
      "float:=",
      "32",
      [
        -1,
        "pow",
        "4",
        [
          "decimal",
          "2",
          [
            -1,
            "vector",
            "5"
          ]
        ]
      ]
    ],
    "code": "12121101011312113302100000302312101111302100321211010103021030231210000302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf224;&#xf248;&#xf173;&#xf24a;&#xf208;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf206;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 1001
  },
  {
    "role": "code",
    "lines": [
      "float:= (decimal 45 | vector 2 5 4 8 3) | pow 4 (decimal 2 | vector 7 5);"
    ],
    "preprocessed": "float:= (decimal 45 | vector 2 5 4 8 3) | pow 4 (decimal 2 | vector 7 5);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "decimal",
        "45",
        [
          -1,
          "vector",
          "2",
          "5",
          "4",
          "8",
          "3"
        ]
      ],
      [
        -1,
        "pow",
        "4",
        [
          "decimal",
          "2",
          [
            -1,
            "vector",
            "7",
            "5"
          ]
        ]
      ]
    ],
    "code": "121211010113121133212110101030210110130231210000302103021013021003021000302113302312101111302100321211010103021030231210000302111302101332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf231;&#xf248;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf24a;&#xf20c;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf173;&#xf24a;&#xf208;&#xf246;&#xf145;&#xf16e;&#xf24a;&#xf206;&#xf248;&#xf154;&#xf24a;&#xf20b;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 1002
  },
  {
    "role": "code",
    "lines": [
      "float:= 64 | pow 4 3;"
    ],
    "preprocessed": "float:= 64 | pow 4 3;",
    "dt": false,
    "parse": [
      "float:=",
      "64",
      [
        -1,
        "pow",
        "4",
        "3"
      ]
    ],
    "code": "1212110101131211330210000003023121011113021003021132233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf205;&#xf204;&#xf248;&#xf173;&#xf24a;&#xf208;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 1003
  },
  {
    "role": "code",
    "lines": [
      "intro exp;"
    ],
    "preprocessed": "intro exp;",
    "dt": false,
    "parse": [
      "intro",
      "exp"
    ],
    "code": "1210010312110111132233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf173;&#xf24b;",
    "stanza": 1004
  },
  {
    "role": "code",
    "lines": [
      "define exp:hat | ? x |",
      "  reduce $+ | map (? n | frac (pow:int $x $n) | factorial $n) | range 0 50;"
    ],
    "preprocessed": "define exp:hat | ? x |\n  reduce $+ | map (? n | frac (pow:int $x $n) | factorial $n) | range 0 50;",
    "dt": true,
    "parse": [
      "define",
      "exp:hat",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "reduce",
          [
            -2,
            "+"
          ],
          [
            -1,
            "map",
            [
              "?",
              "n",
              [
                -1,
                "frac",
                [
                  "pow:int",
                  [
                    -2,
                    "x"
                  ],
                  [
                    -2,
                    "n"
                  ]
                ],
                [
                  -1,
                  "factorial",
                  [
                    -2,
                    "n"
                  ]
                ]
              ]
            ],
            [
              -1,
              "range",
              "0",
              "50"
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121211011113121101100330231211003121010013023121011010312312101030231210110013212110031210011103023121100003212121011113121111103312312101001312312100111033023121001010312312100111033023121101000302030211001032233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf173;&#xf145;&#xf170;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf145;&#xf15e;&#xf249;&#xf14e;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf145;&#xf152;&#xf248;&#xf174;&#xf246;&#xf173;&#xf182;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf152;&#xf245;&#xf248;&#xf145;&#xf14e;&#xf249;&#xf145;&#xf152;&#xf245;&#xf248;&#xf145;&#xf16c;&#xf24a;&#xf204;&#xf24a;&#xf236;&#xf24b;",
    "stanza": 1005
  },
  {
    "role": "code",
    "lines": [
      "float:= $e | exp:hat 1;"
    ],
    "preprocessed": "float:= $e | exp:hat 1;",
    "dt": false,
    "parse": [
      "float:=",
      [
        -2,
        "e"
      ],
      [
        -1,
        "exp:hat",
        "1"
      ]
    ],
    "code": "1212110101131211331231211000130231212110111131211011003302132233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf249;&#xf175;&#xf248;&#xf145;&#xf173;&#xf145;&#xf170;&#xf205;&#xf24b;",
    "stanza": 1006
  },
  {
    "role": "code",
    "lines": [
      "define ln:10:hat | decimal 2 | vector 3 0 2 5 8 5 0 9 2 9 9;"
    ],
    "preprocessed": "define ln:10:hat | decimal 2 | vector 3 0 2 5 8 5 0 9 2 9 9;",
    "dt": true,
    "parse": [
      "define",
      "ln:10:hat",
      [
        -1,
        "decimal",
        "2",
        [
          -1,
          "vector",
          "3",
          "0",
          "2",
          "5",
          "8",
          "5",
          "0",
          "9",
          "2",
          "9",
          "9"
        ]
      ]
    ],
    "code": "1211013121211100003021010312110110033023121101010302103023121000030211302030210302101302100030210130203021001302103021001302100132233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf174;&#xf20e;&#xf145;&#xf170;&#xf248;&#xf145;&#xf16e;&#xf24a;&#xf206;&#xf248;&#xf154;&#xf24a;&#xf207;&#xf24a;&#xf204;&#xf24a;&#xf206;&#xf24a;&#xf209;&#xf24a;&#xf20c;&#xf24a;&#xf209;&#xf24a;&#xf204;&#xf24a;&#xf20d;&#xf24a;&#xf206;&#xf24a;&#xf20d;&#xf24a;&#xf20d;&#xf24b;",
    "stanza": 1007
  },
  {
    "role": "code",
    "lines": [
      "float:= (pow:int 10 2) (exp:hat | * 2 $ln:10:hat);"
    ],
    "preprocessed": "float:= (pow:int 10 2) (exp:hat | * 2 $ln:10:hat);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "pow:int",
        "10",
        "2"
      ],
      [
        "exp:hat",
        [
          -1,
          "*",
          "2",
          [
            -2,
            "ln:10:hat"
          ]
        ]
      ]
    ],
    "code": "1212110101131211332121210111131211111033021010302103321212110111131211011003302312100130210312312121110000302101031211011003332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf173;&#xf182;&#xf20e;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf145;&#xf173;&#xf145;&#xf170;&#xf248;&#xf14d;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf174;&#xf20e;&#xf145;&#xf170;&#xf245;&#xf24b;",
    "stanza": 1008
  },
  {
    "role": "code",
    "lines": [
      "float:= (pow:int 10 3) (exp:hat | * 3 $ln:10:hat);"
    ],
    "preprocessed": "float:= (pow:int 10 3) (exp:hat | * 3 $ln:10:hat);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "pow:int",
        "10",
        "3"
      ],
      [
        "exp:hat",
        [
          -1,
          "*",
          "3",
          [
            -2,
            "ln:10:hat"
          ]
        ]
      ]
    ],
    "code": "1212110101131211332121210111131211111033021010302113321212110111131211011003302312100130211312312121110000302101031211011003332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf173;&#xf182;&#xf20e;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf145;&#xf173;&#xf145;&#xf170;&#xf248;&#xf14d;&#xf24a;&#xf207;&#xf249;&#xf145;&#xf174;&#xf20e;&#xf145;&#xf170;&#xf245;&#xf24b;",
    "stanza": 1009
  },
  {
    "role": "code",
    "lines": [
      "float:= (pow:int 10 4) (exp:hat | * 4 $ln:10:hat);"
    ],
    "preprocessed": "float:= (pow:int 10 4) (exp:hat | * 4 $ln:10:hat);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "pow:int",
        "10",
        "4"
      ],
      [
        "exp:hat",
        [
          -1,
          "*",
          "4",
          [
            -2,
            "ln:10:hat"
          ]
        ]
      ]
    ],
    "code": "121211010113121133212121011113121111103302101030210033212121101111312110110033023121001302100312312121110000302101031211011003332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf173;&#xf182;&#xf20e;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf145;&#xf173;&#xf145;&#xf170;&#xf248;&#xf14d;&#xf24a;&#xf208;&#xf249;&#xf145;&#xf174;&#xf20e;&#xf145;&#xf170;&#xf245;&#xf24b;",
    "stanza": 1010
  },
  {
    "role": "file",
    "lines": [
      "== COS_Complex =="
    ],
    "stanza": 1011
  },
  {
    "role": "doc",
    "lines": [
      "A very very abbreviated introduction of complex numbers"
    ],
    "section_description": "introduce i",
    "section_category": "MATH",
    "section_index": 21,
    "stanza": 1012
  },
  {
    "role": "code",
    "lines": [
      "define all-equal | ? x:list |",
      "  if (>= 1 | list-length $x:list) $true |",
      "  and (= (list-ref $x:list 0) (list-ref $x:list 1))",
      "      (all-equal | tail $x:list);"
    ],
    "preprocessed": "define all-equal | ? x:list |\n  if (>= 1 | list-length $x:list) $true |\n  and (= (list-ref $x:list 0) (list-ref $x:list 1))\n      (all-equal | tail $x:list);",
    "dt": true,
    "parse": [
      "define",
      "all-equal",
      [
        -1,
        "?",
        "x:list",
        [
          -1,
          "if",
          [
            ">=",
            "1",
            [
              -1,
              "list-length",
              [
                -2,
                "x:list"
              ]
            ]
          ],
          [
            -2,
            "true"
          ],
          [
            -1,
            "and",
            [
              "=",
              [
                "list-ref",
                [
                  -2,
                  "x:list"
                ],
                "0"
              ],
              [
                "list-ref",
                [
                  -2,
                  "x:list"
                ],
                "1"
              ]
            ],
            [
              "all-equal",
              [
                -1,
                "tail",
                [
                  -2,
                  "x:list"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131211100013023121100312121010013121001101330231211113212100101130213023121010010312312121010013121001101333123121302312110321211321210100113123121210100131210011013302033212101001131231212101001312100110133021333212111000130231210100013123121210100131210011013332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf175;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf153;&#xf246;&#xf145;&#xf14f;&#xf24a;&#xf205;&#xf248;&#xf145;&#xf156;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf249;&#xf145;&#xf248;&#xf14a;&#xf246;&#xf147;&#xf246;&#xf145;&#xf157;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf204;&#xf245;&#xf246;&#xf145;&#xf157;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf205;&#xf245;&#xf245;&#xf246;&#xf145;&#xf175;&#xf248;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf24b;",
    "stanza": 1013
  },
  {
    "role": "code",
    "lines": [
      "all-equal | vector 2 2 2;"
    ],
    "preprocessed": "all-equal | vector 2 2 2;",
    "dt": false,
    "parse": [
      "all-equal",
      [
        -1,
        "vector",
        "2",
        "2",
        "2"
      ]
    ],
    "code": "1211100013023121000030210302103021032233",
    "spider": "&#xf145;&#xf175;&#xf248;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1014
  },
  {
    "role": "code",
    "lines": [
      "not | all-equal | vector 2 2 1;"
    ],
    "preprocessed": "not | all-equal | vector 2 2 1;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "all-equal",
        [
          -1,
          "vector",
          "2",
          "2",
          "1"
        ]
      ]
    ],
    "code": "121013023121110001302312100003021030210302132233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf175;&#xf248;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 1015
  },
  {
    "role": "code",
    "lines": [
      "not | all-equal | vector 2 1 2;"
    ],
    "preprocessed": "not | all-equal | vector 2 1 2;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "all-equal",
        [
          -1,
          "vector",
          "2",
          "1",
          "2"
        ]
      ]
    ],
    "code": "121013023121110001302312100003021030213021032233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf175;&#xf248;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1016
  },
  {
    "role": "code",
    "lines": [
      "not | all-equal | vector 1 2 2;"
    ],
    "preprocessed": "not | all-equal | vector 1 2 2;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "all-equal",
        [
          -1,
          "vector",
          "1",
          "2",
          "2"
        ]
      ]
    ],
    "code": "121013023121110001302312100003021302103021032233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf175;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1017
  },
  {
    "role": "code",
    "lines": [
      "intro sum;"
    ],
    "preprocessed": "intro sum;",
    "dt": false,
    "parse": [
      "intro",
      "sum"
    ],
    "code": "1210010312111001032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf176;&#xf24b;",
    "stanza": 1018
  },
  {
    "role": "code",
    "lines": [
      "define sum | reduce $+;"
    ],
    "preprocessed": "define sum | reduce $+;",
    "dt": true,
    "parse": [
      "define",
      "sum",
      [
        -1,
        "reduce",
        [
          -2,
          "+"
        ]
      ]
    ],
    "code": "12110131211100103023121011010312312101032233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf176;&#xf248;&#xf145;&#xf15e;&#xf249;&#xf14e;&#xf24b;",
    "stanza": 1019
  },
  {
    "role": "code",
    "lines": [
      "intro i;"
    ],
    "preprocessed": "intro i;",
    "dt": false,
    "parse": [
      "intro",
      "i"
    ],
    "code": "121001031211001132233",
    "spider": "&#xf156;&#xf24a;&#xf177;&#xf24b;",
    "stanza": 1020
  },
  {
    "role": "code",
    "lines": [
      "= (minus 1) | * $i $i;"
    ],
    "preprocessed": "= (minus 1) | * $i $i;",
    "dt": false,
    "parse": [
      "=",
      [
        "minus",
        "1"
      ],
      [
        -1,
        "*",
        [
          -2,
          "i"
        ],
        [
          -2,
          "i"
        ]
      ]
    ],
    "code": "12113212110010030213302312100131231211001131231211001132233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf168;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14d;&#xf249;&#xf177;&#xf249;&#xf177;&#xf24b;",
    "stanza": 1021
  },
  {
    "role": "code",
    "lines": [
      "define complex | ? x | ? y | + $x | * $y $i;"
    ],
    "preprocessed": "define complex | ? x | ? y | + $x | * $y $i;",
    "dt": true,
    "parse": [
      "define",
      "complex",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "+",
            [
              -2,
              "x"
            ],
            [
              -1,
              "*",
              [
                -2,
                "y"
              ],
              [
                -2,
                "i"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312111001130231211003121010013023121100312100000130231210103123121010013023121001312312100000131231211001132233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf177;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14e;&#xf249;&#xf16d;&#xf248;&#xf14d;&#xf249;&#xf145;&#xf145;&#xf249;&#xf177;&#xf24b;",
    "stanza": 1022
  },
  {
    "role": "code",
    "lines": [
      "= (complex 5 6) | + (complex 3 2) (complex 2 4);"
    ],
    "preprocessed": "= (complex 5 6) | + (complex 3 2) (complex 2 4);",
    "dt": false,
    "parse": [
      "=",
      [
        "complex",
        "5",
        "6"
      ],
      [
        -1,
        "+",
        [
          "complex",
          "3",
          "2"
        ],
        [
          "complex",
          "2",
          "4"
        ]
      ]
    ],
    "code": "1211321211100113021013021103302312101032121110011302113021033212111001130210302100332233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf177;&#xf24a;&#xf209;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf14e;&#xf246;&#xf145;&#xf177;&#xf24a;&#xf207;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf145;&#xf177;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 1023
  },
  {
    "role": "code",
    "lines": [
      "= (complex 7 22) | * (complex 5 4) (complex 3 2);"
    ],
    "preprocessed": "= (complex 7 22) | * (complex 5 4) (complex 3 2);",
    "dt": false,
    "parse": [
      "=",
      [
        "complex",
        "7",
        "22"
      ],
      [
        -1,
        "*",
        [
          "complex",
          "5",
          "4"
        ],
        [
          "complex",
          "3",
          "2"
        ]
      ]
    ],
    "code": "1211321211100113021113021011033023121001321211100113021013021003321211100113021130210332233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf177;&#xf24a;&#xf20b;&#xf24a;&#xf21a;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf145;&#xf177;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf145;&#xf177;&#xf24a;&#xf207;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1024
  },
  {
    "role": "code",
    "lines": [
      "= (complex 10 8) | * (complex 5 4) 2;"
    ],
    "preprocessed": "= (complex 10 8) | * (complex 5 4) 2;",
    "dt": false,
    "parse": [
      "=",
      [
        "complex",
        "10",
        "8"
      ],
      [
        -1,
        "*",
        [
          "complex",
          "5",
          "4"
        ],
        "2"
      ]
    ],
    "code": "12113212111001130210103021000330231210013212111001130210130210033021032233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf177;&#xf24a;&#xf20e;&#xf24a;&#xf20c;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf145;&#xf177;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf245;&#xf206;&#xf24b;",
    "stanza": 1025
  },
  {
    "role": "code",
    "lines": [
      "= (complex 10 8) | * 2 (complex 5 4);"
    ],
    "preprocessed": "= (complex 10 8) | * 2 (complex 5 4);",
    "dt": false,
    "parse": [
      "=",
      [
        "complex",
        "10",
        "8"
      ],
      [
        -1,
        "*",
        "2",
        [
          "complex",
          "5",
          "4"
        ]
      ]
    ],
    "code": "12113212111001130210103021000330231210013021032121110011302101302100332233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf177;&#xf24a;&#xf20e;&#xf24a;&#xf20c;&#xf245;&#xf248;&#xf14d;&#xf24a;&#xf206;&#xf246;&#xf145;&#xf177;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 1026
  },
  {
    "role": "doc",
    "lines": [
      "should work through how to divide complex numbers (multiply by conjugate)"
    ],
    "stanza": 1027
  },
  {
    "role": "code",
    "lines": [
      "= (complex (frac 6 25) (frac 17 25)) | frac (complex 3 2) (complex 4 | minus 3);"
    ],
    "preprocessed": "= (complex (frac 6 25) (frac 17 25)) | frac (complex 3 2) (complex 4 | minus 3);",
    "dt": false,
    "parse": [
      "=",
      [
        "complex",
        [
          "frac",
          "6",
          "25"
        ],
        [
          "frac",
          "17",
          "25"
        ]
      ],
      [
        -1,
        "frac",
        [
          "complex",
          "3",
          "2"
        ],
        [
          "complex",
          "4",
          [
            -1,
            "minus",
            "3"
          ]
        ]
      ]
    ],
    "code": "12113212111001132121100003021103021100133212110000302100013021100133302312110000321211100113021130210332121110011302100302312110010030211332233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf177;&#xf246;&#xf174;&#xf24a;&#xf20a;&#xf24a;&#xf21d;&#xf245;&#xf246;&#xf174;&#xf24a;&#xf215;&#xf24a;&#xf21d;&#xf245;&#xf245;&#xf248;&#xf174;&#xf246;&#xf145;&#xf177;&#xf24a;&#xf207;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf145;&#xf177;&#xf24a;&#xf208;&#xf248;&#xf145;&#xf168;&#xf24a;&#xf207;&#xf245;&#xf24b;",
    "stanza": 1028
  },
  {
    "role": "code",
    "lines": [
      "all-equal | vector",
      "  (+ 7 | * 22 $i)",
      "  (* (+ 5 | * 4 $i) (+ 3 | * 2 $i))",
      "  (sum | vector",
      "    (* 5 3)",
      "    (* 5 (* 2 $i))",
      "    (* (* 4 $i) 3)",
      "    (* (* 4 $i) (* 2 $i)))",
      "  (sum | vector",
      "    15 (* 10 $i) (* 12 $i) (minus 8))",
      "  (sum | vector",
      "    (+ 15 (minus 8)) (* (+ 10 12) $i));"
    ],
    "preprocessed": "all-equal | vector\n  (+ 7 | * 22 $i)\n  (* (+ 5 | * 4 $i) (+ 3 | * 2 $i))\n  (sum | vector\n    (* 5 3)\n    (* 5 (* 2 $i))\n    (* (* 4 $i) 3)\n    (* (* 4 $i) (* 2 $i)))\n  (sum | vector\n    15 (* 10 $i) (* 12 $i) (minus 8))\n  (sum | vector\n    (+ 15 (minus 8)) (* (+ 10 12) $i));",
    "dt": false,
    "parse": [
      "all-equal",
      [
        -1,
        "vector",
        [
          "+",
          "7",
          [
            -1,
            "*",
            "22",
            [
              -2,
              "i"
            ]
          ]
        ],
        [
          "*",
          [
            "+",
            "5",
            [
              -1,
              "*",
              "4",
              [
                -2,
                "i"
              ]
            ]
          ],
          [
            "+",
            "3",
            [
              -1,
              "*",
              "2",
              [
                -2,
                "i"
              ]
            ]
          ]
        ],
        [
          "sum",
          [
            -1,
            "vector",
            [
              "*",
              "5",
              "3"
            ],
            [
              "*",
              "5",
              [
                "*",
                "2",
                [
                  -2,
                  "i"
                ]
              ]
            ],
            [
              "*",
              [
                "*",
                "4",
                [
                  -2,
                  "i"
                ]
              ],
              "3"
            ],
            [
              "*",
              [
                "*",
                "4",
                [
                  -2,
                  "i"
                ]
              ],
              [
                "*",
                "2",
                [
                  -2,
                  "i"
                ]
              ]
            ]
          ]
        ],
        [
          "sum",
          [
            -1,
            "vector",
            "15",
            [
              "*",
              "10",
              [
                -2,
                "i"
              ]
            ],
            [
              "*",
              "12",
              [
                -2,
                "i"
              ]
            ],
            [
              "minus",
              "8"
            ]
          ]
        ],
        [
          "sum",
          [
            -1,
            "vector",
            [
              "+",
              "15",
              [
                "minus",
                "8"
              ]
            ],
            [
              "*",
              [
                "+",
                "10",
                "12"
              ],
              [
                -2,
                "i"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12111000130231210000321210103021113023121001302101103123121100113321210013212101030210130231210013021003123121100113321210103021130231210013021031231211001133321211100103023121000032121001302101302113321210013021013212100130210312312110011333212100132121001302100312312110011330211332121001321210013021003123121100113321210013021031231211001133332121110010302312100003021111321210013021010312312110011332121001302110031231211001133212110010030210003332121110010302312100003212101030211113212110010030210003332121001321210103021010302110033123121100113332233",
    "spider": "&#xf145;&#xf175;&#xf248;&#xf154;&#xf246;&#xf14e;&#xf24a;&#xf20b;&#xf248;&#xf14d;&#xf24a;&#xf21a;&#xf249;&#xf177;&#xf245;&#xf246;&#xf14d;&#xf246;&#xf14e;&#xf24a;&#xf209;&#xf248;&#xf14d;&#xf24a;&#xf208;&#xf249;&#xf177;&#xf245;&#xf246;&#xf14e;&#xf24a;&#xf207;&#xf248;&#xf14d;&#xf24a;&#xf206;&#xf249;&#xf177;&#xf245;&#xf245;&#xf246;&#xf145;&#xf176;&#xf248;&#xf154;&#xf246;&#xf14d;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf14d;&#xf24a;&#xf209;&#xf246;&#xf14d;&#xf24a;&#xf206;&#xf249;&#xf177;&#xf245;&#xf245;&#xf246;&#xf14d;&#xf246;&#xf14d;&#xf24a;&#xf208;&#xf249;&#xf177;&#xf245;&#xf207;&#xf245;&#xf246;&#xf14d;&#xf246;&#xf14d;&#xf24a;&#xf208;&#xf249;&#xf177;&#xf245;&#xf246;&#xf14d;&#xf24a;&#xf206;&#xf249;&#xf177;&#xf245;&#xf245;&#xf245;&#xf246;&#xf145;&#xf176;&#xf248;&#xf154;&#xf24a;&#xf213;&#xf246;&#xf14d;&#xf24a;&#xf20e;&#xf249;&#xf177;&#xf245;&#xf246;&#xf14d;&#xf24a;&#xf210;&#xf249;&#xf177;&#xf245;&#xf246;&#xf145;&#xf168;&#xf24a;&#xf20c;&#xf245;&#xf245;&#xf246;&#xf145;&#xf176;&#xf248;&#xf154;&#xf246;&#xf14e;&#xf24a;&#xf213;&#xf246;&#xf145;&#xf168;&#xf24a;&#xf20c;&#xf245;&#xf245;&#xf246;&#xf14d;&#xf246;&#xf14e;&#xf24a;&#xf20e;&#xf24a;&#xf210;&#xf245;&#xf249;&#xf177;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1029
  },
  {
    "role": "doc",
    "lines": [
      "Hint at Euler's identity"
    ],
    "stanza": 1030
  },
  {
    "role": "code",
    "lines": [
      "float:= 0 | + 1 | exp:hat | * $pi $i;"
    ],
    "preprocessed": "float:= 0 | + 1 | exp:hat | * $pi $i;",
    "dt": false,
    "parse": [
      "float:=",
      "0",
      [
        -1,
        "+",
        "1",
        [
          -1,
          "exp:hat",
          [
            -1,
            "*",
            [
              -2,
              "pi"
            ],
            [
              -2,
              "i"
            ]
          ]
        ]
      ]
    ],
    "code": "1212110101131211330203023121010302130231212110111131211011003302312100131231211001031231211001132233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf204;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf248;&#xf145;&#xf173;&#xf145;&#xf170;&#xf248;&#xf14d;&#xf249;&#xf176;&#xf249;&#xf177;&#xf24b;",
    "stanza": 1031
  },
  {
    "role": "file",
    "lines": [
      "== COS_Let =="
    ],
    "stanza": 1032
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Sometimes it is nice to do a lot of assignments at once.",
      "We introduce `let ((k1 v1) (k2 v2)) body` which is equivalent to",
      "`assign k1 v1 | assign k2 v2 | body`.",
      ""
    ],
    "section_description": "define let expressions",
    "section_category": "SYNTAX",
    "section_index": 22,
    "stanza": 1033
  },
  {
    "role": "code",
    "lines": [
      "intro let;"
    ],
    "preprocessed": "intro let;",
    "dt": false,
    "parse": [
      "intro",
      "let"
    ],
    "code": "1210010312111010032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf178;&#xf24b;",
    "stanza": 1034
  },
  {
    "role": "code",
    "lines": [
      "define translate:let:begin $translate;"
    ],
    "preprocessed": "define translate:let:begin $translate;",
    "dt": true,
    "parse": [
      "define",
      "translate:let:begin",
      [
        -2,
        "translate"
      ]
    ],
    "code": "12110131212110013121110100312101101133123121100132233",
    "spider": "&#xf151;&#xf24a;&#xf15d;&#xf145;&#xf178;&#xf145;&#xf15f;&#xf249;&#xf15d;&#xf24b;",
    "stanza": 1035
  },
  {
    "role": "code",
    "lines": [
      "define translate:let | ? x | ? y |",
      "  if (= 0 | list-length $x) (translate $y) |",
      "  translate:let (tail $x) |",
      "    vector assign (head | head $x) (head | tail | head $x) $y;"
    ],
    "preprocessed": "define translate:let | ? x | ? y |\n  if (= 0 | list-length $x) (translate $y) |\n  translate:let (tail $x) |\n    vector assign (head | head $x) (head | tail | head $x) $y;",
    "dt": true,
    "parse": [
      "define",
      "translate:let",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              "=",
              "0",
              [
                -1,
                "list-length",
                [
                  -2,
                  "x"
                ]
              ]
            ],
            [
              "translate",
              [
                -2,
                "y"
              ]
            ],
            [
              -1,
              "translate:let",
              [
                "tail",
                [
                  -2,
                  "x"
                ]
              ],
              [
                -1,
                "vector",
                "assign",
                [
                  "head",
                  [
                    -1,
                    "head",
                    [
                      -2,
                      "x"
                    ]
                  ]
                ],
                [
                  "head",
                  [
                    -1,
                    "tail",
                    [
                      -1,
                      "head",
                      [
                        -2,
                        "x"
                      ]
                    ]
                  ]
                ],
                [
                  -2,
                  "y"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312121100131211101003302312110031210100130231211003121000001302312111132121130203023121010010312312101001332121100131231210000013302312121100131211101003321210100013123121010013302312100003121110321210100003023121010000312312101001332121010000302312101000130231210100003123121010013312312100000132233",
    "spider": "&#xf151;&#xf24a;&#xf15d;&#xf145;&#xf178;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf15d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf248;&#xf15d;&#xf145;&#xf178;&#xf246;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf152;&#xf246;&#xf145;&#xf154;&#xf248;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf248;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf145;&#xf145;&#xf24b;",
    "stanza": 1036
  },
  {
    "role": "code",
    "lines": [
      "define translate | ? x |",
      "  if (not | function? $x) (translate:let:begin $x) |",
      "  if (not | = let | head $x) (translate:let:begin $x) |",
      "  translate:let (head | tail $x) (head | tail | tail $x);"
    ],
    "preprocessed": "define translate | ? x |\n  if (not | function? $x) (translate:let:begin $x) |\n  if (not | = let | head $x) (translate:let:begin $x) |\n  translate:let (head | tail $x) (head | tail | tail $x);",
    "dt": true,
    "parse": [
      "define",
      "translate",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "not",
            [
              -1,
              "function?",
              [
                -2,
                "x"
              ]
            ]
          ],
          [
            "translate:let:begin",
            [
              -2,
              "x"
            ]
          ],
          [
            -1,
            "if",
            [
              "not",
              [
                -1,
                "=",
                "let",
                [
                  -1,
                  "head",
                  [
                    -2,
                    "x"
                  ]
                ]
              ]
            ],
            [
              "translate:let:begin",
              [
                -2,
                "x"
              ]
            ],
            [
              -1,
              "translate:let",
              [
                "head",
                [
                  -1,
                  "tail",
                  [
                    -2,
                    "x"
                  ]
                ]
              ],
              [
                "head",
                [
                  -1,
                  "tail",
                  [
                    -1,
                    "tail",
                    [
                      -2,
                      "x"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312110013023121100312101001302312111132121013023121011003123121010013321212110013121110100312101101133123121010013302312111132121013023121131211101003023121010000312312101001332121211001312111010031210110113312312101001330231212110013121110100332121010000302312101000131231210100133212101000030231210100013023121010001312312101001332233",
    "spider": "&#xf151;&#xf24a;&#xf15d;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf170;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf15d;&#xf145;&#xf178;&#xf145;&#xf15f;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf147;&#xf24a;&#xf145;&#xf178;&#xf248;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf15d;&#xf145;&#xf178;&#xf145;&#xf15f;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf15d;&#xf145;&#xf178;&#xf246;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf248;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf245;&#xf24b;",
    "stanza": 1037
  },
  {
    "role": "code",
    "lines": [
      "let ((x 20)) | = $x 20;"
    ],
    "preprocessed": "let ((x 20)) | = $x 20;",
    "dt": false,
    "parse": [
      "let",
      [
        [
          "x",
          "20"
        ]
      ],
      [
        -1,
        "=",
        [
          -2,
          "x"
        ],
        "20"
      ]
    ],
    "code": "121110100322121010013021010033302312113123121010013021010032233",
    "spider": "&#xf145;&#xf178;&#xf246;&#xf246;&#xf16d;&#xf24a;&#xf218;&#xf245;&#xf245;&#xf248;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf218;&#xf24b;",
    "stanza": 1038
  },
  {
    "role": "code",
    "lines": [
      "let ((x 50) (y 20)) | = 30 | - $x $y;"
    ],
    "preprocessed": "let ((x 50) (y 20)) | = 30 | - $x $y;",
    "dt": false,
    "parse": [
      "let",
      [
        [
          "x",
          "50"
        ],
        [
          "y",
          "20"
        ]
      ],
      [
        -1,
        "=",
        "30",
        [
          -1,
          "-",
          [
            -2,
            "x"
          ],
          [
            -2,
            "y"
          ]
        ]
      ]
    ],
    "code": "12111010032212101001302110010332121000001302101003330231211302111103023121011312312101001312312100000132233",
    "spider": "&#xf145;&#xf178;&#xf246;&#xf246;&#xf16d;&#xf24a;&#xf236;&#xf245;&#xf246;&#xf145;&#xf145;&#xf24a;&#xf218;&#xf245;&#xf245;&#xf248;&#xf147;&#xf24a;&#xf222;&#xf248;&#xf14f;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf24b;",
    "stanza": 1039
  },
  {
    "role": "code",
    "lines": [
      "= (let ((x 10)) | + $x 5) (assign x 10 | + $x 5);"
    ],
    "preprocessed": "= (let ((x 10)) | + $x 5) (assign x 10 | + $x 5);",
    "dt": false,
    "parse": [
      "=",
      [
        "let",
        [
          [
            "x",
            "10"
          ]
        ],
        [
          -1,
          "+",
          [
            -2,
            "x"
          ],
          "5"
        ]
      ],
      [
        "assign",
        "x",
        "10",
        [
          -1,
          "+",
          [
            -2,
            "x"
          ],
          "5"
        ]
      ]
    ],
    "code": "12113212111010032212101001302101033302312101031231210100130210133212111031210100130210103023121010312312101001302101332233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf178;&#xf246;&#xf246;&#xf16d;&#xf24a;&#xf20e;&#xf245;&#xf245;&#xf248;&#xf14e;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf246;&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf20e;&#xf248;&#xf14e;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 1040
  },
  {
    "role": "code",
    "lines": [
      "= (let ((x 10)) | + $x 5) ((? x | + $x 5) 10);"
    ],
    "preprocessed": "= (let ((x 10)) | + $x 5) ((? x | + $x 5) 10);",
    "dt": false,
    "parse": [
      "=",
      [
        "let",
        [
          [
            "x",
            "10"
          ]
        ],
        [
          -1,
          "+",
          [
            -2,
            "x"
          ],
          "5"
        ]
      ],
      [
        [
          "?",
          "x",
          [
            -1,
            "+",
            [
              -2,
              "x"
            ],
            "5"
          ]
        ],
        "10"
      ]
    ],
    "code": "1211321211101003221210100130210103330231210103123121010013021013322121100312101001302312101031231210100130210133021010332233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf178;&#xf246;&#xf246;&#xf16d;&#xf24a;&#xf20e;&#xf245;&#xf245;&#xf248;&#xf14e;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf246;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14e;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf20e;&#xf245;&#xf24b;",
    "stanza": 1041
  },
  {
    "role": "code",
    "lines": [
      "= (let ((x 10) (y 5)) | + $x $y) (assign x 10 | assign y 5 | + $x $y);"
    ],
    "preprocessed": "= (let ((x 10) (y 5)) | + $x $y) (assign x 10 | assign y 5 | + $x $y);",
    "dt": false,
    "parse": [
      "=",
      [
        "let",
        [
          [
            "x",
            "10"
          ],
          [
            "y",
            "5"
          ]
        ],
        [
          -1,
          "+",
          [
            -2,
            "x"
          ],
          [
            -2,
            "y"
          ]
        ]
      ],
      [
        "assign",
        "x",
        "10",
        [
          -1,
          "assign",
          "y",
          "5",
          [
            -1,
            "+",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ]
      ]
    ],
    "code": "121132121110100322121010013021010332121000001302101333023121010312312101001312312100000133212111031210100130210103023121110312100000130210130231210103123121010013123121000001332233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf178;&#xf246;&#xf246;&#xf16d;&#xf24a;&#xf20e;&#xf245;&#xf246;&#xf145;&#xf145;&#xf24a;&#xf209;&#xf245;&#xf245;&#xf248;&#xf14e;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf246;&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf20e;&#xf248;&#xf152;&#xf24a;&#xf145;&#xf145;&#xf24a;&#xf209;&#xf248;&#xf14e;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf24b;",
    "stanza": 1042
  },
  {
    "role": "code",
    "lines": [
      "= (let ((x 10) (y 5)) | + $x $y) ((? x | ? y | + $x $y) 10 5);"
    ],
    "preprocessed": "= (let ((x 10) (y 5)) | + $x $y) ((? x | ? y | + $x $y) 10 5);",
    "dt": false,
    "parse": [
      "=",
      [
        "let",
        [
          [
            "x",
            "10"
          ],
          [
            "y",
            "5"
          ]
        ],
        [
          -1,
          "+",
          [
            -2,
            "x"
          ],
          [
            -2,
            "y"
          ]
        ]
      ],
      [
        [
          "?",
          "x",
          [
            -1,
            "?",
            "y",
            [
              -1,
              "+",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ],
        "10",
        "5"
      ]
    ],
    "code": "12113212111010032212101001302101033212100000130210133302312101031231210100131231210000013322121100312101001302312110031210000013023121010312312101001312312100000133021010302101332233",
    "spider": "&#xf147;&#xf246;&#xf145;&#xf178;&#xf246;&#xf246;&#xf16d;&#xf24a;&#xf20e;&#xf245;&#xf246;&#xf145;&#xf145;&#xf24a;&#xf209;&#xf245;&#xf245;&#xf248;&#xf14e;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf246;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14e;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf20e;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 1043
  },
  {
    "role": "file",
    "lines": [
      "== COS_MultipleParameter =="
    ],
    "stanza": 1044
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "lambda functions",
    "section_category": "SYNTAX",
    "section_index": 23,
    "stanza": 1045
  },
  {
    "role": "code",
    "lines": [
      "intro lambda;"
    ],
    "preprocessed": "intro lambda;",
    "dt": false,
    "parse": [
      "intro",
      "lambda"
    ],
    "code": "12100103121101032233",
    "spider": "&#xf156;&#xf24a;&#xf15e;&#xf24b;",
    "stanza": 1046
  },
  {
    "role": "code",
    "lines": [
      "define translate:lambda:begin $translate;"
    ],
    "preprocessed": "define translate:lambda:begin $translate;",
    "dt": true,
    "parse": [
      "define",
      "translate:lambda:begin",
      [
        -2,
        "translate"
      ]
    ],
    "code": "121101312121100131211010312101101133123121100132233",
    "spider": "&#xf151;&#xf24a;&#xf15d;&#xf15e;&#xf145;&#xf15f;&#xf249;&#xf15d;&#xf24b;",
    "stanza": 1047
  },
  {
    "role": "code",
    "lines": [
      "define translate |",
      "  let ((x:translate $translate:lambda:begin)) |",
      "  ? x |",
      "    if (not | function? $x) (x:translate $x) |",
      "    if (not | = lambda | head $x) (x:translate $x) |",
      "    let ((x:list | head | tail $x)",
      "         (y | head | tail | tail $x)) |",
      "      if (= 0 | list-length $x:list) (translate $y) |",
      "      translate | vector lambda (except-last $x:list) |",
      "        vector ? (last $x:list) $y;"
    ],
    "preprocessed": "define translate |\n  let ((x:translate $translate:lambda:begin)) |\n  ? x |\n    if (not | function? $x) (x:translate $x) |\n    if (not | = lambda | head $x) (x:translate $x) |\n    let ((x:list | head | tail $x)\n         (y | head | tail | tail $x)) |\n      if (= 0 | list-length $x:list) (translate $y) |\n      translate | vector lambda (except-last $x:list) |\n        vector ? (last $x:list) $y;",
    "dt": true,
    "parse": [
      "define",
      "translate",
      [
        -1,
        "let",
        [
          [
            "x:translate",
            [
              -2,
              "translate:lambda:begin"
            ]
          ]
        ],
        [
          -1,
          "?",
          "x",
          [
            -1,
            "if",
            [
              "not",
              [
                -1,
                "function?",
                [
                  -2,
                  "x"
                ]
              ]
            ],
            [
              "x:translate",
              [
                -2,
                "x"
              ]
            ],
            [
              -1,
              "if",
              [
                "not",
                [
                  -1,
                  "=",
                  "lambda",
                  [
                    -1,
                    "head",
                    [
                      -2,
                      "x"
                    ]
                  ]
                ]
              ],
              [
                "x:translate",
                [
                  -2,
                  "x"
                ]
              ],
              [
                -1,
                "let",
                [
                  [
                    "x:list",
                    [
                      -1,
                      "head",
                      [
                        -1,
                        "tail",
                        [
                          -2,
                          "x"
                        ]
                      ]
                    ]
                  ],
                  [
                    "y",
                    [
                      -1,
                      "head",
                      [
                        -1,
                        "tail",
                        [
                          -1,
                          "tail",
                          [
                            -2,
                            "x"
                          ]
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  -1,
                  "if",
                  [
                    "=",
                    "0",
                    [
                      -1,
                      "list-length",
                      [
                        -2,
                        "x:list"
                      ]
                    ]
                  ],
                  [
                    "translate",
                    [
                      -2,
                      "y"
                    ]
                  ],
                  [
                    -1,
                    "translate",
                    [
                      -1,
                      "vector",
                      "lambda",
                      [
                        "except-last",
                        [
                          -2,
                          "x:list"
                        ]
                      ],
                      [
                        -1,
                        "vector",
                        "?",
                        [
                          "last",
                          [
                            -2,
                            "x:list"
                          ]
                        ],
                        [
                          -2,
                          "y"
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf15d;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf16d;&#xf15d;&#xf249;&#xf15d;&#xf15e;&#xf145;&#xf15f;&#xf245;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf170;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf16d;&#xf15d;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf147;&#xf24a;&#xf15e;&#xf248;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf16d;&#xf15d;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf145;&#xf248;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf248;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf245;&#xf245;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf246;&#xf15d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf248;&#xf15d;&#xf248;&#xf154;&#xf24a;&#xf15e;&#xf246;&#xf145;&#xf162;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf150;&#xf246;&#xf145;&#xf161;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf249;&#xf145;&#xf145;&#xf24b;",
    "stanza": 1048
  },
  {
    "role": "code",
    "lines": [
      "= 8 | (lambda (x y) | - $x $y) 8 0;"
    ],
    "preprocessed": "= 8 | (lambda (x y) | - $x $y) 8 0;",
    "dt": false,
    "parse": [
      "=",
      "8",
      [
        -1,
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            -1,
            "-",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "8",
        "0"
      ]
    ],
    "code": "121130210003023212110103212101001312100000133023121011312312101001312312100000133021000302032233",
    "spider": "&#xf147;&#xf24a;&#xf20c;&#xf248;&#xf246;&#xf15e;&#xf246;&#xf16d;&#xf24a;&#xf145;&#xf145;&#xf245;&#xf248;&#xf14f;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf20c;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1049
  },
  {
    "role": "code",
    "lines": [
      "= 2 | (lambda (x y) | - $x $y) 4 2;"
    ],
    "preprocessed": "= 2 | (lambda (x y) | - $x $y) 4 2;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            -1,
            "-",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "4",
        "2"
      ]
    ],
    "code": "1211302103023212110103212101001312100000133023121011312312101001312312100000133021003021032233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf246;&#xf15e;&#xf246;&#xf16d;&#xf24a;&#xf145;&#xf145;&#xf245;&#xf248;&#xf14f;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf208;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1050
  },
  {
    "role": "code",
    "lines": [
      "= 3 | (lambda (x y) | - $x $y) 9 6;"
    ],
    "preprocessed": "= 3 | (lambda (x y) | - $x $y) 9 6;",
    "dt": false,
    "parse": [
      "=",
      "3",
      [
        -1,
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            -1,
            "-",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "9",
        "6"
      ]
    ],
    "code": "121130211302321211010321210100131210000013302312101131231210100131231210000013302100130211032233",
    "spider": "&#xf147;&#xf24a;&#xf207;&#xf248;&#xf246;&#xf15e;&#xf246;&#xf16d;&#xf24a;&#xf145;&#xf145;&#xf245;&#xf248;&#xf14f;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf20d;&#xf24a;&#xf20a;&#xf24b;",
    "stanza": 1051
  },
  {
    "role": "code",
    "lines": [
      "= 3 | (lambda (x y) | - $x $y) 4 1;"
    ],
    "preprocessed": "= 3 | (lambda (x y) | - $x $y) 4 1;",
    "dt": false,
    "parse": [
      "=",
      "3",
      [
        -1,
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            -1,
            "-",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "4",
        "1"
      ]
    ],
    "code": "121130211302321211010321210100131210000013302312101131231210100131231210000013302100302132233",
    "spider": "&#xf147;&#xf24a;&#xf207;&#xf248;&#xf246;&#xf15e;&#xf246;&#xf16d;&#xf24a;&#xf145;&#xf145;&#xf245;&#xf248;&#xf14f;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf208;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 1052
  },
  {
    "role": "code",
    "lines": [
      "= 0 | (lambda (x y) | - $x $y) 4 4;"
    ],
    "preprocessed": "= 0 | (lambda (x y) | - $x $y) 4 4;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            -1,
            "-",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ],
        "4",
        "4"
      ]
    ],
    "code": "1211302030232121101032121010013121000001330231210113123121010013123121000001330210030210032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf246;&#xf15e;&#xf246;&#xf16d;&#xf24a;&#xf145;&#xf145;&#xf245;&#xf248;&#xf14f;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf208;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 1053
  },
  {
    "role": "file",
    "lines": [
      "== COS_CommentBase =="
    ],
    "stanza": 1054
  },
  {
    "role": "comment",
    "lines": [
      "# The following parts of the message are experimental, and not",
      "# carefully integrated with the main body"
    ],
    "section_description": "end of part 1, start of part 2",
    "section_category": "NOTE",
    "section_index": 24,
    "stanza": 1055
  },
  {
    "role": "code",
    "lines": [
      "intro part2;"
    ],
    "preprocessed": "intro part2;",
    "dt": false,
    "parse": [
      "intro",
      "part2"
    ],
    "code": "1210010312111010132233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf179;&#xf24b;",
    "stanza": 1056
  },
  {
    "role": "file",
    "lines": [
      "== COS_Pure =="
    ],
    "stanza": 1057
  },
  {
    "role": "comment",
    "lines": [
      "# these definitions are not quite what we want",
      "# since thinking of everything as a function requires headscratching",
      "# it would be better to use these as a parallel means of evaluation",
      "# ... for expressions"
    ],
    "section_description": "some pure lambda calculus definitions - optional",
    "section_category": "MATH",
    "section_index": 25,
    "stanza": 1058
  },
  {
    "role": "code",
    "lines": [
      "intro pure:if;"
    ],
    "preprocessed": "intro pure:if;",
    "dt": false,
    "parse": [
      "intro",
      "pure:if"
    ],
    "code": "1210010312121001103121111332233",
    "spider": "&#xf156;&#xf24a;&#xf16a;&#xf153;&#xf24b;",
    "stanza": 1059
  },
  {
    "role": "code",
    "lines": [
      "define pure:if | ? x | ? y | ? z | x $y $z;"
    ],
    "preprocessed": "define pure:if | ? x | ? y | ? z | x $y $z;",
    "dt": true,
    "parse": [
      "define",
      "pure:if",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "?",
            "z",
            [
              -1,
              "x",
              [
                -2,
                "y"
              ],
              [
                -2,
                "z"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121210011031211113302312110031210100130231211003121000001302312110031210000103023121010013123121000001312312100001032233",
    "spider": "&#xf151;&#xf24a;&#xf16a;&#xf153;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf146;&#xf248;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf249;&#xf145;&#xf146;&#xf24b;",
    "stanza": 1060
  },
  {
    "role": "code",
    "lines": [
      "intro pure:true;"
    ],
    "preprocessed": "intro pure:true;",
    "dt": false,
    "parse": [
      "intro",
      "pure:true"
    ],
    "code": "1210010312121001103121332233",
    "spider": "&#xf156;&#xf24a;&#xf16a;&#xf145;&#xf24b;",
    "stanza": 1061
  },
  {
    "role": "code",
    "lines": [
      "define pure:true | ? y | ? z | y;"
    ],
    "preprocessed": "define pure:true | ? y | ? z | y;",
    "dt": true,
    "parse": [
      "define",
      "pure:true",
      [
        -1,
        "?",
        "y",
        [
          -1,
          "?",
          "z",
          [
            -1,
            "y"
          ]
        ]
      ]
    ],
    "code": "12110131212100110312133023121100312100000130231211003121000010302312100000132233",
    "spider": "&#xf151;&#xf24a;&#xf16a;&#xf145;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf146;&#xf248;&#xf145;&#xf145;&#xf24b;",
    "stanza": 1062
  },
  {
    "role": "code",
    "lines": [
      "intro pure:false;"
    ],
    "preprocessed": "intro pure:false;",
    "dt": false,
    "parse": [
      "intro",
      "pure:false"
    ],
    "code": "1210010312121001103120332233",
    "spider": "&#xf156;&#xf24a;&#xf16a;&#xf144;&#xf24b;",
    "stanza": 1063
  },
  {
    "role": "code",
    "lines": [
      "define pure:false | ? y | ? z | z;"
    ],
    "preprocessed": "define pure:false | ? y | ? z | z;",
    "dt": true,
    "parse": [
      "define",
      "pure:false",
      [
        -1,
        "?",
        "y",
        [
          -1,
          "?",
          "z",
          [
            -1,
            "z"
          ]
        ]
      ]
    ],
    "code": "12110131212100110312033023121100312100000130231211003121000010302312100001032233",
    "spider": "&#xf151;&#xf24a;&#xf16a;&#xf144;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf146;&#xf248;&#xf145;&#xf146;&#xf24b;",
    "stanza": 1064
  },
  {
    "role": "code",
    "lines": [
      "intro pure:cons;"
    ],
    "preprocessed": "intro pure:cons;",
    "dt": false,
    "parse": [
      "intro",
      "pure:cons"
    ],
    "code": "12100103121210011031210101332233",
    "spider": "&#xf156;&#xf24a;&#xf16a;&#xf159;&#xf24b;",
    "stanza": 1065
  },
  {
    "role": "code",
    "lines": [
      "define pure:cons | ? x | ? y | ? z | pure:if $z $x $y;"
    ],
    "preprocessed": "define pure:cons | ? x | ? y | ? z | pure:if $z $x $y;",
    "dt": true,
    "parse": [
      "define",
      "pure:cons",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "?",
            "z",
            [
              -1,
              "pure:if",
              [
                -2,
                "z"
              ],
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312121001103121010133023121100312101001302312110031210000013023121100312100001030231212100110312111133123121000010312312101001312312100000132233",
    "spider": "&#xf151;&#xf24a;&#xf16a;&#xf159;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf146;&#xf248;&#xf16a;&#xf153;&#xf249;&#xf145;&#xf146;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf24b;",
    "stanza": 1066
  },
  {
    "role": "code",
    "lines": [
      "intro pure:car;"
    ],
    "preprocessed": "intro pure:car;",
    "dt": false,
    "parse": [
      "intro",
      "pure:car"
    ],
    "code": "12100103121210011031210110332233",
    "spider": "&#xf156;&#xf24a;&#xf16a;&#xf15a;&#xf24b;",
    "stanza": 1067
  },
  {
    "role": "code",
    "lines": [
      "define pure:car | ? x | x $pure:true;"
    ],
    "preprocessed": "define pure:car | ? x | x $pure:true;",
    "dt": true,
    "parse": [
      "define",
      "pure:car",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "x",
          [
            -2,
            "pure:true"
          ]
        ]
      ]
    ],
    "code": "121101312121001103121011033023121100312101001302312101001312312121001103121332233",
    "spider": "&#xf151;&#xf24a;&#xf16a;&#xf15a;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf16d;&#xf249;&#xf16a;&#xf145;&#xf24b;",
    "stanza": 1068
  },
  {
    "role": "code",
    "lines": [
      "intro pure:cdr;"
    ],
    "preprocessed": "intro pure:cdr;",
    "dt": false,
    "parse": [
      "intro",
      "pure:cdr"
    ],
    "code": "12100103121210011031210111332233",
    "spider": "&#xf156;&#xf24a;&#xf16a;&#xf15b;&#xf24b;",
    "stanza": 1069
  },
  {
    "role": "code",
    "lines": [
      "define pure:cdr | ? x | x $pure:false;"
    ],
    "preprocessed": "define pure:cdr | ? x | x $pure:false;",
    "dt": true,
    "parse": [
      "define",
      "pure:cdr",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "x",
          [
            -2,
            "pure:false"
          ]
        ]
      ]
    ],
    "code": "121101312121001103121011133023121100312101001302312101001312312121001103120332233",
    "spider": "&#xf151;&#xf24a;&#xf16a;&#xf15b;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf16d;&#xf249;&#xf16a;&#xf144;&#xf24b;",
    "stanza": 1070
  },
  {
    "role": "code",
    "lines": [
      "intro pure:0;"
    ],
    "preprocessed": "intro pure:0;",
    "dt": false,
    "parse": [
      "intro",
      "pure:0"
    ],
    "code": "1210010312121001103020332233",
    "spider": "&#xf156;&#xf24a;&#xf16a;&#xf204;&#xf24b;",
    "stanza": 1071
  },
  {
    "role": "code",
    "lines": [
      "define pure:0 | ? y | ? x $x;"
    ],
    "preprocessed": "define pure:0 | ? y | ? x $x;",
    "dt": true,
    "parse": [
      "define",
      "pure:0",
      [
        -1,
        "?",
        "y",
        [
          -1,
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "code": "121101312121001103020330231211003121000001302312110031210100131231210100132233",
    "spider": "&#xf151;&#xf24a;&#xf16a;&#xf204;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 1072
  },
  {
    "role": "code",
    "lines": [
      "intro pure:1;"
    ],
    "preprocessed": "intro pure:1;",
    "dt": false,
    "parse": [
      "intro",
      "pure:1"
    ],
    "code": "1210010312121001103021332233",
    "spider": "&#xf156;&#xf24a;&#xf16a;&#xf205;&#xf24b;",
    "stanza": 1073
  },
  {
    "role": "code",
    "lines": [
      "define pure:1 | ? y | ? x | y $x;"
    ],
    "preprocessed": "define pure:1 | ? y | ? x | y $x;",
    "dt": true,
    "parse": [
      "define",
      "pure:1",
      [
        -1,
        "?",
        "y",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "y",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121210011030213302312110031210000013023121100312101001302312100000131231210100132233",
    "spider": "&#xf151;&#xf24a;&#xf16a;&#xf205;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf145;&#xf145;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 1074
  },
  {
    "role": "code",
    "lines": [
      "intro pure:2;"
    ],
    "preprocessed": "intro pure:2;",
    "dt": false,
    "parse": [
      "intro",
      "pure:2"
    ],
    "code": "12100103121210011030210332233",
    "spider": "&#xf156;&#xf24a;&#xf16a;&#xf206;&#xf24b;",
    "stanza": 1075
  },
  {
    "role": "code",
    "lines": [
      "define pure:2 | ? y | ? x | y (y $x);"
    ],
    "preprocessed": "define pure:2 | ? y | ? x | y (y $x);",
    "dt": true,
    "parse": [
      "define",
      "pure:2",
      [
        -1,
        "?",
        "y",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "y",
            [
              "y",
              [
                -2,
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131212100110302103302312110031210000013023121100312101001302312100000132121000001312312101001332233",
    "spider": "&#xf151;&#xf24a;&#xf16a;&#xf206;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf145;&#xf145;&#xf246;&#xf145;&#xf145;&#xf249;&#xf16d;&#xf245;&#xf24b;",
    "stanza": 1076
  },
  {
    "role": "code",
    "lines": [
      "intro pure:next;"
    ],
    "preprocessed": "intro pure:next;",
    "dt": false,
    "parse": [
      "intro",
      "pure:next"
    ],
    "code": "1210010312121001103121110110332233",
    "spider": "&#xf156;&#xf24a;&#xf16a;&#xf145;&#xf17a;&#xf24b;",
    "stanza": 1077
  },
  {
    "role": "code",
    "lines": [
      "define pure:next | ? n | ? y | ? x | y ((n $y) $x);"
    ],
    "preprocessed": "define pure:next | ? n | ? y | ? x | y ((n $y) $x);",
    "dt": true,
    "parse": [
      "define",
      "pure:next",
      [
        -1,
        "?",
        "n",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "?",
            "x",
            [
              -1,
              "y",
              [
                [
                  "n",
                  [
                    -2,
                    "y"
                  ]
                ],
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312121001103121110110330231211003121001110302312110031210000013023121100312101001302312100000132212100111031231210000013312312101001332233",
    "spider": "&#xf151;&#xf24a;&#xf16a;&#xf145;&#xf17a;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf145;&#xf145;&#xf246;&#xf246;&#xf145;&#xf152;&#xf249;&#xf145;&#xf145;&#xf245;&#xf249;&#xf16d;&#xf245;&#xf24b;",
    "stanza": 1078
  },
  {
    "role": "code",
    "lines": [
      "intro pure:+;"
    ],
    "preprocessed": "intro pure:+;",
    "dt": false,
    "parse": [
      "intro",
      "pure:+"
    ],
    "code": "1210010312121001103121010332233",
    "spider": "&#xf156;&#xf24a;&#xf16a;&#xf14e;&#xf24b;",
    "stanza": 1079
  },
  {
    "role": "code",
    "lines": [
      "define pure:+ | ? x | ? y | (x $pure:next) $y;"
    ],
    "preprocessed": "define pure:+ | ? x | ? y | (x $pure:next) $y;",
    "dt": true,
    "parse": [
      "define",
      "pure:+",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            [
              "x",
              [
                -2,
                "pure:next"
              ]
            ],
            [
              -2,
              "y"
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121210011031210103302312110031210100130231211003121000001302321210100131231212100110312111011033312312100000132233",
    "spider": "&#xf151;&#xf24a;&#xf16a;&#xf14e;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf246;&#xf16d;&#xf249;&#xf16a;&#xf145;&#xf17a;&#xf245;&#xf249;&#xf145;&#xf145;&#xf24b;",
    "stanza": 1080
  },
  {
    "role": "code",
    "lines": [
      "intro pure:*;"
    ],
    "preprocessed": "intro pure:*;",
    "dt": false,
    "parse": [
      "intro",
      "pure:*"
    ],
    "code": "1210010312121001103121001332233",
    "spider": "&#xf156;&#xf24a;&#xf16a;&#xf14d;&#xf24b;",
    "stanza": 1081
  },
  {
    "role": "code",
    "lines": [
      "define pure:* | ? x | ? y | (x (pure:+ $y)) $pure:0;"
    ],
    "preprocessed": "define pure:* | ? x | ? y | (x (pure:+ $y)) $pure:0;",
    "dt": true,
    "parse": [
      "define",
      "pure:*",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            [
              "x",
              [
                "pure:+",
                [
                  -2,
                  "y"
                ]
              ]
            ],
            [
              -2,
              "pure:0"
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121210011031210013302312110031210100130231211003121000001302321210100132121210011031210103312312100000133312312121001103020332233",
    "spider": "&#xf151;&#xf24a;&#xf16a;&#xf14d;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf246;&#xf16d;&#xf246;&#xf16a;&#xf14e;&#xf249;&#xf145;&#xf145;&#xf245;&#xf245;&#xf249;&#xf16a;&#xf204;&#xf24b;",
    "stanza": 1082
  },
  {
    "role": "code",
    "lines": [
      "intro pure:prev;"
    ],
    "preprocessed": "intro pure:prev;",
    "dt": false,
    "parse": [
      "intro",
      "pure:prev"
    ],
    "code": "1210010312121001103121110111332233",
    "spider": "&#xf156;&#xf24a;&#xf16a;&#xf145;&#xf17b;&#xf24b;",
    "stanza": 1083
  },
  {
    "role": "code",
    "lines": [
      "define pure:prev | ? x:pure | pure:cdr | (x:pure (? x:? | pure:cons (pure:next | pure:car $x:?) (pure:car $x:?))) (pure:cons $pure:0 $pure:0);"
    ],
    "preprocessed": "define pure:prev | ? x:pure | pure:cdr | (x:pure (? x:? | pure:cons (pure:next | pure:car $x:?) (pure:car $x:?))) (pure:cons $pure:0 $pure:0);",
    "dt": true,
    "parse": [
      "define",
      "pure:prev",
      [
        -1,
        "?",
        "x:pure",
        [
          -1,
          "pure:cdr",
          [
            -1,
            [
              "x:pure",
              [
                "?",
                "x:?",
                [
                  -1,
                  "pure:cons",
                  [
                    "pure:next",
                    [
                      -1,
                      "pure:car",
                      [
                        -2,
                        "x:?"
                      ]
                    ]
                  ],
                  [
                    "pure:car",
                    [
                      -2,
                      "x:?"
                    ]
                  ]
                ]
              ]
            ],
            [
              "pure:cons",
              [
                -2,
                "pure:0"
              ],
              [
                -2,
                "pure:0"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121210011031211101113302312110031212101001312100110330231212100110312101113302321212101001312100110332121100312121010013121100330231212100110312101013321212100110312111011033023121210011031210110331231212101001312110033321212100110312101103312312121010013121100333332121210011031210101331231212100110302033123121210011030203332233",
    "spider": "&#xf151;&#xf24a;&#xf16a;&#xf145;&#xf17b;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf16a;&#xf248;&#xf16a;&#xf15b;&#xf248;&#xf246;&#xf16d;&#xf16a;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf150;&#xf248;&#xf16a;&#xf159;&#xf246;&#xf16a;&#xf145;&#xf17a;&#xf248;&#xf16a;&#xf15a;&#xf249;&#xf16d;&#xf150;&#xf245;&#xf246;&#xf16a;&#xf15a;&#xf249;&#xf16d;&#xf150;&#xf245;&#xf245;&#xf245;&#xf246;&#xf16a;&#xf159;&#xf249;&#xf16a;&#xf204;&#xf249;&#xf16a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 1084
  },
  {
    "role": "code",
    "lines": [
      "intro pure:=:0;"
    ],
    "preprocessed": "intro pure:=:0;",
    "dt": false,
    "parse": [
      "intro",
      "pure:=:0"
    ],
    "code": "121001031212100110312113020332233",
    "spider": "&#xf156;&#xf24a;&#xf16a;&#xf147;&#xf204;&#xf24b;",
    "stanza": 1085
  },
  {
    "role": "code",
    "lines": [
      "define pure:=:0 | ? x:pure | (x:pure (? y $pure:false) $pure:true);"
    ],
    "preprocessed": "define pure:=:0 | ? x:pure | (x:pure (? y $pure:false) $pure:true);",
    "dt": true,
    "parse": [
      "define",
      "pure:=:0",
      [
        -1,
        "?",
        "x:pure",
        [
          -1,
          [
            "x:pure",
            [
              "?",
              "y",
              [
                -2,
                "pure:false"
              ]
            ],
            [
              -2,
              "pure:true"
            ]
          ]
        ]
      ]
    ],
    "code": "12110131212100110312113020330231211003121210100131210011033023212121010013121001103321211003121000001312312121001103120333123121210011031213332233",
    "spider": "&#xf151;&#xf24a;&#xf16a;&#xf147;&#xf204;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf16a;&#xf248;&#xf246;&#xf16d;&#xf16a;&#xf246;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf249;&#xf16a;&#xf144;&#xf245;&#xf249;&#xf16a;&#xf145;&#xf245;&#xf24b;",
    "stanza": 1086
  },
  {
    "role": "code",
    "lines": [
      "intro fixed-point;"
    ],
    "preprocessed": "intro fixed-point;",
    "dt": false,
    "parse": [
      "intro",
      "fixed-point"
    ],
    "code": "1210010312111100032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf17c;&#xf24b;",
    "stanza": 1087
  },
  {
    "role": "code",
    "lines": [
      "define fixed-point | ? x | (? y | x (y $y)) (? y | x (y $y));"
    ],
    "preprocessed": "define fixed-point | ? x | (? y | x (y $y)) (? y | x (y $y));",
    "dt": true,
    "parse": [
      "define",
      "fixed-point",
      [
        -1,
        "?",
        "x",
        [
          -1,
          [
            "?",
            "y",
            [
              -1,
              "x",
              [
                "y",
                [
                  -2,
                  "y"
                ]
              ]
            ]
          ],
          [
            "?",
            "y",
            [
              -1,
              "x",
              [
                "y",
                [
                  -2,
                  "y"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131211110003023121100312101001302321211003121000001302312101001321210000013123121000001333212110031210000013023121010013212100000131231210000013332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf17c;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf16d;&#xf246;&#xf145;&#xf145;&#xf249;&#xf145;&#xf145;&#xf245;&#xf245;&#xf246;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf16d;&#xf246;&#xf145;&#xf145;&#xf249;&#xf145;&#xf145;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1088
  },
  {
    "role": "comment",
    "lines": [
      "# .. but for rest of message will assume that define does fixed-point for us",
      "# now build a link between numbers and church number functions"
    ],
    "stanza": 1089
  },
  {
    "role": "code",
    "lines": [
      "intro pure:int:get;"
    ],
    "preprocessed": "intro pure:int:get;",
    "dt": false,
    "parse": [
      "intro",
      "pure:int:get"
    ],
    "code": "1210010312121001103121111103121111001332233",
    "spider": "&#xf156;&#xf24a;&#xf16a;&#xf182;&#xf145;&#xf17d;&#xf24b;",
    "stanza": 1090
  },
  {
    "role": "code",
    "lines": [
      "define pure:int:get | ? y | y (? x | + $x 1) 0;"
    ],
    "preprocessed": "define pure:int:get | ? y | y (? x | + $x 1) 0;",
    "dt": true,
    "parse": [
      "define",
      "pure:int:get",
      [
        -1,
        "?",
        "y",
        [
          -1,
          "y",
          [
            "?",
            "x",
            [
              -1,
              "+",
              [
                -2,
                "x"
              ],
              "1"
            ]
          ],
          "0"
        ]
      ]
    ],
    "code": "121101312121001103121111103121111001330231211003121000001302312100000132121100312101001302312101031231210100130213302032233",
    "spider": "&#xf151;&#xf24a;&#xf16a;&#xf182;&#xf145;&#xf17d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf145;&#xf145;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14e;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1091
  },
  {
    "role": "code",
    "lines": [
      "= 0 (pure:int:get $pure:0);"
    ],
    "preprocessed": "= 0 (pure:int:get $pure:0);",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        "pure:int:get",
        [
          -2,
          "pure:0"
        ]
      ]
    ],
    "code": "12113020321212100110312111110312111100133123121210011030203332233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf246;&#xf16a;&#xf182;&#xf145;&#xf17d;&#xf249;&#xf16a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 1092
  },
  {
    "role": "code",
    "lines": [
      "= 1 (pure:int:get $pure:1);"
    ],
    "preprocessed": "= 1 (pure:int:get $pure:1);",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        "pure:int:get",
        [
          -2,
          "pure:1"
        ]
      ]
    ],
    "code": "12113021321212100110312111110312111100133123121210011030213332233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf246;&#xf16a;&#xf182;&#xf145;&#xf17d;&#xf249;&#xf16a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 1093
  },
  {
    "role": "code",
    "lines": [
      "= 2 (pure:int:get $pure:2);"
    ],
    "preprocessed": "= 2 (pure:int:get $pure:2);",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        "pure:int:get",
        [
          -2,
          "pure:2"
        ]
      ]
    ],
    "code": "1211302103212121001103121111103121111001331231212100110302103332233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf246;&#xf16a;&#xf182;&#xf145;&#xf17d;&#xf249;&#xf16a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1094
  },
  {
    "role": "code",
    "lines": [
      "define int:pure:get | ? x | if (= 0 $x) $pure:0 (pure:next | int:pure:get | - $x 1);"
    ],
    "preprocessed": "define int:pure:get | ? x | if (= 0 $x) $pure:0 (pure:next | int:pure:get | - $x 1);",
    "dt": true,
    "parse": [
      "define",
      "int:pure:get",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "=",
            "0",
            [
              -2,
              "x"
            ]
          ],
          [
            -2,
            "pure:0"
          ],
          [
            "pure:next",
            [
              -1,
              "int:pure:get",
              [
                -1,
                "-",
                [
                  -2,
                  "x"
                ],
                "1"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131212111110312100110312111100133023121100312101001302312111132121130203123121010013312312121001103020332121210011031211101103302312121111103121001103121111001330231210113123121010013021332233",
    "spider": "&#xf151;&#xf24a;&#xf182;&#xf16a;&#xf145;&#xf17d;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf16a;&#xf204;&#xf246;&#xf16a;&#xf145;&#xf17a;&#xf248;&#xf182;&#xf16a;&#xf145;&#xf17d;&#xf248;&#xf14f;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 1095
  },
  {
    "role": "file",
    "lines": [
      "== COS_Quantifier =="
    ],
    "stanza": 1096
  },
  {
    "role": "comment",
    "lines": [
      "# really need to link with sets for true correctness",
      "# and the examples here are REALLY sparse, need much more"
    ],
    "section_description": "introduce universal quantifier",
    "section_category": "MATH",
    "section_index": 26,
    "stanza": 1097
  },
  {
    "role": "code",
    "lines": [
      "intro forall;"
    ],
    "preprocessed": "intro forall;",
    "dt": false,
    "parse": [
      "intro",
      "forall"
    ],
    "code": "12100103121001132233",
    "spider": "&#xf156;&#xf24a;&#xf157;&#xf24b;",
    "stanza": 1098
  },
  {
    "role": "code",
    "lines": [
      "< 5 (+ 5 1);"
    ],
    "preprocessed": "< 5 (+ 5 1);",
    "dt": false,
    "parse": [
      "<",
      "5",
      [
        "+",
        "5",
        "1"
      ]
    ],
    "code": "1210302101321210103021013021332233",
    "spider": "&#xf146;&#xf24a;&#xf209;&#xf246;&#xf14e;&#xf24a;&#xf209;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 1099
  },
  {
    "role": "code",
    "lines": [
      "< 4 (+ 4 1);"
    ],
    "preprocessed": "< 4 (+ 4 1);",
    "dt": false,
    "parse": [
      "<",
      "4",
      [
        "+",
        "4",
        "1"
      ]
    ],
    "code": "1210302100321210103021003021332233",
    "spider": "&#xf146;&#xf24a;&#xf208;&#xf246;&#xf14e;&#xf24a;&#xf208;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 1100
  },
  {
    "role": "code",
    "lines": [
      "< 3 (+ 3 1);"
    ],
    "preprocessed": "< 3 (+ 3 1);",
    "dt": false,
    "parse": [
      "<",
      "3",
      [
        "+",
        "3",
        "1"
      ]
    ],
    "code": "12103021132121010302113021332233",
    "spider": "&#xf146;&#xf24a;&#xf207;&#xf246;&#xf14e;&#xf24a;&#xf207;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 1101
  },
  {
    "role": "code",
    "lines": [
      "< 2 (+ 2 1);"
    ],
    "preprocessed": "< 2 (+ 2 1);",
    "dt": false,
    "parse": [
      "<",
      "2",
      [
        "+",
        "2",
        "1"
      ]
    ],
    "code": "12103021032121010302103021332233",
    "spider": "&#xf146;&#xf24a;&#xf206;&#xf246;&#xf14e;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 1102
  },
  {
    "role": "code",
    "lines": [
      "< 1 (+ 1 1);"
    ],
    "preprocessed": "< 1 (+ 1 1);",
    "dt": false,
    "parse": [
      "<",
      "1",
      [
        "+",
        "1",
        "1"
      ]
    ],
    "code": "121030213212101030213021332233",
    "spider": "&#xf146;&#xf24a;&#xf205;&#xf246;&#xf14e;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 1103
  },
  {
    "role": "code",
    "lines": [
      "< 0 (+ 0 1);"
    ],
    "preprocessed": "< 0 (+ 0 1);",
    "dt": false,
    "parse": [
      "<",
      "0",
      [
        "+",
        "0",
        "1"
      ]
    ],
    "code": "121030203212101030203021332233",
    "spider": "&#xf146;&#xf24a;&#xf204;&#xf246;&#xf14e;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 1104
  },
  {
    "role": "code",
    "lines": [
      "forall (? x | < $x (+ $x 1));"
    ],
    "preprocessed": "forall (? x | < $x (+ $x 1));",
    "dt": false,
    "parse": [
      "forall",
      [
        "?",
        "x",
        [
          -1,
          "<",
          [
            -2,
            "x"
          ],
          [
            "+",
            [
              -2,
              "x"
            ],
            "1"
          ]
        ]
      ]
    ],
    "code": "121001132121100312101001302312103123121010013212101031231210100130213332233",
    "spider": "&#xf157;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf249;&#xf16d;&#xf246;&#xf14e;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1105
  },
  {
    "role": "code",
    "lines": [
      "< 5 (* 5 2);"
    ],
    "preprocessed": "< 5 (* 5 2);",
    "dt": false,
    "parse": [
      "<",
      "5",
      [
        "*",
        "5",
        "2"
      ]
    ],
    "code": "12103021013212100130210130210332233",
    "spider": "&#xf146;&#xf24a;&#xf209;&#xf246;&#xf14d;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1106
  },
  {
    "role": "code",
    "lines": [
      "< 4 (* 4 2);"
    ],
    "preprocessed": "< 4 (* 4 2);",
    "dt": false,
    "parse": [
      "<",
      "4",
      [
        "*",
        "4",
        "2"
      ]
    ],
    "code": "12103021003212100130210030210332233",
    "spider": "&#xf146;&#xf24a;&#xf208;&#xf246;&#xf14d;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1107
  },
  {
    "role": "code",
    "lines": [
      "< 3 (* 3 2);"
    ],
    "preprocessed": "< 3 (* 3 2);",
    "dt": false,
    "parse": [
      "<",
      "3",
      [
        "*",
        "3",
        "2"
      ]
    ],
    "code": "121030211321210013021130210332233",
    "spider": "&#xf146;&#xf24a;&#xf207;&#xf246;&#xf14d;&#xf24a;&#xf207;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1108
  },
  {
    "role": "code",
    "lines": [
      "< 2 (* 2 2);"
    ],
    "preprocessed": "< 2 (* 2 2);",
    "dt": false,
    "parse": [
      "<",
      "2",
      [
        "*",
        "2",
        "2"
      ]
    ],
    "code": "121030210321210013021030210332233",
    "spider": "&#xf146;&#xf24a;&#xf206;&#xf246;&#xf14d;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1109
  },
  {
    "role": "code",
    "lines": [
      "< 1 (* 1 2);"
    ],
    "preprocessed": "< 1 (* 1 2);",
    "dt": false,
    "parse": [
      "<",
      "1",
      [
        "*",
        "1",
        "2"
      ]
    ],
    "code": "1210302132121001302130210332233",
    "spider": "&#xf146;&#xf24a;&#xf205;&#xf246;&#xf14d;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1110
  },
  {
    "role": "code",
    "lines": [
      "not | < 0 (* 0 2);"
    ],
    "preprocessed": "not | < 0 (* 0 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "<",
        "0",
        [
          "*",
          "0",
          "2"
        ]
      ]
    ],
    "code": "1210130231210302032121001302030210332233",
    "spider": "&#xf149;&#xf248;&#xf146;&#xf24a;&#xf204;&#xf246;&#xf14d;&#xf24a;&#xf204;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1111
  },
  {
    "role": "code",
    "lines": [
      "not | forall (? x | < $x (* $x 2));"
    ],
    "preprocessed": "not | forall (? x | < $x (* $x 2));",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "forall",
        [
          "?",
          "x",
          [
            -1,
            "<",
            [
              -2,
              "x"
            ],
            [
              "*",
              [
                -2,
                "x"
              ],
              "2"
            ]
          ]
        ]
      ]
    ],
    "code": "1210130231210011321211003121010013023121031231210100132121001312312101001302103332233",
    "spider": "&#xf149;&#xf248;&#xf157;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf249;&#xf16d;&#xf246;&#xf14d;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1112
  },
  {
    "role": "comment",
    "lines": [
      "# really need to link with sets for true correctness",
      "# and the examples here are REALLY sparse, need much more"
    ],
    "section_description": "introduce existential quantifier",
    "section_category": "MATH",
    "section_index": 27,
    "stanza": 1113
  },
  {
    "role": "code",
    "lines": [
      "not | = 5 (* 2 2);"
    ],
    "preprocessed": "not | = 5 (* 2 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        "5",
        [
          "*",
          "2",
          "2"
        ]
      ]
    ],
    "code": "1210130231211302101321210013021030210332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf24a;&#xf209;&#xf246;&#xf14d;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1114
  },
  {
    "role": "code",
    "lines": [
      "= 4 (* 2 2);"
    ],
    "preprocessed": "= 4 (* 2 2);",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        "*",
        "2",
        "2"
      ]
    ],
    "code": "1211302100321210013021030210332233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf246;&#xf14d;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1115
  },
  {
    "role": "code",
    "lines": [
      "not | = 3 (* 2 2);"
    ],
    "preprocessed": "not | = 3 (* 2 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        "3",
        [
          "*",
          "2",
          "2"
        ]
      ]
    ],
    "code": "121013023121130211321210013021030210332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf24a;&#xf207;&#xf246;&#xf14d;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1116
  },
  {
    "role": "code",
    "lines": [
      "not | = 2 (* 2 2);"
    ],
    "preprocessed": "not | = 2 (* 2 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        "2",
        [
          "*",
          "2",
          "2"
        ]
      ]
    ],
    "code": "121013023121130210321210013021030210332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf24a;&#xf206;&#xf246;&#xf14d;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1117
  },
  {
    "role": "code",
    "lines": [
      "not | = 1 (* 2 2);"
    ],
    "preprocessed": "not | = 1 (* 2 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        "1",
        [
          "*",
          "2",
          "2"
        ]
      ]
    ],
    "code": "12101302312113021321210013021030210332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf24a;&#xf205;&#xf246;&#xf14d;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1118
  },
  {
    "role": "code",
    "lines": [
      "not | = 0 (* 2 2);"
    ],
    "preprocessed": "not | = 0 (* 2 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        "0",
        [
          "*",
          "2",
          "2"
        ]
      ]
    ],
    "code": "12101302312113020321210013021030210332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf24a;&#xf204;&#xf246;&#xf14d;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1119
  },
  {
    "role": "code",
    "lines": [
      "intro exists;"
    ],
    "preprocessed": "intro exists;",
    "dt": false,
    "parse": [
      "intro",
      "exists"
    ],
    "code": "12100103121010032233",
    "spider": "&#xf156;&#xf24a;&#xf158;&#xf24b;",
    "stanza": 1120
  },
  {
    "role": "code",
    "lines": [
      "exists (? x | = $x (* 2 2));"
    ],
    "preprocessed": "exists (? x | = $x (* 2 2));",
    "dt": false,
    "parse": [
      "exists",
      [
        "?",
        "x",
        [
          -1,
          "=",
          [
            -2,
            "x"
          ],
          [
            "*",
            "2",
            "2"
          ]
        ]
      ]
    ],
    "code": "121010032121100312101001302312113123121010013212100130210302103332233",
    "spider": "&#xf158;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf147;&#xf249;&#xf16d;&#xf246;&#xf14d;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1121
  },
  {
    "role": "code",
    "lines": [
      "not | = 5 (+ 5 2);"
    ],
    "preprocessed": "not | = 5 (+ 5 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        "5",
        [
          "+",
          "5",
          "2"
        ]
      ]
    ],
    "code": "12101302312113021013212101030210130210332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf24a;&#xf209;&#xf246;&#xf14e;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1122
  },
  {
    "role": "code",
    "lines": [
      "not | = 4 (+ 4 2);"
    ],
    "preprocessed": "not | = 4 (+ 4 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        "4",
        [
          "+",
          "4",
          "2"
        ]
      ]
    ],
    "code": "12101302312113021003212101030210030210332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf24a;&#xf208;&#xf246;&#xf14e;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1123
  },
  {
    "role": "code",
    "lines": [
      "not | = 3 (+ 3 2);"
    ],
    "preprocessed": "not | = 3 (+ 3 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        "3",
        [
          "+",
          "3",
          "2"
        ]
      ]
    ],
    "code": "121013023121130211321210103021130210332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf24a;&#xf207;&#xf246;&#xf14e;&#xf24a;&#xf207;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1124
  },
  {
    "role": "code",
    "lines": [
      "not | = 2 (+ 2 2);"
    ],
    "preprocessed": "not | = 2 (+ 2 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        "2",
        [
          "+",
          "2",
          "2"
        ]
      ]
    ],
    "code": "121013023121130210321210103021030210332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf24a;&#xf206;&#xf246;&#xf14e;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1125
  },
  {
    "role": "code",
    "lines": [
      "not | = 1 (+ 1 2);"
    ],
    "preprocessed": "not | = 1 (+ 1 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        "1",
        [
          "+",
          "1",
          "2"
        ]
      ]
    ],
    "code": "1210130231211302132121010302130210332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf24a;&#xf205;&#xf246;&#xf14e;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1126
  },
  {
    "role": "code",
    "lines": [
      "not | = 0 (+ 0 2);"
    ],
    "preprocessed": "not | = 0 (+ 0 2);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        "0",
        [
          "+",
          "0",
          "2"
        ]
      ]
    ],
    "code": "1210130231211302032121010302030210332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf24a;&#xf204;&#xf246;&#xf14e;&#xf24a;&#xf204;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1127
  },
  {
    "role": "code",
    "lines": [
      "not (exists (? x | = $x (+ $x 2)));"
    ],
    "preprocessed": "not (exists (? x | = $x (+ $x 2)));",
    "dt": false,
    "parse": [
      "not",
      [
        "exists",
        [
          "?",
          "x",
          [
            -1,
            "=",
            [
              -2,
              "x"
            ],
            [
              "+",
              [
                -2,
                "x"
              ],
              "2"
            ]
          ]
        ]
      ]
    ],
    "code": "121013212101003212110031210100130231211312312101001321210103123121010013021033332233",
    "spider": "&#xf149;&#xf246;&#xf158;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf147;&#xf249;&#xf16d;&#xf246;&#xf14e;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1128
  },
  {
    "role": "file",
    "lines": [
      "== COS_Implication =="
    ],
    "stanza": 1129
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "introduce logical implication",
    "section_category": "MATH",
    "section_index": 28,
    "stanza": 1130
  },
  {
    "role": "code",
    "lines": [
      "intro =>;"
    ],
    "preprocessed": "intro =>;",
    "dt": false,
    "parse": [
      "intro",
      "=>"
    ],
    "code": "1210010312111101032233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf17e;&#xf24b;",
    "stanza": 1131
  },
  {
    "role": "code",
    "lines": [
      "define => | ? x | ? y | not | and $x (not $y);"
    ],
    "preprocessed": "define => | ? x | ? y | not | and $x (not $y);",
    "dt": true,
    "parse": [
      "define",
      "=>",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "not",
            [
              -1,
              "and",
              [
                -2,
                "x"
              ],
              [
                "not",
                [
                  -2,
                  "y"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312111101030231211003121010013023121100312100000130231210130231211031231210100132121013123121000001332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf17e;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf149;&#xf248;&#xf14a;&#xf249;&#xf16d;&#xf246;&#xf149;&#xf249;&#xf145;&#xf145;&#xf245;&#xf24b;",
    "stanza": 1132
  },
  {
    "role": "code",
    "lines": [
      "=> $true $true;"
    ],
    "preprocessed": "=> $true $true;",
    "dt": false,
    "parse": [
      "=>",
      [
        -2,
        "true"
      ],
      [
        -2,
        "true"
      ]
    ],
    "code": "1211110103123121312312132233",
    "spider": "&#xf145;&#xf17e;&#xf249;&#xf145;&#xf249;&#xf145;&#xf24b;",
    "stanza": 1133
  },
  {
    "role": "code",
    "lines": [
      "not | => $true $false;"
    ],
    "preprocessed": "not | => $true $false;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=>",
        [
          -2,
          "true"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "code": "1210130231211110103123121312312032233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf17e;&#xf249;&#xf145;&#xf249;&#xf144;&#xf24b;",
    "stanza": 1134
  },
  {
    "role": "code",
    "lines": [
      "=> $false $true;"
    ],
    "preprocessed": "=> $false $true;",
    "dt": false,
    "parse": [
      "=>",
      [
        -2,
        "false"
      ],
      [
        -2,
        "true"
      ]
    ],
    "code": "1211110103123120312312132233",
    "spider": "&#xf145;&#xf17e;&#xf249;&#xf144;&#xf249;&#xf145;&#xf24b;",
    "stanza": 1135
  },
  {
    "role": "code",
    "lines": [
      "=> $false $false;"
    ],
    "preprocessed": "=> $false $false;",
    "dt": false,
    "parse": [
      "=>",
      [
        -2,
        "false"
      ],
      [
        -2,
        "false"
      ]
    ],
    "code": "1211110103123120312312032233",
    "spider": "&#xf145;&#xf17e;&#xf249;&#xf144;&#xf249;&#xf144;&#xf24b;",
    "stanza": 1136
  },
  {
    "role": "code",
    "lines": [
      "forall (? x | forall (? y | => (=> $x $y) (=> (not $y) (not $x))));"
    ],
    "preprocessed": "forall (? x | forall (? y | => (=> $x $y) (=> (not $y) (not $x))));",
    "dt": false,
    "parse": [
      "forall",
      [
        "?",
        "x",
        [
          -1,
          "forall",
          [
            "?",
            "y",
            [
              -1,
              "=>",
              [
                "=>",
                [
                  -2,
                  "x"
                ],
                [
                  -2,
                  "y"
                ]
              ],
              [
                "=>",
                [
                  "not",
                  [
                    -2,
                    "y"
                  ]
                ],
                [
                  "not",
                  [
                    -2,
                    "x"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1210011321211003121010013023121001132121100312100000130231211110103212111101031231210100131231210000013321211110103212101312312100000133212101312312101001333332233",
    "spider": "&#xf157;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf157;&#xf246;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf145;&#xf17e;&#xf246;&#xf145;&#xf17e;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf246;&#xf145;&#xf17e;&#xf246;&#xf149;&#xf249;&#xf145;&#xf145;&#xf245;&#xf246;&#xf149;&#xf249;&#xf16d;&#xf245;&#xf245;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1137
  },
  {
    "role": "file",
    "lines": [
      "== COS_Set =="
    ],
    "stanza": 1138
  },
  {
    "role": "doc",
    "lines": [
      ""
    ],
    "section_description": "introduce sets and set membership",
    "section_category": "MATH",
    "section_index": 29,
    "stanza": 1139
  },
  {
    "role": "code",
    "lines": [
      "intro element;"
    ],
    "preprocessed": "intro element;",
    "dt": false,
    "parse": [
      "intro",
      "element"
    ],
    "code": "1210010312111101132233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf17f;&#xf24b;",
    "stanza": 1140
  },
  {
    "role": "code",
    "lines": [
      "define element | ? x | ? y:list | not | = $undefined | list:find $y:list $x;"
    ],
    "preprocessed": "define element | ? x | ? y:list | not | = $undefined | list:find $y:list $x;",
    "dt": true,
    "parse": [
      "define",
      "element",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y:list",
          [
            -1,
            "not",
            [
              -1,
              "=",
              [
                -2,
                "undefined"
              ],
              [
                -1,
                "list:find",
                [
                  -2,
                  "y:list"
                ],
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121111011302312110031210100130231211003121210000013121001101330231210130231211312312100000302312121001101312101110033123121210000013121001101331231210100132233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf17f;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf145;&#xf151;&#xf248;&#xf149;&#xf248;&#xf147;&#xf249;&#xf164;&#xf248;&#xf145;&#xf151;&#xf145;&#xf160;&#xf249;&#xf145;&#xf145;&#xf145;&#xf151;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 1141
  },
  {
    "role": "code",
    "lines": [
      "element 1 | vector 3 8 2 1 0;"
    ],
    "preprocessed": "element 1 | vector 3 8 2 1 0;",
    "dt": false,
    "parse": [
      "element",
      "1",
      [
        -1,
        "vector",
        "3",
        "8",
        "2",
        "1",
        "0"
      ]
    ],
    "code": "121111011302130231210000302113021000302103021302032233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf207;&#xf24a;&#xf20c;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1142
  },
  {
    "role": "code",
    "lines": [
      "element 3 | vector 3 8 2 1 0;"
    ],
    "preprocessed": "element 3 | vector 3 8 2 1 0;",
    "dt": false,
    "parse": [
      "element",
      "3",
      [
        -1,
        "vector",
        "3",
        "8",
        "2",
        "1",
        "0"
      ]
    ],
    "code": "1211110113021130231210000302113021000302103021302032233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf207;&#xf248;&#xf154;&#xf24a;&#xf207;&#xf24a;&#xf20c;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1143
  },
  {
    "role": "code",
    "lines": [
      "element 1 | vector 3 8 2 1 0;"
    ],
    "preprocessed": "element 1 | vector 3 8 2 1 0;",
    "dt": false,
    "parse": [
      "element",
      "1",
      [
        -1,
        "vector",
        "3",
        "8",
        "2",
        "1",
        "0"
      ]
    ],
    "code": "121111011302130231210000302113021000302103021302032233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf207;&#xf24a;&#xf20c;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1144
  },
  {
    "role": "code",
    "lines": [
      "element 4 | vector 9 5 4 0 8;"
    ],
    "preprocessed": "element 4 | vector 9 5 4 0 8;",
    "dt": false,
    "parse": [
      "element",
      "4",
      [
        -1,
        "vector",
        "9",
        "5",
        "4",
        "0",
        "8"
      ]
    ],
    "code": "1211110113021003023121000030210013021013021003020302100032233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf208;&#xf248;&#xf154;&#xf24a;&#xf20d;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf24a;&#xf204;&#xf24a;&#xf20c;&#xf24b;",
    "stanza": 1145
  },
  {
    "role": "code",
    "lines": [
      "element 8 | vector 9 5 4 0 8;"
    ],
    "preprocessed": "element 8 | vector 9 5 4 0 8;",
    "dt": false,
    "parse": [
      "element",
      "8",
      [
        -1,
        "vector",
        "9",
        "5",
        "4",
        "0",
        "8"
      ]
    ],
    "code": "12111101130210003023121000030210013021013021003020302100032233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf20c;&#xf248;&#xf154;&#xf24a;&#xf20d;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf24a;&#xf204;&#xf24a;&#xf20c;&#xf24b;",
    "stanza": 1146
  },
  {
    "role": "code",
    "lines": [
      "element 4 | vector 9 5 4 0 8;"
    ],
    "preprocessed": "element 4 | vector 9 5 4 0 8;",
    "dt": false,
    "parse": [
      "element",
      "4",
      [
        -1,
        "vector",
        "9",
        "5",
        "4",
        "0",
        "8"
      ]
    ],
    "code": "1211110113021003023121000030210013021013021003020302100032233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf208;&#xf248;&#xf154;&#xf24a;&#xf20d;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf24a;&#xf204;&#xf24a;&#xf20c;&#xf24b;",
    "stanza": 1147
  },
  {
    "role": "code",
    "lines": [
      "element 0 | vector 0 8 5 4 2;"
    ],
    "preprocessed": "element 0 | vector 0 8 5 4 2;",
    "dt": false,
    "parse": [
      "element",
      "0",
      [
        -1,
        "vector",
        "0",
        "8",
        "5",
        "4",
        "2"
      ]
    ],
    "code": "121111011302030231210000302030210003021013021003021032233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf204;&#xf248;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf20c;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1148
  },
  {
    "role": "code",
    "lines": [
      "element 0 | vector 0 8 5 4 2;"
    ],
    "preprocessed": "element 0 | vector 0 8 5 4 2;",
    "dt": false,
    "parse": [
      "element",
      "0",
      [
        -1,
        "vector",
        "0",
        "8",
        "5",
        "4",
        "2"
      ]
    ],
    "code": "121111011302030231210000302030210003021013021003021032233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf204;&#xf248;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf20c;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1149
  },
  {
    "role": "code",
    "lines": [
      "element 8 | vector 0 8 5 4 2;"
    ],
    "preprocessed": "element 8 | vector 0 8 5 4 2;",
    "dt": false,
    "parse": [
      "element",
      "8",
      [
        -1,
        "vector",
        "0",
        "8",
        "5",
        "4",
        "2"
      ]
    ],
    "code": "121111011302100030231210000302030210003021013021003021032233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf20c;&#xf248;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf20c;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1150
  },
  {
    "role": "code",
    "lines": [
      "element 6 | vector 5 8 7 6 2;"
    ],
    "preprocessed": "element 6 | vector 5 8 7 6 2;",
    "dt": false,
    "parse": [
      "element",
      "6",
      [
        -1,
        "vector",
        "5",
        "8",
        "7",
        "6",
        "2"
      ]
    ],
    "code": "1211110113021103023121000030210130210003021113021103021032233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf20a;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf20c;&#xf24a;&#xf20b;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1151
  },
  {
    "role": "code",
    "lines": [
      "element 8 | vector 5 8 7 6 2;"
    ],
    "preprocessed": "element 8 | vector 5 8 7 6 2;",
    "dt": false,
    "parse": [
      "element",
      "8",
      [
        -1,
        "vector",
        "5",
        "8",
        "7",
        "6",
        "2"
      ]
    ],
    "code": "12111101130210003023121000030210130210003021113021103021032233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf20c;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf20c;&#xf24a;&#xf20b;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1152
  },
  {
    "role": "code",
    "lines": [
      "element 6 | vector 5 8 7 6 2;"
    ],
    "preprocessed": "element 6 | vector 5 8 7 6 2;",
    "dt": false,
    "parse": [
      "element",
      "6",
      [
        -1,
        "vector",
        "5",
        "8",
        "7",
        "6",
        "2"
      ]
    ],
    "code": "1211110113021103023121000030210130210003021113021103021032233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf20a;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf20c;&#xf24a;&#xf20b;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1153
  },
  {
    "role": "code",
    "lines": [
      "element 3 | vector 0 3 9 2 1;"
    ],
    "preprocessed": "element 3 | vector 0 3 9 2 1;",
    "dt": false,
    "parse": [
      "element",
      "3",
      [
        -1,
        "vector",
        "0",
        "3",
        "9",
        "2",
        "1"
      ]
    ],
    "code": "1211110113021130231210000302030211302100130210302132233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf207;&#xf248;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf207;&#xf24a;&#xf20d;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 1154
  },
  {
    "role": "code",
    "lines": [
      "element 0 | vector 0 3 9 2 1;"
    ],
    "preprocessed": "element 0 | vector 0 3 9 2 1;",
    "dt": false,
    "parse": [
      "element",
      "0",
      [
        -1,
        "vector",
        "0",
        "3",
        "9",
        "2",
        "1"
      ]
    ],
    "code": "121111011302030231210000302030211302100130210302132233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf204;&#xf248;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf207;&#xf24a;&#xf20d;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 1155
  },
  {
    "role": "code",
    "lines": [
      "element 0 | vector 0 3 9 2 1;"
    ],
    "preprocessed": "element 0 | vector 0 3 9 2 1;",
    "dt": false,
    "parse": [
      "element",
      "0",
      [
        -1,
        "vector",
        "0",
        "3",
        "9",
        "2",
        "1"
      ]
    ],
    "code": "121111011302030231210000302030211302100130210302132233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf204;&#xf248;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf207;&#xf24a;&#xf20d;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 1156
  },
  {
    "role": "code",
    "lines": [
      "not | element 1 | vector 5 6 3 7;"
    ],
    "preprocessed": "not | element 1 | vector 5 6 3 7;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "element",
        "1",
        [
          -1,
          "vector",
          "5",
          "6",
          "3",
          "7"
        ]
      ]
    ],
    "code": "1210130231211110113021302312100003021013021103021130211132233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf17f;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf20a;&#xf24a;&#xf207;&#xf24a;&#xf20b;&#xf24b;",
    "stanza": 1157
  },
  {
    "role": "code",
    "lines": [
      "not | element 1 | vector 9 8 5 3;"
    ],
    "preprocessed": "not | element 1 | vector 9 8 5 3;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "element",
        "1",
        [
          -1,
          "vector",
          "9",
          "8",
          "5",
          "3"
        ]
      ]
    ],
    "code": "121013023121111011302130231210000302100130210003021013021132233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf17f;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf20d;&#xf24a;&#xf20c;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 1158
  },
  {
    "role": "code",
    "lines": [
      "not | element 4 | vector 6 9 1 7;"
    ],
    "preprocessed": "not | element 4 | vector 6 9 1 7;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "element",
        "4",
        [
          -1,
          "vector",
          "6",
          "9",
          "1",
          "7"
        ]
      ]
    ],
    "code": "121013023121111011302100302312100003021103021001302130211132233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf17f;&#xf24a;&#xf208;&#xf248;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf20d;&#xf24a;&#xf205;&#xf24a;&#xf20b;&#xf24b;",
    "stanza": 1159
  },
  {
    "role": "code",
    "lines": [
      "not | element 2 | vector 1 5 6 4;"
    ],
    "preprocessed": "not | element 2 | vector 1 5 6 4;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "element",
        "2",
        [
          -1,
          "vector",
          "1",
          "5",
          "6",
          "4"
        ]
      ]
    ],
    "code": "1210130231211110113021030231210000302130210130211030210032233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf17f;&#xf24a;&#xf206;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 1160
  },
  {
    "role": "code",
    "lines": [
      "not | element 3 | vector 6 9 7 5;"
    ],
    "preprocessed": "not | element 3 | vector 6 9 7 5;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "element",
        "3",
        [
          -1,
          "vector",
          "6",
          "9",
          "7",
          "5"
        ]
      ]
    ],
    "code": "1210130231211110113021130231210000302110302100130211130210132233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf17f;&#xf24a;&#xf207;&#xf248;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf20d;&#xf24a;&#xf20b;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 1161
  },
  {
    "role": "doc",
    "lines": [
      "Set some rules for set equality."
    ],
    "stanza": 1162
  },
  {
    "role": "code",
    "lines": [
      "intro set:<=;"
    ],
    "preprocessed": "intro set:<=;",
    "dt": false,
    "parse": [
      "intro",
      "set:<="
    ],
    "code": "12100103121211111003121001100332233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf180;&#xf145;&#xf150;&#xf24b;",
    "stanza": 1163
  },
  {
    "role": "code",
    "lines": [
      "define set:<= | ? x | ? y |",
      "  if (= 0 | list-length $x) $true |",
      "  and (element (head $x) $y) |",
      "    set:<= (tail $x) $y;"
    ],
    "preprocessed": "define set:<= | ? x | ? y |\n  if (= 0 | list-length $x) $true |\n  and (element (head $x) $y) |\n    set:<= (tail $x) $y;",
    "dt": true,
    "parse": [
      "define",
      "set:<=",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "if",
            [
              "=",
              "0",
              [
                -1,
                "list-length",
                [
                  -2,
                  "x"
                ]
              ]
            ],
            [
              -2,
              "true"
            ],
            [
              -1,
              "and",
              [
                "element",
                [
                  "head",
                  [
                    -2,
                    "x"
                  ]
                ],
                [
                  -2,
                  "y"
                ]
              ],
              [
                -1,
                "set:<=",
                [
                  "tail",
                  [
                    -2,
                    "x"
                  ]
                ],
                [
                  -2,
                  "y"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121211111003121001100330231211003121010013023121100312100000130231211113212113020302312101001031231210100133123121302312110321211110113212101000031231210100133123121000001330231212111110031210011003321210100013123121010013312312100000132233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf180;&#xf145;&#xf150;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf145;&#xf248;&#xf14a;&#xf246;&#xf145;&#xf17f;&#xf246;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf145;&#xf145;&#xf245;&#xf248;&#xf145;&#xf180;&#xf145;&#xf150;&#xf246;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf145;&#xf145;&#xf24b;",
    "stanza": 1164
  },
  {
    "role": "code",
    "lines": [
      "intro set:=;"
    ],
    "preprocessed": "intro set:=;",
    "dt": false,
    "parse": [
      "intro",
      "set:="
    ],
    "code": "121001031212111110031211332233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf180;&#xf147;&#xf24b;",
    "stanza": 1165
  },
  {
    "role": "code",
    "lines": [
      "define set:= | ? x | ? y |",
      "  and (set:<= $x $y) (set:<= $y $x);"
    ],
    "preprocessed": "define set:= | ? x | ? y |\n  and (set:<= $x $y) (set:<= $y $x);",
    "dt": true,
    "parse": [
      "define",
      "set:=",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "and",
            [
              "set:<=",
              [
                -2,
                "x"
              ],
              [
                -2,
                "y"
              ]
            ],
            [
              "set:<=",
              [
                -2,
                "y"
              ],
              [
                -2,
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312121111100312113302312110031210100130231211003121000001302312110321212111110031210011003312312101001312312100000133212121111100312100110033123121000001312312101001332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf180;&#xf147;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14a;&#xf246;&#xf145;&#xf180;&#xf145;&#xf150;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf245;&#xf246;&#xf145;&#xf180;&#xf145;&#xf150;&#xf249;&#xf145;&#xf145;&#xf249;&#xf16d;&#xf245;&#xf24b;",
    "stanza": 1166
  },
  {
    "role": "code",
    "lines": [
      "set:= (vector 1 5 9) (vector 5 1 9);"
    ],
    "preprocessed": "set:= (vector 1 5 9) (vector 5 1 9);",
    "dt": false,
    "parse": [
      "set:=",
      [
        "vector",
        "1",
        "5",
        "9"
      ],
      [
        "vector",
        "5",
        "1",
        "9"
      ]
    ],
    "code": "1212111110031211332121000030213021013021001332121000030210130213021001332233",
    "spider": "&#xf145;&#xf180;&#xf147;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf24a;&#xf20d;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf205;&#xf24a;&#xf20d;&#xf245;&#xf24b;",
    "stanza": 1167
  },
  {
    "role": "code",
    "lines": [
      "set:= (vector 1 5 9) (vector 9 1 5);"
    ],
    "preprocessed": "set:= (vector 1 5 9) (vector 9 1 5);",
    "dt": false,
    "parse": [
      "set:=",
      [
        "vector",
        "1",
        "5",
        "9"
      ],
      [
        "vector",
        "9",
        "1",
        "5"
      ]
    ],
    "code": "1212111110031211332121000030213021013021001332121000030210013021302101332233",
    "spider": "&#xf145;&#xf180;&#xf147;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf24a;&#xf20d;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20d;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 1168
  },
  {
    "role": "code",
    "lines": [
      "not | set:= (vector 1 5 9) (vector 1 5);"
    ],
    "preprocessed": "not | set:= (vector 1 5 9) (vector 1 5);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "set:=",
        [
          "vector",
          "1",
          "5",
          "9"
        ],
        [
          "vector",
          "1",
          "5"
        ]
      ]
    ],
    "code": "121013023121211111003121133212100003021302101302100133212100003021302101332233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf180;&#xf147;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf24a;&#xf20d;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 1169
  },
  {
    "role": "doc",
    "lines": [
      "let's go leave ourselves wide open to Russell's paradox",
      "  by using characteristic functions since it doesn't really matter",
      "  within the bounds of this message"
    ],
    "stanza": 1170
  },
  {
    "role": "code",
    "lines": [
      "element 5 | all | ? x | = 15 | + $x 10;"
    ],
    "preprocessed": "element 5 | all | ? x | = 15 | + $x 10;",
    "dt": false,
    "parse": [
      "element",
      "5",
      [
        -1,
        "all",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "=",
            "15",
            [
              -1,
              "+",
              [
                -2,
                "x"
              ],
              "10"
            ]
          ]
        ]
      ]
    ],
    "code": "1211110113021013023121111030231211003121010013023121130211113023121010312312101001302101032233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf209;&#xf248;&#xf162;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf147;&#xf24a;&#xf213;&#xf248;&#xf14e;&#xf249;&#xf16d;&#xf24a;&#xf20e;&#xf24b;",
    "stanza": 1171
  },
  {
    "role": "code",
    "lines": [
      "element 3 | all | ? x | = (* $x 3) (+ $x 6);"
    ],
    "preprocessed": "element 3 | all | ? x | = (* $x 3) (+ $x 6);",
    "dt": false,
    "parse": [
      "element",
      "3",
      [
        -1,
        "all",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "=",
            [
              "*",
              [
                -2,
                "x"
              ],
              "3"
            ],
            [
              "+",
              [
                -2,
                "x"
              ],
              "6"
            ]
          ]
        ]
      ]
    ],
    "code": "12111101130211302312111103023121100312101001302312113212100131231210100130211332121010312312101001302110332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf207;&#xf248;&#xf162;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf147;&#xf246;&#xf14d;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf14e;&#xf249;&#xf16d;&#xf24a;&#xf20a;&#xf245;&#xf24b;",
    "stanza": 1172
  },
  {
    "role": "code",
    "lines": [
      "intro set:0;"
    ],
    "preprocessed": "intro set:0;",
    "dt": false,
    "parse": [
      "intro",
      "set:0"
    ],
    "code": "12100103121211111003020332233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf180;&#xf204;&#xf24b;",
    "stanza": 1173
  },
  {
    "role": "code",
    "lines": [
      "define set:0 | vector;"
    ],
    "preprocessed": "define set:0 | vector;",
    "dt": true,
    "parse": [
      "define",
      "set:0",
      [
        -1,
        "vector"
      ]
    ],
    "code": "121101312121111100302033023121000032233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf180;&#xf204;&#xf248;&#xf154;&#xf24b;",
    "stanza": 1174
  },
  {
    "role": "code",
    "lines": [
      "element 0 $set:int:+;"
    ],
    "preprocessed": "element 0 $set:int:+;",
    "dt": false,
    "parse": [
      "element",
      "0",
      [
        -2,
        "set:int:+"
      ]
    ],
    "code": "12111101130203123121211111003121111103121010332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf204;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf24b;",
    "stanza": 1175
  },
  {
    "role": "code",
    "lines": [
      "forall | ? x | => (element $x $set:int:+) (element (+ $x 1) $set:int:+);"
    ],
    "preprocessed": "forall | ? x | => (element $x $set:int:+) (element (+ $x 1) $set:int:+);",
    "dt": false,
    "parse": [
      "forall",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "=>",
          [
            "element",
            [
              -2,
              "x"
            ],
            [
              -2,
              "set:int:+"
            ]
          ],
          [
            "element",
            [
              "+",
              [
                -2,
                "x"
              ],
              "1"
            ],
            [
              -2,
              "set:int:+"
            ]
          ]
        ]
      ]
    ],
    "code": "1210011302312110031210100130231211110103212111101131231210100131231212111110031211111031210103332121111011321210103123121010013021331231212111110031211111031210103332233",
    "spider": "&#xf157;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf145;&#xf17e;&#xf246;&#xf145;&#xf17f;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf245;&#xf246;&#xf145;&#xf17f;&#xf246;&#xf14e;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf245;&#xf24b;",
    "stanza": 1176
  },
  {
    "role": "code",
    "lines": [
      "element 1 $set:int:+;"
    ],
    "preprocessed": "element 1 $set:int:+;",
    "dt": false,
    "parse": [
      "element",
      "1",
      [
        -2,
        "set:int:+"
      ]
    ],
    "code": "12111101130213123121211111003121111103121010332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf205;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf24b;",
    "stanza": 1177
  },
  {
    "role": "code",
    "lines": [
      "element 2 $set:int:+;"
    ],
    "preprocessed": "element 2 $set:int:+;",
    "dt": false,
    "parse": [
      "element",
      "2",
      [
        -2,
        "set:int:+"
      ]
    ],
    "code": "121111011302103123121211111003121111103121010332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf24b;",
    "stanza": 1178
  },
  {
    "role": "code",
    "lines": [
      "element 3 $set:int:+;"
    ],
    "preprocessed": "element 3 $set:int:+;",
    "dt": false,
    "parse": [
      "element",
      "3",
      [
        -2,
        "set:int:+"
      ]
    ],
    "code": "121111011302113123121211111003121111103121010332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf207;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf24b;",
    "stanza": 1179
  },
  {
    "role": "code",
    "lines": [
      "element 4 $set:int:+;"
    ],
    "preprocessed": "element 4 $set:int:+;",
    "dt": false,
    "parse": [
      "element",
      "4",
      [
        -2,
        "set:int:+"
      ]
    ],
    "code": "1211110113021003123121211111003121111103121010332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf208;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf24b;",
    "stanza": 1180
  },
  {
    "role": "code",
    "lines": [
      "element 5 $set:int:+;"
    ],
    "preprocessed": "element 5 $set:int:+;",
    "dt": false,
    "parse": [
      "element",
      "5",
      [
        -2,
        "set:int:+"
      ]
    ],
    "code": "1211110113021013123121211111003121111103121010332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf209;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf24b;",
    "stanza": 1181
  },
  {
    "role": "code",
    "lines": [
      "element 6 $set:int:+;"
    ],
    "preprocessed": "element 6 $set:int:+;",
    "dt": false,
    "parse": [
      "element",
      "6",
      [
        -2,
        "set:int:+"
      ]
    ],
    "code": "1211110113021103123121211111003121111103121010332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf24b;",
    "stanza": 1182
  },
  {
    "role": "code",
    "lines": [
      "element 7 $set:int:+;"
    ],
    "preprocessed": "element 7 $set:int:+;",
    "dt": false,
    "parse": [
      "element",
      "7",
      [
        -2,
        "set:int:+"
      ]
    ],
    "code": "1211110113021113123121211111003121111103121010332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf20b;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf24b;",
    "stanza": 1183
  },
  {
    "role": "code",
    "lines": [
      "element 8 $set:int:+;"
    ],
    "preprocessed": "element 8 $set:int:+;",
    "dt": false,
    "parse": [
      "element",
      "8",
      [
        -2,
        "set:int:+"
      ]
    ],
    "code": "12111101130210003123121211111003121111103121010332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf24b;",
    "stanza": 1184
  },
  {
    "role": "code",
    "lines": [
      "element 9 $set:int:+;"
    ],
    "preprocessed": "element 9 $set:int:+;",
    "dt": false,
    "parse": [
      "element",
      "9",
      [
        -2,
        "set:int:+"
      ]
    ],
    "code": "12111101130210013123121211111003121111103121010332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf20d;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf24b;",
    "stanza": 1185
  },
  {
    "role": "code",
    "lines": [
      "define set:true:false | vector $true $false;"
    ],
    "preprocessed": "define set:true:false | vector $true $false;",
    "dt": true,
    "parse": [
      "define",
      "set:true:false",
      [
        -1,
        "vector",
        [
          -2,
          "true"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "code": "121101312121111100312131203302312100003123121312312032233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf180;&#xf145;&#xf144;&#xf248;&#xf154;&#xf249;&#xf145;&#xf249;&#xf144;&#xf24b;",
    "stanza": 1186
  },
  {
    "role": "code",
    "lines": [
      "element $true $set:true:false;"
    ],
    "preprocessed": "element $true $set:true:false;",
    "dt": false,
    "parse": [
      "element",
      [
        -2,
        "true"
      ],
      [
        -2,
        "set:true:false"
      ]
    ],
    "code": "121111011312312131231212111110031213120332233",
    "spider": "&#xf145;&#xf17f;&#xf249;&#xf145;&#xf249;&#xf145;&#xf180;&#xf145;&#xf144;&#xf24b;",
    "stanza": 1187
  },
  {
    "role": "code",
    "lines": [
      "element $false $set:true:false;"
    ],
    "preprocessed": "element $false $set:true:false;",
    "dt": false,
    "parse": [
      "element",
      [
        -2,
        "false"
      ],
      [
        -2,
        "set:true:false"
      ]
    ],
    "code": "121111011312312031231212111110031213120332233",
    "spider": "&#xf145;&#xf17f;&#xf249;&#xf144;&#xf249;&#xf145;&#xf180;&#xf145;&#xf144;&#xf24b;",
    "stanza": 1188
  },
  {
    "role": "code",
    "lines": [
      "define set:even | all | ? x | exists | ? y |",
      "  and (element $y $set:int:+) (= $x | * 2 $y);"
    ],
    "preprocessed": "define set:even | all | ? x | exists | ? y |\n  and (element $y $set:int:+) (= $x | * 2 $y);",
    "dt": true,
    "parse": [
      "define",
      "set:even",
      [
        -1,
        "all",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "exists",
            [
              -1,
              "?",
              "y",
              [
                -1,
                "and",
                [
                  "element",
                  [
                    -2,
                    "y"
                  ],
                  [
                    -2,
                    "set:int:+"
                  ]
                ],
                [
                  "=",
                  [
                    -2,
                    "x"
                  ],
                  [
                    -1,
                    "*",
                    "2",
                    [
                      -2,
                      "y"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312121111100312111011330231211110302312110031210100130231210100302312110031210000013023121103212111101131231210000013123121211111003121111103121010333212113123121010013023121001302103123121000001332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf180;&#xf17f;&#xf248;&#xf162;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf158;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14a;&#xf246;&#xf145;&#xf17f;&#xf249;&#xf145;&#xf145;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf245;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf248;&#xf14d;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf145;&#xf245;&#xf24b;",
    "stanza": 1189
  },
  {
    "role": "code",
    "lines": [
      "element 0 $set:int:+;"
    ],
    "preprocessed": "element 0 $set:int:+;",
    "dt": false,
    "parse": [
      "element",
      "0",
      [
        -2,
        "set:int:+"
      ]
    ],
    "code": "12111101130203123121211111003121111103121010332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf204;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf24b;",
    "stanza": 1190
  },
  {
    "role": "code",
    "lines": [
      "element 0 $set:even;"
    ],
    "preprocessed": "element 0 $set:even;",
    "dt": false,
    "parse": [
      "element",
      "0",
      [
        -2,
        "set:even"
      ]
    ],
    "code": "1211110113020312312121111100312111011332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf204;&#xf249;&#xf145;&#xf180;&#xf17f;&#xf24b;",
    "stanza": 1191
  },
  {
    "role": "code",
    "lines": [
      "element 1 $set:int:+;"
    ],
    "preprocessed": "element 1 $set:int:+;",
    "dt": false,
    "parse": [
      "element",
      "1",
      [
        -2,
        "set:int:+"
      ]
    ],
    "code": "12111101130213123121211111003121111103121010332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf205;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf24b;",
    "stanza": 1192
  },
  {
    "role": "code",
    "lines": [
      "not | element 1 $set:even;"
    ],
    "preprocessed": "not | element 1 $set:even;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "element",
        "1",
        [
          -2,
          "set:even"
        ]
      ]
    ],
    "code": "1210130231211110113021312312121111100312111011332233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf17f;&#xf24a;&#xf205;&#xf249;&#xf145;&#xf180;&#xf17f;&#xf24b;",
    "stanza": 1193
  },
  {
    "role": "code",
    "lines": [
      "element 2 $set:int:+;"
    ],
    "preprocessed": "element 2 $set:int:+;",
    "dt": false,
    "parse": [
      "element",
      "2",
      [
        -2,
        "set:int:+"
      ]
    ],
    "code": "121111011302103123121211111003121111103121010332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf24b;",
    "stanza": 1194
  },
  {
    "role": "code",
    "lines": [
      "element 2 $set:even;"
    ],
    "preprocessed": "element 2 $set:even;",
    "dt": false,
    "parse": [
      "element",
      "2",
      [
        -2,
        "set:even"
      ]
    ],
    "code": "12111101130210312312121111100312111011332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf180;&#xf17f;&#xf24b;",
    "stanza": 1195
  },
  {
    "role": "code",
    "lines": [
      "element 3 $set:int:+;"
    ],
    "preprocessed": "element 3 $set:int:+;",
    "dt": false,
    "parse": [
      "element",
      "3",
      [
        -2,
        "set:int:+"
      ]
    ],
    "code": "121111011302113123121211111003121111103121010332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf207;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf24b;",
    "stanza": 1196
  },
  {
    "role": "code",
    "lines": [
      "not | element 3 $set:even;"
    ],
    "preprocessed": "not | element 3 $set:even;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "element",
        "3",
        [
          -2,
          "set:even"
        ]
      ]
    ],
    "code": "12101302312111101130211312312121111100312111011332233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf17f;&#xf24a;&#xf207;&#xf249;&#xf145;&#xf180;&#xf17f;&#xf24b;",
    "stanza": 1197
  },
  {
    "role": "code",
    "lines": [
      "element 4 $set:int:+;"
    ],
    "preprocessed": "element 4 $set:int:+;",
    "dt": false,
    "parse": [
      "element",
      "4",
      [
        -2,
        "set:int:+"
      ]
    ],
    "code": "1211110113021003123121211111003121111103121010332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf208;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf24b;",
    "stanza": 1198
  },
  {
    "role": "code",
    "lines": [
      "element 4 $set:even;"
    ],
    "preprocessed": "element 4 $set:even;",
    "dt": false,
    "parse": [
      "element",
      "4",
      [
        -2,
        "set:even"
      ]
    ],
    "code": "121111011302100312312121111100312111011332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf208;&#xf249;&#xf145;&#xf180;&#xf17f;&#xf24b;",
    "stanza": 1199
  },
  {
    "role": "code",
    "lines": [
      "element 5 $set:int:+;"
    ],
    "preprocessed": "element 5 $set:int:+;",
    "dt": false,
    "parse": [
      "element",
      "5",
      [
        -2,
        "set:int:+"
      ]
    ],
    "code": "1211110113021013123121211111003121111103121010332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf209;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf24b;",
    "stanza": 1200
  },
  {
    "role": "code",
    "lines": [
      "not | element 5 $set:even;"
    ],
    "preprocessed": "not | element 5 $set:even;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "element",
        "5",
        [
          -2,
          "set:even"
        ]
      ]
    ],
    "code": "121013023121111011302101312312121111100312111011332233",
    "spider": "&#xf149;&#xf248;&#xf145;&#xf17f;&#xf24a;&#xf209;&#xf249;&#xf145;&#xf180;&#xf17f;&#xf24b;",
    "stanza": 1201
  },
  {
    "role": "code",
    "lines": [
      "element 6 $set:int:+;"
    ],
    "preprocessed": "element 6 $set:int:+;",
    "dt": false,
    "parse": [
      "element",
      "6",
      [
        -2,
        "set:int:+"
      ]
    ],
    "code": "1211110113021103123121211111003121111103121010332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf180;&#xf182;&#xf14e;&#xf24b;",
    "stanza": 1202
  },
  {
    "role": "code",
    "lines": [
      "element 6 $set:even;"
    ],
    "preprocessed": "element 6 $set:even;",
    "dt": false,
    "parse": [
      "element",
      "6",
      [
        -2,
        "set:even"
      ]
    ],
    "code": "121111011302110312312121111100312111011332233",
    "spider": "&#xf145;&#xf17f;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf180;&#xf17f;&#xf24b;",
    "stanza": 1203
  },
  {
    "role": "file",
    "lines": [
      "== COS_Graph =="
    ],
    "stanza": 1204
  },
  {
    "role": "doc",
    "lines": [
      "",
      ""
    ],
    "section_description": "introduce graph structures",
    "section_category": "MATH",
    "section_index": 30,
    "stanza": 1205
  },
  {
    "role": "code",
    "lines": [
      "intro graph:make;"
    ],
    "preprocessed": "intro graph:make;",
    "dt": false,
    "parse": [
      "intro",
      "graph:make"
    ],
    "code": "12100103121211111013121111110332233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf181;&#xf145;&#xf182;&#xf24b;",
    "stanza": 1206
  },
  {
    "role": "code",
    "lines": [
      "define graph:make | lambda (x:graph:1 x:graph:2) | pair $x:graph:1 $x:graph:2;"
    ],
    "preprocessed": "define graph:make | lambda (x:graph:1 x:graph:2) | pair $x:graph:1 $x:graph:2;",
    "dt": true,
    "parse": [
      "define",
      "graph:make",
      [
        -1,
        "lambda",
        [
          "x:graph:1",
          "x:graph:2"
        ],
        [
          -1,
          "pair",
          [
            -2,
            "x:graph:1"
          ],
          [
            -2,
            "x:graph:2"
          ]
        ]
      ]
    ],
    "code": "1211013121211111013121111110330231211010321212101001312111110130213312121010013121111101302103330231210101103123121210100131211111013021331231212101001312111110130210332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf181;&#xf145;&#xf182;&#xf248;&#xf15e;&#xf246;&#xf16d;&#xf145;&#xf181;&#xf205;&#xf16d;&#xf145;&#xf181;&#xf206;&#xf245;&#xf248;&#xf145;&#xf15a;&#xf249;&#xf16d;&#xf145;&#xf181;&#xf205;&#xf249;&#xf16d;&#xf145;&#xf181;&#xf206;&#xf24b;",
    "stanza": 1207
  },
  {
    "role": "code",
    "lines": [
      "define demo:graph | graph:make",
      "  (vector 1 2 3 4)",
      "  (vector (pair 1 2) (pair 2 3) (pair 1 4));"
    ],
    "preprocessed": "define demo:graph | graph:make\n  (vector 1 2 3 4)\n  (vector (pair 1 2) (pair 2 3) (pair 1 4));",
    "dt": true,
    "parse": [
      "define",
      "demo:graph",
      [
        -1,
        "graph:make",
        [
          "vector",
          "1",
          "2",
          "3",
          "4"
        ],
        [
          "vector",
          [
            "pair",
            "1",
            "2"
          ],
          [
            "pair",
            "2",
            "3"
          ],
          [
            "pair",
            "1",
            "4"
          ]
        ]
      ]
    ],
    "code": "12110131212100100312111110133023121211111013121111110332121000030213021030211302100332121000032121010110302130210332121010110302103021133212101011030213021003332233",
    "spider": "&#xf151;&#xf24a;&#xf168;&#xf145;&#xf181;&#xf248;&#xf145;&#xf181;&#xf145;&#xf182;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf24a;&#xf208;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1208
  },
  {
    "role": "code",
    "lines": [
      "intro exists:graph:2;"
    ],
    "preprocessed": "intro exists:graph:2;",
    "dt": false,
    "parse": [
      "intro",
      "exists:graph:2"
    ],
    "code": "12100103121210100312111110130210332233",
    "spider": "&#xf156;&#xf24a;&#xf158;&#xf145;&#xf181;&#xf206;&#xf24b;",
    "stanza": 1209
  },
  {
    "role": "code",
    "lines": [
      "define exists:graph:2 | lambda (x:graph y:graph:1 z:graph:1) |",
      "  exists | ? n |",
      "    if (or (< $n 0) (>= $n | list-length | list-ref $x:graph 1)) $false |",
      "    list= (list-ref (list-ref $x:graph 1) $n) (pair $y:graph:1 $z:graph:1);"
    ],
    "preprocessed": "define exists:graph:2 | lambda (x:graph y:graph:1 z:graph:1) |\n  exists | ? n |\n    if (or (< $n 0) (>= $n | list-length | list-ref $x:graph 1)) $false |\n    list= (list-ref (list-ref $x:graph 1) $n) (pair $y:graph:1 $z:graph:1);",
    "dt": true,
    "parse": [
      "define",
      "exists:graph:2",
      [
        -1,
        "lambda",
        [
          "x:graph",
          "y:graph:1",
          "z:graph:1"
        ],
        [
          -1,
          "exists",
          [
            -1,
            "?",
            "n",
            [
              -1,
              "if",
              [
                "or",
                [
                  "<",
                  [
                    -2,
                    "n"
                  ],
                  "0"
                ],
                [
                  ">=",
                  [
                    -2,
                    "n"
                  ],
                  [
                    -1,
                    "list-length",
                    [
                      -1,
                      "list-ref",
                      [
                        -2,
                        "x:graph"
                      ],
                      "1"
                    ]
                  ]
                ]
              ],
              [
                -2,
                "false"
              ],
              [
                -1,
                "list=",
                [
                  "list-ref",
                  [
                    "list-ref",
                    [
                      -2,
                      "x:graph"
                    ],
                    "1"
                  ],
                  [
                    -2,
                    "n"
                  ]
                ],
                [
                  "pair",
                  [
                    -2,
                    "y:graph:1"
                  ],
                  [
                    -2,
                    "z:graph:1"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131212101003121111101302103302312110103212121010013121111101331212100000131211111013021331212100001031211111013021333023121010030231211003121001110302312111132121113212103123121001110302033212100101131231210011103023121010010302312101001131231212101001312111110133021333123120302312101010032121010011321210100113123121210100131211111013302133123121001110332121010110312312121000001312111110130213312312121000010312111110130213332233",
    "spider": "&#xf151;&#xf24a;&#xf158;&#xf145;&#xf181;&#xf206;&#xf248;&#xf15e;&#xf246;&#xf16d;&#xf145;&#xf181;&#xf145;&#xf145;&#xf145;&#xf181;&#xf205;&#xf145;&#xf146;&#xf145;&#xf181;&#xf205;&#xf245;&#xf248;&#xf158;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf152;&#xf248;&#xf153;&#xf246;&#xf14b;&#xf246;&#xf146;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf145;&#xf14f;&#xf249;&#xf145;&#xf152;&#xf248;&#xf145;&#xf156;&#xf248;&#xf145;&#xf157;&#xf249;&#xf16d;&#xf145;&#xf181;&#xf205;&#xf245;&#xf245;&#xf249;&#xf144;&#xf248;&#xf145;&#xf158;&#xf246;&#xf145;&#xf157;&#xf246;&#xf145;&#xf157;&#xf249;&#xf16d;&#xf145;&#xf181;&#xf205;&#xf245;&#xf249;&#xf145;&#xf152;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf249;&#xf145;&#xf145;&#xf145;&#xf181;&#xf205;&#xf249;&#xf145;&#xf146;&#xf145;&#xf181;&#xf205;&#xf245;&#xf24b;",
    "stanza": 1210
  },
  {
    "role": "code",
    "lines": [
      "exists:graph:2 $demo:graph 1 2;"
    ],
    "preprocessed": "exists:graph:2 $demo:graph 1 2;",
    "dt": false,
    "parse": [
      "exists:graph:2",
      [
        -2,
        "demo:graph"
      ],
      "1",
      "2"
    ],
    "code": "1212101003121111101302103312312121001003121111101330213021032233",
    "spider": "&#xf158;&#xf145;&#xf181;&#xf206;&#xf249;&#xf168;&#xf145;&#xf181;&#xf205;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1211
  },
  {
    "role": "code",
    "lines": [
      "not | exists:graph:2 $demo:graph 1 3;"
    ],
    "preprocessed": "not | exists:graph:2 $demo:graph 1 3;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "exists:graph:2",
        [
          -2,
          "demo:graph"
        ],
        "1",
        "3"
      ]
    ],
    "code": "1210130231212101003121111101302103312312121001003121111101330213021132233",
    "spider": "&#xf149;&#xf248;&#xf158;&#xf145;&#xf181;&#xf206;&#xf249;&#xf168;&#xf145;&#xf181;&#xf205;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 1212
  },
  {
    "role": "code",
    "lines": [
      "not | exists:graph:2 $demo:graph 2 4;"
    ],
    "preprocessed": "not | exists:graph:2 $demo:graph 2 4;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "exists:graph:2",
        [
          -2,
          "demo:graph"
        ],
        "2",
        "4"
      ]
    ],
    "code": "121013023121210100312111110130210331231212100100312111110133021030210032233",
    "spider": "&#xf149;&#xf248;&#xf158;&#xf145;&#xf181;&#xf206;&#xf249;&#xf168;&#xf145;&#xf181;&#xf206;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 1213
  },
  {
    "role": "code",
    "lines": [
      "exists:graph:2 $demo:graph 1 4;"
    ],
    "preprocessed": "exists:graph:2 $demo:graph 1 4;",
    "dt": false,
    "parse": [
      "exists:graph:2",
      [
        -2,
        "demo:graph"
      ],
      "1",
      "4"
    ],
    "code": "12121010031211111013021033123121210010031211111013302130210032233",
    "spider": "&#xf158;&#xf145;&#xf181;&#xf206;&#xf249;&#xf168;&#xf145;&#xf181;&#xf205;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 1214
  },
  {
    "role": "code",
    "lines": [
      "intro exists:graph:2:list;"
    ],
    "preprocessed": "intro exists:graph:2:list;",
    "dt": false,
    "parse": [
      "intro",
      "exists:graph:2:list"
    ],
    "code": "121001031212101003121111101302103121001101332233",
    "spider": "&#xf156;&#xf24a;&#xf158;&#xf145;&#xf181;&#xf206;&#xf145;&#xf151;&#xf24b;",
    "stanza": 1215
  },
  {
    "role": "code",
    "lines": [
      "define exists:graph:2:list | lambda (x:graph y:graph:1 z:graph:1) |",
      "  if (= $y:graph:1 $z:graph:1) $true |",
      "  if (exists:graph:2 $x:graph $y:graph:1 $z:graph:1) $true |",
      "  exists | ? n:graph:1 |",
      "    if (not | exists:graph:2 $x:graph $y:graph:1 $n:graph:1) $false |",
      "    exists:graph:2:list $x:graph $n:graph:1 $z:graph:1;"
    ],
    "preprocessed": "define exists:graph:2:list | lambda (x:graph y:graph:1 z:graph:1) |\n  if (= $y:graph:1 $z:graph:1) $true |\n  if (exists:graph:2 $x:graph $y:graph:1 $z:graph:1) $true |\n  exists | ? n:graph:1 |\n    if (not | exists:graph:2 $x:graph $y:graph:1 $n:graph:1) $false |\n    exists:graph:2:list $x:graph $n:graph:1 $z:graph:1;",
    "dt": true,
    "parse": [
      "define",
      "exists:graph:2:list",
      [
        -1,
        "lambda",
        [
          "x:graph",
          "y:graph:1",
          "z:graph:1"
        ],
        [
          -1,
          "if",
          [
            "=",
            [
              -2,
              "y:graph:1"
            ],
            [
              -2,
              "z:graph:1"
            ]
          ],
          [
            -2,
            "true"
          ],
          [
            -1,
            "if",
            [
              "exists:graph:2",
              [
                -2,
                "x:graph"
              ],
              [
                -2,
                "y:graph:1"
              ],
              [
                -2,
                "z:graph:1"
              ]
            ],
            [
              -2,
              "true"
            ],
            [
              -1,
              "exists",
              [
                -1,
                "?",
                "n:graph:1",
                [
                  -1,
                  "if",
                  [
                    "not",
                    [
                      -1,
                      "exists:graph:2",
                      [
                        -2,
                        "x:graph"
                      ],
                      [
                        -2,
                        "y:graph:1"
                      ],
                      [
                        -2,
                        "n:graph:1"
                      ]
                    ]
                  ],
                  [
                    -2,
                    "false"
                  ],
                  [
                    -1,
                    "exists:graph:2:list",
                    [
                      -2,
                      "x:graph"
                    ],
                    [
                      -2,
                      "n:graph:1"
                    ],
                    [
                      -2,
                      "z:graph:1"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf158;&#xf145;&#xf181;&#xf206;&#xf145;&#xf151;&#xf248;&#xf15e;&#xf246;&#xf16d;&#xf145;&#xf181;&#xf145;&#xf145;&#xf145;&#xf181;&#xf205;&#xf145;&#xf146;&#xf145;&#xf181;&#xf205;&#xf245;&#xf248;&#xf153;&#xf246;&#xf147;&#xf249;&#xf145;&#xf145;&#xf145;&#xf181;&#xf205;&#xf249;&#xf145;&#xf146;&#xf145;&#xf181;&#xf205;&#xf245;&#xf249;&#xf145;&#xf248;&#xf153;&#xf246;&#xf158;&#xf145;&#xf181;&#xf206;&#xf249;&#xf16d;&#xf145;&#xf181;&#xf249;&#xf145;&#xf145;&#xf145;&#xf181;&#xf205;&#xf249;&#xf145;&#xf146;&#xf145;&#xf181;&#xf205;&#xf245;&#xf249;&#xf145;&#xf248;&#xf158;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf152;&#xf145;&#xf181;&#xf205;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf158;&#xf145;&#xf181;&#xf206;&#xf249;&#xf16d;&#xf145;&#xf181;&#xf249;&#xf145;&#xf145;&#xf145;&#xf181;&#xf205;&#xf249;&#xf145;&#xf152;&#xf145;&#xf181;&#xf205;&#xf245;&#xf249;&#xf144;&#xf248;&#xf158;&#xf145;&#xf181;&#xf206;&#xf145;&#xf151;&#xf249;&#xf16d;&#xf145;&#xf181;&#xf249;&#xf145;&#xf152;&#xf145;&#xf181;&#xf205;&#xf249;&#xf145;&#xf146;&#xf145;&#xf181;&#xf205;&#xf24b;",
    "stanza": 1216
  },
  {
    "role": "code",
    "lines": [
      "exists:graph:2:list $demo:graph 1 2;"
    ],
    "preprocessed": "exists:graph:2:list $demo:graph 1 2;",
    "dt": false,
    "parse": [
      "exists:graph:2:list",
      [
        -2,
        "demo:graph"
      ],
      "1",
      "2"
    ],
    "code": "12121010031211111013021031210011013312312121001003121111101330213021032233",
    "spider": "&#xf158;&#xf145;&#xf181;&#xf206;&#xf145;&#xf151;&#xf249;&#xf168;&#xf145;&#xf181;&#xf205;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1217
  },
  {
    "role": "code",
    "lines": [
      "exists:graph:2:list $demo:graph 1 3;"
    ],
    "preprocessed": "exists:graph:2:list $demo:graph 1 3;",
    "dt": false,
    "parse": [
      "exists:graph:2:list",
      [
        -2,
        "demo:graph"
      ],
      "1",
      "3"
    ],
    "code": "12121010031211111013021031210011013312312121001003121111101330213021132233",
    "spider": "&#xf158;&#xf145;&#xf181;&#xf206;&#xf145;&#xf151;&#xf249;&#xf168;&#xf145;&#xf181;&#xf205;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 1218
  },
  {
    "role": "code",
    "lines": [
      "not | exists:graph:2:list $demo:graph 2 4;"
    ],
    "preprocessed": "not | exists:graph:2:list $demo:graph 2 4;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "exists:graph:2:list",
        [
          -2,
          "demo:graph"
        ],
        "2",
        "4"
      ]
    ],
    "code": "1210130231212101003121111101302103121001101331231212100100312111110133021030210032233",
    "spider": "&#xf149;&#xf248;&#xf158;&#xf145;&#xf181;&#xf206;&#xf145;&#xf151;&#xf249;&#xf168;&#xf145;&#xf181;&#xf206;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 1219
  },
  {
    "role": "file",
    "lines": [
      "== COS_Begin =="
    ],
    "stanza": 1220
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "show how to execute a sequence of instructions",
    "section_category": "MATH",
    "section_index": 31,
    "stanza": 1221
  },
  {
    "role": "code",
    "lines": [
      "intro begin;"
    ],
    "preprocessed": "intro begin;",
    "dt": false,
    "parse": [
      "intro",
      "begin"
    ],
    "code": "1210010312101101132233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf15f;&#xf24b;",
    "stanza": 1222
  },
  {
    "role": "code",
    "lines": [
      "define translate:begin:prev $translate;"
    ],
    "preprocessed": "define translate:begin:prev $translate;",
    "dt": true,
    "parse": [
      "define",
      "translate:begin:prev",
      [
        -2,
        "translate"
      ]
    ],
    "code": "12110131212110013121011011312111011133123121100132233",
    "spider": "&#xf151;&#xf24a;&#xf15d;&#xf145;&#xf15f;&#xf145;&#xf17b;&#xf249;&#xf15d;&#xf24b;",
    "stanza": 1223
  },
  {
    "role": "code",
    "lines": [
      "define translate | let ((prev $translate:begin:prev)) | ? x |",
      "  if (not | function? $x) (prev $x) |",
      "  if (not | = (head $x) begin) (prev $x) |",
      "  translate | vector (vector ? x (vector last (vector x))) (prepend vector | tail $x);"
    ],
    "preprocessed": "define translate | let ((prev $translate:begin:prev)) | ? x |\n  if (not | function? $x) (prev $x) |\n  if (not | = (head $x) begin) (prev $x) |\n  translate | vector (vector ? x (vector last (vector x))) (prepend vector | tail $x);",
    "dt": true,
    "parse": [
      "define",
      "translate",
      [
        -1,
        "let",
        [
          [
            "prev",
            [
              -2,
              "translate:begin:prev"
            ]
          ]
        ],
        [
          -1,
          "?",
          "x",
          [
            -1,
            "if",
            [
              "not",
              [
                -1,
                "function?",
                [
                  -2,
                  "x"
                ]
              ]
            ],
            [
              "prev",
              [
                -2,
                "x"
              ]
            ],
            [
              -1,
              "if",
              [
                "not",
                [
                  -1,
                  "=",
                  [
                    "head",
                    [
                      -2,
                      "x"
                    ]
                  ],
                  "begin"
                ]
              ],
              [
                "prev",
                [
                  -2,
                  "x"
                ]
              ],
              [
                -1,
                "translate",
                [
                  -1,
                  "vector",
                  [
                    "vector",
                    "?",
                    "x",
                    [
                      "vector",
                      "last",
                      [
                        "vector",
                        "x"
                      ]
                    ]
                  ],
                  [
                    "prepend",
                    "vector",
                    [
                      -1,
                      "tail",
                      [
                        -2,
                        "x"
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312110013023121110100322121110111312312121100131210110113121110111333302312110031210100130231211113212101302312101100312312101001332121110111312312101001330231211113212101302312113212101000031231210100133121011011332121110111312312101001330231211001302312100003212100003121100312101001321210000312101110132121000031210100133332121010101312100003023121010001312312101001332233",
    "spider": "&#xf151;&#xf24a;&#xf15d;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf145;&#xf17b;&#xf249;&#xf15d;&#xf145;&#xf15f;&#xf145;&#xf17b;&#xf245;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf170;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf17b;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf147;&#xf246;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf245;&#xf145;&#xf15f;&#xf245;&#xf246;&#xf145;&#xf17b;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf15d;&#xf248;&#xf154;&#xf246;&#xf154;&#xf24a;&#xf150;&#xf24a;&#xf16d;&#xf246;&#xf154;&#xf24a;&#xf145;&#xf161;&#xf246;&#xf154;&#xf24a;&#xf16d;&#xf245;&#xf245;&#xf245;&#xf246;&#xf145;&#xf159;&#xf24a;&#xf154;&#xf248;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf245;&#xf24b;",
    "stanza": 1224
  },
  {
    "role": "code",
    "lines": [
      "= 4 | begin 1 7 2 4;"
    ],
    "preprocessed": "= 4 | begin 1 7 2 4;",
    "dt": false,
    "parse": [
      "=",
      "4",
      [
        -1,
        "begin",
        "1",
        "7",
        "2",
        "4"
      ]
    ],
    "code": "1211302100302312101101130213021113021030210032233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf145;&#xf15f;&#xf24a;&#xf205;&#xf24a;&#xf20b;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 1225
  },
  {
    "role": "code",
    "lines": [
      "= 6 | begin (set! $demo:make-cell:x 88) (set! $demo:make-cell:x 6) (get! $demo:make-cell:x);"
    ],
    "preprocessed": "= 6 | begin (set! $demo:make-cell:x 88) (set! $demo:make-cell:x 6) (get! $demo:make-cell:x);",
    "dt": true,
    "parse": [
      "=",
      "6",
      [
        -1,
        "begin",
        [
          "set!",
          [
            -2,
            "demo:make-cell:x"
          ],
          "88"
        ],
        [
          "set!",
          [
            -2,
            "demo:make-cell:x"
          ],
          "6"
        ],
        [
          "get!",
          [
            -2,
            "demo:make-cell:x"
          ]
        ]
      ]
    ],
    "code": "12113021103023121011011321211100312312121001003121101131210100133021011000332121110031231212100100312110113121010013302110332121110131231212100100312110113121010013332233",
    "spider": "&#xf147;&#xf24a;&#xf20a;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf160;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf205;&#xf21c;&#xf245;&#xf246;&#xf160;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf20a;&#xf245;&#xf246;&#xf161;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf245;&#xf24b;",
    "stanza": 1226
  },
  {
    "role": "code",
    "lines": [
      "= 88 | begin (set! $demo:make-cell:y 88) (set! $demo:make-cell:x 6) (get! $demo:make-cell:y);"
    ],
    "preprocessed": "= 88 | begin (set! $demo:make-cell:y 88) (set! $demo:make-cell:x 6) (get! $demo:make-cell:y);",
    "dt": true,
    "parse": [
      "=",
      "88",
      [
        -1,
        "begin",
        [
          "set!",
          [
            -2,
            "demo:make-cell:y"
          ],
          "88"
        ],
        [
          "set!",
          [
            -2,
            "demo:make-cell:x"
          ],
          "6"
        ],
        [
          "get!",
          [
            -2,
            "demo:make-cell:y"
          ]
        ]
      ]
    ],
    "code": "12113021011000302312101101132121110031231212100100312110113121000001330210110003321211100312312121001003121101131210100133021103321211101312312121001003121101131210000013332233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf21c;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf160;&#xf249;&#xf168;&#xf15f;&#xf145;&#xf145;&#xf205;&#xf21c;&#xf245;&#xf246;&#xf160;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf20a;&#xf245;&#xf246;&#xf161;&#xf249;&#xf168;&#xf15f;&#xf145;&#xf145;&#xf245;&#xf24b;",
    "stanza": 1227
  },
  {
    "role": "code",
    "lines": [
      "= 4 | begin (set! $demo:make-cell:x 88) (set! $demo:make-cell:x 6) (get! $demo:make-cell:x) 4;"
    ],
    "preprocessed": "= 4 | begin (set! $demo:make-cell:x 88) (set! $demo:make-cell:x 6) (get! $demo:make-cell:x) 4;",
    "dt": true,
    "parse": [
      "=",
      "4",
      [
        -1,
        "begin",
        [
          "set!",
          [
            -2,
            "demo:make-cell:x"
          ],
          "88"
        ],
        [
          "set!",
          [
            -2,
            "demo:make-cell:x"
          ],
          "6"
        ],
        [
          "get!",
          [
            -2,
            "demo:make-cell:x"
          ]
        ],
        "4"
      ]
    ],
    "code": "12113021003023121011011321211100312312121001003121101131210100133021011000332121110031231212100100312110113121010013302110332121110131231212100100312110113121010013330210032233",
    "spider": "&#xf147;&#xf24a;&#xf208;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf160;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf205;&#xf21c;&#xf245;&#xf246;&#xf160;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf20a;&#xf245;&#xf246;&#xf161;&#xf249;&#xf168;&#xf15f;&#xf16d;&#xf245;&#xf208;&#xf24b;",
    "stanza": 1228
  },
  {
    "role": "file",
    "lines": [
      "== COS_Hash =="
    ],
    "stanza": 1229
  },
  {
    "role": "comment",
    "lines": [
      "# this section needs a LOT more examples :-)",
      "# note that at the time of writing (h 1 2) is same as ((h) 1 2)"
    ],
    "section_description": "introduce environment/hashmap structure",
    "section_category": "MATH",
    "section_index": 32,
    "stanza": 1230
  },
  {
    "role": "code",
    "lines": [
      "intro hash-add;"
    ],
    "preprocessed": "intro hash-add;",
    "dt": false,
    "parse": [
      "intro",
      "hash-add"
    ],
    "code": "1210010312111111132233",
    "spider": "&#xf156;&#xf24a;&#xf145;&#xf183;&#xf24b;",
    "stanza": 1231
  },
  {
    "role": "code",
    "lines": [
      "define hash-add | lambda (x:hash x y z) (if (equal $z $x) $y (x:hash $z));"
    ],
    "preprocessed": "define hash-add | lambda (x:hash x y z) (if (equal $z $x) $y (x:hash $z));",
    "dt": true,
    "parse": [
      "define",
      "hash-add",
      [
        -1,
        "lambda",
        [
          "x:hash",
          "x",
          "y",
          "z"
        ],
        [
          "if",
          [
            "equal",
            [
              -2,
              "z"
            ],
            [
              -2,
              "x"
            ]
          ],
          [
            -2,
            "y"
          ],
          [
            "x:hash",
            [
              -2,
              "z"
            ]
          ]
        ]
      ]
    ],
    "code": "121101312111111130231211010321212101001312100000003312101001312100000131210000103321211113212100031231210000103123121010013312312100000132121210100131210000000331231210000103332233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf183;&#xf248;&#xf15e;&#xf246;&#xf16d;&#xf146;&#xf144;&#xf16d;&#xf24a;&#xf145;&#xf145;&#xf24a;&#xf145;&#xf146;&#xf245;&#xf246;&#xf153;&#xf246;&#xf14c;&#xf249;&#xf145;&#xf146;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf145;&#xf145;&#xf246;&#xf16d;&#xf146;&#xf144;&#xf249;&#xf145;&#xf146;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1232
  },
  {
    "role": "code",
    "lines": [
      "intro hash-ref;"
    ],
    "preprocessed": "intro hash-ref;",
    "dt": false,
    "parse": [
      "intro",
      "hash-ref"
    ],
    "code": "12100103121000000132233",
    "spider": "&#xf156;&#xf24a;&#xf146;&#xf145;&#xf24b;",
    "stanza": 1233
  },
  {
    "role": "code",
    "lines": [
      "define hash-ref | lambda (x:hash x) (x:hash $x);"
    ],
    "preprocessed": "define hash-ref | lambda (x:hash x) (x:hash $x);",
    "dt": true,
    "parse": [
      "define",
      "hash-ref",
      [
        -1,
        "lambda",
        [
          "x:hash",
          "x"
        ],
        [
          "x:hash",
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "code": "12110131210000001302312110103212121010013121000000033121010013321212101001312100000003312312101001332233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf145;&#xf248;&#xf15e;&#xf246;&#xf16d;&#xf146;&#xf144;&#xf16d;&#xf245;&#xf246;&#xf16d;&#xf146;&#xf144;&#xf249;&#xf16d;&#xf245;&#xf24b;",
    "stanza": 1234
  },
  {
    "role": "code",
    "lines": [
      "intro hash-null;"
    ],
    "preprocessed": "intro hash-null;",
    "dt": false,
    "parse": [
      "intro",
      "hash-null"
    ],
    "code": "12100103121000001032233",
    "spider": "&#xf156;&#xf24a;&#xf146;&#xf146;&#xf24b;",
    "stanza": 1235
  },
  {
    "role": "code",
    "lines": [
      "define hash-null | ? x $undefined;"
    ],
    "preprocessed": "define hash-null | ? x $undefined;",
    "dt": true,
    "parse": [
      "define",
      "hash-null",
      [
        -1,
        "?",
        "x",
        [
          -2,
          "undefined"
        ]
      ]
    ],
    "code": "12110131210000010302312110031210100131231210000032233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf146;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf164;&#xf24b;",
    "stanza": 1236
  },
  {
    "role": "code",
    "lines": [
      "intro hash-default;"
    ],
    "preprocessed": "intro hash-default;",
    "dt": false,
    "parse": [
      "intro",
      "hash-default"
    ],
    "code": "12100103121000001132233",
    "spider": "&#xf156;&#xf24a;&#xf146;&#xf147;&#xf24b;",
    "stanza": 1237
  },
  {
    "role": "code",
    "lines": [
      "define hash-default | ? default | ? x $default;"
    ],
    "preprocessed": "define hash-default | ? default | ? x $default;",
    "dt": true,
    "parse": [
      "define",
      "hash-default",
      [
        -1,
        "?",
        "default",
        [
          -1,
          "?",
          "x",
          [
            -2,
            "default"
          ]
        ]
      ]
    ],
    "code": "1211013121000001130231211003121000010030231211003121010013123121000010032233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf147;&#xf248;&#xf150;&#xf24a;&#xf146;&#xf148;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf146;&#xf148;&#xf24b;",
    "stanza": 1238
  },
  {
    "role": "code",
    "lines": [
      "define demo:hash | hash-add (hash-add $hash-null 3 2) 4 9;"
    ],
    "preprocessed": "define demo:hash | hash-add (hash-add $hash-null 3 2) 4 9;",
    "dt": true,
    "parse": [
      "define",
      "demo:hash",
      [
        -1,
        "hash-add",
        [
          "hash-add",
          [
            -2,
            "hash-null"
          ],
          "3",
          "2"
        ],
        "4",
        "9"
      ]
    ],
    "code": "121101312121001003121000000033023121111111321211111113123121000001030211302103302100302100132233",
    "spider": "&#xf151;&#xf24a;&#xf168;&#xf146;&#xf144;&#xf248;&#xf145;&#xf183;&#xf246;&#xf145;&#xf183;&#xf249;&#xf146;&#xf146;&#xf24a;&#xf207;&#xf24a;&#xf206;&#xf245;&#xf208;&#xf24a;&#xf20d;&#xf24b;",
    "stanza": 1239
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref $demo:hash 4) 9;"
    ],
    "preprocessed": "= (hash-ref $demo:hash 4) 9;",
    "dt": false,
    "parse": [
      "=",
      [
        "hash-ref",
        [
          -2,
          "demo:hash"
        ],
        "4"
      ],
      "9"
    ],
    "code": "1211321210000001312312121001003121000000033021003302100132233",
    "spider": "&#xf147;&#xf246;&#xf146;&#xf145;&#xf249;&#xf168;&#xf146;&#xf144;&#xf208;&#xf245;&#xf20d;&#xf24b;",
    "stanza": 1240
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref $demo:hash 3) 2;"
    ],
    "preprocessed": "= (hash-ref $demo:hash 3) 2;",
    "dt": false,
    "parse": [
      "=",
      [
        "hash-ref",
        [
          -2,
          "demo:hash"
        ],
        "3"
      ],
      "2"
    ],
    "code": "1211321210000001312312121001003121000000033021133021032233",
    "spider": "&#xf147;&#xf246;&#xf146;&#xf145;&#xf249;&#xf168;&#xf146;&#xf144;&#xf207;&#xf245;&#xf206;&#xf24b;",
    "stanza": 1241
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref $demo:hash 8) $undefined;"
    ],
    "preprocessed": "= (hash-ref $demo:hash 8) $undefined;",
    "dt": false,
    "parse": [
      "=",
      [
        "hash-ref",
        [
          -2,
          "demo:hash"
        ],
        "8"
      ],
      [
        -2,
        "undefined"
      ]
    ],
    "code": "1211321210000001312312121001003121000000033021000331231210000032233",
    "spider": "&#xf147;&#xf246;&#xf146;&#xf145;&#xf249;&#xf168;&#xf146;&#xf144;&#xf20c;&#xf245;&#xf249;&#xf164;&#xf24b;",
    "stanza": 1242
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref $demo:hash 15) $undefined;"
    ],
    "preprocessed": "= (hash-ref $demo:hash 15) $undefined;",
    "dt": false,
    "parse": [
      "=",
      [
        "hash-ref",
        [
          -2,
          "demo:hash"
        ],
        "15"
      ],
      [
        -2,
        "undefined"
      ]
    ],
    "code": "1211321210000001312312121001003121000000033021111331231210000032233",
    "spider": "&#xf147;&#xf246;&#xf146;&#xf145;&#xf249;&#xf168;&#xf146;&#xf144;&#xf213;&#xf245;&#xf249;&#xf164;&#xf24b;",
    "stanza": 1243
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref (hash-add $demo:hash 15 33) 15) 33;"
    ],
    "preprocessed": "= (hash-ref (hash-add $demo:hash 15 33) 15) 33;",
    "dt": false,
    "parse": [
      "=",
      [
        "hash-ref",
        [
          "hash-add",
          [
            -2,
            "demo:hash"
          ],
          "15",
          "33"
        ],
        "15"
      ],
      "33"
    ],
    "code": "12113212100000013212111111131231212100100312100000003302111130210000133021111330210000132233",
    "spider": "&#xf147;&#xf246;&#xf146;&#xf145;&#xf246;&#xf145;&#xf183;&#xf249;&#xf168;&#xf146;&#xf144;&#xf213;&#xf24a;&#xf225;&#xf245;&#xf213;&#xf245;&#xf225;&#xf24b;",
    "stanza": 1244
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref $demo:hash 15) $undefined;"
    ],
    "preprocessed": "= (hash-ref $demo:hash 15) $undefined;",
    "dt": false,
    "parse": [
      "=",
      [
        "hash-ref",
        [
          -2,
          "demo:hash"
        ],
        "15"
      ],
      [
        -2,
        "undefined"
      ]
    ],
    "code": "1211321210000001312312121001003121000000033021111331231210000032233",
    "spider": "&#xf147;&#xf246;&#xf146;&#xf145;&#xf249;&#xf168;&#xf146;&#xf144;&#xf213;&#xf245;&#xf249;&#xf164;&#xf24b;",
    "stanza": 1245
  },
  {
    "role": "code",
    "lines": [
      "intro make-hash;"
    ],
    "preprocessed": "intro make-hash;",
    "dt": false,
    "parse": [
      "intro",
      "make-hash"
    ],
    "code": "12100103121000010132233",
    "spider": "&#xf156;&#xf24a;&#xf146;&#xf149;&#xf24b;",
    "stanza": 1246
  },
  {
    "role": "code",
    "lines": [
      "define make-hash | ? x | if (list= $x (vector)) $hash-null (hash-add (make-hash (tail $x)) (first | head $x) (second | head $x));"
    ],
    "preprocessed": "define make-hash | ? x | if (list= $x (vector)) $hash-null (hash-add (make-hash (tail $x)) (first | head $x) (second | head $x));",
    "dt": true,
    "parse": [
      "define",
      "make-hash",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "list=",
            [
              -2,
              "x"
            ],
            [
              "vector"
            ]
          ],
          [
            -2,
            "hash-null"
          ],
          [
            "hash-add",
            [
              "make-hash",
              [
                "tail",
                [
                  -2,
                  "x"
                ]
              ]
            ],
            [
              "first",
              [
                -1,
                "head",
                [
                  -2,
                  "x"
                ]
              ]
            ],
            [
              "second",
              [
                -1,
                "head",
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312100001013023121100312101001302312111132121010100312312101001321210000333123121000001032121111111321210000101321210100013123121010013332121010111302312101000031231210100133212101100030231210100003123121010013332233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf149;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf145;&#xf158;&#xf249;&#xf16d;&#xf246;&#xf154;&#xf245;&#xf245;&#xf249;&#xf146;&#xf146;&#xf246;&#xf145;&#xf183;&#xf246;&#xf146;&#xf149;&#xf246;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf245;&#xf245;&#xf246;&#xf145;&#xf15b;&#xf248;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf15c;&#xf248;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1247
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref (make-hash | vector (pair 3 10) (pair 2 20) (pair 1 30)) 3) 10;"
    ],
    "preprocessed": "= (hash-ref (make-hash | vector (pair 3 10) (pair 2 20) (pair 1 30)) 3) 10;",
    "dt": false,
    "parse": [
      "=",
      [
        "hash-ref",
        [
          "make-hash",
          [
            -1,
            "vector",
            [
              "pair",
              "3",
              "10"
            ],
            [
              "pair",
              "2",
              "20"
            ],
            [
              "pair",
              "1",
              "30"
            ]
          ]
        ],
        "3"
      ],
      "10"
    ],
    "code": "12113212100000013212100001013023121000032121010110302113021010332121010110302103021010033212101011030213021111033302113302101032233",
    "spider": "&#xf147;&#xf246;&#xf146;&#xf145;&#xf246;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf207;&#xf24a;&#xf20e;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf206;&#xf24a;&#xf218;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf24a;&#xf222;&#xf245;&#xf245;&#xf207;&#xf245;&#xf20e;&#xf24b;",
    "stanza": 1248
  },
  {
    "role": "code",
    "lines": [
      "= (hash-ref (make-hash | vector (pair 3 10) (pair 2 20) (pair 1 30)) 1) 30;"
    ],
    "preprocessed": "= (hash-ref (make-hash | vector (pair 3 10) (pair 2 20) (pair 1 30)) 1) 30;",
    "dt": false,
    "parse": [
      "=",
      [
        "hash-ref",
        [
          "make-hash",
          [
            -1,
            "vector",
            [
              "pair",
              "3",
              "10"
            ],
            [
              "pair",
              "2",
              "20"
            ],
            [
              "pair",
              "1",
              "30"
            ]
          ]
        ],
        "1"
      ],
      "30"
    ],
    "code": "12113212100000013212100001013023121000032121010110302113021010332121010110302103021010033212101011030213021111033302133021111032233",
    "spider": "&#xf147;&#xf246;&#xf146;&#xf145;&#xf246;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf207;&#xf24a;&#xf20e;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf206;&#xf24a;&#xf218;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf24a;&#xf222;&#xf245;&#xf245;&#xf205;&#xf245;&#xf222;&#xf24b;",
    "stanza": 1249
  },
  {
    "role": "file",
    "lines": [
      "== COS_MutableStructure =="
    ],
    "stanza": 1250
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "introduce simple mutable structures",
    "section_category": "OBJECT",
    "section_index": 33,
    "stanza": 1251
  },
  {
    "role": "code",
    "lines": [
      "intro mutable-struct;"
    ],
    "preprocessed": "intro mutable-struct;",
    "dt": false,
    "parse": [
      "intro",
      "mutable-struct"
    ],
    "code": "12100103121000011032233",
    "spider": "&#xf156;&#xf24a;&#xf146;&#xf14a;&#xf24b;",
    "stanza": 1252
  },
  {
    "role": "code",
    "lines": [
      "define mutable-struct | ? x:list |",
      "  let ((cell:list | map (? x | make-cell 0) $x:list)) |",
      "  ? x:find | list-ref $cell:list | list:find $x:list $x:find;"
    ],
    "preprocessed": "define mutable-struct | ? x:list |\n  let ((cell:list | map (? x | make-cell 0) $x:list)) |\n  ? x:find | list-ref $cell:list | list:find $x:list $x:find;",
    "dt": true,
    "parse": [
      "define",
      "mutable-struct",
      [
        -1,
        "?",
        "x:list",
        [
          -1,
          "let",
          [
            [
              "cell:list",
              [
                -1,
                "map",
                [
                  "?",
                  "x",
                  [
                    -1,
                    "make-cell",
                    "0"
                  ]
                ],
                [
                  -2,
                  "x:list"
                ]
              ]
            ]
          ],
          [
            -1,
            "?",
            "x:find",
            [
              -1,
              "list-ref",
              [
                -2,
                "cell:list"
              ],
              [
                -1,
                "list:find",
                [
                  -2,
                  "x:list"
                ],
                [
                  -2,
                  "x:find"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210000110302312110031212101001312100110133023121110100322121210000111312100110133023121011001321211003121010013023121101130203312312121010013121001101333302312110031212101001312101110033023121010011312312121000011131210011013302312121001101312101110033123121210100131210011013312312121010013121011100332233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf14a;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf146;&#xf14b;&#xf145;&#xf151;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf160;&#xf248;&#xf145;&#xf157;&#xf249;&#xf146;&#xf14b;&#xf145;&#xf151;&#xf248;&#xf145;&#xf151;&#xf145;&#xf160;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf249;&#xf16d;&#xf145;&#xf160;&#xf24b;",
    "stanza": 1253
  },
  {
    "role": "code",
    "lines": [
      "define demo:mutable-struct | mutable-struct | vector x:1 x:2 x:3;"
    ],
    "preprocessed": "define demo:mutable-struct | mutable-struct | vector x:1 x:2 x:3;",
    "dt": true,
    "parse": [
      "define",
      "demo:mutable-struct",
      [
        -1,
        "mutable-struct",
        [
          -1,
          "vector",
          "x:1",
          "x:2",
          "x:3"
        ]
      ]
    ],
    "code": "1211013121210010031210000110330231210000110302312100003121210100130213312121010013021033121210100130211332233",
    "spider": "&#xf151;&#xf24a;&#xf168;&#xf146;&#xf14a;&#xf248;&#xf146;&#xf14a;&#xf248;&#xf154;&#xf24a;&#xf16d;&#xf205;&#xf16d;&#xf206;&#xf16d;&#xf207;&#xf24b;",
    "stanza": 1254
  },
  {
    "role": "code",
    "lines": [
      "set! (demo:mutable-struct x:1) 15;"
    ],
    "preprocessed": "set! (demo:mutable-struct x:1) 15;",
    "dt": true,
    "parse": [
      "set!",
      [
        "demo:mutable-struct",
        "x:1"
      ],
      "15"
    ],
    "code": "121110032121210010031210000110331212101001302133302111132233",
    "spider": "&#xf160;&#xf246;&#xf168;&#xf146;&#xf14a;&#xf16d;&#xf205;&#xf245;&#xf213;&#xf24b;",
    "stanza": 1255
  },
  {
    "role": "code",
    "lines": [
      "= 15 | get! | demo:mutable-struct x:1;"
    ],
    "preprocessed": "= 15 | get! | demo:mutable-struct x:1;",
    "dt": false,
    "parse": [
      "=",
      "15",
      [
        -1,
        "get!",
        [
          -1,
          "demo:mutable-struct",
          "x:1"
        ]
      ]
    ],
    "code": "121130211113023121110130231212100100312100001103312121010013021332233",
    "spider": "&#xf147;&#xf24a;&#xf213;&#xf248;&#xf161;&#xf248;&#xf168;&#xf146;&#xf14a;&#xf16d;&#xf205;&#xf24b;",
    "stanza": 1256
  },
  {
    "role": "file",
    "lines": [
      "== COS_Turing =="
    ],
    "stanza": 1257
  },
  {
    "role": "doc",
    "lines": [
      "",
      "This is just for fun, as an exercise.",
      ""
    ],
    "section_description": "introduce turing machine model",
    "section_category": "TURING",
    "section_index": 34,
    "stanza": 1258
  },
  {
    "role": "code",
    "lines": [
      "define tape:tail | ? x |",
      "  if (>= 1 | list-length $x) (vector | vector) |",
      "  tail $x;"
    ],
    "preprocessed": "define tape:tail | ? x |\n  if (>= 1 | list-length $x) (vector | vector) |\n  tail $x;",
    "dt": true,
    "parse": [
      "define",
      "tape:tail",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            ">=",
            "1",
            [
              -1,
              "list-length",
              [
                -2,
                "x"
              ]
            ]
          ],
          [
            "vector",
            [
              -1,
              "vector"
            ]
          ],
          [
            -1,
            "tail",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121210001000312101000133023121100312101001302312111132121001011302130231210100103123121010013321210000302312100003302312101000131231210100132233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf14c;&#xf145;&#xf155;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf145;&#xf14f;&#xf24a;&#xf205;&#xf248;&#xf145;&#xf156;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf154;&#xf248;&#xf154;&#xf245;&#xf248;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 1259
  },
  {
    "role": "code",
    "lines": [
      "define tape:head | ? x |",
      "  if (= 0 | list-length $x) (vector) |",
      "  head $x;"
    ],
    "preprocessed": "define tape:head | ? x |\n  if (= 0 | list-length $x) (vector) |\n  head $x;",
    "dt": true,
    "parse": [
      "define",
      "tape:head",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "=",
            "0",
            [
              -1,
              "list-length",
              [
                -2,
                "x"
              ]
            ]
          ],
          [
            "vector"
          ],
          [
            -1,
            "head",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "121101312121000100031210100003302312110031210100130231211113212113020302312101001031231210100133212100003302312101000031231210100132233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf14c;&#xf145;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf154;&#xf245;&#xf248;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 1260
  },
  {
    "role": "code",
    "lines": [
      "define tape:get | ? tape | tape:head | second $tape;"
    ],
    "preprocessed": "define tape:get | ? tape | tape:head | second $tape;",
    "dt": true,
    "parse": [
      "define",
      "tape:get",
      [
        -1,
        "?",
        "tape",
        [
          -1,
          "tape:head",
          [
            -1,
            "second",
            [
              -2,
              "tape"
            ]
          ]
        ]
      ]
    ],
    "code": "12110131212100010003121111001330231211003121000100030231212100010003121010000330231210110003123121000100032233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf14c;&#xf145;&#xf17d;&#xf248;&#xf150;&#xf24a;&#xf146;&#xf14c;&#xf248;&#xf146;&#xf14c;&#xf145;&#xf154;&#xf248;&#xf145;&#xf15c;&#xf249;&#xf146;&#xf14c;&#xf24b;",
    "stanza": 1261
  },
  {
    "role": "code",
    "lines": [
      "define tape:next | lambda (tape n x) |",
      "  if (= $n 1) (pair (prepend $x | first $tape) (tape:tail | second $tape)) |",
      "  if (= $n 0) (pair (tape:tail | first $tape) (prepend (tape:head | first $tape) (prepend $x (tape:tail | second $tape)))) |",
      "  pair (first $tape) (prepend $x (tape:tail | second $tape));"
    ],
    "preprocessed": "define tape:next | lambda (tape n x) |\n  if (= $n 1) (pair (prepend $x | first $tape) (tape:tail | second $tape)) |\n  if (= $n 0) (pair (tape:tail | first $tape) (prepend (tape:head | first $tape) (prepend $x (tape:tail | second $tape)))) |\n  pair (first $tape) (prepend $x (tape:tail | second $tape));",
    "dt": true,
    "parse": [
      "define",
      "tape:next",
      [
        -1,
        "lambda",
        [
          "tape",
          "n",
          "x"
        ],
        [
          -1,
          "if",
          [
            "=",
            [
              -2,
              "n"
            ],
            "1"
          ],
          [
            "pair",
            [
              "prepend",
              [
                -2,
                "x"
              ],
              [
                -1,
                "first",
                [
                  -2,
                  "tape"
                ]
              ]
            ],
            [
              "tape:tail",
              [
                -1,
                "second",
                [
                  -2,
                  "tape"
                ]
              ]
            ]
          ],
          [
            -1,
            "if",
            [
              "=",
              [
                -2,
                "n"
              ],
              "0"
            ],
            [
              "pair",
              [
                "tape:tail",
                [
                  -1,
                  "first",
                  [
                    -2,
                    "tape"
                  ]
                ]
              ],
              [
                "prepend",
                [
                  "tape:head",
                  [
                    -1,
                    "first",
                    [
                      -2,
                      "tape"
                    ]
                  ]
                ],
                [
                  "prepend",
                  [
                    -2,
                    "x"
                  ],
                  [
                    "tape:tail",
                    [
                      -1,
                      "second",
                      [
                        -2,
                        "tape"
                      ]
                    ]
                  ]
                ]
              ]
            ],
            [
              -1,
              "pair",
              [
                "first",
                [
                  -2,
                  "tape"
                ]
              ],
              [
                "prepend",
                [
                  -2,
                  "x"
                ],
                [
                  "tape:tail",
                  [
                    -1,
                    "second",
                    [
                      -2,
                      "tape"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf14c;&#xf145;&#xf17a;&#xf248;&#xf15e;&#xf246;&#xf146;&#xf14c;&#xf24a;&#xf145;&#xf152;&#xf24a;&#xf16d;&#xf245;&#xf248;&#xf153;&#xf246;&#xf147;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf246;&#xf145;&#xf159;&#xf249;&#xf16d;&#xf248;&#xf145;&#xf15b;&#xf249;&#xf146;&#xf14c;&#xf245;&#xf246;&#xf146;&#xf14c;&#xf145;&#xf155;&#xf248;&#xf145;&#xf15c;&#xf249;&#xf146;&#xf14c;&#xf245;&#xf245;&#xf248;&#xf153;&#xf246;&#xf147;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf246;&#xf146;&#xf14c;&#xf145;&#xf155;&#xf248;&#xf145;&#xf15b;&#xf249;&#xf146;&#xf14c;&#xf245;&#xf246;&#xf145;&#xf159;&#xf246;&#xf146;&#xf14c;&#xf145;&#xf154;&#xf248;&#xf145;&#xf15b;&#xf249;&#xf146;&#xf14c;&#xf245;&#xf246;&#xf145;&#xf159;&#xf249;&#xf16d;&#xf246;&#xf146;&#xf14c;&#xf145;&#xf155;&#xf248;&#xf145;&#xf15c;&#xf249;&#xf146;&#xf14c;&#xf245;&#xf245;&#xf245;&#xf245;&#xf248;&#xf145;&#xf15a;&#xf246;&#xf145;&#xf15b;&#xf249;&#xf146;&#xf14c;&#xf245;&#xf246;&#xf145;&#xf159;&#xf249;&#xf16d;&#xf246;&#xf146;&#xf14c;&#xf145;&#xf155;&#xf248;&#xf145;&#xf15c;&#xf249;&#xf146;&#xf14c;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1262
  },
  {
    "role": "code",
    "lines": [
      "intro tape:do;"
    ],
    "preprocessed": "intro tape:do;",
    "dt": false,
    "parse": [
      "intro",
      "tape:do"
    ],
    "code": "1210010312121000100031210001001332233",
    "spider": "&#xf156;&#xf24a;&#xf146;&#xf14c;&#xf146;&#xf14d;&#xf24b;",
    "stanza": 1263
  },
  {
    "role": "code",
    "lines": [
      "define tape:do | lambda (x:function current end tape) |",
      "  if (= $current $end) $tape |",
      "  let ((next | x:function $current | tape:get $tape)) | ",
      "    tape:do $x:function (list-ref $next 0) $end |",
      "    tape:next $tape (list-ref $next 1) (list-ref $next 2);"
    ],
    "preprocessed": "define tape:do | lambda (x:function current end tape) |\n  if (= $current $end) $tape |\n  let ((next | x:function $current | tape:get $tape)) | \n    tape:do $x:function (list-ref $next 0) $end |\n    tape:next $tape (list-ref $next 1) (list-ref $next 2);",
    "dt": true,
    "parse": [
      "define",
      "tape:do",
      [
        -1,
        "lambda",
        [
          "x:function",
          "current",
          "end",
          "tape"
        ],
        [
          -1,
          "if",
          [
            "=",
            [
              -2,
              "current"
            ],
            [
              -2,
              "end"
            ]
          ],
          [
            -2,
            "tape"
          ],
          [
            -1,
            "let",
            [
              [
                "next",
                [
                  -1,
                  "x:function",
                  [
                    -2,
                    "current"
                  ],
                  [
                    -1,
                    "tape:get",
                    [
                      -2,
                      "tape"
                    ]
                  ]
                ]
              ]
            ],
            [
              -1,
              "tape:do",
              [
                -2,
                "x:function"
              ],
              [
                "list-ref",
                [
                  -2,
                  "next"
                ],
                "0"
              ],
              [
                -2,
                "end"
              ],
              [
                -1,
                "tape:next",
                [
                  -2,
                  "tape"
                ],
                [
                  "list-ref",
                  [
                    -2,
                    "next"
                  ],
                  "1"
                ],
                [
                  "list-ref",
                  [
                    -2,
                    "next"
                  ],
                  "2"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121210001000312100010013302312110103212121010013121000101033121000101131210001100312100010003302312111132121131231210001011312312100011003312312100010003023121110100322121110110302312121010013121000101033123121000101130231212100010003121111001331231210001000333023121210001000312100010013312312121010013121000101033212101001131231211101103020331231210001100302312121000100031211101103312312100010003212101001131231211101103021332121010011312312111011030210332233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf14c;&#xf146;&#xf14d;&#xf248;&#xf15e;&#xf246;&#xf16d;&#xf146;&#xf14e;&#xf146;&#xf14f;&#xf24a;&#xf146;&#xf150;&#xf24a;&#xf146;&#xf14c;&#xf245;&#xf248;&#xf153;&#xf246;&#xf147;&#xf249;&#xf146;&#xf14f;&#xf249;&#xf146;&#xf150;&#xf245;&#xf249;&#xf146;&#xf14c;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf145;&#xf17a;&#xf248;&#xf16d;&#xf146;&#xf14e;&#xf249;&#xf146;&#xf14f;&#xf248;&#xf146;&#xf14c;&#xf145;&#xf17d;&#xf249;&#xf146;&#xf14c;&#xf245;&#xf245;&#xf248;&#xf146;&#xf14c;&#xf146;&#xf14d;&#xf249;&#xf16d;&#xf146;&#xf14e;&#xf246;&#xf145;&#xf157;&#xf249;&#xf145;&#xf17a;&#xf24a;&#xf204;&#xf245;&#xf249;&#xf146;&#xf150;&#xf248;&#xf146;&#xf14c;&#xf145;&#xf17a;&#xf249;&#xf146;&#xf14c;&#xf246;&#xf145;&#xf157;&#xf249;&#xf145;&#xf17a;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf145;&#xf157;&#xf249;&#xf145;&#xf17a;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1264
  },
  {
    "role": "code",
    "lines": [
      "intro tape:make;"
    ],
    "preprocessed": "intro tape:make;",
    "dt": false,
    "parse": [
      "intro",
      "tape:make"
    ],
    "code": "121001031212100010003121111110332233",
    "spider": "&#xf156;&#xf24a;&#xf146;&#xf14c;&#xf145;&#xf182;&#xf24b;",
    "stanza": 1265
  },
  {
    "role": "code",
    "lines": [
      "define tape:make | ? x | pair (vector) $x;"
    ],
    "preprocessed": "define tape:make | ? x | pair (vector) $x;",
    "dt": true,
    "parse": [
      "define",
      "tape:make",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "pair",
          [
            "vector"
          ],
          [
            -2,
            "x"
          ]
        ]
      ]
    ],
    "code": "12110131212100010003121111110330231211003121010013023121010110321210000331231210100132233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf14c;&#xf145;&#xf182;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf145;&#xf15a;&#xf246;&#xf154;&#xf245;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 1266
  },
  {
    "role": "code",
    "lines": [
      "define tape:-:tail | ? x | ? x:list |",
      "  if (= 0 | list-length $x:list) $x:list |",
      "  if (not | equal $x | last $x:list) $x:list |",
      "  tape:-:tail $x (except-last $x:list);"
    ],
    "preprocessed": "define tape:-:tail | ? x | ? x:list |\n  if (= 0 | list-length $x:list) $x:list |\n  if (not | equal $x | last $x:list) $x:list |\n  tape:-:tail $x (except-last $x:list);",
    "dt": true,
    "parse": [
      "define",
      "tape:-:tail",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "x:list",
          [
            -1,
            "if",
            [
              "=",
              "0",
              [
                -1,
                "list-length",
                [
                  -2,
                  "x:list"
                ]
              ]
            ],
            [
              -2,
              "x:list"
            ],
            [
              -1,
              "if",
              [
                "not",
                [
                  -1,
                  "equal",
                  [
                    -2,
                    "x"
                  ],
                  [
                    -1,
                    "last",
                    [
                      -2,
                      "x:list"
                    ]
                  ]
                ]
              ],
              [
                -2,
                "x:list"
              ],
              [
                -1,
                "tape:-:tail",
                [
                  -2,
                  "x"
                ],
                [
                  "except-last",
                  [
                    -2,
                    "x:list"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312121000100031210113121010001330231211003121010013023121100312121010013121001101330231211113212113020302312101001031231212101001312100110133312312121010013121001101330231211113212101302312100031231210100130231210111013123121210100131210011013331231212101001312100110133023121210001000312101131210100013312312101001321210111103123121210100131210011013332233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf14c;&#xf14f;&#xf145;&#xf155;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf14c;&#xf249;&#xf16d;&#xf248;&#xf145;&#xf161;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf248;&#xf146;&#xf14c;&#xf14f;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf246;&#xf145;&#xf162;&#xf249;&#xf16d;&#xf145;&#xf151;&#xf245;&#xf24b;",
    "stanza": 1267
  },
  {
    "role": "code",
    "lines": [
      "intro tape:result;"
    ],
    "preprocessed": "intro tape:result;",
    "dt": false,
    "parse": [
      "intro",
      "tape:result"
    ],
    "code": "1210010312121000100031210001101332233",
    "spider": "&#xf156;&#xf24a;&#xf146;&#xf14c;&#xf146;&#xf151;&#xf24b;",
    "stanza": 1268
  },
  {
    "role": "code",
    "lines": [
      "define tape:result | ? x | tape:-:tail (vector) (second $x);"
    ],
    "preprocessed": "define tape:result | ? x | tape:-:tail (vector) (second $x);",
    "dt": true,
    "parse": [
      "define",
      "tape:result",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "tape:-:tail",
          [
            "vector"
          ],
          [
            "second",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "121101312121000100031210001101330231211003121010013023121210001000312101131210100013321210000332121011000312312101001332233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf14c;&#xf146;&#xf151;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf14c;&#xf14f;&#xf145;&#xf155;&#xf246;&#xf154;&#xf245;&#xf246;&#xf145;&#xf15c;&#xf249;&#xf16d;&#xf245;&#xf24b;",
    "stanza": 1269
  },
  {
    "role": "code",
    "lines": [
      "intro demo:tape:function:+:1;"
    ],
    "preprocessed": "intro demo:tape:function:+:1;",
    "dt": false,
    "parse": [
      "intro",
      "demo:tape:function:+:1"
    ],
    "code": "121001031212100100312100010003121000101031210103021332233",
    "spider": "&#xf156;&#xf24a;&#xf168;&#xf146;&#xf14c;&#xf146;&#xf14e;&#xf14e;&#xf205;&#xf24b;",
    "stanza": 1270
  },
  {
    "role": "code",
    "lines": [
      "define demo:tape:function:+:1 | make-hash | vector ",
      "  (pair next (make-hash | vector",
      "    (pair 0 (vector next 1 0))",
      "    (pair 1 (vector next 1 1))",
      "    (pair (vector) (vector +:1 0 (vector)))))",
      "  (pair +:1 (make-hash | vector",
      "    (pair 0 (vector not:+:1 0 1))",
      "    (pair 1 (vector +:1 0 0))",
      "    (pair (vector) (vector end 2 1))))",
      "  (pair not:+:1 (make-hash | vector",
      "    (pair 0 (vector not:+:1 0 0))",
      "    (pair 1 (vector not:+:1 0 1))",
      "    (pair (vector) (vector end 1 (vector)))))",
      "  (pair end (make-hash | vector));"
    ],
    "preprocessed": "define demo:tape:function:+:1 | make-hash | vector \n  (pair next (make-hash | vector\n    (pair 0 (vector next 1 0))\n    (pair 1 (vector next 1 1))\n    (pair (vector) (vector +:1 0 (vector)))))\n  (pair +:1 (make-hash | vector\n    (pair 0 (vector not:+:1 0 1))\n    (pair 1 (vector +:1 0 0))\n    (pair (vector) (vector end 2 1))))\n  (pair not:+:1 (make-hash | vector\n    (pair 0 (vector not:+:1 0 0))\n    (pair 1 (vector not:+:1 0 1))\n    (pair (vector) (vector end 1 (vector)))))\n  (pair end (make-hash | vector));",
    "dt": true,
    "parse": [
      "define",
      "demo:tape:function:+:1",
      [
        -1,
        "make-hash",
        [
          -1,
          "vector",
          [
            "pair",
            "next",
            [
              "make-hash",
              [
                -1,
                "vector",
                [
                  "pair",
                  "0",
                  [
                    "vector",
                    "next",
                    "1",
                    "0"
                  ]
                ],
                [
                  "pair",
                  "1",
                  [
                    "vector",
                    "next",
                    "1",
                    "1"
                  ]
                ],
                [
                  "pair",
                  [
                    "vector"
                  ],
                  [
                    "vector",
                    "+:1",
                    "0",
                    [
                      "vector"
                    ]
                  ]
                ]
              ]
            ]
          ],
          [
            "pair",
            "+:1",
            [
              "make-hash",
              [
                -1,
                "vector",
                [
                  "pair",
                  "0",
                  [
                    "vector",
                    "not:+:1",
                    "0",
                    "1"
                  ]
                ],
                [
                  "pair",
                  "1",
                  [
                    "vector",
                    "+:1",
                    "0",
                    "0"
                  ]
                ],
                [
                  "pair",
                  [
                    "vector"
                  ],
                  [
                    "vector",
                    "end",
                    "2",
                    "1"
                  ]
                ]
              ]
            ]
          ],
          [
            "pair",
            "not:+:1",
            [
              "make-hash",
              [
                -1,
                "vector",
                [
                  "pair",
                  "0",
                  [
                    "vector",
                    "not:+:1",
                    "0",
                    "0"
                  ]
                ],
                [
                  "pair",
                  "1",
                  [
                    "vector",
                    "not:+:1",
                    "0",
                    "1"
                  ]
                ],
                [
                  "pair",
                  [
                    "vector"
                  ],
                  [
                    "vector",
                    "end",
                    "1",
                    [
                      "vector"
                    ]
                  ]
                ]
              ]
            ]
          ],
          [
            "pair",
            "end",
            [
              "make-hash",
              [
                -1,
                "vector"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312121001003121000100031210001010312101030213302312100001013023121000032121010110312111011032121000010130231210000321210101103020321210000312111011030213020333212101011030213212100003121110110302130213332121010110321210000332121000031212101030213302032121000033333321210101103121210103021332121000010130231210000321210101103020321210000312121013121010302133020302133321210101103021321210000312121010302133020302033321210101103212100003321210000312100011003021030213333321210101103121210131210103021332121000010130231210000321210101103020321210000312121013121010302133020302033321210101103021321210000312121013121010302133020302133321210101103212100003321210000312100011003021321210000333333212101011031210001100321210000101302312100003332233",
    "spider": "&#xf151;&#xf24a;&#xf168;&#xf146;&#xf14c;&#xf146;&#xf14e;&#xf14e;&#xf205;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf145;&#xf17a;&#xf246;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf246;&#xf154;&#xf24a;&#xf145;&#xf17a;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf246;&#xf154;&#xf24a;&#xf145;&#xf17a;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf246;&#xf154;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf14e;&#xf205;&#xf204;&#xf246;&#xf154;&#xf245;&#xf245;&#xf245;&#xf245;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf14e;&#xf205;&#xf246;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf246;&#xf154;&#xf24a;&#xf149;&#xf14e;&#xf205;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf246;&#xf154;&#xf24a;&#xf14e;&#xf205;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf246;&#xf154;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf146;&#xf150;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf245;&#xf245;&#xf245;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf149;&#xf14e;&#xf205;&#xf246;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf246;&#xf154;&#xf24a;&#xf149;&#xf14e;&#xf205;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf246;&#xf154;&#xf24a;&#xf149;&#xf14e;&#xf205;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf246;&#xf154;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf146;&#xf150;&#xf24a;&#xf205;&#xf246;&#xf154;&#xf245;&#xf245;&#xf245;&#xf245;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf146;&#xf150;&#xf246;&#xf146;&#xf149;&#xf248;&#xf154;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1271
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 1 0 1 0) | tape:result |",
      "  tape:do $demo:tape:function:+:1 next end (tape:make | vector 1 0 0 1);"
    ],
    "preprocessed": "list= (vector 1 0 1 0) | tape:result |\n  tape:do $demo:tape:function:+:1 next end (tape:make | vector 1 0 0 1);",
    "dt": false,
    "parse": [
      "list=",
      [
        "vector",
        "1",
        "0",
        "1",
        "0"
      ],
      [
        -1,
        "tape:result",
        [
          -1,
          "tape:do",
          [
            -2,
            "demo:tape:function:+:1"
          ],
          "next",
          "end",
          [
            "tape:make",
            [
              -1,
              "vector",
              "1",
              "0",
              "0",
              "1"
            ]
          ]
        ]
      ]
    ],
    "code": "12101010032121000030213020302130203302312121000100031210001101330231212100010003121000100133123121210010031210001000312100010103121010302133121110110312100011003212121000100031211111103302312100003021302030203021332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf146;&#xf14c;&#xf146;&#xf151;&#xf248;&#xf146;&#xf14c;&#xf146;&#xf14d;&#xf249;&#xf168;&#xf146;&#xf14c;&#xf146;&#xf14e;&#xf14e;&#xf205;&#xf145;&#xf17a;&#xf24a;&#xf146;&#xf150;&#xf246;&#xf146;&#xf14c;&#xf145;&#xf182;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 1272
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 1 0 0 0) | tape:result |",
      "  tape:do $demo:tape:function:+:1 next end (tape:make | vector 1 1 1);"
    ],
    "preprocessed": "list= (vector 1 0 0 0) | tape:result |\n  tape:do $demo:tape:function:+:1 next end (tape:make | vector 1 1 1);",
    "dt": false,
    "parse": [
      "list=",
      [
        "vector",
        "1",
        "0",
        "0",
        "0"
      ],
      [
        -1,
        "tape:result",
        [
          -1,
          "tape:do",
          [
            -2,
            "demo:tape:function:+:1"
          ],
          "next",
          "end",
          [
            "tape:make",
            [
              -1,
              "vector",
              "1",
              "1",
              "1"
            ]
          ]
        ]
      ]
    ],
    "code": "1210101003212100003021302030203020330231212100010003121000110133023121210001000312100010013312312121001003121000100031210001010312101030213312111011031210001100321212100010003121111110330231210000302130213021332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf146;&#xf14c;&#xf146;&#xf151;&#xf248;&#xf146;&#xf14c;&#xf146;&#xf14d;&#xf249;&#xf168;&#xf146;&#xf14c;&#xf146;&#xf14e;&#xf14e;&#xf205;&#xf145;&#xf17a;&#xf24a;&#xf146;&#xf150;&#xf246;&#xf146;&#xf14c;&#xf145;&#xf182;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 1273
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 1 1 1 0 0 1 0 0 0) | tape:result |",
      "  tape:do $demo:tape:function:+:1 next end (tape:make | vector 1 1 1 0 0 0 1 1 1);"
    ],
    "preprocessed": "list= (vector 1 1 1 0 0 1 0 0 0) | tape:result |\n  tape:do $demo:tape:function:+:1 next end (tape:make | vector 1 1 1 0 0 0 1 1 1);",
    "dt": false,
    "parse": [
      "list=",
      [
        "vector",
        "1",
        "1",
        "1",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0"
      ],
      [
        -1,
        "tape:result",
        [
          -1,
          "tape:do",
          [
            -2,
            "demo:tape:function:+:1"
          ],
          "next",
          "end",
          [
            "tape:make",
            [
              -1,
              "vector",
              "1",
              "1",
              "1",
              "0",
              "0",
              "0",
              "1",
              "1",
              "1"
            ]
          ]
        ]
      ]
    ],
    "code": "121010100321210000302130213021302030203021302030203020330231212100010003121000110133023121210001000312100010013312312121001003121000100031210001010312101030213312111011031210001100321212100010003121111110330231210000302130213021302030203020302130213021332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf146;&#xf14c;&#xf146;&#xf151;&#xf248;&#xf146;&#xf14c;&#xf146;&#xf14d;&#xf249;&#xf168;&#xf146;&#xf14c;&#xf146;&#xf14e;&#xf14e;&#xf205;&#xf145;&#xf17a;&#xf24a;&#xf146;&#xf150;&#xf246;&#xf146;&#xf14c;&#xf145;&#xf182;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 1274
  },
  {
    "role": "file",
    "lines": [
      "== COS_Quote =="
    ],
    "stanza": 1275
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "quoting syntax",
    "section_category": "MATH",
    "section_index": 35,
    "stanza": 1276
  },
  {
    "role": "code",
    "lines": [
      "define quote-f | ? key | ? x |",
      "  if (not | function? $x) $x |",
      "  if (= $key | list-ref $x 0) (tail $x) |",
      "  prepend vector | map (quote-f $key) $x;"
    ],
    "preprocessed": "define quote-f | ? key | ? x |\n  if (not | function? $x) $x |\n  if (= $key | list-ref $x 0) (tail $x) |\n  prepend vector | map (quote-f $key) $x;",
    "dt": true,
    "parse": [
      "define",
      "quote-f",
      [
        -1,
        "?",
        "key",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "if",
            [
              "not",
              [
                -1,
                "function?",
                [
                  -2,
                  "x"
                ]
              ]
            ],
            [
              -2,
              "x"
            ],
            [
              -1,
              "if",
              [
                "=",
                [
                  -2,
                  "key"
                ],
                [
                  -1,
                  "list-ref",
                  [
                    -2,
                    "x"
                  ],
                  "0"
                ]
              ],
              [
                "tail",
                [
                  -2,
                  "x"
                ]
              ],
              [
                -1,
                "prepend",
                "vector",
                [
                  -1,
                  "map",
                  [
                    "quote-f",
                    [
                      -2,
                      "key"
                    ]
                  ],
                  [
                    -2,
                    "x"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312100011103023121100312100011113023121100312101001302312111132121013023121011003123121010013312312101001302312111132121131231210001111302312101001131231210100130203321210100013123121010013302312101010131210000302312101100132121000111031231210001111331231210100132233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf146;&#xf153;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf170;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf147;&#xf249;&#xf146;&#xf153;&#xf248;&#xf145;&#xf157;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf145;&#xf159;&#xf24a;&#xf154;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf146;&#xf152;&#xf249;&#xf146;&#xf153;&#xf245;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 1277
  },
  {
    "role": "code",
    "lines": [
      "= (quote-f x 1) 1;"
    ],
    "preprocessed": "= (quote-f x 1) 1;",
    "dt": false,
    "parse": [
      "=",
      [
        "quote-f",
        "x",
        "1"
      ],
      "1"
    ],
    "code": "121132121000111031210100130213302132233",
    "spider": "&#xf147;&#xf246;&#xf146;&#xf152;&#xf24a;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf205;&#xf24b;",
    "stanza": 1278
  },
  {
    "role": "code",
    "lines": [
      "list= (quote-f x | vector 1) | vector vector 1;"
    ],
    "preprocessed": "list= (quote-f x | vector 1) | vector vector 1;",
    "dt": false,
    "parse": [
      "list=",
      [
        "quote-f",
        "x",
        [
          -1,
          "vector",
          "1"
        ]
      ],
      [
        -1,
        "vector",
        "vector",
        "1"
      ]
    ],
    "code": "12101010032121000111031210100130231210000302133023121000031210000302132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf146;&#xf152;&#xf24a;&#xf16d;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf154;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 1279
  },
  {
    "role": "code",
    "lines": [
      "list= (quote-f x | vector 1 2 3) | vector vector 1 2 3;"
    ],
    "preprocessed": "list= (quote-f x | vector 1 2 3) | vector vector 1 2 3;",
    "dt": false,
    "parse": [
      "list=",
      [
        "quote-f",
        "x",
        [
          -1,
          "vector",
          "1",
          "2",
          "3"
        ]
      ],
      [
        -1,
        "vector",
        "vector",
        "1",
        "2",
        "3"
      ]
    ],
    "code": "1210101003212100011103121010013023121000030213021030211330231210000312100003021302103021132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf146;&#xf152;&#xf24a;&#xf16d;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 1280
  },
  {
    "role": "code",
    "lines": [
      "list= (quote-f x | vector 1 (vector 5 2) 3) | vector vector 1 (vector vector 5 2) 3;"
    ],
    "preprocessed": "list= (quote-f x | vector 1 (vector 5 2) 3) | vector vector 1 (vector vector 5 2) 3;",
    "dt": false,
    "parse": [
      "list=",
      [
        "quote-f",
        "x",
        [
          -1,
          "vector",
          "1",
          [
            "vector",
            "5",
            "2"
          ],
          "3"
        ]
      ],
      [
        -1,
        "vector",
        "vector",
        "1",
        [
          "vector",
          "vector",
          "5",
          "2"
        ],
        "3"
      ]
    ],
    "code": "12101010032121000111031210100130231210000302132121000030210130210330211330231210000312100003021321210000312100003021013021033021132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf146;&#xf152;&#xf24a;&#xf16d;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf246;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf207;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf154;&#xf24a;&#xf205;&#xf246;&#xf154;&#xf24a;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf207;&#xf24b;",
    "stanza": 1281
  },
  {
    "role": "code",
    "lines": [
      "list= (quote-f x | vector 1 (vector 5 2) (vector x + 5 2)) | vector vector 1 (vector vector 5 2) (vector + 5 2);"
    ],
    "preprocessed": "list= (quote-f x | vector 1 (vector 5 2) (vector x + 5 2)) | vector vector 1 (vector vector 5 2) (vector + 5 2);",
    "dt": false,
    "parse": [
      "list=",
      [
        "quote-f",
        "x",
        [
          -1,
          "vector",
          "1",
          [
            "vector",
            "5",
            "2"
          ],
          [
            "vector",
            "x",
            "+",
            "5",
            "2"
          ]
        ]
      ],
      [
        -1,
        "vector",
        "vector",
        "1",
        [
          "vector",
          "vector",
          "5",
          "2"
        ],
        [
          "vector",
          "+",
          "5",
          "2"
        ]
      ]
    ],
    "code": "121010100321210001110312101001302312100003021321210000302101302103321210000312101001312101030210130210333023121000031210000302132121000031210000302101302103321210000312101030210130210332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf146;&#xf152;&#xf24a;&#xf16d;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf246;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf16d;&#xf24a;&#xf14e;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf154;&#xf24a;&#xf205;&#xf246;&#xf154;&#xf24a;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf14e;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1282
  },
  {
    "role": "code",
    "lines": [
      "intro quote;"
    ],
    "preprocessed": "intro quote;",
    "dt": false,
    "parse": [
      "intro",
      "quote"
    ],
    "code": "12100103121001000032233",
    "spider": "&#xf156;&#xf24a;&#xf146;&#xf154;&#xf24b;",
    "stanza": 1283
  },
  {
    "role": "code",
    "lines": [
      "define translate | assign prev $translate | ? x |",
      "  if (not | function? $x) $x |",
      "  if (not | = quote | head $x) (prev $x) |",
      "  translate | quote-f (list-ref $x 1) (list-ref $x 2);"
    ],
    "preprocessed": "define translate | assign prev $translate | ? x |\n  if (not | function? $x) $x |\n  if (not | = quote | head $x) (prev $x) |\n  translate | quote-f (list-ref $x 1) (list-ref $x 2);",
    "dt": true,
    "parse": [
      "define",
      "translate",
      [
        -1,
        "assign",
        "prev",
        [
          -2,
          "translate"
        ],
        [
          -1,
          "?",
          "x",
          [
            -1,
            "if",
            [
              "not",
              [
                -1,
                "function?",
                [
                  -2,
                  "x"
                ]
              ]
            ],
            [
              -2,
              "x"
            ],
            [
              -1,
              "if",
              [
                "not",
                [
                  -1,
                  "=",
                  "quote",
                  [
                    -1,
                    "head",
                    [
                      -2,
                      "x"
                    ]
                  ]
                ]
              ],
              [
                "prev",
                [
                  -2,
                  "x"
                ]
              ],
              [
                -1,
                "translate",
                [
                  -1,
                  "quote-f",
                  [
                    "list-ref",
                    [
                      -2,
                      "x"
                    ],
                    "1"
                  ],
                  [
                    "list-ref",
                    [
                      -2,
                      "x"
                    ],
                    "2"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312110013023121110312111011131231211001302312110031210100130231211113212101302312101100312312101001331231210100130231211113212101302312113121001000030231210100003123121010013321211101113123121010013302312110013023121000111032121010011312312101001302133212101001131231210100130210332233",
    "spider": "&#xf151;&#xf24a;&#xf15d;&#xf248;&#xf152;&#xf24a;&#xf145;&#xf17b;&#xf249;&#xf15d;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf170;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf147;&#xf24a;&#xf146;&#xf154;&#xf248;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf17b;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf15d;&#xf248;&#xf146;&#xf152;&#xf246;&#xf145;&#xf157;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf145;&#xf157;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf24b;",
    "stanza": 1284
  },
  {
    "role": "code",
    "lines": [
      "= (quote x 1) 1;"
    ],
    "preprocessed": "= (quote x 1) 1;",
    "dt": false,
    "parse": [
      "=",
      [
        "quote",
        "x",
        "1"
      ],
      "1"
    ],
    "code": "121132121001000031210100130213302132233",
    "spider": "&#xf147;&#xf246;&#xf146;&#xf154;&#xf24a;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf205;&#xf24b;",
    "stanza": 1285
  },
  {
    "role": "code",
    "lines": [
      "list= (quote x | 1) | vector 1;"
    ],
    "preprocessed": "list= (quote x | 1) | vector 1;",
    "dt": false,
    "parse": [
      "list=",
      [
        "quote",
        "x",
        [
          -1,
          "1"
        ]
      ],
      [
        -1,
        "vector",
        "1"
      ]
    ],
    "code": "1210101003212100100003121010013023021330231210000302132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf146;&#xf154;&#xf24a;&#xf16d;&#xf248;&#xf205;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 1286
  },
  {
    "role": "code",
    "lines": [
      "list= (quote x | 1 2 3) | vector 1 2 3;"
    ],
    "preprocessed": "list= (quote x | 1 2 3) | vector 1 2 3;",
    "dt": false,
    "parse": [
      "list=",
      [
        "quote",
        "x",
        [
          -1,
          "1",
          "2",
          "3"
        ]
      ],
      [
        -1,
        "vector",
        "1",
        "2",
        "3"
      ]
    ],
    "code": "121010100321210010000312101001302302130210302113302312100003021302103021132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf146;&#xf154;&#xf24a;&#xf16d;&#xf248;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 1287
  },
  {
    "role": "code",
    "lines": [
      "list= (quote x | 1 (5 2) 3) | vector 1 (vector 5 2) 3;"
    ],
    "preprocessed": "list= (quote x | 1 (5 2) 3) | vector 1 (vector 5 2) 3;",
    "dt": false,
    "parse": [
      "list=",
      [
        "quote",
        "x",
        [
          -1,
          "1",
          [
            "5",
            "2"
          ],
          "3"
        ]
      ],
      [
        -1,
        "vector",
        "1",
        [
          "vector",
          "5",
          "2"
        ],
        "3"
      ]
    ],
    "code": "121010100321210010000312101001302302132021013021033021133023121000030213212100003021013021033021132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf146;&#xf154;&#xf24a;&#xf16d;&#xf248;&#xf205;&#xf246;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf207;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf246;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf207;&#xf24b;",
    "stanza": 1288
  },
  {
    "role": "code",
    "lines": [
      "list= (quote x | 1 (5 2) (x + 5 2)) | vector 1 (vector 5 2) 7;"
    ],
    "preprocessed": "list= (quote x | 1 (5 2) (x + 5 2)) | vector 1 (vector 5 2) 7;",
    "dt": false,
    "parse": [
      "list=",
      [
        "quote",
        "x",
        [
          -1,
          "1",
          [
            "5",
            "2"
          ],
          [
            "x",
            "+",
            "5",
            "2"
          ]
        ]
      ],
      [
        -1,
        "vector",
        "1",
        [
          "vector",
          "5",
          "2"
        ],
        "7"
      ]
    ],
    "code": "1210101003212100100003121010013023021320210130210332121010013121010302101302103330231210000302132121000030210130210330211132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf146;&#xf154;&#xf24a;&#xf16d;&#xf248;&#xf205;&#xf246;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf16d;&#xf24a;&#xf14e;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf246;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf245;&#xf20b;&#xf24b;",
    "stanza": 1289
  },
  {
    "role": "file",
    "lines": [
      "== COS_NewType =="
    ],
    "stanza": 1290
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "introduce simple form of typing, for ease of documentation.",
    "section_category": "OBJECT",
    "section_index": 36,
    "stanza": 1291
  },
  {
    "role": "doc",
    "lines": [
      "",
      "An object is simply a function that takes an argument.",
      "The argument is the method to call on the object.",
      "Types are here taken to be just the existence of a particular method,",
      "with that method returning an object of the appropriate type.",
      ""
    ],
    "stanza": 1292
  },
  {
    "role": "code",
    "lines": [
      "define make-integer | ? x | ? n |",
      "  if (= $n int) $x 0;"
    ],
    "preprocessed": "define make-integer | ? x | ? n |\n  if (= $n int) $x 0;",
    "dt": true,
    "parse": [
      "define",
      "make-integer",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "n",
          [
            -1,
            "if",
            [
              "=",
              [
                -2,
                "n"
              ],
              "int"
            ],
            [
              -2,
              "x"
            ],
            "0"
          ]
        ]
      ]
    ],
    "code": "12110131210010001302312110031210100130231211003121001110302312111132121131231210011103121111103312312101001302032233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf155;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf152;&#xf248;&#xf153;&#xf246;&#xf147;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf182;&#xf245;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1293
  },
  {
    "role": "code",
    "lines": [
      "define objectify | ? x |",
      "  if (function? $x) $x |",
      "  make-integer $x;"
    ],
    "preprocessed": "define objectify | ? x |\n  if (function? $x) $x |\n  make-integer $x;",
    "dt": true,
    "parse": [
      "define",
      "objectify",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "if",
          [
            "function?",
            [
              -2,
              "x"
            ]
          ],
          [
            -2,
            "x"
          ],
          [
            -1,
            "make-integer",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121001001030231211003121010013023121111321210110031231210100133123121010013023121001000131231210100132233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf156;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf170;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf16d;&#xf248;&#xf146;&#xf155;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 1294
  },
  {
    "role": "doc",
    "lines": [
      "add version of lambda that allows types to be declared"
    ],
    "stanza": 1295
  },
  {
    "role": "code",
    "lines": [
      "define translate | let ((prev $translate)) | ? x |",
      "  if (not | function? $x) (prev $x) |",
      "  if (not | = lambda | head $x) (prev $x) |",
      "  let ((formals | head | tail $x)",
      "       (body | head | tail | tail $x)) |",
      "    if (= 0 | list-length $formals) (translate $body) |",
      "    if (not | function? | last $formals)",
      "      (translate | vector lambda (except-last $formals) (vector  ? (last $formals) $body)) |",
      "      let ((formal-name | first | last $formals)",
      "           (formal-type | second | last $formals)) |",
      "        translate | vector",
      "          lambda (except-last $formals) |",
      "            vector ? $formal-name |",
      "              vector let (vector (vector $formal-name (vector",
      "                (vector objectify | vector $formal-name)",
      "                $formal-type))) $body;"
    ],
    "preprocessed": "define translate | let ((prev $translate)) | ? x |\n  if (not | function? $x) (prev $x) |\n  if (not | = lambda | head $x) (prev $x) |\n  let ((formals | head | tail $x)\n       (body | head | tail | tail $x)) |\n    if (= 0 | list-length $formals) (translate $body) |\n    if (not | function? | last $formals)\n      (translate | vector lambda (except-last $formals) (vector  ? (last $formals) $body)) |\n      let ((formal-name | first | last $formals)\n           (formal-type | second | last $formals)) |\n        translate | vector\n          lambda (except-last $formals) |\n            vector ? $formal-name |\n              vector let (vector (vector $formal-name (vector\n                (vector objectify | vector $formal-name)\n                $formal-type))) $body;",
    "dt": true,
    "parse": [
      "define",
      "translate",
      [
        -1,
        "let",
        [
          [
            "prev",
            [
              -2,
              "translate"
            ]
          ]
        ],
        [
          -1,
          "?",
          "x",
          [
            -1,
            "if",
            [
              "not",
              [
                -1,
                "function?",
                [
                  -2,
                  "x"
                ]
              ]
            ],
            [
              "prev",
              [
                -2,
                "x"
              ]
            ],
            [
              -1,
              "if",
              [
                "not",
                [
                  -1,
                  "=",
                  "lambda",
                  [
                    -1,
                    "head",
                    [
                      -2,
                      "x"
                    ]
                  ]
                ]
              ],
              [
                "prev",
                [
                  -2,
                  "x"
                ]
              ],
              [
                -1,
                "let",
                [
                  [
                    "formals",
                    [
                      -1,
                      "head",
                      [
                        -1,
                        "tail",
                        [
                          -2,
                          "x"
                        ]
                      ]
                    ]
                  ],
                  [
                    "body",
                    [
                      -1,
                      "head",
                      [
                        -1,
                        "tail",
                        [
                          -1,
                          "tail",
                          [
                            -2,
                            "x"
                          ]
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  -1,
                  "if",
                  [
                    "=",
                    "0",
                    [
                      -1,
                      "list-length",
                      [
                        -2,
                        "formals"
                      ]
                    ]
                  ],
                  [
                    "translate",
                    [
                      -2,
                      "body"
                    ]
                  ],
                  [
                    -1,
                    "if",
                    [
                      "not",
                      [
                        -1,
                        "function?",
                        [
                          -1,
                          "last",
                          [
                            -2,
                            "formals"
                          ]
                        ]
                      ]
                    ],
                    [
                      "translate",
                      [
                        -1,
                        "vector",
                        "lambda",
                        [
                          "except-last",
                          [
                            -2,
                            "formals"
                          ]
                        ],
                        [
                          "vector",
                          "?",
                          [
                            "last",
                            [
                              -2,
                              "formals"
                            ]
                          ],
                          [
                            -2,
                            "body"
                          ]
                        ]
                      ]
                    ],
                    [
                      -1,
                      "let",
                      [
                        [
                          "formal-name",
                          [
                            -1,
                            "first",
                            [
                              -1,
                              "last",
                              [
                                -2,
                                "formals"
                              ]
                            ]
                          ]
                        ],
                        [
                          "formal-type",
                          [
                            -1,
                            "second",
                            [
                              -1,
                              "last",
                              [
                                -2,
                                "formals"
                              ]
                            ]
                          ]
                        ]
                      ],
                      [
                        -1,
                        "translate",
                        [
                          -1,
                          "vector",
                          "lambda",
                          [
                            "except-last",
                            [
                              -2,
                              "formals"
                            ]
                          ],
                          [
                            -1,
                            "vector",
                            "?",
                            [
                              -2,
                              "formal-name"
                            ],
                            [
                              -1,
                              "vector",
                              "let",
                              [
                                "vector",
                                [
                                  "vector",
                                  [
                                    -2,
                                    "formal-name"
                                  ],
                                  [
                                    "vector",
                                    [
                                      "vector",
                                      "objectify",
                                      [
                                        -1,
                                        "vector",
                                        [
                                          -2,
                                          "formal-name"
                                        ]
                                      ]
                                    ],
                                    [
                                      -2,
                                      "formal-type"
                                    ]
                                  ]
                                ]
                              ],
                              [
                                -2,
                                "body"
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf15d;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf145;&#xf17b;&#xf249;&#xf15d;&#xf245;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf170;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf17b;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf147;&#xf24a;&#xf15e;&#xf248;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf17b;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf146;&#xf157;&#xf248;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf146;&#xf158;&#xf248;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf248;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf245;&#xf245;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf249;&#xf146;&#xf157;&#xf245;&#xf246;&#xf15d;&#xf249;&#xf146;&#xf158;&#xf245;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf170;&#xf248;&#xf145;&#xf161;&#xf249;&#xf146;&#xf157;&#xf245;&#xf246;&#xf15d;&#xf248;&#xf154;&#xf24a;&#xf15e;&#xf246;&#xf145;&#xf162;&#xf249;&#xf146;&#xf157;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf150;&#xf246;&#xf145;&#xf161;&#xf249;&#xf146;&#xf157;&#xf245;&#xf249;&#xf146;&#xf158;&#xf245;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf146;&#xf159;&#xf248;&#xf145;&#xf15b;&#xf248;&#xf145;&#xf161;&#xf249;&#xf146;&#xf157;&#xf245;&#xf246;&#xf146;&#xf15a;&#xf248;&#xf145;&#xf15c;&#xf248;&#xf145;&#xf161;&#xf249;&#xf146;&#xf157;&#xf245;&#xf245;&#xf248;&#xf15d;&#xf248;&#xf154;&#xf24a;&#xf15e;&#xf246;&#xf145;&#xf162;&#xf249;&#xf146;&#xf157;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf150;&#xf249;&#xf146;&#xf159;&#xf248;&#xf154;&#xf24a;&#xf145;&#xf178;&#xf246;&#xf154;&#xf246;&#xf154;&#xf249;&#xf146;&#xf159;&#xf246;&#xf154;&#xf246;&#xf154;&#xf24a;&#xf146;&#xf156;&#xf248;&#xf154;&#xf249;&#xf146;&#xf159;&#xf245;&#xf249;&#xf146;&#xf15a;&#xf245;&#xf245;&#xf245;&#xf249;&#xf146;&#xf158;&#xf24b;",
    "stanza": 1296
  },
  {
    "role": "doc",
    "lines": [
      "add conditional form"
    ],
    "stanza": 1297
  },
  {
    "role": "code",
    "lines": [
      "intro cond;"
    ],
    "preprocessed": "intro cond;",
    "dt": false,
    "parse": [
      "intro",
      "cond"
    ],
    "code": "12100103121001011132233",
    "spider": "&#xf156;&#xf24a;&#xf146;&#xf15b;&#xf24b;",
    "stanza": 1298
  },
  {
    "role": "code",
    "lines": [
      "define translate | let ((prev $translate)) | ? x |",
      "  if (not | function? $x) (prev $x) |",
      "  if (not | = cond | head $x) (prev $x) |",
      "  let ((cnd | head | tail $x)",
      "       (rem | tail | tail $x)) |",
      "    if (= 0 | list-length $rem) (translate $cnd) |",
      "    translate (vector if (first $cnd) (second $cnd) (prepend cond $rem));"
    ],
    "preprocessed": "define translate | let ((prev $translate)) | ? x |\n  if (not | function? $x) (prev $x) |\n  if (not | = cond | head $x) (prev $x) |\n  let ((cnd | head | tail $x)\n       (rem | tail | tail $x)) |\n    if (= 0 | list-length $rem) (translate $cnd) |\n    translate (vector if (first $cnd) (second $cnd) (prepend cond $rem));",
    "dt": true,
    "parse": [
      "define",
      "translate",
      [
        -1,
        "let",
        [
          [
            "prev",
            [
              -2,
              "translate"
            ]
          ]
        ],
        [
          -1,
          "?",
          "x",
          [
            -1,
            "if",
            [
              "not",
              [
                -1,
                "function?",
                [
                  -2,
                  "x"
                ]
              ]
            ],
            [
              "prev",
              [
                -2,
                "x"
              ]
            ],
            [
              -1,
              "if",
              [
                "not",
                [
                  -1,
                  "=",
                  "cond",
                  [
                    -1,
                    "head",
                    [
                      -2,
                      "x"
                    ]
                  ]
                ]
              ],
              [
                "prev",
                [
                  -2,
                  "x"
                ]
              ],
              [
                -1,
                "let",
                [
                  [
                    "cnd",
                    [
                      -1,
                      "head",
                      [
                        -1,
                        "tail",
                        [
                          -2,
                          "x"
                        ]
                      ]
                    ]
                  ],
                  [
                    "rem",
                    [
                      -1,
                      "tail",
                      [
                        -1,
                        "tail",
                        [
                          -2,
                          "x"
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  -1,
                  "if",
                  [
                    "=",
                    "0",
                    [
                      -1,
                      "list-length",
                      [
                        -2,
                        "rem"
                      ]
                    ]
                  ],
                  [
                    "translate",
                    [
                      -2,
                      "cnd"
                    ]
                  ],
                  [
                    -1,
                    "translate",
                    [
                      "vector",
                      "if",
                      [
                        "first",
                        [
                          -2,
                          "cnd"
                        ]
                      ],
                      [
                        "second",
                        [
                          -2,
                          "cnd"
                        ]
                      ],
                      [
                        "prepend",
                        "cond",
                        [
                          -2,
                          "rem"
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312110013023121110100322121110111312312110013330231211003121010013023121111321210130231210110031231210100133212111011131231210100133023121111321210130231211312100101113023121010000312312101001332121110111312312101001330231211101003221210011000302312101000030231210100013123121010013321210011001302312101000130231210100013123121010013330231211113212113020302312101001031231210011001332121100131231210011000330231211001321210000312111132121010111312312100110003321210110003123121001100033212101010131210010111312312100110013332233",
    "spider": "&#xf151;&#xf24a;&#xf15d;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf145;&#xf17b;&#xf249;&#xf15d;&#xf245;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf170;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf17b;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf147;&#xf24a;&#xf146;&#xf15b;&#xf248;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf17b;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf146;&#xf15c;&#xf248;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf146;&#xf15d;&#xf248;&#xf145;&#xf155;&#xf248;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf245;&#xf245;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf249;&#xf146;&#xf15d;&#xf245;&#xf246;&#xf15d;&#xf249;&#xf146;&#xf15c;&#xf245;&#xf248;&#xf15d;&#xf246;&#xf154;&#xf24a;&#xf153;&#xf246;&#xf145;&#xf15b;&#xf249;&#xf146;&#xf15c;&#xf245;&#xf246;&#xf145;&#xf15c;&#xf249;&#xf146;&#xf15c;&#xf245;&#xf246;&#xf145;&#xf159;&#xf24a;&#xf146;&#xf15b;&#xf249;&#xf146;&#xf15d;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1299
  },
  {
    "role": "code",
    "lines": [
      "= 99 | cond 99;"
    ],
    "preprocessed": "= 99 | cond 99;",
    "dt": false,
    "parse": [
      "=",
      "99",
      [
        -1,
        "cond",
        "99"
      ]
    ],
    "code": "1211302110001130231210010111302110001132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf227;&#xf248;&#xf146;&#xf15b;&#xf24a;&#xf205;&#xf227;&#xf24b;",
    "stanza": 1300
  },
  {
    "role": "code",
    "lines": [
      "= 8 | cond ($true 8) 11;"
    ],
    "preprocessed": "= 8 | cond ($true 8) 11;",
    "dt": false,
    "parse": [
      "=",
      "8",
      [
        -1,
        "cond",
        [
          [
            -2,
            "true"
          ],
          "8"
        ],
        "11"
      ]
    ],
    "code": "12113021000302312100101113212312130210003302101132233",
    "spider": "&#xf147;&#xf24a;&#xf20c;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf249;&#xf145;&#xf24a;&#xf20c;&#xf245;&#xf20f;&#xf24b;",
    "stanza": 1301
  },
  {
    "role": "code",
    "lines": [
      "= 11 | cond ($false 8) 11;"
    ],
    "preprocessed": "= 11 | cond ($false 8) 11;",
    "dt": false,
    "parse": [
      "=",
      "11",
      [
        -1,
        "cond",
        [
          [
            -2,
            "false"
          ],
          "8"
        ],
        "11"
      ]
    ],
    "code": "12113021011302312100101113212312030210003302101132233",
    "spider": "&#xf147;&#xf24a;&#xf20f;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf249;&#xf144;&#xf24a;&#xf20c;&#xf245;&#xf20f;&#xf24b;",
    "stanza": 1302
  },
  {
    "role": "code",
    "lines": [
      "= 7 | cond ($false 3) ($true 7) 11;"
    ],
    "preprocessed": "= 7 | cond ($false 3) ($true 7) 11;",
    "dt": false,
    "parse": [
      "=",
      "7",
      [
        -1,
        "cond",
        [
          [
            -2,
            "false"
          ],
          "3"
        ],
        [
          [
            -2,
            "true"
          ],
          "7"
        ],
        "11"
      ]
    ],
    "code": "12113021113023121001011132123120302113321231213021113302101132233",
    "spider": "&#xf147;&#xf24a;&#xf20b;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf249;&#xf144;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf249;&#xf145;&#xf24a;&#xf20b;&#xf245;&#xf20f;&#xf24b;",
    "stanza": 1303
  },
  {
    "role": "code",
    "lines": [
      "= 3 | cond ($true 3) ($true 7) 11;"
    ],
    "preprocessed": "= 3 | cond ($true 3) ($true 7) 11;",
    "dt": false,
    "parse": [
      "=",
      "3",
      [
        -1,
        "cond",
        [
          [
            -2,
            "true"
          ],
          "3"
        ],
        [
          [
            -2,
            "true"
          ],
          "7"
        ],
        "11"
      ]
    ],
    "code": "1211302113023121001011132123121302113321231213021113302101132233",
    "spider": "&#xf147;&#xf24a;&#xf207;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf249;&#xf145;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf249;&#xf145;&#xf24a;&#xf20b;&#xf245;&#xf20f;&#xf24b;",
    "stanza": 1304
  },
  {
    "role": "code",
    "lines": [
      "= 11 | cond ($false 3) ($false 7) 11;"
    ],
    "preprocessed": "= 11 | cond ($false 3) ($false 7) 11;",
    "dt": false,
    "parse": [
      "=",
      "11",
      [
        -1,
        "cond",
        [
          [
            -2,
            "false"
          ],
          "3"
        ],
        [
          [
            -2,
            "false"
          ],
          "7"
        ],
        "11"
      ]
    ],
    "code": "121130210113023121001011132123120302113321231203021113302101132233",
    "spider": "&#xf147;&#xf24a;&#xf20f;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf249;&#xf144;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf249;&#xf144;&#xf24a;&#xf20b;&#xf245;&#xf20f;&#xf24b;",
    "stanza": 1305
  },
  {
    "role": "code",
    "lines": [
      "define remove-match | lambda (test lst) |",
      "  if (= 0 | list-length $lst) $lst |",
      "  if (test | head $lst) (remove-match $test (tail $lst)) |",
      "  prepend (head $lst) (remove-match $test (tail $lst));"
    ],
    "preprocessed": "define remove-match | lambda (test lst) |\n  if (= 0 | list-length $lst) $lst |\n  if (test | head $lst) (remove-match $test (tail $lst)) |\n  prepend (head $lst) (remove-match $test (tail $lst));",
    "dt": true,
    "parse": [
      "define",
      "remove-match",
      [
        -1,
        "lambda",
        [
          "test",
          "lst"
        ],
        [
          -1,
          "if",
          [
            "=",
            "0",
            [
              -1,
              "list-length",
              [
                -2,
                "lst"
              ]
            ]
          ],
          [
            -2,
            "lst"
          ],
          [
            -1,
            "if",
            [
              "test",
              [
                -1,
                "head",
                [
                  -2,
                  "lst"
                ]
              ]
            ],
            [
              "remove-match",
              [
                -2,
                "test"
              ],
              [
                "tail",
                [
                  -2,
                  "lst"
                ]
              ]
            ],
            [
              -1,
              "prepend",
              [
                "head",
                [
                  -2,
                  "lst"
                ]
              ],
              [
                "remove-match",
                [
                  -2,
                  "test"
                ],
                [
                  "tail",
                  [
                    -2,
                    "lst"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312100110103023121101032121100011312110000133023121111321211302030231210100103123121100001331231211000013023121111321211000113023121010000312312110000133212100110103123121100011321210100013123121100001333023121010101321210100003123121100001332121001101031231211000113212101000131231211000013332233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf15e;&#xf248;&#xf15e;&#xf246;&#xf145;&#xf167;&#xf24a;&#xf145;&#xf165;&#xf245;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf249;&#xf145;&#xf165;&#xf245;&#xf249;&#xf145;&#xf165;&#xf248;&#xf153;&#xf246;&#xf145;&#xf167;&#xf248;&#xf145;&#xf154;&#xf249;&#xf145;&#xf165;&#xf245;&#xf246;&#xf146;&#xf15e;&#xf249;&#xf145;&#xf167;&#xf246;&#xf145;&#xf155;&#xf249;&#xf145;&#xf165;&#xf245;&#xf245;&#xf248;&#xf145;&#xf159;&#xf246;&#xf145;&#xf154;&#xf249;&#xf145;&#xf165;&#xf245;&#xf246;&#xf146;&#xf15e;&#xf249;&#xf145;&#xf167;&#xf246;&#xf145;&#xf155;&#xf249;&#xf145;&#xf165;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1306
  },
  {
    "role": "code",
    "lines": [
      "define remove-element | ? x |",
      "  remove-match (? y | = $y $x);"
    ],
    "preprocessed": "define remove-element | ? x |\n  remove-match (? y | = $y $x);",
    "dt": true,
    "parse": [
      "define",
      "remove-element",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "remove-match",
          [
            "?",
            "y",
            [
              -1,
              "=",
              [
                -2,
                "y"
              ],
              [
                -2,
                "x"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210011011302312110031210100130231210011010321211003121000001302312113123121000001312312101001332233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf15f;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15e;&#xf246;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf147;&#xf249;&#xf145;&#xf145;&#xf249;&#xf16d;&#xf245;&#xf24b;",
    "stanza": 1307
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 1 2 3 5) | remove-element 4 | vector 1 2 3 4 5;"
    ],
    "preprocessed": "list= (vector 1 2 3 5) | remove-element 4 | vector 1 2 3 4 5;",
    "dt": false,
    "parse": [
      "list=",
      [
        "vector",
        "1",
        "2",
        "3",
        "5"
      ],
      [
        -1,
        "remove-element",
        "4",
        [
          -1,
          "vector",
          "1",
          "2",
          "3",
          "4",
          "5"
        ]
      ]
    ],
    "code": "12101010032121000030213021030211302101330231210011011302100302312100003021302103021130210030210132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf146;&#xf15f;&#xf24a;&#xf208;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 1308
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 1 2 3 5) | remove-element 4 | vector 1 4 2 4 3 4 5;"
    ],
    "preprocessed": "list= (vector 1 2 3 5) | remove-element 4 | vector 1 4 2 4 3 4 5;",
    "dt": false,
    "parse": [
      "list=",
      [
        "vector",
        "1",
        "2",
        "3",
        "5"
      ],
      [
        -1,
        "remove-element",
        "4",
        [
          -1,
          "vector",
          "1",
          "4",
          "2",
          "4",
          "3",
          "4",
          "5"
        ]
      ]
    ],
    "code": "12101010032121000030213021030211302101330231210011011302100302312100003021302100302103021003021130210030210132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf146;&#xf15f;&#xf24a;&#xf208;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 1309
  },
  {
    "role": "code",
    "lines": [
      "intro instanceof;"
    ],
    "preprocessed": "intro instanceof;",
    "dt": false,
    "parse": [
      "intro",
      "instanceof"
    ],
    "code": "12100103121001110032233",
    "spider": "&#xf156;&#xf24a;&#xf146;&#xf160;&#xf24b;",
    "stanza": 1310
  },
  {
    "role": "code",
    "lines": [
      "define instanceof | ? T | ? t |",
      "  if (not | function? $t) (= $T int) |",
      "  function? | (objectify $t) $T;"
    ],
    "preprocessed": "define instanceof | ? T | ? t |\n  if (not | function? $t) (= $T int) |\n  function? | (objectify $t) $T;",
    "dt": true,
    "parse": [
      "define",
      "instanceof",
      [
        -1,
        "?",
        "T",
        [
          -1,
          "?",
          "t",
          [
            -1,
            "if",
            [
              "not",
              [
                -1,
                "function?",
                [
                  -2,
                  "t"
                ]
              ]
            ],
            [
              "=",
              [
                -2,
                "T"
              ],
              "int"
            ],
            [
              -1,
              "function?",
              [
                -1,
                [
                  "objectify",
                  [
                    -2,
                    "t"
                  ]
                ],
                [
                  -2,
                  "T"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210011100302312110031210011101302312110031210011110302312111132121013023121011003123121001111033212113123121001110131211111033023121011003023212100100103123121001111033123121001110132233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf160;&#xf248;&#xf150;&#xf24a;&#xf146;&#xf161;&#xf248;&#xf150;&#xf24a;&#xf146;&#xf162;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf170;&#xf249;&#xf146;&#xf162;&#xf245;&#xf246;&#xf147;&#xf249;&#xf146;&#xf161;&#xf24a;&#xf182;&#xf245;&#xf248;&#xf170;&#xf248;&#xf246;&#xf146;&#xf156;&#xf249;&#xf146;&#xf162;&#xf245;&#xf249;&#xf146;&#xf161;&#xf24b;",
    "stanza": 1311
  },
  {
    "role": "code",
    "lines": [
      "define return | ? T | ? t |",
      "  let ((obj | objectify $t)) |",
      "    obj $T;"
    ],
    "preprocessed": "define return | ? T | ? t |\n  let ((obj | objectify $t)) |\n    obj $T;",
    "dt": true,
    "parse": [
      "define",
      "return",
      [
        -1,
        "?",
        "T",
        [
          -1,
          "?",
          "t",
          [
            -1,
            "let",
            [
              [
                "obj",
                [
                  -1,
                  "objectify",
                  [
                    -2,
                    "t"
                  ]
                ]
              ]
            ],
            [
              -1,
              "obj",
              [
                -2,
                "T"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121001111130231211003121001110130231211003121001111030231211101003221210100000302312100100103123121001111033302312101000003123121001110132233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf163;&#xf248;&#xf150;&#xf24a;&#xf146;&#xf161;&#xf248;&#xf150;&#xf24a;&#xf146;&#xf162;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf146;&#xf164;&#xf248;&#xf146;&#xf156;&#xf249;&#xf146;&#xf162;&#xf245;&#xf245;&#xf248;&#xf146;&#xf164;&#xf249;&#xf146;&#xf161;&#xf24b;",
    "stanza": 1312
  },
  {
    "role": "code",
    "lines": [
      "define tester | lambda ((x int) (y int)) |",
      "  return int | + $x $y;"
    ],
    "preprocessed": "define tester | lambda ((x int) (y int)) |\n  return int | + $x $y;",
    "dt": true,
    "parse": [
      "define",
      "tester",
      [
        -1,
        "lambda",
        [
          [
            "x",
            "int"
          ],
          [
            "y",
            "int"
          ]
        ],
        [
          -1,
          "return",
          "int",
          [
            -1,
            "+",
            [
              -2,
              "x"
            ],
            [
              -2,
              "y"
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210100001302312110103221210100131211111033212100000131211111033302312100111113121111103023121010312312101001312312100000132233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf165;&#xf248;&#xf15e;&#xf246;&#xf246;&#xf16d;&#xf24a;&#xf182;&#xf245;&#xf246;&#xf145;&#xf145;&#xf24a;&#xf182;&#xf245;&#xf245;&#xf248;&#xf146;&#xf163;&#xf24a;&#xf182;&#xf248;&#xf14e;&#xf249;&#xf16d;&#xf249;&#xf145;&#xf145;&#xf24b;",
    "stanza": 1313
  },
  {
    "role": "code",
    "lines": [
      "instanceof int 10;"
    ],
    "preprocessed": "instanceof int 10;",
    "dt": false,
    "parse": [
      "instanceof",
      "int",
      "10"
    ],
    "code": "1210011100312111110302101032233",
    "spider": "&#xf146;&#xf160;&#xf24a;&#xf182;&#xf24a;&#xf20e;&#xf24b;",
    "stanza": 1314
  },
  {
    "role": "code",
    "lines": [
      "= 42 | tester (make-integer 10) (make-integer 32);"
    ],
    "preprocessed": "= 42 | tester (make-integer 10) (make-integer 32);",
    "dt": false,
    "parse": [
      "=",
      "42",
      [
        -1,
        "tester",
        [
          "make-integer",
          "10"
        ],
        [
          "make-integer",
          "32"
        ]
      ]
    ],
    "code": "12113021010103023121010000132121001000130210103321210010001302100000332233",
    "spider": "&#xf147;&#xf24a;&#xf22e;&#xf248;&#xf146;&#xf165;&#xf246;&#xf146;&#xf155;&#xf24a;&#xf20e;&#xf245;&#xf246;&#xf146;&#xf155;&#xf24a;&#xf224;&#xf245;&#xf24b;",
    "stanza": 1315
  },
  {
    "role": "code",
    "lines": [
      "= 42 | tester 10 32;"
    ],
    "preprocessed": "= 42 | tester 10 32;",
    "dt": false,
    "parse": [
      "=",
      "42",
      [
        -1,
        "tester",
        "10",
        "32"
      ]
    ],
    "code": "121130210101030231210100001302101030210000032233",
    "spider": "&#xf147;&#xf24a;&#xf22e;&#xf248;&#xf146;&#xf165;&#xf24a;&#xf20e;&#xf24a;&#xf224;&#xf24b;",
    "stanza": 1316
  },
  {
    "role": "code",
    "lines": [
      "intro reflective;"
    ],
    "preprocessed": "intro reflective;",
    "dt": false,
    "parse": [
      "intro",
      "reflective"
    ],
    "code": "12100103121010001032233",
    "spider": "&#xf156;&#xf24a;&#xf146;&#xf166;&#xf24b;",
    "stanza": 1317
  },
  {
    "role": "code",
    "lines": [
      "define reflective | ? f |",
      "  (? x | f | ? y | (x $x) $y)",
      "  (? x | f | ? y | (x $x) $y);"
    ],
    "preprocessed": "define reflective | ? f |\n  (? x | f | ? y | (x $x) $y)\n  (? x | f | ? y | (x $x) $y);",
    "dt": true,
    "parse": [
      "define",
      "reflective",
      [
        -1,
        "?",
        "f",
        [
          -1,
          [
            "?",
            "x",
            [
              -1,
              "f",
              [
                -1,
                "?",
                "y",
                [
                  -1,
                  [
                    "x",
                    [
                      -2,
                      "x"
                    ]
                  ],
                  [
                    -2,
                    "y"
                  ]
                ]
              ]
            ]
          ],
          [
            "?",
            "x",
            [
              -1,
              "f",
              [
                -1,
                "?",
                "y",
                [
                  -1,
                  [
                    "x",
                    [
                      -2,
                      "x"
                    ]
                  ],
                  [
                    -2,
                    "y"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312101000103023121100312101000113023212110031210100130231210100011302312110031210000013023212101001312312101001331231210000013321211003121010013023121010001130231211003121000001302321210100131231210100133123121000001332233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf166;&#xf248;&#xf150;&#xf24a;&#xf146;&#xf167;&#xf248;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf167;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf246;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf145;&#xf145;&#xf245;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf167;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf246;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf145;&#xf145;&#xf245;&#xf24b;",
    "stanza": 1318
  },
  {
    "role": "code",
    "lines": [
      "define woop | reflective | ? self | ? x | if (= $x 10) 22 (self 10);"
    ],
    "preprocessed": "define woop | reflective | ? self | ? x | if (= $x 10) 22 (self 10);",
    "dt": true,
    "parse": [
      "define",
      "woop",
      [
        -1,
        "reflective",
        [
          -1,
          "?",
          "self",
          [
            -1,
            "?",
            "x",
            [
              -1,
              "if",
              [
                "=",
                [
                  -2,
                  "x"
                ],
                "10"
              ],
              "22",
              [
                "self",
                "10"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210100100302312101000103023121100312101001013023121100312101001302312111132121131231210100130210103302101103212101001013021010332233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf168;&#xf248;&#xf146;&#xf166;&#xf248;&#xf150;&#xf24a;&#xf146;&#xf169;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20e;&#xf245;&#xf21a;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf20e;&#xf245;&#xf24b;",
    "stanza": 1319
  },
  {
    "role": "code",
    "lines": [
      "= (woop 1) 22;"
    ],
    "preprocessed": "= (woop 1) 22;",
    "dt": false,
    "parse": [
      "=",
      [
        "woop",
        "1"
      ],
      "22"
    ],
    "code": "1211321210100100302133021011032233",
    "spider": "&#xf147;&#xf246;&#xf146;&#xf168;&#xf24a;&#xf205;&#xf245;&#xf21a;&#xf24b;",
    "stanza": 1320
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "message passing / object example - a 2D point",
    "section_category": "OBJECT",
    "section_index": 37,
    "stanza": 1321
  },
  {
    "role": "code",
    "lines": [
      "intro point;"
    ],
    "preprocessed": "intro point;",
    "dt": false,
    "parse": [
      "intro",
      "point"
    ],
    "code": "12100103121010011032233",
    "spider": "&#xf156;&#xf24a;&#xf146;&#xf16a;&#xf24b;",
    "stanza": 1322
  },
  {
    "role": "code",
    "lines": [
      "define point | lambda (x y) | reflective |",
      "  lambda (self msg) | cond",
      "    ((= $msg x) $x)",
      "    ((= $msg y) $y)",
      "    ((= $msg point) $self)",
      "    ((= $msg +) | lambda ((p point)) |",
      "                    point (+ $x | p x) (+ $y | p y))",
      "    ((= $msg =) | lambda ((p point)) |",
      "                    and (= $x | p x) (= $y | p y))",
      "    0;"
    ],
    "preprocessed": "define point | lambda (x y) | reflective |\n  lambda (self msg) | cond\n    ((= $msg x) $x)\n    ((= $msg y) $y)\n    ((= $msg point) $self)\n    ((= $msg +) | lambda ((p point)) |\n                    point (+ $x | p x) (+ $y | p y))\n    ((= $msg =) | lambda ((p point)) |\n                    and (= $x | p x) (= $y | p y))\n    0;",
    "dt": true,
    "parse": [
      "define",
      "point",
      [
        -1,
        "lambda",
        [
          "x",
          "y"
        ],
        [
          -1,
          "reflective",
          [
            -1,
            "lambda",
            [
              "self",
              "msg"
            ],
            [
              -1,
              "cond",
              [
                [
                  "=",
                  [
                    -2,
                    "msg"
                  ],
                  "x"
                ],
                [
                  -2,
                  "x"
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "msg"
                  ],
                  "y"
                ],
                [
                  -2,
                  "y"
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "msg"
                  ],
                  "point"
                ],
                [
                  -2,
                  "self"
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "msg"
                  ],
                  "+"
                ],
                [
                  -1,
                  "lambda",
                  [
                    [
                      "p",
                      "point"
                    ]
                  ],
                  [
                    -1,
                    "point",
                    [
                      "+",
                      [
                        -2,
                        "x"
                      ],
                      [
                        -1,
                        "p",
                        "x"
                      ]
                    ],
                    [
                      "+",
                      [
                        -2,
                        "y"
                      ],
                      [
                        -1,
                        "p",
                        "y"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "msg"
                  ],
                  "="
                ],
                [
                  -1,
                  "lambda",
                  [
                    [
                      "p",
                      "point"
                    ]
                  ],
                  [
                    -1,
                    "and",
                    [
                      "=",
                      [
                        -2,
                        "x"
                      ],
                      [
                        -1,
                        "p",
                        "x"
                      ]
                    ],
                    [
                      "=",
                      [
                        -2,
                        "y"
                      ],
                      [
                        -1,
                        "p",
                        "y"
                      ]
                    ]
                  ]
                ]
              ],
              "0"
            ]
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf16a;&#xf248;&#xf15e;&#xf246;&#xf16d;&#xf24a;&#xf145;&#xf145;&#xf245;&#xf248;&#xf146;&#xf166;&#xf248;&#xf15e;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf146;&#xf16b;&#xf245;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf146;&#xf16b;&#xf24a;&#xf16d;&#xf245;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf146;&#xf16b;&#xf24a;&#xf145;&#xf145;&#xf245;&#xf249;&#xf145;&#xf145;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf146;&#xf16b;&#xf24a;&#xf146;&#xf16a;&#xf245;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf146;&#xf16b;&#xf24a;&#xf14e;&#xf245;&#xf248;&#xf15e;&#xf246;&#xf246;&#xf146;&#xf16c;&#xf24a;&#xf146;&#xf16a;&#xf245;&#xf245;&#xf248;&#xf146;&#xf16a;&#xf246;&#xf14e;&#xf249;&#xf16d;&#xf248;&#xf146;&#xf16c;&#xf24a;&#xf16d;&#xf245;&#xf246;&#xf14e;&#xf249;&#xf145;&#xf145;&#xf248;&#xf146;&#xf16c;&#xf24a;&#xf145;&#xf145;&#xf245;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf146;&#xf16b;&#xf24a;&#xf147;&#xf245;&#xf248;&#xf15e;&#xf246;&#xf246;&#xf146;&#xf16c;&#xf24a;&#xf146;&#xf16a;&#xf245;&#xf245;&#xf248;&#xf14a;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf248;&#xf146;&#xf16c;&#xf24a;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf249;&#xf145;&#xf145;&#xf248;&#xf146;&#xf16c;&#xf24a;&#xf145;&#xf145;&#xf245;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1323
  },
  {
    "role": "code",
    "lines": [
      "define point1 | point 1 11;"
    ],
    "preprocessed": "define point1 | point 1 11;",
    "dt": true,
    "parse": [
      "define",
      "point1",
      [
        -1,
        "point",
        "1",
        "11"
      ]
    ],
    "code": "12110131210101001302312101001103021302101132233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf16d;&#xf248;&#xf146;&#xf16a;&#xf24a;&#xf205;&#xf24a;&#xf20f;&#xf24b;",
    "stanza": 1324
  },
  {
    "role": "code",
    "lines": [
      "define point2 | point 2 22;"
    ],
    "preprocessed": "define point2 | point 2 22;",
    "dt": true,
    "parse": [
      "define",
      "point2",
      [
        -1,
        "point",
        "2",
        "22"
      ]
    ],
    "code": "1211013121010101030231210100110302103021011032233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf16e;&#xf248;&#xf146;&#xf16a;&#xf24a;&#xf206;&#xf24a;&#xf21a;&#xf24b;",
    "stanza": 1325
  },
  {
    "role": "code",
    "lines": [
      "= 1 | point1 x;"
    ],
    "preprocessed": "= 1 | point1 x;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "point1",
        "x"
      ]
    ],
    "code": "121130213023121010100131210100132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf146;&#xf16d;&#xf24a;&#xf16d;&#xf24b;",
    "stanza": 1326
  },
  {
    "role": "code",
    "lines": [
      "= 22 | point2 y;"
    ],
    "preprocessed": "= 22 | point2 y;",
    "dt": false,
    "parse": [
      "=",
      "22",
      [
        -1,
        "point2",
        "y"
      ]
    ],
    "code": "12113021011030231210101010312100000132233",
    "spider": "&#xf147;&#xf24a;&#xf21a;&#xf248;&#xf146;&#xf16e;&#xf24a;&#xf145;&#xf145;&#xf24b;",
    "stanza": 1327
  },
  {
    "role": "code",
    "lines": [
      "= 11 | (point 11 12) x;"
    ],
    "preprocessed": "= 11 | (point 11 12) x;",
    "dt": false,
    "parse": [
      "=",
      "11",
      [
        -1,
        [
          "point",
          "11",
          "12"
        ],
        "x"
      ]
    ],
    "code": "1211302101130232121010011030210113021100331210100132233",
    "spider": "&#xf147;&#xf24a;&#xf20f;&#xf248;&#xf246;&#xf146;&#xf16a;&#xf24a;&#xf20f;&#xf24a;&#xf210;&#xf245;&#xf16d;&#xf24b;",
    "stanza": 1328
  },
  {
    "role": "code",
    "lines": [
      "= 11 | ((point 11 12) point) x;"
    ],
    "preprocessed": "= 11 | ((point 11 12) point) x;",
    "dt": false,
    "parse": [
      "=",
      "11",
      [
        -1,
        [
          [
            "point",
            "11",
            "12"
          ],
          "point"
        ],
        "x"
      ]
    ],
    "code": "12113021011302322121010011030210113021100331210100110331210100132233",
    "spider": "&#xf147;&#xf24a;&#xf20f;&#xf248;&#xf246;&#xf246;&#xf146;&#xf16a;&#xf24a;&#xf20f;&#xf24a;&#xf210;&#xf245;&#xf146;&#xf16a;&#xf245;&#xf16d;&#xf24b;",
    "stanza": 1329
  },
  {
    "role": "code",
    "lines": [
      "= 16 | ((point 16 17) point) x;"
    ],
    "preprocessed": "= 16 | ((point 16 17) point) x;",
    "dt": false,
    "parse": [
      "=",
      "16",
      [
        -1,
        [
          [
            "point",
            "16",
            "17"
          ],
          "point"
        ],
        "x"
      ]
    ],
    "code": "12113021000030232212101001103021000030210001331210100110331210100132233",
    "spider": "&#xf147;&#xf24a;&#xf214;&#xf248;&#xf246;&#xf246;&#xf146;&#xf16a;&#xf24a;&#xf214;&#xf24a;&#xf215;&#xf245;&#xf146;&#xf16a;&#xf245;&#xf16d;&#xf24b;",
    "stanza": 1330
  },
  {
    "role": "code",
    "lines": [
      "= 33 | (point1 + $point2) y;"
    ],
    "preprocessed": "= 33 | (point1 + $point2) y;",
    "dt": false,
    "parse": [
      "=",
      "33",
      [
        -1,
        [
          "point1",
          "+",
          [
            -2,
            "point2"
          ]
        ],
        "y"
      ]
    ],
    "code": "12113021000013023212101010013121010312312101010103312100000132233",
    "spider": "&#xf147;&#xf24a;&#xf225;&#xf248;&#xf246;&#xf146;&#xf16d;&#xf24a;&#xf14e;&#xf249;&#xf146;&#xf16e;&#xf245;&#xf145;&#xf145;&#xf24b;",
    "stanza": 1331
  },
  {
    "role": "code",
    "lines": [
      "point1 + $point2 = | point 3 33;"
    ],
    "preprocessed": "point1 + $point2 = | point 3 33;",
    "dt": false,
    "parse": [
      "point1",
      "+",
      [
        -2,
        "point2"
      ],
      "=",
      [
        -1,
        "point",
        "3",
        "33"
      ]
    ],
    "code": "121010100131210103123121010101031211302312101001103021130210000132233",
    "spider": "&#xf146;&#xf16d;&#xf24a;&#xf14e;&#xf249;&#xf146;&#xf16e;&#xf24a;&#xf147;&#xf248;&#xf146;&#xf16a;&#xf24a;&#xf207;&#xf24a;&#xf225;&#xf24b;",
    "stanza": 1332
  },
  {
    "role": "code",
    "lines": [
      "point2 + $point1 = | point 3 33;"
    ],
    "preprocessed": "point2 + $point1 = | point 3 33;",
    "dt": false,
    "parse": [
      "point2",
      "+",
      [
        -2,
        "point1"
      ],
      "=",
      [
        -1,
        "point",
        "3",
        "33"
      ]
    ],
    "code": "121010101031210103123121010100131211302312101001103021130210000132233",
    "spider": "&#xf146;&#xf16e;&#xf24a;&#xf14e;&#xf249;&#xf146;&#xf16d;&#xf24a;&#xf147;&#xf248;&#xf146;&#xf16a;&#xf24a;&#xf207;&#xf24a;&#xf225;&#xf24b;",
    "stanza": 1333
  },
  {
    "role": "code",
    "lines": [
      "(point 100 200) + (point 200 100) = (point 300 300);"
    ],
    "preprocessed": "(point 100 200) + (point 200 100) = (point 300 300);",
    "dt": false,
    "parse": [
      [
        "point",
        "100",
        "200"
      ],
      "+",
      [
        "point",
        "200",
        "100"
      ],
      "=",
      [
        "point",
        "300",
        "300"
      ]
    ],
    "code": "2121010011030211001003021100100033121010321210100110302110010003021100100331211321210100110302100101100302100101100332233",
    "spider": "&#xf246;&#xf146;&#xf16a;&#xf24a;&#xf205;&#xf228;&#xf24a;&#xf207;&#xf20c;&#xf245;&#xf14e;&#xf246;&#xf146;&#xf16a;&#xf24a;&#xf207;&#xf20c;&#xf24a;&#xf205;&#xf228;&#xf245;&#xf147;&#xf246;&#xf146;&#xf16a;&#xf24a;&#xf208;&#xf230;&#xf24a;&#xf208;&#xf230;&#xf245;&#xf24b;",
    "stanza": 1334
  },
  {
    "role": "code",
    "lines": [
      "instanceof point $point1;"
    ],
    "preprocessed": "instanceof point $point1;",
    "dt": false,
    "parse": [
      "instanceof",
      "point",
      [
        -2,
        "point1"
      ]
    ],
    "code": "1210011100312101001103123121010100132233",
    "spider": "&#xf146;&#xf160;&#xf24a;&#xf146;&#xf16a;&#xf249;&#xf146;&#xf16d;&#xf24b;",
    "stanza": 1335
  },
  {
    "role": "code",
    "lines": [
      "not | instanceof int $point1;"
    ],
    "preprocessed": "not | instanceof int $point1;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "instanceof",
        "int",
        [
          -2,
          "point1"
        ]
      ]
    ],
    "code": "12101302312100111003121111103123121010100132233",
    "spider": "&#xf149;&#xf248;&#xf146;&#xf160;&#xf24a;&#xf182;&#xf249;&#xf146;&#xf16d;&#xf24b;",
    "stanza": 1336
  },
  {
    "role": "code",
    "lines": [
      "instanceof int 5;"
    ],
    "preprocessed": "instanceof int 5;",
    "dt": false,
    "parse": [
      "instanceof",
      "int",
      "5"
    ],
    "code": "121001110031211111030210132233",
    "spider": "&#xf146;&#xf160;&#xf24a;&#xf182;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 1337
  },
  {
    "role": "code",
    "lines": [
      "not | instanceof point 5;"
    ],
    "preprocessed": "not | instanceof point 5;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "instanceof",
        "point",
        "5"
      ]
    ],
    "code": "12101302312100111003121010011030210132233",
    "spider": "&#xf149;&#xf248;&#xf146;&#xf160;&#xf24a;&#xf146;&#xf16a;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 1338
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "message passing / object example - a container",
    "section_category": "OBJECT",
    "section_index": 38,
    "stanza": 1339
  },
  {
    "role": "code",
    "lines": [
      "intro container;"
    ],
    "preprocessed": "intro container;",
    "dt": false,
    "parse": [
      "intro",
      "container"
    ],
    "code": "12100103121010101132233",
    "spider": "&#xf156;&#xf24a;&#xf146;&#xf16f;&#xf24b;",
    "stanza": 1340
  },
  {
    "role": "code",
    "lines": [
      "define container | ? x | assign contents (make-cell | vector) | reflective |",
      "  lambda (self msg) | cond",
      "    ((= $msg container) $self)",
      "    ((= $msg inventory) | get! $contents)",
      "    ((= $msg add) | ? x | if (element $x | get! $contents) $false | ",
      "                         set! $contents | prepend $x | get! $contents)",
      "    ((= $msg remove) | ? x | set! $contents | remove-element $x | get! $contents)",
      "    ((= $msg =) | lambda ((c container)) | set:= (self inventory) (c inventory))",
      "    0;"
    ],
    "preprocessed": "define container | ? x | assign contents (make-cell | vector) | reflective |\n  lambda (self msg) | cond\n    ((= $msg container) $self)\n    ((= $msg inventory) | get! $contents)\n    ((= $msg add) | ? x | if (element $x | get! $contents) $false | \n                         set! $contents | prepend $x | get! $contents)\n    ((= $msg remove) | ? x | set! $contents | remove-element $x | get! $contents)\n    ((= $msg =) | lambda ((c container)) | set:= (self inventory) (c inventory))\n    0;",
    "dt": true,
    "parse": [
      "define",
      "container",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "assign",
          "contents",
          [
            "make-cell",
            [
              -1,
              "vector"
            ]
          ],
          [
            -1,
            "reflective",
            [
              -1,
              "lambda",
              [
                "self",
                "msg"
              ],
              [
                -1,
                "cond",
                [
                  [
                    "=",
                    [
                      -2,
                      "msg"
                    ],
                    "container"
                  ],
                  [
                    -2,
                    "self"
                  ]
                ],
                [
                  [
                    "=",
                    [
                      -2,
                      "msg"
                    ],
                    "inventory"
                  ],
                  [
                    -1,
                    "get!",
                    [
                      -2,
                      "contents"
                    ]
                  ]
                ],
                [
                  [
                    "=",
                    [
                      -2,
                      "msg"
                    ],
                    "add"
                  ],
                  [
                    -1,
                    "?",
                    "x",
                    [
                      -1,
                      "if",
                      [
                        "element",
                        [
                          -2,
                          "x"
                        ],
                        [
                          -1,
                          "get!",
                          [
                            -2,
                            "contents"
                          ]
                        ]
                      ],
                      [
                        -2,
                        "false"
                      ],
                      [
                        -1,
                        "set!",
                        [
                          -2,
                          "contents"
                        ],
                        [
                          -1,
                          "prepend",
                          [
                            -2,
                            "x"
                          ],
                          [
                            -1,
                            "get!",
                            [
                              -2,
                              "contents"
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  [
                    "=",
                    [
                      -2,
                      "msg"
                    ],
                    "remove"
                  ],
                  [
                    -1,
                    "?",
                    "x",
                    [
                      -1,
                      "set!",
                      [
                        -2,
                        "contents"
                      ],
                      [
                        -1,
                        "remove-element",
                        [
                          -2,
                          "x"
                        ],
                        [
                          -1,
                          "get!",
                          [
                            -2,
                            "contents"
                          ]
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  [
                    "=",
                    [
                      -2,
                      "msg"
                    ],
                    "="
                  ],
                  [
                    -1,
                    "lambda",
                    [
                      [
                        "c",
                        "container"
                      ]
                    ],
                    [
                      -1,
                      "set:=",
                      [
                        "self",
                        "inventory"
                      ],
                      [
                        "c",
                        "inventory"
                      ]
                    ]
                  ]
                ],
                "0"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121010101130231211003121010013023121110312101011003212110113023121000033023121010001030231211010321210100101312101001113302312100101113221211312312101001113121010101133123121010010133221211312312101001113121010110133023121110131231210101100332212113123121010011131210101110330231211003121010013023121111321211110113123121010013023121110131231210101100331231203023121110031231210101100302312101010131231210100130231211101312312101011003322121131231210100111312101011113302312110031210100130231211100312312101011003023121001101131231210100130231211101312312101011003322121131231210100111312113302312110103221210001013121010101133302312121111100312113321210100101312101011013321210001013121010110133302032233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf16f;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf152;&#xf24a;&#xf146;&#xf170;&#xf246;&#xf15f;&#xf248;&#xf154;&#xf245;&#xf248;&#xf146;&#xf166;&#xf248;&#xf15e;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf146;&#xf16b;&#xf245;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf146;&#xf16b;&#xf24a;&#xf146;&#xf16f;&#xf245;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf146;&#xf16b;&#xf24a;&#xf146;&#xf171;&#xf245;&#xf248;&#xf161;&#xf249;&#xf146;&#xf170;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf146;&#xf16b;&#xf24a;&#xf146;&#xf172;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf145;&#xf17f;&#xf249;&#xf16d;&#xf248;&#xf161;&#xf249;&#xf146;&#xf170;&#xf245;&#xf249;&#xf144;&#xf248;&#xf160;&#xf249;&#xf146;&#xf170;&#xf248;&#xf145;&#xf159;&#xf249;&#xf16d;&#xf248;&#xf161;&#xf249;&#xf146;&#xf170;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf146;&#xf16b;&#xf24a;&#xf146;&#xf173;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf160;&#xf249;&#xf146;&#xf170;&#xf248;&#xf146;&#xf15f;&#xf249;&#xf16d;&#xf248;&#xf161;&#xf249;&#xf146;&#xf170;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf146;&#xf16b;&#xf24a;&#xf147;&#xf245;&#xf248;&#xf15e;&#xf246;&#xf246;&#xf145;&#xf149;&#xf24a;&#xf146;&#xf16f;&#xf245;&#xf245;&#xf248;&#xf145;&#xf180;&#xf147;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf146;&#xf171;&#xf245;&#xf246;&#xf145;&#xf149;&#xf24a;&#xf146;&#xf171;&#xf245;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1341
  },
  {
    "role": "code",
    "lines": [
      "define pocket | container new;"
    ],
    "preprocessed": "define pocket | container new;",
    "dt": true,
    "parse": [
      "define",
      "pocket",
      [
        -1,
        "container",
        "new"
      ]
    ],
    "code": "12110131210110000302312101010113121011000132233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf174;&#xf248;&#xf146;&#xf16f;&#xf24a;&#xf146;&#xf175;&#xf24b;",
    "stanza": 1342
  },
  {
    "role": "code",
    "lines": [
      "pocket add 77;"
    ],
    "preprocessed": "pocket add 77;",
    "dt": false,
    "parse": [
      "pocket",
      "add",
      "77"
    ],
    "code": "121011000031210101110302100110132233",
    "spider": "&#xf146;&#xf174;&#xf24a;&#xf146;&#xf172;&#xf24a;&#xf205;&#xf211;&#xf24b;",
    "stanza": 1343
  },
  {
    "role": "code",
    "lines": [
      "pocket add 88;"
    ],
    "preprocessed": "pocket add 88;",
    "dt": false,
    "parse": [
      "pocket",
      "add",
      "88"
    ],
    "code": "121011000031210101110302101100032233",
    "spider": "&#xf146;&#xf174;&#xf24a;&#xf146;&#xf172;&#xf24a;&#xf205;&#xf21c;&#xf24b;",
    "stanza": 1344
  },
  {
    "role": "code",
    "lines": [
      "pocket add 99;"
    ],
    "preprocessed": "pocket add 99;",
    "dt": false,
    "parse": [
      "pocket",
      "add",
      "99"
    ],
    "code": "121011000031210101110302110001132233",
    "spider": "&#xf146;&#xf174;&#xf24a;&#xf146;&#xf172;&#xf24a;&#xf205;&#xf227;&#xf24b;",
    "stanza": 1345
  },
  {
    "role": "code",
    "lines": [
      "set:= (pocket inventory) | vector 77 88 99;"
    ],
    "preprocessed": "set:= (pocket inventory) | vector 77 88 99;",
    "dt": false,
    "parse": [
      "set:=",
      [
        "pocket",
        "inventory"
      ],
      [
        -1,
        "vector",
        "77",
        "88",
        "99"
      ]
    ],
    "code": "121211111003121133212101100003121010110133023121000030210011013021011000302110001132233",
    "spider": "&#xf145;&#xf180;&#xf147;&#xf246;&#xf146;&#xf174;&#xf24a;&#xf146;&#xf171;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf211;&#xf24a;&#xf205;&#xf21c;&#xf24a;&#xf205;&#xf227;&#xf24b;",
    "stanza": 1346
  },
  {
    "role": "code",
    "lines": [
      "pocket remove 88;"
    ],
    "preprocessed": "pocket remove 88;",
    "dt": false,
    "parse": [
      "pocket",
      "remove",
      "88"
    ],
    "code": "121011000031210101111302101100032233",
    "spider": "&#xf146;&#xf174;&#xf24a;&#xf146;&#xf173;&#xf24a;&#xf205;&#xf21c;&#xf24b;",
    "stanza": 1347
  },
  {
    "role": "code",
    "lines": [
      "set:= (pocket inventory) | vector 77 99;"
    ],
    "preprocessed": "set:= (pocket inventory) | vector 77 99;",
    "dt": false,
    "parse": [
      "set:=",
      [
        "pocket",
        "inventory"
      ],
      [
        -1,
        "vector",
        "77",
        "99"
      ]
    ],
    "code": "12121111100312113321210110000312101011013302312100003021001101302110001132233",
    "spider": "&#xf145;&#xf180;&#xf147;&#xf246;&#xf146;&#xf174;&#xf24a;&#xf146;&#xf171;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf211;&#xf24a;&#xf205;&#xf227;&#xf24b;",
    "stanza": 1348
  },
  {
    "role": "code",
    "lines": [
      "define pocket2 | container new;"
    ],
    "preprocessed": "define pocket2 | container new;",
    "dt": true,
    "parse": [
      "define",
      "pocket2",
      [
        -1,
        "container",
        "new"
      ]
    ],
    "code": "12110131210110010302312101010113121011000132233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf176;&#xf248;&#xf146;&#xf16f;&#xf24a;&#xf146;&#xf175;&#xf24b;",
    "stanza": 1349
  },
  {
    "role": "code",
    "lines": [
      "pocket2 add 77;"
    ],
    "preprocessed": "pocket2 add 77;",
    "dt": false,
    "parse": [
      "pocket2",
      "add",
      "77"
    ],
    "code": "121011001031210101110302100110132233",
    "spider": "&#xf146;&#xf176;&#xf24a;&#xf146;&#xf172;&#xf24a;&#xf205;&#xf211;&#xf24b;",
    "stanza": 1350
  },
  {
    "role": "code",
    "lines": [
      "pocket2 add 99;"
    ],
    "preprocessed": "pocket2 add 99;",
    "dt": false,
    "parse": [
      "pocket2",
      "add",
      "99"
    ],
    "code": "121011001031210101110302110001132233",
    "spider": "&#xf146;&#xf176;&#xf24a;&#xf146;&#xf172;&#xf24a;&#xf205;&#xf227;&#xf24b;",
    "stanza": 1351
  },
  {
    "role": "code",
    "lines": [
      "pocket2 = $pocket;"
    ],
    "preprocessed": "pocket2 = $pocket;",
    "dt": false,
    "parse": [
      "pocket2",
      "=",
      [
        -2,
        "pocket"
      ]
    ],
    "code": "1210110010312113123121011000032233",
    "spider": "&#xf146;&#xf176;&#xf24a;&#xf147;&#xf249;&#xf146;&#xf174;&#xf24b;",
    "stanza": 1352
  },
  {
    "role": "doc",
    "lines": [
      "a sketch of inheritance - add one method to container (count)"
    ],
    "stanza": 1353
  },
  {
    "role": "code",
    "lines": [
      "define counter-container | ? x | assign super (container new) | reflective |",
      "  lambda (self msg) | cond",
      "    ((= $msg counter-container) $self)",
      "    ((= $msg count) | list-length | super inventory)",
      "    (super $msg);"
    ],
    "preprocessed": "define counter-container | ? x | assign super (container new) | reflective |\n  lambda (self msg) | cond\n    ((= $msg counter-container) $self)\n    ((= $msg count) | list-length | super inventory)\n    (super $msg);",
    "dt": true,
    "parse": [
      "define",
      "counter-container",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "assign",
          "super",
          [
            "container",
            "new"
          ],
          [
            -1,
            "reflective",
            [
              -1,
              "lambda",
              [
                "self",
                "msg"
              ],
              [
                -1,
                "cond",
                [
                  [
                    "=",
                    [
                      -2,
                      "msg"
                    ],
                    "counter-container"
                  ],
                  [
                    -2,
                    "self"
                  ]
                ],
                [
                  [
                    "=",
                    [
                      -2,
                      "msg"
                    ],
                    "count"
                  ],
                  [
                    -1,
                    "list-length",
                    [
                      -1,
                      "super",
                      "inventory"
                    ]
                  ]
                ],
                [
                  "super",
                  [
                    -2,
                    "msg"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210110011302312110031210100130231211103121011010032121010101131210110001330231210100010302312110103212101001013121010011133023121001011132212113123121010011131210110011331231210100101332212113123121010011131210110101330231210100103023121011010031210101101332121011010031231210100111332233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf177;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf152;&#xf24a;&#xf146;&#xf178;&#xf246;&#xf146;&#xf16f;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf248;&#xf146;&#xf166;&#xf248;&#xf15e;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf146;&#xf16b;&#xf245;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf146;&#xf16b;&#xf24a;&#xf146;&#xf177;&#xf245;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf146;&#xf16b;&#xf24a;&#xf146;&#xf179;&#xf245;&#xf248;&#xf145;&#xf156;&#xf248;&#xf146;&#xf178;&#xf24a;&#xf146;&#xf171;&#xf245;&#xf246;&#xf146;&#xf178;&#xf249;&#xf146;&#xf16b;&#xf245;&#xf24b;",
    "stanza": 1354
  },
  {
    "role": "code",
    "lines": [
      "define cc1 | counter-container new;"
    ],
    "preprocessed": "define cc1 | counter-container new;",
    "dt": true,
    "parse": [
      "define",
      "cc1",
      [
        -1,
        "counter-container",
        "new"
      ]
    ],
    "code": "12110131210110110302312101100113121011000132233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf17a;&#xf248;&#xf146;&#xf177;&#xf24a;&#xf146;&#xf175;&#xf24b;",
    "stanza": 1355
  },
  {
    "role": "code",
    "lines": [
      "= 0 | cc1 count;"
    ],
    "preprocessed": "= 0 | cc1 count;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "cc1",
        "count"
      ]
    ],
    "code": "12113020302312101101103121011010132233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf146;&#xf17a;&#xf24a;&#xf146;&#xf179;&#xf24b;",
    "stanza": 1356
  },
  {
    "role": "code",
    "lines": [
      "cc1 add 4;"
    ],
    "preprocessed": "cc1 add 4;",
    "dt": false,
    "parse": [
      "cc1",
      "add",
      "4"
    ],
    "code": "12101101103121010111030210032233",
    "spider": "&#xf146;&#xf17a;&#xf24a;&#xf146;&#xf172;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 1357
  },
  {
    "role": "code",
    "lines": [
      "= 1 | cc1 count;"
    ],
    "preprocessed": "= 1 | cc1 count;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "cc1",
        "count"
      ]
    ],
    "code": "12113021302312101101103121011010132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf146;&#xf17a;&#xf24a;&#xf146;&#xf179;&#xf24b;",
    "stanza": 1358
  },
  {
    "role": "code",
    "lines": [
      "cc1 add 8;"
    ],
    "preprocessed": "cc1 add 8;",
    "dt": false,
    "parse": [
      "cc1",
      "add",
      "8"
    ],
    "code": "121011011031210101110302100032233",
    "spider": "&#xf146;&#xf17a;&#xf24a;&#xf146;&#xf172;&#xf24a;&#xf20c;&#xf24b;",
    "stanza": 1359
  },
  {
    "role": "code",
    "lines": [
      "= 2 | cc1 count;"
    ],
    "preprocessed": "= 2 | cc1 count;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "cc1",
        "count"
      ]
    ],
    "code": "121130210302312101101103121011010132233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf146;&#xf17a;&#xf24a;&#xf146;&#xf179;&#xf24b;",
    "stanza": 1360
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "adding a special form for classes",
    "section_category": "OBJECT",
    "section_index": 39,
    "stanza": 1361
  },
  {
    "role": "code",
    "lines": [
      "intro list-append;"
    ],
    "preprocessed": "intro list-append;",
    "dt": false,
    "parse": [
      "intro",
      "list-append"
    ],
    "code": "12100103121011011132233",
    "spider": "&#xf156;&#xf24a;&#xf146;&#xf17b;&#xf24b;",
    "stanza": 1362
  },
  {
    "role": "code",
    "lines": [
      "define list-append | lambda (lst1 lst2) |",
      "  if (= 0 | list-length $lst1) $lst2 |",
      "  list-append (except-last $lst1) | prepend (last | $lst1) $lst2;"
    ],
    "preprocessed": "define list-append | lambda (lst1 lst2) |\n  if (= 0 | list-length $lst1) $lst2 |\n  list-append (except-last $lst1) | prepend (last | $lst1) $lst2;",
    "dt": true,
    "parse": [
      "define",
      "list-append",
      [
        -1,
        "lambda",
        [
          "lst1",
          "lst2"
        ],
        [
          -1,
          "if",
          [
            "=",
            "0",
            [
              -1,
              "list-length",
              [
                -2,
                "lst1"
              ]
            ]
          ],
          [
            -2,
            "lst2"
          ],
          [
            -1,
            "list-append",
            [
              "except-last",
              [
                -2,
                "lst1"
              ]
            ],
            [
              -1,
              "prepend",
              [
                "last",
                [
                  -1,
                  [
                    -2,
                    "lst1"
                  ]
                ]
              ],
              [
                -2,
                "lst2"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210110111302312110103212101110003121011100133023121111321211302030231210100103123121011100033123121011100130231210110111321210111103123121011100033023121010101321210111013023123121011100033123121011100132233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf17b;&#xf248;&#xf15e;&#xf246;&#xf146;&#xf17c;&#xf24a;&#xf146;&#xf17d;&#xf245;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf249;&#xf146;&#xf17c;&#xf245;&#xf249;&#xf146;&#xf17d;&#xf248;&#xf146;&#xf17b;&#xf246;&#xf145;&#xf162;&#xf249;&#xf146;&#xf17c;&#xf245;&#xf248;&#xf145;&#xf159;&#xf246;&#xf145;&#xf161;&#xf248;&#xf249;&#xf146;&#xf17c;&#xf245;&#xf249;&#xf146;&#xf17d;&#xf24b;",
    "stanza": 1363
  },
  {
    "role": "code",
    "lines": [
      "list= (vector 1 2 3 4 5 6) | list-append (vector 1 2 3) (vector 4 5 6);"
    ],
    "preprocessed": "list= (vector 1 2 3 4 5 6) | list-append (vector 1 2 3) (vector 4 5 6);",
    "dt": false,
    "parse": [
      "list=",
      [
        "vector",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6"
      ],
      [
        -1,
        "list-append",
        [
          "vector",
          "1",
          "2",
          "3"
        ],
        [
          "vector",
          "4",
          "5",
          "6"
        ]
      ]
    ],
    "code": "12101010032121000030213021030211302100302101302110330231210110111321210000302130210302113321210000302100302101302110332233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf24a;&#xf209;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf146;&#xf17b;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf209;&#xf24a;&#xf20a;&#xf245;&#xf24b;",
    "stanza": 1364
  },
  {
    "role": "code",
    "lines": [
      "define unique | assign store (make-cell 0) | ? x |",
      "  assign id (get! $store) |",
      "  begin (set! $store (+ $id 1)) $id;"
    ],
    "preprocessed": "define unique | assign store (make-cell 0) | ? x |\n  assign id (get! $store) |\n  begin (set! $store (+ $id 1)) $id;",
    "dt": true,
    "parse": [
      "define",
      "unique",
      [
        -1,
        "assign",
        "store",
        [
          "make-cell",
          "0"
        ],
        [
          -1,
          "?",
          "x",
          [
            -1,
            "assign",
            "id",
            [
              "get!",
              [
                -2,
                "store"
              ]
            ],
            [
              -1,
              "begin",
              [
                "set!",
                [
                  -2,
                  "store"
                ],
                [
                  "+",
                  [
                    -2,
                    "id"
                  ],
                  "1"
                ]
              ],
              [
                -2,
                "id"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121011101030231211103121011101132121101130203302312110031210100130231211103121011110032121110131231210111011330231210110113212111003123121011101132121010312312101111003021333123121011110032233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf17e;&#xf248;&#xf152;&#xf24a;&#xf146;&#xf17f;&#xf246;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf152;&#xf24a;&#xf146;&#xf180;&#xf246;&#xf161;&#xf249;&#xf146;&#xf17f;&#xf245;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf160;&#xf249;&#xf146;&#xf17f;&#xf246;&#xf14e;&#xf249;&#xf146;&#xf180;&#xf24a;&#xf205;&#xf245;&#xf245;&#xf249;&#xf146;&#xf180;&#xf24b;",
    "stanza": 1365
  },
  {
    "role": "code",
    "lines": [
      "= 0 | unique new;"
    ],
    "preprocessed": "= 0 | unique new;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "unique",
        "new"
      ]
    ],
    "code": "12113020302312101110103121011000132233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf146;&#xf17e;&#xf24a;&#xf146;&#xf175;&#xf24b;",
    "stanza": 1366
  },
  {
    "role": "code",
    "lines": [
      "= 1 | unique new;"
    ],
    "preprocessed": "= 1 | unique new;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "unique",
        "new"
      ]
    ],
    "code": "12113021302312101110103121011000132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf146;&#xf17e;&#xf24a;&#xf146;&#xf175;&#xf24b;",
    "stanza": 1367
  },
  {
    "role": "code",
    "lines": [
      "= 2 | unique new;"
    ],
    "preprocessed": "= 2 | unique new;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "unique",
        "new"
      ]
    ],
    "code": "121130210302312101110103121011000132233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf146;&#xf17e;&#xf24a;&#xf146;&#xf175;&#xf24b;",
    "stanza": 1368
  },
  {
    "role": "code",
    "lines": [
      "not | = (unique new) (unique new);"
    ],
    "preprocessed": "not | = (unique new) (unique new);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "=",
        [
          "unique",
          "new"
        ],
        [
          "unique",
          "new"
        ]
      ]
    ],
    "code": "121013023121132121011101031210110001332121011101031210110001332233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf246;&#xf146;&#xf17e;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf246;&#xf146;&#xf17e;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf24b;",
    "stanza": 1369
  },
  {
    "role": "code",
    "lines": [
      "define setup-this | lambda (this self) | if (function? $this) $this $self;"
    ],
    "preprocessed": "define setup-this | lambda (this self) | if (function? $this) $this $self;",
    "dt": true,
    "parse": [
      "define",
      "setup-this",
      [
        -1,
        "lambda",
        [
          "this",
          "self"
        ],
        [
          -1,
          "if",
          [
            "function?",
            [
              -2,
              "this"
            ]
          ],
          [
            -2,
            "this"
          ],
          [
            -2,
            "self"
          ]
        ]
      ]
    ],
    "code": "121101312101111013023121101032121011111031210100101330231211113212101100312312101111103312312101111103123121010010132233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf181;&#xf248;&#xf15e;&#xf246;&#xf146;&#xf182;&#xf24a;&#xf146;&#xf169;&#xf245;&#xf248;&#xf153;&#xf246;&#xf170;&#xf249;&#xf146;&#xf182;&#xf245;&#xf249;&#xf146;&#xf182;&#xf249;&#xf146;&#xf169;&#xf24b;",
    "stanza": 1370
  },
  {
    "role": "code",
    "lines": [
      "define standard-class-methods | ? name | quote @@ |",
      "  ((= $method self) $self)",
      "  ((= $method (@@ name)) (self self))",
      "  ((= $method classname) (@@ name))",
      "  ((= $method unknown) | ? x 0)",
      "  ((= $method new) 0)",
      "  ((= $method unique-id) $unique-id)",
      "  ((= $method ==) | ? x | = $unique-id | x unique-id)",
      "  (self unknown $method);"
    ],
    "preprocessed": "define standard-class-methods | ? name | quote @@ |\n  ((= $method self) $self)\n  ((= $method (@@ name)) (self self))\n  ((= $method classname) (@@ name))\n  ((= $method unknown) | ? x 0)\n  ((= $method new) 0)\n  ((= $method unique-id) $unique-id)\n  ((= $method ==) | ? x | = $unique-id | x unique-id)\n  (self unknown $method);",
    "dt": true,
    "parse": [
      "define",
      "standard-class-methods",
      [
        -1,
        "?",
        "name",
        [
          -1,
          "quote",
          "@@",
          [
            -1,
            [
              [
                "=",
                [
                  -2,
                  "method"
                ],
                "self"
              ],
              [
                -2,
                "self"
              ]
            ],
            [
              [
                "=",
                [
                  -2,
                  "method"
                ],
                [
                  "@@",
                  "name"
                ]
              ],
              [
                "self",
                "self"
              ]
            ],
            [
              [
                "=",
                [
                  -2,
                  "method"
                ],
                "classname"
              ],
              [
                "@@",
                "name"
              ]
            ],
            [
              [
                "=",
                [
                  -2,
                  "method"
                ],
                "unknown"
              ],
              [
                -1,
                "?",
                "x",
                "0"
              ]
            ],
            [
              [
                "=",
                [
                  -2,
                  "method"
                ],
                "new"
              ],
              "0"
            ],
            [
              [
                "=",
                [
                  -2,
                  "method"
                ],
                "unique-id"
              ],
              [
                -2,
                "unique-id"
              ]
            ],
            [
              [
                "=",
                [
                  -2,
                  "method"
                ],
                "=="
              ],
              [
                -1,
                "?",
                "x",
                [
                  -1,
                  "=",
                  [
                    -2,
                    "unique-id"
                  ],
                  [
                    -1,
                    "x",
                    "unique-id"
                  ]
                ]
              ]
            ],
            [
              "self",
              "unknown",
              [
                -2,
                "method"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210111111302312110031211000000302312100100003121100000130232212113123121100001031210100101331231210100101332212113123121100001032121100000131211000000333212101001013121010010133322121131231211000010312110000113321211000001312110000003332212113123121100001031211000100330231211003121010013020332212113123121100001031210110001330203322121131231211000010312110001013312312110001013322121131231211000010312110001103302312110031210100130231211312312110001013023121010013121100010133212101001013121100010031231211000010332233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf183;&#xf248;&#xf150;&#xf24a;&#xf147;&#xf144;&#xf248;&#xf146;&#xf154;&#xf24a;&#xf147;&#xf145;&#xf248;&#xf246;&#xf246;&#xf147;&#xf249;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf169;&#xf245;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf147;&#xf146;&#xf246;&#xf147;&#xf145;&#xf24a;&#xf147;&#xf144;&#xf245;&#xf245;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf147;&#xf245;&#xf246;&#xf147;&#xf145;&#xf24a;&#xf147;&#xf144;&#xf245;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf148;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf149;&#xf245;&#xf249;&#xf147;&#xf149;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf14a;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf147;&#xf249;&#xf147;&#xf149;&#xf248;&#xf16d;&#xf24a;&#xf147;&#xf149;&#xf245;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf147;&#xf148;&#xf249;&#xf147;&#xf146;&#xf245;&#xf24b;",
    "stanza": 1371
  },
  {
    "role": "code",
    "lines": [
      "define custom-class-methods | lambda (name args fields) | list-append",
      "  (map (? x | quote @@ | (= $method | @@ first $x) (@@ second $x))",
      "       (map $tail | select-match (? x | = method | first $x) $fields))",
      "  (map (? x | quote @@ | (= $method | @@ x) ((@@ x)))",
      "       (map $second | select-match (? x | = field | first $x) $fields));"
    ],
    "preprocessed": "define custom-class-methods | lambda (name args fields) | list-append\n  (map (? x | quote @@ | (= $method | @@ first $x) (@@ second $x))\n       (map $tail | select-match (? x | = method | first $x) $fields))\n  (map (? x | quote @@ | (= $method | @@ x) ((@@ x)))\n       (map $second | select-match (? x | = field | first $x) $fields));",
    "dt": true,
    "parse": [
      "define",
      "custom-class-methods",
      [
        -1,
        "lambda",
        [
          "name",
          "args",
          "fields"
        ],
        [
          -1,
          "list-append",
          [
            "map",
            [
              "?",
              "x",
              [
                -1,
                "quote",
                "@@",
                [
                  -1,
                  [
                    "=",
                    [
                      -2,
                      "method"
                    ],
                    [
                      -1,
                      "@@",
                      "first",
                      [
                        -2,
                        "x"
                      ]
                    ]
                  ],
                  [
                    "@@",
                    "second",
                    [
                      -2,
                      "x"
                    ]
                  ]
                ]
              ]
            ],
            [
              "map",
              [
                -2,
                "tail"
              ],
              [
                -1,
                "select-match",
                [
                  "?",
                  "x",
                  [
                    -1,
                    "=",
                    "method",
                    [
                      -1,
                      "first",
                      [
                        -2,
                        "x"
                      ]
                    ]
                  ]
                ],
                [
                  -2,
                  "fields"
                ]
              ]
            ]
          ],
          [
            "map",
            [
              "?",
              "x",
              [
                -1,
                "quote",
                "@@",
                [
                  -1,
                  [
                    "=",
                    [
                      -2,
                      "method"
                    ],
                    [
                      -1,
                      "@@",
                      "x"
                    ]
                  ],
                  [
                    [
                      "@@",
                      "x"
                    ]
                  ]
                ]
              ]
            ],
            [
              "map",
              [
                -2,
                "second"
              ],
              [
                -1,
                "select-match",
                [
                  "?",
                  "x",
                  [
                    -1,
                    "=",
                    "field",
                    [
                      -1,
                      "first",
                      [
                        -2,
                        "x"
                      ]
                    ]
                  ]
                ],
                [
                  -2,
                  "fields"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf14b;&#xf248;&#xf15e;&#xf246;&#xf147;&#xf144;&#xf24a;&#xf147;&#xf14c;&#xf24a;&#xf147;&#xf14d;&#xf245;&#xf248;&#xf146;&#xf17b;&#xf246;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf154;&#xf24a;&#xf147;&#xf145;&#xf248;&#xf246;&#xf147;&#xf249;&#xf147;&#xf146;&#xf248;&#xf147;&#xf145;&#xf24a;&#xf145;&#xf15b;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf145;&#xf24a;&#xf145;&#xf15c;&#xf249;&#xf16d;&#xf245;&#xf245;&#xf246;&#xf145;&#xf15d;&#xf249;&#xf145;&#xf155;&#xf248;&#xf145;&#xf166;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf147;&#xf24a;&#xf147;&#xf146;&#xf248;&#xf145;&#xf15b;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf147;&#xf14d;&#xf245;&#xf245;&#xf246;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf154;&#xf24a;&#xf147;&#xf145;&#xf248;&#xf246;&#xf147;&#xf249;&#xf147;&#xf146;&#xf248;&#xf147;&#xf145;&#xf24a;&#xf16d;&#xf245;&#xf246;&#xf246;&#xf147;&#xf145;&#xf24a;&#xf16d;&#xf245;&#xf245;&#xf245;&#xf246;&#xf145;&#xf15d;&#xf249;&#xf145;&#xf15c;&#xf248;&#xf145;&#xf166;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf147;&#xf24a;&#xf147;&#xf14e;&#xf248;&#xf145;&#xf15b;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf147;&#xf14d;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1372
  },
  {
    "role": "code",
    "lines": [
      "define class-cond | lambda (name args fields) | prepend cond | list-append",
      "  (custom-class-methods $name $args $fields)",
      "  (standard-class-methods $name);"
    ],
    "preprocessed": "define class-cond | lambda (name args fields) | prepend cond | list-append\n  (custom-class-methods $name $args $fields)\n  (standard-class-methods $name);",
    "dt": true,
    "parse": [
      "define",
      "class-cond",
      [
        -1,
        "lambda",
        [
          "name",
          "args",
          "fields"
        ],
        [
          -1,
          "prepend",
          "cond",
          [
            -1,
            "list-append",
            [
              "custom-class-methods",
              [
                -2,
                "name"
              ],
              [
                -2,
                "args"
              ],
              [
                -2,
                "fields"
              ]
            ],
            [
              "standard-class-methods",
              [
                -2,
                "name"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131211001011302312110103212110000003121100100031211001001330231210101013121001011130231210110111321211000111312312110000003123121100100031231211001001332121011111131231211000000332233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf14f;&#xf248;&#xf15e;&#xf246;&#xf147;&#xf144;&#xf24a;&#xf147;&#xf14c;&#xf24a;&#xf147;&#xf14d;&#xf245;&#xf248;&#xf145;&#xf159;&#xf24a;&#xf146;&#xf15b;&#xf248;&#xf146;&#xf17b;&#xf246;&#xf147;&#xf14b;&#xf249;&#xf147;&#xf144;&#xf249;&#xf147;&#xf14c;&#xf249;&#xf147;&#xf14d;&#xf245;&#xf246;&#xf146;&#xf183;&#xf249;&#xf147;&#xf144;&#xf245;&#xf24b;",
    "stanza": 1373
  },
  {
    "role": "code",
    "lines": [
      "intro class;"
    ],
    "preprocessed": "intro class;",
    "dt": true,
    "parse": [
      "intro",
      "class"
    ],
    "code": "12100103121100110032233",
    "spider": "&#xf156;&#xf24a;&#xf147;&#xf150;&#xf24b;",
    "stanza": 1374
  },
  {
    "role": "code",
    "lines": [
      "define translate | assign prev $translate | ? x |",
      "  if (not | function? $x) (prev $x) |",
      "  if (not | = class | head $x) (prev $x) |",
      "  let ((name | list-ref $x 1)",
      "       (args | list-ref $x 2)",
      "       (fields | tail | tail | tail $x)) |",
      "    translate | quote @@ |",
      "      define (@@ name) | lambda (@@ prepend ext-this $args) |",
      "        let (@@ append (vector unique-id | vector unique new)",
      "                       (map $tail | select-match (? x | = field | first $x) $fields)) |",
      "          let ((self | reflective | lambda (self) |",
      "            let ((this | setup-this $ext-this $self)) |",
      "              lambda (method) |",
      "                 @@ class-cond $name $args $fields)) |",
      "            begin (self new) $self;"
    ],
    "preprocessed": "define translate | assign prev $translate | ? x |\n  if (not | function? $x) (prev $x) |\n  if (not | = class | head $x) (prev $x) |\n  let ((name | list-ref $x 1)\n       (args | list-ref $x 2)\n       (fields | tail | tail | tail $x)) |\n    translate | quote @@ |\n      define (@@ name) | lambda (@@ prepend ext-this $args) |\n        let (@@ append (vector unique-id | vector unique new)\n                       (map $tail | select-match (? x | = field | first $x) $fields)) |\n          let ((self | reflective | lambda (self) |\n            let ((this | setup-this $ext-this $self)) |\n              lambda (method) |\n                 @@ class-cond $name $args $fields)) |\n            begin (self new) $self;",
    "dt": true,
    "parse": [
      "define",
      "translate",
      [
        -1,
        "assign",
        "prev",
        [
          -2,
          "translate"
        ],
        [
          -1,
          "?",
          "x",
          [
            -1,
            "if",
            [
              "not",
              [
                -1,
                "function?",
                [
                  -2,
                  "x"
                ]
              ]
            ],
            [
              "prev",
              [
                -2,
                "x"
              ]
            ],
            [
              -1,
              "if",
              [
                "not",
                [
                  -1,
                  "=",
                  "class",
                  [
                    -1,
                    "head",
                    [
                      -2,
                      "x"
                    ]
                  ]
                ]
              ],
              [
                "prev",
                [
                  -2,
                  "x"
                ]
              ],
              [
                -1,
                "let",
                [
                  [
                    "name",
                    [
                      -1,
                      "list-ref",
                      [
                        -2,
                        "x"
                      ],
                      "1"
                    ]
                  ],
                  [
                    "args",
                    [
                      -1,
                      "list-ref",
                      [
                        -2,
                        "x"
                      ],
                      "2"
                    ]
                  ],
                  [
                    "fields",
                    [
                      -1,
                      "tail",
                      [
                        -1,
                        "tail",
                        [
                          -1,
                          "tail",
                          [
                            -2,
                            "x"
                          ]
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  -1,
                  "translate",
                  [
                    -1,
                    "quote",
                    "@@",
                    [
                      -1,
                      "define",
                      [
                        "@@",
                        "name"
                      ],
                      [
                        -1,
                        "lambda",
                        [
                          "@@",
                          "prepend",
                          "ext-this",
                          [
                            -2,
                            "args"
                          ]
                        ],
                        [
                          -1,
                          "let",
                          [
                            "@@",
                            "append",
                            [
                              "vector",
                              "unique-id",
                              [
                                -1,
                                "vector",
                                "unique",
                                "new"
                              ]
                            ],
                            [
                              "map",
                              [
                                -2,
                                "tail"
                              ],
                              [
                                -1,
                                "select-match",
                                [
                                  "?",
                                  "x",
                                  [
                                    -1,
                                    "=",
                                    "field",
                                    [
                                      -1,
                                      "first",
                                      [
                                        -2,
                                        "x"
                                      ]
                                    ]
                                  ]
                                ],
                                [
                                  -2,
                                  "fields"
                                ]
                              ]
                            ]
                          ],
                          [
                            -1,
                            "let",
                            [
                              [
                                "self",
                                [
                                  -1,
                                  "reflective",
                                  [
                                    -1,
                                    "lambda",
                                    [
                                      "self"
                                    ],
                                    [
                                      -1,
                                      "let",
                                      [
                                        [
                                          "this",
                                          [
                                            -1,
                                            "setup-this",
                                            [
                                              -2,
                                              "ext-this"
                                            ],
                                            [
                                              -2,
                                              "self"
                                            ]
                                          ]
                                        ]
                                      ],
                                      [
                                        -1,
                                        "lambda",
                                        [
                                          "method"
                                        ],
                                        [
                                          -1,
                                          "@@",
                                          "class-cond",
                                          [
                                            -2,
                                            "name"
                                          ],
                                          [
                                            -2,
                                            "args"
                                          ],
                                          [
                                            -2,
                                            "fields"
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ],
                            [
                              -1,
                              "begin",
                              [
                                "self",
                                "new"
                              ],
                              [
                                -2,
                                "self"
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf15d;&#xf248;&#xf152;&#xf24a;&#xf145;&#xf17b;&#xf249;&#xf15d;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf170;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf17b;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf147;&#xf24a;&#xf147;&#xf150;&#xf248;&#xf145;&#xf154;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf17b;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf147;&#xf144;&#xf248;&#xf145;&#xf157;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf147;&#xf14c;&#xf248;&#xf145;&#xf157;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf147;&#xf14d;&#xf248;&#xf145;&#xf155;&#xf248;&#xf145;&#xf155;&#xf248;&#xf145;&#xf155;&#xf249;&#xf16d;&#xf245;&#xf245;&#xf248;&#xf15d;&#xf248;&#xf146;&#xf154;&#xf24a;&#xf147;&#xf145;&#xf248;&#xf151;&#xf246;&#xf147;&#xf145;&#xf24a;&#xf147;&#xf144;&#xf245;&#xf248;&#xf15e;&#xf246;&#xf147;&#xf145;&#xf24a;&#xf145;&#xf159;&#xf24a;&#xf147;&#xf151;&#xf249;&#xf147;&#xf14c;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf147;&#xf145;&#xf24a;&#xf145;&#xf164;&#xf246;&#xf154;&#xf24a;&#xf147;&#xf149;&#xf248;&#xf154;&#xf24a;&#xf146;&#xf17e;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf246;&#xf145;&#xf15d;&#xf249;&#xf145;&#xf155;&#xf248;&#xf145;&#xf166;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf147;&#xf24a;&#xf147;&#xf14e;&#xf248;&#xf145;&#xf15b;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf147;&#xf14d;&#xf245;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf146;&#xf169;&#xf248;&#xf146;&#xf166;&#xf248;&#xf15e;&#xf246;&#xf146;&#xf169;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf146;&#xf182;&#xf248;&#xf146;&#xf181;&#xf249;&#xf147;&#xf151;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf248;&#xf15e;&#xf246;&#xf147;&#xf146;&#xf245;&#xf248;&#xf147;&#xf145;&#xf24a;&#xf147;&#xf14f;&#xf249;&#xf147;&#xf144;&#xf249;&#xf147;&#xf14c;&#xf249;&#xf147;&#xf14d;&#xf245;&#xf245;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf249;&#xf146;&#xf169;&#xf24b;",
    "stanza": 1375
  },
  {
    "role": "code",
    "lines": [
      "class point (x y)",
      "  (method x $x)",
      "  (method y $y)",
      "  (method + | lambda ((p point)) | point new (+ $x | p x) (+ $y | p y))",
      "  (method = | lambda ((p point)) | and (= $x | p x) (= $y | p y));"
    ],
    "preprocessed": "class point (x y)\n  (method x $x)\n  (method y $y)\n  (method + | lambda ((p point)) | point new (+ $x | p x) (+ $y | p y))\n  (method = | lambda ((p point)) | and (= $x | p x) (= $y | p y));",
    "dt": true,
    "parse": [
      "class",
      "point",
      [
        "x",
        "y"
      ],
      [
        "method",
        "x",
        [
          -2,
          "x"
        ]
      ],
      [
        "method",
        "y",
        [
          -2,
          "y"
        ]
      ],
      [
        "method",
        "+",
        [
          -1,
          "lambda",
          [
            [
              "p",
              "point"
            ]
          ],
          [
            -1,
            "point",
            "new",
            [
              "+",
              [
                -2,
                "x"
              ],
              [
                -1,
                "p",
                "x"
              ]
            ],
            [
              "+",
              [
                -2,
                "y"
              ],
              [
                -1,
                "p",
                "y"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "=",
        [
          -1,
          "lambda",
          [
            [
              "p",
              "point"
            ]
          ],
          [
            -1,
            "and",
            [
              "=",
              [
                -2,
                "x"
              ],
              [
                -1,
                "p",
                "x"
              ]
            ],
            [
              "=",
              [
                -2,
                "y"
              ],
              [
                -1,
                "p",
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211001100312101001103212101001312100000133212110000103121010013123121010013321211000010312100000131231210000013321211000010312101030231211010322121010100031210100110333023121010011031210110001321210103123121010013023121010100031210100133212101031231210000013023121010100031210000013332121100001031211302312110103221210101000312101001103330231211032121131231210100130231210101000312101001332121131231210000013023121010100031210000013332233",
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf146;&#xf16a;&#xf246;&#xf16d;&#xf24a;&#xf145;&#xf145;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf145;&#xf145;&#xf249;&#xf145;&#xf145;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14e;&#xf248;&#xf15e;&#xf246;&#xf246;&#xf146;&#xf16c;&#xf24a;&#xf146;&#xf16a;&#xf245;&#xf245;&#xf248;&#xf146;&#xf16a;&#xf24a;&#xf146;&#xf175;&#xf246;&#xf14e;&#xf249;&#xf16d;&#xf248;&#xf146;&#xf16c;&#xf24a;&#xf16d;&#xf245;&#xf246;&#xf14e;&#xf249;&#xf145;&#xf145;&#xf248;&#xf146;&#xf16c;&#xf24a;&#xf145;&#xf145;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf248;&#xf15e;&#xf246;&#xf246;&#xf146;&#xf16c;&#xf24a;&#xf146;&#xf16a;&#xf245;&#xf245;&#xf248;&#xf14a;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf248;&#xf146;&#xf16c;&#xf24a;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf249;&#xf145;&#xf145;&#xf248;&#xf146;&#xf16c;&#xf24a;&#xf145;&#xf145;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1376
  },
  {
    "role": "code",
    "lines": [
      "define point1 | point new 1 11;"
    ],
    "preprocessed": "define point1 | point new 1 11;",
    "dt": true,
    "parse": [
      "define",
      "point1",
      [
        -1,
        "point",
        "new",
        "1",
        "11"
      ]
    ],
    "code": "1211013121010100130231210100110312101100013021302101132233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf16d;&#xf248;&#xf146;&#xf16a;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf205;&#xf24a;&#xf20f;&#xf24b;",
    "stanza": 1377
  },
  {
    "role": "code",
    "lines": [
      "define point2 | point new 2 22;"
    ],
    "preprocessed": "define point2 | point new 2 22;",
    "dt": true,
    "parse": [
      "define",
      "point2",
      [
        -1,
        "point",
        "new",
        "2",
        "22"
      ]
    ],
    "code": "121101312101010103023121010011031210110001302103021011032233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf16e;&#xf248;&#xf146;&#xf16a;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf206;&#xf24a;&#xf21a;&#xf24b;",
    "stanza": 1378
  },
  {
    "role": "code",
    "lines": [
      "= 1 | point1 x;"
    ],
    "preprocessed": "= 1 | point1 x;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "point1",
        "x"
      ]
    ],
    "code": "121130213023121010100131210100132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf146;&#xf16d;&#xf24a;&#xf16d;&#xf24b;",
    "stanza": 1379
  },
  {
    "role": "code",
    "lines": [
      "= 22 | point2 y;"
    ],
    "preprocessed": "= 22 | point2 y;",
    "dt": false,
    "parse": [
      "=",
      "22",
      [
        -1,
        "point2",
        "y"
      ]
    ],
    "code": "12113021011030231210101010312100000132233",
    "spider": "&#xf147;&#xf24a;&#xf21a;&#xf248;&#xf146;&#xf16e;&#xf24a;&#xf145;&#xf145;&#xf24b;",
    "stanza": 1380
  },
  {
    "role": "code",
    "lines": [
      "= 11 | (point new 11 12) x;"
    ],
    "preprocessed": "= 11 | (point new 11 12) x;",
    "dt": false,
    "parse": [
      "=",
      "11",
      [
        -1,
        [
          "point",
          "new",
          "11",
          "12"
        ],
        "x"
      ]
    ],
    "code": "121130210113023212101001103121011000130210113021100331210100132233",
    "spider": "&#xf147;&#xf24a;&#xf20f;&#xf248;&#xf246;&#xf146;&#xf16a;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf20f;&#xf24a;&#xf210;&#xf245;&#xf16d;&#xf24b;",
    "stanza": 1381
  },
  {
    "role": "code",
    "lines": [
      "= 11 | ((point new 11 12) point) x;"
    ],
    "preprocessed": "= 11 | ((point new 11 12) point) x;",
    "dt": false,
    "parse": [
      "=",
      "11",
      [
        -1,
        [
          [
            "point",
            "new",
            "11",
            "12"
          ],
          "point"
        ],
        "x"
      ]
    ],
    "code": "1211302101130232212101001103121011000130210113021100331210100110331210100132233",
    "spider": "&#xf147;&#xf24a;&#xf20f;&#xf248;&#xf246;&#xf246;&#xf146;&#xf16a;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf20f;&#xf24a;&#xf210;&#xf245;&#xf146;&#xf16a;&#xf245;&#xf16d;&#xf24b;",
    "stanza": 1382
  },
  {
    "role": "code",
    "lines": [
      "= 16 | ((point new 16 17) point) x;"
    ],
    "preprocessed": "= 16 | ((point new 16 17) point) x;",
    "dt": false,
    "parse": [
      "=",
      "16",
      [
        -1,
        [
          [
            "point",
            "new",
            "16",
            "17"
          ],
          "point"
        ],
        "x"
      ]
    ],
    "code": "1211302100003023221210100110312101100013021000030210001331210100110331210100132233",
    "spider": "&#xf147;&#xf24a;&#xf214;&#xf248;&#xf246;&#xf246;&#xf146;&#xf16a;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf214;&#xf24a;&#xf215;&#xf245;&#xf146;&#xf16a;&#xf245;&#xf16d;&#xf24b;",
    "stanza": 1383
  },
  {
    "role": "code",
    "lines": [
      "= 33 | (point1 + $point2) y;"
    ],
    "preprocessed": "= 33 | (point1 + $point2) y;",
    "dt": false,
    "parse": [
      "=",
      "33",
      [
        -1,
        [
          "point1",
          "+",
          [
            -2,
            "point2"
          ]
        ],
        "y"
      ]
    ],
    "code": "12113021000013023212101010013121010312312101010103312100000132233",
    "spider": "&#xf147;&#xf24a;&#xf225;&#xf248;&#xf246;&#xf146;&#xf16d;&#xf24a;&#xf14e;&#xf249;&#xf146;&#xf16e;&#xf245;&#xf145;&#xf145;&#xf24b;",
    "stanza": 1384
  },
  {
    "role": "code",
    "lines": [
      "point1 + $point2 = | point new 3 33;"
    ],
    "preprocessed": "point1 + $point2 = | point new 3 33;",
    "dt": false,
    "parse": [
      "point1",
      "+",
      [
        -2,
        "point2"
      ],
      "=",
      [
        -1,
        "point",
        "new",
        "3",
        "33"
      ]
    ],
    "code": "12101010013121010312312101010103121130231210100110312101100013021130210000132233",
    "spider": "&#xf146;&#xf16d;&#xf24a;&#xf14e;&#xf249;&#xf146;&#xf16e;&#xf24a;&#xf147;&#xf248;&#xf146;&#xf16a;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf207;&#xf24a;&#xf225;&#xf24b;",
    "stanza": 1385
  },
  {
    "role": "code",
    "lines": [
      "point2 + $point1 = | point new 3 33;"
    ],
    "preprocessed": "point2 + $point1 = | point new 3 33;",
    "dt": false,
    "parse": [
      "point2",
      "+",
      [
        -2,
        "point1"
      ],
      "=",
      [
        -1,
        "point",
        "new",
        "3",
        "33"
      ]
    ],
    "code": "12101010103121010312312101010013121130231210100110312101100013021130210000132233",
    "spider": "&#xf146;&#xf16e;&#xf24a;&#xf14e;&#xf249;&#xf146;&#xf16d;&#xf24a;&#xf147;&#xf248;&#xf146;&#xf16a;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf207;&#xf24a;&#xf225;&#xf24b;",
    "stanza": 1386
  },
  {
    "role": "code",
    "lines": [
      "(point new 100 200) + (point new 200 100) = (point new 300 300);"
    ],
    "preprocessed": "(point new 100 200) + (point new 200 100) = (point new 300 300);",
    "dt": false,
    "parse": [
      [
        "point",
        "new",
        "100",
        "200"
      ],
      "+",
      [
        "point",
        "new",
        "200",
        "100"
      ],
      "=",
      [
        "point",
        "new",
        "300",
        "300"
      ]
    ],
    "code": "2121010011031210110001302110010030211001000331210103212101001103121011000130211001000302110010033121132121010011031210110001302100101100302100101100332233",
    "spider": "&#xf246;&#xf146;&#xf16a;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf205;&#xf228;&#xf24a;&#xf207;&#xf20c;&#xf245;&#xf14e;&#xf246;&#xf146;&#xf16a;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf207;&#xf20c;&#xf24a;&#xf205;&#xf228;&#xf245;&#xf147;&#xf246;&#xf146;&#xf16a;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf208;&#xf230;&#xf24a;&#xf208;&#xf230;&#xf245;&#xf24b;",
    "stanza": 1387
  },
  {
    "role": "code",
    "lines": [
      "instanceof point $point1;"
    ],
    "preprocessed": "instanceof point $point1;",
    "dt": false,
    "parse": [
      "instanceof",
      "point",
      [
        -2,
        "point1"
      ]
    ],
    "code": "1210011100312101001103123121010100132233",
    "spider": "&#xf146;&#xf160;&#xf24a;&#xf146;&#xf16a;&#xf249;&#xf146;&#xf16d;&#xf24b;",
    "stanza": 1388
  },
  {
    "role": "code",
    "lines": [
      "not | instanceof int $point1;"
    ],
    "preprocessed": "not | instanceof int $point1;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "instanceof",
        "int",
        [
          -2,
          "point1"
        ]
      ]
    ],
    "code": "12101302312100111003121111103123121010100132233",
    "spider": "&#xf149;&#xf248;&#xf146;&#xf160;&#xf24a;&#xf182;&#xf249;&#xf146;&#xf16d;&#xf24b;",
    "stanza": 1389
  },
  {
    "role": "code",
    "lines": [
      "instanceof int 5;"
    ],
    "preprocessed": "instanceof int 5;",
    "dt": false,
    "parse": [
      "instanceof",
      "int",
      "5"
    ],
    "code": "121001110031211111030210132233",
    "spider": "&#xf146;&#xf160;&#xf24a;&#xf182;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 1390
  },
  {
    "role": "code",
    "lines": [
      "not | instanceof point 5;"
    ],
    "preprocessed": "not | instanceof point 5;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "instanceof",
        "point",
        "5"
      ]
    ],
    "code": "12101302312100111003121010011030210132233",
    "spider": "&#xf149;&#xf248;&#xf146;&#xf160;&#xf24a;&#xf146;&#xf16a;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 1391
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "wrapper class for cells",
    "section_category": "OBJECT",
    "section_index": 40,
    "stanza": 1392
  },
  {
    "role": "code",
    "lines": [
      "intro cell;"
    ],
    "preprocessed": "intro cell;",
    "dt": false,
    "parse": [
      "intro",
      "cell"
    ],
    "code": "12100103121000011132233",
    "spider": "&#xf156;&#xf24a;&#xf146;&#xf14b;&#xf24b;",
    "stanza": 1393
  },
  {
    "role": "code",
    "lines": [
      "class cell (initial-value)",
      "  (field content | make-cell $initial-value)",
      "  (method get | get! $content)",
      "  (method set | ? new-value | set! $content $new-value)",
      "  (method reset | self set $initial-value)",
      "  (method unknown | ? x | (objectify | self get) $x);"
    ],
    "preprocessed": "class cell (initial-value)\n  (field content | make-cell $initial-value)\n  (method get | get! $content)\n  (method set | ? new-value | set! $content $new-value)\n  (method reset | self set $initial-value)\n  (method unknown | ? x | (objectify | self get) $x);",
    "dt": true,
    "parse": [
      "class",
      "cell",
      [
        "initial-value"
      ],
      [
        "field",
        "content",
        [
          -1,
          "make-cell",
          [
            -2,
            "initial-value"
          ]
        ]
      ],
      [
        "method",
        "get",
        [
          -1,
          "get!",
          [
            -2,
            "content"
          ]
        ]
      ],
      [
        "method",
        "set",
        [
          -1,
          "?",
          "new-value",
          [
            -1,
            "set!",
            [
              -2,
              "content"
            ],
            [
              -2,
              "new-value"
            ]
          ]
        ]
      ],
      [
        "method",
        "reset",
        [
          -1,
          "self",
          "set",
          [
            -2,
            "initial-value"
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          -1,
          "?",
          "x",
          [
            -1,
            [
              "objectify",
              [
                -1,
                "self",
                "get"
              ]
            ],
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "1211001100312100001113212110011103321211001010312110011113023121101131231211001110332121100001031211110013023121110131231211001111332121100001031211111003023121100312110100003023121110031231211001111312312110100003321211000010312110100013023121010010131211111003123121100111033212110000103121100010030231211003121010013023212100100103023121010010131211110013312312101001332233",
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf146;&#xf14b;&#xf246;&#xf147;&#xf152;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf147;&#xf153;&#xf248;&#xf15f;&#xf249;&#xf147;&#xf152;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf145;&#xf17d;&#xf248;&#xf161;&#xf249;&#xf147;&#xf153;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf150;&#xf24a;&#xf147;&#xf154;&#xf248;&#xf160;&#xf249;&#xf147;&#xf153;&#xf249;&#xf147;&#xf154;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf155;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf147;&#xf152;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf148;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf246;&#xf146;&#xf156;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf249;&#xf16d;&#xf245;&#xf24b;",
    "stanza": 1394
  },
  {
    "role": "code",
    "lines": [
      "define cell-test1 | cell new 15;"
    ],
    "preprocessed": "define cell-test1 | cell new 15;",
    "dt": true,
    "parse": [
      "define",
      "cell-test1",
      [
        -1,
        "cell",
        "new",
        "15"
      ]
    ],
    "code": "121101312110100103023121000011131210110001302111132233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf156;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf213;&#xf24b;",
    "stanza": 1395
  },
  {
    "role": "code",
    "lines": [
      "= 15 | cell-test1 get;"
    ],
    "preprocessed": "= 15 | cell-test1 get;",
    "dt": false,
    "parse": [
      "=",
      "15",
      [
        -1,
        "cell-test1",
        "get"
      ]
    ],
    "code": "1211302111130231211010010312111100132233",
    "spider": "&#xf147;&#xf24a;&#xf213;&#xf248;&#xf147;&#xf156;&#xf24a;&#xf145;&#xf17d;&#xf24b;",
    "stanza": 1396
  },
  {
    "role": "code",
    "lines": [
      "cell-test1 set 82;"
    ],
    "preprocessed": "cell-test1 set 82;",
    "dt": false,
    "parse": [
      "cell-test1",
      "set",
      "82"
    ],
    "code": "12110100103121111100302101001032233",
    "spider": "&#xf147;&#xf156;&#xf24a;&#xf145;&#xf180;&#xf24a;&#xf205;&#xf216;&#xf24b;",
    "stanza": 1397
  },
  {
    "role": "code",
    "lines": [
      "= 82 | cell-test1 get;"
    ],
    "preprocessed": "= 82 | cell-test1 get;",
    "dt": false,
    "parse": [
      "=",
      "82",
      [
        -1,
        "cell-test1",
        "get"
      ]
    ],
    "code": "1211302101001030231211010010312111100132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf216;&#xf248;&#xf147;&#xf156;&#xf24a;&#xf145;&#xf17d;&#xf24b;",
    "stanza": 1398
  },
  {
    "role": "code",
    "lines": [
      "= 82 | get! | cell-test1 content;"
    ],
    "preprocessed": "= 82 | get! | cell-test1 content;",
    "dt": false,
    "parse": [
      "=",
      "82",
      [
        -1,
        "get!",
        [
          -1,
          "cell-test1",
          "content"
        ]
      ]
    ],
    "code": "1211302101001030231211101302312110100103121100111132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf216;&#xf248;&#xf161;&#xf248;&#xf147;&#xf156;&#xf24a;&#xf147;&#xf153;&#xf24b;",
    "stanza": 1399
  },
  {
    "role": "code",
    "lines": [
      "define cell-test2 | cell new | point new 120 150;"
    ],
    "preprocessed": "define cell-test2 | cell new | point new 120 150;",
    "dt": true,
    "parse": [
      "define",
      "cell-test2",
      [
        -1,
        "cell",
        "new",
        [
          -1,
          "point",
          "new",
          "120",
          "150"
        ]
      ]
    ],
    "code": "121101312110100113023121000011131210110001302312101001103121011000130211110003021001011032233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf157;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf16a;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf205;&#xf23c;&#xf24a;&#xf206;&#xf21a;&#xf24b;",
    "stanza": 1400
  },
  {
    "role": "code",
    "lines": [
      "define cell-test3 | cell new | point new 300 300;"
    ],
    "preprocessed": "define cell-test3 | cell new | point new 300 300;",
    "dt": true,
    "parse": [
      "define",
      "cell-test3",
      [
        -1,
        "cell",
        "new",
        [
          -1,
          "point",
          "new",
          "300",
          "300"
        ]
      ]
    ],
    "code": "121101312110101003023121000011131210110001302312101001103121011000130210010110030210010110032233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf158;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf16a;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf208;&#xf230;&#xf24a;&#xf208;&#xf230;&#xf24b;",
    "stanza": 1401
  },
  {
    "role": "code",
    "lines": [
      "cell-test2 + $cell-test3 = | point new 420 450;"
    ],
    "preprocessed": "cell-test2 + $cell-test3 = | point new 420 450;",
    "dt": false,
    "parse": [
      "cell-test2",
      "+",
      [
        -2,
        "cell-test3"
      ],
      "=",
      [
        -1,
        "point",
        "new",
        "420",
        "450"
      ]
    ],
    "code": "121101001131210103123121101010031211302312101001103121011000130211010010030211100001032233",
    "spider": "&#xf147;&#xf157;&#xf24a;&#xf14e;&#xf249;&#xf147;&#xf158;&#xf24a;&#xf147;&#xf248;&#xf146;&#xf16a;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf20a;&#xf228;&#xf24a;&#xf20b;&#xf206;&#xf24b;",
    "stanza": 1402
  },
  {
    "role": "code",
    "lines": [
      "not | cell-test2 = $cell-test3;"
    ],
    "preprocessed": "not | cell-test2 = $cell-test3;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "cell-test2",
        "=",
        [
          -2,
          "cell-test3"
        ]
      ]
    ],
    "code": "1210130231211010011312113123121101010032233",
    "spider": "&#xf149;&#xf248;&#xf147;&#xf157;&#xf24a;&#xf147;&#xf249;&#xf147;&#xf158;&#xf24b;",
    "stanza": 1403
  },
  {
    "role": "code",
    "lines": [
      "cell-test3 set $cell-test2;"
    ],
    "preprocessed": "cell-test3 set $cell-test2;",
    "dt": false,
    "parse": [
      "cell-test3",
      "set",
      [
        -2,
        "cell-test2"
      ]
    ],
    "code": "121101010031211111003123121101001132233",
    "spider": "&#xf147;&#xf158;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf147;&#xf157;&#xf24b;",
    "stanza": 1404
  },
  {
    "role": "code",
    "lines": [
      "cell-test2 = $cell-test3;"
    ],
    "preprocessed": "cell-test2 = $cell-test3;",
    "dt": false,
    "parse": [
      "cell-test2",
      "=",
      [
        -2,
        "cell-test3"
      ]
    ],
    "code": "1211010011312113123121101010032233",
    "spider": "&#xf147;&#xf157;&#xf24a;&#xf147;&#xf249;&#xf147;&#xf158;&#xf24b;",
    "stanza": 1405
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "playing around with doors and rooms",
    "section_category": "MUD",
    "section_index": 41,
    "stanza": 1406
  },
  {
    "role": "code",
    "lines": [
      "intro door;"
    ],
    "preprocessed": "intro door;",
    "dt": false,
    "parse": [
      "intro",
      "door"
    ],
    "code": "12100103121101010132233",
    "spider": "&#xf156;&#xf24a;&#xf147;&#xf159;&#xf24b;",
    "stanza": 1407
  },
  {
    "role": "code",
    "lines": [
      "class door ((src room) (dest room))",
      "  (method new | begin (src add $self) (dest add $self))",
      "  (method access-from | lambda ((current room)) |",
      "     cond ((current == $src) $dest) ((current == $dest) $src) 0)",
      "  (method is-present | lambda ((current room)) |",
      "     or (current == $src) (current == $dest));"
    ],
    "preprocessed": "class door ((src room) (dest room))\n  (method new | begin (src add $self) (dest add $self))\n  (method access-from | lambda ((current room)) |\n     cond ((current == $src) $dest) ((current == $dest) $src) 0)\n  (method is-present | lambda ((current room)) |\n     or (current == $src) (current == $dest));",
    "dt": true,
    "parse": [
      "class",
      "door",
      [
        [
          "src",
          "room"
        ],
        [
          "dest",
          "room"
        ]
      ],
      [
        "method",
        "new",
        [
          -1,
          "begin",
          [
            "src",
            "add",
            [
              -2,
              "self"
            ]
          ],
          [
            "dest",
            "add",
            [
              -2,
              "self"
            ]
          ]
        ]
      ],
      [
        "method",
        "access-from",
        [
          -1,
          "lambda",
          [
            [
              "current",
              "room"
            ]
          ],
          [
            -1,
            "cond",
            [
              [
                "current",
                "==",
                [
                  -2,
                  "src"
                ]
              ],
              [
                -2,
                "dest"
              ]
            ],
            [
              [
                "current",
                "==",
                [
                  -2,
                  "dest"
                ]
              ],
              [
                -2,
                "src"
              ]
            ],
            "0"
          ]
        ]
      ],
      [
        "method",
        "is-present",
        [
          -1,
          "lambda",
          [
            [
              "current",
              "room"
            ]
          ],
          [
            -1,
            "or",
            [
              "current",
              "==",
              [
                -2,
                "src"
              ]
            ],
            [
              "current",
              "==",
              [
                -2,
                "dest"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121100110031211010101322121101011031211010111332121101100031211010111333212110000103121011000130231210110113212110101103121010111031231210100101332121101100031210101110312312101001013332121100001031211011001302312110103221210001011312110101113330231210010111322121000101131211000110312312110101103312312110110003322121000101131211000110312312110110003312312110101103302033212110000103121101101030231211010322121000101131211010111333023121113212100010113121100011031231211010110332121000101131211000110312312110110003332233",
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf147;&#xf159;&#xf246;&#xf246;&#xf147;&#xf15a;&#xf24a;&#xf147;&#xf15b;&#xf245;&#xf246;&#xf147;&#xf15c;&#xf24a;&#xf147;&#xf15b;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf147;&#xf15a;&#xf24a;&#xf146;&#xf172;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf147;&#xf15c;&#xf24a;&#xf146;&#xf172;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf15d;&#xf248;&#xf15e;&#xf246;&#xf246;&#xf146;&#xf14f;&#xf24a;&#xf147;&#xf15b;&#xf245;&#xf245;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf146;&#xf14f;&#xf24a;&#xf147;&#xf14a;&#xf249;&#xf147;&#xf15a;&#xf245;&#xf249;&#xf147;&#xf15c;&#xf245;&#xf246;&#xf246;&#xf146;&#xf14f;&#xf24a;&#xf147;&#xf14a;&#xf249;&#xf147;&#xf15c;&#xf245;&#xf249;&#xf147;&#xf15a;&#xf245;&#xf204;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf15e;&#xf248;&#xf15e;&#xf246;&#xf246;&#xf146;&#xf14f;&#xf24a;&#xf147;&#xf15b;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf246;&#xf146;&#xf14f;&#xf24a;&#xf147;&#xf14a;&#xf249;&#xf147;&#xf15a;&#xf245;&#xf246;&#xf146;&#xf14f;&#xf24a;&#xf147;&#xf14a;&#xf249;&#xf147;&#xf15c;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1408
  },
  {
    "role": "code",
    "lines": [
      "intro room;"
    ],
    "preprocessed": "intro room;",
    "dt": false,
    "parse": [
      "intro",
      "room"
    ],
    "code": "12100103121101011132233",
    "spider": "&#xf156;&#xf24a;&#xf147;&#xf15b;&#xf24b;",
    "stanza": 1409
  },
  {
    "role": "code",
    "lines": [
      "class room (name)",
      "  (field content | container new)",
      "  (method name $name)",
      "  (method unknown | ? x | content $x);"
    ],
    "preprocessed": "class room (name)\n  (field content | container new)\n  (method name $name)\n  (method unknown | ? x | content $x);",
    "dt": true,
    "parse": [
      "class",
      "room",
      [
        "name"
      ],
      [
        "field",
        "content",
        [
          -1,
          "container",
          "new"
        ]
      ],
      [
        "method",
        "name",
        [
          -2,
          "name"
        ]
      ],
      [
        "method",
        "unknown",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "content",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "121100110031211010111321211000000332121100101031211001111302312101010113121011000133212110000103121100000031231211000000332121100001031211000100302312110031210100130231211001111312312101001332233",
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf147;&#xf15b;&#xf246;&#xf147;&#xf144;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf147;&#xf153;&#xf248;&#xf146;&#xf16f;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf144;&#xf249;&#xf147;&#xf144;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf148;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf147;&#xf153;&#xf249;&#xf16d;&#xf245;&#xf24b;",
    "stanza": 1410
  },
  {
    "role": "doc",
    "lines": [
      "need to fix up containers to use object equality"
    ],
    "stanza": 1411
  },
  {
    "role": "code",
    "lines": [
      "define object-element | lambda (n lst) |",
      "  < 0 | list-length | select-match (? x | x == $n) $lst;"
    ],
    "preprocessed": "define object-element | lambda (n lst) |\n  < 0 | list-length | select-match (? x | x == $n) $lst;",
    "dt": true,
    "parse": [
      "define",
      "object-element",
      [
        -1,
        "lambda",
        [
          "n",
          "lst"
        ],
        [
          -1,
          "<",
          "0",
          [
            -1,
            "list-length",
            [
              -1,
              "select-match",
              [
                "?",
                "x",
                [
                  -1,
                  "x",
                  "==",
                  [
                    -2,
                    "n"
                  ]
                ]
              ],
              [
                -2,
                "lst"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121101101130231211010321210011103121100001330231210302030231210100103023121100010321211003121010013023121010013121100011031231210011103312312110000132233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf15f;&#xf248;&#xf15e;&#xf246;&#xf145;&#xf152;&#xf24a;&#xf145;&#xf165;&#xf245;&#xf248;&#xf146;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf248;&#xf145;&#xf166;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf16d;&#xf24a;&#xf147;&#xf14a;&#xf249;&#xf145;&#xf152;&#xf245;&#xf249;&#xf145;&#xf165;&#xf24b;",
    "stanza": 1412
  },
  {
    "role": "code",
    "lines": [
      "class container ()",
      "  (field contents | cell new (vector))",
      "  (method inventory | contents get)",
      "  (method add | ? x |",
      "     if (object-element $x | contents get) $false |",
      "     contents set | prepend $x | contents get);"
    ],
    "preprocessed": "class container ()\n  (field contents | cell new (vector))\n  (method inventory | contents get)\n  (method add | ? x |\n     if (object-element $x | contents get) $false |\n     contents set | prepend $x | contents get);",
    "dt": true,
    "parse": [
      "class",
      "container",
      [],
      [
        "field",
        "contents",
        [
          -1,
          "cell",
          "new",
          [
            "vector"
          ]
        ]
      ],
      [
        "method",
        "inventory",
        [
          -1,
          "contents",
          "get"
        ]
      ],
      [
        "method",
        "add",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "if",
            [
              "object-element",
              [
                -2,
                "x"
              ],
              [
                -1,
                "contents",
                "get"
              ]
            ],
            [
              -2,
              "false"
            ],
            [
              -1,
              "contents",
              "set",
              [
                -1,
                "prepend",
                [
                  -2,
                  "x"
                ],
                [
                  -1,
                  "contents",
                  "get"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110011003121010101132321211001010312101011003023121000011131210110001321210000333212110000103121010110130231210101100312111100133212110000103121010111030231211003121010013023121111321211011011312312101001302312101011003121111001331231203023121010110031211111003023121010101312312101001302312101011003121111001332233",
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf146;&#xf16f;&#xf246;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf146;&#xf170;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf246;&#xf154;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf171;&#xf248;&#xf146;&#xf170;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf172;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf147;&#xf15f;&#xf249;&#xf16d;&#xf248;&#xf146;&#xf170;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf249;&#xf144;&#xf248;&#xf146;&#xf170;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf145;&#xf159;&#xf249;&#xf16d;&#xf248;&#xf146;&#xf170;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf24b;",
    "stanza": 1413
  },
  {
    "role": "code",
    "lines": [
      "define hall | room new 0;"
    ],
    "preprocessed": "define hall | room new 0;",
    "dt": true,
    "parse": [
      "define",
      "hall",
      [
        -1,
        "room",
        "new",
        "0"
      ]
    ],
    "code": "121101312110111003023121101011131210110001302032233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf160;&#xf248;&#xf147;&#xf15b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1414
  },
  {
    "role": "code",
    "lines": [
      "define kitchen | room new 1;"
    ],
    "preprocessed": "define kitchen | room new 1;",
    "dt": true,
    "parse": [
      "define",
      "kitchen",
      [
        -1,
        "room",
        "new",
        "1"
      ]
    ],
    "code": "121101312110111013023121101011131210110001302132233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf161;&#xf248;&#xf147;&#xf15b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 1415
  },
  {
    "role": "code",
    "lines": [
      "define door1 | door new $hall $kitchen;"
    ],
    "preprocessed": "define door1 | door new $hall $kitchen;",
    "dt": true,
    "parse": [
      "define",
      "door1",
      [
        -1,
        "door",
        "new",
        [
          -2,
          "hall"
        ],
        [
          -2,
          "kitchen"
        ]
      ]
    ],
    "code": "121101312110111103023121101010131210110001312312110111003123121101110132233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf162;&#xf248;&#xf147;&#xf159;&#xf24a;&#xf146;&#xf175;&#xf249;&#xf147;&#xf160;&#xf249;&#xf147;&#xf161;&#xf24b;",
    "stanza": 1416
  },
  {
    "role": "code",
    "lines": [
      "(first | hall inventory) == $door1;"
    ],
    "preprocessed": "(first | hall inventory) == $door1;",
    "dt": false,
    "parse": [
      [
        "first",
        [
          -1,
          "hall",
          "inventory"
        ]
      ],
      "==",
      [
        -2,
        "door1"
      ]
    ],
    "code": "212101011130231211011100312101011013312110001103123121101111032233",
    "spider": "&#xf246;&#xf145;&#xf15b;&#xf248;&#xf147;&#xf160;&#xf24a;&#xf146;&#xf171;&#xf245;&#xf147;&#xf14a;&#xf249;&#xf147;&#xf162;&#xf24b;",
    "stanza": 1417
  },
  {
    "role": "code",
    "lines": [
      "(first | kitchen inventory) == $door1;"
    ],
    "preprocessed": "(first | kitchen inventory) == $door1;",
    "dt": false,
    "parse": [
      [
        "first",
        [
          -1,
          "kitchen",
          "inventory"
        ]
      ],
      "==",
      [
        -2,
        "door1"
      ]
    ],
    "code": "212101011130231211011101312101011013312110001103123121101111032233",
    "spider": "&#xf246;&#xf145;&#xf15b;&#xf248;&#xf147;&#xf161;&#xf24a;&#xf146;&#xf171;&#xf245;&#xf147;&#xf14a;&#xf249;&#xf147;&#xf162;&#xf24b;",
    "stanza": 1418
  },
  {
    "role": "code",
    "lines": [
      "(door1 access-from $hall) == $kitchen;"
    ],
    "preprocessed": "(door1 access-from $hall) == $kitchen;",
    "dt": false,
    "parse": [
      [
        "door1",
        "access-from",
        [
          -2,
          "hall"
        ]
      ],
      "==",
      [
        -2,
        "kitchen"
      ]
    ],
    "code": "2121101111031211011001312312110111003312110001103123121101110132233",
    "spider": "&#xf246;&#xf147;&#xf162;&#xf24a;&#xf147;&#xf15d;&#xf249;&#xf147;&#xf160;&#xf245;&#xf147;&#xf14a;&#xf249;&#xf147;&#xf161;&#xf24b;",
    "stanza": 1419
  },
  {
    "role": "code",
    "lines": [
      "(door1 access-from $kitchen) == $hall;"
    ],
    "preprocessed": "(door1 access-from $kitchen) == $hall;",
    "dt": false,
    "parse": [
      [
        "door1",
        "access-from",
        [
          -2,
          "kitchen"
        ]
      ],
      "==",
      [
        -2,
        "hall"
      ]
    ],
    "code": "2121101111031211011001312312110111013312110001103123121101110032233",
    "spider": "&#xf246;&#xf147;&#xf162;&#xf24a;&#xf147;&#xf15d;&#xf249;&#xf147;&#xf161;&#xf245;&#xf147;&#xf14a;&#xf249;&#xf147;&#xf160;&#xf24b;",
    "stanza": 1420
  },
  {
    "role": "code",
    "lines": [
      "define stairs | room new 2;"
    ],
    "preprocessed": "define stairs | room new 2;",
    "dt": true,
    "parse": [
      "define",
      "stairs",
      [
        -1,
        "room",
        "new",
        "2"
      ]
    ],
    "code": "1211013121101111130231211010111312101100013021032233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf163;&#xf248;&#xf147;&#xf15b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1421
  },
  {
    "role": "code",
    "lines": [
      "define lawn | room new 3;"
    ],
    "preprocessed": "define lawn | room new 3;",
    "dt": true,
    "parse": [
      "define",
      "lawn",
      [
        -1,
        "room",
        "new",
        "3"
      ]
    ],
    "code": "1211013121110000030231211010111312101100013021132233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf164;&#xf248;&#xf147;&#xf15b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 1422
  },
  {
    "role": "code",
    "lines": [
      "define bedroom | room new 4;"
    ],
    "preprocessed": "define bedroom | room new 4;",
    "dt": true,
    "parse": [
      "define",
      "bedroom",
      [
        -1,
        "room",
        "new",
        "4"
      ]
    ],
    "code": "12110131211100001302312110101113121011000130210032233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf165;&#xf248;&#xf147;&#xf15b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 1423
  },
  {
    "role": "code",
    "lines": [
      "define nowhere | room new 0;"
    ],
    "preprocessed": "define nowhere | room new 0;",
    "dt": true,
    "parse": [
      "define",
      "nowhere",
      [
        -1,
        "room",
        "new",
        "0"
      ]
    ],
    "code": "121101312111000103023121101011131210110001302032233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf166;&#xf248;&#xf147;&#xf15b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1424
  },
  {
    "role": "code",
    "lines": [
      "define door2 | door new $hall $lawn;"
    ],
    "preprocessed": "define door2 | door new $hall $lawn;",
    "dt": true,
    "parse": [
      "define",
      "door2",
      [
        -1,
        "door",
        "new",
        [
          -2,
          "hall"
        ],
        [
          -2,
          "lawn"
        ]
      ]
    ],
    "code": "121101312111000113023121101010131210110001312312110111003123121110000032233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf167;&#xf248;&#xf147;&#xf159;&#xf24a;&#xf146;&#xf175;&#xf249;&#xf147;&#xf160;&#xf249;&#xf147;&#xf164;&#xf24b;",
    "stanza": 1425
  },
  {
    "role": "code",
    "lines": [
      "define door3 | door new $hall $stairs;"
    ],
    "preprocessed": "define door3 | door new $hall $stairs;",
    "dt": true,
    "parse": [
      "define",
      "door3",
      [
        -1,
        "door",
        "new",
        [
          -2,
          "hall"
        ],
        [
          -2,
          "stairs"
        ]
      ]
    ],
    "code": "121101312111001003023121101010131210110001312312110111003123121101111132233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf168;&#xf248;&#xf147;&#xf159;&#xf24a;&#xf146;&#xf175;&#xf249;&#xf147;&#xf160;&#xf249;&#xf147;&#xf163;&#xf24b;",
    "stanza": 1426
  },
  {
    "role": "code",
    "lines": [
      "define door4 | door new $stairs $bedroom;"
    ],
    "preprocessed": "define door4 | door new $stairs $bedroom;",
    "dt": true,
    "parse": [
      "define",
      "door4",
      [
        -1,
        "door",
        "new",
        [
          -2,
          "stairs"
        ],
        [
          -2,
          "bedroom"
        ]
      ]
    ],
    "code": "121101312111001013023121101010131210110001312312110111113123121110000132233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf169;&#xf248;&#xf147;&#xf159;&#xf24a;&#xf146;&#xf175;&#xf249;&#xf147;&#xf163;&#xf249;&#xf147;&#xf165;&#xf24b;",
    "stanza": 1427
  },
  {
    "role": "code",
    "lines": [
      "intro character;"
    ],
    "preprocessed": "intro character;",
    "dt": false,
    "parse": [
      "intro",
      "character"
    ],
    "code": "12100103121110011032233",
    "spider": "&#xf156;&#xf24a;&#xf147;&#xf16a;&#xf24b;",
    "stanza": 1428
  },
  {
    "role": "code",
    "lines": [
      "class character ()",
      "  (field location | cell new 0)",
      "  (field name | cell new 0)",
      "  (method set-room | lambda ((r room)) | begin",
      "     (if (not | function? | location get) 0 | location get remove $self)",
      "     (r add $self)",
      "     (location set $r))",
      "  (method get-room | location get)",
      "  (method set-name | ? n | name set $n)",
      "  (method get-name | name get)",
      "  (method update 0);"
    ],
    "preprocessed": "class character ()\n  (field location | cell new 0)\n  (field name | cell new 0)\n  (method set-room | lambda ((r room)) | begin\n     (if (not | function? | location get) 0 | location get remove $self)\n     (r add $self)\n     (location set $r))\n  (method get-room | location get)\n  (method set-name | ? n | name set $n)\n  (method get-name | name get)\n  (method update 0);",
    "dt": true,
    "parse": [
      "class",
      "character",
      [],
      [
        "field",
        "location",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "name",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "set-room",
        [
          -1,
          "lambda",
          [
            [
              "r",
              "room"
            ]
          ],
          [
            -1,
            "begin",
            [
              "if",
              [
                "not",
                [
                  -1,
                  "function?",
                  [
                    -1,
                    "location",
                    "get"
                  ]
                ]
              ],
              "0",
              [
                -1,
                "location",
                "get",
                "remove",
                [
                  -2,
                  "self"
                ]
              ]
            ],
            [
              "r",
              "add",
              [
                -2,
                "self"
              ]
            ],
            [
              "location",
              "set",
              [
                -2,
                "r"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "get-room",
        [
          -1,
          "location",
          "get"
        ]
      ],
      [
        "method",
        "set-name",
        [
          -1,
          "?",
          "n",
          [
            -1,
            "name",
            "set",
            [
              -2,
              "n"
            ]
          ]
        ]
      ],
      [
        "method",
        "get-name",
        [
          -1,
          "name",
          "get"
        ]
      ],
      [
        "method",
        "update",
        "0"
      ]
    ],
    "code
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf147;&#xf16a;&#xf246;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf147;&#xf16b;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf147;&#xf144;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf16c;&#xf248;&#xf15e;&#xf246;&#xf246;&#xf147;&#xf16d;&#xf24a;&#xf147;&#xf15b;&#xf245;&#xf245;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf153;&#xf246;&#xf149;&#xf248;&#xf170;&#xf248;&#xf147;&#xf16b;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf204;&#xf248;&#xf147;&#xf16b;&#xf24a;&#xf145;&#xf17d;&#xf24a;&#xf146;&#xf173;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf147;&#xf16d;&#xf24a;&#xf146;&#xf172;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf147;&#xf16b;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf147;&#xf16d;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf16e;&#xf248;&#xf147;&#xf16b;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf16f;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf152;&#xf248;&#xf147;&#xf144;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf145;&#xf152;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf170;&#xf248;&#xf147;&#xf144;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf171;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 1429
  },
  {
    "role": "code",
    "lines": [
      "define find-max-helper | lambda (test max idx n lst) |",
      "  if (= 0 | list-length $lst) $idx |",
      "  if (> (test | head $lst) $max)",
      "     (find-max-helper $test (test | head $lst) $n (+ $n 1) (tail $lst))",
      "     (find-max-helper $test $max $idx (+ $n 1) (tail $lst));"
    ],
    "preprocessed": "define find-max-helper | lambda (test max idx n lst) |\n  if (= 0 | list-length $lst) $idx |\n  if (> (test | head $lst) $max)\n     (find-max-helper $test (test | head $lst) $n (+ $n 1) (tail $lst))\n     (find-max-helper $test $max $idx (+ $n 1) (tail $lst));",
    "dt": true,
    "parse": [
      "define",
      "find-max-helper",
      [
        -1,
        "lambda",
        [
          "test",
          "max",
          "idx",
          "n",
          "lst"
        ],
        [
          -1,
          "if",
          [
            "=",
            "0",
            [
              -1,
              "list-length",
              [
                -2,
                "lst"
              ]
            ]
          ],
          [
            -2,
            "idx"
          ],
          [
            -1,
            "if",
            [
              ">",
              [
                "test",
                [
                  -1,
                  "head",
                  [
                    -2,
                    "lst"
                  ]
                ]
              ],
              [
                -2,
                "max"
              ]
            ],
            [
              "find-max-helper",
              [
                -2,
                "test"
              ],
              [
                "test",
                [
                  -1,
                  "head",
                  [
                    -2,
                    "lst"
                  ]
                ]
              ],
              [
                -2,
                "n"
              ],
              [
                "+",
                [
                  -2,
                  "n"
                ],
                "1"
              ],
              [
                "tail",
                [
                  -2,
                  "lst"
                ]
              ]
            ],
            [
              "find-max-helper",
              [
                -2,
                "test"
              ],
              [
                -2,
                "max"
              ],
              [
                -2,
                "idx"
              ],
              [
                "+",
                [
                  -2,
                  "n"
                ],
                "1"
              ],
              [
                "tail",
                [
                  -2,
                  "lst"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121110111030231211010321211000113121001000312111011113121001110312110000133023121111321211302030231210100103123121100001331231211101111302312111132121003212110001130231210100003123121100001331231210010003321211101110312312110001132121100011302312101000031231211000013312312100111032121010312312100111030213321210100013123121100001333212111011103123121100011312312100100031231211101111321210103123121001110302133212101000131231211000013332233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf172;&#xf248;&#xf15e;&#xf246;&#xf145;&#xf167;&#xf24a;&#xf145;&#xf14c;&#xf24a;&#xf147;&#xf173;&#xf24a;&#xf145;&#xf152;&#xf24a;&#xf145;&#xf165;&#xf245;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf249;&#xf145;&#xf165;&#xf245;&#xf249;&#xf147;&#xf173;&#xf248;&#xf153;&#xf246;&#xf148;&#xf246;&#xf145;&#xf167;&#xf248;&#xf145;&#xf154;&#xf249;&#xf145;&#xf165;&#xf245;&#xf249;&#xf145;&#xf14c;&#xf245;&#xf246;&#xf147;&#xf172;&#xf249;&#xf145;&#xf167;&#xf246;&#xf145;&#xf167;&#xf248;&#xf145;&#xf154;&#xf249;&#xf145;&#xf165;&#xf245;&#xf249;&#xf145;&#xf152;&#xf246;&#xf14e;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf145;&#xf155;&#xf249;&#xf145;&#xf165;&#xf245;&#xf245;&#xf246;&#xf147;&#xf172;&#xf249;&#xf145;&#xf167;&#xf249;&#xf145;&#xf14c;&#xf249;&#xf147;&#xf173;&#xf246;&#xf14e;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf145;&#xf155;&#xf249;&#xf145;&#xf165;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1430
  },
  {
    "role": "code",
    "lines": [
      "define find-max-idx | lambda (test lst) |",
      "  find-max-helper $test (test | head $lst) 0 0 $lst;"
    ],
    "preprocessed": "define find-max-idx | lambda (test lst) |\n  find-max-helper $test (test | head $lst) 0 0 $lst;",
    "dt": true,
    "parse": [
      "define",
      "find-max-idx",
      [
        -1,
        "lambda",
        [
          "test",
          "lst"
        ],
        [
          -1,
          "find-max-helper",
          [
            -2,
            "test"
          ],
          [
            "test",
            [
              -1,
              "head",
              [
                -2,
                "lst"
              ]
            ]
          ],
          "0",
          "0",
          [
            -2,
            "lst"
          ]
        ]
      ]
    ],
    "code": "121101312111100003023121101032121100011312110000133023121110111031231211000113212110001130231210100003123121100001330203020312312110000132233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf174;&#xf248;&#xf15e;&#xf246;&#xf145;&#xf167;&#xf24a;&#xf145;&#xf165;&#xf245;&#xf248;&#xf147;&#xf172;&#xf249;&#xf145;&#xf167;&#xf246;&#xf145;&#xf167;&#xf248;&#xf145;&#xf154;&#xf249;&#xf145;&#xf165;&#xf245;&#xf204;&#xf24a;&#xf204;&#xf249;&#xf145;&#xf165;&#xf24b;",
    "stanza": 1431
  },
  {
    "role": "code",
    "lines": [
      "define find-min-helper | lambda (test max idx n lst) |",
      "  if (= 0 | list-length $lst) $idx |",
      "  if (< (test | head $lst) $max)",
      "     (find-min-helper $test (test | head $lst) $n (+ $n 1) (tail $lst))",
      "     (find-min-helper $test $max $idx (+ $n 1) (tail $lst));"
    ],
    "preprocessed": "define find-min-helper | lambda (test max idx n lst) |\n  if (= 0 | list-length $lst) $idx |\n  if (< (test | head $lst) $max)\n     (find-min-helper $test (test | head $lst) $n (+ $n 1) (tail $lst))\n     (find-min-helper $test $max $idx (+ $n 1) (tail $lst));",
    "dt": true,
    "parse": [
      "define",
      "find-min-helper",
      [
        -1,
        "lambda",
        [
          "test",
          "max",
          "idx",
          "n",
          "lst"
        ],
        [
          -1,
          "if",
          [
            "=",
            "0",
            [
              -1,
              "list-length",
              [
                -2,
                "lst"
              ]
            ]
          ],
          [
            -2,
            "idx"
          ],
          [
            -1,
            "if",
            [
              "<",
              [
                "test",
                [
                  -1,
                  "head",
                  [
                    -2,
                    "lst"
                  ]
                ]
              ],
              [
                -2,
                "max"
              ]
            ],
            [
              "find-min-helper",
              [
                -2,
                "test"
              ],
              [
                "test",
                [
                  -1,
                  "head",
                  [
                    -2,
                    "lst"
                  ]
                ]
              ],
              [
                -2,
                "n"
              ],
              [
                "+",
                [
                  -2,
                  "n"
                ],
                "1"
              ],
              [
                "tail",
                [
                  -2,
                  "lst"
                ]
              ]
            ],
            [
              "find-min-helper",
              [
                -2,
                "test"
              ],
              [
                -2,
                "max"
              ],
              [
                -2,
                "idx"
              ],
              [
                "+",
                [
                  -2,
                  "n"
                ],
                "1"
              ],
              [
                "tail",
                [
                  -2,
                  "lst"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312111100013023121101032121100011312100100031211101111312100111031211000013302312111132121130203023121010010312312110000133123121110111130231211113212103212110001130231210100003123121100001331231210010003321211110001312312110001132121100011302312101000031231211000013312312100111032121010312312100111030213321210100013123121100001333212111100013123121100011312312100100031231211101111321210103123121001110302133212101000131231211000013332233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf175;&#xf248;&#xf15e;&#xf246;&#xf145;&#xf167;&#xf24a;&#xf145;&#xf14c;&#xf24a;&#xf147;&#xf173;&#xf24a;&#xf145;&#xf152;&#xf24a;&#xf145;&#xf165;&#xf245;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf249;&#xf145;&#xf165;&#xf245;&#xf249;&#xf147;&#xf173;&#xf248;&#xf153;&#xf246;&#xf146;&#xf246;&#xf145;&#xf167;&#xf248;&#xf145;&#xf154;&#xf249;&#xf145;&#xf165;&#xf245;&#xf249;&#xf145;&#xf14c;&#xf245;&#xf246;&#xf147;&#xf175;&#xf249;&#xf145;&#xf167;&#xf246;&#xf145;&#xf167;&#xf248;&#xf145;&#xf154;&#xf249;&#xf145;&#xf165;&#xf245;&#xf249;&#xf145;&#xf152;&#xf246;&#xf14e;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf145;&#xf155;&#xf249;&#xf145;&#xf165;&#xf245;&#xf245;&#xf246;&#xf147;&#xf175;&#xf249;&#xf145;&#xf167;&#xf249;&#xf145;&#xf14c;&#xf249;&#xf147;&#xf173;&#xf246;&#xf14e;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf145;&#xf155;&#xf249;&#xf145;&#xf165;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1432
  },
  {
    "role": "code",
    "lines": [
      "define find-min-idx | lambda (test lst) |",
      "  find-min-helper $test (test | head $lst) 0 0 $lst;"
    ],
    "preprocessed": "define find-min-idx | lambda (test lst) |\n  find-min-helper $test (test | head $lst) 0 0 $lst;",
    "dt": true,
    "parse": [
      "define",
      "find-min-idx",
      [
        -1,
        "lambda",
        [
          "test",
          "lst"
        ],
        [
          -1,
          "find-min-helper",
          [
            -2,
            "test"
          ],
          [
            "test",
            [
              -1,
              "head",
              [
                -2,
                "lst"
              ]
            ]
          ],
          "0",
          "0",
          [
            -2,
            "lst"
          ]
        ]
      ]
    ],
    "code": "121101312111100103023121101032121100011312110000133023121111000131231211000113212110001130231210100003123121100001330203020312312110000132233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf176;&#xf248;&#xf15e;&#xf246;&#xf145;&#xf167;&#xf24a;&#xf145;&#xf165;&#xf245;&#xf248;&#xf147;&#xf175;&#xf249;&#xf145;&#xf167;&#xf246;&#xf145;&#xf167;&#xf248;&#xf145;&#xf154;&#xf249;&#xf145;&#xf165;&#xf245;&#xf204;&#xf24a;&#xf204;&#xf249;&#xf145;&#xf165;&#xf24b;",
    "stanza": 1433
  },
  {
    "role": "code",
    "lines": [
      "= 2 | find-max-idx (? x $x) | vector 3 4 5 0;"
    ],
    "preprocessed": "= 2 | find-max-idx (? x $x) | vector 3 4 5 0;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "find-max-idx",
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        [
          -1,
          "vector",
          "3",
          "4",
          "5",
          "0"
        ]
      ]
    ],
    "code": "121130210302312111100003212110031210100131231210100133023121000030211302100302101302032233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf147;&#xf174;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf24a;&#xf209;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1434
  },
  {
    "role": "code",
    "lines": [
      "= 1 | find-max-idx (? x $x) | vector 3 5 4 0;"
    ],
    "preprocessed": "= 1 | find-max-idx (? x $x) | vector 3 5 4 0;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "find-max-idx",
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        [
          -1,
          "vector",
          "3",
          "5",
          "4",
          "0"
        ]
      ]
    ],
    "code": "12113021302312111100003212110031210100131231210100133023121000030211302101302100302032233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf147;&#xf174;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf207;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1435
  },
  {
    "role": "code",
    "lines": [
      "= 0 | find-max-idx (? x $x) | vector 5 3 4 0;"
    ],
    "preprocessed": "= 0 | find-max-idx (? x $x) | vector 5 3 4 0;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "find-max-idx",
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        [
          -1,
          "vector",
          "5",
          "3",
          "4",
          "0"
        ]
      ]
    ],
    "code": "12113020302312111100003212110031210100131231210100133023121000030210130211302100302032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf147;&#xf174;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1436
  },
  {
    "role": "code",
    "lines": [
      "= 2 | find-min-idx (? x $x) | vector 3 4 0 2;"
    ],
    "preprocessed": "= 2 | find-min-idx (? x $x) | vector 3 4 0 2;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "find-min-idx",
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        [
          -1,
          "vector",
          "3",
          "4",
          "0",
          "2"
        ]
      ]
    ],
    "code": "12113021030231211110010321211003121010013123121010013302312100003021130210030203021032233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf147;&#xf176;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf24a;&#xf204;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1437
  },
  {
    "role": "code",
    "lines": [
      "= 1 | find-min-idx (? x $x) | vector 3 1 4 2;"
    ],
    "preprocessed": "= 1 | find-min-idx (? x $x) | vector 3 1 4 2;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "find-min-idx",
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        [
          -1,
          "vector",
          "3",
          "1",
          "4",
          "2"
        ]
      ]
    ],
    "code": "1211302130231211110010321211003121010013123121010013302312100003021130213021003021032233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf147;&#xf176;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf207;&#xf24a;&#xf205;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1438
  },
  {
    "role": "code",
    "lines": [
      "= 0 | find-min-idx (? x $x) | vector 1 3 4 2;"
    ],
    "preprocessed": "= 0 | find-min-idx (? x $x) | vector 1 3 4 2;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "find-min-idx",
        [
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ],
        [
          -1,
          "vector",
          "1",
          "3",
          "4",
          "2"
        ]
      ]
    ],
    "code": "1211302030231211110010321211003121010013123121010013302312100003021302113021003021032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf147;&#xf176;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1439
  },
  {
    "role": "doc",
    "lines": [
      "the 'robo' class makes a character that patrols from room to room"
    ],
    "stanza": 1440
  },
  {
    "role": "code",
    "lines": [
      "class robo ()",
      "  (field super | character new)",
      "  (field timestamp | cell new 1)",
      "  (field timestamp-map | cell new (? x 0))",
      "  (method unknown | ? x | super $x)",
      "  (method update |",
      "     assign exits (select-match (? x | instanceof door $x) (self location inventory)) |",
      "     assign timestamps (map (? x | timestamp-map get $x) $exits) |",
      "     assign chosen-exit (list-ref $exits | find-min-idx (? x $x) $timestamps) |",
      "     assign current-tmap (timestamp-map get) |",
      "     assign current-t (timestamp get) |",
      "     begin",
      "       (self location set | chosen-exit access-from | self location get)",
      "       (timestamp-map set | lambda ((d door)) |",
      "          if (d == $chosen-exit) $current-t (current-tmap $d))",
      "       (timestamp set | + 1 | timestamp get));"
    ],
    "preprocessed": "class robo ()\n  (field super | character new)\n  (field timestamp | cell new 1)\n  (field timestamp-map | cell new (? x 0))\n  (method unknown | ? x | super $x)\n  (method update |\n     assign exits (select-match (? x | instanceof door $x) (self location inventory)) |\n     assign timestamps (map (? x | timestamp-map get $x) $exits) |\n     assign chosen-exit (list-ref $exits | find-min-idx (? x $x) $timestamps) |\n     assign current-tmap (timestamp-map get) |\n     assign current-t (timestamp get) |\n     begin\n       (self location set | chosen-exit access-from | self location get)\n       (timestamp-map set | lambda ((d door)) |\n          if (d == $chosen-exit) $current-t (current-tmap $d))\n       (timestamp set | + 1 | timestamp get));",
    "dt": true,
    "parse": [
      "class",
      "robo",
      [],
      [
        "field",
        "super",
        [
          -1,
          "character",
          "new"
        ]
      ],
      [
        "field",
        "timestamp",
        [
          -1,
          "cell",
          "new",
          "1"
        ]
      ],
      [
        "field",
        "timestamp-map",
        [
          -1,
          "cell",
          "new",
          [
            "?",
            "x",
            "0"
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "super",
            [
              -2,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "update",
        [
          -1,
          "assign",
          "exits",
          [
            "select-match",
            [
              "?",
              "x",
              [
                -1,
                "instanceof",
                "door",
                [
                  -2,
                  "x"
                ]
              ]
            ],
            [
              "self",
              "location",
              "inventory"
            ]
          ],
          [
            -1,
            "assign",
            "timestamps",
            [
              "map",
              [
                "?",
                "x",
                [
                  -1,
                  "timestamp-map",
                  "get",
                  [
                    -2,
                    "x"
                  ]
                ]
              ],
              [
                -2,
                "exits"
              ]
            ],
            [
              -1,
              "assign",
              "chosen-exit",
              [
                "list-ref",
                [
                  -2,
                  "exits"
                ],
                [
                  -1,
                  "find-min-idx",
                  [
                    "?",
                    "x",
                    [
                      -2,
                      "x"
                    ]
                  ],
                  [
                    -2,
                    "timestamps"
                  ]
                ]
              ],
              [
                -1,
                "assign",
                "current-tmap",
                [
                  "timestamp-map",
                  "get"
                ],
                [
                  -1,
                  "assign",
                  "current-t",
                  [
                    "timestamp",
                    "get"
                  ],
                  [
                    -1,
                    "begin",
                    [
                      "self",
                      "location",
                      "set",
                      [
                        -1,
                        "chosen-exit",
                        "access-from",
                        [
                          -1,
                          "self",
                          "location",
                          "get"
                        ]
                      ]
                    ],
                    [
                      "timestamp-map",
                      "set",
                      [
                        -1,
                        "lambda",
                        [
                          [
                            "d",
                            "door"
                          ]
                        ],
                        [
                          -1,
                          "if",
                          [
                            "d",
                            "==",
                            [
                              -2,
                              "chosen-exit"
                            ]
                          ],
                          [
                            -2,
                            "current-t"
                          ],
                          [
                            "current-tmap",
                            [
                              -2,
                              "d"
                            ]
                          ]
                        ]
                      ]
                    ],
                    [
                      "timestamp",
                      "set",
                      [
                        -1,
                        "+",
                        "1",
                        [
                          -1,
                          "timestamp",
                          "get"
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf147;&#xf177;&#xf246;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf146;&#xf178;&#xf248;&#xf147;&#xf16a;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf147;&#xf178;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf147;&#xf179;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf148;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf178;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf171;&#xf248;&#xf152;&#xf24a;&#xf147;&#xf17a;&#xf246;&#xf145;&#xf166;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf160;&#xf24a;&#xf147;&#xf159;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf147;&#xf16b;&#xf24a;&#xf146;&#xf171;&#xf245;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf147;&#xf17b;&#xf246;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf147;&#xf179;&#xf24a;&#xf145;&#xf17d;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf147;&#xf17a;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf147;&#xf17c;&#xf246;&#xf145;&#xf157;&#xf249;&#xf147;&#xf17a;&#xf248;&#xf147;&#xf176;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf147;&#xf17b;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf147;&#xf17d;&#xf246;&#xf147;&#xf179;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf147;&#xf17e;&#xf246;&#xf147;&#xf178;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf147;&#xf16b;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf147;&#xf17c;&#xf24a;&#xf147;&#xf15d;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf147;&#xf16b;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf246;&#xf147;&#xf179;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf15e;&#xf246;&#xf246;&#xf147;&#xf17f;&#xf24a;&#xf147;&#xf159;&#xf245;&#xf245;&#xf248;&#xf153;&#xf246;&#xf147;&#xf17f;&#xf24a;&#xf147;&#xf14a;&#xf249;&#xf147;&#xf17c;&#xf245;&#xf249;&#xf147;&#xf17e;&#xf246;&#xf147;&#xf17d;&#xf249;&#xf147;&#xf17f;&#xf245;&#xf245;&#xf246;&#xf147;&#xf178;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf14e;&#xf24a;&#xf205;&#xf248;&#xf147;&#xf178;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1441
  },
  {
    "role": "code",
    "lines": [
      "define myrobo | robo new;"
    ],
    "preprocessed": "define myrobo | robo new;",
    "dt": true,
    "parse": [
      "define",
      "myrobo",
      [
        -1,
        "robo",
        "new"
      ]
    ],
    "code": "12110131211111100302312111100113121011000132233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf180;&#xf248;&#xf147;&#xf177;&#xf24a;&#xf146;&#xf175;&#xf24b;",
    "stanza": 1442
  },
  {
    "role": "code",
    "lines": [
      "myrobo set-room $stairs;"
    ],
    "preprocessed": "myrobo set-room $stairs;",
    "dt": false,
    "parse": [
      "myrobo",
      "set-room",
      [
        -2,
        "stairs"
      ]
    ],
    "code": "1211111100312111010003123121101111132233",
    "spider": "&#xf147;&#xf180;&#xf24a;&#xf147;&#xf16c;&#xf249;&#xf147;&#xf163;&#xf24b;",
    "stanza": 1443
  },
  {
    "role": "code",
    "lines": [
      "define which-room | lambda ((rr robo)) |",
      "  find-max-idx",
      "    (lambda ((r room)) | if (r == | rr get-room) 1 0) |",
      "    vector $hall $kitchen $stairs $lawn $bedroom;"
    ],
    "preprocessed": "define which-room | lambda ((rr robo)) |\n  find-max-idx\n    (lambda ((r room)) | if (r == | rr get-room) 1 0) |\n    vector $hall $kitchen $stairs $lawn $bedroom;",
    "dt": true,
    "parse": [
      "define",
      "which-room",
      [
        -1,
        "lambda",
        [
          [
            "rr",
            "robo"
          ]
        ],
        [
          -1,
          "find-max-idx",
          [
            "lambda",
            [
              [
                "r",
                "room"
              ]
            ],
            [
              -1,
              "if",
              [
                "r",
                "==",
                [
                  -1,
                  "rr",
                  "get-room"
                ]
              ],
              "1",
              "0"
            ]
          ],
          [
            -1,
            "vector",
            [
              -2,
              "hall"
            ],
            [
              -2,
              "kitchen"
            ],
            [
              -2,
              "stairs"
            ],
            [
              -2,
              "lawn"
            ],
            [
              -2,
              "bedroom"
            ]
          ]
        ]
      ]
    ],
    "code": "12110131211111101302312110103221211111110312111100113330231211110000321211010322121110100131211010111333023121111321211101001312110001103023121111111031211101010330213020330231210000312312110111003123121101110131231211011111312312111000003123121110000132233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf181;&#xf248;&#xf15e;&#xf246;&#xf246;&#xf147;&#xf182;&#xf24a;&#xf147;&#xf177;&#xf245;&#xf245;&#xf248;&#xf147;&#xf174;&#xf246;&#xf15e;&#xf246;&#xf246;&#xf147;&#xf16d;&#xf24a;&#xf147;&#xf15b;&#xf245;&#xf245;&#xf248;&#xf153;&#xf246;&#xf147;&#xf16d;&#xf24a;&#xf147;&#xf14a;&#xf248;&#xf147;&#xf182;&#xf24a;&#xf147;&#xf16e;&#xf245;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf154;&#xf249;&#xf147;&#xf160;&#xf249;&#xf147;&#xf161;&#xf249;&#xf147;&#xf163;&#xf249;&#xf147;&#xf164;&#xf249;&#xf147;&#xf165;&#xf24b;",
    "stanza": 1444
  },
  {
    "role": "code",
    "lines": [
      "define sequencer | lambda (n current lst) |",
      "  if (>= $current $n) $lst | begin",
      "    (myrobo update)",
      "    (sequencer $n (+ $current 1) (append (which-room $myrobo) $lst));"
    ],
    "preprocessed": "define sequencer | lambda (n current lst) |\n  if (>= $current $n) $lst | begin\n    (myrobo update)\n    (sequencer $n (+ $current 1) (append (which-room $myrobo) $lst));",
    "dt": true,
    "parse": [
      "define",
      "sequencer",
      [
        -1,
        "lambda",
        [
          "n",
          "current",
          "lst"
        ],
        [
          -1,
          "if",
          [
            ">=",
            [
              -2,
              "current"
            ],
            [
              -2,
              "n"
            ]
          ],
          [
            -2,
            "lst"
          ],
          [
            -1,
            "begin",
            [
              "myrobo",
              "update"
            ],
            [
              "sequencer",
              [
                -2,
                "n"
              ],
              [
                "+",
                [
                  -2,
                  "current"
                ],
                "1"
              ],
              [
                "append",
                [
                  "which-room",
                  [
                    -2,
                    "myrobo"
                  ]
                ],
                [
                  -2,
                  "lst"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210000000030231211010321210011103121000101131211000013302312111132121001011312312100010113123121001110331231211000013023121011011321211111100312111011013321210000000031231210011103212101031231210001011302133212110000032121111110131231211111100331231211000013332233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf144;&#xf248;&#xf15e;&#xf246;&#xf145;&#xf152;&#xf24a;&#xf146;&#xf14f;&#xf24a;&#xf145;&#xf165;&#xf245;&#xf248;&#xf153;&#xf246;&#xf145;&#xf14f;&#xf249;&#xf146;&#xf14f;&#xf249;&#xf145;&#xf152;&#xf245;&#xf249;&#xf145;&#xf165;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf147;&#xf180;&#xf24a;&#xf147;&#xf171;&#xf245;&#xf246;&#xf148;&#xf144;&#xf249;&#xf145;&#xf152;&#xf246;&#xf14e;&#xf249;&#xf146;&#xf14f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf145;&#xf164;&#xf246;&#xf147;&#xf181;&#xf249;&#xf147;&#xf180;&#xf245;&#xf249;&#xf145;&#xf165;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1445
  },
  {
    "role": "doc",
    "lines": [
      "here is a list of the first 30 rooms the robot character visits",
      "0=hall, 1=kitchen, 2=stairs, 3=lawn, 4=bedroom"
    ],
    "stanza": 1446
  },
  {
    "role": "code",
    "lines": [
      "list= (sequencer 30 0 (vector)) |",
      "  vector 4 2 0 3 0 1 0 2 4 2 0 3 0 1 0 2 4 2 0 3 0 1 0 2 4 2 0 3 0 1;"
    ],
    "preprocessed": "list= (sequencer 30 0 (vector)) |\n  vector 4 2 0 3 0 1 0 2 4 2 0 3 0 1 0 2 4 2 0 3 0 1 0 2 4 2 0 3 0 1;",
    "dt": false,
    "parse": [
      "list=",
      [
        "sequencer",
        "30",
        "0",
        [
          "vector"
        ]
      ],
      [
        -1,
        "vector",
        "4",
        "2",
        "0",
        "3",
        "0",
        "1",
        "0",
        "2",
        "4",
        "2",
        "0",
        "3",
        "0",
        "1",
        "0",
        "2",
        "4",
        "2",
        "0",
        "3",
        "0",
        "1",
        "0",
        "2",
        "4",
        "2",
        "0",
        "3",
        "0",
        "1"
      ]
    ],
    "code": "12101010032121000000003021111030203212100003330231210000302100302103020302113020302130203021030210030210302030211302030213020302103021003021030203021130203021302030210302100302103020302113020302132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf148;&#xf144;&#xf24a;&#xf222;&#xf24a;&#xf204;&#xf246;&#xf154;&#xf245;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24a;&#xf204;&#xf24a;&#xf207;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24a;&#xf204;&#xf24a;&#xf207;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24a;&#xf204;&#xf24a;&#xf207;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24a;&#xf204;&#xf24a;&#xf207;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 1447
  },
  {
    "role": "doc",
    "lines": [
      "Now should start to introduce a language to talk about what is",
      "going on in the simulated world, and start to move away from detailed mechanism"
    ],
    "stanza": 1448
  },
  {
    "role": "file",
    "lines": [
      "== COS_Element =="
    ],
    "stanza": 1449
  },
  {
    "role": "doc",
    "lines": [
      "",
      "Introducing the elements is done well in the [DearET message](https://web.archive.org/web/20161017192136/http://www.dearet.org/testing-a-message) by [Michael Busch](https://seti.org/our-scientists/michael-busch).  We draw inspiration from that work.",
      "",
      "The general idea here is that there are some physical ratios that should be known by",
      "anybody with a handle on what is going on at the atomic level, and may be recognizable.",
      "The pattern of how elementary particles are combined into atoms, and atoms into",
      "molecules, may also ring a bell.",
      ""
    ],
    "section_description": "introduce the elements",
    "section_category": "PHYSICS",
    "section_index": 42,
    "stanza": 1450
  },
  {
    "role": "code",
    "lines": [
      "intro proton;"
    ],
    "preprocessed": "intro proton;",
    "dt": false,
    "parse": [
      "intro",
      "proton"
    ],
    "code": "121001031210000000132233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf145;&#xf24b;",
    "stanza": 1451
  },
  {
    "role": "code",
    "lines": [
      "intro electron;"
    ],
    "preprocessed": "intro electron;",
    "dt": false,
    "parse": [
      "intro",
      "electron"
    ],
    "code": "121001031210000001032233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf146;&#xf24b;",
    "stanza": 1452
  },
  {
    "role": "code",
    "lines": [
      "intro neutron;"
    ],
    "preprocessed": "intro neutron;",
    "dt": false,
    "parse": [
      "intro",
      "neutron"
    ],
    "code": "121001031210000001132233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf147;&#xf24b;",
    "stanza": 1453
  },
  {
    "role": "code",
    "lines": [
      "intro mass;"
    ],
    "preprocessed": "intro mass;",
    "dt": false,
    "parse": [
      "intro",
      "mass"
    ],
    "code": "121001031210000010032233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf148;&#xf24b;",
    "stanza": 1454
  },
  {
    "role": "doc",
    "lines": [
      "The following definitions are not included in the message, since they are",
      "unit-specific.  The message will only present ratios."
    ],
    "stanza": 1455
  },
  {
    "role": "code",
    "lines": [
      "assume | define proton | make-hash | vector",
      "  (pair mass | decimal:power (minus 27) 1 | vector 6 7 2 6 1 9 2 3 6 9)",
      "  (pair charge 1);"
    ],
    "preprocessed": "assume | define proton | make-hash | vector\n  (pair mass | decimal:power (minus 27) 1 | vector 6 7 2 6 1 9 2 3 6 9)\n  (pair charge 1);",
    "dt": true,
    "parse": [
      "assume",
      [
        -1,
        "define",
        "proton",
        [
          -1,
          "make-hash",
          [
            -1,
            "vector",
            [
              "pair",
              "mass",
              [
                -1,
                "decimal:power",
                [
                  "minus",
                  "27"
                ],
                "1",
                [
                  -1,
                  "vector",
                  "6",
                  "7",
                  "2",
                  "6",
                  "1",
                  "9",
                  "2",
                  "3",
                  "6",
                  "9"
                ]
              ]
            ],
            [
              "pair",
              "charge",
              "1"
            ]
          ]
        ]
      ]
    ],
    "code": "12100101302312110131210000000130231210000101302312100003212101011031210000010030231212110101031211011103321211001003021101133021302312100003021103021113021030211030213021001302103021130211030210013321210101103121000001013021332233",
    "spider": "&#xf169;&#xf248;&#xf151;&#xf24a;&#xf148;&#xf145;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf148;&#xf148;&#xf248;&#xf145;&#xf16e;&#xf145;&#xf172;&#xf246;&#xf145;&#xf168;&#xf24a;&#xf21f;&#xf245;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf20b;&#xf24a;&#xf206;&#xf24a;&#xf20a;&#xf24a;&#xf205;&#xf24a;&#xf20d;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf24a;&#xf20a;&#xf24a;&#xf20d;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf148;&#xf149;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "assume": true,
    "stanza": 1456
  },
  {
    "role": "code",
    "lines": [
      "assume | define electron | make-hash | vector",
      "  (pair mass | decimal:power (minus 31) 9 | vector 1 0 9 3 8 3 5 6)",
      "  (pair charge | minus 1);"
    ],
    "preprocessed": "assume | define electron | make-hash | vector\n  (pair mass | decimal:power (minus 31) 9 | vector 1 0 9 3 8 3 5 6)\n  (pair charge | minus 1);",
    "dt": true,
    "parse": [
      "assume",
      [
        -1,
        "define",
        "electron",
        [
          -1,
          "make-hash",
          [
            -1,
            "vector",
            [
              "pair",
              "mass",
              [
                -1,
                "decimal:power",
                [
                  "minus",
                  "31"
                ],
                "9",
                [
                  -1,
                  "vector",
                  "1",
                  "0",
                  "9",
                  "3",
                  "8",
                  "3",
                  "5",
                  "6"
                ]
              ]
            ],
            [
              "pair",
              "charge",
              [
                -1,
                "minus",
                "1"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12100101302312110131210000001030231210000101302312100003212101011031210000010030231212110101031211011103321211001003021111133021001302312100003021302030210013021130210003021130210130211033212101011031210000010130231211001003021332233",
    "spider": "&#xf169;&#xf248;&#xf151;&#xf24a;&#xf148;&#xf146;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf148;&#xf148;&#xf248;&#xf145;&#xf16e;&#xf145;&#xf172;&#xf246;&#xf145;&#xf168;&#xf24a;&#xf223;&#xf245;&#xf20d;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24a;&#xf20d;&#xf24a;&#xf207;&#xf24a;&#xf20c;&#xf24a;&#xf207;&#xf24a;&#xf209;&#xf24a;&#xf20a;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf148;&#xf149;&#xf248;&#xf145;&#xf168;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "assume": true,
    "stanza": 1457
  },
  {
    "role": "code",
    "lines": [
      "assume | define neutron | make-hash | vector",
      "  (pair mass | decimal:power (minus 27) 1 | vector 6 7 4 9 2 7 4 7 1)",
      "  (pair charge 0);"
    ],
    "preprocessed": "assume | define neutron | make-hash | vector\n  (pair mass | decimal:power (minus 27) 1 | vector 6 7 4 9 2 7 4 7 1)\n  (pair charge 0);",
    "dt": true,
    "parse": [
      "assume",
      [
        -1,
        "define",
        "neutron",
        [
          -1,
          "make-hash",
          [
            -1,
            "vector",
            [
              "pair",
              "mass",
              [
                -1,
                "decimal:power",
                [
                  "minus",
                  "27"
                ],
                "1",
                [
                  -1,
                  "vector",
                  "6",
                  "7",
                  "4",
                  "9",
                  "2",
                  "7",
                  "4",
                  "7",
                  "1"
                ]
              ]
            ],
            [
              "pair",
              "charge",
              "0"
            ]
          ]
        ]
      ]
    ],
    "code": "121001013023121101312100000011302312100001013023121000032121010110312100000100302312121101010312110111033212110010030211011330213023121000030211030211130210030210013021030211130210030211130213321210101103121000001013020332233",
    "spider": "&#xf169;&#xf248;&#xf151;&#xf24a;&#xf148;&#xf147;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf148;&#xf148;&#xf248;&#xf145;&#xf16e;&#xf145;&#xf172;&#xf246;&#xf145;&#xf168;&#xf24a;&#xf21f;&#xf245;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf20b;&#xf24a;&#xf208;&#xf24a;&#xf20d;&#xf24a;&#xf206;&#xf24a;&#xf20b;&#xf24a;&#xf208;&#xf24a;&#xf20b;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf148;&#xf149;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "assume": true,
    "stanza": 1458
  },
  {
    "role": "code",
    "lines": [
      "float:= (proton mass) | * (electron mass) | decimal 1836 | vector 1 5 2 6 7 3;"
    ],
    "preprocessed": "float:= (proton mass) | * (electron mass) | decimal 1836 | vector 1 5 2 6 7 3;",
    "dt": false,
    "parse": [
      "float:=",
      [
        "proton",
        "mass"
      ],
      [
        -1,
        "*",
        [
          "electron",
          "mass"
        ],
        [
          -1,
          "decimal",
          "1836",
          [
            -1,
            "vector",
            "1",
            "5",
            "2",
            "6",
            "7",
            "3"
          ]
        ]
      ]
    ],
    "code": "1212110101131211332121000000013121000001003302312100132121000000103121000001003302312110101030211100101100302312100003021302101302103021103021113021132233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf148;&#xf145;&#xf24a;&#xf148;&#xf148;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf148;&#xf146;&#xf24a;&#xf148;&#xf148;&#xf245;&#xf248;&#xf145;&#xf16e;&#xf24a;&#xf220;&#xf230;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf209;&#xf24a;&#xf206;&#xf24a;&#xf20a;&#xf24a;&#xf20b;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 1459
  },
  {
    "role": "code",
    "lines": [
      "float:= (electron mass) | * (proton mass) | decimal 0 | vector 0 0 0 5 4 4 6 1 7;"
    ],
    "preprocessed": "float:= (electron mass) | * (proton mass) | decimal 0 | vector 0 0 0 5 4 4 6 1 7;",
    "dt": false,
    "parse": [
      "float:=",
      [
        "electron",
        "mass"
      ],
      [
        -1,
        "*",
        [
          "proton",
          "mass"
        ],
        [
          -1,
          "decimal",
          "0",
          [
            -1,
            "vector",
            "0",
            "0",
            "0",
            "5",
            "4",
            "4",
            "6",
            "1",
            "7"
          ]
        ]
      ]
    ],
    "code": "12121101011312113321210000001031210000010033023121001321210000000131210000010033023121101010302030231210000302030203020302101302100302100302110302130211132233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf148;&#xf146;&#xf24a;&#xf148;&#xf148;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf148;&#xf145;&#xf24a;&#xf148;&#xf148;&#xf245;&#xf248;&#xf145;&#xf16e;&#xf24a;&#xf204;&#xf248;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf24a;&#xf209;&#xf24a;&#xf208;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf24a;&#xf205;&#xf24a;&#xf20b;&#xf24b;",
    "stanza": 1460
  },
  {
    "role": "code",
    "lines": [
      "float:= (neutron mass) | * (proton mass) | decimal 1 | vector 0 0 1 3 7 8 4 2;"
    ],
    "preprocessed": "float:= (neutron mass) | * (proton mass) | decimal 1 | vector 0 0 1 3 7 8 4 2;",
    "dt": false,
    "parse": [
      "float:=",
      [
        "neutron",
        "mass"
      ],
      [
        -1,
        "*",
        [
          "proton",
          "mass"
        ],
        [
          -1,
          "decimal",
          "1",
          [
            -1,
            "vector",
            "0",
            "0",
            "1",
            "3",
            "7",
            "8",
            "4",
            "2"
          ]
        ]
      ]
    ],
    "code": "121211010113121133212100000011312100000100330231210013212100000001312100000100330231211010103021302312100003020302030213021130211130210003021003021032233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf148;&#xf147;&#xf24a;&#xf148;&#xf148;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf148;&#xf145;&#xf24a;&#xf148;&#xf148;&#xf245;&#xf248;&#xf145;&#xf16e;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24a;&#xf207;&#xf24a;&#xf20b;&#xf24a;&#xf20c;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1461
  },
  {
    "role": "code",
    "lines": [
      "float:= (proton charge) | * (electron charge) (minus 1);"
    ],
    "preprocessed": "float:= (proton charge) | * (electron charge) (minus 1);",
    "dt": false,
    "parse": [
      "float:=",
      [
        "proton",
        "charge"
      ],
      [
        -1,
        "*",
        [
          "electron",
          "charge"
        ],
        [
          "minus",
          "1"
        ]
      ]
    ],
    "code": "1212110101131211332121000000013121000001013302312100132121000000103121000001013321211001003021332233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf148;&#xf145;&#xf24a;&#xf148;&#xf149;&#xf245;&#xf248;&#xf14d;&#xf246;&#xf148;&#xf146;&#xf24a;&#xf148;&#xf149;&#xf245;&#xf246;&#xf145;&#xf168;&#xf24a;&#xf205;&#xf245;&#xf24b;",
    "stanza": 1462
  },
  {
    "role": "code",
    "lines": [
      "float:= (neutron charge) 0;"
    ],
    "preprocessed": "float:= (neutron charge) 0;",
    "dt": false,
    "parse": [
      "float:=",
      [
        "neutron",
        "charge"
      ],
      "0"
    ],
    "code": "1212110101131211332121000000113121000001013302032233",
    "spider": "&#xf145;&#xf16f;&#xf147;&#xf246;&#xf148;&#xf147;&#xf24a;&#xf148;&#xf149;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1463
  },
  {
    "role": "code",
    "lines": [
      "define atom | ? x:proton | ? x:proton:neutron | make-hash | vector",
      "  (pair proton $x:proton)",
      "  (pair neutron | - $x:proton:neutron $x:proton)",
      "  (pair electron $x:proton);"
    ],
    "preprocessed": "define atom | ? x:proton | ? x:proton:neutron | make-hash | vector\n  (pair proton $x:proton)\n  (pair neutron | - $x:proton:neutron $x:proton)\n  (pair electron $x:proton);",
    "dt": true,
    "parse": [
      "define",
      "atom",
      [
        -1,
        "?",
        "x:proton",
        [
          -1,
          "?",
          "x:proton:neutron",
          [
            -1,
            "make-hash",
            [
              -1,
              "vector",
              [
                "pair",
                "proton",
                [
                  -2,
                  "x:proton"
                ]
              ],
              [
                "pair",
                "neutron",
                [
                  -1,
                  "-",
                  [
                    -2,
                    "x:proton:neutron"
                  ],
                  [
                    -2,
                    "x:proton"
                  ]
                ]
              ],
              [
                "pair",
                "electron",
                [
                  -2,
                  "x:proton"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312100000110302312110031212101001312100000001330231211003121210100131210000000131210000001133023121000010130231210000321210101103121000000013123121210100131210000000133321210101103121000000113023121011312312121010013121000000013121000000113312312121010013121000000013332121010110312100000010312312121010013121000000013332233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf14a;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf148;&#xf145;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf148;&#xf145;&#xf148;&#xf147;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf148;&#xf145;&#xf249;&#xf16d;&#xf148;&#xf145;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf148;&#xf147;&#xf248;&#xf14f;&#xf249;&#xf16d;&#xf148;&#xf145;&#xf148;&#xf147;&#xf249;&#xf16d;&#xf148;&#xf145;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf148;&#xf146;&#xf249;&#xf16d;&#xf148;&#xf145;&#xf245;&#xf24b;",
    "stanza": 1464
  },
  {
    "role": "code",
    "lines": [
      "= ((atom 1 1) proton) 1;"
    ],
    "preprocessed": "= ((atom 1 1) proton) 1;",
    "dt": false,
    "parse": [
      "=",
      [
        [
          "atom",
          "1",
          "1"
        ],
        "proton"
      ],
      "1"
    ],
    "code": "1211322121000001103021302133121000000013302132233",
    "spider": "&#xf147;&#xf246;&#xf246;&#xf148;&#xf14a;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf148;&#xf145;&#xf245;&#xf205;&#xf24b;",
    "stanza": 1465
  },
  {
    "role": "code",
    "lines": [
      "= ((atom 1 1) electron) 1;"
    ],
    "preprocessed": "= ((atom 1 1) electron) 1;",
    "dt": false,
    "parse": [
      "=",
      [
        [
          "atom",
          "1",
          "1"
        ],
        "electron"
      ],
      "1"
    ],
    "code": "1211322121000001103021302133121000000103302132233",
    "spider": "&#xf147;&#xf246;&#xf246;&#xf148;&#xf14a;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf148;&#xf146;&#xf245;&#xf205;&#xf24b;",
    "stanza": 1466
  },
  {
    "role": "code",
    "lines": [
      "= ((atom 1 1) neutron) 0;"
    ],
    "preprocessed": "= ((atom 1 1) neutron) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        [
          "atom",
          "1",
          "1"
        ],
        "neutron"
      ],
      "0"
    ],
    "code": "1211322121000001103021302133121000000113302032233",
    "spider": "&#xf147;&#xf246;&#xf246;&#xf148;&#xf14a;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf148;&#xf147;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1467
  },
  {
    "role": "code",
    "lines": [
      "= ((atom 1 2) proton) 1;"
    ],
    "preprocessed": "= ((atom 1 2) proton) 1;",
    "dt": false,
    "parse": [
      "=",
      [
        [
          "atom",
          "1",
          "2"
        ],
        "proton"
      ],
      "1"
    ],
    "code": "12113221210000011030213021033121000000013302132233",
    "spider": "&#xf147;&#xf246;&#xf246;&#xf148;&#xf14a;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf245;&#xf148;&#xf145;&#xf245;&#xf205;&#xf24b;",
    "stanza": 1468
  },
  {
    "role": "code",
    "lines": [
      "= ((atom 1 2) electron) 1;"
    ],
    "preprocessed": "= ((atom 1 2) electron) 1;",
    "dt": false,
    "parse": [
      "=",
      [
        [
          "atom",
          "1",
          "2"
        ],
        "electron"
      ],
      "1"
    ],
    "code": "12113221210000011030213021033121000000103302132233",
    "spider": "&#xf147;&#xf246;&#xf246;&#xf148;&#xf14a;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf245;&#xf148;&#xf146;&#xf245;&#xf205;&#xf24b;",
    "stanza": 1469
  },
  {
    "role": "code",
    "lines": [
      "= ((atom 1 2) neutron) 1;"
    ],
    "preprocessed": "= ((atom 1 2) neutron) 1;",
    "dt": false,
    "parse": [
      "=",
      [
        [
          "atom",
          "1",
          "2"
        ],
        "neutron"
      ],
      "1"
    ],
    "code": "12113221210000011030213021033121000000113302132233",
    "spider": "&#xf147;&#xf246;&#xf246;&#xf148;&#xf14a;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf245;&#xf148;&#xf147;&#xf245;&#xf205;&#xf24b;",
    "stanza": 1470
  },
  {
    "role": "code",
    "lines": [
      "class elemental (proton isotope:list)",
      "  (method proton $proton)",
      "  (method isotope:list $isotope:list)",
      "  (method electron $proton)",
      "  (method neutron:list | map (? x | - $x $proton) $isotope:list);"
    ],
    "preprocessed": "class elemental (proton isotope:list)\n  (method proton $proton)\n  (method isotope:list $isotope:list)\n  (method electron $proton)\n  (method neutron:list | map (? x | - $x $proton) $isotope:list);",
    "dt": true,
    "parse": [
      "class",
      "elemental",
      [
        "proton",
        "isotope:list"
      ],
      [
        "method",
        "proton",
        [
          -2,
          "proton"
        ]
      ],
      [
        "method",
        "isotope:list",
        [
          -2,
          "isotope:list"
        ]
      ],
      [
        "method",
        "electron",
        [
          -2,
          "proton"
        ]
      ],
      [
        "method",
        "neutron:list",
        [
          -1,
          "map",
          [
            "?",
            "x",
            [
              -1,
              "-",
              [
                -2,
                "x"
              ],
              [
                -2,
                "proton"
              ]
            ]
          ],
          [
            -2,
            "isotope:list"
          ]
        ]
      ]
    ],
    "code": "1211001100312100000111321210000000131212100001000312100110133321211000010312100000001312312100000001332121100001031212100001000312100110133123121210000100031210011013332121100001031210000001031231210000000133212110000103121210000001131210011013302312101100132121100312101001302312101131231210100131231210000000133123121210000100031210011013332233",
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf148;&#xf14b;&#xf246;&#xf148;&#xf145;&#xf24a;&#xf148;&#xf14c;&#xf145;&#xf151;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf148;&#xf145;&#xf249;&#xf148;&#xf145;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf148;&#xf14c;&#xf145;&#xf151;&#xf249;&#xf148;&#xf14c;&#xf145;&#xf151;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf148;&#xf146;&#xf249;&#xf148;&#xf145;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf148;&#xf147;&#xf145;&#xf151;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14f;&#xf249;&#xf16d;&#xf249;&#xf148;&#xf145;&#xf245;&#xf249;&#xf148;&#xf14c;&#xf145;&#xf151;&#xf245;&#xf24b;",
    "stanza": 1471
  },
  {
    "role": "code",
    "lines": [
      "intro hydrogen;"
    ],
    "preprocessed": "intro hydrogen;",
    "dt": false,
    "parse": [
      "intro",
      "hydrogen"
    ],
    "code": "121001031210000100132233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf14d;&#xf24b;",
    "stanza": 1472
  },
  {
    "role": "code",
    "lines": [
      "intro helium;"
    ],
    "preprocessed": "intro helium;",
    "dt": false,
    "parse": [
      "intro",
      "helium"
    ],
    "code": "121001031210000101032233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf14e;&#xf24b;",
    "stanza": 1473
  },
  {
    "role": "code",
    "lines": [
      "intro carbon;"
    ],
    "preprocessed": "intro carbon;",
    "dt": false,
    "parse": [
      "intro",
      "carbon"
    ],
    "code": "121001031210000101132233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf14f;&#xf24b;",
    "stanza": 1474
  },
  {
    "role": "code",
    "lines": [
      "intro nitrogen;"
    ],
    "preprocessed": "intro nitrogen;",
    "dt": false,
    "parse": [
      "intro",
      "nitrogen"
    ],
    "code": "121001031210000110032233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf150;&#xf24b;",
    "stanza": 1475
  },
  {
    "role": "code",
    "lines": [
      "intro oxygen;"
    ],
    "preprocessed": "intro oxygen;",
    "dt": false,
    "parse": [
      "intro",
      "oxygen"
    ],
    "code": "121001031210000110132233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf151;&#xf24b;",
    "stanza": 1476
  },
  {
    "role": "code",
    "lines": [
      "define hydrogen | elemental new 1 | vector 1 2;"
    ],
    "preprocessed": "define hydrogen | elemental new 1 | vector 1 2;",
    "dt": true,
    "parse": [
      "define",
      "hydrogen",
      [
        -1,
        "elemental",
        "new",
        "1",
        [
          -1,
          "vector",
          "1",
          "2"
        ]
      ]
    ],
    "code": "1211013121000010013023121000001113121011000130213023121000030213021032233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf14d;&#xf248;&#xf148;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1477
  },
  {
    "role": "code",
    "lines": [
      "define helium | elemental new 2 | vector 2 4;"
    ],
    "preprocessed": "define helium | elemental new 2 | vector 2 4;",
    "dt": true,
    "parse": [
      "define",
      "helium",
      [
        -1,
        "elemental",
        "new",
        "2",
        [
          -1,
          "vector",
          "2",
          "4"
        ]
      ]
    ],
    "code": "1211013121000010103023121000001113121011000130210302312100003021030210032233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf14e;&#xf248;&#xf148;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf206;&#xf248;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 1478
  },
  {
    "role": "code",
    "lines": [
      "define carbon | elemental new 6 | vector 12 13;"
    ],
    "preprocessed": "define carbon | elemental new 6 | vector 12 13;",
    "dt": true,
    "parse": [
      "define",
      "carbon",
      [
        -1,
        "elemental",
        "new",
        "6",
        [
          -1,
          "vector",
          "12",
          "13"
        ]
      ]
    ],
    "code": "12110131210000101130231210000011131210110001302110302312100003021100302110132233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf14f;&#xf248;&#xf148;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf20a;&#xf248;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf211;&#xf24b;",
    "stanza": 1479
  },
  {
    "role": "code",
    "lines": [
      "define nitrogen | elemental new 7 | vector 14 15;"
    ],
    "preprocessed": "define nitrogen | elemental new 7 | vector 14 15;",
    "dt": true,
    "parse": [
      "define",
      "nitrogen",
      [
        -1,
        "elemental",
        "new",
        "7",
        [
          -1,
          "vector",
          "14",
          "15"
        ]
      ]
    ],
    "code": "12110131210000110030231210000011131210110001302111302312100003021110302111132233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf150;&#xf248;&#xf148;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf20b;&#xf248;&#xf154;&#xf24a;&#xf212;&#xf24a;&#xf213;&#xf24b;",
    "stanza": 1480
  },
  {
    "role": "code",
    "lines": [
      "define oxygen | elemental new 16 | vector 16 17 18;"
    ],
    "preprocessed": "define oxygen | elemental new 16 | vector 16 17 18;",
    "dt": true,
    "parse": [
      "define",
      "oxygen",
      [
        -1,
        "elemental",
        "new",
        "16",
        [
          -1,
          "vector",
          "16",
          "17",
          "18"
        ]
      ]
    ],
    "code": "12110131210000110130231210000011131210110001302100003023121000030210000302100013021001032233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf151;&#xf248;&#xf148;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf214;&#xf248;&#xf154;&#xf24a;&#xf214;&#xf24a;&#xf215;&#xf24a;&#xf216;&#xf24b;",
    "stanza": 1481
  },
  {
    "role": "code",
    "lines": [
      "= (hydrogen proton) 1;"
    ],
    "preprocessed": "= (hydrogen proton) 1;",
    "dt": false,
    "parse": [
      "=",
      [
        "hydrogen",
        "proton"
      ],
      "1"
    ],
    "code": "121132121000010013121000000013302132233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf14d;&#xf24a;&#xf148;&#xf145;&#xf245;&#xf205;&#xf24b;",
    "stanza": 1482
  },
  {
    "role": "code",
    "lines": [
      "= (hydrogen electron) 1;"
    ],
    "preprocessed": "= (hydrogen electron) 1;",
    "dt": false,
    "parse": [
      "=",
      [
        "hydrogen",
        "electron"
      ],
      "1"
    ],
    "code": "121132121000010013121000000103302132233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf14d;&#xf24a;&#xf148;&#xf146;&#xf245;&#xf205;&#xf24b;",
    "stanza": 1483
  },
  {
    "role": "code",
    "lines": [
      "list= (hydrogen isotope:list) | vector 1 2;"
    ],
    "preprocessed": "list= (hydrogen isotope:list) | vector 1 2;",
    "dt": false,
    "parse": [
      "list=",
      [
        "hydrogen",
        "isotope:list"
      ],
      [
        -1,
        "vector",
        "1",
        "2"
      ]
    ],
    "code": "1210101003212100001001312121000010003121001101333023121000030213021032233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf148;&#xf14d;&#xf24a;&#xf148;&#xf14c;&#xf145;&#xf151;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1484
  },
  {
    "role": "code",
    "lines": [
      "list= (hydrogen neutron:list) | vector 0 1;"
    ],
    "preprocessed": "list= (hydrogen neutron:list) | vector 0 1;",
    "dt": false,
    "parse": [
      "list=",
      [
        "hydrogen",
        "neutron:list"
      ],
      [
        -1,
        "vector",
        "0",
        "1"
      ]
    ],
    "code": "121010100321210000100131212100000011312100110133302312100003020302132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf148;&#xf14d;&#xf24a;&#xf148;&#xf147;&#xf145;&#xf151;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 1485
  },
  {
    "role": "code",
    "lines": [
      "= (carbon proton) 6;"
    ],
    "preprocessed": "= (carbon proton) 6;",
    "dt": false,
    "parse": [
      "=",
      [
        "carbon",
        "proton"
      ],
      "6"
    ],
    "code": "12113212100001011312100000001330211032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf14f;&#xf24a;&#xf148;&#xf145;&#xf245;&#xf20a;&#xf24b;",
    "stanza": 1486
  },
  {
    "role": "code",
    "lines": [
      "= (carbon electron) 6;"
    ],
    "preprocessed": "= (carbon electron) 6;",
    "dt": false,
    "parse": [
      "=",
      [
        "carbon",
        "electron"
      ],
      "6"
    ],
    "code": "12113212100001011312100000010330211032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf14f;&#xf24a;&#xf148;&#xf146;&#xf245;&#xf20a;&#xf24b;",
    "stanza": 1487
  },
  {
    "role": "code",
    "lines": [
      "list= (carbon isotope:list) | vector 12 13;"
    ],
    "preprocessed": "list= (carbon isotope:list) | vector 12 13;",
    "dt": false,
    "parse": [
      "list=",
      [
        "carbon",
        "isotope:list"
      ],
      [
        -1,
        "vector",
        "12",
        "13"
      ]
    ],
    "code": "121010100321210000101131212100001000312100110133302312100003021100302110132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf148;&#xf14f;&#xf24a;&#xf148;&#xf14c;&#xf145;&#xf151;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf211;&#xf24b;",
    "stanza": 1488
  },
  {
    "role": "code",
    "lines": [
      "list= (carbon neutron:list) | vector 6 7;"
    ],
    "preprocessed": "list= (carbon neutron:list) | vector 6 7;",
    "dt": false,
    "parse": [
      "list=",
      [
        "carbon",
        "neutron:list"
      ],
      [
        -1,
        "vector",
        "6",
        "7"
      ]
    ],
    "code": "1210101003212100001011312121000000113121001101333023121000030211030211132233",
    "spider": "&#xf145;&#xf158;&#xf246;&#xf148;&#xf14f;&#xf24a;&#xf148;&#xf147;&#xf145;&#xf151;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf20b;&#xf24b;",
    "stanza": 1489
  },
  {
    "role": "code",
    "lines": [
      "class molecule (elemental:list)",
      "  (method elemental:list $elemental:list)",
      "  (method count | lambda ((e elemental)) |",
      "    list-length | select-match (? x | = (x proton) (e proton)) $elemental:list);"
    ],
    "preprocessed": "class molecule (elemental:list)\n  (method elemental:list $elemental:list)\n  (method count | lambda ((e elemental)) |\n    list-length | select-match (? x | = (x proton) (e proton)) $elemental:list);",
    "dt": true,
    "parse": [
      "class",
      "molecule",
      [
        "elemental:list"
      ],
      [
        "method",
        "elemental:list",
        [
          -2,
          "elemental:list"
        ]
      ],
      [
        "method",
        "count",
        [
          -1,
          "lambda",
          [
            [
              "e",
              "elemental"
            ]
          ],
          [
            -1,
            "list-length",
            [
              -1,
              "select-match",
              [
                "?",
                "x",
                [
                  -1,
                  "=",
                  [
                    "x",
                    "proton"
                  ],
                  [
                    "e",
                    "proton"
                  ]
                ]
              ],
              [
                -2,
                "elemental:list"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121100110031210000111032121210000011131210011013332121100001031212100000111312100110133123121210000011131210011013332121100001031210110101302312110103221211000131210000011133302312101001030231211000103212110031210100130231211321210100131210000000133212110001312100000001333123121210000011131210011013332233",
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf148;&#xf152;&#xf246;&#xf148;&#xf14b;&#xf145;&#xf151;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf148;&#xf14b;&#xf145;&#xf151;&#xf249;&#xf148;&#xf14b;&#xf145;&#xf151;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf179;&#xf248;&#xf15e;&#xf246;&#xf246;&#xf175;&#xf24a;&#xf148;&#xf14b;&#xf245;&#xf245;&#xf248;&#xf145;&#xf156;&#xf248;&#xf145;&#xf166;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf147;&#xf246;&#xf16d;&#xf24a;&#xf148;&#xf145;&#xf245;&#xf246;&#xf175;&#xf24a;&#xf148;&#xf145;&#xf245;&#xf245;&#xf249;&#xf148;&#xf14b;&#xf145;&#xf151;&#xf245;&#xf24b;",
    "stanza": 1490
  },
  {
    "role": "code",
    "lines": [
      "intro hydrogen:2;"
    ],
    "preprocessed": "intro hydrogen:2;",
    "dt": false,
    "parse": [
      "intro",
      "hydrogen:2"
    ],
    "code": "12100103121210000100130210332233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf14d;&#xf206;&#xf24b;",
    "stanza": 1491
  },
  {
    "role": "code",
    "lines": [
      "define hydrogen:2 | molecule new | vector $hydrogen $hydrogen;"
    ],
    "preprocessed": "define hydrogen:2 | molecule new | vector $hydrogen $hydrogen;",
    "dt": true,
    "parse": [
      "define",
      "hydrogen:2",
      [
        -1,
        "molecule",
        "new",
        [
          -1,
          "vector",
          [
            -2,
            "hydrogen"
          ],
          [
            -2,
            "hydrogen"
          ]
        ]
      ]
    ],
    "code": "12110131212100001001302103302312100001110312101100013023121000031231210000100131231210000100132233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf14d;&#xf206;&#xf248;&#xf148;&#xf152;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf249;&#xf148;&#xf14d;&#xf249;&#xf148;&#xf14d;&#xf24b;",
    "stanza": 1492
  },
  {
    "role": "code",
    "lines": [
      "= (hydrogen:2 count $hydrogen) 2;"
    ],
    "preprocessed": "= (hydrogen:2 count $hydrogen) 2;",
    "dt": false,
    "parse": [
      "=",
      [
        "hydrogen:2",
        "count",
        [
          -2,
          "hydrogen"
        ]
      ],
      "2"
    ],
    "code": "12113212121000010013021033121011010131231210000100133021032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf14d;&#xf206;&#xf146;&#xf179;&#xf249;&#xf148;&#xf14d;&#xf245;&#xf206;&#xf24b;",
    "stanza": 1493
  },
  {
    "role": "code",
    "lines": [
      "= (hydrogen:2 count $carbon) 0;"
    ],
    "preprocessed": "= (hydrogen:2 count $carbon) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "hydrogen:2",
        "count",
        [
          -2,
          "carbon"
        ]
      ],
      "0"
    ],
    "code": "1211321212100001001302103312101101013123121000010113302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf14d;&#xf206;&#xf146;&#xf179;&#xf249;&#xf148;&#xf14f;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1494
  },
  {
    "role": "code",
    "lines": [
      "= (hydrogen:2 count $nitrogen) 0;"
    ],
    "preprocessed": "= (hydrogen:2 count $nitrogen) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "hydrogen:2",
        "count",
        [
          -2,
          "nitrogen"
        ]
      ],
      "0"
    ],
    "code": "1211321212100001001302103312101101013123121000011003302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf14d;&#xf206;&#xf146;&#xf179;&#xf249;&#xf148;&#xf150;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1495
  },
  {
    "role": "code",
    "lines": [
      "= (hydrogen:2 count $oxygen) 0;"
    ],
    "preprocessed": "= (hydrogen:2 count $oxygen) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "hydrogen:2",
        "count",
        [
          -2,
          "oxygen"
        ]
      ],
      "0"
    ],
    "code": "1211321212100001001302103312101101013123121000011013302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf14d;&#xf206;&#xf146;&#xf179;&#xf249;&#xf148;&#xf151;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1496
  },
  {
    "role": "code",
    "lines": [
      "intro oxygen:2;"
    ],
    "preprocessed": "intro oxygen:2;",
    "dt": false,
    "parse": [
      "intro",
      "oxygen:2"
    ],
    "code": "12100103121210000110130210332233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf151;&#xf206;&#xf24b;",
    "stanza": 1497
  },
  {
    "role": "code",
    "lines": [
      "define oxygen:2 | molecule new | vector $oxygen $oxygen;"
    ],
    "preprocessed": "define oxygen:2 | molecule new | vector $oxygen $oxygen;",
    "dt": true,
    "parse": [
      "define",
      "oxygen:2",
      [
        -1,
        "molecule",
        "new",
        [
          -1,
          "vector",
          [
            -2,
            "oxygen"
          ],
          [
            -2,
            "oxygen"
          ]
        ]
      ]
    ],
    "code": "12110131212100001101302103302312100001110312101100013023121000031231210000110131231210000110132233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf151;&#xf206;&#xf248;&#xf148;&#xf152;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf249;&#xf148;&#xf151;&#xf249;&#xf148;&#xf151;&#xf24b;",
    "stanza": 1498
  },
  {
    "role": "code",
    "lines": [
      "= (oxygen:2 count $hydrogen) 0;"
    ],
    "preprocessed": "= (oxygen:2 count $hydrogen) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "oxygen:2",
        "count",
        [
          -2,
          "hydrogen"
        ]
      ],
      "0"
    ],
    "code": "1211321212100001101302103312101101013123121000010013302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf151;&#xf206;&#xf146;&#xf179;&#xf249;&#xf148;&#xf14d;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1499
  },
  {
    "role": "code",
    "lines": [
      "= (oxygen:2 count $carbon) 0;"
    ],
    "preprocessed": "= (oxygen:2 count $carbon) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "oxygen:2",
        "count",
        [
          -2,
          "carbon"
        ]
      ],
      "0"
    ],
    "code": "1211321212100001101302103312101101013123121000010113302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf151;&#xf206;&#xf146;&#xf179;&#xf249;&#xf148;&#xf14f;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1500
  },
  {
    "role": "code",
    "lines": [
      "= (oxygen:2 count $nitrogen) 0;"
    ],
    "preprocessed": "= (oxygen:2 count $nitrogen) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "oxygen:2",
        "count",
        [
          -2,
          "nitrogen"
        ]
      ],
      "0"
    ],
    "code": "1211321212100001101302103312101101013123121000011003302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf151;&#xf206;&#xf146;&#xf179;&#xf249;&#xf148;&#xf150;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1501
  },
  {
    "role": "code",
    "lines": [
      "= (oxygen:2 count $oxygen) 2;"
    ],
    "preprocessed": "= (oxygen:2 count $oxygen) 2;",
    "dt": false,
    "parse": [
      "=",
      [
        "oxygen:2",
        "count",
        [
          -2,
          "oxygen"
        ]
      ],
      "2"
    ],
    "code": "12113212121000011013021033121011010131231210000110133021032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf151;&#xf206;&#xf146;&#xf179;&#xf249;&#xf148;&#xf151;&#xf245;&#xf206;&#xf24b;",
    "stanza": 1502
  },
  {
    "role": "code",
    "lines": [
      "intro oxygen:3;"
    ],
    "preprocessed": "intro oxygen:3;",
    "dt": false,
    "parse": [
      "intro",
      "oxygen:3"
    ],
    "code": "12100103121210000110130211332233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf151;&#xf207;&#xf24b;",
    "stanza": 1503
  },
  {
    "role": "code",
    "lines": [
      "define oxygen:3 | molecule new | vector $oxygen $oxygen $oxygen;"
    ],
    "preprocessed": "define oxygen:3 | molecule new | vector $oxygen $oxygen $oxygen;",
    "dt": true,
    "parse": [
      "define",
      "oxygen:3",
      [
        -1,
        "molecule",
        "new",
        [
          -1,
          "vector",
          [
            -2,
            "oxygen"
          ],
          [
            -2,
            "oxygen"
          ],
          [
            -2,
            "oxygen"
          ]
        ]
      ]
    ],
    "code": "12110131212100001101302113302312100001110312101100013023121000031231210000110131231210000110131231210000110132233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf151;&#xf207;&#xf248;&#xf148;&#xf152;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf249;&#xf148;&#xf151;&#xf249;&#xf148;&#xf151;&#xf249;&#xf148;&#xf151;&#xf24b;",
    "stanza": 1504
  },
  {
    "role": "code",
    "lines": [
      "= (oxygen:3 count $hydrogen) 0;"
    ],
    "preprocessed": "= (oxygen:3 count $hydrogen) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "oxygen:3",
        "count",
        [
          -2,
          "hydrogen"
        ]
      ],
      "0"
    ],
    "code": "1211321212100001101302113312101101013123121000010013302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf151;&#xf207;&#xf146;&#xf179;&#xf249;&#xf148;&#xf14d;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1505
  },
  {
    "role": "code",
    "lines": [
      "= (oxygen:3 count $carbon) 0;"
    ],
    "preprocessed": "= (oxygen:3 count $carbon) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "oxygen:3",
        "count",
        [
          -2,
          "carbon"
        ]
      ],
      "0"
    ],
    "code": "1211321212100001101302113312101101013123121000010113302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf151;&#xf207;&#xf146;&#xf179;&#xf249;&#xf148;&#xf14f;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1506
  },
  {
    "role": "code",
    "lines": [
      "= (oxygen:3 count $nitrogen) 0;"
    ],
    "preprocessed": "= (oxygen:3 count $nitrogen) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "oxygen:3",
        "count",
        [
          -2,
          "nitrogen"
        ]
      ],
      "0"
    ],
    "code": "1211321212100001101302113312101101013123121000011003302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf151;&#xf207;&#xf146;&#xf179;&#xf249;&#xf148;&#xf150;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1507
  },
  {
    "role": "code",
    "lines": [
      "= (oxygen:3 count $oxygen) 3;"
    ],
    "preprocessed": "= (oxygen:3 count $oxygen) 3;",
    "dt": false,
    "parse": [
      "=",
      [
        "oxygen:3",
        "count",
        [
          -2,
          "oxygen"
        ]
      ],
      "3"
    ],
    "code": "12113212121000011013021133121011010131231210000110133021132233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf151;&#xf207;&#xf146;&#xf179;&#xf249;&#xf148;&#xf151;&#xf245;&#xf207;&#xf24b;",
    "stanza": 1508
  },
  {
    "role": "code",
    "lines": [
      "intro water;"
    ],
    "preprocessed": "intro water;",
    "dt": false,
    "parse": [
      "intro",
      "water"
    ],
    "code": "121001031210000111132233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf153;&#xf24b;",
    "stanza": 1509
  },
  {
    "role": "code",
    "lines": [
      "define water | molecule new | vector $hydrogen $hydrogen $oxygen;"
    ],
    "preprocessed": "define water | molecule new | vector $hydrogen $hydrogen $oxygen;",
    "dt": true,
    "parse": [
      "define",
      "water",
      [
        -1,
        "molecule",
        "new",
        [
          -1,
          "vector",
          [
            -2,
            "hydrogen"
          ],
          [
            -2,
            "hydrogen"
          ],
          [
            -2,
            "oxygen"
          ]
        ]
      ]
    ],
    "code": "121101312100001111302312100001110312101100013023121000031231210000100131231210000100131231210000110132233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf153;&#xf248;&#xf148;&#xf152;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf249;&#xf148;&#xf14d;&#xf249;&#xf148;&#xf14d;&#xf249;&#xf148;&#xf151;&#xf24b;",
    "stanza": 1510
  },
  {
    "role": "code",
    "lines": [
      "= (water count $hydrogen) 2;"
    ],
    "preprocessed": "= (water count $hydrogen) 2;",
    "dt": false,
    "parse": [
      "=",
      [
        "water",
        "count",
        [
          -2,
          "hydrogen"
        ]
      ],
      "2"
    ],
    "code": "121132121000011113121011010131231210000100133021032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf153;&#xf24a;&#xf146;&#xf179;&#xf249;&#xf148;&#xf14d;&#xf245;&#xf206;&#xf24b;",
    "stanza": 1511
  },
  {
    "role": "code",
    "lines": [
      "= (water count $carbon) 0;"
    ],
    "preprocessed": "= (water count $carbon) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "water",
        "count",
        [
          -2,
          "carbon"
        ]
      ],
      "0"
    ],
    "code": "12113212100001111312101101013123121000010113302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf153;&#xf24a;&#xf146;&#xf179;&#xf249;&#xf148;&#xf14f;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1512
  },
  {
    "role": "code",
    "lines": [
      "= (water count $nitrogen) 0;"
    ],
    "preprocessed": "= (water count $nitrogen) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "water",
        "count",
        [
          -2,
          "nitrogen"
        ]
      ],
      "0"
    ],
    "code": "12113212100001111312101101013123121000011003302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf153;&#xf24a;&#xf146;&#xf179;&#xf249;&#xf148;&#xf150;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1513
  },
  {
    "role": "code",
    "lines": [
      "= (water count $oxygen) 1;"
    ],
    "preprocessed": "= (water count $oxygen) 1;",
    "dt": false,
    "parse": [
      "=",
      [
        "water",
        "count",
        [
          -2,
          "oxygen"
        ]
      ],
      "1"
    ],
    "code": "12113212100001111312101101013123121000011013302132233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf153;&#xf24a;&#xf146;&#xf179;&#xf249;&#xf148;&#xf151;&#xf245;&#xf205;&#xf24b;",
    "stanza": 1514
  },
  {
    "role": "code",
    "lines": [
      "intro nitrogen:2;"
    ],
    "preprocessed": "intro nitrogen:2;",
    "dt": false,
    "parse": [
      "intro",
      "nitrogen:2"
    ],
    "code": "12100103121210000110030210332233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf150;&#xf206;&#xf24b;",
    "stanza": 1515
  },
  {
    "role": "code",
    "lines": [
      "define nitrogen:2 | molecule new | vector $nitrogen $nitrogen;"
    ],
    "preprocessed": "define nitrogen:2 | molecule new | vector $nitrogen $nitrogen;",
    "dt": true,
    "parse": [
      "define",
      "nitrogen:2",
      [
        -1,
        "molecule",
        "new",
        [
          -1,
          "vector",
          [
            -2,
            "nitrogen"
          ],
          [
            -2,
            "nitrogen"
          ]
        ]
      ]
    ],
    "code": "12110131212100001100302103302312100001110312101100013023121000031231210000110031231210000110032233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf150;&#xf206;&#xf248;&#xf148;&#xf152;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf249;&#xf148;&#xf150;&#xf249;&#xf148;&#xf150;&#xf24b;",
    "stanza": 1516
  },
  {
    "role": "code",
    "lines": [
      "= (nitrogen:2 count $hydrogen) 0;"
    ],
    "preprocessed": "= (nitrogen:2 count $hydrogen) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "nitrogen:2",
        "count",
        [
          -2,
          "hydrogen"
        ]
      ],
      "0"
    ],
    "code": "1211321212100001100302103312101101013123121000010013302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf150;&#xf206;&#xf146;&#xf179;&#xf249;&#xf148;&#xf14d;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1517
  },
  {
    "role": "code",
    "lines": [
      "= (nitrogen:2 count $carbon) 0;"
    ],
    "preprocessed": "= (nitrogen:2 count $carbon) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "nitrogen:2",
        "count",
        [
          -2,
          "carbon"
        ]
      ],
      "0"
    ],
    "code": "1211321212100001100302103312101101013123121000010113302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf150;&#xf206;&#xf146;&#xf179;&#xf249;&#xf148;&#xf14f;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1518
  },
  {
    "role": "code",
    "lines": [
      "= (nitrogen:2 count $nitrogen) 2;"
    ],
    "preprocessed": "= (nitrogen:2 count $nitrogen) 2;",
    "dt": false,
    "parse": [
      "=",
      [
        "nitrogen:2",
        "count",
        [
          -2,
          "nitrogen"
        ]
      ],
      "2"
    ],
    "code": "12113212121000011003021033121011010131231210000110033021032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf150;&#xf206;&#xf146;&#xf179;&#xf249;&#xf148;&#xf150;&#xf245;&#xf206;&#xf24b;",
    "stanza": 1519
  },
  {
    "role": "code",
    "lines": [
      "= (nitrogen:2 count $oxygen) 0;"
    ],
    "preprocessed": "= (nitrogen:2 count $oxygen) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "nitrogen:2",
        "count",
        [
          -2,
          "oxygen"
        ]
      ],
      "0"
    ],
    "code": "1211321212100001100302103312101101013123121000011013302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf150;&#xf206;&#xf146;&#xf179;&#xf249;&#xf148;&#xf151;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1520
  },
  {
    "role": "code",
    "lines": [
      "intro ammonia;"
    ],
    "preprocessed": "intro ammonia;",
    "dt": false,
    "parse": [
      "intro",
      "ammonia"
    ],
    "code": "121001031210001000032233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf154;&#xf24b;",
    "stanza": 1521
  },
  {
    "role": "code",
    "lines": [
      "define ammonia | molecule new | vector",
      "  $nitrogen $hydrogen $hydrogen $hydrogen;"
    ],
    "preprocessed": "define ammonia | molecule new | vector\n  $nitrogen $hydrogen $hydrogen $hydrogen;",
    "dt": true,
    "parse": [
      "define",
      "ammonia",
      [
        -1,
        "molecule",
        "new",
        [
          -1,
          "vector",
          [
            -2,
            "nitrogen"
          ],
          [
            -2,
            "hydrogen"
          ],
          [
            -2,
            "hydrogen"
          ],
          [
            -2,
            "hydrogen"
          ]
        ]
      ]
    ],
    "code": "121101312100010000302312100001110312101100013023121000031231210000110031231210000100131231210000100131231210000100132233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf154;&#xf248;&#xf148;&#xf152;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf249;&#xf148;&#xf150;&#xf249;&#xf148;&#xf14d;&#xf249;&#xf148;&#xf14d;&#xf249;&#xf148;&#xf14d;&#xf24b;",
    "stanza": 1522
  },
  {
    "role": "code",
    "lines": [
      "= (ammonia count $hydrogen) 3;"
    ],
    "preprocessed": "= (ammonia count $hydrogen) 3;",
    "dt": false,
    "parse": [
      "=",
      [
        "ammonia",
        "count",
        [
          -2,
          "hydrogen"
        ]
      ],
      "3"
    ],
    "code": "121132121000100003121011010131231210000100133021132233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf154;&#xf24a;&#xf146;&#xf179;&#xf249;&#xf148;&#xf14d;&#xf245;&#xf207;&#xf24b;",
    "stanza": 1523
  },
  {
    "role": "code",
    "lines": [
      "= (ammonia count $carbon) 0;"
    ],
    "preprocessed": "= (ammonia count $carbon) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "ammonia",
        "count",
        [
          -2,
          "carbon"
        ]
      ],
      "0"
    ],
    "code": "12113212100010000312101101013123121000010113302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf154;&#xf24a;&#xf146;&#xf179;&#xf249;&#xf148;&#xf14f;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1524
  },
  {
    "role": "code",
    "lines": [
      "= (ammonia count $nitrogen) 1;"
    ],
    "preprocessed": "= (ammonia count $nitrogen) 1;",
    "dt": false,
    "parse": [
      "=",
      [
        "ammonia",
        "count",
        [
          -2,
          "nitrogen"
        ]
      ],
      "1"
    ],
    "code": "12113212100010000312101101013123121000011003302132233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf154;&#xf24a;&#xf146;&#xf179;&#xf249;&#xf148;&#xf150;&#xf245;&#xf205;&#xf24b;",
    "stanza": 1525
  },
  {
    "role": "code",
    "lines": [
      "= (ammonia count $oxygen) 0;"
    ],
    "preprocessed": "= (ammonia count $oxygen) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "ammonia",
        "count",
        [
          -2,
          "oxygen"
        ]
      ],
      "0"
    ],
    "code": "12113212100010000312101101013123121000011013302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf154;&#xf24a;&#xf146;&#xf179;&#xf249;&#xf148;&#xf151;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1526
  },
  {
    "role": "code",
    "lines": [
      "intro methane;"
    ],
    "preprocessed": "intro methane;",
    "dt": false,
    "parse": [
      "intro",
      "methane"
    ],
    "code": "121001031210001000132233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf155;&#xf24b;",
    "stanza": 1527
  },
  {
    "role": "code",
    "lines": [
      "define methane | molecule new | vector",
      "  $carbon $hydrogen $hydrogen $hydrogen $hydrogen;"
    ],
    "preprocessed": "define methane | molecule new | vector\n  $carbon $hydrogen $hydrogen $hydrogen $hydrogen;",
    "dt": true,
    "parse": [
      "define",
      "methane",
      [
        -1,
        "molecule",
        "new",
        [
          -1,
          "vector",
          [
            -2,
            "carbon"
          ],
          [
            -2,
            "hydrogen"
          ],
          [
            -2,
            "hydrogen"
          ],
          [
            -2,
            "hydrogen"
          ],
          [
            -2,
            "hydrogen"
          ]
        ]
      ]
    ],
    "code": "121101312100010001302312100001110312101100013023121000031231210000101131231210000100131231210000100131231210000100131231210000100132233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf155;&#xf248;&#xf148;&#xf152;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf249;&#xf148;&#xf14f;&#xf249;&#xf148;&#xf14d;&#xf249;&#xf148;&#xf14d;&#xf249;&#xf148;&#xf14d;&#xf249;&#xf148;&#xf14d;&#xf24b;",
    "stanza": 1528
  },
  {
    "role": "code",
    "lines": [
      "= (methane count $hydrogen) 4;"
    ],
    "preprocessed": "= (methane count $hydrogen) 4;",
    "dt": false,
    "parse": [
      "=",
      [
        "methane",
        "count",
        [
          -2,
          "hydrogen"
        ]
      ],
      "4"
    ],
    "code": "1211321210001000131210110101312312100001001330210032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf155;&#xf24a;&#xf146;&#xf179;&#xf249;&#xf148;&#xf14d;&#xf245;&#xf208;&#xf24b;",
    "stanza": 1529
  },
  {
    "role": "code",
    "lines": [
      "= (methane count $carbon) 1;"
    ],
    "preprocessed": "= (methane count $carbon) 1;",
    "dt": false,
    "parse": [
      "=",
      [
        "methane",
        "count",
        [
          -2,
          "carbon"
        ]
      ],
      "1"
    ],
    "code": "12113212100010001312101101013123121000010113302132233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf155;&#xf24a;&#xf146;&#xf179;&#xf249;&#xf148;&#xf14f;&#xf245;&#xf205;&#xf24b;",
    "stanza": 1530
  },
  {
    "role": "code",
    "lines": [
      "= (methane count $nitrogen) 0;"
    ],
    "preprocessed": "= (methane count $nitrogen) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "methane",
        "count",
        [
          -2,
          "nitrogen"
        ]
      ],
      "0"
    ],
    "code": "12113212100010001312101101013123121000011003302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf155;&#xf24a;&#xf146;&#xf179;&#xf249;&#xf148;&#xf150;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1531
  },
  {
    "role": "code",
    "lines": [
      "= (methane count $oxygen) 0;"
    ],
    "preprocessed": "= (methane count $oxygen) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "methane",
        "count",
        [
          -2,
          "oxygen"
        ]
      ],
      "0"
    ],
    "code": "12113212100010001312101101013123121000011013302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf155;&#xf24a;&#xf146;&#xf179;&#xf249;&#xf148;&#xf151;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1532
  },
  {
    "role": "code",
    "lines": [
      "intro ethane;"
    ],
    "preprocessed": "intro ethane;",
    "dt": false,
    "parse": [
      "intro",
      "ethane"
    ],
    "code": "121001031210001001032233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf156;&#xf24b;",
    "stanza": 1533
  },
  {
    "role": "code",
    "lines": [
      "define ethane | molecule new | vector",
      "  $hydrogen $hydrogen $hydrogen",
      "  $carbon $carbon",
      "  $hydrogen $hydrogen $hydrogen;"
    ],
    "preprocessed": "define ethane | molecule new | vector\n  $hydrogen $hydrogen $hydrogen\n  $carbon $carbon\n  $hydrogen $hydrogen $hydrogen;",
    "dt": true,
    "parse": [
      "define",
      "ethane",
      [
        -1,
        "molecule",
        "new",
        [
          -1,
          "vector",
          [
            -2,
            "hydrogen"
          ],
          [
            -2,
            "hydrogen"
          ],
          [
            -2,
            "hydrogen"
          ],
          [
            -2,
            "carbon"
          ],
          [
            -2,
            "carbon"
          ],
          [
            -2,
            "hydrogen"
          ],
          [
            -2,
            "hydrogen"
          ],
          [
            -2,
            "hydrogen"
          ]
        ]
      ]
    ],
    "code": "121101312100010010302312100001110312101100013023121000031231210000100131231210000100131231210000100131231210000101131231210000101131231210000100131231210000100131231210000100132233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf156;&#xf248;&#xf148;&#xf152;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf249;&#xf148;&#xf14d;&#xf249;&#xf148;&#xf14d;&#xf249;&#xf148;&#xf14d;&#xf249;&#xf148;&#xf14f;&#xf249;&#xf148;&#xf14f;&#xf249;&#xf148;&#xf14d;&#xf249;&#xf148;&#xf14d;&#xf249;&#xf148;&#xf14d;&#xf24b;",
    "stanza": 1534
  },
  {
    "role": "code",
    "lines": [
      "= (ethane count $hydrogen) 6;"
    ],
    "preprocessed": "= (ethane count $hydrogen) 6;",
    "dt": false,
    "parse": [
      "=",
      [
        "ethane",
        "count",
        [
          -2,
          "hydrogen"
        ]
      ],
      "6"
    ],
    "code": "1211321210001001031210110101312312100001001330211032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf156;&#xf24a;&#xf146;&#xf179;&#xf249;&#xf148;&#xf14d;&#xf245;&#xf20a;&#xf24b;",
    "stanza": 1535
  },
  {
    "role": "code",
    "lines": [
      "= (ethane count $carbon) 2;"
    ],
    "preprocessed": "= (ethane count $carbon) 2;",
    "dt": false,
    "parse": [
      "=",
      [
        "ethane",
        "count",
        [
          -2,
          "carbon"
        ]
      ],
      "2"
    ],
    "code": "121132121000100103121011010131231210000101133021032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf156;&#xf24a;&#xf146;&#xf179;&#xf249;&#xf148;&#xf14f;&#xf245;&#xf206;&#xf24b;",
    "stanza": 1536
  },
  {
    "role": "code",
    "lines": [
      "= (ethane count $nitrogen) 0;"
    ],
    "preprocessed": "= (ethane count $nitrogen) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "ethane",
        "count",
        [
          -2,
          "nitrogen"
        ]
      ],
      "0"
    ],
    "code": "12113212100010010312101101013123121000011003302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf156;&#xf24a;&#xf146;&#xf179;&#xf249;&#xf148;&#xf150;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1537
  },
  {
    "role": "code",
    "lines": [
      "= (ethane count $oxygen) 0;"
    ],
    "preprocessed": "= (ethane count $oxygen) 0;",
    "dt": false,
    "parse": [
      "=",
      [
        "ethane",
        "count",
        [
          -2,
          "oxygen"
        ]
      ],
      "0"
    ],
    "code": "12113212100010010312101101013123121000011013302032233",
    "spider": "&#xf147;&#xf246;&#xf148;&#xf156;&#xf24a;&#xf146;&#xf179;&#xf249;&#xf148;&#xf151;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1538
  },
  {
    "role": "file",
    "lines": [
      "== COS_CommentBase2 =="
    ],
    "stanza": 1539
  },
  {
    "role": "comment",
    "lines": [
      "# The following parts of the message are the beginnings",
      "# of embedding an alternate visual primer"
    ],
    "section_description": "end of part 2, start of part 3",
    "section_category": "NOTE",
    "section_index": 43,
    "stanza": 1540
  },
  {
    "role": "code",
    "lines": [
      "intro part3;"
    ],
    "preprocessed": "intro part3;",
    "dt": false,
    "parse": [
      "intro",
      "part3"
    ],
    "code": "121001031210001001132233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf157;&#xf24b;",
    "stanza": 1541
  },
  {
    "role": "file",
    "lines": [
      "== COS_Unless =="
    ],
    "stanza": 1542
  },
  {
    "role": "comment",
    "lines": [
      "# for embedded image-and-logic-based primer"
    ],
    "section_description": "simulating unless gates",
    "section_category": "GATE",
    "section_index": 44,
    "stanza": 1543
  },
  {
    "role": "comment",
    "lines": [
      "# practice with pure logic gate"
    ],
    "stanza": 1544
  },
  {
    "role": "comment",
    "lines": [
      "# X unless Y = (X if Y=0, otherwise 0)"
    ],
    "stanza": 1545
  },
  {
    "role": "code",
    "lines": [
      "intro unless;"
    ],
    "preprocessed": "intro unless;",
    "dt": false,
    "parse": [
      "intro",
      "unless"
    ],
    "code": "121001031210001010032233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf158;&#xf24b;",
    "stanza": 1546
  },
  {
    "role": "code",
    "lines": [
      "define unless | ? x | ? y | and $x | not $y;"
    ],
    "preprocessed": "define unless | ? x | ? y | and $x | not $y;",
    "dt": true,
    "parse": [
      "define",
      "unless",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "and",
            [
              -2,
              "x"
            ],
            [
              -1,
              "not",
              [
                -2,
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312100010100302312110031210100130231211003121000001302312110312312101001302312101312312100000132233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf158;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf14a;&#xf249;&#xf16d;&#xf248;&#xf149;&#xf249;&#xf145;&#xf145;&#xf24b;",
    "stanza": 1547
  },
  {
    "role": "comment",
    "lines": [
      "# if second input is true, output is blocked (false)",
      "# if second input is false, output copies first input"
    ],
    "stanza": 1548
  },
  {
    "role": "code",
    "lines": [
      "= $false | unless $false $false;"
    ],
    "preprocessed": "= $false | unless $false $false;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -1,
        "unless",
        [
          -2,
          "false"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "code": "121131231203023121000101003123120312312032233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf248;&#xf148;&#xf158;&#xf249;&#xf144;&#xf249;&#xf144;&#xf24b;",
    "stanza": 1549
  },
  {
    "role": "code",
    "lines": [
      "= $true | unless $true $false;"
    ],
    "preprocessed": "= $true | unless $true $false;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        -1,
        "unless",
        [
          -2,
          "true"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "code": "121131231213023121000101003123121312312032233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf248;&#xf148;&#xf158;&#xf249;&#xf145;&#xf249;&#xf144;&#xf24b;",
    "stanza": 1550
  },
  {
    "role": "code",
    "lines": [
      "= $false | unless $false $true;"
    ],
    "preprocessed": "= $false | unless $false $true;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -1,
        "unless",
        [
          -2,
          "false"
        ],
        [
          -2,
          "true"
        ]
      ]
    ],
    "code": "121131231203023121000101003123120312312132233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf248;&#xf148;&#xf158;&#xf249;&#xf144;&#xf249;&#xf145;&#xf24b;",
    "stanza": 1551
  },
  {
    "role": "code",
    "lines": [
      "= $false | unless $true $true;"
    ],
    "preprocessed": "= $false | unless $true $true;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -1,
        "unless",
        [
          -2,
          "true"
        ],
        [
          -2,
          "true"
        ]
      ]
    ],
    "code": "121131231203023121000101003123121312312132233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf248;&#xf148;&#xf158;&#xf249;&#xf145;&#xf249;&#xf145;&#xf24b;",
    "stanza": 1552
  },
  {
    "role": "comment",
    "lines": [
      "# To do: add a simple simulator for non-grid-based",
      "# logic -- much simpler to understand than",
      "# grid-based"
    ],
    "stanza": 1553
  },
  {
    "role": "comment",
    "lines": [
      "# On to a grid-based logic simulation",
      "# first, need unbounded, mutable matrices"
    ],
    "stanza": 1554
  },
  {
    "role": "code",
    "lines": [
      "intro make-matrix;"
    ],
    "preprocessed": "intro make-matrix;",
    "dt": false,
    "parse": [
      "intro",
      "make-matrix"
    ],
    "code": "121001031210001010132233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf159;&#xf24b;",
    "stanza": 1555
  },
  {
    "role": "code",
    "lines": [
      "define make-matrix | ? default |",
      "   make-cell | hash-default $default;"
    ],
    "preprocessed": "define make-matrix | ? default |\n   make-cell | hash-default $default;",
    "dt": true,
    "parse": [
      "define",
      "make-matrix",
      [
        -1,
        "?",
        "default",
        [
          -1,
          "make-cell",
          [
            -1,
            "hash-default",
            [
              -2,
              "default"
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210001010130231211003121000010030231211011302312100000113123121000010032233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf159;&#xf248;&#xf150;&#xf24a;&#xf146;&#xf148;&#xf248;&#xf15f;&#xf248;&#xf146;&#xf147;&#xf249;&#xf146;&#xf148;&#xf24b;",
    "stanza": 1556
  },
  {
    "role": "code",
    "lines": [
      "intro matrix-set;"
    ],
    "preprocessed": "intro matrix-set;",
    "dt": false,
    "parse": [
      "intro",
      "matrix-set"
    ],
    "code": "121001031210001011032233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf15a;&#xf24b;",
    "stanza": 1557
  },
  {
    "role": "code",
    "lines": [
      "define matrix-set | ? m | ? x | ? addr |",
      "  set! $m | hash-add (get! $m) $addr $x;"
    ],
    "preprocessed": "define matrix-set | ? m | ? x | ? addr |\n  set! $m | hash-add (get! $m) $addr $x;",
    "dt": true,
    "parse": [
      "define",
      "matrix-set",
      [
        -1,
        "?",
        "m",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "?",
            "addr",
            [
              -1,
              "set!",
              [
                -2,
                "m"
              ],
              [
                -1,
                "hash-add",
                [
                  "get!",
                  [
                    -2,
                    "m"
                  ]
                ],
                [
                  -2,
                  "addr"
                ],
                [
                  -2,
                  "x"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312100010110302312110031210001011130231211003121010013023121100312100011000302312111003123121000101113023121111111321211101312312100010111331231210001100031231210100132233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf15a;&#xf248;&#xf150;&#xf24a;&#xf148;&#xf15b;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf148;&#xf15c;&#xf248;&#xf160;&#xf249;&#xf148;&#xf15b;&#xf248;&#xf145;&#xf183;&#xf246;&#xf161;&#xf249;&#xf148;&#xf15b;&#xf245;&#xf249;&#xf148;&#xf15c;&#xf249;&#xf16d;&#xf24b;",
    "stanza": 1558
  },
  {
    "role": "code",
    "lines": [
      "intro matrix-get;"
    ],
    "preprocessed": "intro matrix-get;",
    "dt": false,
    "parse": [
      "intro",
      "matrix-get"
    ],
    "code": "121001031210001100132233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf15d;&#xf24b;",
    "stanza": 1559
  },
  {
    "role": "code",
    "lines": [
      "define matrix-get | ? m | ? addr |",
      "  hash-ref (get! $m) $addr;"
    ],
    "preprocessed": "define matrix-get | ? m | ? addr |\n  hash-ref (get! $m) $addr;",
    "dt": true,
    "parse": [
      "define",
      "matrix-get",
      [
        -1,
        "?",
        "m",
        [
          -1,
          "?",
          "addr",
          [
            -1,
            "hash-ref",
            [
              "get!",
              [
                -2,
                "m"
              ]
            ],
            [
              -2,
              "addr"
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121000110013023121100312100010111302312110031210001100030231210000001321211101312312100010111331231210001100032233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf15d;&#xf248;&#xf150;&#xf24a;&#xf148;&#xf15b;&#xf248;&#xf150;&#xf24a;&#xf148;&#xf15c;&#xf248;&#xf146;&#xf145;&#xf246;&#xf161;&#xf249;&#xf148;&#xf15b;&#xf245;&#xf249;&#xf148;&#xf15c;&#xf24b;",
    "stanza": 1560
  },
  {
    "role": "code",
    "lines": [
      "define test-matrix | make-matrix 0;"
    ],
    "preprocessed": "define test-matrix | make-matrix 0;",
    "dt": true,
    "parse": [
      "define",
      "test-matrix",
      [
        -1,
        "make-matrix",
        "0"
      ]
    ],
    "code": "121101312100011010302312100010101302032233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf15e;&#xf248;&#xf148;&#xf159;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1561
  },
  {
    "role": "code",
    "lines": [
      "= 0 | matrix-get $test-matrix | vector 1 2 3;"
    ],
    "preprocessed": "= 0 | matrix-get $test-matrix | vector 1 2 3;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "matrix-get",
        [
          -2,
          "test-matrix"
        ],
        [
          -1,
          "vector",
          "1",
          "2",
          "3"
        ]
      ]
    ],
    "code": "12113020302312100011001312312100011010302312100003021302103021132233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf148;&#xf15d;&#xf249;&#xf148;&#xf15e;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 1562
  },
  {
    "role": "code",
    "lines": [
      "matrix-set $test-matrix 10 | vector 1 2 3;"
    ],
    "preprocessed": "matrix-set $test-matrix 10 | vector 1 2 3;",
    "dt": false,
    "parse": [
      "matrix-set",
      [
        -2,
        "test-matrix"
      ],
      "10",
      [
        -1,
        "vector",
        "1",
        "2",
        "3"
      ]
    ],
    "code": "121000101103123121000110103021010302312100003021302103021132233",
    "spider": "&#xf148;&#xf15a;&#xf249;&#xf148;&#xf15e;&#xf24a;&#xf20e;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 1563
  },
  {
    "role": "code",
    "lines": [
      "= 10 | matrix-get $test-matrix | vector 1 2 3;"
    ],
    "preprocessed": "= 10 | matrix-get $test-matrix | vector 1 2 3;",
    "dt": false,
    "parse": [
      "=",
      "10",
      [
        -1,
        "matrix-get",
        [
          -2,
          "test-matrix"
        ],
        [
          -1,
          "vector",
          "1",
          "2",
          "3"
        ]
      ]
    ],
    "code": "12113021010302312100011001312312100011010302312100003021302103021132233",
    "spider": "&#xf147;&#xf24a;&#xf20e;&#xf248;&#xf148;&#xf15d;&#xf249;&#xf148;&#xf15e;&#xf248;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 1564
  },
  {
    "role": "comment",
    "lines": [
      "# go through a circuit of unless gates and analyze data flow"
    ],
    "stanza": 1565
  },
  {
    "role": "code",
    "lines": [
      "define unless-phase-1 | ? circuit |",
      "  assign state (make-matrix $false) |",
      "  begin",
      "    (map ",
      "     (? gate |",
      "    assign x1 (list-ref $gate 0) |",
      "    assign y1 (list-ref $gate 1) |",
      "    assign x2 (list-ref $gate 2) |",
      "    assign y2 (list-ref $gate 3) |",
      "    assign v (list-ref $gate 4) |",
      "    (if (= $x1 $x2)",
      "        (begin",
      "          (matrix-set $state $v | vector $x2 $y2 vert-value)",
      "          (matrix-set $state $true | vector $x2 $y2 vert-have)",
      "          (matrix-set $state $true | vector $x1 $y1 vert-want)",
      "            $gate)",
      "        (begin",
      "          (matrix-set $state $v | vector $x2 $y2 horiz-value)",
      "          (matrix-set $state $true | vector $x2 $y2 horiz-have)",
      "          (matrix-set $state $true | vector $x1 $y1 horiz-want)",
      "          $gate)))",
      "     $circuit)",
      "    $state;"
    ],
    "preprocessed": "define unless-phase-1 | ? circuit |\n  assign state (make-matrix $false) |\n  begin\n    (map \n     (? gate |\n    assign x1 (list-ref $gate 0) |\n    assign y1 (list-ref $gate 1) |\n    assign x2 (list-ref $gate 2) |\n    assign y2 (list-ref $gate 3) |\n    assign v (list-ref $gate 4) |\n    (if (= $x1 $x2)\n        (begin\n          (matrix-set $state $v | vector $x2 $y2 vert-value)\n          (matrix-set $state $true | vector $x2 $y2 vert-have)\n          (matrix-set $state $true | vector $x1 $y1 vert-want)\n            $gate)\n        (begin\n          (matrix-set $state $v | vector $x2 $y2 horiz-value)\n          (matrix-set $state $true | vector $x2 $y2 horiz-have)\n          (matrix-set $state $true | vector $x1 $y1 horiz-want)\n          $gate)))\n     $circuit)\n    $state;",
    "dt": true,
    "parse": [
      "define",
      "unless-phase-1",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "assign",
          "state",
          [
            "make-matrix",
            [
              -2,
              "false"
            ]
          ],
          [
            -1,
            "begin",
            [
              "map",
              [
                "?",
                "gate",
                [
                  -1,
                  "assign",
                  "x1",
                  [
                    "list-ref",
                    [
                      -2,
                      "gate"
                    ],
                    "0"
                  ],
                  [
                    -1,
                    "assign",
                    "y1",
                    [
                      "list-ref",
                      [
                        -2,
                        "gate"
                      ],
                      "1"
                    ],
                    [
                      -1,
                      "assign",
                      "x2",
                      [
                        "list-ref",
                        [
                          -2,
                          "gate"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "assign",
                        "y2",
                        [
                          "list-ref",
                          [
                            -2,
                            "gate"
                          ],
                          "3"
                        ],
                        [
                          -1,
                          "assign",
                          "v",
                          [
                            "list-ref",
                            [
                              -2,
                              "gate"
                            ],
                            "4"
                          ],
                          [
                            -1,
                            [
                              "if",
                              [
                                "=",
                                [
                                  -2,
                                  "x1"
                                ],
                                [
                                  -2,
                                  "x2"
                                ]
                              ],
                              [
                                "begin",
                                [
                                  "matrix-set",
                                  [
                                    -2,
                                    "state"
                                  ],
                                  [
                                    -2,
                                    "v"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      -2,
                                      "x2"
                                    ],
                                    [
                                      -2,
                                      "y2"
                                    ],
                                    "vert-value"
                                  ]
                                ],
                                [
                                  "matrix-set",
                                  [
                                    -2,
                                    "state"
                                  ],
                                  [
                                    -2,
                                    "true"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      -2,
                                      "x2"
                                    ],
                                    [
                                      -2,
                                      "y2"
                                    ],
                                    "vert-have"
                                  ]
                                ],
                                [
                                  "matrix-set",
                                  [
                                    -2,
                                    "state"
                                  ],
                                  [
                                    -2,
                                    "true"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      -2,
                                      "x1"
                                    ],
                                    [
                                      -2,
                                      "y1"
                                    ],
                                    "vert-want"
                                  ]
                                ],
                                [
                                  -2,
                                  "gate"
                                ]
                              ],
                              [
                                "begin",
                                [
                                  "matrix-set",
                                  [
                                    -2,
                                    "state"
                                  ],
                                  [
                                    -2,
                                    "v"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      -2,
                                      "x2"
                                    ],
                                    [
                                      -2,
                                      "y2"
                                    ],
                                    "horiz-value"
                                  ]
                                ],
                                [
                                  "matrix-set",
                                  [
                                    -2,
                                    "state"
                                  ],
                                  [
                                    -2,
                                    "true"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      -2,
                                      "x2"
                                    ],
                                    [
                                      -2,
                                      "y2"
                                    ],
                                    "horiz-have"
                                  ]
                                ],
                                [
                                  "matrix-set",
                                  [
                                    -2,
                                    "state"
                                  ],
                                  [
                                    -2,
                                    "true"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      -2,
                                      "x1"
                                    ],
                                    [
                                      -2,
                                      "y1"
                                    ],
                                    "horiz-want"
                                  ]
                                ],
                                [
                                  -2,
                                  "gate"
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                -2,
                "circuit"
              ]
            ],
            [
              -2,
              "state"
            ]
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf15f;&#xf248;&#xf150;&#xf24a;&#xf148;&#xf160;&#xf248;&#xf152;&#xf24a;&#xf148;&#xf161;&#xf246;&#xf148;&#xf159;&#xf249;&#xf144;&#xf245;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf148;&#xf162;&#xf248;&#xf152;&#xf24a;&#xf148;&#xf163;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf162;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf148;&#xf164;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf162;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf148;&#xf165;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf162;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf148;&#xf166;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf162;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf179;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf162;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf246;&#xf153;&#xf246;&#xf147;&#xf249;&#xf148;&#xf163;&#xf249;&#xf148;&#xf165;&#xf245;&#xf246;&#xf145;&#xf15f;&#xf246;&#xf148;&#xf15a;&#xf249;&#xf148;&#xf161;&#xf249;&#xf179;&#xf248;&#xf154;&#xf249;&#xf148;&#xf165;&#xf249;&#xf148;&#xf166;&#xf24a;&#xf148;&#xf167;&#xf245;&#xf246;&#xf148;&#xf15a;&#xf249;&#xf148;&#xf161;&#xf249;&#xf145;&#xf248;&#xf154;&#xf249;&#xf148;&#xf165;&#xf249;&#xf148;&#xf166;&#xf24a;&#xf148;&#xf168;&#xf245;&#xf246;&#xf148;&#xf15a;&#xf249;&#xf148;&#xf161;&#xf249;&#xf145;&#xf248;&#xf154;&#xf249;&#xf148;&#xf163;&#xf249;&#xf148;&#xf164;&#xf24a;&#xf148;&#xf169;&#xf245;&#xf249;&#xf148;&#xf162;&#xf245;&#xf246;&#xf145;&#xf15f;&#xf246;&#xf148;&#xf15a;&#xf249;&#xf148;&#xf161;&#xf249;&#xf179;&#xf248;&#xf154;&#xf249;&#xf148;&#xf165;&#xf249;&#xf148;&#xf166;&#xf24a;&#xf148;&#xf16a;&#xf245;&#xf246;&#xf148;&#xf15a;&#xf249;&#xf148;&#xf161;&#xf249;&#xf145;&#xf248;&#xf154;&#xf249;&#xf148;&#xf165;&#xf249;&#xf148;&#xf166;&#xf24a;&#xf148;&#xf16b;&#xf245;&#xf246;&#xf148;&#xf15a;&#xf249;&#xf148;&#xf161;&#xf249;&#xf145;&#xf248;&#xf154;&#xf249;&#xf148;&#xf163;&#xf249;&#xf148;&#xf164;&#xf24a;&#xf148;&#xf16c;&#xf245;&#xf249;&#xf148;&#xf162;&#xf245;&#xf245;&#xf245;&#xf249;&#xf148;&#xf160;&#xf245;&#xf249;&#xf148;&#xf161;&#xf24b;",
    "stanza": 1566
  },
  {
    "role": "comment",
    "lines": [
      "# move forward one simulation step"
    ],
    "stanza": 1567
  },
  {
    "role": "code",
    "lines": [
      "define unless-phase-2 | ? circuit | ? state | map",
      "   (? gate |",
      "      assign x1 (list-ref $gate 0) |",
      "      assign y1 (list-ref $gate 1) |",
      "      assign x2 (list-ref $gate 2) |",
      "      assign y2 (list-ref $gate 3) |",
      "      assign v (list-ref $gate 4) |",
      "      assign nv (if (= $x1 $x2)",
      "            (if (matrix-get $state | vector $x1 $y1 vert-have)",
      "            (and (matrix-get $state | vector $x1 $y1 vert-value)",
      "                 (not | and (matrix-get $state |",
      "                           vector $x1 $y1 horiz-value)",
      "                        (not  | matrix-get $state |",
      "                            vector $x1 $y1 horiz-want)))",
      "            (if (matrix-get $state | vector $x1 $y1 horiz-have)",
      "                (matrix-get $state | vector $x1 $y1 horiz-value)",
      "                $true))",
      "            (if (matrix-get $state | vector $x1 $y1 horiz-have)",
      "            (and (matrix-get $state | vector $x1 $y1 horiz-value)",
      "                 (not | and (matrix-get $state |",
      "                           vector $x1 $y1 vert-value)",
      "                        (not | matrix-get $state |",
      "                            vector $x1 $y1 vert-want)))",
      "            (if (matrix-get $state | vector $x1 $y1 vert-have)",
      "                (matrix-get $state | vector $x1 $y1 vert-value)",
      "                $true))) |",
      "      vector $x1 $y1 $x2 $y2 $nv)",
      "   $circuit;"
    ],
    "preprocessed": "define unless-phase-2 | ? circuit | ? state | map\n   (? gate |\n      assign x1 (list-ref $gate 0) |\n      assign y1 (list-ref $gate 1) |\n      assign x2 (list-ref $gate 2) |\n      assign y2 (list-ref $gate 3) |\n      assign v (list-ref $gate 4) |\n      assign nv (if (= $x1 $x2)\n            (if (matrix-get $state | vector $x1 $y1 vert-have)\n            (and (matrix-get $state | vector $x1 $y1 vert-value)\n                 (not | and (matrix-get $state |\n                           vector $x1 $y1 horiz-value)\n                        (not  | matrix-get $state |\n                            vector $x1 $y1 horiz-want)))\n            (if (matrix-get $state | vector $x1 $y1 horiz-have)\n                (matrix-get $state | vector $x1 $y1 horiz-value)\n                $true))\n            (if (matrix-get $state | vector $x1 $y1 horiz-have)\n            (and (matrix-get $state | vector $x1 $y1 horiz-value)\n                 (not | and (matrix-get $state |\n                           vector $x1 $y1 vert-value)\n                        (not | matrix-get $state |\n                            vector $x1 $y1 vert-want)))\n            (if (matrix-get $state | vector $x1 $y1 vert-have)\n                (matrix-get $state | vector $x1 $y1 vert-value)\n                $true))) |\n      vector $x1 $y1 $x2 $y2 $nv)\n   $circuit;",
    "dt": true,
    "parse": [
      "define",
      "unless-phase-2",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "?",
          "state",
          [
            -1,
            "map",
            [
              "?",
              "gate",
              [
                -1,
                "assign",
                "x1",
                [
                  "list-ref",
                  [
                    -2,
                    "gate"
                  ],
                  "0"
                ],
                [
                  -1,
                  "assign",
                  "y1",
                  [
                    "list-ref",
                    [
                      -2,
                      "gate"
                    ],
                    "1"
                  ],
                  [
                    -1,
                    "assign",
                    "x2",
                    [
                      "list-ref",
                      [
                        -2,
                        "gate"
                      ],
                      "2"
                    ],
                    [
                      -1,
                      "assign",
                      "y2",
                      [
                        "list-ref",
                        [
                          -2,
                          "gate"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "assign",
                        "v",
                        [
                          "list-ref",
                          [
                            -2,
                            "gate"
                          ],
                          "4"
                        ],
                        [
                          -1,
                          "assign",
                          "nv",
                          [
                            "if",
                            [
                              "=",
                              [
                                -2,
                                "x1"
                              ],
                              [
                                -2,
                                "x2"
                              ]
                            ],
                            [
                              "if",
                              [
                                "matrix-get",
                                [
                                  -2,
                                  "state"
                                ],
                                [
                                  -1,
                                  "vector",
                                  [
                                    -2,
                                    "x1"
                                  ],
                                  [
                                    -2,
                                    "y1"
                                  ],
                                  "vert-have"
                                ]
                              ],
                              [
                                "and",
                                [
                                  "matrix-get",
                                  [
                                    -2,
                                    "state"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      -2,
                                      "x1"
                                    ],
                                    [
                                      -2,
                                      "y1"
                                    ],
                                    "vert-value"
                                  ]
                                ],
                                [
                                  "not",
                                  [
                                    -1,
                                    "and",
                                    [
                                      "matrix-get",
                                      [
                                        -2,
                                        "state"
                                      ],
                                      [
                                        -1,
                                        "vector",
                                        [
                                          -2,
                                          "x1"
                                        ],
                                        [
                                          -2,
                                          "y1"
                                        ],
                                        "horiz-value"
                                      ]
                                    ],
                                    [
                                      "not",
                                      [
                                        -1,
                                        "matrix-get",
                                        [
                                          -2,
                                          "state"
                                        ],
                                        [
                                          -1,
                                          "vector",
                                          [
                                            -2,
                                            "x1"
                                          ],
                                          [
                                            -2,
                                            "y1"
                                          ],
                                          "horiz-want"
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ],
                              [
                                "if",
                                [
                                  "matrix-get",
                                  [
                                    -2,
                                    "state"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      -2,
                                      "x1"
                                    ],
                                    [
                                      -2,
                                      "y1"
                                    ],
                                    "horiz-have"
                                  ]
                                ],
                                [
                                  "matrix-get",
                                  [
                                    -2,
                                    "state"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      -2,
                                      "x1"
                                    ],
                                    [
                                      -2,
                                      "y1"
                                    ],
                                    "horiz-value"
                                  ]
                                ],
                                [
                                  -2,
                                  "true"
                                ]
                              ]
                            ],
                            [
                              "if",
                              [
                                "matrix-get",
                                [
                                  -2,
                                  "state"
                                ],
                                [
                                  -1,
                                  "vector",
                                  [
                                    -2,
                                    "x1"
                                  ],
                                  [
                                    -2,
                                    "y1"
                                  ],
                                  "horiz-have"
                                ]
                              ],
                              [
                                "and",
                                [
                                  "matrix-get",
                                  [
                                    -2,
                                    "state"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      -2,
                                      "x1"
                                    ],
                                    [
                                      -2,
                                      "y1"
                                    ],
                                    "horiz-value"
                                  ]
                                ],
                                [
                                  "not",
                                  [
                                    -1,
                                    "and",
                                    [
                                      "matrix-get",
                                      [
                                        -2,
                                        "state"
                                      ],
                                      [
                                        -1,
                                        "vector",
                                        [
                                          -2,
                                          "x1"
                                        ],
                                        [
                                          -2,
                                          "y1"
                                        ],
                                        "vert-value"
                                      ]
                                    ],
                                    [
                                      "not",
                                      [
                                        -1,
                                        "matrix-get",
                                        [
                                          -2,
                                          "state"
                                        ],
                                        [
                                          -1,
                                          "vector",
                                          [
                                            -2,
                                            "x1"
                                          ],
                                          [
                                            -2,
                                            "y1"
                                          ],
                                          "vert-want"
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ],
                              [
                                "if",
                                [
                                  "matrix-get",
                                  [
                                    -2,
                                    "state"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      -2,
                                      "x1"
                                    ],
                                    [
                                      -2,
                                      "y1"
                                    ],
                                    "vert-have"
                                  ]
                                ],
                                [
                                  "matrix-get",
                                  [
                                    -2,
                                    "state"
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      -2,
                                      "x1"
                                    ],
                                    [
                                      -2,
                                      "y1"
                                    ],
                                    "vert-value"
                                  ]
                                ],
                                [
                                  -2,
                                  "true"
                                ]
                              ]
                            ]
                          ],
                          [
                            -1,
                            "vector",
                            [
                              -2,
                              "x1"
                            ],
                            [
                              -2,
                              "y1"
                            ],
                            [
                              -2,
                              "x2"
                            ],
                            [
                              -2,
                              "y2"
                            ],
                            [
                              -2,
                              "nv"
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ],
            [
              -2,
              "circuit"
            ]
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf148;&#xf160;&#xf248;&#xf150;&#xf24a;&#xf148;&#xf161;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf148;&#xf162;&#xf248;&#xf152;&#xf24a;&#xf148;&#xf163;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf162;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf148;&#xf164;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf162;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf148;&#xf165;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf162;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf148;&#xf166;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf162;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf179;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf162;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf148;&#xf16e;&#xf246;&#xf153;&#xf246;&#xf147;&#xf249;&#xf148;&#xf163;&#xf249;&#xf148;&#xf165;&#xf245;&#xf246;&#xf153;&#xf246;&#xf148;&#xf15d;&#xf249;&#xf148;&#xf161;&#xf248;&#xf154;&#xf249;&#xf148;&#xf163;&#xf249;&#xf148;&#xf164;&#xf24a;&#xf148;&#xf168;&#xf245;&#xf246;&#xf14a;&#xf246;&#xf148;&#xf15d;&#xf249;&#xf148;&#xf161;&#xf248;&#xf154;&#xf249;&#xf148;&#xf163;&#xf249;&#xf148;&#xf164;&#xf24a;&#xf148;&#xf167;&#xf245;&#xf246;&#xf149;&#xf248;&#xf14a;&#xf246;&#xf148;&#xf15d;&#xf249;&#xf148;&#xf161;&#xf248;&#xf154;&#xf249;&#xf148;&#xf163;&#xf249;&#xf148;&#xf164;&#xf24a;&#xf148;&#xf16a;&#xf245;&#xf246;&#xf149;&#xf248;&#xf148;&#xf15d;&#xf249;&#xf148;&#xf161;&#xf248;&#xf154;&#xf249;&#xf148;&#xf163;&#xf249;&#xf148;&#xf164;&#xf24a;&#xf148;&#xf16c;&#xf245;&#xf245;&#xf245;&#xf246;&#xf153;&#xf246;&#xf148;&#xf15d;&#xf249;&#xf148;&#xf161;&#xf248;&#xf154;&#xf249;&#xf148;&#xf163;&#xf249;&#xf148;&#xf164;&#xf24a;&#xf148;&#xf16b;&#xf245;&#xf246;&#xf148;&#xf15d;&#xf249;&#xf148;&#xf161;&#xf248;&#xf154;&#xf249;&#xf148;&#xf163;&#xf249;&#xf148;&#xf164;&#xf24a;&#xf148;&#xf16a;&#xf245;&#xf249;&#xf145;&#xf245;&#xf245;&#xf246;&#xf153;&#xf246;&#xf148;&#xf15d;&#xf249;&#xf148;&#xf161;&#xf248;&#xf154;&#xf249;&#xf148;&#xf163;&#xf249;&#xf148;&#xf164;&#xf24a;&#xf148;&#xf16b;&#xf245;&#xf246;&#xf14a;&#xf246;&#xf148;&#xf15d;&#xf249;&#xf148;&#xf161;&#xf248;&#xf154;&#xf249;&#xf148;&#xf163;&#xf249;&#xf148;&#xf164;&#xf24a;&#xf148;&#xf16a;&#xf245;&#xf246;&#xf149;&#xf248;&#xf14a;&#xf246;&#xf148;&#xf15d;&#xf249;&#xf148;&#xf161;&#xf248;&#xf154;&#xf249;&#xf148;&#xf163;&#xf249;&#xf148;&#xf164;&#xf24a;&#xf148;&#xf167;&#xf245;&#xf246;&#xf149;&#xf248;&#xf148;&#xf15d;&#xf249;&#xf148;&#xf161;&#xf248;&#xf154;&#xf249;&#xf148;&#xf163;&#xf249;&#xf148;&#xf164;&#xf24a;&#xf148;&#xf169;&#xf245;&#xf245;&#xf245;&#xf246;&#xf153;&#xf246;&#xf148;&#xf15d;&#xf249;&#xf148;&#xf161;&#xf248;&#xf154;&#xf249;&#xf148;&#xf163;&#xf249;&#xf148;&#xf164;&#xf24a;&#xf148;&#xf168;&#xf245;&#xf246;&#xf148;&#xf15d;&#xf249;&#xf148;&#xf161;&#xf248;&#xf154;&#xf249;&#xf148;&#xf163;&#xf249;&#xf148;&#xf164;&#xf24a;&#xf148;&#xf167;&#xf245;&#xf249;&#xf145;&#xf245;&#xf245;&#xf245;&#xf248;&#xf154;&#xf249;&#xf148;&#xf163;&#xf249;&#xf148;&#xf164;&#xf249;&#xf148;&#xf165;&#xf249;&#xf148;&#xf166;&#xf249;&#xf148;&#xf16e;&#xf245;&#xf249;&#xf148;&#xf160;&#xf24b;",
    "stanza": 1568
  },
  {
    "role": "comment",
    "lines": [
      "# wrap up both phases of simulation"
    ],
    "stanza": 1569
  },
  {
    "role": "code",
    "lines": [
      "intro simulate-unless;"
    ],
    "preprocessed": "intro simulate-unless;",
    "dt": false,
    "parse": [
      "intro",
      "simulate-unless"
    ],
    "code": "121001031210010101132233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf16f;&#xf24b;",
    "stanza": 1570
  },
  {
    "role": "code",
    "lines": [
      "define simulate-unless | ? circuit |",
      "  assign state (unless-phase-1 $circuit) |",
      "  unless-phase-2 $circuit $state;"
    ],
    "preprocessed": "define simulate-unless | ? circuit |\n  assign state (unless-phase-1 $circuit) |\n  unless-phase-2 $circuit $state;",
    "dt": true,
    "parse": [
      "define",
      "simulate-unless",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "assign",
          "state",
          [
            "unless-phase-1",
            [
              -2,
              "circuit"
            ]
          ],
          [
            -1,
            "unless-phase-2",
            [
              -2,
              "circuit"
            ],
            [
              -2,
              "state"
            ]
          ]
        ]
      ]
    ],
    "code": "121101312100101011302312110031210001110030231211103121000111013212100011011312312100011100330231210010100131231210001110031231210001110132233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf16f;&#xf248;&#xf150;&#xf24a;&#xf148;&#xf160;&#xf248;&#xf152;&#xf24a;&#xf148;&#xf161;&#xf246;&#xf148;&#xf15f;&#xf249;&#xf148;&#xf160;&#xf245;&#xf248;&#xf148;&#xf16d;&#xf249;&#xf148;&#xf160;&#xf249;&#xf148;&#xf161;&#xf24b;",
    "stanza": 1571
  },
  {
    "role": "comment",
    "lines": [
      "# A circuit is a list of gates",
      "# Each gate is a list (x1 y1 x2 y2 v)",
      "# where the coordinates (x1,y1) and (x2,y2) represent",
      "# start and end points of a wire on a plane, carrying a ",
      "# logic value v.",
      "# Wires copy values from their start point.",
      "#   |  ",
      "#   | (A)",
      "#   V        ",
      "# -->-->",
      "# (B)(C)",
      "#",
      "# Wire C here copies from wire B.",
      "# If wire A is on, it blocks (sets to 0) C."
    ],
    "stanza": 1572
  },
  {
    "role": "code",
    "lines": [
      "assign circuit1",
      "    (vector",
      "     (vector 2 2 4 2 $true)",
      "     (vector 4 2 6 2 $true)",
      "     (vector 6 2 8 2 $true)",
      "     (vector 6 4 6 2 $true)) |",
      "     assign circuit2",
      "     (vector",
      "      (vector 2 2 4 2 $true)",
      "      (vector 4 2 6 2 $true)",
      "      (vector 6 2 8 2 $false)",
      "      (vector 6 4 6 2 $true)) |",
      "      equal (simulate-unless $circuit1) $circuit2;"
    ],
    "preprocessed": "assign circuit1\n    (vector\n     (vector 2 2 4 2 $true)\n     (vector 4 2 6 2 $true)\n     (vector 6 2 8 2 $true)\n     (vector 6 4 6 2 $true)) |\n     assign circuit2\n     (vector\n      (vector 2 2 4 2 $true)\n      (vector 4 2 6 2 $true)\n      (vector 6 2 8 2 $false)\n      (vector 6 4 6 2 $true)) |\n      equal (simulate-unless $circuit1) $circuit2;",
    "dt": false,
    "parse": [
      "assign",
      "circuit1",
      [
        "vector",
        [
          "vector",
          "2",
          "2",
          "4",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "2",
          "6",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "2",
          "8",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "4",
          "6",
          "2",
          [
            -2,
            "true"
          ]
        ]
      ],
      [
        -1,
        "assign",
        "circuit2",
        [
          "vector",
          [
            "vector",
            "2",
            "2",
            "4",
            "2",
            [
              -2,
              "true"
            ]
          ],
          [
            "vector",
            "4",
            "2",
            "6",
            "2",
            [
              -2,
              "true"
            ]
          ],
          [
            "vector",
            "6",
            "2",
            "8",
            "2",
            [
              -2,
              "false"
            ]
          ],
          [
            "vector",
            "6",
            "4",
            "6",
            "2",
            [
              -2,
              "true"
            ]
          ]
        ],
        [
          -1,
          "equal",
          [
            "simulate-unless",
            [
              -2,
              "circuit1"
            ]
          ],
          [
            -2,
            "circuit2"
          ]
        ]
      ]
    ],
    "code": "1211103121001011003212100003212100003021030210302100302103123121332121000030210030210302110302103123121332121000030211030210302100030210312312133212100003021103021003021103021031231213330231211103121001011013212100003212100003021030210302100302103123121332121000030210030210302110302103123121332121000030211030210302100030210312312033212100003021103021003021103021031231213330231210003212100101011312312100101100331231210010110132233",
    "spider": "&#xf152;&#xf24a;&#xf148;&#xf170;&#xf246;&#xf154;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf24a;&#xf20c;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf148;&#xf171;&#xf246;&#xf154;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf24a;&#xf20c;&#xf24a;&#xf206;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf245;&#xf248;&#xf14c;&#xf246;&#xf148;&#xf16f;&#xf249;&#xf148;&#xf170;&#xf245;&#xf249;&#xf148;&#xf171;&#xf24b;",
    "stanza": 1573
  },
  {
    "role": "comment",
    "lines": [
      "# okay, now let us make a simple image class",
      "# we are going to encode each row as a single binary number,",
      "# rather than a vector, so that images will be pretty",
      "# obvious in the raw, uninterpreted message",
      "# TODO: introduce div somewhere!"
    ],
    "stanza": 1574
  },
  {
    "role": "code",
    "lines": [
      "intro bit-get;"
    ],
    "preprocessed": "intro bit-get;",
    "dt": false,
    "parse": [
      "intro",
      "bit-get"
    ],
    "code": "121001031210010111032233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf172;&#xf24b;",
    "stanza": 1575
  },
  {
    "role": "code",
    "lines": [
      "define bit-get | lambda (n offset) |",
      "  assign div2 (div $n 2) |",
      "  if (= 0 | offset) (not | = $n | * 2 $div2) |",
      "  bit-get $div2 | - $offset 1;"
    ],
    "preprocessed": "define bit-get | lambda (n offset) |\n  assign div2 (div $n 2) |\n  if (= 0 | offset) (not | = $n | * 2 $div2) |\n  bit-get $div2 | - $offset 1;",
    "dt": true,
    "parse": [
      "define",
      "bit-get",
      [
        -1,
        "lambda",
        [
          "n",
          "offset"
        ],
        [
          -1,
          "assign",
          "div2",
          [
            "div",
            [
              -2,
              "n"
            ],
            "2"
          ],
          [
            -1,
            "if",
            [
              "=",
              "0",
              [
                -1,
                "offset"
              ]
            ],
            [
              "not",
              [
                -1,
                "=",
                [
                  -2,
                  "n"
                ],
                [
                  -1,
                  "*",
                  "2",
                  [
                    -2,
                    "div2"
                  ]
                ]
              ]
            ],
            [
              -1,
              "bit-get",
              [
                -2,
                "div2"
              ],
              [
                -1,
                "-",
                [
                  -2,
                  "offset"
                ],
                "1"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210010111030231211010321210011103121001011113302312111031210011000032121000103123121001110302103302312111132121130203023121001011113321210130231211312312100111030231210013021031231210011000033023121001011103123121001100003023121011312312100101111302132233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf172;&#xf248;&#xf15e;&#xf246;&#xf145;&#xf152;&#xf24a;&#xf148;&#xf173;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf148;&#xf174;&#xf246;&#xf166;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf148;&#xf173;&#xf245;&#xf246;&#xf149;&#xf248;&#xf147;&#xf249;&#xf145;&#xf152;&#xf248;&#xf14d;&#xf24a;&#xf206;&#xf249;&#xf148;&#xf174;&#xf245;&#xf248;&#xf148;&#xf172;&#xf249;&#xf148;&#xf174;&#xf248;&#xf14f;&#xf249;&#xf148;&#xf173;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 1576
  },
  {
    "role": "code",
    "lines": [
      "= 0 | bit-get (::::::::::::::......:...:..::.) 0;"
    ],
    "preprocessed": "= 0 | bit-get (::::::::::::::......:...:..::.) 0;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "bit-get",
        [
          "::::::::::::::......:...:..::."
        ],
        "0"
      ]
    ],
    "code": "1211302030231210010111032021111111111111100000010001001103302032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf148;&#xf172;&#xf246;&#xf243;&#xf243;&#xf234;&#xf20c;&#xf22a;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1577
  },
  {
    "role": "code",
    "lines": [
      "= 1 | bit-get (::::::::::::::......:...:..::.) 1;"
    ],
    "preprocessed": "= 1 | bit-get (::::::::::::::......:...:..::.) 1;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "bit-get",
        [
          "::::::::::::::......:...:..::."
        ],
        "1"
      ]
    ],
    "code": "1211302130231210010111032021111111111111100000010001001103302132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf148;&#xf172;&#xf246;&#xf243;&#xf243;&#xf234;&#xf20c;&#xf22a;&#xf245;&#xf205;&#xf24b;",
    "stanza": 1578
  },
  {
    "role": "code",
    "lines": [
      "= 1 | bit-get (::::::::::::::......:...:..::.) 2;"
    ],
    "preprocessed": "= 1 | bit-get (::::::::::::::......:...:..::.) 2;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "bit-get",
        [
          "::::::::::::::......:...:..::."
        ],
        "2"
      ]
    ],
    "code": "12113021302312100101110320211111111111111000000100010011033021032233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf148;&#xf172;&#xf246;&#xf243;&#xf243;&#xf234;&#xf20c;&#xf22a;&#xf245;&#xf206;&#xf24b;",
    "stanza": 1579
  },
  {
    "role": "code",
    "lines": [
      "= 0 | bit-get (::::::::::::::......:...:..::.) 3;"
    ],
    "preprocessed": "= 0 | bit-get (::::::::::::::......:...:..::.) 3;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "bit-get",
        [
          "::::::::::::::......:...:..::."
        ],
        "3"
      ]
    ],
    "code": "12113020302312100101110320211111111111111000000100010011033021132233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf148;&#xf172;&#xf246;&#xf243;&#xf243;&#xf234;&#xf20c;&#xf22a;&#xf245;&#xf207;&#xf24b;",
    "stanza": 1580
  },
  {
    "role": "code",
    "lines": [
      "= 0 | bit-get (::::::::::::::......:...:..::.) 4;"
    ],
    "preprocessed": "= 0 | bit-get (::::::::::::::......:...:..::.) 4;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "bit-get",
        [
          "::::::::::::::......:...:..::."
        ],
        "4"
      ]
    ],
    "code": "121130203023121001011103202111111111111110000001000100110330210032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf148;&#xf172;&#xf246;&#xf243;&#xf243;&#xf234;&#xf20c;&#xf22a;&#xf245;&#xf208;&#xf24b;",
    "stanza": 1581
  },
  {
    "role": "code",
    "lines": [
      "= 1 | bit-get (::::::::::::::......:...:..::.) 5;"
    ],
    "preprocessed": "= 1 | bit-get (::::::::::::::......:...:..::.) 5;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "bit-get",
        [
          "::::::::::::::......:...:..::."
        ],
        "5"
      ]
    ],
    "code": "121130213023121001011103202111111111111110000001000100110330210132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf148;&#xf172;&#xf246;&#xf243;&#xf243;&#xf234;&#xf20c;&#xf22a;&#xf245;&#xf209;&#xf24b;",
    "stanza": 1582
  },
  {
    "role": "code",
    "lines": [
      "= 0 | bit-get (::::::::::::::......:...:..::.) 6;"
    ],
    "preprocessed": "= 0 | bit-get (::::::::::::::......:...:..::.) 6;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "bit-get",
        [
          "::::::::::::::......:...:..::."
        ],
        "6"
      ]
    ],
    "code": "121130203023121001011103202111111111111110000001000100110330211032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf148;&#xf172;&#xf246;&#xf243;&#xf243;&#xf234;&#xf20c;&#xf22a;&#xf245;&#xf20a;&#xf24b;",
    "stanza": 1583
  },
  {
    "role": "code",
    "lines": [
      "= 0 | bit-get (::::::::::::::......:...:..::.) 7;"
    ],
    "preprocessed": "= 0 | bit-get (::::::::::::::......:...:..::.) 7;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "bit-get",
        [
          "::::::::::::::......:...:..::."
        ],
        "7"
      ]
    ],
    "code": "121130203023121001011103202111111111111110000001000100110330211132233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf148;&#xf172;&#xf246;&#xf243;&#xf243;&#xf234;&#xf20c;&#xf22a;&#xf245;&#xf20b;&#xf24b;",
    "stanza": 1584
  },
  {
    "role": "code",
    "lines": [
      "= 0 | bit-get (::::::::::::::......:...:..::.) 8;"
    ],
    "preprocessed": "= 0 | bit-get (::::::::::::::......:...:..::.) 8;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "bit-get",
        [
          "::::::::::::::......:...:..::."
        ],
        "8"
      ]
    ],
    "code": "1211302030231210010111032021111111111111100000010001001103302100032233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf148;&#xf172;&#xf246;&#xf243;&#xf243;&#xf234;&#xf20c;&#xf22a;&#xf245;&#xf20c;&#xf24b;",
    "stanza": 1585
  },
  {
    "role": "code",
    "lines": [
      "= 1 | bit-get (::::::::::::::......:...:..::.) 9;"
    ],
    "preprocessed": "= 1 | bit-get (::::::::::::::......:...:..::.) 9;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "bit-get",
        [
          "::::::::::::::......:...:..::."
        ],
        "9"
      ]
    ],
    "code": "1211302130231210010111032021111111111111100000010001001103302100132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf148;&#xf172;&#xf246;&#xf243;&#xf243;&#xf234;&#xf20c;&#xf22a;&#xf245;&#xf20d;&#xf24b;",
    "stanza": 1586
  },
  {
    "role": "code",
    "lines": [
      "intro make-image;"
    ],
    "preprocessed": "intro make-image;",
    "dt": false,
    "parse": [
      "intro",
      "make-image"
    ],
    "code": "121001031210011000132233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf175;&#xf24b;",
    "stanza": 1587
  },
  {
    "role": "code",
    "lines": [
      "define make-image | lambda (h w lst) |",
      "  vector $h $w $lst;"
    ],
    "preprocessed": "define make-image | lambda (h w lst) |\n  vector $h $w $lst;",
    "dt": true,
    "parse": [
      "define",
      "make-image",
      [
        -1,
        "lambda",
        [
          "h",
          "w",
          "lst"
        ],
        [
          -1,
          "vector",
          [
            -2,
            "h"
          ],
          [
            -2,
            "w"
          ],
          [
            -2,
            "lst"
          ]
        ]
      ]
    ],
    "code": "1211013121001100013023121101032121001100103121001100113121100001330231210000312312100110010312312100110011312312110000132233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf175;&#xf248;&#xf15e;&#xf246;&#xf148;&#xf176;&#xf24a;&#xf148;&#xf177;&#xf24a;&#xf145;&#xf165;&#xf245;&#xf248;&#xf154;&#xf249;&#xf148;&#xf176;&#xf249;&#xf148;&#xf177;&#xf249;&#xf145;&#xf165;&#xf24b;",
    "stanza": 1588
  },
  {
    "role": "code",
    "lines": [
      "intro image-get;"
    ],
    "preprocessed": "intro image-get;",
    "dt": false,
    "parse": [
      "intro",
      "image-get"
    ],
    "code": "121001031210011010032233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf178;&#xf24b;",
    "stanza": 1589
  },
  {
    "role": "code",
    "lines": [
      "define image-get | lambda (image row col) |",
      "  assign h (list-ref $image 0) |",
      "  assign w (list-ref $image 1) |",
      "  assign lst (list-ref $image 2) |",
      "  assign bits (list-ref $lst $row) |",
      "  bit-get $bits | - (- $w $col) 1;"
    ],
    "preprocessed": "define image-get | lambda (image row col) |\n  assign h (list-ref $image 0) |\n  assign w (list-ref $image 1) |\n  assign lst (list-ref $image 2) |\n  assign bits (list-ref $lst $row) |\n  bit-get $bits | - (- $w $col) 1;",
    "dt": true,
    "parse": [
      "define",
      "image-get",
      [
        -1,
        "lambda",
        [
          "image",
          "row",
          "col"
        ],
        [
          -1,
          "assign",
          "h",
          [
            "list-ref",
            [
              -2,
              "image"
            ],
            "0"
          ],
          [
            -1,
            "assign",
            "w",
            [
              "list-ref",
              [
                -2,
                "image"
              ],
              "1"
            ],
            [
              -1,
              "assign",
              "lst",
              [
                "list-ref",
                [
                  -2,
                  "image"
                ],
                "2"
              ],
              [
                -1,
                "assign",
                "bits",
                [
                  "list-ref",
                  [
                    -2,
                    "lst"
                  ],
                  [
                    -2,
                    "row"
                  ]
                ],
                [
                  -1,
                  "bit-get",
                  [
                    -2,
                    "bits"
                  ],
                  [
                    -1,
                    "-",
                    [
                      "-",
                      [
                        -2,
                        "w"
                      ],
                      [
                        -2,
                        "col"
                      ]
                    ],
                    "1"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312100110100302312110103212100110101312100110110312100110111330231211103121001100103212101001131231210011010130203302312111031210011001132121010011312312100110101302133023121110312110000132121010011312312100110101302103302312111031210011100032121010011312312110000131231210011011033023121001011103123121001110003023121011321210113123121001100113123121001101113302132233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf178;&#xf248;&#xf15e;&#xf246;&#xf148;&#xf179;&#xf24a;&#xf148;&#xf17a;&#xf24a;&#xf148;&#xf17b;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf148;&#xf176;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf179;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf148;&#xf177;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf179;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf145;&#xf165;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf179;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf148;&#xf17c;&#xf246;&#xf145;&#xf157;&#xf249;&#xf145;&#xf165;&#xf249;&#xf148;&#xf17a;&#xf245;&#xf248;&#xf148;&#xf172;&#xf249;&#xf148;&#xf17c;&#xf248;&#xf14f;&#xf246;&#xf14f;&#xf249;&#xf148;&#xf177;&#xf249;&#xf148;&#xf17b;&#xf245;&#xf205;&#xf24b;",
    "stanza": 1590
  },
  {
    "role": "code",
    "lines": [
      "intro image-height;"
    ],
    "preprocessed": "intro image-height;",
    "dt": false,
    "parse": [
      "intro",
      "image-height"
    ],
    "code": "121001031210011100132233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf17d;&#xf24b;",
    "stanza": 1591
  },
  {
    "role": "code",
    "lines": [
      "define image-height | ? image |",
      "  list-ref $image 0;"
    ],
    "preprocessed": "define image-height | ? image |\n  list-ref $image 0;",
    "dt": true,
    "parse": [
      "define",
      "image-height",
      [
        -1,
        "?",
        "image",
        [
          -1,
          "list-ref",
          [
            -2,
            "image"
          ],
          "0"
        ]
      ]
    ],
    "code": "12110131210011100130231211003121001101013023121010011312312100110101302032233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf17d;&#xf248;&#xf150;&#xf24a;&#xf148;&#xf179;&#xf248;&#xf145;&#xf157;&#xf249;&#xf148;&#xf179;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1592
  },
  {
    "role": "code",
    "lines": [
      "intro image-width;"
    ],
    "preprocessed": "intro image-width;",
    "dt": false,
    "parse": [
      "intro",
      "image-width"
    ],
    "code": "121001031210011101032233",
    "spider": "&#xf156;&#xf24a;&#xf148;&#xf17e;&#xf24b;",
    "stanza": 1593
  },
  {
    "role": "code",
    "lines": [
      "define image-width | ? image |",
      "  list-ref $image 1;"
    ],
    "preprocessed": "define image-width | ? image |\n  list-ref $image 1;",
    "dt": true,
    "parse": [
      "define",
      "image-width",
      [
        -1,
        "?",
        "image",
        [
          -1,
          "list-ref",
          [
            -2,
            "image"
          ],
          "1"
        ]
      ]
    ],
    "code": "12110131210011101030231211003121001101013023121010011312312100110101302132233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf17e;&#xf248;&#xf150;&#xf24a;&#xf148;&#xf179;&#xf248;&#xf145;&#xf157;&#xf249;&#xf148;&#xf179;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 1594
  },
  {
    "role": "code",
    "lines": [
      "define test-image | make-image 3 20 |",
      "  vector (:...................) (:...:...............) (:...................);"
    ],
    "preprocessed": "define test-image | make-image 3 20 |\n  vector (:...................) (:...:...............) (:...................);",
    "dt": true,
    "parse": [
      "define",
      "test-image",
      [
        -1,
        "make-image",
        "3",
        "20",
        [
          -1,
          "vector",
          [
            ":..................."
          ],
          [
            ":...:..............."
          ],
          [
            ":..................."
          ]
        ]
      ]
    ],
    "code": "12110131210011101130231210011000130211302101003023121000032021000000000000000000033202100010000000000000003320210000000000000000000332233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf17f;&#xf248;&#xf148;&#xf175;&#xf24a;&#xf207;&#xf24a;&#xf218;&#xf248;&#xf154;&#xf246;&#xf206;&#xf204;&#xf204;&#xf204;&#xf245;&#xf246;&#xf206;&#xf20c;&#xf204;&#xf204;&#xf245;&#xf246;&#xf206;&#xf204;&#xf204;&#xf204;&#xf245;&#xf24b;",
    "stanza": 1595
  },
  {
    "role": "code",
    "lines": [
      "= 3 | image-height $test-image;"
    ],
    "preprocessed": "= 3 | image-height $test-image;",
    "dt": false,
    "parse": [
      "=",
      "3",
      [
        -1,
        "image-height",
        [
          -2,
          "test-image"
        ]
      ]
    ],
    "code": "12113021130231210011100131231210011101132233",
    "spider": "&#xf147;&#xf24a;&#xf207;&#xf248;&#xf148;&#xf17d;&#xf249;&#xf148;&#xf17f;&#xf24b;",
    "stanza": 1596
  },
  {
    "role": "code",
    "lines": [
      "= 20 | image-width $test-image;"
    ],
    "preprocessed": "= 20 | image-width $test-image;",
    "dt": false,
    "parse": [
      "=",
      "20",
      [
        -1,
        "image-width",
        [
          -2,
          "test-image"
        ]
      ]
    ],
    "code": "12113021010030231210011101031231210011101132233",
    "spider": "&#xf147;&#xf24a;&#xf218;&#xf248;&#xf148;&#xf17e;&#xf249;&#xf148;&#xf17f;&#xf24b;",
    "stanza": 1597
  },
  {
    "role": "code",
    "lines": [
      "= $true | image-get $test-image 0 0;"
    ],
    "preprocessed": "= $true | image-get $test-image 0 0;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        -1,
        "image-get",
        [
          -2,
          "test-image"
        ],
        "0",
        "0"
      ]
    ],
    "code": "121131231213023121001101003123121001110113020302032233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf248;&#xf148;&#xf178;&#xf249;&#xf148;&#xf17f;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1598
  },
  {
    "role": "code",
    "lines": [
      "= $false | image-get $test-image 0 1;"
    ],
    "preprocessed": "= $false | image-get $test-image 0 1;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -1,
        "image-get",
        [
          -2,
          "test-image"
        ],
        "0",
        "1"
      ]
    ],
    "code": "121131231203023121001101003123121001110113020302132233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf248;&#xf148;&#xf178;&#xf249;&#xf148;&#xf17f;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 1599
  },
  {
    "role": "code",
    "lines": [
      "= $false | image-get $test-image 0 4;"
    ],
    "preprocessed": "= $false | image-get $test-image 0 4;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -1,
        "image-get",
        [
          -2,
          "test-image"
        ],
        "0",
        "4"
      ]
    ],
    "code": "12113123120302312100110100312312100111011302030210032233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf248;&#xf148;&#xf178;&#xf249;&#xf148;&#xf17f;&#xf24a;&#xf204;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 1600
  },
  {
    "role": "code",
    "lines": [
      "= $true | image-get $test-image 1 0;"
    ],
    "preprocessed": "= $true | image-get $test-image 1 0;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        -1,
        "image-get",
        [
          -2,
          "test-image"
        ],
        "1",
        "0"
      ]
    ],
    "code": "121131231213023121001101003123121001110113021302032233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf248;&#xf148;&#xf178;&#xf249;&#xf148;&#xf17f;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1601
  },
  {
    "role": "code",
    "lines": [
      "= $true | image-get $test-image 2 0;"
    ],
    "preprocessed": "= $true | image-get $test-image 2 0;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        -1,
        "image-get",
        [
          -2,
          "test-image"
        ],
        "2",
        "0"
      ]
    ],
    "code": "1211312312130231210011010031231210011101130210302032233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf248;&#xf148;&#xf178;&#xf249;&#xf148;&#xf17f;&#xf24a;&#xf206;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1602
  },
  {
    "role": "code",
    "lines": [
      "= $true | image-get $test-image 1 4;"
    ],
    "preprocessed": "= $true | image-get $test-image 1 4;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        -1,
        "image-get",
        [
          -2,
          "test-image"
        ],
        "1",
        "4"
      ]
    ],
    "code": "12113123121302312100110100312312100111011302130210032233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf248;&#xf148;&#xf178;&#xf249;&#xf148;&#xf17f;&#xf24a;&#xf205;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 1603
  },
  {
    "role": "comment",
    "lines": [
      "# need a way to join two lists",
      "# TODO: is this similar to \"list-append\" in NewType?"
    ],
    "stanza": 1604
  },
  {
    "role": "code",
    "lines": [
      "define merge-list | ? lst1 | ? lst2 |",
      "  if (= 0 | list-length $lst1) $lst2 |",
      "  prepend (head $lst1) | merge-list (tail $lst1) $lst2;"
    ],
    "preprocessed": "define merge-list | ? lst1 | ? lst2 |\n  if (= 0 | list-length $lst1) $lst2 |\n  prepend (head $lst1) | merge-list (tail $lst1) $lst2;",
    "dt": true,
    "parse": [
      "define",
      "merge-list",
      [
        -1,
        "?",
        "lst1",
        [
          -1,
          "?",
          "lst2",
          [
            -1,
            "if",
            [
              "=",
              "0",
              [
                -1,
                "list-length",
                [
                  -2,
                  "lst1"
                ]
              ]
            ],
            [
              -2,
              "lst2"
            ],
            [
              -1,
              "prepend",
              [
                "head",
                [
                  -2,
                  "lst1"
                ]
              ],
              [
                -1,
                "merge-list",
                [
                  "tail",
                  [
                    -2,
                    "lst1"
                  ]
                ],
                [
                  -2,
                  "lst2"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210011110030231211003121011100030231211003121011100130231211113212113020302312101001031231210111000331231210111001302312101010132121010000312312101110003302312100111100321210100013123121011100033123121011100132233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf180;&#xf248;&#xf150;&#xf24a;&#xf146;&#xf17c;&#xf248;&#xf150;&#xf24a;&#xf146;&#xf17d;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf249;&#xf146;&#xf17c;&#xf245;&#xf249;&#xf146;&#xf17d;&#xf248;&#xf145;&#xf159;&#xf246;&#xf145;&#xf154;&#xf249;&#xf146;&#xf17c;&#xf245;&#xf248;&#xf148;&#xf180;&#xf246;&#xf145;&#xf155;&#xf249;&#xf146;&#xf17c;&#xf245;&#xf249;&#xf146;&#xf17d;&#xf24b;",
    "stanza": 1605
  },
  {
    "role": "code",
    "lines": [
      "define merge-lists | ? lst |",
      "   if (> (list-length $lst) 2)",
      "      (merge-list (head $lst) (merge-lists | tail $lst))",
      "      (if (= (list-length $lst) 2)",
      "      (merge-list (head $lst) | (head | tail $lst))",
      "      (if (= (list-length $lst) 1)",
      "          (head $lst)",
      "          (vector)));"
    ],
    "preprocessed": "define merge-lists | ? lst |\n   if (> (list-length $lst) 2)\n      (merge-list (head $lst) (merge-lists | tail $lst))\n      (if (= (list-length $lst) 2)\n      (merge-list (head $lst) | (head | tail $lst))\n      (if (= (list-length $lst) 1)\n          (head $lst)\n          (vector)));",
    "dt": true,
    "parse": [
      "define",
      "merge-lists",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "if",
          [
            ">",
            [
              "list-length",
              [
                -2,
                "lst"
              ]
            ],
            "2"
          ],
          [
            "merge-list",
            [
              "head",
              [
                -2,
                "lst"
              ]
            ],
            [
              "merge-lists",
              [
                -1,
                "tail",
                [
                  -2,
                  "lst"
                ]
              ]
            ]
          ],
          [
            "if",
            [
              "=",
              [
                "list-length",
                [
                  -2,
                  "lst"
                ]
              ],
              "2"
            ],
            [
              "merge-list",
              [
                "head",
                [
                  -2,
                  "lst"
                ]
              ],
              [
                -1,
                [
                  "head",
                  [
                    -1,
                    "tail",
                    [
                      -2,
                      "lst"
                    ]
                  ]
                ]
              ]
            ],
            [
              "if",
              [
                "=",
                [
                  "list-length",
                  [
                    -2,
                    "lst"
                  ]
                ],
                "1"
              ],
              [
                "head",
                [
                  -2,
                  "lst"
                ]
              ],
              [
                "vector"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121001111013023121100312110000130231211113212100321210100103123121100001330210332121001111003212101000031231211000013321210011110130231210100013123121100001333212111132121132121010010312312110000133021033212100111100321210100003123121100001330232121010000302312101000131231211000013332121111321211321210100103123121100001330213321210100003123121100001332121000033332233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf181;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf165;&#xf248;&#xf153;&#xf246;&#xf148;&#xf246;&#xf145;&#xf156;&#xf249;&#xf145;&#xf165;&#xf245;&#xf206;&#xf245;&#xf246;&#xf148;&#xf180;&#xf246;&#xf145;&#xf154;&#xf249;&#xf145;&#xf165;&#xf245;&#xf246;&#xf148;&#xf181;&#xf248;&#xf145;&#xf155;&#xf249;&#xf145;&#xf165;&#xf245;&#xf245;&#xf246;&#xf153;&#xf246;&#xf147;&#xf246;&#xf145;&#xf156;&#xf249;&#xf145;&#xf165;&#xf245;&#xf206;&#xf245;&#xf246;&#xf148;&#xf180;&#xf246;&#xf145;&#xf154;&#xf249;&#xf145;&#xf165;&#xf245;&#xf248;&#xf246;&#xf145;&#xf154;&#xf248;&#xf145;&#xf155;&#xf249;&#xf145;&#xf165;&#xf245;&#xf245;&#xf246;&#xf153;&#xf246;&#xf147;&#xf246;&#xf145;&#xf156;&#xf249;&#xf145;&#xf165;&#xf245;&#xf205;&#xf245;&#xf246;&#xf145;&#xf154;&#xf249;&#xf145;&#xf165;&#xf245;&#xf246;&#xf154;&#xf245;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1606
  },
  {
    "role": "code",
    "lines": [
      "equal (vector 1 2 3 4) | merge-list (vector 1 2) (vector 3 4);"
    ],
    "preprocessed": "equal (vector 1 2 3 4) | merge-list (vector 1 2) (vector 3 4);",
    "dt": false,
    "parse": [
      "equal",
      [
        "vector",
        "1",
        "2",
        "3",
        "4"
      ],
      [
        -1,
        "merge-list",
        [
          "vector",
          "1",
          "2"
        ],
        [
          "vector",
          "3",
          "4"
        ]
      ]
    ],
    "code": "121000321210000302130210302113021003302312100111100321210000302130210332121000030211302100332233",
    "spider": "&#xf14c;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf148;&#xf180;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 1607
  },
  {
    "role": "code",
    "lines": [
      "equal (vector 1 2 3 4) | merge-lists (vector (vector 1 2) (vector 3) (vector 4));"
    ],
    "preprocessed": "equal (vector 1 2 3 4) | merge-lists (vector (vector 1 2) (vector 3) (vector 4));",
    "dt": false,
    "parse": [
      "equal",
      [
        "vector",
        "1",
        "2",
        "3",
        "4"
      ],
      [
        -1,
        "merge-lists",
        [
          "vector",
          [
            "vector",
            "1",
            "2"
          ],
          [
            "vector",
            "3"
          ],
          [
            "vector",
            "4"
          ]
        ]
      ]
    ],
    "code": "12100032121000030213021030211302100330231210011110132121000032121000030213021033212100003021133212100003021003332233",
    "spider": "&#xf14c;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf148;&#xf181;&#xf246;&#xf154;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1608
  },
  {
    "role": "comment",
    "lines": [
      "# helper for pairing"
    ],
    "stanza": 1609
  },
  {
    "role": "code",
    "lines": [
      "define prefix | ? x | ? lst | map",
      "  (? y (vector (x) (y)))",
      "  $lst;"
    ],
    "preprocessed": "define prefix | ? x | ? lst | map\n  (? y (vector (x) (y)))\n  $lst;",
    "dt": true,
    "parse": [
      "define",
      "prefix",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "lst",
          [
            -1,
            "map",
            [
              "?",
              "y",
              [
                "vector",
                [
                  "x"
                ],
                [
                  "y"
                ]
              ]
            ],
            [
              -2,
              "lst"
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210011111030231211003121010013023121100312110000130231210110013212110031210000013212100003212101001332121000001333312312110000132233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf182;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf165;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf246;&#xf154;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf145;&#xf245;&#xf245;&#xf245;&#xf249;&#xf145;&#xf165;&#xf24b;",
    "stanza": 1610
  },
  {
    "role": "code",
    "lines": [
      "equal (vector (vector 1 10) (vector 1 11))",
      "       (prefix 1 | vector 10 11);"
    ],
    "preprocessed": "equal (vector (vector 1 10) (vector 1 11))\n       (prefix 1 | vector 10 11);",
    "dt": false,
    "parse": [
      "equal",
      [
        "vector",
        [
          "vector",
          "1",
          "10"
        ],
        [
          "vector",
          "1",
          "11"
        ]
      ],
      [
        "prefix",
        "1",
        [
          -1,
          "vector",
          "10",
          "11"
        ]
      ]
    ],
    "code": "1210003212100003212100003021302101033212100003021302101133321210011111030213023121000030210103021011332233",
    "spider": "&#xf14c;&#xf246;&#xf154;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf20e;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf20f;&#xf245;&#xf245;&#xf246;&#xf148;&#xf182;&#xf24a;&#xf205;&#xf248;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf20f;&#xf245;&#xf24b;",
    "stanza": 1611
  },
  {
    "role": "comment",
    "lines": [
      "# need a way to take product of domains"
    ],
    "stanza": 1612
  },
  {
    "role": "code",
    "lines": [
      "define pairing | ? lst1 | ? lst2 |",
      "   if (= 0 | list-length $lst1) (vector) |",
      "   merge-list (prefix (head $lst1) $lst2)",
      "          (pairing (tail $lst1) $lst2);"
    ],
    "preprocessed": "define pairing | ? lst1 | ? lst2 |\n   if (= 0 | list-length $lst1) (vector) |\n   merge-list (prefix (head $lst1) $lst2)\n          (pairing (tail $lst1) $lst2);",
    "dt": true,
    "parse": [
      "define",
      "pairing",
      [
        -1,
        "?",
        "lst1",
        [
          -1,
          "?",
          "lst2",
          [
            -1,
            "if",
            [
              "=",
              "0",
              [
                -1,
                "list-length",
                [
                  -2,
                  "lst1"
                ]
              ]
            ],
            [
              "vector"
            ],
            [
              -1,
              "merge-list",
              [
                "prefix",
                [
                  "head",
                  [
                    -2,
                    "lst1"
                  ]
                ],
                [
                  -2,
                  "lst2"
                ]
              ],
              [
                "pairing",
                [
                  "tail",
                  [
                    -2,
                    "lst1"
                  ]
                ],
                [
                  -2,
                  "lst2"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312100111111302312110031210111000302312110031210111001302312111132121130203023121010010312312101110003321210000330231210011110032121001111103212101000031231210111000331231210111001332121001111113212101000131231210111000331231210111001332233",
    "spider": "&#xf151;&#xf24a;&#xf148;&#xf183;&#xf248;&#xf150;&#xf24a;&#xf146;&#xf17c;&#xf248;&#xf150;&#xf24a;&#xf146;&#xf17d;&#xf248;&#xf153;&#xf246;&#xf147;&#xf24a;&#xf204;&#xf248;&#xf145;&#xf156;&#xf249;&#xf146;&#xf17c;&#xf245;&#xf246;&#xf154;&#xf245;&#xf248;&#xf148;&#xf180;&#xf246;&#xf148;&#xf182;&#xf246;&#xf145;&#xf154;&#xf249;&#xf146;&#xf17c;&#xf245;&#xf249;&#xf146;&#xf17d;&#xf245;&#xf246;&#xf148;&#xf183;&#xf246;&#xf145;&#xf155;&#xf249;&#xf146;&#xf17c;&#xf245;&#xf249;&#xf146;&#xf17d;&#xf245;&#xf24b;",
    "stanza": 1613
  },
  {
    "role": "code",
    "lines": [
      "equal (vector (vector 1 10) (vector 1 11) (vector 2 10) (vector 2 11)) |",
      "   pairing (vector 1 2) (vector 10 11);"
    ],
    "preprocessed": "equal (vector (vector 1 10) (vector 1 11) (vector 2 10) (vector 2 11)) |\n   pairing (vector 1 2) (vector 10 11);",
    "dt": false,
    "parse": [
      "equal",
      [
        "vector",
        [
          "vector",
          "1",
          "10"
        ],
        [
          "vector",
          "1",
          "11"
        ],
        [
          "vector",
          "2",
          "10"
        ],
        [
          "vector",
          "2",
          "11"
        ]
      ],
      [
        -1,
        "pairing",
        [
          "vector",
          "1",
          "2"
        ],
        [
          "vector",
          "10",
          "11"
        ]
      ]
    ],
    "code": "121000321210000321210000302130210103321210000302130210113321210000302103021010332121000030210302101133302312100111111321210000302130210332121000030210103021011332233",
    "spider": "&#xf14c;&#xf246;&#xf154;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf20e;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf20f;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf20e;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf20f;&#xf245;&#xf245;&#xf248;&#xf148;&#xf183;&#xf246;&#xf154;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf20f;&#xf245;&#xf24b;",
    "stanza": 1614
  },
  {
    "role": "comment",
    "lines": [
      "# need a way to make counting sets",
      "# TODO: is this like range?"
    ],
    "stanza": 1615
  },
  {
    "role": "code",
    "lines": [
      "define count | ? lo | ? hi |",
      "  if (> $lo $hi) (vector) |",
      "  prepend $lo | count (+ $lo 1) $hi;"
    ],
    "preprocessed": "define count | ? lo | ? hi |\n  if (> $lo $hi) (vector) |\n  prepend $lo | count (+ $lo 1) $hi;",
    "dt": true,
    "parse": [
      "define",
      "count",
      [
        -1,
        "?",
        "lo",
        [
          -1,
          "?",
          "hi",
          [
            -1,
            "if",
            [
              ">",
              [
                -2,
                "lo"
              ],
              [
                -2,
                "hi"
              ]
            ],
            [
              "vector"
            ],
            [
              -1,
              "prepend",
              [
                -2,
                "lo"
              ],
              [
                -1,
                "count",
                [
                  "+",
                  [
                    -2,
                    "lo"
                  ],
                  "1"
                ],
                [
                  -2,
                  "hi"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210110101302312110031210100000030231211003121010000013023121111321210031231210100000031231210100000133212100003302312101010131231210100000030231210110101321210103123121010000003021331231210100000132233",
    "spider": "&#xf151;&#xf24a;&#xf146;&#xf179;&#xf248;&#xf150;&#xf24a;&#xf149;&#xf144;&#xf248;&#xf150;&#xf24a;&#xf149;&#xf145;&#xf248;&#xf153;&#xf246;&#xf148;&#xf249;&#xf149;&#xf144;&#xf249;&#xf149;&#xf145;&#xf245;&#xf246;&#xf154;&#xf245;&#xf248;&#xf145;&#xf159;&#xf249;&#xf149;&#xf144;&#xf248;&#xf146;&#xf179;&#xf246;&#xf14e;&#xf249;&#xf149;&#xf144;&#xf24a;&#xf205;&#xf245;&#xf249;&#xf149;&#xf145;&#xf24b;",
    "stanza": 1616
  },
  {
    "role": "code",
    "lines": [
      "equal (vector 0 1 2 3 4) (count 0 4);"
    ],
    "preprocessed": "equal (vector 0 1 2 3 4) (count 0 4);",
    "dt": false,
    "parse": [
      "equal",
      [
        "vector",
        "0",
        "1",
        "2",
        "3",
        "4"
      ],
      [
        "count",
        "0",
        "4"
      ]
    ],
    "code": "12100032121000030203021302103021130210033212101101013020302100332233",
    "spider": "&#xf14c;&#xf246;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24a;&#xf206;&#xf24a;&#xf207;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf146;&#xf179;&#xf24a;&#xf204;&#xf24a;&#xf208;&#xf245;&#xf24b;",
    "stanza": 1617
  },
  {
    "role": "comment",
    "lines": [
      "# given an image of a circuit, extract a model.",
      "# wire elements are centered on multiples of 8"
    ],
    "stanza": 1618
  },
  {
    "role": "comment",
    "lines": [
      "# individual element..."
    ],
    "stanza": 1619
  },
  {
    "role": "code",
    "lines": [
      "define distill-element |",
      "   ? image | ? xlogic | ? ylogic | ? xmid | ? ymid |",
      "   if (not | image-get $image $ymid $xmid) (vector) |",
      "   assign vert (image-get $image (+ $ymid 4) $xmid) |",
      "   assign dx (if $vert 0 1) |",
      "   assign dy (if $vert 1 0) |",
      "   assign pos (image-get $image",
      "                 (+ $ymid | + (* 4 $dy) (* 2 $dx))",
      "                 (+ $xmid | - (* 4 $dx) (* 2 $dy))) |",
      "   assign sgn (if $pos 1 (minus 1)) |",
      "   assign dx (* $sgn $dx) |",
      "   assign dy (* $sgn $dy) |",
      "   assign active (image-get $image (+ $ymid $dx) (- $xmid $dy)) |",
      "     vector | vector",
      "       (- $xlogic $dx) ",
      "       (- $ylogic $dy)",
      "       (+ $xlogic $dx)",
      "       (+ $ylogic $dy)",
      "       $active;"
    ],
    "preprocessed": "define distill-element |\n   ? image | ? xlogic | ? ylogic | ? xmid | ? ymid |\n   if (not | image-get $image $ymid $xmid) (vector) |\n   assign vert (image-get $image (+ $ymid 4) $xmid) |\n   assign dx (if $vert 0 1) |\n   assign dy (if $vert 1 0) |\n   assign pos (image-get $image\n                 (+ $ymid | + (* 4 $dy) (* 2 $dx))\n                 (+ $xmid | - (* 4 $dx) (* 2 $dy))) |\n   assign sgn (if $pos 1 (minus 1)) |\n   assign dx (* $sgn $dx) |\n   assign dy (* $sgn $dy) |\n   assign active (image-get $image (+ $ymid $dx) (- $xmid $dy)) |\n     vector | vector\n       (- $xlogic $dx) \n       (- $ylogic $dy)\n       (+ $xlogic $dx)\n       (+ $ylogic $dy)\n       $active;",
    "dt": true,
    "parse": [
      "define",
      "distill-element",
      [
        -1,
        "?",
        "image",
        [
          -1,
          "?",
          "xlogic",
          [
            -1,
            "?",
            "ylogic",
            [
              -1,
              "?",
              "xmid",
              [
                -1,
                "?",
                "ymid",
                [
                  -1,
                  "if",
                  [
                    "not",
                    [
                      -1,
                      "image-get",
                      [
                        -2,
                        "image"
                      ],
                      [
                        -2,
                        "ymid"
                      ],
                      [
                        -2,
                        "xmid"
                      ]
                    ]
                  ],
                  [
                    "vector"
                  ],
                  [
                    -1,
                    "assign",
                    "vert",
                    [
                      "image-get",
                      [
                        -2,
                        "image"
                      ],
                      [
                        "+",
                        [
                          -2,
                          "ymid"
                        ],
                        "4"
                      ],
                      [
                        -2,
                        "xmid"
                      ]
                    ],
                    [
                      -1,
                      "assign",
                      "dx",
                      [
                        "if",
                        [
                          -2,
                          "vert"
                        ],
                        "0",
                        "1"
                      ],
                      [
                        -1,
                        "assign",
                        "dy",
                        [
                          "if",
                          [
                            -2,
                            "vert"
                          ],
                          "1",
                          "0"
                        ],
                        [
                          -1,
                          "assign",
                          "pos",
                          [
                            "image-get",
                            [
                              -2,
                              "image"
                            ],
                            [
                              "+",
                              [
                                -2,
                                "ymid"
                              ],
                              [
                                -1,
                                "+",
                                [
                                  "*",
                                  "4",
                                  [
                                    -2,
                                    "dy"
                                  ]
                                ],
                                [
                                  "*",
                                  "2",
                                  [
                                    -2,
                                    "dx"
                                  ]
                                ]
                              ]
                            ],
                            [
                              "+",
                              [
                                -2,
                                "xmid"
                              ],
                              [
                                -1,
                                "-",
                                [
                                  "*",
                                  "4",
                                  [
                                    -2,
                                    "dx"
                                  ]
                                ],
                                [
                                  "*",
                                  "2",
                                  [
                                    -2,
                                    "dy"
                                  ]
                                ]
                              ]
                            ]
                          ],
                          [
                            -1,
                            "assign",
                            "sgn",
                            [
                              "if",
                              [
                                -2,
                                "pos"
                              ],
                              "1",
                              [
                                "minus",
                                "1"
                              ]
                            ],
                            [
                              -1,
                              "assign",
                              "dx",
                              [
                                "*",
                                [
                                  -2,
                                  "sgn"
                                ],
                                [
                                  -2,
                                  "dx"
                                ]
                              ],
                              [
                                -1,
                                "assign",
                                "dy",
                                [
                                  "*",
                                  [
                                    -2,
                                    "sgn"
                                  ],
                                  [
                                    -2,
                                    "dy"
                                  ]
                                ],
                                [
                                  -1,
                                  "assign",
                                  "active",
                                  [
                                    "image-get",
                                    [
                                      -2,
                                      "image"
                                    ],
                                    [
                                      "+",
                                      [
                                        -2,
                                        "ymid"
                                      ],
                                      [
                                        -2,
                                        "dx"
                                      ]
                                    ],
                                    [
                                      "-",
                                      [
                                        -2,
                                        "xmid"
                                      ],
                                      [
                                        -2,
                                        "dy"
                                      ]
                                    ]
                                  ],
                                  [
                                    -1,
                                    "vector",
                                    [
                                      -1,
                                      "vector",
                                      [
                                        "-",
                                        [
                                          -2,
                                          "xlogic"
                                        ],
                                        [
                                          -2,
                                          "dx"
                                        ]
                                      ],
                                      [
                                        "-",
                                        [
                                          -2,
                                          "ylogic"
                                        ],
                                        [
                                          -2,
                                          "dy"
                                        ]
                                      ],
                                      [
                                        "+",
                                        [
                                          -2,
                                          "xlogic"
                                        ],
                                        [
                                          -2,
                                          "dx"
                                        ]
                                      ],
                                      [
                                        "+",
                                        [
                                          -2,
                                          "ylogic"
                                        ],
                                        [
                                          -2,
                                          "dy"
                                        ]
                                      ],
                                      [
                                        -2,
                                        "active"
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210100001030231211003121001101013023121100312101000011302312110031210100010030231211003121010001013023121100312101000110302312111132121013023121001101003123121001101013123121010001103123121010001013321210000330231211103121010001113212100110100312312100110101321210103123121010001103021003312312101000101330231211103121010010003212111131231210100011130203021330231211103121010010013212111131231210100011130213020330231211103121010010103212100110100312312100110101321210103123121010001103023121010321210013021003123121010010013321210013021031231210100100033321210103123121010001013023121011321210013021003123121010010003321210013021031231210100100133330231211103121010010113212111131231210100101030213212110010030213330231211103121010010003212100131231210100101131231210100100033023121110312101001001321210013123121010010113123121010010013302312111031210100110032121001101003123121001101013212101031231210100011031231210100100033212101131231210100010131231210100100133302312100003023121000032121011312312101000011312312101001000332121011312312101000100312312101001001332121010312312101000011312312101001000332121010312312101000100312312101001001331231210100110032233",
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf146;&#xf248;&#xf150;&#xf24a;&#xf148;&#xf179;&#xf248;&#xf150;&#xf24a;&#xf149;&#xf147;&#xf248;&#xf150;&#xf24a;&#xf149;&#xf148;&#xf248;&#xf150;&#xf24a;&#xf149;&#xf149;&#xf248;&#xf150;&#xf24a;&#xf149;&#xf14a;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf148;&#xf178;&#xf249;&#xf148;&#xf179;&#xf249;&#xf149;&#xf14a;&#xf249;&#xf149;&#xf149;&#xf245;&#xf246;&#xf154;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf149;&#xf14b;&#xf246;&#xf148;&#xf178;&#xf249;&#xf148;&#xf179;&#xf246;&#xf14e;&#xf249;&#xf149;&#xf14a;&#xf24a;&#xf208;&#xf245;&#xf249;&#xf149;&#xf149;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf149;&#xf14c;&#xf246;&#xf153;&#xf249;&#xf149;&#xf14b;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf149;&#xf14d;&#xf246;&#xf153;&#xf249;&#xf149;&#xf14b;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf149;&#xf14e;&#xf246;&#xf148;&#xf178;&#xf249;&#xf148;&#xf179;&#xf246;&#xf14e;&#xf249;&#xf149;&#xf14a;&#xf248;&#xf14e;&#xf246;&#xf14d;&#xf24a;&#xf208;&#xf249;&#xf149;&#xf14d;&#xf245;&#xf246;&#xf14d;&#xf24a;&#xf206;&#xf249;&#xf149;&#xf14c;&#xf245;&#xf245;&#xf246;&#xf14e;&#xf249;&#xf149;&#xf149;&#xf248;&#xf14f;&#xf246;&#xf14d;&#xf24a;&#xf208;&#xf249;&#xf149;&#xf14c;&#xf245;&#xf246;&#xf14d;&#xf24a;&#xf206;&#xf249;&#xf149;&#xf14d;&#xf245;&#xf245;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf149;&#xf14f;&#xf246;&#xf153;&#xf249;&#xf149;&#xf14e;&#xf24a;&#xf205;&#xf246;&#xf145;&#xf168;&#xf24a;&#xf205;&#xf245;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf149;&#xf14c;&#xf246;&#xf14d;&#xf249;&#xf149;&#xf14f;&#xf249;&#xf149;&#xf14c;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf149;&#xf14d;&#xf246;&#xf14d;&#xf249;&#xf149;&#xf14f;&#xf249;&#xf149;&#xf14d;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf149;&#xf150;&#xf246;&#xf148;&#xf178;&#xf249;&#xf148;&#xf179;&#xf246;&#xf14e;&#xf249;&#xf149;&#xf14a;&#xf249;&#xf149;&#xf14c;&#xf245;&#xf246;&#xf14f;&#xf249;&#xf149;&#xf149;&#xf249;&#xf149;&#xf14d;&#xf245;&#xf245;&#xf248;&#xf154;&#xf248;&#xf154;&#xf246;&#xf14f;&#xf249;&#xf149;&#xf147;&#xf249;&#xf149;&#xf14c;&#xf245;&#xf246;&#xf14f;&#xf249;&#xf149;&#xf148;&#xf249;&#xf149;&#xf14d;&#xf245;&#xf246;&#xf14e;&#xf249;&#xf149;&#xf147;&#xf249;&#xf149;&#xf14c;&#xf245;&#xf246;&#xf14e;&#xf249;&#xf149;&#xf148;&#xf249;&#xf149;&#xf14d;&#xf245;&#xf249;&#xf149;&#xf150;&#xf24b;",
    "stanza": 1620
  },
  {
    "role": "comment",
    "lines": [
      "# full circuit..."
    ],
    "stanza": 1621
  },
  {
    "role": "code",
    "lines": [
      "intro distill-circuit;"
    ],
    "preprocessed": "intro distill-circuit;",
    "dt": false,
    "parse": [
      "intro",
      "distill-circuit"
    ],
    "code": "121001031210100110132233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf151;&#xf24b;",
    "stanza": 1622
  },
  {
    "role": "code",
    "lines": [
      "define distill-circuit | ? image |",
      "  assign h (div (image-height $image) 8) |",
      "  assign w (div (image-width $image) 8)  |",
      "  merge-lists |",
      "    map (? v |",
      "       assign xlogic (list-ref $v 0) |",
      "       assign ylogic (list-ref $v 1) |",
      "       assign xmid (* 8 $xlogic) |",
      "       assign ymid (* 8 $ylogic) |",
      "       distill-element $image $xlogic $ylogic $xmid $ymid)",
      "    (pairing (count 1 (- $w 1))",
      "         (count 1 (- $h 1)));"
    ],
    "preprocessed": "define distill-circuit | ? image |\n  assign h (div (image-height $image) 8) |\n  assign w (div (image-width $image) 8)  |\n  merge-lists |\n    map (? v |\n       assign xlogic (list-ref $v 0) |\n       assign ylogic (list-ref $v 1) |\n       assign xmid (* 8 $xlogic) |\n       assign ymid (* 8 $ylogic) |\n       distill-element $image $xlogic $ylogic $xmid $ymid)\n    (pairing (count 1 (- $w 1))\n         (count 1 (- $h 1)));",
    "dt": true,
    "parse": [
      "define",
      "distill-circuit",
      [
        -1,
        "?",
        "image",
        [
          -1,
          "assign",
          "h",
          [
            "div",
            [
              "image-height",
              [
                -2,
                "image"
              ]
            ],
            "8"
          ],
          [
            -1,
            "assign",
            "w",
            [
              "div",
              [
                "image-width",
                [
                  -2,
                  "image"
                ]
              ],
              "8"
            ],
            [
              -1,
              "merge-lists",
              [
                -1,
                "map",
                [
                  "?",
                  "v",
                  [
                    -1,
                    "assign",
                    "xlogic",
                    [
                      "list-ref",
                      [
                        -2,
                        "v"
                      ],
                      "0"
                    ],
                    [
                      -1,
                      "assign",
                      "ylogic",
                      [
                        "list-ref",
                        [
                          -2,
                          "v"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "assign",
                        "xmid",
                        [
                          "*",
                          "8",
                          [
                            -2,
                            "xlogic"
                          ]
                        ],
                        [
                          -1,
                          "assign",
                          "ymid",
                          [
                            "*",
                            "8",
                            [
                              -2,
                              "ylogic"
                            ]
                          ],
                          [
                            -1,
                            "distill-element",
                            [
                              -2,
                              "image"
                            ],
                            [
                              -2,
                              "xlogic"
                            ],
                            [
                              -2,
                              "ylogic"
                            ],
                            [
                              -2,
                              "xmid"
                            ],
                            [
                              -2,
                              "ymid"
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ],
                [
                  "pairing",
                  [
                    "count",
                    "1",
                    [
                      "-",
                      [
                        -2,
                        "w"
                      ],
                      "1"
                    ]
                  ],
                  [
                    "count",
                    "1",
                    [
                      "-",
                      [
                        -2,
                        "h"
                      ],
                      "1"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf151;&#xf248;&#xf150;&#xf24a;&#xf148;&#xf179;&#xf248;&#xf152;&#xf24a;&#xf148;&#xf176;&#xf246;&#xf166;&#xf246;&#xf148;&#xf17d;&#xf249;&#xf148;&#xf179;&#xf245;&#xf20c;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf148;&#xf177;&#xf246;&#xf166;&#xf246;&#xf148;&#xf17e;&#xf249;&#xf148;&#xf179;&#xf245;&#xf20c;&#xf245;&#xf248;&#xf148;&#xf181;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf179;&#xf248;&#xf152;&#xf24a;&#xf149;&#xf147;&#xf246;&#xf145;&#xf157;&#xf249;&#xf179;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf149;&#xf148;&#xf246;&#xf145;&#xf157;&#xf249;&#xf179;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf149;&#xf149;&#xf246;&#xf14d;&#xf24a;&#xf20c;&#xf249;&#xf149;&#xf147;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf149;&#xf14a;&#xf246;&#xf14d;&#xf24a;&#xf20c;&#xf249;&#xf149;&#xf148;&#xf245;&#xf248;&#xf149;&#xf146;&#xf249;&#xf148;&#xf179;&#xf249;&#xf149;&#xf147;&#xf249;&#xf149;&#xf148;&#xf249;&#xf149;&#xf149;&#xf249;&#xf149;&#xf14a;&#xf245;&#xf246;&#xf148;&#xf183;&#xf246;&#xf146;&#xf179;&#xf24a;&#xf205;&#xf246;&#xf14f;&#xf249;&#xf148;&#xf177;&#xf24a;&#xf205;&#xf245;&#xf245;&#xf246;&#xf146;&#xf179;&#xf24a;&#xf205;&#xf246;&#xf14f;&#xf249;&#xf148;&#xf176;&#xf24a;&#xf205;&#xf245;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1623
  },
  {
    "role": "file",
    "lines": [
      "== COS_NOT =="
    ],
    "stanza": 1624
  },
  {
    "role": "comment",
    "lines": [
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_not circuit",
    "section_category": "GATE",
    "section_index": 45,
    "stanza": 1625
  },
  {
    "role": "code",
    "lines": [
      "intro cos_not_gate;"
    ],
    "preprocessed": "intro cos_not_gate;",
    "dt": false,
    "parse": [
      "intro",
      "cos_not_gate"
    ],
    "code": "121001031210100111032233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf152;&#xf24b;",
    "stanza": 1626
  },
  {
    "role": "code",
    "lines": [
      "intro cos_not_image;"
    ],
    "preprocessed": "intro cos_not_image;",
    "dt": false,
    "parse": [
      "intro",
      "cos_not_image"
    ],
    "code": "121001031210100111132233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf153;&#xf24b;",
    "stanza": 1627
  },
  {
    "role": "code",
    "lines": [
      "define cos_not_gate | vector ",
      "  (vector 0 6 2 6 $true)",
      "  (vector 2 6 4 6 $true)",
      "  (vector 4 6 6 6 $true)",
      "  (vector 6 6 8 6 $true)",
      "  (vector 8 4 8 6 $true)",
      "  (vector 8 6 8 8 $false)",
      "  (vector 8 8 10 8 $false)",
      "  (vector 10 8 12 8 $false)",
      "  (vector 12 8 12 6 $false)",
      "  (vector 12 6 14 6 $false)",
      "  (vector 14 6 16 6 $false)",
      "  (vector 16 6 18 6 $false)",
      "  (vector 18 6 20 6 $false);"
    ],
    "preprocessed": "define cos_not_gate | vector \n  (vector 0 6 2 6 $true)\n  (vector 2 6 4 6 $true)\n  (vector 4 6 6 6 $true)\n  (vector 6 6 8 6 $true)\n  (vector 8 4 8 6 $true)\n  (vector 8 6 8 8 $false)\n  (vector 8 8 10 8 $false)\n  (vector 10 8 12 8 $false)\n  (vector 12 8 12 6 $false)\n  (vector 12 6 14 6 $false)\n  (vector 14 6 16 6 $false)\n  (vector 16 6 18 6 $false)\n  (vector 18 6 20 6 $false);",
    "dt": true,
    "parse": [
      "define",
      "cos_not_gate",
      [
        -1,
        "vector",
        [
          "vector",
          "0",
          "6",
          "2",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "6",
          "4",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "6",
          "6",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "6",
          "8",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "4",
          "8",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "6",
          "8",
          "8",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "8",
          "8",
          "10",
          "8",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "8",
          "12",
          "8",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "8",
          "12",
          "6",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "6",
          "14",
          "6",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "14",
          "6",
          "16",
          "6",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "16",
          "6",
          "18",
          "6",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "18",
          "6",
          "20",
          "6",
          [
            -2,
            "false"
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf152;&#xf248;&#xf154;&#xf246;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf208;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf24a;&#xf20c;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf20c;&#xf24a;&#xf20e;&#xf24a;&#xf20c;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf20c;&#xf24a;&#xf210;&#xf24a;&#xf20c;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf20c;&#xf24a;&#xf210;&#xf24a;&#xf20a;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf20a;&#xf24a;&#xf212;&#xf24a;&#xf20a;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf212;&#xf24a;&#xf20a;&#xf24a;&#xf214;&#xf24a;&#xf20a;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf214;&#xf24a;&#xf20a;&#xf24a;&#xf216;&#xf24a;&#xf20a;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf216;&#xf24a;&#xf20a;&#xf24a;&#xf218;&#xf24a;&#xf20a;&#xf249;&#xf144;&#xf245;&#xf24b;",
    "stanza": 1628
  },
  {
    "role": "code",
    "lines": [
      "define cos_not_image | make-image 109 169 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:.............................................................:::::.....................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:...........:...............:...............:...............:...:...........................................:...............:...............:...............:...........:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..........:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..........:)",
      "  (:...........:...............:...............:...............:...................................:...........:...............:...............:...............:...........:)",
      "  (:...............................................................:..............................:::......................................................................:)",
      "  (:...............................................................:.............................:::::.....................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:.............................................................:::::.............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:...............................................................:...........:...............:...........................................................................:)",
      "  (:...........................................................................::..............::..........................................................................:)",
      "  (:..................................................................::::::::::::....::::::::::::.........................................................................:)",
      "  (:...........................................................................::..............::..........................................................................:)",
      "  (:...........................................................................:...............:...........................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "preprocessed": "define cos_not_image | make-image 109 169 | vector \n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:.............................................................:::::.....................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:...........:...............:...............:...............:...:...........................................:...............:...............:...............:...........:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..........:)\n  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..........:)\n  (:...........:...............:...............:...............:...................................:...........:...............:...............:...............:...........:)\n  (:...............................................................:..............................:::......................................................................:)\n  (:...............................................................:.............................:::::.....................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:.............................................................:::::.............................:.......................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:...............................................................:...........:...............:...........................................................................:)\n  (:...........................................................................::..............::..........................................................................:)\n  (:..................................................................::::::::::::....::::::::::::.........................................................................:)\n  (:...........................................................................::..............::..........................................................................:)\n  (:...........................................................................:...............:...........................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);",
    "dt": true,
    "parse": [
      "define",
      "cos_not_image",
      [
        -1,
        "make-image",
        "109",
        "169",
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":.............................................................:::::.....................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...:...........................................:...............:...............:...............:...........:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..........:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....::::::::::::....................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..........:"
          ],
          [
            ":...........:...............:...............:...............:...................................:...........:...............:...............:...............:...........:"
          ],
          [
            ":...............................................................:..............................:::......................................................................:"
          ],
          [
            ":...............................................................:.............................:::::.....................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":.............................................................:::::.............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":...............................................................:...........:...............:...........................................................................:"
          ],
          [
            ":...........................................................................::..............::..........................................................................:"
          ],
          [
            ":..................................................................::::::::::::....::::::::::::.........................................................................:"
          ],
          [
            ":...........................................................................::..............::..........................................................................:"
          ],
          [
            ":...........................................................................:...............:...........................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf153;&#xf248;&#xf148;&#xf175;&#xf24a;&#xf205;&#xf231;&#xf24a;&#xf206;&#xf22d;&#xf248;&#xf154;&#xf246;&#xf205;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf223;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf224;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf205;&#xf224;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf224;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf205;&#xf224;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf20b;&#xf234;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf223;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf245;&#xf24b;",
    "stanza": 1629
  },
  {
    "role": "code",
    "lines": [
      "equal $cos_not_gate | distill-circuit $cos_not_image;"
    ],
    "preprocessed": "equal $cos_not_gate | distill-circuit $cos_not_image;",
    "dt": false,
    "parse": [
      "equal",
      [
        -2,
        "cos_not_gate"
      ],
      [
        -1,
        "distill-circuit",
        [
          -2,
          "cos_not_image"
        ]
      ]
    ],
    "code": "12100031231210100111030231210100110131231210100111132233",
    "spider": "&#xf14c;&#xf249;&#xf149;&#xf152;&#xf248;&#xf149;&#xf151;&#xf249;&#xf149;&#xf153;&#xf24b;",
    "stanza": 1630
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_NOT.gate",
      "5 6 1 0 1",
      "3 6 1 0 1",
      "1 6 1 0 1",
      "19 6 1 0 0",
      "17 6 1 0 0",
      "15 6 1 0 0",
      "13 6 1 0 0",
      "12 7 0 -1 0",
      "8 5 0 1 1",
      "11 8 1 0 0",
      "7 6 1 0 1",
      "8 7 0 1 0",
      "9 8 1 0 0"
    ],
    "thumbnail": "COS_NOT.gif",
    "page": "COS_NOT.html",
    "stanza": 1631
  },
  {
    "role": "file",
    "lines": [
      "== COS_AND =="
    ],
    "stanza": 1632
  },
  {
    "role": "comment",
    "lines": [
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_and circuit",
    "section_category": "GATE",
    "section_index": 46,
    "stanza": 1633
  },
  {
    "role": "code",
    "lines": [
      "intro cos_and_gate;"
    ],
    "preprocessed": "intro cos_and_gate;",
    "dt": false,
    "parse": [
      "intro",
      "cos_and_gate"
    ],
    "code": "121001031210101000032233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf154;&#xf24b;",
    "stanza": 1634
  },
  {
    "role": "code",
    "lines": [
      "intro cos_and_image;"
    ],
    "preprocessed": "intro cos_and_image;",
    "dt": false,
    "parse": [
      "intro",
      "cos_and_image"
    ],
    "code": "121001031210101000132233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf155;&#xf24b;",
    "stanza": 1635
  },
  {
    "role": "code",
    "lines": [
      "define cos_and_gate | vector ",
      "  (vector 0 2 2 2 $true)",
      "  (vector 0 8 2 8 $true)",
      "  (vector 2 2 4 2 $true)",
      "  (vector 2 4 4 4 $true)",
      "  (vector 2 6 4 6 $true)",
      "  (vector 2 8 4 8 $true)",
      "  (vector 4 2 4 4 $true)",
      "  (vector 4 8 4 6 $true)",
      "  (vector 4 4 6 4 $false)",
      "  (vector 4 6 6 6 $false)",
      "  (vector 6 4 8 4 $false)",
      "  (vector 6 6 8 6 $false)",
      "  (vector 8 4 10 4 $false)",
      "  (vector 8 6 10 6 $false)",
      "  (vector 10 2 10 4 $true)",
      "  (vector 10 4 10 6 $true)",
      "  (vector 10 6 10 8 $true)",
      "  (vector 10 8 12 8 $true)",
      "  (vector 12 8 14 8 $true)",
      "  (vector 14 8 16 8 $true)",
      "  (vector 16 8 18 8 $true);"
    ],
    "preprocessed": "define cos_and_gate | vector \n  (vector 0 2 2 2 $true)\n  (vector 0 8 2 8 $true)\n  (vector 2 2 4 2 $true)\n  (vector 2 4 4 4 $true)\n  (vector 2 6 4 6 $true)\n  (vector 2 8 4 8 $true)\n  (vector 4 2 4 4 $true)\n  (vector 4 8 4 6 $true)\n  (vector 4 4 6 4 $false)\n  (vector 4 6 6 6 $false)\n  (vector 6 4 8 4 $false)\n  (vector 6 6 8 6 $false)\n  (vector 8 4 10 4 $false)\n  (vector 8 6 10 6 $false)\n  (vector 10 2 10 4 $true)\n  (vector 10 4 10 6 $true)\n  (vector 10 6 10 8 $true)\n  (vector 10 8 12 8 $true)\n  (vector 12 8 14 8 $true)\n  (vector 14 8 16 8 $true)\n  (vector 16 8 18 8 $true);",
    "dt": true,
    "parse": [
      "define",
      "cos_and_gate",
      [
        -1,
        "vector",
        [
          "vector",
          "0",
          "2",
          "2",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "0",
          "8",
          "2",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "2",
          "4",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "4",
          "4",
          "4",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "6",
          "4",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "8",
          "4",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "2",
          "4",
          "4",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "8",
          "4",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "4",
          "6",
          "4",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "4",
          "6",
          "6",
          "6",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "6",
          "4",
          "8",
          "4",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "6",
          "6",
          "8",
          "6",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "8",
          "4",
          "10",
          "4",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "8",
          "6",
          "10",
          "6",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "2",
          "10",
          "4",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "4",
          "10",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "6",
          "10",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "8",
          "12",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "8",
          "14",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "14",
          "8",
          "16",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "16",
          "8",
          "18",
          "8",
          [
            -2,
            "true"
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf154;&#xf248;&#xf154;&#xf246;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf20c;&#xf24a;&#xf206;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf24a;&#xf208;&#xf24a;&#xf208;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf20c;&#xf24a;&#xf208;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf24a;&#xf208;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf20c;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf24a;&#xf20c;&#xf24a;&#xf208;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf208;&#xf24a;&#xf20e;&#xf24a;&#xf208;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf24a;&#xf20e;&#xf24a;&#xf20a;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf206;&#xf24a;&#xf20e;&#xf24a;&#xf208;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf208;&#xf24a;&#xf20e;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf20a;&#xf24a;&#xf20e;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf20c;&#xf24a;&#xf210;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf20c;&#xf24a;&#xf212;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf212;&#xf24a;&#xf20c;&#xf24a;&#xf214;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf214;&#xf24a;&#xf20c;&#xf24a;&#xf216;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf24b;",
    "stanza": 1636
  },
  {
    "role": "code",
    "lines": [
      "define cos_and_image | make-image 88 153 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:...........:...............:...........................................................................................................................:)",
      "  (:..:::::::::::.....:::::::::::..........................................................................................................................:)",
      "  (:..::::::::::::....::::::::::::.........................................................................................................................:)",
      "  (:..:::::::::::.....:::::::::::..........................................................................................................................:)",
      "  (:...........:...............:...........................................................................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:.............................:::::...........................................:::::.....................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:...........................:...:...........:...............:...............:...:.......................................................................:)",
      "  (:..................:::::::::::..............::..............::..............::..........................................................................:)",
      "  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)",
      "  (:..................:::::::::::..............::..............::..............::..........................................................................:)",
      "  (:...........................:...............:...............:...............:...........................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:.............................................................................:::::.....................................................................:)",
      "  (:..............................................................................:::......................................................................:)",
      "  (:...........................:...............:...............:...............:...:.......................................................................:)",
      "  (:..................:::::::::::..............::..............::..............::..........................................................................:)",
      "  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)",
      "  (:..................:::::::::::..............::..............::..............::..........................................................................:)",
      "  (:...........................:...:...........:...............:...............:...........................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:.............................:::::............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:..............................:::............................................:::::.....................................................................:)",
      "  (:..............................:::.............................................:::......................................................................:)",
      "  (:...........:...............:...................................................:...........:...............:...............:...............:...........:)",
      "  (:..:::::::::::.....:::::::::::.....................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)",
      "  (:..::::::::::::....::::::::::::....................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)",
      "  (:..:::::::::::.....:::::::::::.....................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)",
      "  (:...........:...............:...............................................................:...............:...............:...............:...........:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:.......................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "preprocessed": "define cos_and_image | make-image 88 153 | vector \n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:...........:...............:...........................................................................................................................:)\n  (:..:::::::::::.....:::::::::::..........................................................................................................................:)\n  (:..::::::::::::....::::::::::::.........................................................................................................................:)\n  (:..:::::::::::.....:::::::::::..........................................................................................................................:)\n  (:...........:...............:...........................................................................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:.............................:::::...........................................:::::.....................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:...........................:...:...........:...............:...............:...:.......................................................................:)\n  (:..................:::::::::::..............::..............::..............::..........................................................................:)\n  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)\n  (:..................:::::::::::..............::..............::..............::..........................................................................:)\n  (:...........................:...............:...............:...............:...........................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:.............................................................................:::::.....................................................................:)\n  (:..............................................................................:::......................................................................:)\n  (:...........................:...............:...............:...............:...:.......................................................................:)\n  (:..................:::::::::::..............::..............::..............::..........................................................................:)\n  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)\n  (:..................:::::::::::..............::..............::..............::..........................................................................:)\n  (:...........................:...:...........:...............:...............:...........................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:.............................:::::............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:..............................:::............................................:::::.....................................................................:)\n  (:..............................:::.............................................:::......................................................................:)\n  (:...........:...............:...................................................:...........:...............:...............:...............:...........:)\n  (:..:::::::::::.....:::::::::::.....................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)\n  (:..::::::::::::....::::::::::::....................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)\n  (:..:::::::::::.....:::::::::::.....................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)\n  (:...........:...............:...............................................................:...............:...............:...............:...........:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:.......................................................................................................................................................:)\n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);",
    "dt": true,
    "parse": [
      "define",
      "cos_and_image",
      [
        -1,
        "make-image",
        "88",
        "153",
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":...........:...............:...........................................................................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::..........................................................................................................................:"
          ],
          [
            ":..::::::::::::....::::::::::::.........................................................................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::..........................................................................................................................:"
          ],
          [
            ":...........:...............:...........................................................................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":.............................:::::...........................................:::::.....................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":...........................:...:...........:...............:...............:...:.......................................................................:"
          ],
          [
            ":..................:::::::::::..............::..............::..............::..........................................................................:"
          ],
          [
            ":..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:"
          ],
          [
            ":..................:::::::::::..............::..............::..............::..........................................................................:"
          ],
          [
            ":...........................:...............:...............:...............:...........................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":.............................................................................:::::.....................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................:"
          ],
          [
            ":...........................:...............:...............:...............:...:.......................................................................:"
          ],
          [
            ":..................:::::::::::..............::..............::..............::..........................................................................:"
          ],
          [
            ":..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:"
          ],
          [
            ":..................:::::::::::..............::..............::..............::..........................................................................:"
          ],
          [
            ":...........................:...:...........:...............:...............:...........................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":.............................:::::............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":..............................:::............................................:::::.....................................................................:"
          ],
          [
            ":..............................:::.............................................:::......................................................................:"
          ],
          [
            ":...........:...............:...................................................:...........:...............:...............:...............:...........:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:"
          ],
          [
            ":..::::::::::::....::::::::::::....................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:"
          ],
          [
            ":...........:...............:...............................................................:...............:...............:...............:...........:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf155;&#xf248;&#xf148;&#xf175;&#xf24a;&#xf205;&#xf21c;&#xf24a;&#xf206;&#xf21d;&#xf248;&#xf154;&#xf246;&#xf20b;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf20b;&#xf234;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf20b;&#xf234;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf215;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf215;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf205;&#xf224;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf205;&#xf224;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf20b;&#xf234;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf215;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf205;&#xf224;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf205;&#xf224;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf215;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf20b;&#xf234;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf20b;&#xf234;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf205;&#xf245;&#xf246;&#xf208;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf205;&#xf245;&#xf246;&#xf208;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf20b;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf245;&#xf24b;",
    "stanza": 1637
  },
  {
    "role": "code",
    "lines": [
      "equal $cos_and_gate | distill-circuit $cos_and_image;"
    ],
    "preprocessed": "equal $cos_and_gate | distill-circuit $cos_and_image;",
    "dt": false,
    "parse": [
      "equal",
      [
        -2,
        "cos_and_gate"
      ],
      [
        -1,
        "distill-circuit",
        [
          -2,
          "cos_and_image"
        ]
      ]
    ],
    "code": "12100031231210101000030231210100110131231210101000132233",
    "spider": "&#xf14c;&#xf249;&#xf149;&#xf154;&#xf248;&#xf149;&#xf151;&#xf249;&#xf149;&#xf155;&#xf24b;",
    "stanza": 1638
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_AND.gate",
      "1 2 1 0 1",
      "3 4 1 0 1",
      "5 6 1 0 0",
      "3 6 1 0 1",
      "4 7 0 -1 1",
      "3 8 1 0 1",
      "1 8 1 0 1",
      "17 8 1 0 1",
      "10 3 0 1 1",
      "15 8 1 0 1",
      "9 4 1 0 0",
      "10 5 0 1 1",
      "13 8 1 0 1",
      "7 4 1 0 0",
      "9 6 1 0 0",
      "10 7 0 1 1",
      "11 8 1 0 1",
      "3 2 1 0 1",
      "4 3 0 1 1",
      "5 4 1 0 0",
      "7 6 1 0 0"
    ],
    "thumbnail": "COS_AND.gif",
    "page": "COS_AND.html",
    "stanza": 1639
  },
  {
    "role": "file",
    "lines": [
      "== COS_OR =="
    ],
    "stanza": 1640
  },
  {
    "role": "comment",
    "lines": [
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_or circuit",
    "section_category": "GATE",
    "section_index": 47,
    "stanza": 1641
  },
  {
    "role": "code",
    "lines": [
      "intro cos_or_gate;"
    ],
    "preprocessed": "intro cos_or_gate;",
    "dt": false,
    "parse": [
      "intro",
      "cos_or_gate"
    ],
    "code": "121001031210101001032233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf156;&#xf24b;",
    "stanza": 1642
  },
  {
    "role": "code",
    "lines": [
      "intro cos_or_image;"
    ],
    "preprocessed": "intro cos_or_image;",
    "dt": false,
    "parse": [
      "intro",
      "cos_or_image"
    ],
    "code": "121001031210101001132233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf157;&#xf24b;",
    "stanza": 1643
  },
  {
    "role": "code",
    "lines": [
      "define cos_or_gate | vector ",
      "  (vector 2 4 4 4 $true)",
      "  (vector 2 6 4 6 $true)",
      "  (vector 4 4 6 4 $true)",
      "  (vector 4 6 6 6 $true)",
      "  (vector 6 4 8 4 $true)",
      "  (vector 6 6 8 6 $true)",
      "  (vector 8 4 10 4 $true)",
      "  (vector 8 6 10 6 $true)",
      "  (vector 8 8 10 8 $true)",
      "  (vector 10 2 10 4 $true)",
      "  (vector 10 4 10 6 $false)",
      "  (vector 10 6 10 8 $false)",
      "  (vector 10 8 12 8 $true)",
      "  (vector 12 8 14 8 $true)",
      "  (vector 14 8 16 8 $true)",
      "  (vector 16 8 18 8 $true);"
    ],
    "preprocessed": "define cos_or_gate | vector \n  (vector 2 4 4 4 $true)\n  (vector 2 6 4 6 $true)\n  (vector 4 4 6 4 $true)\n  (vector 4 6 6 6 $true)\n  (vector 6 4 8 4 $true)\n  (vector 6 6 8 6 $true)\n  (vector 8 4 10 4 $true)\n  (vector 8 6 10 6 $true)\n  (vector 8 8 10 8 $true)\n  (vector 10 2 10 4 $true)\n  (vector 10 4 10 6 $false)\n  (vector 10 6 10 8 $false)\n  (vector 10 8 12 8 $true)\n  (vector 12 8 14 8 $true)\n  (vector 14 8 16 8 $true)\n  (vector 16 8 18 8 $true);",
    "dt": true,
    "parse": [
      "define",
      "cos_or_gate",
      [
        -1,
        "vector",
        [
          "vector",
          "2",
          "4",
          "4",
          "4",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "6",
          "4",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "4",
          "6",
          "4",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "6",
          "6",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "4",
          "8",
          "4",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "6",
          "8",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "4",
          "10",
          "4",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "6",
          "10",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "8",
          "10",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "2",
          "10",
          "4",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "4",
          "10",
          "6",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "6",
          "10",
          "8",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "8",
          "12",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "8",
          "14",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "14",
          "8",
          "16",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "16",
          "8",
          "18",
          "8",
          [
            -2,
            "true"
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf156;&#xf248;&#xf154;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf24a;&#xf208;&#xf24a;&#xf208;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf24a;&#xf20c;&#xf24a;&#xf208;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf208;&#xf24a;&#xf20e;&#xf24a;&#xf208;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf24a;&#xf20e;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf20c;&#xf24a;&#xf20e;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf206;&#xf24a;&#xf20e;&#xf24a;&#xf208;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf208;&#xf24a;&#xf20e;&#xf24a;&#xf20a;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf20a;&#xf24a;&#xf20e;&#xf24a;&#xf20c;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf20c;&#xf24a;&#xf210;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf20c;&#xf24a;&#xf212;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf212;&#xf24a;&#xf20c;&#xf24a;&#xf214;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf214;&#xf24a;&#xf20c;&#xf24a;&#xf216;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf24b;",
    "stanza": 1644
  },
  {
    "role": "code",
    "lines": [
      "define cos_or_image | make-image 93 169 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:.............................................................................:::::.....................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:...........................:...............:...............:...............:...:.......................................................................................:)",
      "  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)",
      "  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................:)",
      "  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)",
      "  (:...........................:...............:...............:...............:...........................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:.............................................................................:::::.....................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:...........................:...............:...............:...............:...:.......................................................................................:)",
      "  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)",
      "  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................:)",
      "  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)",
      "  (:...........................:...............:...............:...............:...........................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:...............................................................................:.......................................................................................:)",
      "  (:.............................................................................:::::.....................................................................................:)",
      "  (:..............................................................................:::......................................................................................:)",
      "  (:...........................................................................:...:...........:...............:...............:...............:...........................:)",
      "  (:..................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................:)",
      "  (:..................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................:)",
      "  (:..................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................:)",
      "  (:...........................................................................:...............:...............:...............:...............:...........................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "preprocessed": "define cos_or_image | make-image 93 169 | vector \n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:.............................................................................:::::.....................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:...........................:...............:...............:...............:...:.......................................................................................:)\n  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)\n  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................:)\n  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)\n  (:...........................:...............:...............:...............:...........................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:.............................................................................:::::.....................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:...........................:...............:...............:...............:...:.......................................................................................:)\n  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)\n  (:..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................:)\n  (:..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:)\n  (:...........................:...............:...............:...............:...........................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:...............................................................................:.......................................................................................:)\n  (:.............................................................................:::::.....................................................................................:)\n  (:..............................................................................:::......................................................................................:)\n  (:...........................................................................:...:...........:...............:...............:...............:...........................:)\n  (:..................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................:)\n  (:..................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................:)\n  (:..................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................:)\n  (:...........................................................................:...............:...............:...............:...............:...........................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);",
    "dt": true,
    "parse": [
      "define",
      "cos_or_image",
      [
        -1,
        "make-image",
        "93",
        "169",
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":.............................................................................:::::.....................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":...........................:...............:...............:...............:...:.......................................................................................:"
          ],
          [
            ":..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:"
          ],
          [
            ":..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................:"
          ],
          [
            ":..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:"
          ],
          [
            ":...........................:...............:...............:...............:...........................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":.............................................................................:::::.....................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":...........................:...............:...............:...............:...:.......................................................................................:"
          ],
          [
            ":..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:"
          ],
          [
            ":..................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................:"
          ],
          [
            ":..................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................:"
          ],
          [
            ":...........................:...............:...............:...............:...........................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":...............................................................................:.......................................................................................:"
          ],
          [
            ":.............................................................................:::::.....................................................................................:"
          ],
          [
            ":..............................................................................:::......................................................................................:"
          ],
          [
            ":...........................................................................:...:...........:...............:...............:...............:...........................:"
          ],
          [
            ":..................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................:"
          ],
          [
            ":..................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................:"
          ],
          [
            ":..................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................:"
          ],
          [
            ":...........................................................................:...............:...............:...............:...............:...........................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf157;&#xf248;&#xf148;&#xf175;&#xf24a;&#xf205;&#xf221;&#xf24a;&#xf206;&#xf22d;&#xf248;&#xf154;&#xf246;&#xf205;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf240;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf240;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf240;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf214;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf245;&#xf24b;",
    "stanza": 1645
  },
  {
    "role": "code",
    "lines": [
      "equal $cos_or_gate | distill-circuit $cos_or_image;"
    ],
    "preprocessed": "equal $cos_or_gate | distill-circuit $cos_or_image;",
    "dt": false,
    "parse": [
      "equal",
      [
        -2,
        "cos_or_gate"
      ],
      [
        -1,
        "distill-circuit",
        [
          -2,
          "cos_or_image"
        ]
      ]
    ],
    "code": "12100031231210101001030231210100110131231210101001132233",
    "spider": "&#xf14c;&#xf249;&#xf149;&#xf156;&#xf248;&#xf149;&#xf151;&#xf249;&#xf149;&#xf157;&#xf24b;",
    "stanza": 1646
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_OR.gate",
      "3 4 1 0 1",
      "5 6 1 0 1",
      "3 6 1 0 1",
      "17 8 1 0 1",
      "10 3 0 1 1",
      "15 8 1 0 1",
      "9 4 1 0 1",
      "10 5 0 1 0",
      "13 8 1 0 1",
      "7 4 1 0 1",
      "9 6 1 0 1",
      "10 7 0 1 0",
      "11 8 1 0 1",
      "5 4 1 0 1",
      "7 6 1 0 1",
      "9 8 1 0 1"
    ],
    "thumbnail": "COS_OR.gif",
    "page": "COS_OR.html",
    "stanza": 1647
  },
  {
    "role": "file",
    "lines": [
      "== COS_NOR =="
    ],
    "stanza": 1648
  },
  {
    "role": "comment",
    "lines": [
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_nor circuit",
    "section_category": "GATE",
    "section_index": 48,
    "stanza": 1649
  },
  {
    "role": "code",
    "lines": [
      "intro cos_nor_gate;"
    ],
    "preprocessed": "intro cos_nor_gate;",
    "dt": false,
    "parse": [
      "intro",
      "cos_nor_gate"
    ],
    "code": "121001031210101010032233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf158;&#xf24b;",
    "stanza": 1650
  },
  {
    "role": "code",
    "lines": [
      "intro cos_nor_image;"
    ],
    "preprocessed": "intro cos_nor_image;",
    "dt": false,
    "parse": [
      "intro",
      "cos_nor_image"
    ],
    "code": "121001031210101010132233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf159;&#xf24b;",
    "stanza": 1651
  },
  {
    "role": "code",
    "lines": [
      "define cos_nor_gate | vector ",
      "  (vector 0 6 2 6 $true)",
      "  (vector 0 8 2 8 $true)",
      "  (vector 2 6 4 6 $true)",
      "  (vector 2 8 4 8 $true)",
      "  (vector 4 6 6 6 $true)",
      "  (vector 4 8 6 8 $true)",
      "  (vector 6 6 8 6 $true)",
      "  (vector 6 8 8 8 $true)",
      "  (vector 8 4 8 6 $true)",
      "  (vector 8 6 8 8 $false)",
      "  (vector 8 8 8 10 $false)",
      "  (vector 8 10 10 10 $false)",
      "  (vector 10 10 12 10 $false)",
      "  (vector 12 10 14 10 $false)",
      "  (vector 14 10 16 10 $false)",
      "  (vector 16 10 18 10 $false)",
      "  (vector 18 10 20 10 $false);"
    ],
    "preprocessed": "define cos_nor_gate | vector \n  (vector 0 6 2 6 $true)\n  (vector 0 8 2 8 $true)\n  (vector 2 6 4 6 $true)\n  (vector 2 8 4 8 $true)\n  (vector 4 6 6 6 $true)\n  (vector 4 8 6 8 $true)\n  (vector 6 6 8 6 $true)\n  (vector 6 8 8 8 $true)\n  (vector 8 4 8 6 $true)\n  (vector 8 6 8 8 $false)\n  (vector 8 8 8 10 $false)\n  (vector 8 10 10 10 $false)\n  (vector 10 10 12 10 $false)\n  (vector 12 10 14 10 $false)\n  (vector 14 10 16 10 $false)\n  (vector 16 10 18 10 $false)\n  (vector 18 10 20 10 $false);",
    "dt": true,
    "parse": [
      "define",
      "cos_nor_gate",
      [
        -1,
        "vector",
        [
          "vector",
          "0",
          "6",
          "2",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "0",
          "8",
          "2",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "6",
          "4",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "8",
          "4",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "6",
          "6",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "8",
          "6",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "6",
          "8",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "8",
          "8",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "4",
          "8",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "6",
          "8",
          "8",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "8",
          "8",
          "8",
          "10",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "8",
          "10",
          "10",
          "10",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "10",
          "12",
          "10",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "10",
          "14",
          "10",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "14",
          "10",
          "16",
          "10",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "16",
          "10",
          "18",
          "10",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "18",
          "10",
          "20",
          "10",
          [
            -2,
            "false"
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf158;&#xf248;&#xf154;&#xf246;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf20c;&#xf24a;&#xf206;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf20c;&#xf24a;&#xf208;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf24a;&#xf20c;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf208;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf24a;&#xf20c;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf20c;&#xf24a;&#xf20c;&#xf24a;&#xf20e;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf20e;&#xf24a;&#xf20e;&#xf24a;&#xf20e;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf20e;&#xf24a;&#xf210;&#xf24a;&#xf20e;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf20e;&#xf24a;&#xf212;&#xf24a;&#xf20e;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf212;&#xf24a;&#xf20e;&#xf24a;&#xf214;&#xf24a;&#xf20e;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf214;&#xf24a;&#xf20e;&#xf24a;&#xf216;&#xf24a;&#xf20e;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf216;&#xf24a;&#xf20e;&#xf24a;&#xf218;&#xf24a;&#xf20e;&#xf249;&#xf144;&#xf245;&#xf24b;",
    "stanza": 1652
  },
  {
    "role": "code",
    "lines": [
      "define cos_nor_image | make-image 125 169 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:.............................................................:::::.....................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:...........:...............:...............:...............:...:.......................................................................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)",
      "  (:...........:...............:...............:...............:...........................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:.............................................................:::::.....................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:...........:...............:...............:...............:...:.......................................................................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)",
      "  (:...........:...............:...............:...............:...........................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:...............................................................:.......................................................................................................:)",
      "  (:.............................................................:::::.....................................................................................................:)",
      "  (:..............................................................:::......................................................................................................:)",
      "  (:...............................................................:...........:...............:...............:...............:...............:...............:...........:)",
      "  (:...........................................................................::..............::..............::..............::..............::..............::..........:)",
      "  (:..................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)",
      "  (:...........................................................................::..............::..............::..............::..............::..............::..........:)",
      "  (:...........................................................................:...............:...............:...............:...............:...............:...........:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "preprocessed": "define cos_nor_image | make-image 125 169 | vector \n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:.............................................................:::::.....................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:...........:...............:...............:...............:...:.......................................................................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)\n  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)\n  (:...........:...............:...............:...............:...........................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:.............................................................:::::.....................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:...........:...............:...............:...............:...:.......................................................................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)\n  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:)\n  (:...........:...............:...............:...............:...........................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:...............................................................:.......................................................................................................:)\n  (:.............................................................:::::.....................................................................................................:)\n  (:..............................................................:::......................................................................................................:)\n  (:...............................................................:...........:...............:...............:...............:...............:...............:...........:)\n  (:...........................................................................::..............::..............::..............::..............::..............::..........:)\n  (:..................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)\n  (:...........................................................................::..............::..............::..............::..............::..............::..........:)\n  (:...........................................................................:...............:...............:...............:...............:...............:...........:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);",
    "dt": true,
    "parse": [
      "define",
      "cos_nor_image",
      [
        -1,
        "make-image",
        "125",
        "169",
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":.............................................................:::::.....................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...:.......................................................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...........................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":.............................................................:::::.....................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...:.......................................................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...........................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":...............................................................:.......................................................................................................:"
          ],
          [
            ":.............................................................:::::.....................................................................................................:"
          ],
          [
            ":..............................................................:::......................................................................................................:"
          ],
          [
            ":...............................................................:...........:...............:...............:...............:...............:...............:...........:"
          ],
          [
            ":...........................................................................::..............::..............::..............::..............::..............::..........:"
          ],
          [
            ":..................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:"
          ],
          [
            ":...........................................................................::..............::..............::..............::..............::..............::..........:"
          ],
          [
            ":...........................................................................:...............:...............:...............:...............:...............:...........:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf159;&#xf248;&#xf148;&#xf175;&#xf24a;&#xf205;&#xf241;&#xf24a;&#xf206;&#xf22d;&#xf248;&#xf154;&#xf246;&#xf205;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf223;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf223;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf223;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf205;&#xf224;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf205;&#xf224;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf205;&#xf224;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf205;&#xf224;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf245;&#xf24b;",
    "stanza": 1653
  },
  {
    "role": "code",
    "lines": [
      "equal $cos_nor_gate | distill-circuit $cos_nor_image;"
    ],
    "preprocessed": "equal $cos_nor_gate | distill-circuit $cos_nor_image;",
    "dt": false,
    "parse": [
      "equal",
      [
        -2,
        "cos_nor_gate"
      ],
      [
        -1,
        "distill-circuit",
        [
          -2,
          "cos_nor_image"
        ]
      ]
    ],
    "code": "12100031231210101010030231210100110131231210101010132233",
    "spider": "&#xf14c;&#xf249;&#xf149;&#xf158;&#xf248;&#xf149;&#xf151;&#xf249;&#xf149;&#xf159;&#xf24b;",
    "stanza": 1654
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_NOR.gate",
      "5 6 1 0 1",
      "7 8 1 0 1",
      "8 9 0 1 0",
      "9 10 1 0 0",
      "3 6 1 0 1",
      "5 8 1 0 1",
      "1 6 1 0 1",
      "3 8 1 0 1",
      "1 8 1 0 1",
      "19 10 1 0 0",
      "17 10 1 0 0",
      "15 10 1 0 0",
      "8 5 0 1 1",
      "13 10 1 0 0",
      "7 6 1 0 1",
      "8 7 0 1 0",
      "11 10 1 0 0"
    ],
    "thumbnail": "COS_NOR.gif",
    "page": "COS_NOR.html",
    "stanza": 1655
  },
  {
    "role": "file",
    "lines": [
      "== COS_OSC =="
    ],
    "stanza": 1656
  },
  {
    "role": "comment",
    "lines": [
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_osc circuit",
    "section_category": "GATE",
    "section_index": 49,
    "stanza": 1657
  },
  {
    "role": "code",
    "lines": [
      "intro cos_osc_gate;"
    ],
    "preprocessed": "intro cos_osc_gate;",
    "dt": false,
    "parse": [
      "intro",
      "cos_osc_gate"
    ],
    "code": "121001031210101011032233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf15a;&#xf24b;",
    "stanza": 1658
  },
  {
    "role": "code",
    "lines": [
      "intro cos_osc_image;"
    ],
    "preprocessed": "intro cos_osc_image;",
    "dt": false,
    "parse": [
      "intro",
      "cos_osc_image"
    ],
    "code": "121001031210101011132233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf15b;&#xf24b;",
    "stanza": 1659
  },
  {
    "role": "code",
    "lines": [
      "define cos_osc_gate | vector ",
      "  (vector 4 8 6 8 $true)",
      "  (vector 6 8 8 8 $true)",
      "  (vector 8 6 8 8 $true)",
      "  (vector 10 6 8 6 $true)",
      "  (vector 8 8 10 8 $false)",
      "  (vector 12 6 10 6 $false)",
      "  (vector 10 8 12 8 $false)",
      "  (vector 12 8 12 6 $false)",
      "  (vector 12 8 14 8 $false)",
      "  (vector 14 8 16 8 $false);"
    ],
    "preprocessed": "define cos_osc_gate | vector \n  (vector 4 8 6 8 $true)\n  (vector 6 8 8 8 $true)\n  (vector 8 6 8 8 $true)\n  (vector 10 6 8 6 $true)\n  (vector 8 8 10 8 $false)\n  (vector 12 6 10 6 $false)\n  (vector 10 8 12 8 $false)\n  (vector 12 8 12 6 $false)\n  (vector 12 8 14 8 $false)\n  (vector 14 8 16 8 $false);",
    "dt": true,
    "parse": [
      "define",
      "cos_osc_gate",
      [
        -1,
        "vector",
        [
          "vector",
          "4",
          "8",
          "6",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "8",
          "8",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "6",
          "8",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "6",
          "8",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "8",
          "10",
          "8",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "6",
          "10",
          "6",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "8",
          "12",
          "8",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "8",
          "12",
          "6",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "8",
          "14",
          "8",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "14",
          "8",
          "16",
          "8",
          [
            -2,
            "false"
          ]
        ]
      ]
    ],
    "code": "12110131210101011030231210000321210000302100302100030211030210003123121332121000030211030210003021000302100031231213321210000302100030211030210003021000312312133212100003021010302110302100030211031231213321210000302100030210003021010302100031231203321210000302110030211030210103021103123120332121000030210103021000302110030210003123120332121000030211003021000302110030211031231203321210000302110030210003021110302100031231203321210000302111030210003021000030210003123120332233",
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf15a;&#xf248;&#xf154;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf24a;&#xf20c;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf20c;&#xf24a;&#xf20e;&#xf24a;&#xf20c;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf20a;&#xf24a;&#xf20e;&#xf24a;&#xf20a;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf20c;&#xf24a;&#xf210;&#xf24a;&#xf20c;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf20c;&#xf24a;&#xf210;&#xf24a;&#xf20a;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf20c;&#xf24a;&#xf212;&#xf24a;&#xf20c;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf212;&#xf24a;&#xf20c;&#xf24a;&#xf214;&#xf24a;&#xf20c;&#xf249;&#xf144;&#xf245;&#xf24b;",
    "stanza": 1660
  },
  {
    "role": "code",
    "lines": [
      "define cos_osc_image | make-image 120 169 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:...................................................................:...............:...................................................................................:)",
      "  (:..................................................................:::::::::::.....::...................................................................................:)",
      "  (:.................................................................::::::::::::....::::::::::::..........................................................................:)",
      "  (:..................................................................:::::::::::.....::...................................................................................:)",
      "  (:...................................................................:...............:...........:.......................................................................:)",
      "  (:..............................................................:::.............................:::......................................................................:)",
      "  (:..............................................................:::............................:::::.....................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:.............................................................:::::.............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:...........................................:...............:...:...........:...............:...............:...............:...........................................:)",
      "  (:..................................:::::::::::.....:::::::::::..............::..............::..............::..............::..........................................:)",
      "  (:..................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................:)",
      "  (:..................................:::::::::::.....:::::::::::..............::..............::..............::..............::..........................................:)",
      "  (:...........................................:...............:...............:...............:...............:...............:...........................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "preprocessed": "define cos_osc_image | make-image 120 169 | vector \n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:...................................................................:...............:...................................................................................:)\n  (:..................................................................:::::::::::.....::...................................................................................:)\n  (:.................................................................::::::::::::....::::::::::::..........................................................................:)\n  (:..................................................................:::::::::::.....::...................................................................................:)\n  (:...................................................................:...............:...........:.......................................................................:)\n  (:..............................................................:::.............................:::......................................................................:)\n  (:..............................................................:::............................:::::.....................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:.............................................................:::::.............................:.......................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:...........................................:...............:...:...........:...............:...............:...............:...........................................:)\n  (:..................................:::::::::::.....:::::::::::..............::..............::..............::..............::..........................................:)\n  (:..................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................:)\n  (:..................................:::::::::::.....:::::::::::..............::..............::..............::..............::..........................................:)\n  (:...........................................:...............:...............:...............:...............:...............:...........................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);",
    "dt": true,
    "parse": [
      "define",
      "cos_osc_image",
      [
        -1,
        "make-image",
        "120",
        "169",
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":...................................................................:...............:...................................................................................:"
          ],
          [
            ":..................................................................:::::::::::.....::...................................................................................:"
          ],
          [
            ":.................................................................::::::::::::....::::::::::::..........................................................................:"
          ],
          [
            ":..................................................................:::::::::::.....::...................................................................................:"
          ],
          [
            ":...................................................................:...............:...........:.......................................................................:"
          ],
          [
            ":..............................................................:::.............................:::......................................................................:"
          ],
          [
            ":..............................................................:::............................:::::.....................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":.............................................................:::::.............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":...........................................:...............:...:...........:...............:...............:...............:...........................................:"
          ],
          [
            ":..................................:::::::::::.....:::::::::::..............::..............::..............::..............::..........................................:"
          ],
          [
            ":..................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................:"
          ],
          [
            ":..................................:::::::::::.....:::::::::::..............::..............::..............::..............::..........................................:"
          ],
          [
            ":...........................................:...............:...............:...............:...............:...............:...........................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf15b;&#xf248;&#xf148;&#xf175;&#xf24a;&#xf205;&#xf23c;&#xf24a;&#xf206;&#xf22d;&#xf248;&#xf154;&#xf246;&#xf205;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf243;&#xf242;&#xf207;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf243;&#xf242;&#xf20b;&#xf243;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf243;&#xf242;&#xf207;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf20b;&#xf234;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf223;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf208;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf205;&#xf224;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf205;&#xf224;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf245;&#xf24b;",
    "stanza": 1661
  },
  {
    "role": "code",
    "lines": [
      "equal $cos_osc_gate | distill-circuit $cos_osc_image;"
    ],
    "preprocessed": "equal $cos_osc_gate | distill-circuit $cos_osc_image;",
    "dt": false,
    "parse": [
      "equal",
      [
        -2,
        "cos_osc_gate"
      ],
      [
        -1,
        "distill-circuit",
        [
          -2,
          "cos_osc_image"
        ]
      ]
    ],
    "code": "12100031231210101011030231210100110131231210101011132233",
    "spider": "&#xf14c;&#xf249;&#xf149;&#xf15a;&#xf248;&#xf149;&#xf151;&#xf249;&#xf149;&#xf15b;&#xf24b;",
    "stanza": 1662
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_OSC.gate",
      "7 8 1 0 1",
      "5 8 1 0 1",
      "15 8 1 0 0",
      "11 6 -1 0 0",
      "12 7 0 -1 0",
      "13 8 1 0 0",
      "9 6 -1 0 1",
      "11 8 1 0 0",
      "8 7 0 1 1",
      "9 8 1 0 0"
    ],
    "thumbnail": "COS_OSC.gif",
    "page": "COS_OSC.html",
    "stanza": 1663
  },
  {
    "role": "file",
    "lines": [
      "== COS_SR =="
    ],
    "stanza": 1664
  },
  {
    "role": "comment",
    "lines": [
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_sr circuit",
    "section_category": "GATE",
    "section_index": 50,
    "stanza": 1665
  },
  {
    "role": "code",
    "lines": [
      "intro cos_sr_gate;"
    ],
    "preprocessed": "intro cos_sr_gate;",
    "dt": false,
    "parse": [
      "intro",
      "cos_sr_gate"
    ],
    "code": "121001031210101100032233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf15c;&#xf24b;",
    "stanza": 1666
  },
  {
    "role": "code",
    "lines": [
      "intro cos_sr_image;"
    ],
    "preprocessed": "intro cos_sr_image;",
    "dt": false,
    "parse": [
      "intro",
      "cos_sr_image"
    ],
    "code": "121001031210101100132233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf15d;&#xf24b;",
    "stanza": 1667
  },
  {
    "role": "code",
    "lines": [
      "define cos_sr_gate | vector ",
      "  (vector 0 2 2 2 $true)",
      "  (vector 0 8 2 8 $true)",
      "  (vector 2 2 4 2 $true)",
      "  (vector 2 8 4 8 $true)",
      "  (vector 4 2 6 2 $true)",
      "  (vector 4 6 6 6 $true)",
      "  (vector 4 8 6 8 $true)",
      "  (vector 6 8 6 6 $true)",
      "  (vector 6 2 8 2 $true)",
      "  (vector 6 6 8 6 $false)",
      "  (vector 8 4 8 6 $false)",
      "  (vector 8 2 10 2 $true)",
      "  (vector 10 4 8 4 $false)",
      "  (vector 8 6 10 6 $false)",
      "  (vector 10 6 10 8 $false)",
      "  (vector 10 2 12 2 $true)",
      "  (vector 12 4 10 4 $false)",
      "  (vector 10 6 12 6 $false)",
      "  (vector 10 8 12 8 $false)",
      "  (vector 12 6 12 4 $false)",
      "  (vector 12 2 14 2 $true)",
      "  (vector 14 4 12 4 $false)",
      "  (vector 12 8 14 8 $false)",
      "  (vector 14 2 14 4 $true)",
      "  (vector 16 4 14 4 $true)",
      "  (vector 14 8 16 8 $false)",
      "  (vector 16 8 18 8 $false)",
      "  (vector 18 8 20 8 $false);"
    ],
    "preprocessed": "define cos_sr_gate | vector \n  (vector 0 2 2 2 $true)\n  (vector 0 8 2 8 $true)\n  (vector 2 2 4 2 $true)\n  (vector 2 8 4 8 $true)\n  (vector 4 2 6 2 $true)\n  (vector 4 6 6 6 $true)\n  (vector 4 8 6 8 $true)\n  (vector 6 8 6 6 $true)\n  (vector 6 2 8 2 $true)\n  (vector 6 6 8 6 $false)\n  (vector 8 4 8 6 $false)\n  (vector 8 2 10 2 $true)\n  (vector 10 4 8 4 $false)\n  (vector 8 6 10 6 $false)\n  (vector 10 6 10 8 $false)\n  (vector 10 2 12 2 $true)\n  (vector 12 4 10 4 $false)\n  (vector 10 6 12 6 $false)\n  (vector 10 8 12 8 $false)\n  (vector 12 6 12 4 $false)\n  (vector 12 2 14 2 $true)\n  (vector 14 4 12 4 $false)\n  (vector 12 8 14 8 $false)\n  (vector 14 2 14 4 $true)\n  (vector 16 4 14 4 $true)\n  (vector 14 8 16 8 $false)\n  (vector 16 8 18 8 $false)\n  (vector 18 8 20 8 $false);",
    "dt": true,
    "parse": [
      "define",
      "cos_sr_gate",
      [
        -1,
        "vector",
        [
          "vector",
          "0",
          "2",
          "2",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "0",
          "8",
          "2",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "2",
          "4",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "8",
          "4",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "2",
          "6",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "6",
          "6",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "8",
          "6",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "8",
          "6",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "2",
          "8",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "6",
          "8",
          "6",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "8",
          "4",
          "8",
          "6",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "8",
          "2",
          "10",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "4",
          "8",
          "4",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "8",
          "6",
          "10",
          "6",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "6",
          "10",
          "8",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "2",
          "12",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "4",
          "10",
          "4",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "6",
          "12",
          "6",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "10",
          "8",
          "12",
          "8",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "6",
          "12",
          "4",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "2",
          "14",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "14",
          "4",
          "12",
          "4",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "8",
          "14",
          "8",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "14",
          "2",
          "14",
          "4",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "16",
          "4",
          "14",
          "4",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "14",
          "8",
          "16",
          "8",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "16",
          "8",
          "18",
          "8",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "18",
          "8",
          "20",
          "8",
          [
            -2,
            "false"
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf15c;&#xf248;&#xf154;&#xf246;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf20c;&#xf24a;&#xf206;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf20c;&#xf24a;&#xf208;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf24a;&#xf20c;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf208;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf206;&#xf24a;&#xf20e;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf208;&#xf24a;&#xf20c;&#xf24a;&#xf208;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf24a;&#xf20e;&#xf24a;&#xf20a;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf20a;&#xf24a;&#xf20e;&#xf24a;&#xf20c;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf206;&#xf24a;&#xf210;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf208;&#xf24a;&#xf20e;&#xf24a;&#xf208;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf20a;&#xf24a;&#xf210;&#xf24a;&#xf20a;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf20c;&#xf24a;&#xf210;&#xf24a;&#xf20c;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf20a;&#xf24a;&#xf210;&#xf24a;&#xf208;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf206;&#xf24a;&#xf212;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf212;&#xf24a;&#xf208;&#xf24a;&#xf210;&#xf24a;&#xf208;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf20c;&#xf24a;&#xf212;&#xf24a;&#xf20c;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf212;&#xf24a;&#xf206;&#xf24a;&#xf212;&#xf24a;&#xf208;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf214;&#xf24a;&#xf208;&#xf24a;&#xf212;&#xf24a;&#xf208;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf212;&#xf24a;&#xf20c;&#xf24a;&#xf214;&#xf24a;&#xf20c;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf214;&#xf24a;&#xf20c;&#xf24a;&#xf216;&#xf24a;&#xf20c;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf216;&#xf24a;&#xf20c;&#xf24a;&#xf218;&#xf24a;&#xf20c;&#xf249;&#xf144;&#xf245;&#xf24b;",
    "stanza": 1668
  },
  {
    "role": "code",
    "lines": [
      "define cos_sr_image | make-image 88 169 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:...........:...............:...............:...............:...............:...............:...............:...........................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................:)",
      "  (:...........:...............:...............:...............:...............:...............:...............:...........................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:.............................................................................................................:::::.....................................................:)",
      "  (:..............................................................................................................:::......................................................:)",
      "  (:...................................................................:...............:...............:...........:...:...................................................:)",
      "  (:..................................................................::..............::..............::..............:::::::::::..........................................:)",
      "  (:.................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::..........................................:)",
      "  (:..................................................................::..............::..............::..............:::::::::::..........................................:)",
      "  (:...................................................................:...............:...........:...:...............:...................................................:)",
      "  (:...............................................................:..............................:::......................................................................:)",
      "  (:...............................................................:.............................:::::.....................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:...............................................................:...............................:.......................................................................:)",
      "  (:.............................................................:::::.............................:.......................................................................:)",
      "  (:..............................................................:::..............................:.......................................................................:)",
      "  (:...........................................:...............:...:...........:...............:...........................................................................:)",
      "  (:..................................:::::::::::..............::..............::..............::..........................................................................:)",
      "  (:..................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)",
      "  (:..................................:::::::::::..............::..............::..............::..........................................................................:)",
      "  (:...........................................:...:...........:...............:...............:...........................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:.............................................:::::.............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::..............................:.......................................................................................:)",
      "  (:..............................................:::............................:::::.....................................................................................:)",
      "  (:..............................................:::.............................:::......................................................................................:)",
      "  (:...........:...............:...............:...................................:...........:...............:...............:...............:...............:...........:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..............::..........:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..............::..........:)",
      "  (:...........:...............:...............:...............................................:...............:...............:...............:...............:...........:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "preprocessed": "define cos_sr_image | make-image 88 169 | vector \n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:...........:...............:...............:...............:...............:...............:...............:...........................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................:)\n  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................:)\n  (:...........:...............:...............:...............:...............:...............:...............:...........................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:.............................................................................................................:::::.....................................................:)\n  (:..............................................................................................................:::......................................................:)\n  (:...................................................................:...............:...............:...........:...:...................................................:)\n  (:..................................................................::..............::..............::..............:::::::::::..........................................:)\n  (:.................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::..........................................:)\n  (:..................................................................::..............::..............::..............:::::::::::..........................................:)\n  (:...................................................................:...............:...........:...:...............:...................................................:)\n  (:...............................................................:..............................:::......................................................................:)\n  (:...............................................................:.............................:::::.....................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:...............................................................:...............................:.......................................................................:)\n  (:.............................................................:::::.............................:.......................................................................:)\n  (:..............................................................:::..............................:.......................................................................:)\n  (:...........................................:...............:...:...........:...............:...........................................................................:)\n  (:..................................:::::::::::..............::..............::..............::..........................................................................:)\n  (:..................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)\n  (:..................................:::::::::::..............::..............::..............::..........................................................................:)\n  (:...........................................:...:...........:...............:...............:...........................................................................:)\n  (:..............................................:::..............................:.......................................................................................:)\n  (:.............................................:::::.............................:.......................................................................................:)\n  (:..............................................:::..............................:.......................................................................................:)\n  (:..............................................:::..............................:.......................................................................................:)\n  (:..............................................:::..............................:.......................................................................................:)\n  (:..............................................:::..............................:.......................................................................................:)\n  (:..............................................:::..............................:.......................................................................................:)\n  (:..............................................:::..............................:.......................................................................................:)\n  (:..............................................:::..............................:.......................................................................................:)\n  (:..............................................:::............................:::::.....................................................................................:)\n  (:..............................................:::.............................:::......................................................................................:)\n  (:...........:...............:...............:...................................:...........:...............:...............:...............:...............:...........:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..............::..........:)\n  (:..::::::::::::....::::::::::::....::::::::::::....................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..............::..........:)\n  (:...........:...............:...............:...............................................:...............:...............:...............:...............:...........:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);",
    "dt": true,
    "parse": [
      "define",
      "cos_sr_image",
      [
        -1,
        "make-image",
        "88",
        "169",
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...............:...............:...............:...........................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................:"
          ],
          [
            ":...........:...............:...............:...............:...............:...............:...............:...........................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":.............................................................................................................:::::.....................................................:"
          ],
          [
            ":..............................................................................................................:::......................................................:"
          ],
          [
            ":...................................................................:...............:...............:...........:...:...................................................:"
          ],
          [
            ":..................................................................::..............::..............::..............:::::::::::..........................................:"
          ],
          [
            ":.................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::..........................................:"
          ],
          [
            ":..................................................................::..............::..............::..............:::::::::::..........................................:"
          ],
          [
            ":...................................................................:...............:...........:...:...............:...................................................:"
          ],
          [
            ":...............................................................:..............................:::......................................................................:"
          ],
          [
            ":...............................................................:.............................:::::.....................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":...............................................................:...............................:.......................................................................:"
          ],
          [
            ":.............................................................:::::.............................:.......................................................................:"
          ],
          [
            ":..............................................................:::..............................:.......................................................................:"
          ],
          [
            ":...........................................:...............:...:...........:...............:...........................................................................:"
          ],
          [
            ":..................................:::::::::::..............::..............::..............::..........................................................................:"
          ],
          [
            ":..................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:"
          ],
          [
            ":..................................:::::::::::..............::..............::..............::..........................................................................:"
          ],
          [
            ":...........................................:...:...........:...............:...............:...........................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":.............................................:::::.............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::..............................:.......................................................................................:"
          ],
          [
            ":..............................................:::............................:::::.....................................................................................:"
          ],
          [
            ":..............................................:::.............................:::......................................................................................:"
          ],
          [
            ":...........:...............:...............:...................................:...........:...............:...............:...............:...............:...........:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..............::..........:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....................................::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::..............................................::..............::..............::..............::..............::..........:"
          ],
          [
            ":...........:...............:...............:...............................................:...............:...............:...............:...............:...........:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf15d;&#xf248;&#xf148;&#xf175;&#xf24a;&#xf205;&#xf21c;&#xf24a;&#xf206;&#xf22d;&#xf248;&#xf154;&#xf246;&#xf205;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf223;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf208;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf234;&#xf204;&#xf207;&#xf204;&#xf204;&#xf210;&#xf204;&#xf204;&#xf243;&#xf242;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf243;&#xf242;&#xf20b;&#xf243;&#xf23c;&#xf223;&#xf243;&#xf225;&#xf243;&#xf242;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf234;&#xf204;&#xf207;&#xf204;&#xf204;&#xf210;&#xf204;&#xf204;&#xf243;&#xf242;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf205;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf20b;&#xf234;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf223;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf208;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf205;&#xf224;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf205;&#xf224;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf215;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf20b;&#xf234;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf205;&#xf240;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf205;&#xf224;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf205;&#xf224;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf205;&#xf224;&#xf204;&#xf20a;&#xf204;&#xf204;&#xf21c;&#xf204;&#xf205;&#xf224;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf245;&#xf24b;",
    "stanza": 1669
  },
  {
    "role": "code",
    "lines": [
      "equal $cos_sr_gate | distill-circuit $cos_sr_image;"
    ],
    "preprocessed": "equal $cos_sr_gate | distill-circuit $cos_sr_image;",
    "dt": false,
    "parse": [
      "equal",
      [
        -2,
        "cos_sr_gate"
      ],
      [
        -1,
        "distill-circuit",
        [
          -2,
          "cos_sr_image"
        ]
      ]
    ],
    "code": "12100031231210101100030231210100110131231210101100132233",
    "spider": "&#xf14c;&#xf249;&#xf149;&#xf15c;&#xf248;&#xf149;&#xf151;&#xf249;&#xf149;&#xf15d;&#xf24b;",
    "stanza": 1670
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_SR.gate",
      "6 7 0 -1 1",
      "13 2 1 0 1",
      "15 4 -1 0 1",
      "19 8 1 0 0",
      "11 2 1 0 1",
      "13 4 -1 0 0",
      "17 8 1 0 0",
      "9 2 1 0 1",
      "11 4 -1 0 0",
      "15 8 1 0 0",
      "7 2 1 0 1",
      "9 4 -1 0 0",
      "11 6 1 0 0",
      "13 8 1 0 0",
      "5 2 1 0 1",
      "9 6 1 0 0",
      "11 8 1 0 0",
      "3 2 1 0 1",
      "7 6 1 0 0",
      "1 2 1 0 1",
      "5 6 1 0 1",
      "5 8 1 0 1",
      "3 8 1 0 1",
      "1 8 1 0 1",
      "14 3 0 1 1",
      "12 5 0 -1 0",
      "8 5 0 1 0",
      "10 7 0 1 0"
    ],
    "thumbnail": "COS_SR.gif",
    "page": "COS_SR.html",
    "stanza": 1671
  },
  {
    "role": "file",
    "lines": [
      "== COS_D =="
    ],
    "stanza": 1672
  },
  {
    "role": "comment",
    "lines": [
      "# This section contains one or more representations of a circuit",
      "# constructed using UNLESS gates."
    ],
    "section_description": "testing alternate primer based on gates: cos_d circuit",
    "section_category": "GATE",
    "section_index": 51,
    "stanza": 1673
  },
  {
    "role": "code",
    "lines": [
      "intro cos_d_gate;"
    ],
    "preprocessed": "intro cos_d_gate;",
    "dt": false,
    "parse": [
      "intro",
      "cos_d_gate"
    ],
    "code": "121001031210101101032233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf15e;&#xf24b;",
    "stanza": 1674
  },
  {
    "role": "code",
    "lines": [
      "intro cos_d_image;"
    ],
    "preprocessed": "intro cos_d_image;",
    "dt": false,
    "parse": [
      "intro",
      "cos_d_image"
    ],
    "code": "121001031210101101132233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf15f;&#xf24b;",
    "stanza": 1675
  },
  {
    "role": "code",
    "lines": [
      "define cos_d_gate | vector ",
      "  (vector 0 2 2 2 $true)",
      "  (vector 0 6 2 6 $true)",
      "  (vector 2 2 4 2 $true)",
      "  (vector 2 6 4 6 $true)",
      "  (vector 4 2 6 2 $true)",
      "  (vector 4 6 6 6 $true)",
      "  (vector 6 2 8 2 $true)",
      "  (vector 6 6 8 6 $true)",
      "  (vector 8 2 10 2 $true)",
      "  (vector 8 6 10 6 $true)",
      "  (vector 10 6 10 4 $true)",
      "  (vector 10 10 10 8 $true)",
      "  (vector 10 2 12 2 $true)",
      "  (vector 10 4 12 4 $true)",
      "  (vector 10 6 12 6 $true)",
      "  (vector 10 8 12 8 $true)",
      "  (vector 12 10 10 10 $true)",
      "  (vector 12 0 12 2 $true)",
      "  (vector 12 2 12 4 $false)",
      "  (vector 12 6 12 8 $true)",
      "  (vector 12 10 12 12 $true)",
      "  (vector 12 4 14 4 $true)",
      "  (vector 12 8 14 8 $false)",
      "  (vector 14 10 12 10 $true)",
      "  (vector 12 12 14 12 $true)",
      "  (vector 14 0 14 2 $true)",
      "  (vector 14 2 14 4 $true)",
      "  (vector 14 4 14 6 $false)",
      "  (vector 14 6 14 8 $false)",
      "  (vector 14 8 14 10 $false)",
      "  (vector 16 10 14 10 $true)",
      "  (vector 14 12 16 12 $true)",
      "  (vector 16 12 18 12 $true)",
      "  (vector 18 12 20 12 $true);"
    ],
    "preprocessed": "define cos_d_gate | vector \n  (vector 0 2 2 2 $true)\n  (vector 0 6 2 6 $true)\n  (vector 2 2 4 2 $true)\n  (vector 2 6 4 6 $true)\n  (vector 4 2 6 2 $true)\n  (vector 4 6 6 6 $true)\n  (vector 6 2 8 2 $true)\n  (vector 6 6 8 6 $true)\n  (vector 8 2 10 2 $true)\n  (vector 8 6 10 6 $true)\n  (vector 10 6 10 4 $true)\n  (vector 10 10 10 8 $true)\n  (vector 10 2 12 2 $true)\n  (vector 10 4 12 4 $true)\n  (vector 10 6 12 6 $true)\n  (vector 10 8 12 8 $true)\n  (vector 12 10 10 10 $true)\n  (vector 12 0 12 2 $true)\n  (vector 12 2 12 4 $false)\n  (vector 12 6 12 8 $true)\n  (vector 12 10 12 12 $true)\n  (vector 12 4 14 4 $true)\n  (vector 12 8 14 8 $false)\n  (vector 14 10 12 10 $true)\n  (vector 12 12 14 12 $true)\n  (vector 14 0 14 2 $true)\n  (vector 14 2 14 4 $true)\n  (vector 14 4 14 6 $false)\n  (vector 14 6 14 8 $false)\n  (vector 14 8 14 10 $false)\n  (vector 16 10 14 10 $true)\n  (vector 14 12 16 12 $true)\n  (vector 16 12 18 12 $true)\n  (vector 18 12 20 12 $true);",
    "dt": true,
    "parse": [
      "define",
      "cos_d_gate",
      [
        -1,
        "vector",
        [
          "vector",
          "0",
          "2",
          "2",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "0",
          "6",
          "2",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "2",
          "4",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "2",
          "6",
          "4",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "2",
          "6",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "4",
          "6",
          "6",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "2",
          "8",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "6",
          "6",
          "8",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "2",
          "10",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "8",
          "6",
          "10",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "6",
          "10",
          "4",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "10",
          "10",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "2",
          "12",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "4",
          "12",
          "4",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "6",
          "12",
          "6",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "10",
          "8",
          "12",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "10",
          "10",
          "10",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "0",
          "12",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "2",
          "12",
          "4",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "12",
          "6",
          "12",
          "8",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "10",
          "12",
          "12",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "4",
          "14",
          "4",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "8",
          "14",
          "8",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "14",
          "10",
          "12",
          "10",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "12",
          "12",
          "14",
          "12",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "14",
          "0",
          "14",
          "2",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "14",
          "2",
          "14",
          "4",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "14",
          "4",
          "14",
          "6",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "14",
          "6",
          "14",
          "8",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "14",
          "8",
          "14",
          "10",
          [
            -2,
            "false"
          ]
        ],
        [
          "vector",
          "16",
          "10",
          "14",
          "10",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "14",
          "12",
          "16",
          "12",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "16",
          "12",
          "18",
          "12",
          [
            -2,
            "true"
          ]
        ],
        [
          "vector",
          "18",
          "12",
          "20",
          "12",
          [
            -2,
            "true"
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf15e;&#xf248;&#xf154;&#xf246;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf204;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf206;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf24a;&#xf20a;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf206;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf208;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf206;&#xf24a;&#xf20c;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20a;&#xf24a;&#xf20a;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf206;&#xf24a;&#xf20e;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20c;&#xf24a;&#xf20a;&#xf24a;&#xf20e;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf20a;&#xf24a;&#xf20e;&#xf24a;&#xf208;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf20e;&#xf24a;&#xf20e;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf206;&#xf24a;&#xf210;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf208;&#xf24a;&#xf210;&#xf24a;&#xf208;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf20a;&#xf24a;&#xf210;&#xf24a;&#xf20a;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf20e;&#xf24a;&#xf20c;&#xf24a;&#xf210;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf20e;&#xf24a;&#xf20e;&#xf24a;&#xf20e;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf204;&#xf24a;&#xf210;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf206;&#xf24a;&#xf210;&#xf24a;&#xf208;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf20a;&#xf24a;&#xf210;&#xf24a;&#xf20c;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf20e;&#xf24a;&#xf210;&#xf24a;&#xf210;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf208;&#xf24a;&#xf212;&#xf24a;&#xf208;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf20c;&#xf24a;&#xf212;&#xf24a;&#xf20c;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf212;&#xf24a;&#xf20e;&#xf24a;&#xf210;&#xf24a;&#xf20e;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf210;&#xf24a;&#xf210;&#xf24a;&#xf212;&#xf24a;&#xf210;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf212;&#xf24a;&#xf204;&#xf24a;&#xf212;&#xf24a;&#xf206;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf212;&#xf24a;&#xf206;&#xf24a;&#xf212;&#xf24a;&#xf208;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf212;&#xf24a;&#xf208;&#xf24a;&#xf212;&#xf24a;&#xf20a;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf212;&#xf24a;&#xf20a;&#xf24a;&#xf212;&#xf24a;&#xf20c;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf212;&#xf24a;&#xf20c;&#xf24a;&#xf212;&#xf24a;&#xf20e;&#xf249;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf214;&#xf24a;&#xf20e;&#xf24a;&#xf212;&#xf24a;&#xf20e;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf212;&#xf24a;&#xf210;&#xf24a;&#xf214;&#xf24a;&#xf210;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf214;&#xf24a;&#xf210;&#xf24a;&#xf216;&#xf24a;&#xf210;&#xf249;&#xf145;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf216;&#xf24a;&#xf210;&#xf24a;&#xf218;&#xf24a;&#xf210;&#xf249;&#xf145;&#xf245;&#xf24b;",
    "stanza": 1676
  },
  {
    "role": "code",
    "lines": [
      "define cos_d_image | make-image 109 169 | vector ",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:.............................................................................................:::::...........:::::.....................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:...........:...............:...............:...............:...............:...............:...:...............:.......................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)",
      "  (:...........:...............:...............:...............:...............:...............:...........................................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:...............................................................................................:..............:::......................................................:)",
      "  (:.............................................................................................:::::...........:::::.....................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:...........................................................................................:...:...........:...:.......................................................:)",
      "  (:..................................................................................:::::::::::.....:::::::::::..........................................................:)",
      "  (:..................................................................................::::::::::::....::::::::::::.........................................................:)",
      "  (:..................................................................................:::::::::::.....:::::::::::..........................................................:)",
      "  (:...............................................................................:...........:...............:...........................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:.............................................................................:::::.............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::............................:::::.....................................................:)",
      "  (:..............................................................................:::.............................:::......................................................:)",
      "  (:...........:...............:...............:...............:...............:...............:...................:.......................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)",
      "  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)",
      "  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)",
      "  (:...........:...............:...............:...............:...............:...............:...........................................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:..............................................................................................:::..............:.......................................................:)",
      "  (:.............................................................................................:::::...........:::::.....................................................:)",
      "  (:..............................................................................................:::.............:::......................................................:)",
      "  (:...........................................................................................:...:...........:...:.......................................................:)",
      "  (:..................................................................................:::::::::::..............::..........................................................:)",
      "  (:..................................................................................::::::::::::....::::::::::::.........................................................:)",
      "  (:..................................................................................:::::::::::..............::..........................................................:)",
      "  (:...............................................................................:...........:...............:...........................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:.............................................................................:::::.............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::..............................:.......................................................:)",
      "  (:..............................................................................:::............................:::::.....................................................:)",
      "  (:..............................................................................:::.............................:::......................................................:)",
      "  (:...................................................................................:...............:...........:...:...................................................:)",
      "  (:..................................................................................:::::::::::.....:::::::::::.....:::::::::::..........................................:)",
      "  (:.................................................................................::::::::::::....::::::::::::....::::::::::::..........................................:)",
      "  (:..................................................................................:::::::::::.....:::::::::::.....:::::::::::..........................................:)",
      "  (:...................................................................................:...............:...............:...................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:.............................................................................................:::::.....................................................................:)",
      "  (:..............................................................................................:::......................................................................:)",
      "  (:...............................................................................................:...........:...............:...............:...............:...........:)",
      "  (:..................................................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)",
      "  (:..................................................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)",
      "  (:..................................................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)",
      "  (:...........................................................................................................:...............:...............:...............:...........:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:.......................................................................................................................................................................:)",
      "  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);"
    ],
    "preprocessed": "define cos_d_image | make-image 109 169 | vector \n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:.............................................................................................:::::...........:::::.....................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:...........:...............:...............:...............:...............:...............:...:...............:.......................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)\n  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)\n  (:...........:...............:...............:...............:...............:...............:...........................................................................:)\n  (:...............................................................................................:..............:::......................................................:)\n  (:...............................................................................................:..............:::......................................................:)\n  (:...............................................................................................:..............:::......................................................:)\n  (:...............................................................................................:..............:::......................................................:)\n  (:...............................................................................................:..............:::......................................................:)\n  (:...............................................................................................:..............:::......................................................:)\n  (:...............................................................................................:..............:::......................................................:)\n  (:...............................................................................................:..............:::......................................................:)\n  (:...............................................................................................:..............:::......................................................:)\n  (:.............................................................................................:::::...........:::::.....................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:...........................................................................................:...:...........:...:.......................................................:)\n  (:..................................................................................:::::::::::.....:::::::::::..........................................................:)\n  (:..................................................................................::::::::::::....::::::::::::.........................................................:)\n  (:..................................................................................:::::::::::.....:::::::::::..........................................................:)\n  (:...............................................................................:...........:...............:...........................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:.............................................................................:::::.............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::............................:::::.....................................................:)\n  (:..............................................................................:::.............................:::......................................................:)\n  (:...........:...............:...............:...............:...............:...............:...................:.......................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)\n  (:..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:)\n  (:..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:)\n  (:...........:...............:...............:...............:...............:...............:...........................................................................:)\n  (:..............................................................................................:::..............:.......................................................:)\n  (:..............................................................................................:::..............:.......................................................:)\n  (:..............................................................................................:::..............:.......................................................:)\n  (:..............................................................................................:::..............:.......................................................:)\n  (:..............................................................................................:::..............:.......................................................:)\n  (:..............................................................................................:::..............:.......................................................:)\n  (:..............................................................................................:::..............:.......................................................:)\n  (:..............................................................................................:::..............:.......................................................:)\n  (:..............................................................................................:::..............:.......................................................:)\n  (:.............................................................................................:::::...........:::::.....................................................:)\n  (:..............................................................................................:::.............:::......................................................:)\n  (:...........................................................................................:...:...........:...:.......................................................:)\n  (:..................................................................................:::::::::::..............::..........................................................:)\n  (:..................................................................................::::::::::::....::::::::::::.........................................................:)\n  (:..................................................................................:::::::::::..............::..........................................................:)\n  (:...............................................................................:...........:...............:...........................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:.............................................................................:::::.............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::..............................:.......................................................:)\n  (:..............................................................................:::............................:::::.....................................................:)\n  (:..............................................................................:::.............................:::......................................................:)\n  (:...................................................................................:...............:...........:...:...................................................:)\n  (:..................................................................................:::::::::::.....:::::::::::.....:::::::::::..........................................:)\n  (:.................................................................................::::::::::::....::::::::::::....::::::::::::..........................................:)\n  (:..................................................................................:::::::::::.....:::::::::::.....:::::::::::..........................................:)\n  (:...................................................................................:...............:...............:...................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:.............................................................................................:::::.....................................................................:)\n  (:..............................................................................................:::......................................................................:)\n  (:...............................................................................................:...........:...............:...............:...............:...........:)\n  (:..................................................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)\n  (:..................................................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:)\n  (:..................................................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:)\n  (:...........................................................................................................:...............:...............:...............:...........:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:.......................................................................................................................................................................:)\n  (:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::);",
    "dt": true,
    "parse": [
      "define",
      "cos_d_image",
      [
        -1,
        "make-image",
        "109",
        "169",
        [
          -1,
          "vector",
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":.............................................................................................:::::...........:::::.....................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":...........:...............:...............:...............:...............:...............:...:...............:.......................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...............:...............:...........................................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":...............................................................................................:..............:::......................................................:"
          ],
          [
            ":.............................................................................................:::::...........:::::.....................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":...........................................................................................:...:...........:...:.......................................................:"
          ],
          [
            ":..................................................................................:::::::::::.....:::::::::::..........................................................:"
          ],
          [
            ":..................................................................................::::::::::::....::::::::::::.........................................................:"
          ],
          [
            ":..................................................................................:::::::::::.....:::::::::::..........................................................:"
          ],
          [
            ":...............................................................................:...........:...............:...........................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":.............................................................................:::::.............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::............................:::::.....................................................:"
          ],
          [
            ":..............................................................................:::.............................:::......................................................:"
          ],
          [
            ":...........:...............:...............:...............:...............:...............:...................:.......................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:"
          ],
          [
            ":..::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::....::::::::::::.........................................................................:"
          ],
          [
            ":..:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........................................................................:"
          ],
          [
            ":...........:...............:...............:...............:...............:...............:...........................................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":..............................................................................................:::..............:.......................................................:"
          ],
          [
            ":.............................................................................................:::::...........:::::.....................................................:"
          ],
          [
            ":..............................................................................................:::.............:::......................................................:"
          ],
          [
            ":...........................................................................................:...:...........:...:.......................................................:"
          ],
          [
            ":..................................................................................:::::::::::..............::..........................................................:"
          ],
          [
            ":..................................................................................::::::::::::....::::::::::::.........................................................:"
          ],
          [
            ":..................................................................................:::::::::::..............::..........................................................:"
          ],
          [
            ":...............................................................................:...........:...............:...........................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":.............................................................................:::::.............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::..............................:.......................................................:"
          ],
          [
            ":..............................................................................:::............................:::::.....................................................:"
          ],
          [
            ":..............................................................................:::.............................:::......................................................:"
          ],
          [
            ":...................................................................................:...............:...........:...:...................................................:"
          ],
          [
            ":..................................................................................:::::::::::.....:::::::::::.....:::::::::::..........................................:"
          ],
          [
            ":.................................................................................::::::::::::....::::::::::::....::::::::::::..........................................:"
          ],
          [
            ":..................................................................................:::::::::::.....:::::::::::.....:::::::::::..........................................:"
          ],
          [
            ":...................................................................................:...............:...............:...................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":.............................................................................................:::::.....................................................................:"
          ],
          [
            ":..............................................................................................:::......................................................................:"
          ],
          [
            ":...............................................................................................:...........:...............:...............:...............:...........:"
          ],
          [
            ":..................................................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:"
          ],
          [
            ":..................................................................................................::::::::::::....::::::::::::....::::::::::::....::::::::::::.........:"
          ],
          [
            ":..................................................................................................:::::::::::.....:::::::::::.....:::::::::::.....:::::::::::..........:"
          ],
          [
            ":...........................................................................................................:...............:...............:...............:...........:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":.......................................................................................................................................................................:"
          ],
          [
            ":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::"
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf15f;&#xf248;&#xf148;&#xf175;&#xf24a;&#xf205;&#xf231;&#xf24a;&#xf206;&#xf22d;&#xf248;&#xf154;&#xf246;&#xf205;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf20b;&#xf234;&#xf204;&#xf223;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf215;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf20b;&#xf234;&#xf204;&#xf223;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf215;&#xf204;&#xf205;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf240;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf223;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf20b;&#xf234;&#xf204;&#xf223;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf215;&#xf204;&#xf205;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf205;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf243;&#xf23c;&#xf204;&#xf205;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf214;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf240;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf223;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf23c;&#xf204;&#xf204;&#xf204;&#xf204;&#xf212;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf208;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf20b;&#xf243;&#xf23c;&#xf223;&#xf243;&#xf225;&#xf243;&#xf242;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf20b;&#xf234;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf207;&#xf224;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf213;&#xf243;&#xf234;&#xf243;&#xf243;&#xf207;&#xf243;&#xf240;&#xf213;&#xf243;&#xf234;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf213;&#xf243;&#xf224;&#xf243;&#xf242;&#xf207;&#xf243;&#xf23c;&#xf213;&#xf243;&#xf224;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf204;&#xf204;&#xf208;&#xf204;&#xf204;&#xf214;&#xf204;&#xf205;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf204;&#xf205;&#xf245;&#xf246;&#xf205;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf243;&#xf245;&#xf24b;",
    "stanza": 1677
  },
  {
    "role": "code",
    "lines": [
      "equal $cos_d_gate | distill-circuit $cos_d_image;"
    ],
    "preprocessed": "equal $cos_d_gate | distill-circuit $cos_d_image;",
    "dt": false,
    "parse": [
      "equal",
      [
        -2,
        "cos_d_gate"
      ],
      [
        -1,
        "distill-circuit",
        [
          -2,
          "cos_d_image"
        ]
      ]
    ],
    "code": "12100031231210101101030231210100110131231210101101132233",
    "spider": "&#xf14c;&#xf249;&#xf149;&#xf15e;&#xf248;&#xf149;&#xf151;&#xf249;&#xf149;&#xf15f;&#xf24b;",
    "stanza": 1678
  },
  {
    "role": "gate",
    "lines": [
      ">>> COS_D.gate",
      "11 2 1 0 1",
      "13 4 1 0 1",
      "9 2 1 0 1",
      "11 4 1 0 1",
      "19 12 1 0 1",
      "7 2 1 0 1",
      "11 6 1 0 1",
      "13 8 1 0 0",
      "15 10 -1 0 1",
      "17 12 1 0 1",
      "5 2 1 0 1",
      "9 6 1 0 1",
      "11 8 1 0 1",
      "13 10 -1 0 1",
      "15 12 1 0 1",
      "3 2 1 0 1",
      "7 6 1 0 1",
      "11 10 -1 0 1",
      "13 12 1 0 1",
      "1 2 1 0 1",
      "5 6 1 0 1",
      "3 6 1 0 1",
      "1 6 1 0 1",
      "14 1 0 1 1",
      "12 1 0 1 1",
      "14 3 0 1 1",
      "12 3 0 1 0",
      "14 5 0 1 0",
      "14 7 0 1 0",
      "10 5 0 -1 1",
      "12 7 0 1 1",
      "14 9 0 1 0",
      "10 9 0 -1 1",
      "12 11 0 1 1"
    ],
    "thumbnail": "COS_D.gif",
    "page": "COS_D.html",
    "stanza": 1679
  },
  {
    "role": "file",
    "lines": [
      "== COS_UnlessProbe =="
    ],
    "stanza": 1680
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "probing networks of unless gates",
    "section_category": "GATE",
    "section_index": 52,
    "stanza": 1681
  },
  {
    "role": "code",
    "lines": [
      "define set-input | ? circuit | ? index | ? value |",
      "  assign wire (list-ref $circuit $index) |",
      "  map (? w | if (not | equal $w $wire) $w |",
      "         vector (list-ref $w 0)",
      "             (list-ref $w 1)",
      "                (list-ref $w 2)    ",
      "            (list-ref $w 3)",
      "            $value)",
      "      $circuit;"
    ],
    "preprocessed": "define set-input | ? circuit | ? index | ? value |\n  assign wire (list-ref $circuit $index) |\n  map (? w | if (not | equal $w $wire) $w |\n         vector (list-ref $w 0)\n             (list-ref $w 1)\n                (list-ref $w 2)    \n            (list-ref $w 3)\n            $value)\n      $circuit;",
    "dt": true,
    "parse": [
      "define",
      "set-input",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "?",
          "index",
          [
            -1,
            "?",
            "value",
            [
              -1,
              "assign",
              "wire",
              [
                "list-ref",
                [
                  -2,
                  "circuit"
                ],
                [
                  -2,
                  "index"
                ]
              ],
              [
                -1,
                "map",
                [
                  "?",
                  "w",
                  [
                    -1,
                    "if",
                    [
                      "not",
                      [
                        -1,
                        "equal",
                        [
                          -2,
                          "w"
                        ],
                        [
                          -2,
                          "wire"
                        ]
                      ]
                    ],
                    [
                      -2,
                      "w"
                    ],
                    [
                      -1,
                      "vector",
                      [
                        "list-ref",
                        [
                          -2,
                          "w"
                        ],
                        "0"
                      ],
                      [
                        "list-ref",
                        [
                          -2,
                          "w"
                        ],
                        "1"
                      ],
                      [
                        "list-ref",
                        [
                          -2,
                          "w"
                        ],
                        "2"
                      ],
                      [
                        "list-ref",
                        [
                          -2,
                          "w"
                        ],
                        "3"
                      ],
                      [
                        -2,
                        "value"
                      ]
                    ]
                  ]
                ],
                [
                  -2,
                  "circuit"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121010111003023121100312100011100302312110031210101110130231211003121010111103023121110312101011111321210100113123121000111003123121010111013302312101100132121100312100110011302312111132121013023121000312312100110011312312101011111331231210011001130231210000321210100113123121001100113020332121010011312312100110011302133212101001131231210011001130210332121010011312312100110011302113312312101011110331231210001110032233",
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf160;&#xf248;&#xf150;&#xf24a;&#xf148;&#xf160;&#xf248;&#xf150;&#xf24a;&#xf149;&#xf161;&#xf248;&#xf150;&#xf24a;&#xf149;&#xf162;&#xf248;&#xf152;&#xf24a;&#xf149;&#xf163;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf160;&#xf249;&#xf149;&#xf161;&#xf245;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf148;&#xf177;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf14c;&#xf249;&#xf148;&#xf177;&#xf249;&#xf149;&#xf163;&#xf245;&#xf249;&#xf148;&#xf177;&#xf248;&#xf154;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf177;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf177;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf177;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf177;&#xf24a;&#xf207;&#xf245;&#xf249;&#xf149;&#xf162;&#xf245;&#xf249;&#xf148;&#xf160;&#xf24b;",
    "stanza": 1682
  },
  {
    "role": "code",
    "lines": [
      "define read-output | ? circuit | ? index |",
      "  assign len (list-length $circuit) |",
      "  assign wire (list-ref $circuit | - (- $len 1) $index) |",
      "  list-ref $wire 4;"
    ],
    "preprocessed": "define read-output | ? circuit | ? index |\n  assign len (list-length $circuit) |\n  assign wire (list-ref $circuit | - (- $len 1) $index) |\n  list-ref $wire 4;",
    "dt": true,
    "parse": [
      "define",
      "read-output",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "?",
          "index",
          [
            -1,
            "assign",
            "len",
            [
              "list-length",
              [
                -2,
                "circuit"
              ]
            ],
            [
              -1,
              "assign",
              "wire",
              [
                "list-ref",
                [
                  -2,
                  "circuit"
                ],
                [
                  -1,
                  "-",
                  [
                    "-",
                    [
                      -2,
                      "len"
                    ],
                    "1"
                  ],
                  [
                    -2,
                    "index"
                  ]
                ]
              ],
              [
                -1,
                "list-ref",
                [
                  -2,
                  "wire"
                ],
                "4"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312101100000302312110031210001110030231211003121010111013023121110312101100001321210100103123121000111003302312111031210101111132121010011312312100011100302312101132121011312312101100001302133123121010111013302312101001131231210101111130210032233",
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf164;&#xf248;&#xf150;&#xf24a;&#xf148;&#xf160;&#xf248;&#xf150;&#xf24a;&#xf149;&#xf161;&#xf248;&#xf152;&#xf24a;&#xf149;&#xf165;&#xf246;&#xf145;&#xf156;&#xf249;&#xf148;&#xf160;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf149;&#xf163;&#xf246;&#xf145;&#xf157;&#xf249;&#xf148;&#xf160;&#xf248;&#xf14f;&#xf246;&#xf14f;&#xf249;&#xf149;&#xf165;&#xf24a;&#xf205;&#xf245;&#xf249;&#xf149;&#xf161;&#xf245;&#xf248;&#xf145;&#xf157;&#xf249;&#xf149;&#xf163;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 1683
  },
  {
    "role": "code",
    "lines": [
      "define sim | ? circuit | ? steps | ? setter |",
      "  if (= $steps 0) $circuit |",
      "  sim (simulate-unless | setter $circuit) (- $steps 1) $setter;"
    ],
    "preprocessed": "define sim | ? circuit | ? steps | ? setter |\n  if (= $steps 0) $circuit |\n  sim (simulate-unless | setter $circuit) (- $steps 1) $setter;",
    "dt": true,
    "parse": [
      "define",
      "sim",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "?",
          "steps",
          [
            -1,
            "?",
            "setter",
            [
              -1,
              "if",
              [
                "=",
                [
                  -2,
                  "steps"
                ],
                "0"
              ],
              [
                -2,
                "circuit"
              ],
              [
                -1,
                "sim",
                [
                  "simulate-unless",
                  [
                    -1,
                    "setter",
                    [
                      -2,
                      "circuit"
                    ]
                  ]
                ],
                [
                  "-",
                  [
                    -2,
                    "steps"
                  ],
                  "1"
                ],
                [
                  -2,
                  "setter"
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210110001030231211003121000111003023121100312101100011302312110031210110010030231211113212113123121011000113020331231210001110030231210110001032121001010113023121011001003123121000111003321210113123121011000113021331231210110010032233",
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf166;&#xf248;&#xf150;&#xf24a;&#xf148;&#xf160;&#xf248;&#xf150;&#xf24a;&#xf149;&#xf167;&#xf248;&#xf150;&#xf24a;&#xf149;&#xf168;&#xf248;&#xf153;&#xf246;&#xf147;&#xf249;&#xf149;&#xf167;&#xf24a;&#xf204;&#xf245;&#xf249;&#xf148;&#xf160;&#xf248;&#xf149;&#xf166;&#xf246;&#xf148;&#xf16f;&#xf248;&#xf149;&#xf168;&#xf249;&#xf148;&#xf160;&#xf245;&#xf246;&#xf14f;&#xf249;&#xf149;&#xf167;&#xf24a;&#xf205;&#xf245;&#xf249;&#xf149;&#xf168;&#xf24b;",
    "stanza": 1684
  },
  {
    "role": "code",
    "lines": [
      "define smart-sim | ? circuit | ? setter |",
      "  sim $circuit (list-length $circuit) $setter;"
    ],
    "preprocessed": "define smart-sim | ? circuit | ? setter |\n  sim $circuit (list-length $circuit) $setter;",
    "dt": true,
    "parse": [
      "define",
      "smart-sim",
      [
        -1,
        "?",
        "circuit",
        [
          -1,
          "?",
          "setter",
          [
            -1,
            "sim",
            [
              -2,
              "circuit"
            ],
            [
              "list-length",
              [
                -2,
                "circuit"
              ]
            ],
            [
              -2,
              "setter"
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121011001013023121100312100011100302312110031210110010030231210110001031231210001110032121010010312312100011100331231210110010032233",
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf169;&#xf248;&#xf150;&#xf24a;&#xf148;&#xf160;&#xf248;&#xf150;&#xf24a;&#xf149;&#xf168;&#xf248;&#xf149;&#xf166;&#xf249;&#xf148;&#xf160;&#xf246;&#xf145;&#xf156;&#xf249;&#xf148;&#xf160;&#xf245;&#xf249;&#xf149;&#xf168;&#xf24b;",
    "stanza": 1685
  },
  {
    "role": "comment",
    "lines": [
      "# test cos_not gate"
    ],
    "stanza": 1686
  },
  {
    "role": "code",
    "lines": [
      "define cos_not_harness | ? x |",
      "  assign c $cos_not_gate | ",
      "  assign c (smart-sim $c | ? c | set-input $c 0 $x) |",
      "  read-output $c 0;"
    ],
    "preprocessed": "define cos_not_harness | ? x |\n  assign c $cos_not_gate | \n  assign c (smart-sim $c | ? c | set-input $c 0 $x) |\n  read-output $c 0;",
    "dt": true,
    "parse": [
      "define",
      "cos_not_harness",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "assign",
          "c",
          [
            -2,
            "cos_not_gate"
          ],
          [
            -1,
            "assign",
            "c",
            [
              "smart-sim",
              [
                -2,
                "c"
              ],
              [
                -1,
                "?",
                "c",
                [
                  -1,
                  "set-input",
                  [
                    -2,
                    "c"
                  ],
                  "0",
                  [
                    -2,
                    "x"
                  ]
                ]
              ]
            ],
            [
              -1,
              "read-output",
              [
                -2,
                "c"
              ],
              "0"
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121011001103023121100312101001302312111031210001013123121010011103023121110312100010132121011001013123121000101302312110031210001013023121010111003123121000101302031231210100133023121011000003123121000101302032233",
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf16a;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf152;&#xf24a;&#xf145;&#xf149;&#xf249;&#xf149;&#xf152;&#xf248;&#xf152;&#xf24a;&#xf145;&#xf149;&#xf246;&#xf149;&#xf169;&#xf249;&#xf145;&#xf149;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf149;&#xf248;&#xf149;&#xf160;&#xf249;&#xf145;&#xf149;&#xf24a;&#xf204;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf149;&#xf164;&#xf249;&#xf145;&#xf149;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1687
  },
  {
    "role": "code",
    "lines": [
      "= $false | cos_not_harness $true;"
    ],
    "preprocessed": "= $false | cos_not_harness $true;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -1,
        "cos_not_harness",
        [
          -2,
          "true"
        ]
      ]
    ],
    "code": "12113123120302312101100110312312132233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf248;&#xf149;&#xf16a;&#xf249;&#xf145;&#xf24b;",
    "stanza": 1688
  },
  {
    "role": "code",
    "lines": [
      "= $true | cos_not_harness $false;"
    ],
    "preprocessed": "= $true | cos_not_harness $false;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        -1,
        "cos_not_harness",
        [
          -2,
          "false"
        ]
      ]
    ],
    "code": "12113123121302312101100110312312032233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf248;&#xf149;&#xf16a;&#xf249;&#xf144;&#xf24b;",
    "stanza": 1689
  },
  {
    "role": "comment",
    "lines": [
      "# test cos_and gate"
    ],
    "stanza": 1690
  },
  {
    "role": "code",
    "lines": [
      "define cos_and_harness | ? x | ? y |",
      "  assign c $cos_and_gate | ",
      "  assign c (smart-sim $c | ? c | set-input (set-input $c 0 $x) 1 $y) |",
      "  read-output $c 0;"
    ],
    "preprocessed": "define cos_and_harness | ? x | ? y |\n  assign c $cos_and_gate | \n  assign c (smart-sim $c | ? c | set-input (set-input $c 0 $x) 1 $y) |\n  read-output $c 0;",
    "dt": true,
    "parse": [
      "define",
      "cos_and_harness",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "assign",
            "c",
            [
              -2,
              "cos_and_gate"
            ],
            [
              -1,
              "assign",
              "c",
              [
                "smart-sim",
                [
                  -2,
                  "c"
                ],
                [
                  -1,
                  "?",
                  "c",
                  [
                    -1,
                    "set-input",
                    [
                      "set-input",
                      [
                        -2,
                        "c"
                      ],
                      "0",
                      [
                        -2,
                        "x"
                      ]
                    ],
                    "1",
                    [
                      -2,
                      "y"
                    ]
                  ]
                ]
              ],
              [
                -1,
                "read-output",
                [
                  -2,
                  "c"
                ],
                "0"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121011001113023121100312101001302312110031210000013023121110312100010131231210101000030231211103121000101321210110010131231210001013023121100312100010130231210101110032121010111003123121000101302031231210100133021312312100000133023121011000003123121000101302032233",
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf16b;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf152;&#xf24a;&#xf145;&#xf149;&#xf249;&#xf149;&#xf154;&#xf248;&#xf152;&#xf24a;&#xf145;&#xf149;&#xf246;&#xf149;&#xf169;&#xf249;&#xf145;&#xf149;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf149;&#xf248;&#xf149;&#xf160;&#xf246;&#xf149;&#xf160;&#xf249;&#xf145;&#xf149;&#xf24a;&#xf204;&#xf249;&#xf16d;&#xf245;&#xf205;&#xf249;&#xf145;&#xf145;&#xf245;&#xf248;&#xf149;&#xf164;&#xf249;&#xf145;&#xf149;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1691
  },
  {
    "role": "code",
    "lines": [
      "= $false | cos_and_harness $false $false;"
    ],
    "preprocessed": "= $false | cos_and_harness $false $false;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -1,
        "cos_and_harness",
        [
          -2,
          "false"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "code": "121131231203023121011001113123120312312032233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf248;&#xf149;&#xf16b;&#xf249;&#xf144;&#xf249;&#xf144;&#xf24b;",
    "stanza": 1692
  },
  {
    "role": "code",
    "lines": [
      "= $false | cos_and_harness $false $true;"
    ],
    "preprocessed": "= $false | cos_and_harness $false $true;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -1,
        "cos_and_harness",
        [
          -2,
          "false"
        ],
        [
          -2,
          "true"
        ]
      ]
    ],
    "code": "121131231203023121011001113123120312312132233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf248;&#xf149;&#xf16b;&#xf249;&#xf144;&#xf249;&#xf145;&#xf24b;",
    "stanza": 1693
  },
  {
    "role": "code",
    "lines": [
      "= $false | cos_and_harness $true $false;"
    ],
    "preprocessed": "= $false | cos_and_harness $true $false;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "false"
      ],
      [
        -1,
        "cos_and_harness",
        [
          -2,
          "true"
        ],
        [
          -2,
          "false"
        ]
      ]
    ],
    "code": "121131231203023121011001113123121312312032233",
    "spider": "&#xf147;&#xf249;&#xf144;&#xf248;&#xf149;&#xf16b;&#xf249;&#xf145;&#xf249;&#xf144;&#xf24b;",
    "stanza": 1694
  },
  {
    "role": "code",
    "lines": [
      "= $true | cos_and_harness $true $true;"
    ],
    "preprocessed": "= $true | cos_and_harness $true $true;",
    "dt": false,
    "parse": [
      "=",
      [
        -2,
        "true"
      ],
      [
        -1,
        "cos_and_harness",
        [
          -2,
          "true"
        ],
        [
          -2,
          "true"
        ]
      ]
    ],
    "code": "121131231213023121011001113123121312312132233",
    "spider": "&#xf147;&#xf249;&#xf145;&#xf248;&#xf149;&#xf16b;&#xf249;&#xf145;&#xf249;&#xf145;&#xf24b;",
    "stanza": 1695
  },
  {
    "role": "comment",
    "lines": [
      "# this code is more awkward than it needs to be -",
      "# should make circuits mutable"
    ],
    "stanza": 1696
  },
  {
    "role": "file",
    "lines": [
      "== COS_CommentBase3 =="
    ],
    "stanza": 1697
  },
  {
    "role": "comment",
    "lines": [
      "# The following parts of the message start",
      "# to introduce some self-reference into the message"
    ],
    "section_description": "end of part 3, start of part 4",
    "section_category": "NOTE",
    "section_index": 53,
    "stanza": 1698
  },
  {
    "role": "code",
    "lines": [
      "intro part4;"
    ],
    "preprocessed": "intro part4;",
    "dt": false,
    "parse": [
      "intro",
      "part4"
    ],
    "code": "121001031210110100032233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf16c;&#xf24b;",
    "stanza": 1699
  },
  {
    "role": "file",
    "lines": [
      "== COS_Message =="
    ],
    "stanza": 1700
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "a mechanism for referring to parts of the message",
    "section_category": "SELF",
    "section_index": 54,
    "stanza": 1701
  },
  {
    "role": "comment",
    "lines": [
      "# Many choices for how to do this.",
      "# Could do it without special machinery by using the",
      "# standard A-B trick for giving e.g. a Turing machine",
      "# access to its own description.",
      "# Instead, will simply introduce a \"primer\" function",
      "# that gives access to every statement made so far",
      "# (question: should future statements be included?",
      "# tentatively assume YES: will simplify",
      "# discussion of creating modified copies of the",
      "# complete message)."
    ],
    "stanza": 1702
  },
  {
    "role": "comment",
    "lines": [
      "# For now, assume primer is a list of statements,",
      "# with each statement being a list in the same",
      "# form as \"translate\" functions expect.",
      "# This means that there is, for now, no",
      "# distinction between unary or binary,",
      "# and the \"|\" structure is expanded."
    ],
    "stanza": 1703
  },
  {
    "role": "code",
    "lines": [
      "intro primer;"
    ],
    "preprocessed": "intro primer;",
    "dt": false,
    "parse": [
      "intro",
      "primer"
    ],
    "code": "121001031210001132233",
    "spider": "&#xf156;&#xf24a;&#xf167;&#xf24b;",
    "stanza": 1704
  },
  {
    "role": "comment",
    "lines": [
      "# this line is referred to later - change/move carefully"
    ],
    "stanza": 1705
  },
  {
    "role": "code",
    "lines": [
      "equal (list-ref $primer 0) | vector intro unary;"
    ],
    "preprocessed": "equal (list-ref $primer 0) | vector intro unary;",
    "dt": false,
    "parse": [
      "equal",
      [
        "list-ref",
        [
          -2,
          "primer"
        ],
        "0"
      ],
      [
        -1,
        "vector",
        "intro",
        "unary"
      ]
    ],
    "code": "121000321210100113123121000113020330231210000312100103121111111132233",
    "spider": "&#xf14c;&#xf246;&#xf145;&#xf157;&#xf249;&#xf167;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf156;&#xf24a;&#xf147;&#xf183;&#xf24b;",
    "stanza": 1706
  },
  {
    "role": "code",
    "lines": [
      "equal (list-ref $primer 1) | vector intro is:int;"
    ],
    "preprocessed": "equal (list-ref $primer 1) | vector intro is:int;",
    "dt": false,
    "parse": [
      "equal",
      [
        "list-ref",
        [
          -2,
          "primer"
        ],
        "1"
      ],
      [
        -1,
        "vector",
        "intro",
        "is:int"
      ]
    ],
    "code": "1210003212101001131231210001130213302312100003121001031212111101312111110332233",
    "spider": "&#xf14c;&#xf246;&#xf145;&#xf157;&#xf249;&#xf167;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf156;&#xf24a;&#xf181;&#xf182;&#xf24b;",
    "stanza": 1707
  },
  {
    "role": "code",
    "lines": [
      "equal (list-ref $primer 2) | vector is:int | vector unary 0;"
    ],
    "preprocessed": "equal (list-ref $primer 2) | vector is:int | vector unary 0;",
    "dt": false,
    "parse": [
      "equal",
      [
        "list-ref",
        [
          -2,
          "primer"
        ],
        "2"
      ],
      [
        -1,
        "vector",
        "is:int",
        [
          -1,
          "vector",
          "unary",
          "0"
        ]
      ]
    ],
    "code": "12100032121010011312312100011302103302312100003121211110131211111033023121000031211111111302032233",
    "spider": "&#xf14c;&#xf246;&#xf145;&#xf157;&#xf249;&#xf167;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf181;&#xf182;&#xf248;&#xf154;&#xf24a;&#xf147;&#xf183;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1708
  },
  {
    "role": "code",
    "lines": [
      "equal (list-ref $primer 3) | vector is:int | vector unary 1 0;"
    ],
    "preprocessed": "equal (list-ref $primer 3) | vector is:int | vector unary 1 0;",
    "dt": false,
    "parse": [
      "equal",
      [
        "list-ref",
        [
          -2,
          "primer"
        ],
        "3"
      ],
      [
        -1,
        "vector",
        "is:int",
        [
          -1,
          "vector",
          "unary",
          "1",
          "0"
        ]
      ]
    ],
    "code": "121000321210100113123121000113021133023121000031212111101312111110330231210000312111111113021302032233",
    "spider": "&#xf14c;&#xf246;&#xf145;&#xf157;&#xf249;&#xf167;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf181;&#xf182;&#xf248;&#xf154;&#xf24a;&#xf147;&#xf183;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1709
  },
  {
    "role": "code",
    "lines": [
      "assign idx (list:find $primer | vector intro primer) |",
      "  equal (list-ref $primer | + $idx 1) |",
      "    quote @@ | equal (list-ref $primer 0) | vector intro unary;"
    ],
    "preprocessed": "assign idx (list:find $primer | vector intro primer) |\n  equal (list-ref $primer | + $idx 1) |\n    quote @@ | equal (list-ref $primer 0) | vector intro unary;",
    "dt": false,
    "parse": [
      "assign",
      "idx",
      [
        "list:find",
        [
          -2,
          "primer"
        ],
        [
          -1,
          "vector",
          "intro",
          "primer"
        ]
      ],
      [
        -1,
        "equal",
        [
          "list-ref",
          [
            -2,
            "primer"
          ],
          [
            -1,
            "+",
            [
              -2,
              "idx"
            ],
            "1"
          ]
        ],
        [
          -1,
          "quote",
          "@@",
          [
            -1,
            "equal",
            [
              "list-ref",
              [
                -2,
                "primer"
              ],
              "0"
            ],
            [
              -1,
              "vector",
              "intro",
              "unary"
            ]
          ]
        ]
      ]
    ],
    "code": "12111031211101111321212100110131210111003312312100011302312100003121001031210001133023121000321210100113123121000113023121010312312111011113021330231210010000312110000013023121000321210100113123121000113020330231210000312100103121111111132233",
    "spider": "&#xf152;&#xf24a;&#xf147;&#xf173;&#xf246;&#xf145;&#xf151;&#xf145;&#xf160;&#xf249;&#xf167;&#xf248;&#xf154;&#xf24a;&#xf156;&#xf24a;&#xf167;&#xf245;&#xf248;&#xf14c;&#xf246;&#xf145;&#xf157;&#xf249;&#xf167;&#xf248;&#xf14e;&#xf249;&#xf147;&#xf173;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf146;&#xf154;&#xf24a;&#xf147;&#xf145;&#xf248;&#xf14c;&#xf246;&#xf145;&#xf157;&#xf249;&#xf167;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf154;&#xf24a;&#xf156;&#xf24a;&#xf147;&#xf183;&#xf24b;",
    "stanza": 1710
  },
  {
    "role": "comment",
    "lines": [
      "# Now, we could return to the MUD, simulate an agent A",
      "# transferring a copy of the primer to another agent B,",
      "# and then show B making a modified copy of that primer",
      "# and passing it back to A."
    ],
    "stanza": 1711
  },
  {
    "role": "comment",
    "lines": [
      "# We could also show agents experimenting with the",
      "# primer in various ways."
    ],
    "stanza": 1712
  },
  {
    "role": "file",
    "lines": [
      "== COS_MARK =="
    ],
    "stanza": 1713
  },
  {
    "role": "comment",
    "lines": [
      "# Message is pretty solid up to this point.",
      "# For testing purposes, useful to save state here to disk,",
      "# command: DISK-SAVE base"
    ],
    "stanza": 1714
  },
  {
    "role": "file",
    "lines": [
      "== COS_JavaPrep =="
    ],
    "stanza": 1715
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "some preparatory work for integrating with Java code",
    "section_category": "JAVA",
    "section_index": 55,
    "stanza": 1716
  },
  {
    "role": "code",
    "lines": [
      "intro Object;"
    ],
    "preprocessed": "intro Object;",
    "dt": false,
    "parse": [
      "intro",
      "Object"
    ],
    "code": "121001031210110100132233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf16d;&#xf24b;",
    "stanza": 1717
  },
  {
    "role": "code",
    "lines": [
      "class Object ()",
      "   (method add-one | ? x | + $x 1)",
      "   (method unknown | ? x $x)",
      "   (method <init>-V $self)",
      "   (method <init> $self)",
      "   (method classname Object)",
      "   (method equals-Object-Z | this ==)",
      "   (method equals | self equals-Object-Z)",
      "   (method act $true)",
      "   (method isobj $true);"
    ],
    "preprocessed": "class Object ()\n   (method add-one | ? x | + $x 1)\n   (method unknown | ? x $x)\n   (method <init>-V $self)\n   (method <init> $self)\n   (method classname Object)\n   (method equals-Object-Z | this ==)\n   (method equals | self equals-Object-Z)\n   (method act $true)\n   (method isobj $true);",
    "dt": true,
    "parse": [
      "class",
      "Object",
      [],
      [
        "method",
        "add-one",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "+",
            [
              -2,
              "x"
            ],
            "1"
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          -1,
          "?",
          "x",
          [
            -2,
            "x"
          ]
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          -2,
          "self"
        ]
      ],
      [
        "method",
        "<init>",
        [
          -2,
          "self"
        ]
      ],
      [
        "method",
        "classname",
        "Object"
      ],
      [
        "method",
        "equals-Object-Z",
        [
          -1,
          "this",
          "=="
        ]
      ],
      [
        "method",
        "equals",
        [
          -1,
          "self",
          "equals-Object-Z"
        ]
      ],
      [
        "method",
        "act",
        [
          -2,
          "true"
        ]
      ],
      [
        "method",
        "isobj",
        [
          -2,
          "true"
        ]
      ]
    ],
    "code": "1211001100312101101001323212110000103121011010103023121100312101001302312101031231210100130213321211000010312110001003023121100312101001312312101001332121100001031210110101131231210100101332121100001031210110110031231210100101332121100001031211000011312101101001332121100001031210110110130231210111110312110001103321211000010312101101110302312101001013121011011013321211000010312101101111312312133212110000103121011100003123121332233",
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf149;&#xf16d;&#xf246;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf16e;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14e;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf148;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf16f;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf170;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf147;&#xf24a;&#xf149;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf171;&#xf248;&#xf146;&#xf182;&#xf24a;&#xf147;&#xf14a;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf172;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf149;&#xf171;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf173;&#xf249;&#xf145;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf174;&#xf249;&#xf145;&#xf245;&#xf24b;",
    "stanza": 1718
  },
  {
    "role": "code",
    "lines": [
      "define java-object $Object;"
    ],
    "preprocessed": "define java-object $Object;",
    "dt": true,
    "parse": [
      "define",
      "java-object",
      [
        -2,
        "Object"
      ]
    ],
    "code": "12110131210111000131231210110100132233",
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf175;&#xf249;&#xf149;&#xf16d;&#xf24b;",
    "stanza": 1719
  },
  {
    "role": "code",
    "lines": [
      "define act | ? x $true;"
    ],
    "preprocessed": "define act | ? x $true;",
    "dt": true,
    "parse": [
      "define",
      "act",
      [
        -1,
        "?",
        "x",
        [
          -2,
          "true"
        ]
      ]
    ],
    "code": "1211013121011011113023121100312101001312312132233",
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf173;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf249;&#xf145;&#xf24b;",
    "stanza": 1720
  },
  {
    "role": "comment",
    "lines": [
      "# inconsistency of various kinds of equality throughout message",
      "# needs to be cleaned up"
    ],
    "stanza": 1721
  },
  {
    "role": "code",
    "lines": [
      "intro Integer;"
    ],
    "preprocessed": "intro Integer;",
    "dt": false,
    "parse": [
      "intro",
      "Integer"
    ],
    "code": "121001031210111001032233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf176;&#xf24b;",
    "stanza": 1722
  },
  {
    "role": "code",
    "lines": [
      "class Integer ()",
      "   (field super | java-object new)",
      "   (field value | cell new 0)",
      "   (method <init> $self)",
      "   (method <init>-V $self)",
      "   (method <init>-I-V | ? v | begin (value set $v) $self)",
      "   (method intValue-V | value get)",
      "   (method intValue | self intValue-V)",
      "   (method equals-Object-Z | ? o |",
      "      if (not | = Integer | o classname) $false |",
      "      = (value get) (o value get))",
      "   (method equals | self equals-Object-Z)",
      "   (method get | value get)",
      "   (method set | ? x | value set | if (number? $x) $x | x intValue)",
      "   (method classname Integer)",
      "   (method unknown | ? x | super $x);"
    ],
    "preprocessed": "class Integer ()\n   (field super | java-object new)\n   (field value | cell new 0)\n   (method <init> $self)\n   (method <init>-V $self)\n   (method <init>-I-V | ? v | begin (value set $v) $self)\n   (method intValue-V | value get)\n   (method intValue | self intValue-V)\n   (method equals-Object-Z | ? o |\n      if (not | = Integer | o classname) $false |\n      = (value get) (o value get))\n   (method equals | self equals-Object-Z)\n   (method get | value get)\n   (method set | ? x | value set | if (number? $x) $x | x intValue)\n   (method classname Integer)\n   (method unknown | ? x | super $x);",
    "dt": true,
    "parse": [
      "class",
      "Integer",
      [],
      [
        "field",
        "super",
        [
          -1,
          "java-object",
          "new"
        ]
      ],
      [
        "field",
        "value",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "<init>",
        [
          -2,
          "self"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          -2,
          "self"
        ]
      ],
      [
        "method",
        "<init>-I-V",
        [
          -1,
          "?",
          "v",
          [
            -1,
            "begin",
            [
              "value",
              "set",
              [
                -2,
                "v"
              ]
            ],
            [
              -2,
              "self"
            ]
          ]
        ]
      ],
      [
        "method",
        "intValue-V",
        [
          -1,
          "value",
          "get"
        ]
      ],
      [
        "method",
        "intValue",
        [
          -1,
          "self",
          "intValue-V"
        ]
      ],
      [
        "method",
        "equals-Object-Z",
        [
          -1,
          "?",
          "o",
          [
            -1,
            "if",
            [
              "not",
              [
                -1,
                "=",
                "Integer",
                [
                  -1,
                  "o",
                  "classname"
                ]
              ]
            ],
            [
              -2,
              "false"
            ],
            [
              -1,
              "=",
              [
                "value",
                "get"
              ],
              [
                "o",
                "value",
                "get"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "equals",
        [
          -1,
          "self",
          "equals-Object-Z"
        ]
      ],
      [
        "method",
        "get",
        [
          -1,
          "value",
          "get"
        ]
      ],
      [
        "method",
        "set",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "value",
            "set",
            [
              -1,
              "if",
              [
                "number?",
                [
                  -2,
                  "x"
                ]
              ],
              [
                -2,
                "x"
              ],
              [
                -1,
                "x",
                "intValue"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "classname",
        "Integer"
      ],
      [
        "method",
        "unknown",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "super",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf149;&#xf176;&#xf246;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf146;&#xf178;&#xf248;&#xf149;&#xf175;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf149;&#xf162;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf170;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf16f;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf177;&#xf248;&#xf150;&#xf24a;&#xf179;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf149;&#xf162;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf179;&#xf245;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf178;&#xf248;&#xf149;&#xf162;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf179;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf149;&#xf178;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf171;&#xf248;&#xf150;&#xf24a;&#xf149;&#xf17a;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf147;&#xf24a;&#xf149;&#xf176;&#xf248;&#xf149;&#xf17a;&#xf24a;&#xf147;&#xf147;&#xf245;&#xf249;&#xf144;&#xf248;&#xf147;&#xf246;&#xf149;&#xf162;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf246;&#xf149;&#xf17a;&#xf24a;&#xf149;&#xf162;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf172;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf149;&#xf171;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf145;&#xf17d;&#xf248;&#xf149;&#xf162;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf149;&#xf162;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf153;&#xf246;&#xf15c;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf16d;&#xf248;&#xf16d;&#xf24a;&#xf149;&#xf179;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf147;&#xf24a;&#xf149;&#xf176;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf148;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf178;&#xf249;&#xf16d;&#xf245;&#xf24b;",
    "stanza": 1723
  },
  {
    "role": "comment",
    "lines": [
      "# string is basically the same as an integer"
    ],
    "stanza": 1724
  },
  {
    "role": "code",
    "lines": [
      "intro String;"
    ],
    "preprocessed": "intro String;",
    "dt": false,
    "parse": [
      "intro",
      "String"
    ],
    "code": "121001031210111011132233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf17b;&#xf24b;",
    "stanza": 1725
  },
  {
    "role": "code",
    "lines": [
      "class String ()",
      "   (field super | java-object new)",
      "   (field value | cell new 0)",
      "   (method <init> $self)",
      "   (method <init>-V $self)",
      "   (method <init>-String-V | ? v | begin (value set | v value get) $self)",
      "   (method int-init | ? x | begin (value set $x) $self)",
      "   (method intValue-V | value get)",
      "   (method intValue | self intValue-V)",
      "   (method equals-Object-Z | ? o |",
      "      if (not | = String | o classname) $false |",
      "      = (value get) (o value get))",
      "   (method equals | self equals-Object-Z)",
      "   (method get | value get)",
      "   (method set | ? x | value set | if (number? $x) $x | x intValue)",
      "   (method classname String)",
      "   (method unknown | ? x | super $x);"
    ],
    "preprocessed": "class String ()\n   (field super | java-object new)\n   (field value | cell new 0)\n   (method <init> $self)\n   (method <init>-V $self)\n   (method <init>-String-V | ? v | begin (value set | v value get) $self)\n   (method int-init | ? x | begin (value set $x) $self)\n   (method intValue-V | value get)\n   (method intValue | self intValue-V)\n   (method equals-Object-Z | ? o |\n      if (not | = String | o classname) $false |\n      = (value get) (o value get))\n   (method equals | self equals-Object-Z)\n   (method get | value get)\n   (method set | ? x | value set | if (number? $x) $x | x intValue)\n   (method classname String)\n   (method unknown | ? x | super $x);",
    "dt": true,
    "parse": [
      "class",
      "String",
      [],
      [
        "field",
        "super",
        [
          -1,
          "java-object",
          "new"
        ]
      ],
      [
        "field",
        "value",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "<init>",
        [
          -2,
          "self"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          -2,
          "self"
        ]
      ],
      [
        "method",
        "<init>-String-V",
        [
          -1,
          "?",
          "v",
          [
            -1,
            "begin",
            [
              "value",
              "set",
              [
                -1,
                "v",
                "value",
                "get"
              ]
            ],
            [
              -2,
              "self"
            ]
          ]
        ]
      ],
      [
        "method",
        "int-init",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "begin",
            [
              "value",
              "set",
              [
                -2,
                "x"
              ]
            ],
            [
              -2,
              "self"
            ]
          ]
        ]
      ],
      [
        "method",
        "intValue-V",
        [
          -1,
          "value",
          "get"
        ]
      ],
      [
        "method",
        "intValue",
        [
          -1,
          "self",
          "intValue-V"
        ]
      ],
      [
        "method",
        "equals-Object-Z",
        [
          -1,
          "?",
          "o",
          [
            -1,
            "if",
            [
              "not",
              [
                -1,
                "=",
                "String",
                [
                  -1,
                  "o",
                  "classname"
                ]
              ]
            ],
            [
              -2,
              "false"
            ],
            [
              -1,
              "=",
              [
                "value",
                "get"
              ],
              [
                "o",
                "value",
                "get"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "equals",
        [
          -1,
          "self",
          "equals-Object-Z"
        ]
      ],
      [
        "method",
        "get",
        [
          -1,
          "value",
          "get"
        ]
      ],
      [
        "method",
        "set",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "value",
            "set",
            [
              -1,
              "if",
              [
                "number?",
                [
                  -2,
                  "x"
                ]
              ],
              [
                -2,
                "x"
              ],
              [
                -1,
                "x",
                "intValue"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "classname",
        "String"
      ],
      [
        "method",
        "unknown",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "super",
            [
              -2,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "12110011003121011101113232121100101031210110100302312101110001312101100013321211001010312101011110302312100001113121011000130203321211000010312101101100312312101001013321211000010312101101011312312101001013321211000010312101111000302312110031211010130231210110113212101011110312111110030231211010131210101111031211110013312312101001013321211000010312101111001302312110031210100130231210110113212101011110312111110031231210100133123121010010133212110000103121011101003023121010111103121111001332121100001031210111010130231210100101312101110100332121100001031210110110130231211003121011101103023121111321210130231211312101110111302312101110110312110000113312312030231211321210101111031211110013321210111011031210101111031211110013332121100001031210110111030231210100101312101101101332121100001031211110013023121010111103121111001332121100001031211111003023121100312101001302312101011110312111110030231211113212110003123121010013312312101001302312101001312101110101332121100001031211000011312101110111332121100001031211000100302312110031210100130231210110100312312101001332233",
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf149;&#xf17b;&#xf246;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf146;&#xf178;&#xf248;&#xf149;&#xf175;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf149;&#xf162;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf170;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf16f;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf17c;&#xf248;&#xf150;&#xf24a;&#xf179;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf149;&#xf162;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf179;&#xf24a;&#xf149;&#xf162;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf17d;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf149;&#xf162;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf178;&#xf248;&#xf149;&#xf162;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf179;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf149;&#xf178;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf171;&#xf248;&#xf150;&#xf24a;&#xf149;&#xf17a;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf147;&#xf24a;&#xf149;&#xf17b;&#xf248;&#xf149;&#xf17a;&#xf24a;&#xf147;&#xf147;&#xf245;&#xf249;&#xf144;&#xf248;&#xf147;&#xf246;&#xf149;&#xf162;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf246;&#xf149;&#xf17a;&#xf24a;&#xf149;&#xf162;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf172;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf149;&#xf171;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf145;&#xf17d;&#xf248;&#xf149;&#xf162;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf149;&#xf162;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf153;&#xf246;&#xf15c;&#xf249;&#xf16d;&#xf245;&#xf249;&#xf16d;&#xf248;&#xf16d;&#xf24a;&#xf149;&#xf179;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf147;&#xf24a;&#xf149;&#xf17b;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf148;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf178;&#xf249;&#xf16d;&#xf245;&#xf24b;",
    "stanza": 1726
  },
  {
    "role": "comment",
    "lines": [
      "# will need to install class hierarchy, just hardcode a few things for now"
    ],
    "stanza": 1727
  },
  {
    "role": "code",
    "lines": [
      "intro java;"
    ],
    "preprocessed": "intro java;",
    "dt": false,
    "parse": [
      "intro",
      "java"
    ],
    "code": "121001031210111101032233",
    "spider": "&#xf156;&#xf24a;&#xf149;&#xf17e;&#xf24b;",
    "stanza": 1728
  },
  {
    "role": "code",
    "lines": [
      "define java | ? x | ? y |",
      "  cond ((= $y String) $String)",
      "       ((= $y Object) $java-object)",
      "       ((= $y Integer) $Integer)",
      "       $java-object;"
    ],
    "preprocessed": "define java | ? x | ? y |\n  cond ((= $y String) $String)\n       ((= $y Object) $java-object)\n       ((= $y Integer) $Integer)\n       $java-object;",
    "dt": true,
    "parse": [
      "define",
      "java",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "?",
          "y",
          [
            -1,
            "cond",
            [
              [
                "=",
                [
                  -2,
                  "y"
                ],
                "String"
              ],
              [
                -2,
                "String"
              ]
            ],
            [
              [
                "=",
                [
                  -2,
                  "y"
                ],
                "Object"
              ],
              [
                -2,
                "java-object"
              ]
            ],
            [
              [
                "=",
                [
                  -2,
                  "y"
                ],
                "Integer"
              ],
              [
                -2,
                "Integer"
              ]
            ],
            [
              -2,
              "java-object"
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121011110103023121100312101001302312110031210000013023121001011132212113123121000001312101110111331231210111011133221211312312100000131210110100133123121011100013322121131231210000013121011100103312312101110010331231210111000132233",
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf17e;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf145;&#xf145;&#xf24a;&#xf149;&#xf17b;&#xf245;&#xf249;&#xf149;&#xf17b;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf145;&#xf145;&#xf24a;&#xf149;&#xf16d;&#xf245;&#xf249;&#xf149;&#xf175;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf145;&#xf145;&#xf24a;&#xf149;&#xf176;&#xf245;&#xf249;&#xf149;&#xf176;&#xf245;&#xf249;&#xf149;&#xf175;&#xf24b;",
    "stanza": 1729
  },
  {
    "role": "code",
    "lines": [
      "(java util String) new isobj;"
    ],
    "preprocessed": "(java util String) new isobj;",
    "dt": false,
    "parse": [
      [
        "java",
        "util",
        "String"
      ],
      "new",
      "isobj"
    ],
    "code": "21210111101031210111101131210111011133121011000131210111000032233",
    "spider": "&#xf246;&#xf149;&#xf17e;&#xf24a;&#xf149;&#xf17f;&#xf24a;&#xf149;&#xf17b;&#xf245;&#xf146;&#xf175;&#xf24a;&#xf149;&#xf174;&#xf24b;",
    "stanza": 1730
  },
  {
    "role": "code",
    "lines": [
      "= ((java util String) new add-one 15) 16;"
    ],
    "preprocessed": "= ((java util String) new add-one 15) 16;",
    "dt": false,
    "parse": [
      "=",
      [
        [
          "java",
          "util",
          "String"
        ],
        "new",
        "add-one",
        "15"
      ],
      "16"
    ],
    "code": "121132212101111010312101111011312101110111331210110001312101101010302111133021000032233",
    "spider": "&#xf147;&#xf246;&#xf246;&#xf149;&#xf17e;&#xf24a;&#xf149;&#xf17f;&#xf24a;&#xf149;&#xf17b;&#xf245;&#xf146;&#xf175;&#xf24a;&#xf149;&#xf16e;&#xf24a;&#xf213;&#xf245;&#xf214;&#xf24b;",
    "stanza": 1731
  },
  {
    "role": "code",
    "lines": [
      "class java-numeric ()",
      "   (field super (java-object new))",
      "   (method unknown | ? x | super $x)",
      "   (field java-content | cell new 0)",
      "   (method get | java-content get)",
      "   (method init | ? v | begin (self set $v) $self)",
      "   (method set | ? v | java-content set $v);"
    ],
    "preprocessed": "class java-numeric ()\n   (field super (java-object new))\n   (method unknown | ? x | super $x)\n   (field java-content | cell new 0)\n   (method get | java-content get)\n   (method init | ? v | begin (self set $v) $self)\n   (method set | ? v | java-content set $v);",
    "dt": true,
    "parse": [
      "class",
      "java-numeric",
      [],
      [
        "field",
        "super",
        [
          "java-object",
          "new"
        ]
      ],
      [
        "method",
        "unknown",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "super",
            [
              -2,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "java-content",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "get",
        [
          -1,
          "java-content",
          "get"
        ]
      ],
      [
        "method",
        "init",
        [
          -1,
          "?",
          "v",
          [
            -1,
            "begin",
            [
              "self",
              "set",
              [
                -2,
                "v"
              ]
            ],
            [
              -2,
              "self"
            ]
          ]
        ]
      ],
      [
        "method",
        "set",
        [
          -1,
          "?",
          "v",
          [
            -1,
            "java-content",
            "set",
            [
              -2,
              "v"
            ]
          ]
        ]
      ]
    ],
    "code": "12110011003121011111003232121100101031210110100321210111000131210110001333212110000103121100010030231211003121010013023121011010031231210100133212110010103121011111013023121000011131210110001302033212110000103121111001302312101111101312111100133212110000103121011111103023121100312110101302312101101132121010010131211111003123121101013312312101001013321211000010312111110030231211003121101013023121011111013121111100312312110101332233",
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf149;&#xf180;&#xf246;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf146;&#xf178;&#xf246;&#xf149;&#xf175;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf148;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf178;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf149;&#xf181;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf145;&#xf17d;&#xf248;&#xf149;&#xf181;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf182;&#xf248;&#xf150;&#xf24a;&#xf179;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf179;&#xf245;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf150;&#xf24a;&#xf179;&#xf248;&#xf149;&#xf181;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf179;&#xf245;&#xf24b;",
    "stanza": 1732
  },
  {
    "role": "code",
    "lines": [
      "define byte $java-numeric;"
    ],
    "preprocessed": "define byte $java-numeric;",
    "dt": true,
    "parse": [
      "define",
      "byte",
      [
        -2,
        "java-numeric"
      ]
    ],
    "code": "12110131210111111131231210111110032233",
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf183;&#xf249;&#xf149;&#xf180;&#xf24b;",
    "stanza": 1733
  },
  {
    "role": "code",
    "lines": [
      "define char $java-numeric;"
    ],
    "preprocessed": "define char $java-numeric;",
    "dt": true,
    "parse": [
      "define",
      "char",
      [
        -2,
        "java-numeric"
      ]
    ],
    "code": "12110131211000000031231210111110032233",
    "spider": "&#xf151;&#xf24a;&#xf14a;&#xf144;&#xf249;&#xf149;&#xf180;&#xf24b;",
    "stanza": 1734
  },
  {
    "role": "code",
    "lines": [
      "define double $java-numeric;"
    ],
    "preprocessed": "define double $java-numeric;",
    "dt": true,
    "parse": [
      "define",
      "double",
      [
        -2,
        "java-numeric"
      ]
    ],
    "code": "12110131211000000131231210111110032233",
    "spider": "&#xf151;&#xf24a;&#xf14a;&#xf145;&#xf249;&#xf149;&#xf180;&#xf24b;",
    "stanza": 1735
  },
  {
    "role": "code",
    "lines": [
      "define float $java-numeric;"
    ],
    "preprocessed": "define float $java-numeric;",
    "dt": true,
    "parse": [
      "define",
      "float",
      [
        -2,
        "java-numeric"
      ]
    ],
    "code": "121101312110101131231210111110032233",
    "spider": "&#xf151;&#xf24a;&#xf145;&#xf16f;&#xf249;&#xf149;&#xf180;&#xf24b;",
    "stanza": 1736
  },
  {
    "role": "code",
    "lines": [
      "define int $java-numeric;"
    ],
    "preprocessed": "define int $java-numeric;",
    "dt": true,
    "parse": [
      "define",
      "int",
      [
        -2,
        "java-numeric"
      ]
    ],
    "code": "12110131211111031231210111110032233",
    "spider": "&#xf151;&#xf24a;&#xf182;&#xf249;&#xf149;&#xf180;&#xf24b;",
    "stanza": 1737
  },
  {
    "role": "code",
    "lines": [
      "define long $java-numeric;"
    ],
    "preprocessed": "define long $java-numeric;",
    "dt": true,
    "parse": [
      "define",
      "long",
      [
        -2,
        "java-numeric"
      ]
    ],
    "code": "12110131211000001031231210111110032233",
    "spider": "&#xf151;&#xf24a;&#xf14a;&#xf146;&#xf249;&#xf149;&#xf180;&#xf24b;",
    "stanza": 1738
  },
  {
    "role": "code",
    "lines": [
      "define short $java-numeric;"
    ],
    "preprocessed": "define short $java-numeric;",
    "dt": true,
    "parse": [
      "define",
      "short",
      [
        -2,
        "java-numeric"
      ]
    ],
    "code": "12110131211000001131231210111110032233",
    "spider": "&#xf151;&#xf24a;&#xf14a;&#xf147;&#xf249;&#xf149;&#xf180;&#xf24b;",
    "stanza": 1739
  },
  {
    "role": "code",
    "lines": [
      "define boolean $java-numeric;"
    ],
    "preprocessed": "define boolean $java-numeric;",
    "dt": true,
    "parse": [
      "define",
      "boolean",
      [
        -2,
        "java-numeric"
      ]
    ],
    "code": "12110131211000010031231210111110032233",
    "spider": "&#xf151;&#xf24a;&#xf14a;&#xf148;&#xf249;&#xf149;&#xf180;&#xf24b;",
    "stanza": 1740
  },
  {
    "role": "code",
    "lines": [
      "define void $java-numeric;"
    ],
    "preprocessed": "define void $java-numeric;",
    "dt": true,
    "parse": [
      "define",
      "void",
      [
        -2,
        "java-numeric"
      ]
    ],
    "code": "12110131211000010131231210111110032233",
    "spider": "&#xf151;&#xf24a;&#xf14a;&#xf149;&#xf249;&#xf149;&#xf180;&#xf24b;",
    "stanza": 1741
  },
  {
    "role": "code",
    "lines": [
      "define java-test1 | int new;"
    ],
    "preprocessed": "define java-test1 | int new;",
    "dt": true,
    "parse": [
      "define",
      "java-test1",
      [
        -1,
        "int",
        "new"
      ]
    ],
    "code": "1211013121100001103023121111103121011000132233",
    "spider": "&#xf151;&#xf24a;&#xf14a;&#xf14a;&#xf248;&#xf182;&#xf24a;&#xf146;&#xf175;&#xf24b;",
    "stanza": 1742
  },
  {
    "role": "code",
    "lines": [
      "java-test1 set 15;"
    ],
    "preprocessed": "java-test1 set 15;",
    "dt": false,
    "parse": [
      "java-test1",
      "set",
      "15"
    ],
    "code": "121100001103121111100302111132233",
    "spider": "&#xf14a;&#xf14a;&#xf24a;&#xf145;&#xf180;&#xf24a;&#xf213;&#xf24b;",
    "stanza": 1743
  },
  {
    "role": "code",
    "lines": [
      "= 15 | java-test1 get;"
    ],
    "preprocessed": "= 15 | java-test1 get;",
    "dt": false,
    "parse": [
      "=",
      "15",
      [
        -1,
        "java-test1",
        "get"
      ]
    ],
    "code": "12113021111302312110000110312111100132233",
    "spider": "&#xf147;&#xf24a;&#xf213;&#xf248;&#xf14a;&#xf14a;&#xf24a;&#xf145;&#xf17d;&#xf24b;",
    "stanza": 1744
  },
  {
    "role": "code",
    "lines": [
      "define java-test2 | int new init 17;"
    ],
    "preprocessed": "define java-test2 | int new init 17;",
    "dt": true,
    "parse": [
      "define",
      "java-test2",
      [
        -1,
        "int",
        "new",
        "init",
        "17"
      ]
    ],
    "code": "121101312110000111302312111110312101100013121011111103021000132233",
    "spider": "&#xf151;&#xf24a;&#xf14a;&#xf14b;&#xf248;&#xf182;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf149;&#xf182;&#xf24a;&#xf215;&#xf24b;",
    "stanza": 1745
  },
  {
    "role": "code",
    "lines": [
      "= 17 | java-test2 get;"
    ],
    "preprocessed": "= 17 | java-test2 get;",
    "dt": false,
    "parse": [
      "=",
      "17",
      [
        -1,
        "java-test2",
        "get"
      ]
    ],
    "code": "121130210001302312110000111312111100132233",
    "spider": "&#xf147;&#xf24a;&#xf215;&#xf248;&#xf14a;&#xf14b;&#xf24a;&#xf145;&#xf17d;&#xf24b;",
    "stanza": 1746
  },
  {
    "role": "code",
    "lines": [
      "define state-machine-test1 | ? x | cond",
      "  ((= $x 1) 20)",
      "  ((= $x 2) 40)",
      "  ((= $x 3) 60)",
      "  0;"
    ],
    "preprocessed": "define state-machine-test1 | ? x | cond\n  ((= $x 1) 20)\n  ((= $x 2) 40)\n  ((= $x 3) 60)\n  0;",
    "dt": true,
    "parse": [
      "define",
      "state-machine-test1",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "cond",
          [
            [
              "=",
              [
                -2,
                "x"
              ],
              "1"
            ],
            "20"
          ],
          [
            [
              "=",
              [
                -2,
                "x"
              ],
              "2"
            ],
            "40"
          ],
          [
            [
              "=",
              [
                -2,
                "x"
              ],
              "3"
            ],
            "60"
          ],
          "0"
        ]
      ]
    ],
    "code": "1211013121100010003023121100312101001302312100101113221211312312101001302133021010033221211312312101001302103302101000332212113123121010013021133021111003302032233",
    "spider": "&#xf151;&#xf24a;&#xf14a;&#xf14c;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf218;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf22c;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf240;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1747
  },
  {
    "role": "code",
    "lines": [
      "= 60 | state-machine-test1 3;"
    ],
    "preprocessed": "= 60 | state-machine-test1 3;",
    "dt": false,
    "parse": [
      "=",
      "60",
      [
        -1,
        "state-machine-test1",
        "3"
      ]
    ],
    "code": "12113021111003023121100010003021132233",
    "spider": "&#xf147;&#xf24a;&#xf240;&#xf248;&#xf14a;&#xf14c;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 1748
  },
  {
    "role": "code",
    "lines": [
      "define state-machine-test2 | ? x | cond",
      "  ((= $x 1) | java-test1 set 20)",
      "  ((= $x 2) | java-test1 set 40)",
      "  ((= $x 3) | java-test1 set 60)",
      "  0;"
    ],
    "preprocessed": "define state-machine-test2 | ? x | cond\n  ((= $x 1) | java-test1 set 20)\n  ((= $x 2) | java-test1 set 40)\n  ((= $x 3) | java-test1 set 60)\n  0;",
    "dt": true,
    "parse": [
      "define",
      "state-machine-test2",
      [
        -1,
        "?",
        "x",
        [
          -1,
          "cond",
          [
            [
              "=",
              [
                -2,
                "x"
              ],
              "1"
            ],
            [
              -1,
              "java-test1",
              "set",
              "20"
            ]
          ],
          [
            [
              "=",
              [
                -2,
                "x"
              ],
              "2"
            ],
            [
              -1,
              "java-test1",
              "set",
              "40"
            ]
          ],
          [
            [
              "=",
              [
                -2,
                "x"
              ],
              "3"
            ],
            [
              -1,
              "java-test1",
              "set",
              "60"
            ]
          ],
          "0"
        ]
      ]
    ],
    "code": "1211013121100010013023121100312101001302312100101113221211312312101001302133023121100001103121111100302101003322121131231210100130210330231211000011031211111003021010003322121131231210100130211330231211000011031211111003021111003302032233",
    "spider": "&#xf151;&#xf24a;&#xf14a;&#xf14d;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14a;&#xf14a;&#xf24a;&#xf145;&#xf180;&#xf24a;&#xf218;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14a;&#xf14a;&#xf24a;&#xf145;&#xf180;&#xf24a;&#xf22c;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14a;&#xf14a;&#xf24a;&#xf145;&#xf180;&#xf24a;&#xf240;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1749
  },
  {
    "role": "code",
    "lines": [
      "state-machine-test2 2;"
    ],
    "preprocessed": "state-machine-test2 2;",
    "dt": false,
    "parse": [
      "state-machine-test2",
      "2"
    ],
    "code": "121100010013021032233",
    "spider": "&#xf14a;&#xf14d;&#xf24a;&#xf206;&#xf24b;",
    "stanza": 1750
  },
  {
    "role": "code",
    "lines": [
      "= 40 | java-test1 get;"
    ],
    "preprocessed": "= 40 | java-test1 get;",
    "dt": false,
    "parse": [
      "=",
      "40",
      [
        -1,
        "java-test1",
        "get"
      ]
    ],
    "code": "1211302101000302312110000110312111100132233",
    "spider": "&#xf147;&#xf24a;&#xf22c;&#xf248;&#xf14a;&#xf14a;&#xf24a;&#xf145;&#xf17d;&#xf24b;",
    "stanza": 1751
  },
  {
    "role": "code",
    "lines": [
      "define compare-object-reference | ? o1 | ? o2 |",
      "   if (number? $o1) (number? $o2) |",
      "   = (o1 unique-id) (o2 unique-id);"
    ],
    "preprocessed": "define compare-object-reference | ? o1 | ? o2 |\n   if (number? $o1) (number? $o2) |\n   = (o1 unique-id) (o2 unique-id);",
    "dt": true,
    "parse": [
      "define",
      "compare-object-reference",
      [
        -1,
        "?",
        "o1",
        [
          -1,
          "?",
          "o2",
          [
            -1,
            "if",
            [
              "number?",
              [
                -2,
                "o1"
              ]
            ],
            [
              "number?",
              [
                -2,
                "o2"
              ]
            ],
            [
              -1,
              "=",
              [
                "o1",
                "unique-id"
              ],
              [
                "o2",
                "unique-id"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131211000101030231211003121100010113023121100312110001100302312111132121100031231211000101133212110003123121100011003302312113212110001011312110001013321211000110031211000101332233",
    "spider": "&#xf151;&#xf24a;&#xf14a;&#xf14e;&#xf248;&#xf150;&#xf24a;&#xf14a;&#xf14f;&#xf248;&#xf150;&#xf24a;&#xf14a;&#xf150;&#xf248;&#xf153;&#xf246;&#xf15c;&#xf249;&#xf14a;&#xf14f;&#xf245;&#xf246;&#xf15c;&#xf249;&#xf14a;&#xf150;&#xf245;&#xf248;&#xf147;&#xf246;&#xf14a;&#xf14f;&#xf24a;&#xf147;&#xf149;&#xf245;&#xf246;&#xf14a;&#xf150;&#xf24a;&#xf147;&#xf149;&#xf245;&#xf24b;",
    "stanza": 1752
  },
  {
    "role": "code",
    "lines": [
      "define minus-one | minus 1;"
    ],
    "preprocessed": "define minus-one | minus 1;",
    "dt": true,
    "parse": [
      "define",
      "minus-one",
      [
        -1,
        "minus",
        "1"
      ]
    ],
    "code": "1211013121100011013023121100100302132233",
    "spider": "&#xf151;&#xf24a;&#xf14a;&#xf151;&#xf248;&#xf145;&#xf168;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 1753
  },
  {
    "role": "code",
    "lines": [
      "intro jvm-maker;"
    ],
    "preprocessed": "intro jvm-maker;",
    "dt": false,
    "parse": [
      "intro",
      "jvm-maker"
    ],
    "code": "121001031211000111032233",
    "spider": "&#xf156;&#xf24a;&#xf14a;&#xf152;&#xf24b;",
    "stanza": 1754
  },
  {
    "role": "code",
    "lines": [
      "define jvm-maker | lambda (vars stack pc ret) | ? op | begin",
      "   (pc set | + (pc get) 1) |",
      "   cond",
      "     ((= $op new) | ? type | stack-push $stack | $type new)",
      "     ((= $op dup) | stack-push $stack | stack-peek $stack)",
      "     ((= $op checkcast) | ? t 1)",
      "     ((or (= $op astore) (= $op istore)) | ? index |",
      "        vars set | hash-add (vars get) $index | stack-pop $stack)",
      "     ((or (= $op aload) (= $op iload)) | ? index |",
      "        stack-push $stack | hash-ref (vars get) $index)",
      "     ((or (= $op iconst) (= $op ldc)) | ? val | stack-push $stack $val)",
      "     ((= $op aconst_null) | stack-push $stack 0)",
      "     ((= $op instanceof) | ? t |",
      "        stack-push $stack | not | number? | (stack-pop $stack) (t new classname))",
      "     ((= $op getfield) | ? key | ? ignore |",
      "    stack-push $stack | (stack-pop $stack) $key get)",
      "     ((= $op putfield) | ? key | ? ignore |",
      "        assign val (stack-pop $stack) |",
      "        (stack-pop $stack) $key set $val)",
      "     ((= $op imul) |",
      "        assign v2 (stack-pop $stack) |",
      "        assign v1 (stack-pop $stack) |",
      "        stack-push $stack | * $v1 $v2)",
      "     ((= $op iadd) |",
      "        assign v2 (stack-pop $stack) |",
      "        assign v1 (stack-pop $stack) |",
      "        stack-push $stack | + $v1 $v2)",
      "     ((= $op isub) |",
      "        assign v2 (stack-pop $stack) |",
      "        assign v1 (stack-pop $stack) |",
      "        stack-push $stack | - $v1 $v2)",
      "     ((= $op goto) | ? x | pc set $x)",
      "     ((= $op iflt) | ? x |",
      "        if (< (stack-pop $stack) 0) (pc set $x) 0)",
      "     ((= $op ifle) | ? x |",
      "        if (<= (stack-pop $stack) 0) (pc set $x) 0)",
      "     ((= $op ifgt) | ? x |",
      "        if (> (stack-pop $stack) 0) (pc set $x) 0)",
      "     ((= $op ifge) | ? x |",
      "        if (>= (stack-pop $stack) 0) (pc set $x) 0)",
      "     ((= $op ifne) | ? x |",
      "        if (not | = (stack-pop $stack) 0) (pc set $x) 0)",
      "     ((= $op ifeq) | ? x |",
      "        if (= (stack-pop $stack) 0) (pc set $x) 0)",
      "     ((= $op if_icmpne) | ? x |",
      "        assign v2 (stack-pop $stack) |",
      "        assign v1 (stack-pop $stack) |",
      "        if (not | = $v1 $v2) (pc set $x) 0)",
      "     ((= $op if_icmpeq) | ? x |",
      "        assign v2 (stack-pop $stack) |",
      "        assign v1 (stack-pop $stack) |",
      "        if (= $v1 $v2) (pc set $x) 0)",
      "     ((= $op if_acmpne) | ? x |",
      "        assign v2 (stack-pop $stack) |",
      "        assign v1 (stack-pop $stack) |",
      "        if (not | compare-object-reference $v1 $v2) (pc set $x) 0)",
      "     ((= $op if_acmpeq) | ? x |",
      "        assign v2 (stack-pop $stack) |",
      "        assign v1 (stack-pop $stack) |",
      "        if (compare-object-reference $v1 $v2) (pc set $x) 0)",
      "     ((= $op if_icmpge) | ? x |",
      "        assign v2 (stack-pop $stack) |",
      "        assign v1 (stack-pop $stack) |",
      "        if (>= $v1 $v2) (pc set $x) 0)",
      "     ((= $op if_icmpgt) | ? x |",
      "        assign v2 (stack-pop $stack) |",
      "        assign v1 (stack-pop $stack) |",
      "        if (> $v1 $v2) (pc set $x) 0)",
      "     ((= $op if_icmple) | ? x |",
      "        assign v2 (stack-pop $stack) |",
      "        assign v1 (stack-pop $stack) |",
      "        if (<= $v1 $v2) (pc set $x) 0)",
      "     ((= $op if_icmplt) | ? x |",
      "        assign v2 (stack-pop $stack) |",
      "        assign v1 (stack-pop $stack) |",
      "        if (< $v1 $v2) (pc set $x) 0)",
      "     ((= $op ifnull) | ? x |",
      "    if (number? | stack-pop $stack) (pc set $x) 0)",
      "     ((= $op ifnonnull) | ? x |",
      "    if (not | number? | stack-pop $stack) (pc set $x) 0)",
      "     ((= $op return) | begin",
      "    (ret set | hash-ref (vars get) 0)",
      "        (pc set $minus-one))",
      "     ((= $op ireturn) | begin",
      "    (ret set | stack-pop $stack)",
      "        (pc set $minus-one))",
      "     ((= $op areturn) | begin",
      "    (ret set | stack-pop $stack)",
      "        (pc set $minus-one))",
      "     ((= $op invokevirtual) | lambda (target m n) |",
      "         assign result (stack-call $stack $target $m) |",
      "         if (not | = $n 1) 0 |",
      "         stack-push $stack $result)",
      "     ((= $op invokeinterface) | lambda (target m n ignore) |",
      "         assign result (stack-call $stack $target $m) |",
      "         if (not | = $n 1) 0 |",
      "         stack-push $stack $result)",
      "     ((= $op invokespecial) | lambda (target m n) |",
      "         assign result (stack-call-special $stack (hash-ref (vars get) 0) $target $m) |",
      "         if (not | = $n 1) 0 |",
      "         stack-push $stack $result)",
      "     0;"
    ],
    "preprocessed": "define jvm-maker | lambda (vars stack pc ret) | ? op | begin\n   (pc set | + (pc get) 1) |\n   cond\n     ((= $op new) | ? type | stack-push $stack | $type new)\n     ((= $op dup) | stack-push $stack | stack-peek $stack)\n     ((= $op checkcast) | ? t 1)\n     ((or (= $op astore) (= $op istore)) | ? index |\n        vars set | hash-add (vars get) $index | stack-pop $stack)\n     ((or (= $op aload) (= $op iload)) | ? index |\n        stack-push $stack | hash-ref (vars get) $index)\n     ((or (= $op iconst) (= $op ldc)) | ? val | stack-push $stack $val)\n     ((= $op aconst_null) | stack-push $stack 0)\n     ((= $op instanceof) | ? t |\n        stack-push $stack | not | number? | (stack-pop $stack) (t new classname))\n     ((= $op getfield) | ? key | ? ignore |\n    stack-push $stack | (stack-pop $stack) $key get)\n     ((= $op putfield) | ? key | ? ignore |\n        assign val (stack-pop $stack) |\n        (stack-pop $stack) $key set $val)\n     ((= $op imul) |\n        assign v2 (stack-pop $stack) |\n        assign v1 (stack-pop $stack) |\n        stack-push $stack | * $v1 $v2)\n     ((= $op iadd) |\n        assign v2 (stack-pop $stack) |\n        assign v1 (stack-pop $stack) |\n        stack-push $stack | + $v1 $v2)\n     ((= $op isub) |\n        assign v2 (stack-pop $stack) |\n        assign v1 (stack-pop $stack) |\n        stack-push $stack | - $v1 $v2)\n     ((= $op goto) | ? x | pc set $x)\n     ((= $op iflt) | ? x |\n        if (< (stack-pop $stack) 0) (pc set $x) 0)\n     ((= $op ifle) | ? x |\n        if (<= (stack-pop $stack) 0) (pc set $x) 0)\n     ((= $op ifgt) | ? x |\n        if (> (stack-pop $stack) 0) (pc set $x) 0)\n     ((= $op ifge) | ? x |\n        if (>= (stack-pop $stack) 0) (pc set $x) 0)\n     ((= $op ifne) | ? x |\n        if (not | = (stack-pop $stack) 0) (pc set $x) 0)\n     ((= $op ifeq) | ? x |\n        if (= (stack-pop $stack) 0) (pc set $x) 0)\n     ((= $op if_icmpne) | ? x |\n        assign v2 (stack-pop $stack) |\n        assign v1 (stack-pop $stack) |\n        if (not | = $v1 $v2) (pc set $x) 0)\n     ((= $op if_icmpeq) | ? x |\n        assign v2 (stack-pop $stack) |\n        assign v1 (stack-pop $stack) |\n        if (= $v1 $v2) (pc set $x) 0)\n     ((= $op if_acmpne) | ? x |\n        assign v2 (stack-pop $stack) |\n        assign v1 (stack-pop $stack) |\n        if (not | compare-object-reference $v1 $v2) (pc set $x) 0)\n     ((= $op if_acmpeq) | ? x |\n        assign v2 (stack-pop $stack) |\n        assign v1 (stack-pop $stack) |\n        if (compare-object-reference $v1 $v2) (pc set $x) 0)\n     ((= $op if_icmpge) | ? x |\n        assign v2 (stack-pop $stack) |\n        assign v1 (stack-pop $stack) |\n        if (>= $v1 $v2) (pc set $x) 0)\n     ((= $op if_icmpgt) | ? x |\n        assign v2 (stack-pop $stack) |\n        assign v1 (stack-pop $stack) |\n        if (> $v1 $v2) (pc set $x) 0)\n     ((= $op if_icmple) | ? x |\n        assign v2 (stack-pop $stack) |\n        assign v1 (stack-pop $stack) |\n        if (<= $v1 $v2) (pc set $x) 0)\n     ((= $op if_icmplt) | ? x |\n        assign v2 (stack-pop $stack) |\n        assign v1 (stack-pop $stack) |\n        if (< $v1 $v2) (pc set $x) 0)\n     ((= $op ifnull) | ? x |\n    if (number? | stack-pop $stack) (pc set $x) 0)\n     ((= $op ifnonnull) | ? x |\n    if (not | number? | stack-pop $stack) (pc set $x) 0)\n     ((= $op return) | begin\n    (ret set | hash-ref (vars get) 0)\n        (pc set $minus-one))\n     ((= $op ireturn) | begin\n    (ret set | stack-pop $stack)\n        (pc set $minus-one))\n     ((= $op areturn) | begin\n    (ret set | stack-pop $stack)\n        (pc set $minus-one))\n     ((= $op invokevirtual) | lambda (target m n) |\n         assign result (stack-call $stack $target $m) |\n         if (not | = $n 1) 0 |\n         stack-push $stack $result)\n     ((= $op invokeinterface) | lambda (target m n ignore) |\n         assign result (stack-call $stack $target $m) |\n         if (not | = $n 1) 0 |\n         stack-push $stack $result)\n     ((= $op invokespecial) | lambda (target m n) |\n         assign result (stack-call-special $stack (hash-ref (vars get) 0) $target $m) |\n         if (not | = $n 1) 0 |\n         stack-push $stack $result)\n     0;",
    "dt": true,
    "parse": [
      "define",
      "jvm-maker",
      [
        -1,
        "lambda",
        [
          "vars",
          "stack",
          "pc",
          "ret"
        ],
        [
          -1,
          "?",
          "op",
          [
            -1,
            "begin",
            [
              "pc",
              "set",
              [
                -1,
                "+",
                [
                  "pc",
                  "get"
                ],
                "1"
              ]
            ],
            [
              -1,
              "cond",
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "new"
                ],
                [
                  -1,
                  "?",
                  "type",
                  [
                    -1,
                    "stack-push",
                    [
                      -2,
                      "stack"
                    ],
                    [
                      -1,
                      [
                        -2,
                        "type"
                      ],
                      "new"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "dup"
                ],
                [
                  -1,
                  "stack-push",
                  [
                    -2,
                    "stack"
                  ],
                  [
                    -1,
                    "stack-peek",
                    [
                      -2,
                      "stack"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "checkcast"
                ],
                [
                  -1,
                  "?",
                  "t",
                  "1"
                ]
              ],
              [
                [
                  "or",
                  [
                    "=",
                    [
                      -2,
                      "op"
                    ],
                    "astore"
                  ],
                  [
                    "=",
                    [
                      -2,
                      "op"
                    ],
                    "istore"
                  ]
                ],
                [
                  -1,
                  "?",
                  "index",
                  [
                    -1,
                    "vars",
                    "set",
                    [
                      -1,
                      "hash-add",
                      [
                        "vars",
                        "get"
                      ],
                      [
                        -2,
                        "index"
                      ],
                      [
                        -1,
                        "stack-pop",
                        [
                          -2,
                          "stack"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "or",
                  [
                    "=",
                    [
                      -2,
                      "op"
                    ],
                    "aload"
                  ],
                  [
                    "=",
                    [
                      -2,
                      "op"
                    ],
                    "iload"
                  ]
                ],
                [
                  -1,
                  "?",
                  "index",
                  [
                    -1,
                    "stack-push",
                    [
                      -2,
                      "stack"
                    ],
                    [
                      -1,
                      "hash-ref",
                      [
                        "vars",
                        "get"
                      ],
                      [
                        -2,
                        "index"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "or",
                  [
                    "=",
                    [
                      -2,
                      "op"
                    ],
                    "iconst"
                  ],
                  [
                    "=",
                    [
                      -2,
                      "op"
                    ],
                    "ldc"
                  ]
                ],
                [
                  -1,
                  "?",
                  "val",
                  [
                    -1,
                    "stack-push",
                    [
                      -2,
                      "stack"
                    ],
                    [
                      -2,
                      "val"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "aconst_null"
                ],
                [
                  -1,
                  "stack-push",
                  [
                    -2,
                    "stack"
                  ],
                  "0"
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "instanceof"
                ],
                [
                  -1,
                  "?",
                  "t",
                  [
                    -1,
                    "stack-push",
                    [
                      -2,
                      "stack"
                    ],
                    [
                      -1,
                      "not",
                      [
                        -1,
                        "number?",
                        [
                          -1,
                          [
                            "stack-pop",
                            [
                              -2,
                              "stack"
                            ]
                          ],
                          [
                            "t",
                            "new",
                            "classname"
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "getfield"
                ],
                [
                  -1,
                  "?",
                  "key",
                  [
                    -1,
                    "?",
                    "ignore",
                    [
                      -1,
                      "stack-push",
                      [
                        -2,
                        "stack"
                      ],
                      [
                        -1,
                        [
                          "stack-pop",
                          [
                            -2,
                            "stack"
                          ]
                        ],
                        [
                          -2,
                          "key"
                        ],
                        "get"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "putfield"
                ],
                [
                  -1,
                  "?",
                  "key",
                  [
                    -1,
                    "?",
                    "ignore",
                    [
                      -1,
                      "assign",
                      "val",
                      [
                        "stack-pop",
                        [
                          -2,
                          "stack"
                        ]
                      ],
                      [
                        -1,
                        [
                          "stack-pop",
                          [
                            -2,
                            "stack"
                          ]
                        ],
                        [
                          -2,
                          "key"
                        ],
                        "set",
                        [
                          -2,
                          "val"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "imul"
                ],
                [
                  -1,
                  "assign",
                  "v2",
                  [
                    "stack-pop",
                    [
                      -2,
                      "stack"
                    ]
                  ],
                  [
                    -1,
                    "assign",
                    "v1",
                    [
                      "stack-pop",
                      [
                        -2,
                        "stack"
                      ]
                    ],
                    [
                      -1,
                      "stack-push",
                      [
                        -2,
                        "stack"
                      ],
                      [
                        -1,
                        "*",
                        [
                          -2,
                          "v1"
                        ],
                        [
                          -2,
                          "v2"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "iadd"
                ],
                [
                  -1,
                  "assign",
                  "v2",
                  [
                    "stack-pop",
                    [
                      -2,
                      "stack"
                    ]
                  ],
                  [
                    -1,
                    "assign",
                    "v1",
                    [
                      "stack-pop",
                      [
                        -2,
                        "stack"
                      ]
                    ],
                    [
                      -1,
                      "stack-push",
                      [
                        -2,
                        "stack"
                      ],
                      [
                        -1,
                        "+",
                        [
                          -2,
                          "v1"
                        ],
                        [
                          -2,
                          "v2"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "isub"
                ],
                [
                  -1,
                  "assign",
                  "v2",
                  [
                    "stack-pop",
                    [
                      -2,
                      "stack"
                    ]
                  ],
                  [
                    -1,
                    "assign",
                    "v1",
                    [
                      "stack-pop",
                      [
                        -2,
                        "stack"
                      ]
                    ],
                    [
                      -1,
                      "stack-push",
                      [
                        -2,
                        "stack"
                      ],
                      [
                        -1,
                        "-",
                        [
                          -2,
                          "v1"
                        ],
                        [
                          -2,
                          "v2"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "goto"
                ],
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "pc",
                    "set",
                    [
                      -2,
                      "x"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "iflt"
                ],
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "if",
                    [
                      "<",
                      [
                        "stack-pop",
                        [
                          -2,
                          "stack"
                        ]
                      ],
                      "0"
                    ],
                    [
                      "pc",
                      "set",
                      [
                        -2,
                        "x"
                      ]
                    ],
                    "0"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "ifle"
                ],
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "if",
                    [
                      "<=",
                      [
                        "stack-pop",
                        [
                          -2,
                          "stack"
                        ]
                      ],
                      "0"
                    ],
                    [
                      "pc",
                      "set",
                      [
                        -2,
                        "x"
                      ]
                    ],
                    "0"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "ifgt"
                ],
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "if",
                    [
                      ">",
                      [
                        "stack-pop",
                        [
                          -2,
                          "stack"
                        ]
                      ],
                      "0"
                    ],
                    [
                      "pc",
                      "set",
                      [
                        -2,
                        "x"
                      ]
                    ],
                    "0"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "ifge"
                ],
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "if",
                    [
                      ">=",
                      [
                        "stack-pop",
                        [
                          -2,
                          "stack"
                        ]
                      ],
                      "0"
                    ],
                    [
                      "pc",
                      "set",
                      [
                        -2,
                        "x"
                      ]
                    ],
                    "0"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "ifne"
                ],
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "if",
                    [
                      "not",
                      [
                        -1,
                        "=",
                        [
                          "stack-pop",
                          [
                            -2,
                            "stack"
                          ]
                        ],
                        "0"
                      ]
                    ],
                    [
                      "pc",
                      "set",
                      [
                        -2,
                        "x"
                      ]
                    ],
                    "0"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "ifeq"
                ],
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "if",
                    [
                      "=",
                      [
                        "stack-pop",
                        [
                          -2,
                          "stack"
                        ]
                      ],
                      "0"
                    ],
                    [
                      "pc",
                      "set",
                      [
                        -2,
                        "x"
                      ]
                    ],
                    "0"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "if_icmpne"
                ],
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "assign",
                    "v2",
                    [
                      "stack-pop",
                      [
                        -2,
                        "stack"
                      ]
                    ],
                    [
                      -1,
                      "assign",
                      "v1",
                      [
                        "stack-pop",
                        [
                          -2,
                          "stack"
                        ]
                      ],
                      [
                        -1,
                        "if",
                        [
                          "not",
                          [
                            -1,
                            "=",
                            [
                              -2,
                              "v1"
                            ],
                            [
                              -2,
                              "v2"
                            ]
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            -2,
                            "x"
                          ]
                        ],
                        "0"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "if_icmpeq"
                ],
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "assign",
                    "v2",
                    [
                      "stack-pop",
                      [
                        -2,
                        "stack"
                      ]
                    ],
                    [
                      -1,
                      "assign",
                      "v1",
                      [
                        "stack-pop",
                        [
                          -2,
                          "stack"
                        ]
                      ],
                      [
                        -1,
                        "if",
                        [
                          "=",
                          [
                            -2,
                            "v1"
                          ],
                          [
                            -2,
                            "v2"
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            -2,
                            "x"
                          ]
                        ],
                        "0"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "if_acmpne"
                ],
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "assign",
                    "v2",
                    [
                      "stack-pop",
                      [
                        -2,
                        "stack"
                      ]
                    ],
                    [
                      -1,
                      "assign",
                      "v1",
                      [
                        "stack-pop",
                        [
                          -2,
                          "stack"
                        ]
                      ],
                      [
                        -1,
                        "if",
                        [
                          "not",
                          [
                            -1,
                            "compare-object-reference",
                            [
                              -2,
                              "v1"
                            ],
                            [
                              -2,
                              "v2"
                            ]
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            -2,
                            "x"
                          ]
                        ],
                        "0"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "if_acmpeq"
                ],
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "assign",
                    "v2",
                    [
                      "stack-pop",
                      [
                        -2,
                        "stack"
                      ]
                    ],
                    [
                      -1,
                      "assign",
                      "v1",
                      [
                        "stack-pop",
                        [
                          -2,
                          "stack"
                        ]
                      ],
                      [
                        -1,
                        "if",
                        [
                          "compare-object-reference",
                          [
                            -2,
                            "v1"
                          ],
                          [
                            -2,
                            "v2"
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            -2,
                            "x"
                          ]
                        ],
                        "0"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "if_icmpge"
                ],
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "assign",
                    "v2",
                    [
                      "stack-pop",
                      [
                        -2,
                        "stack"
                      ]
                    ],
                    [
                      -1,
                      "assign",
                      "v1",
                      [
                        "stack-pop",
                        [
                          -2,
                          "stack"
                        ]
                      ],
                      [
                        -1,
                        "if",
                        [
                          ">=",
                          [
                            -2,
                            "v1"
                          ],
                          [
                            -2,
                            "v2"
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            -2,
                            "x"
                          ]
                        ],
                        "0"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "if_icmpgt"
                ],
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "assign",
                    "v2",
                    [
                      "stack-pop",
                      [
                        -2,
                        "stack"
                      ]
                    ],
                    [
                      -1,
                      "assign",
                      "v1",
                      [
                        "stack-pop",
                        [
                          -2,
                          "stack"
                        ]
                      ],
                      [
                        -1,
                        "if",
                        [
                          ">",
                          [
                            -2,
                            "v1"
                          ],
                          [
                            -2,
                            "v2"
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            -2,
                            "x"
                          ]
                        ],
                        "0"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "if_icmple"
                ],
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "assign",
                    "v2",
                    [
                      "stack-pop",
                      [
                        -2,
                        "stack"
                      ]
                    ],
                    [
                      -1,
                      "assign",
                      "v1",
                      [
                        "stack-pop",
                        [
                          -2,
                          "stack"
                        ]
                      ],
                      [
                        -1,
                        "if",
                        [
                          "<=",
                          [
                            -2,
                            "v1"
                          ],
                          [
                            -2,
                            "v2"
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            -2,
                            "x"
                          ]
                        ],
                        "0"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "if_icmplt"
                ],
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "assign",
                    "v2",
                    [
                      "stack-pop",
                      [
                        -2,
                        "stack"
                      ]
                    ],
                    [
                      -1,
                      "assign",
                      "v1",
                      [
                        "stack-pop",
                        [
                          -2,
                          "stack"
                        ]
                      ],
                      [
                        -1,
                        "if",
                        [
                          "<",
                          [
                            -2,
                            "v1"
                          ],
                          [
                            -2,
                            "v2"
                          ]
                        ],
                        [
                          "pc",
                          "set",
                          [
                            -2,
                            "x"
                          ]
                        ],
                        "0"
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "ifnull"
                ],
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "if",
                    [
                      "number?",
                      [
                        -1,
                        "stack-pop",
                        [
                          -2,
                          "stack"
                        ]
                      ]
                    ],
                    [
                      "pc",
                      "set",
                      [
                        -2,
                        "x"
                      ]
                    ],
                    "0"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "ifnonnull"
                ],
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "if",
                    [
                      "not",
                      [
                        -1,
                        "number?",
                        [
                          -1,
                          "stack-pop",
                          [
                            -2,
                            "stack"
                          ]
                        ]
                      ]
                    ],
                    [
                      "pc",
                      "set",
                      [
                        -2,
                        "x"
                      ]
                    ],
                    "0"
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "return"
                ],
                [
                  -1,
                  "begin",
                  [
                    "ret",
                    "set",
                    [
                      -1,
                      "hash-ref",
                      [
                        "vars",
                        "get"
                      ],
                      "0"
                    ]
                  ],
                  [
                    "pc",
                    "set",
                    [
                      -2,
                      "minus-one"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "ireturn"
                ],
                [
                  -1,
                  "begin",
                  [
                    "ret",
                    "set",
                    [
                      -1,
                      "stack-pop",
                      [
                        -2,
                        "stack"
                      ]
                    ]
                  ],
                  [
                    "pc",
                    "set",
                    [
                      -2,
                      "minus-one"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "areturn"
                ],
                [
                  -1,
                  "begin",
                  [
                    "ret",
                    "set",
                    [
                      -1,
                      "stack-pop",
                      [
                        -2,
                        "stack"
                      ]
                    ]
                  ],
                  [
                    "pc",
                    "set",
                    [
                      -2,
                      "minus-one"
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "invokevirtual"
                ],
                [
                  -1,
                  "lambda",
                  [
                    "target",
                    "m",
                    "n"
                  ],
                  [
                    -1,
                    "assign",
                    "result",
                    [
                      "stack-call",
                      [
                        -2,
                        "stack"
                      ],
                      [
                        -2,
                        "target"
                      ],
                      [
                        -2,
                        "m"
                      ]
                    ],
                    [
                      -1,
                      "if",
                      [
                        "not",
                        [
                          -1,
                          "=",
                          [
                            -2,
                            "n"
                          ],
                          "1"
                        ]
                      ],
                      "0",
                      [
                        -1,
                        "stack-push",
                        [
                          -2,
                          "stack"
                        ],
                        [
                          -2,
                          "result"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "invokeinterface"
                ],
                [
                  -1,
                  "lambda",
                  [
                    "target",
                    "m",
                    "n",
                    "ignore"
                  ],
                  [
                    -1,
                    "assign",
                    "result",
                    [
                      "stack-call",
                      [
                        -2,
                        "stack"
                      ],
                      [
                        -2,
                        "target"
                      ],
                      [
                        -2,
                        "m"
                      ]
                    ],
                    [
                      -1,
                      "if",
                      [
                        "not",
                        [
                          -1,
                          "=",
                          [
                            -2,
                            "n"
                          ],
                          "1"
                        ]
                      ],
                      "0",
                      [
                        -1,
                        "stack-push",
                        [
                          -2,
                          "stack"
                        ],
                        [
                          -2,
                          "result"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "op"
                  ],
                  "invokespecial"
                ],
                [
                  -1,
                  "lambda",
                  [
                    "target",
                    "m",
                    "n"
                  ],
                  [
                    -1,
                    "assign",
                    "result",
                    [
                      "stack-call-special",
                      [
                        -2,
                        "stack"
                      ],
                      [
                        "hash-ref",
                        [
                          "vars",
                          "get"
                        ],
                        "0"
                      ],
                      [
                        -2,
                        "target"
                      ],
                      [
                        -2,
                        "m"
                      ]
                    ],
                    [
                      -1,
                      "if",
                      [
                        "not",
                        [
                          -1,
                          "=",
                          [
                            -2,
                            "n"
                          ],
                          "1"
                        ]
                      ],
                      "0",
                      [
                        -1,
                        "stack-push",
                        [
                          -2,
                          "stack"
                        ],
                        [
                          -2,
                          "result"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              "0"
            ]
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf14a;&#xf152;&#xf248;&#xf15e;&#xf246;&#xf14a;&#xf153;&#xf24a;&#xf14a;&#xf154;&#xf24a;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf153;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf14a;&#xf156;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf14e;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf205;&#xf245;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf14a;&#xf157;&#xf248;&#xf14a;&#xf158;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf249;&#xf14a;&#xf157;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf159;&#xf245;&#xf248;&#xf14a;&#xf158;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf14a;&#xf15a;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf15b;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf146;&#xf162;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf14b;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf15c;&#xf245;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf15d;&#xf245;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf149;&#xf161;&#xf248;&#xf14a;&#xf153;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf145;&#xf183;&#xf246;&#xf14a;&#xf153;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf249;&#xf149;&#xf161;&#xf248;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf246;&#xf246;&#xf14b;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf15f;&#xf245;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf160;&#xf245;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf149;&#xf161;&#xf248;&#xf14a;&#xf158;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf145;&#xf246;&#xf14a;&#xf153;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf249;&#xf149;&#xf161;&#xf245;&#xf246;&#xf246;&#xf14b;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf161;&#xf245;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf162;&#xf245;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf14a;&#xf163;&#xf248;&#xf14a;&#xf158;&#xf249;&#xf14a;&#xf154;&#xf249;&#xf14a;&#xf163;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf164;&#xf245;&#xf248;&#xf14a;&#xf158;&#xf249;&#xf14a;&#xf154;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf146;&#xf160;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf146;&#xf162;&#xf248;&#xf14a;&#xf158;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf149;&#xf248;&#xf15c;&#xf248;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf246;&#xf146;&#xf162;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf147;&#xf147;&#xf245;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf165;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf146;&#xf153;&#xf248;&#xf150;&#xf24a;&#xf14a;&#xf166;&#xf248;&#xf14a;&#xf158;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf249;&#xf146;&#xf153;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf167;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf146;&#xf153;&#xf248;&#xf150;&#xf24a;&#xf14a;&#xf166;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf163;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf249;&#xf146;&#xf153;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf14a;&#xf163;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf168;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf169;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf16a;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf14a;&#xf158;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf14d;&#xf249;&#xf14a;&#xf16a;&#xf249;&#xf14a;&#xf169;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf16b;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf169;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf16a;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf14a;&#xf158;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf14e;&#xf249;&#xf14a;&#xf16a;&#xf249;&#xf14a;&#xf169;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf16c;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf169;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf16a;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf14a;&#xf158;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf14f;&#xf249;&#xf14a;&#xf16a;&#xf249;&#xf14a;&#xf169;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf16d;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf16e;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf146;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf204;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf16f;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf145;&#xf150;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf204;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf170;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf148;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf204;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf171;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf145;&#xf14f;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf204;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf172;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf147;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf204;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf173;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf147;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf204;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf174;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf169;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf16a;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf147;&#xf249;&#xf14a;&#xf16a;&#xf249;&#xf14a;&#xf169;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf175;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf169;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf16a;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf153;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf16a;&#xf249;&#xf14a;&#xf169;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf176;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf169;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf16a;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf14a;&#xf14e;&#xf249;&#xf14a;&#xf16a;&#xf249;&#xf14a;&#xf169;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf177;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf169;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf16a;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf153;&#xf246;&#xf14a;&#xf14e;&#xf249;&#xf14a;&#xf16a;&#xf249;&#xf14a;&#xf169;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf178;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf169;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf16a;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf153;&#xf246;&#xf145;&#xf14f;&#xf249;&#xf14a;&#xf16a;&#xf249;&#xf14a;&#xf169;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf179;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf169;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf16a;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf153;&#xf246;&#xf148;&#xf249;&#xf14a;&#xf16a;&#xf249;&#xf14a;&#xf169;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf17a;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf169;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf16a;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf153;&#xf246;&#xf145;&#xf150;&#xf249;&#xf14a;&#xf16a;&#xf249;&#xf14a;&#xf169;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf17b;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf169;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf14a;&#xf16a;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf153;&#xf246;&#xf146;&#xf249;&#xf14a;&#xf16a;&#xf249;&#xf14a;&#xf169;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf17c;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf15c;&#xf248;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf17d;&#xf245;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf15c;&#xf248;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf16d;&#xf245;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf145;&#xf153;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf146;&#xf145;&#xf246;&#xf14a;&#xf153;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf204;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf14a;&#xf151;&#xf245;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf17e;&#xf245;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf145;&#xf153;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf14a;&#xf151;&#xf245;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf17f;&#xf245;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf145;&#xf153;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf180;&#xf249;&#xf14a;&#xf151;&#xf245;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf180;&#xf245;&#xf248;&#xf15e;&#xf246;&#xf14a;&#xf181;&#xf24a;&#xf148;&#xf15b;&#xf24a;&#xf145;&#xf152;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf146;&#xf151;&#xf246;&#xf14a;&#xf182;&#xf249;&#xf14a;&#xf154;&#xf249;&#xf14a;&#xf181;&#xf249;&#xf148;&#xf15b;&#xf245;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf147;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf205;&#xf245;&#xf204;&#xf248;&#xf14a;&#xf158;&#xf249;&#xf14a;&#xf154;&#xf249;&#xf146;&#xf151;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14a;&#xf183;&#xf245;&#xf248;&#xf15e;&#xf246;&#xf14a;&#xf181;&#xf24a;&#xf148;&#xf15b;&#xf24a;&#xf145;&#xf152;&#xf24a;&#xf14a;&#xf166;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf146;&#xf151;&#xf246;&#xf14a;&#xf182;&#xf249;&#xf14a;&#xf154;&#xf249;&#xf14a;&#xf181;&#xf249;&#xf148;&#xf15b;&#xf245;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf147;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf205;&#xf245;&#xf204;&#xf248;&#xf14a;&#xf158;&#xf249;&#xf14a;&#xf154;&#xf249;&#xf146;&#xf151;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf14a;&#xf156;&#xf24a;&#xf14b;&#xf144;&#xf245;&#xf248;&#xf15e;&#xf246;&#xf14a;&#xf181;&#xf24a;&#xf148;&#xf15b;&#xf24a;&#xf145;&#xf152;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf146;&#xf151;&#xf246;&#xf14b;&#xf145;&#xf249;&#xf14a;&#xf154;&#xf246;&#xf146;&#xf145;&#xf246;&#xf14a;&#xf153;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf204;&#xf245;&#xf249;&#xf14a;&#xf181;&#xf249;&#xf148;&#xf15b;&#xf245;&#xf248;&#xf153;&#xf246;&#xf149;&#xf248;&#xf147;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf205;&#xf245;&#xf204;&#xf248;&#xf14a;&#xf158;&#xf249;&#xf14a;&#xf154;&#xf249;&#xf146;&#xf151;&#xf245;&#xf204;&#xf24b;",
    "stanza": 1755
  },
  {
    "role": "code",
    "lines": [
      "define stack-call | lambda (stack target ct) |",
      "  if (= $ct 0)",
      "     ((stack-pop $stack) $target)",
      "     (assign arg (stack-pop $stack) |",
      "      (stack-call $stack $target (- $ct 1)) $arg);"
    ],
    "preprocessed": "define stack-call | lambda (stack target ct) |\n  if (= $ct 0)\n     ((stack-pop $stack) $target)\n     (assign arg (stack-pop $stack) |\n      (stack-call $stack $target (- $ct 1)) $arg);",
    "dt": true,
    "parse": [
      "define",
      "stack-call",
      [
        -1,
        "lambda",
        [
          "stack",
          "target",
          "ct"
        ],
        [
          -1,
          "if",
          [
            "=",
            [
              -2,
              "ct"
            ],
            "0"
          ],
          [
            [
              "stack-pop",
              [
                -2,
                "stack"
              ]
            ],
            [
              -2,
              "target"
            ]
          ],
          [
            "assign",
            "arg",
            [
              "stack-pop",
              [
                -2,
                "stack"
              ]
            ],
            [
              -1,
              [
                "stack-call",
                [
                  -2,
                  "stack"
                ],
                [
                  -2,
                  "target"
                ],
                [
                  "-",
                  [
                    -2,
                    "ct"
                  ],
                  "1"
                ]
              ],
              [
                -2,
                "arg"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312110111110302312110103212110010000312110111101312111000010330231211113212113123121110000103020332212110011010312312110010000331231211011110133212111031211100001132121100110103123121100100003302321211011111031231211001000031231211011110132121011312312111000010302133312312111000011332233",
    "spider": "&#xf151;&#xf24a;&#xf14a;&#xf182;&#xf248;&#xf15e;&#xf246;&#xf14a;&#xf154;&#xf24a;&#xf14a;&#xf181;&#xf24a;&#xf14b;&#xf146;&#xf245;&#xf248;&#xf153;&#xf246;&#xf147;&#xf249;&#xf14b;&#xf146;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf249;&#xf14a;&#xf181;&#xf245;&#xf246;&#xf152;&#xf24a;&#xf14b;&#xf147;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf246;&#xf14a;&#xf182;&#xf249;&#xf14a;&#xf154;&#xf249;&#xf14a;&#xf181;&#xf246;&#xf14f;&#xf249;&#xf14b;&#xf146;&#xf24a;&#xf205;&#xf245;&#xf245;&#xf249;&#xf14b;&#xf147;&#xf245;&#xf24b;",
    "stanza": 1756
  },
  {
    "role": "code",
    "lines": [
      "define stack-call-special |",
      "  lambda (stack self target ct) |",
      "    if (= (ct) 0)",
      "    (let ((act | stack-pop $stack)) |",
      "       if (act == $self)",
      "          (act super $target)",
      "          (act $target))",
      "    (let ((arg | stack-pop $stack)) |",
      "       (stack-call-special $stack $self $target (- $ct 1)) $arg);"
    ],
    "preprocessed": "define stack-call-special |\n  lambda (stack self target ct) |\n    if (= (ct) 0)\n    (let ((act | stack-pop $stack)) |\n       if (act == $self)\n          (act super $target)\n          (act $target))\n    (let ((arg | stack-pop $stack)) |\n       (stack-call-special $stack $self $target (- $ct 1)) $arg);",
    "dt": true,
    "parse": [
      "define",
      "stack-call-special",
      [
        -1,
        "lambda",
        [
          "stack",
          "self",
          "target",
          "ct"
        ],
        [
          -1,
          "if",
          [
            "=",
            [
              "ct"
            ],
            "0"
          ],
          [
            "let",
            [
              [
                "act",
                [
                  -1,
                  "stack-pop",
                  [
                    -2,
                    "stack"
                  ]
                ]
              ]
            ],
            [
              -1,
              "if",
              [
                "act",
                "==",
                [
                  -2,
                  "self"
                ]
              ],
              [
                "act",
                "super",
                [
                  -2,
                  "target"
                ]
              ],
              [
                "act",
                [
                  -2,
                  "target"
                ]
              ]
            ]
          ],
          [
            "let",
            [
              [
                "arg",
                [
                  -1,
                  "stack-pop",
                  [
                    -2,
                    "stack"
                  ]
                ]
              ]
            ],
            [
              -1,
              [
                "stack-call-special",
                [
                  -2,
                  "stack"
                ],
                [
                  -2,
                  "self"
                ],
                [
                  -2,
                  "target"
                ],
                [
                  "-",
                  [
                    -2,
                    "ct"
                  ],
                  "1"
                ]
              ],
              [
                -2,
                "arg"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312111000001302312110103212110010000312101001013121101111013121110000103302312111132121132121110000103302033212111010032212101101111302312110011010312312110010000333023121111321210110111131211000110312312101001013321210110111131210110100312312110111101332121011011113123121101111013332121110100322121110000113023121100110103123121100100003330232121110000013123121100100003123121010010131231211011110132121011312312111000010302133312312111000011332233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf145;&#xf248;&#xf15e;&#xf246;&#xf14a;&#xf154;&#xf24a;&#xf146;&#xf169;&#xf24a;&#xf14a;&#xf181;&#xf24a;&#xf14b;&#xf146;&#xf245;&#xf248;&#xf153;&#xf246;&#xf147;&#xf246;&#xf14b;&#xf146;&#xf245;&#xf204;&#xf245;&#xf246;&#xf145;&#xf178;&#xf246;&#xf246;&#xf149;&#xf173;&#xf248;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf245;&#xf248;&#xf153;&#xf246;&#xf149;&#xf173;&#xf24a;&#xf147;&#xf14a;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf149;&#xf173;&#xf24a;&#xf146;&#xf178;&#xf249;&#xf14a;&#xf181;&#xf245;&#xf246;&#xf149;&#xf173;&#xf249;&#xf14a;&#xf181;&#xf245;&#xf245;&#xf246;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14b;&#xf147;&#xf248;&#xf14a;&#xf15e;&#xf249;&#xf14a;&#xf154;&#xf245;&#xf245;&#xf248;&#xf246;&#xf14b;&#xf145;&#xf249;&#xf14a;&#xf154;&#xf249;&#xf146;&#xf169;&#xf249;&#xf14a;&#xf181;&#xf246;&#xf14f;&#xf249;&#xf14b;&#xf146;&#xf24a;&#xf205;&#xf245;&#xf245;&#xf249;&#xf14b;&#xf147;&#xf245;&#xf24b;",
    "stanza": 1757
  },
  {
    "role": "code",
    "lines": [
      "define stack-push | lambda (stack x) |",
      "   stack set | prepend $x | stack get;"
    ],
    "preprocessed": "define stack-push | lambda (stack x) |\n   stack set | prepend $x | stack get;",
    "dt": true,
    "parse": [
      "define",
      "stack-push",
      [
        -1,
        "lambda",
        [
          "stack",
          "x"
        ],
        [
          -1,
          "stack",
          "set",
          [
            -1,
            "prepend",
            [
              -2,
              "x"
            ],
            [
              -1,
              "stack",
              "get"
            ]
          ]
        ]
      ]
    ],
    "code": "121101312110010100302312110103212110010000312101001330231211001000031211111003023121010101312312101001302312110010000312111100132233",
    "spider": "&#xf151;&#xf24a;&#xf14a;&#xf158;&#xf248;&#xf15e;&#xf246;&#xf14a;&#xf154;&#xf24a;&#xf16d;&#xf245;&#xf248;&#xf14a;&#xf154;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf145;&#xf159;&#xf249;&#xf16d;&#xf248;&#xf14a;&#xf154;&#xf24a;&#xf145;&#xf17d;&#xf24b;",
    "stanza": 1758
  },
  {
    "role": "code",
    "lines": [
      "define stack-pop | lambda (stack) |",
      "   let ((v | head | stack get)) |",
      "     begin",
      "    (stack set | tail | stack get)",
      "        $v;"
    ],
    "preprocessed": "define stack-pop | lambda (stack) |\n   let ((v | head | stack get)) |\n     begin\n    (stack set | tail | stack get)\n        $v;",
    "dt": true,
    "parse": [
      "define",
      "stack-pop",
      [
        -1,
        "lambda",
        [
          "stack"
        ],
        [
          -1,
          "let",
          [
            [
              "v",
              [
                -1,
                "head",
                [
                  -1,
                  "stack",
                  "get"
                ]
              ]
            ]
          ],
          [
            -1,
            "begin",
            [
              "stack",
              "set",
              [
                -1,
                "tail",
                [
                  -1,
                  "stack",
                  "get"
                ]
              ]
            ],
            [
              -2,
              "v"
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121100110103023121101032121100100003302312111010032212110101302312101000030231211001000031211110013330231210110113212110010000312111110030231210100013023121100100003121111001331231211010132233",
    "spider": "&#xf151;&#xf24a;&#xf14a;&#xf15e;&#xf248;&#xf15e;&#xf246;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf179;&#xf248;&#xf145;&#xf154;&#xf248;&#xf14a;&#xf154;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf245;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf14a;&#xf154;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf145;&#xf155;&#xf248;&#xf14a;&#xf154;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf249;&#xf179;&#xf24b;",
    "stanza": 1759
  },
  {
    "role": "code",
    "lines": [
      "define stack-peek | lambda (stack) |",
      "   head | stack get;"
    ],
    "preprocessed": "define stack-peek | lambda (stack) |\n   head | stack get;",
    "dt": true,
    "parse": [
      "define",
      "stack-peek",
      [
        -1,
        "lambda",
        [
          "stack"
        ],
        [
          -1,
          "head",
          [
            -1,
            "stack",
            "get"
          ]
        ]
      ]
    ],
    "code": "12110131211001011030231211010321211001000033023121010000302312110010000312111100132233",
    "spider": "&#xf151;&#xf24a;&#xf14a;&#xf15a;&#xf248;&#xf15e;&#xf246;&#xf14a;&#xf154;&#xf245;&#xf248;&#xf145;&#xf154;&#xf248;&#xf14a;&#xf154;&#xf24a;&#xf145;&#xf17d;&#xf24b;",
    "stanza": 1760
  },
  {
    "role": "code",
    "lines": [
      "define stack-test1 | cell new | vector 5 3 1;"
    ],
    "preprocessed": "define stack-test1 | cell new | vector 5 3 1;",
    "dt": true,
    "parse": [
      "define",
      "stack-test1",
      [
        -1,
        "cell",
        "new",
        [
          -1,
          "vector",
          "5",
          "3",
          "1"
        ]
      ]
    ],
    "code": "12110131211100010030231210000111312101100013023121000030210130211302132233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf148;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf207;&#xf24a;&#xf205;&#xf24b;",
    "stanza": 1761
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop $stack-test1) 5;"
    ],
    "preprocessed": "= (stack-pop $stack-test1) 5;",
    "dt": false,
    "parse": [
      "=",
      [
        "stack-pop",
        [
          -2,
          "stack-test1"
        ]
      ],
      "5"
    ],
    "code": "12113212110011010312312111000100330210132233",
    "spider": "&#xf147;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14b;&#xf148;&#xf245;&#xf209;&#xf24b;",
    "stanza": 1762
  },
  {
    "role": "code",
    "lines": [
      "= (stack-peek $stack-test1) 3;"
    ],
    "preprocessed": "= (stack-peek $stack-test1) 3;",
    "dt": false,
    "parse": [
      "=",
      [
        "stack-peek",
        [
          -2,
          "stack-test1"
        ]
      ],
      "3"
    ],
    "code": "1211321211001011031231211100010033021132233",
    "spider": "&#xf147;&#xf246;&#xf14a;&#xf15a;&#xf249;&#xf14b;&#xf148;&#xf245;&#xf207;&#xf24b;",
    "stanza": 1763
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop $stack-test1) 3;"
    ],
    "preprocessed": "= (stack-pop $stack-test1) 3;",
    "dt": false,
    "parse": [
      "=",
      [
        "stack-pop",
        [
          -2,
          "stack-test1"
        ]
      ],
      "3"
    ],
    "code": "1211321211001101031231211100010033021132233",
    "spider": "&#xf147;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14b;&#xf148;&#xf245;&#xf207;&#xf24b;",
    "stanza": 1764
  },
  {
    "role": "code",
    "lines": [
      "stack-push $stack-test1 7;"
    ],
    "preprocessed": "stack-push $stack-test1 7;",
    "dt": false,
    "parse": [
      "stack-push",
      [
        -2,
        "stack-test1"
      ],
      "7"
    ],
    "code": "1211001010031231211100010030211132233",
    "spider": "&#xf14a;&#xf158;&#xf249;&#xf14b;&#xf148;&#xf24a;&#xf20b;&#xf24b;",
    "stanza": 1765
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop $stack-test1) 7;"
    ],
    "preprocessed": "= (stack-pop $stack-test1) 7;",
    "dt": false,
    "parse": [
      "=",
      [
        "stack-pop",
        [
          -2,
          "stack-test1"
        ]
      ],
      "7"
    ],
    "code": "12113212110011010312312111000100330211132233",
    "spider": "&#xf147;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14b;&#xf148;&#xf245;&#xf20b;&#xf24b;",
    "stanza": 1766
  },
  {
    "role": "code",
    "lines": [
      "define vars-test1 | cell new $hash-null;"
    ],
    "preprocessed": "define vars-test1 | cell new $hash-null;",
    "dt": true,
    "parse": [
      "define",
      "vars-test1",
      [
        -1,
        "cell",
        "new",
        [
          -2,
          "hash-null"
        ]
      ]
    ],
    "code": "12110131211100010130231210000111312101100013123121000001032233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf149;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf249;&#xf146;&#xf146;&#xf24b;",
    "stanza": 1767
  },
  {
    "role": "code",
    "lines": [
      "define pc-test1 | cell new 0;"
    ],
    "preprocessed": "define pc-test1 | cell new 0;",
    "dt": true,
    "parse": [
      "define",
      "pc-test1",
      [
        -1,
        "cell",
        "new",
        "0"
      ]
    ],
    "code": "1211013121110001103023121000011131210110001302032233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf14a;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1768
  },
  {
    "role": "code",
    "lines": [
      "define ret-test1 | cell new 0;"
    ],
    "preprocessed": "define ret-test1 | cell new 0;",
    "dt": true,
    "parse": [
      "define",
      "ret-test1",
      [
        -1,
        "cell",
        "new",
        "0"
      ]
    ],
    "code": "1211013121110001113023121000011131210110001302032233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf14b;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1769
  },
  {
    "role": "code",
    "lines": [
      "define test-jvm | jvm-maker $vars-test1 $stack-test1 $pc-test1 $ret-test1;"
    ],
    "preprocessed": "define test-jvm | jvm-maker $vars-test1 $stack-test1 $pc-test1 $ret-test1;",
    "dt": true,
    "parse": [
      "define",
      "test-jvm",
      [
        -1,
        "jvm-maker",
        [
          -2,
          "vars-test1"
        ],
        [
          -2,
          "stack-test1"
        ],
        [
          -2,
          "pc-test1"
        ],
        [
          -2,
          "ret-test1"
        ]
      ]
    ],
    "code": "12110131211100100030231211000111031231211100010131231211100010031231211100011031231211100011132233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf14c;&#xf248;&#xf14a;&#xf152;&#xf249;&#xf14b;&#xf149;&#xf249;&#xf14b;&#xf148;&#xf249;&#xf14b;&#xf14a;&#xf249;&#xf14b;&#xf14b;&#xf24b;",
    "stanza": 1770
  },
  {
    "role": "code",
    "lines": [
      "stack-push $stack-test1 4;"
    ],
    "preprocessed": "stack-push $stack-test1 4;",
    "dt": false,
    "parse": [
      "stack-push",
      [
        -2,
        "stack-test1"
      ],
      "4"
    ],
    "code": "1211001010031231211100010030210032233",
    "spider": "&#xf14a;&#xf158;&#xf249;&#xf14b;&#xf148;&#xf24a;&#xf208;&#xf24b;",
    "stanza": 1771
  },
  {
    "role": "code",
    "lines": [
      "test-jvm dup;"
    ],
    "preprocessed": "test-jvm dup;",
    "dt": false,
    "parse": [
      "test-jvm",
      "dup"
    ],
    "code": "1211100100031211001010132233",
    "spider": "&#xf14b;&#xf14c;&#xf24a;&#xf14a;&#xf159;&#xf24b;",
    "stanza": 1772
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop $stack-test1) 4;"
    ],
    "preprocessed": "= (stack-pop $stack-test1) 4;",
    "dt": false,
    "parse": [
      "=",
      [
        "stack-pop",
        [
          -2,
          "stack-test1"
        ]
      ],
      "4"
    ],
    "code": "12113212110011010312312111000100330210032233",
    "spider": "&#xf147;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14b;&#xf148;&#xf245;&#xf208;&#xf24b;",
    "stanza": 1773
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop $stack-test1) 4;"
    ],
    "preprocessed": "= (stack-pop $stack-test1) 4;",
    "dt": false,
    "parse": [
      "=",
      [
        "stack-pop",
        [
          -2,
          "stack-test1"
        ]
      ],
      "4"
    ],
    "code": "12113212110011010312312111000100330210032233",
    "spider": "&#xf147;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14b;&#xf148;&#xf245;&#xf208;&#xf24b;",
    "stanza": 1774
  },
  {
    "role": "code",
    "lines": [
      "stack-push $stack-test1 66;"
    ],
    "preprocessed": "stack-push $stack-test1 66;",
    "dt": false,
    "parse": [
      "stack-push",
      [
        -2,
        "stack-test1"
      ],
      "66"
    ],
    "code": "12110010100312312111000100302100001032233",
    "spider": "&#xf14a;&#xf158;&#xf249;&#xf14b;&#xf148;&#xf24a;&#xf205;&#xf206;&#xf24b;",
    "stanza": 1775
  },
  {
    "role": "code",
    "lines": [
      "stack-push $stack-test1 77;"
    ],
    "preprocessed": "stack-push $stack-test1 77;",
    "dt": false,
    "parse": [
      "stack-push",
      [
        -2,
        "stack-test1"
      ],
      "77"
    ],
    "code": "12110010100312312111000100302100110132233",
    "spider": "&#xf14a;&#xf158;&#xf249;&#xf14b;&#xf148;&#xf24a;&#xf205;&#xf211;&#xf24b;",
    "stanza": 1776
  },
  {
    "role": "code",
    "lines": [
      "test-jvm astore 3;"
    ],
    "preprocessed": "test-jvm astore 3;",
    "dt": false,
    "parse": [
      "test-jvm",
      "astore",
      "3"
    ],
    "code": "121110010003121100110003021132233",
    "spider": "&#xf14b;&#xf14c;&#xf24a;&#xf14a;&#xf15c;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 1777
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop $stack-test1) 66;"
    ],
    "preprocessed": "= (stack-pop $stack-test1) 66;",
    "dt": false,
    "parse": [
      "=",
      [
        "stack-pop",
        [
          -2,
          "stack-test1"
        ]
      ],
      "66"
    ],
    "code": "121132121100110103123121110001003302100001032233",
    "spider": "&#xf147;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14b;&#xf148;&#xf245;&#xf205;&#xf206;&#xf24b;",
    "stanza": 1778
  },
  {
    "role": "code",
    "lines": [
      "test-jvm aload 3;"
    ],
    "preprocessed": "test-jvm aload 3;",
    "dt": false,
    "parse": [
      "test-jvm",
      "aload",
      "3"
    ],
    "code": "121110010003121100110113021132233",
    "spider": "&#xf14b;&#xf14c;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf207;&#xf24b;",
    "stanza": 1779
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop $stack-test1) 77;"
    ],
    "preprocessed": "= (stack-pop $stack-test1) 77;",
    "dt": false,
    "parse": [
      "=",
      [
        "stack-pop",
        [
          -2,
          "stack-test1"
        ]
      ],
      "77"
    ],
    "code": "121132121100110103123121110001003302100110132233",
    "spider": "&#xf147;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14b;&#xf148;&#xf245;&#xf205;&#xf211;&#xf24b;",
    "stanza": 1780
  },
  {
    "role": "code",
    "lines": [
      "class test-class ()",
      "   (field x | int new)",
      "   (field y | int new);"
    ],
    "preprocessed": "class test-class ()\n   (field x | int new)\n   (field y | int new);",
    "dt": true,
    "parse": [
      "class",
      "test-class",
      [],
      [
        "field",
        "x",
        [
          -1,
          "int",
          "new"
        ]
      ],
      [
        "field",
        "y",
        [
          -1,
          "int",
          "new"
        ]
      ]
    ],
    "code": "121100110031211100100132321211001010312101001302312111110312101100013321211001010312100000130231211111031210110001332233",
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf14b;&#xf14d;&#xf246;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf16d;&#xf248;&#xf182;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf145;&#xf145;&#xf248;&#xf182;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf24b;",
    "stanza": 1781
  },
  {
    "role": "code",
    "lines": [
      "define test-this | test-class new;"
    ],
    "preprocessed": "define test-this | test-class new;",
    "dt": true,
    "parse": [
      "define",
      "test-this",
      [
        -1,
        "test-class",
        "new"
      ]
    ],
    "code": "1211013121110010103023121110010013121011000132233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf14e;&#xf248;&#xf14b;&#xf14d;&#xf24a;&#xf146;&#xf175;&#xf24b;",
    "stanza": 1782
  },
  {
    "role": "code",
    "lines": [
      "test-this x set 5;"
    ],
    "preprocessed": "test-this x set 5;",
    "dt": false,
    "parse": [
      "test-this",
      "x",
      "set",
      "5"
    ],
    "code": "12111001010312101001312111110030210132233",
    "spider": "&#xf14b;&#xf14e;&#xf24a;&#xf16d;&#xf24a;&#xf145;&#xf180;&#xf24a;&#xf209;&#xf24b;",
    "stanza": 1783
  },
  {
    "role": "code",
    "lines": [
      "= (test-this x get) 5;"
    ],
    "preprocessed": "= (test-this x get) 5;",
    "dt": false,
    "parse": [
      "=",
      [
        "test-this",
        "x",
        "get"
      ],
      "5"
    ],
    "code": "121132121110010103121010013121111001330210132233",
    "spider": "&#xf147;&#xf246;&#xf14b;&#xf14e;&#xf24a;&#xf16d;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf209;&#xf24b;",
    "stanza": 1784
  },
  {
    "role": "code",
    "lines": [
      "stack-push $stack-test1 $test-this;"
    ],
    "preprocessed": "stack-push $stack-test1 $test-this;",
    "dt": false,
    "parse": [
      "stack-push",
      [
        -2,
        "stack-test1"
      ],
      [
        -2,
        "test-this"
      ]
    ],
    "code": "1211001010031231211100010031231211100101032233",
    "spider": "&#xf14a;&#xf158;&#xf249;&#xf14b;&#xf148;&#xf249;&#xf14b;&#xf14e;&#xf24b;",
    "stanza": 1785
  },
  {
    "role": "code",
    "lines": [
      "= ((stack-pop $stack-test1) x get) 5;"
    ],
    "preprocessed": "= ((stack-pop $stack-test1) x get) 5;",
    "dt": false,
    "parse": [
      "=",
      [
        [
          "stack-pop",
          [
            -2,
            "stack-test1"
          ]
        ],
        "x",
        "get"
      ],
      "5"
    ],
    "code": "12113221211001101031231211100010033121010013121111001330210132233",
    "spider": "&#xf147;&#xf246;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14b;&#xf148;&#xf245;&#xf16d;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf209;&#xf24b;",
    "stanza": 1786
  },
  {
    "role": "code",
    "lines": [
      "stack-push $stack-test1 $test-this;"
    ],
    "preprocessed": "stack-push $stack-test1 $test-this;",
    "dt": false,
    "parse": [
      "stack-push",
      [
        -2,
        "stack-test1"
      ],
      [
        -2,
        "test-this"
      ]
    ],
    "code": "1211001010031231211100010031231211100101032233",
    "spider": "&#xf14a;&#xf158;&#xf249;&#xf14b;&#xf148;&#xf249;&#xf14b;&#xf14e;&#xf24b;",
    "stanza": 1787
  },
  {
    "role": "code",
    "lines": [
      "test-jvm astore 0;"
    ],
    "preprocessed": "test-jvm astore 0;",
    "dt": false,
    "parse": [
      "test-jvm",
      "astore",
      "0"
    ],
    "code": "12111001000312110011000302032233",
    "spider": "&#xf14b;&#xf14c;&#xf24a;&#xf14a;&#xf15c;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1788
  },
  {
    "role": "code",
    "lines": [
      "test-jvm aload 0;"
    ],
    "preprocessed": "test-jvm aload 0;",
    "dt": false,
    "parse": [
      "test-jvm",
      "aload",
      "0"
    ],
    "code": "12111001000312110011011302032233",
    "spider": "&#xf14b;&#xf14c;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1789
  },
  {
    "role": "code",
    "lines": [
      "test-jvm getfield x $int;"
    ],
    "preprocessed": "test-jvm getfield x $int;",
    "dt": false,
    "parse": [
      "test-jvm",
      "getfield",
      "x",
      [
        -2,
        "int"
      ]
    ],
    "code": "1211100100031211010000131210100131231211111032233",
    "spider": "&#xf14b;&#xf14c;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf16d;&#xf249;&#xf182;&#xf24b;",
    "stanza": 1790
  },
  {
    "role": "code",
    "lines": [
      "= (stack-pop $stack-test1) 5;"
    ],
    "preprocessed": "= (stack-pop $stack-test1) 5;",
    "dt": false,
    "parse": [
      "=",
      [
        "stack-pop",
        [
          -2,
          "stack-test1"
        ]
      ],
      "5"
    ],
    "code": "12113212110011010312312111000100330210132233",
    "spider": "&#xf147;&#xf246;&#xf14a;&#xf15e;&#xf249;&#xf14b;&#xf148;&#xf245;&#xf209;&#xf24b;",
    "stanza": 1791
  },
  {
    "role": "code",
    "lines": [
      "test-jvm aload 0;"
    ],
    "preprocessed": "test-jvm aload 0;",
    "dt": false,
    "parse": [
      "test-jvm",
      "aload",
      "0"
    ],
    "code": "12111001000312110011011302032233",
    "spider": "&#xf14b;&#xf14c;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1792
  },
  {
    "role": "code",
    "lines": [
      "test-jvm iconst 15;"
    ],
    "preprocessed": "test-jvm iconst 15;",
    "dt": false,
    "parse": [
      "test-jvm",
      "iconst",
      "15"
    ],
    "code": "12111001000312110011101302111132233",
    "spider": "&#xf14b;&#xf14c;&#xf24a;&#xf14a;&#xf161;&#xf24a;&#xf213;&#xf24b;",
    "stanza": 1793
  },
  {
    "role": "code",
    "lines": [
      "test-jvm putfield y $int;"
    ],
    "preprocessed": "test-jvm putfield y $int;",
    "dt": false,
    "parse": [
      "test-jvm",
      "putfield",
      "y",
      [
        -2,
        "int"
      ]
    ],
    "code": "12111001000312110100011312100000131231211111032233",
    "spider": "&#xf14b;&#xf14c;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf145;&#xf145;&#xf249;&#xf182;&#xf24b;",
    "stanza": 1794
  },
  {
    "role": "code",
    "lines": [
      "= (test-this y get) 15;"
    ],
    "preprocessed": "= (test-this y get) 15;",
    "dt": false,
    "parse": [
      "=",
      [
        "test-this",
        "y",
        "get"
      ],
      "15"
    ],
    "code": "12113212111001010312100000131211110013302111132233",
    "spider": "&#xf147;&#xf246;&#xf14b;&#xf14e;&#xf24a;&#xf145;&#xf145;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf213;&#xf24b;",
    "stanza": 1795
  },
  {
    "role": "code",
    "lines": [
      "stack-push $stack-test1 7;"
    ],
    "preprocessed": "stack-push $stack-test1 7;",
    "dt": false,
    "parse": [
      "stack-push",
      [
        -2,
        "stack-test1"
      ],
      "7"
    ],
    "code": "1211001010031231211100010030211132233",
    "spider": "&#xf14a;&#xf158;&#xf249;&#xf14b;&#xf148;&#xf24a;&#xf20b;&#xf24b;",
    "stanza": 1796
  },
  {
    "role": "code",
    "lines": [
      "stack-push $stack-test1 10;"
    ],
    "preprocessed": "stack-push $stack-test1 10;",
    "dt": false,
    "parse": [
      "stack-push",
      [
        -2,
        "stack-test1"
      ],
      "10"
    ],
    "code": "12110010100312312111000100302101032233",
    "spider": "&#xf14a;&#xf158;&#xf249;&#xf14b;&#xf148;&#xf24a;&#xf20e;&#xf24b;",
    "stanza": 1797
  },
  {
    "role": "code",
    "lines": [
      "test-jvm imul;"
    ],
    "preprocessed": "test-jvm imul;",
    "dt": false,
    "parse": [
      "test-jvm",
      "imul"
    ],
    "code": "1211100100031211010010032233",
    "spider": "&#xf14b;&#xf14c;&#xf24a;&#xf14a;&#xf168;&#xf24b;",
    "stanza": 1798
  },
  {
    "role": "code",
    "lines": [
      "test-jvm ireturn;"
    ],
    "preprocessed": "test-jvm ireturn;",
    "dt": false,
    "parse": [
      "test-jvm",
      "ireturn"
    ],
    "code": "1211100100031211011101032233",
    "spider": "&#xf14b;&#xf14c;&#xf24a;&#xf14a;&#xf17e;&#xf24b;",
    "stanza": 1799
  },
  {
    "role": "code",
    "lines": [
      "= (ret-test1 get) 70;"
    ],
    "preprocessed": "= (ret-test1 get) 70;",
    "dt": false,
    "parse": [
      "=",
      [
        "ret-test1",
        "get"
      ],
      "70"
    ],
    "code": "1211321211100011131211110013302100011032233",
    "spider": "&#xf147;&#xf246;&#xf14b;&#xf14b;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf205;&#xf20a;&#xf24b;",
    "stanza": 1800
  },
  {
    "role": "code",
    "lines": [
      "define state-machine-helper | ? at |",
      "  lambda (vars stack machine) |",
      "  let ((pc | cell new $at)",
      "       (ret | cell new $true)) |",
      "  let ((jvm | jvm-maker $vars $stack $pc $ret)) |",
      "  begin",
      "    (machine $jvm | pc get)",
      "    (if (= (pc get) $minus-one) (ret get) |",
      "      state-machine-helper (pc get) $vars $stack $machine);"
    ],
    "preprocessed": "define state-machine-helper | ? at |\n  lambda (vars stack machine) |\n  let ((pc | cell new $at)\n       (ret | cell new $true)) |\n  let ((jvm | jvm-maker $vars $stack $pc $ret)) |\n  begin\n    (machine $jvm | pc get)\n    (if (= (pc get) $minus-one) (ret get) |\n      state-machine-helper (pc get) $vars $stack $machine);",
    "dt": true,
    "parse": [
      "define",
      "state-machine-helper",
      [
        -1,
        "?",
        "at",
        [
          -1,
          "lambda",
          [
            "vars",
            "stack",
            "machine"
          ],
          [
            -1,
            "let",
            [
              [
                "pc",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -2,
                    "at"
                  ]
                ]
              ],
              [
                "ret",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -2,
                    "true"
                  ]
                ]
              ]
            ],
            [
              -1,
              "let",
              [
                [
                  "jvm",
                  [
                    -1,
                    "jvm-maker",
                    [
                      -2,
                      "vars"
                    ],
                    [
                      -2,
                      "stack"
                    ],
                    [
                      -2,
                      "pc"
                    ],
                    [
                      -2,
                      "ret"
                    ]
                  ]
                ]
              ],
              [
                -1,
                "begin",
                [
                  "machine",
                  [
                    -2,
                    "jvm"
                  ],
                  [
                    -1,
                    "pc",
                    "get"
                  ]
                ],
                [
                  "if",
                  [
                    "=",
                    [
                      "pc",
                      "get"
                    ],
                    [
                      -2,
                      "minus-one"
                    ]
                  ],
                  [
                    "ret",
                    "get"
                  ],
                  [
                    -1,
                    "state-machine-helper",
                    [
                      "pc",
                      "get"
                    ],
                    [
                      -2,
                      "vars"
                    ],
                    [
                      -2,
                      "stack"
                    ],
                    [
                      -2,
                      "machine"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312111001011302312110031211100110030231211010321211000111131211001000031211100110133023121110100322121100100013023121000011131210110001312312111001100332121001111302312100001113121011000131231213330231211101003221211100111030231211000111031231211000111131231211001000031231211001000131231210011113330231210110113212111001101312312111001110302312110010001312111100133212111132121132121100100013121111001331231211000110133212100111131211110013302312111001011321211001000131211110013312312110001111312312110010000312312111001101332233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf14f;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf150;&#xf248;&#xf15e;&#xf246;&#xf14a;&#xf153;&#xf24a;&#xf14a;&#xf154;&#xf24a;&#xf14b;&#xf151;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf155;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf249;&#xf14b;&#xf150;&#xf245;&#xf246;&#xf145;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf249;&#xf145;&#xf245;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14b;&#xf152;&#xf248;&#xf14a;&#xf152;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf249;&#xf14a;&#xf155;&#xf249;&#xf145;&#xf153;&#xf245;&#xf245;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf14b;&#xf151;&#xf249;&#xf14b;&#xf152;&#xf248;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf246;&#xf153;&#xf246;&#xf147;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf249;&#xf14a;&#xf151;&#xf245;&#xf246;&#xf145;&#xf153;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf248;&#xf14b;&#xf14f;&#xf246;&#xf14a;&#xf155;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf249;&#xf14b;&#xf151;&#xf245;&#xf24b;",
    "stanza": 1801
  },
  {
    "role": "code",
    "lines": [
      "define state-machine | state-machine-helper 0;"
    ],
    "preprocessed": "define state-machine | state-machine-helper 0;",
    "dt": true,
    "parse": [
      "define",
      "state-machine",
      [
        -1,
        "state-machine-helper",
        "0"
      ]
    ],
    "code": "121101312111001111302312111001011302032233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf153;&#xf248;&#xf14b;&#xf14f;&#xf24a;&#xf204;&#xf24b;",
    "stanza": 1802
  },
  {
    "role": "code",
    "lines": [
      "stack-push $stack-test1 10;"
    ],
    "preprocessed": "stack-push $stack-test1 10;",
    "dt": false,
    "parse": [
      "stack-push",
      [
        -2,
        "stack-test1"
      ],
      "10"
    ],
    "code": "12110010100312312111000100302101032233",
    "spider": "&#xf14a;&#xf158;&#xf249;&#xf14b;&#xf148;&#xf24a;&#xf20e;&#xf24b;",
    "stanza": 1803
  },
  {
    "role": "code",
    "lines": [
      "stack-push $stack-test1 33;"
    ],
    "preprocessed": "stack-push $stack-test1 33;",
    "dt": false,
    "parse": [
      "stack-push",
      [
        -2,
        "stack-test1"
      ],
      "33"
    ],
    "code": "1211001010031231211100010030210000132233",
    "spider": "&#xf14a;&#xf158;&#xf249;&#xf14b;&#xf148;&#xf24a;&#xf225;&#xf24b;",
    "stanza": 1804
  },
  {
    "role": "code",
    "lines": [
      "= 33 | state-machine $vars-test1 $stack-test1 | ? jvm | ? x |",
      "  cond",
      "    ((= $x 0) | jvm istore 4)",
      "    ((= $x 1) | jvm iload 4)",
      "    (jvm ireturn);"
    ],
    "preprocessed": "= 33 | state-machine $vars-test1 $stack-test1 | ? jvm | ? x |\n  cond\n    ((= $x 0) | jvm istore 4)\n    ((= $x 1) | jvm iload 4)\n    (jvm ireturn);",
    "dt": false,
    "parse": [
      "=",
      "33",
      [
        -1,
        "state-machine",
        [
          -2,
          "vars-test1"
        ],
        [
          -2,
          "stack-test1"
        ],
        [
          -1,
          "?",
          "jvm",
          [
            -1,
            "?",
            "x",
            [
              -1,
              "cond",
              [
                [
                  "=",
                  [
                    -2,
                    "x"
                  ],
                  "0"
                ],
                [
                  -1,
                  "jvm",
                  "istore",
                  "4"
                ]
              ],
              [
                [
                  "=",
                  [
                    -2,
                    "x"
                  ],
                  "1"
                ],
                [
                  -1,
                  "jvm",
                  "iload",
                  "4"
                ]
              ],
              [
                "jvm",
                "ireturn"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12113021000013023121110011113123121110001013123121110001003023121100312111001110302312110031210100130231210010111322121131231210100130203302312111001110312110011001302100332212113123121010013021330231211100111031211001110030210033212111001110312110111010332233",
    "spider": "&#xf147;&#xf24a;&#xf225;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14b;&#xf149;&#xf249;&#xf14b;&#xf148;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15d;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17e;&#xf245;&#xf24b;",
    "stanza": 1805
  },
  {
    "role": "code",
    "lines": [
      "stack-push $stack-test1 10;"
    ],
    "preprocessed": "stack-push $stack-test1 10;",
    "dt": false,
    "parse": [
      "stack-push",
      [
        -2,
        "stack-test1"
      ],
      "10"
    ],
    "code": "12110010100312312111000100302101032233",
    "spider": "&#xf14a;&#xf158;&#xf249;&#xf14b;&#xf148;&#xf24a;&#xf20e;&#xf24b;",
    "stanza": 1806
  },
  {
    "role": "code",
    "lines": [
      "define bytecode-test-mul | lambda (arg0 arg1) |",
      "  let ((vars | cell new | make-hash | vector (pair 0 0) (pair 1 $arg0) (pair 2 $arg1))",
      "       (stack | cell new | vector)) |",
      "  state-machine $vars $stack | ? jvm | ? x | cond",
      "    ((= (x) 0) | jvm iload 1)",
      "    ((= (x) 1) | jvm iload 2)",
      "    ((= (x) 2) | jvm imul)",
      "    ((= (x) 3) | jvm ireturn)",
      "    (jvm return);"
    ],
    "preprocessed": "define bytecode-test-mul | lambda (arg0 arg1) |\n  let ((vars | cell new | make-hash | vector (pair 0 0) (pair 1 $arg0) (pair 2 $arg1))\n       (stack | cell new | vector)) |\n  state-machine $vars $stack | ? jvm | ? x | cond\n    ((= (x) 0) | jvm iload 1)\n    ((= (x) 1) | jvm iload 2)\n    ((= (x) 2) | jvm imul)\n    ((= (x) 3) | jvm ireturn)\n    (jvm return);",
    "dt": true,
    "parse": [
      "define",
      "bytecode-test-mul",
      [
        -1,
        "lambda",
        [
          "arg0",
          "arg1"
        ],
        [
          -1,
          "let",
          [
            [
              "vars",
              [
                -1,
                "cell",
                "new",
                [
                  -1,
                  "make-hash",
                  [
                    -1,
                    "vector",
                    [
                      "pair",
                      "0",
                      "0"
                    ],
                    [
                      "pair",
                      "1",
                      [
                        -2,
                        "arg0"
                      ]
                    ],
                    [
                      "pair",
                      "2",
                      [
                        -2,
                        "arg1"
                      ]
                    ]
                  ]
                ]
              ]
            ],
            [
              "stack",
              [
                -1,
                "cell",
                "new",
                [
                  -1,
                  "vector"
                ]
              ]
            ]
          ],
          [
            -1,
            "state-machine",
            [
              -2,
              "vars"
            ],
            [
              -2,
              "stack"
            ],
            [
              -1,
              "?",
              "jvm",
              [
                -1,
                "?",
                "x",
                [
                  -1,
                  "cond",
                  [
                    [
                      "=",
                      [
                        "x"
                      ],
                      "0"
                    ],
                    [
                      -1,
                      "jvm",
                      "iload",
                      "1"
                    ]
                  ],
                  [
                    [
                      "=",
                      [
                        "x"
                      ],
                      "1"
                    ],
                    [
                      -1,
                      "jvm",
                      "iload",
                      "2"
                    ]
                  ],
                  [
                    [
                      "=",
                      [
                        "x"
                      ],
                      "2"
                    ],
                    [
                      -1,
                      "jvm",
                      "imul"
                    ]
                  ],
                  [
                    [
                      "=",
                      [
                        "x"
                      ],
                      "3"
                    ],
                    [
                      -1,
                      "jvm",
                      "ireturn"
                    ]
                  ],
                  [
                    "jvm",
                    "return"
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "121101312111010000302312110103212111010001312111010010330231211101003221211000111130231210000111312101100013023121000010130231210000321210101103020302033212101011030213123121110100013321210101103021031231211101001033321211001000030231210000111312101100013023121000033302312111001111312312110001111312312110010000302312110031211100111030231211003121010013023121001011132212113212101001330203302312111001110312110011100302133221211321210100133021330231211100111031211001110030210332212113212101001330210330231211100111031211010010033221211321210100133021133023121110011103121101110103321211100111031210011111332233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf154;&#xf248;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf24a;&#xf14b;&#xf156;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf206;&#xf249;&#xf14b;&#xf156;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf246;&#xf16d;&#xf245;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf246;&#xf16d;&#xf245;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf246;&#xf147;&#xf246;&#xf16d;&#xf245;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf168;&#xf245;&#xf246;&#xf246;&#xf147;&#xf246;&#xf16d;&#xf245;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17e;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf24b;",
    "stanza": 1807
  },
  {
    "role": "code",
    "lines": [
      "= (bytecode-test-mul 5 9) 45;"
    ],
    "preprocessed": "= (bytecode-test-mul 5 9) 45;",
    "dt": false,
    "parse": [
      "=",
      [
        "bytecode-test-mul",
        "5",
        "9"
      ],
      "45"
    ],
    "code": "121132121110100003021013021001330210110132233",
    "spider": "&#xf147;&#xf246;&#xf14b;&#xf154;&#xf24a;&#xf209;&#xf24a;&#xf20d;&#xf245;&#xf231;&#xf24b;",
    "stanza": 1808
  },
  {
    "role": "file",
    "lines": [
      "== COS_JavaTest =="
    ],
    "stanza": 1809
  },
  {
    "role": "comment",
    "lines": [
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# public class COS_JavaTest {",
      "#     private int q = 0;",
      "#     public int add(int x, int y) {",
      "#     return x + y;",
      "#     }",
      "#     public int sub(int x, int y) {",
      "#     return x - y;",
      "#     }",
      "#     public int mult(int x, int y) {",
      "#     return x * y;",
      "#     }",
      "#     public int addmult(int x, int y, int z) {",
      "#     return add(x, mult(y, z));",
      "#     }",
      "#     public void set(int x) {",
      "#     q = x;",
      "#     }",
      "#     public int get() {",
      "#     return q;",
      "#     }",
      "#     public int fact(int x) {",
      "#     return ( x> 0) ? (x * fact(sub(x, 1))) : 1;",
      "#     }",
      "# }"
    ],
    "section_description": "class translation 'COS_JavaTest'",
    "section_category": "JAVA",
    "section_index": 56,
    "stanza": 1810
  },
  {
    "role": "code",
    "lines": [
      "class COS_JavaTest ()",
      "   (field super-ref | make-cell 0)",
      "   (method new | set! $super-ref | (java lang Object) $this)",
      "   (method super | ? x | (get! $super-ref) $x)",
      "   (method unknown | ? x | self super $x)",
      "   (field q | (int) new)",
      "   (method <init>-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm invokespecial <init>-V 0 0)",
      "         ((= $x 2) | jvm aload 0)",
      "         ((= $x 3) | jvm iconst 0)",
      "         ((= $x 4) | jvm putfield q $int)",
      "         ((= $x 5) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> | self <init>-V)",
      "",
      "   (method add-I-I-I",
      "     (lambda (arg0 arg1) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self) (pair 1 $arg0) (pair 2 $arg1))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm iload 1)",
      "         ((= $x 1) | jvm iload 2)",
      "         ((= $x 2) | jvm iadd)",
      "         ((= $x 3) | jvm ireturn)",
      "         (jvm return))",
      "   )",
      "",
      "   (method add | self add-I-I-I)",
      "",
      "   (method sub-I-I-I",
      "     (lambda (arg0 arg1) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self) (pair 1 $arg0) (pair 2 $arg1))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm iload 1)",
      "         ((= $x 1) | jvm iload 2)",
      "         ((= $x 2) | jvm isub)",
      "         ((= $x 3) | jvm ireturn)",
      "         (jvm return))",
      "   )",
      "",
      "   (method sub | self sub-I-I-I)",
      "",
      "   (method mult-I-I-I",
      "     (lambda (arg0 arg1) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self) (pair 1 $arg0) (pair 2 $arg1))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm iload 1)",
      "         ((= $x 1) | jvm iload 2)",
      "         ((= $x 2) | jvm imul)",
      "         ((= $x 3) | jvm ireturn)",
      "         (jvm return))",
      "   )",
      "",
      "   (method mult | self mult-I-I-I)",
      "",
      "   (method addmult-I-I-I-I",
      "     (lambda (arg0 arg1 arg2) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self) (pair 1 $arg0) (pair 2 $arg1) (pair 3 $arg2))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm iload 1)",
      "         ((= $x 2) | jvm aload 0)",
      "         ((= $x 3) | jvm iload 2)",
      "         ((= $x 4) | jvm iload 3)",
      "         ((= $x 5) | jvm invokevirtual mult-I-I-I 2 1)",
      "         ((= $x 6) | jvm invokevirtual add-I-I-I 2 1)",
      "         ((= $x 7) | jvm ireturn)",
      "         (jvm return))",
      "   )",
      "",
      "   (method addmult | self addmult-I-I-I-I)",
      "",
      "   (method set-I-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self) (pair 1 $arg0))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm iload 1)",
      "         ((= $x 2) | jvm putfield q $int)",
      "         ((= $x 3) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method set | self set-I-V)",
      "",
      "   (method get-I",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm getfield q $int)",
      "         ((= $x 2) | jvm ireturn)",
      "         (jvm return))",
      "   )",
      "",
      "   (method get | self get-I)",
      "",
      "   (method fact-I-I",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self) (pair 1 $arg0))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm iload 1)",
      "         ((= $x 1) | jvm ifle 11)",
      "         ((= $x 2) | jvm iload 1)",
      "         ((= $x 3) | jvm aload 0)",
      "         ((= $x 4) | jvm aload 0)",
      "         ((= $x 5) | jvm iload 1)",
      "         ((= $x 6) | jvm iconst 1)",
      "         ((= $x 7) | jvm invokevirtual sub-I-I-I 2 1)",
      "         ((= $x 8) | jvm invokevirtual fact-I-I 1 1)",
      "         ((= $x 9) | jvm imul)",
      "         ((= $x 10) | jvm goto 12)",
      "         ((= $x 11) | jvm iconst 1)",
      "         ((= $x 12) | jvm ireturn)",
      "         (jvm return))",
      "   )",
      "",
      "   (method fact | self fact-I-I)",
      "",
      " ;"
    ],
    "preprocessed": "class COS_JavaTest ()\n   (field super-ref | make-cell 0)\n   (method new | set! $super-ref | (java lang Object) $this)\n   (method super | ? x | (get! $super-ref) $x)\n   (method unknown | ? x | self super $x)\n   (field q | (int) new)\n   (method <init>-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm invokespecial <init>-V 0 0)\n         ((= $x 2) | jvm aload 0)\n         ((= $x 3) | jvm iconst 0)\n         ((= $x 4) | jvm putfield q $int)\n         ((= $x 5) | jvm return)\n         (jvm return))\n   )\n\n   (method <init> | self <init>-V)\n\n   (method add-I-I-I\n     (lambda (arg0 arg1) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self) (pair 1 $arg0) (pair 2 $arg1))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm iload 1)\n         ((= $x 1) | jvm iload 2)\n         ((= $x 2) | jvm iadd)\n         ((= $x 3) | jvm ireturn)\n         (jvm return))\n   )\n\n   (method add | self add-I-I-I)\n\n   (method sub-I-I-I\n     (lambda (arg0 arg1) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self) (pair 1 $arg0) (pair 2 $arg1))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm iload 1)\n         ((= $x 1) | jvm iload 2)\n         ((= $x 2) | jvm isub)\n         ((= $x 3) | jvm ireturn)\n         (jvm return))\n   )\n\n   (method sub | self sub-I-I-I)\n\n   (method mult-I-I-I\n     (lambda (arg0 arg1) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self) (pair 1 $arg0) (pair 2 $arg1))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm iload 1)\n         ((= $x 1) | jvm iload 2)\n         ((= $x 2) | jvm imul)\n         ((= $x 3) | jvm ireturn)\n         (jvm return))\n   )\n\n   (method mult | self mult-I-I-I)\n\n   (method addmult-I-I-I-I\n     (lambda (arg0 arg1 arg2) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self) (pair 1 $arg0) (pair 2 $arg1) (pair 3 $arg2))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm iload 1)\n         ((= $x 2) | jvm aload 0)\n         ((= $x 3) | jvm iload 2)\n         ((= $x 4) | jvm iload 3)\n         ((= $x 5) | jvm invokevirtual mult-I-I-I 2 1)\n         ((= $x 6) | jvm invokevirtual add-I-I-I 2 1)\n         ((= $x 7) | jvm ireturn)\n         (jvm return))\n   )\n\n   (method addmult | self addmult-I-I-I-I)\n\n   (method set-I-V\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self) (pair 1 $arg0))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm iload 1)\n         ((= $x 2) | jvm putfield q $int)\n         ((= $x 3) | jvm return)\n         (jvm return))\n   )\n\n   (method set | self set-I-V)\n\n   (method get-I\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm getfield q $int)\n         ((= $x 2) | jvm ireturn)\n         (jvm return))\n   )\n\n   (method get | self get-I)\n\n   (method fact-I-I\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self) (pair 1 $arg0))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm iload 1)\n         ((= $x 1) | jvm ifle 11)\n         ((= $x 2) | jvm iload 1)\n         ((= $x 3) | jvm aload 0)\n         ((= $x 4) | jvm aload 0)\n         ((= $x 5) | jvm iload 1)\n         ((= $x 6) | jvm iconst 1)\n         ((= $x 7) | jvm invokevirtual sub-I-I-I 2 1)\n         ((= $x 8) | jvm invokevirtual fact-I-I 1 1)\n         ((= $x 9) | jvm imul)\n         ((= $x 10) | jvm goto 12)\n         ((= $x 11) | jvm iconst 1)\n         ((= $x 12) | jvm ireturn)\n         (jvm return))\n   )\n\n   (method fact | self fact-I-I)\n\n ;",
    "dt": true,
    "parse": [
      "class",
      "COS_JavaTest",
      [],
      [
        "field",
        "super-ref",
        [
          -1,
          "make-cell",
          "0"
        ]
      ],
      [
        "method",
        "new",
        [
          -1,
          "set!",
          [
            -2,
            "super-ref"
          ],
          [
            -1,
            [
              "java",
              "lang",
              "Object"
            ],
            [
              -2,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          -1,
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -2,
                "super-ref"
              ]
            ],
            [
              -2,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -2,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "q",
        [
          -1,
          [
            "int"
          ],
          "new"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "iconst",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "q",
                        [
                          -2,
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "5"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          -1,
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "add-I-I-I",
        [
          "lambda",
          [
            "arg0",
            "arg1"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          -2,
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        "2",
                        [
                          -2,
                          "arg1"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "iload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "iload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "iadd"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "ireturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "add",
        [
          -1,
          "self",
          "add-I-I-I"
        ]
      ],
      [
        "method",
        "sub-I-I-I",
        [
          "lambda",
          [
            "arg0",
            "arg1"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          -2,
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        "2",
                        [
                          -2,
                          "arg1"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "iload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "iload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "isub"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "ireturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "sub",
        [
          -1,
          "self",
          "sub-I-I-I"
        ]
      ],
      [
        "method",
        "mult-I-I-I",
        [
          "lambda",
          [
            "arg0",
            "arg1"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          -2,
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        "2",
                        [
                          -2,
                          "arg1"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "iload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "iload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "imul"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "ireturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "mult",
        [
          -1,
          "self",
          "mult-I-I-I"
        ]
      ],
      [
        "method",
        "addmult-I-I-I-I",
        [
          "lambda",
          [
            "arg0",
            "arg1",
            "arg2"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          -2,
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        "2",
                        [
                          -2,
                          "arg1"
                        ]
                      ],
                      [
                        "pair",
                        "3",
                        [
                          -2,
                          "arg2"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "iload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "iload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "iload",
                        "3"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "5"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "mult-I-I-I",
                        "2",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "6"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "add-I-I-I",
                        "2",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "7"
                      ],
                      [
                        -1,
                        "jvm",
                        "ireturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "addmult",
        [
          -1,
          "self",
          "addmult-I-I-I-I"
        ]
      ],
      [
        "method",
        "set-I-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          -2,
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "iload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "q",
                        [
                          -2,
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "set",
        [
          -1,
          "self",
          "set-I-V"
        ]
      ],
      [
        "method",
        "get-I",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "q",
                        [
                          -2,
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "ireturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "get",
        [
          -1,
          "self",
          "get-I"
        ]
      ],
      [
        "method",
        "fact-I-I",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          -2,
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "iload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "ifle",
                        "11"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "iload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "5"
                      ],
                      [
                        -1,
                        "jvm",
                        "iload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "6"
                      ],
                      [
                        -1,
                        "jvm",
                        "iconst",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "7"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "sub-I-I-I",
                        "2",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "8"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "fact-I-I",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "9"
                      ],
                      [
                        -1,
                        "jvm",
                        "imul"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "10"
                      ],
                      [
                        -1,
                        "jvm",
                        "goto",
                        "12"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "11"
                      ],
                      [
                        -1,
                        "jvm",
                        "iconst",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "12"
                      ],
                      [
                        -1,
                        "jvm",
                        "ireturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "fact",
        [
          -1,
          "self",
          "fact-I-I"
        ]
      ]
    ],
    "code
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf14b;&#xf157;&#xf246;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14b;&#xf158;&#xf248;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf160;&#xf249;&#xf14b;&#xf158;&#xf248;&#xf246;&#xf149;&#xf17e;&#xf24a;&#xf14b;&#xf159;&#xf24a;&#xf149;&#xf16d;&#xf245;&#xf249;&#xf146;&#xf182;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf178;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf246;&#xf161;&#xf249;&#xf14b;&#xf158;&#xf245;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf148;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf146;&#xf178;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14b;&#xf15a;&#xf248;&#xf246;&#xf182;&#xf245;&#xf146;&#xf175;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf16f;&#xf246;&#xf15e;&#xf246;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14b;&#xf144;&#xf24a;&#xf149;&#xf16f;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf161;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf14b;&#xf15a;&#xf249;&#xf182;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf170;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf149;&#xf16f;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf15b;&#xf246;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf24a;&#xf14b;&#xf156;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf206;&#xf249;&#xf14b;&#xf156;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf16b;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17e;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf172;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14b;&#xf15b;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf15c;&#xf246;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf24a;&#xf14b;&#xf156;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf206;&#xf249;&#xf14b;&#xf156;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf16c;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17e;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf15d;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14b;&#xf15c;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf15e;&#xf246;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf24a;&#xf14b;&#xf156;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf206;&#xf249;&#xf14b;&#xf156;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf168;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17e;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf15f;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14b;&#xf15e;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf160;&#xf246;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf24a;&#xf14b;&#xf156;&#xf24a;&#xf14b;&#xf161;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf206;&#xf249;&#xf14b;&#xf156;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf207;&#xf249;&#xf14b;&#xf161;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14b;&#xf15e;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14b;&#xf15b;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17e;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf162;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14b;&#xf160;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf163;&#xf246;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf14b;&#xf15a;&#xf249;&#xf182;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14b;&#xf163;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf164;&#xf246;&#xf15e;&#xf246;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf14b;&#xf15a;&#xf249;&#xf182;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17e;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf145;&#xf17d;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14b;&#xf164;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf165;&#xf246;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf16f;&#xf24a;&#xf20f;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf161;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14b;&#xf15c;&#xf24a;&#xf206;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14b;&#xf165;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf168;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20e;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf16d;&#xf24a;&#xf210;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20f;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf161;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf210;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17e;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf166;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14b;&#xf165;&#xf245;&#xf24b;",
    "stanza": 1811
  },
  {
    "role": "file",
    "lines": [
      "== COS_JavaValidate =="
    ],
    "stanza": 1812
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "check that automatic conversion is workable",
    "section_category": "JAVA",
    "section_index": 57,
    "stanza": 1813
  },
  {
    "role": "code",
    "lines": [
      "define test1 | COS_JavaTest new;"
    ],
    "preprocessed": "define test1 | COS_JavaTest new;",
    "dt": true,
    "parse": [
      "define",
      "test1",
      [
        -1,
        "COS_JavaTest",
        "new"
      ]
    ],
    "code": "1211013121111000113023121110100113121011000132233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf167;&#xf248;&#xf14b;&#xf157;&#xf24a;&#xf146;&#xf175;&#xf24b;",
    "stanza": 1814
  },
  {
    "role": "comment",
    "lines": [
      "# Note that the names of methods include type information.",
      "# This could easily be removed, but is retained so that overloading",
      "# is possible in the Java code.",
      "# I is integer, V is void.  The last type in the name is the return type."
    ],
    "stanza": 1815
  },
  {
    "role": "code",
    "lines": [
      "= (test1 mult-I-I-I 15 10) 150;"
    ],
    "preprocessed": "= (test1 mult-I-I-I 15 10) 150;",
    "dt": false,
    "parse": [
      "=",
      [
        "test1",
        "mult-I-I-I",
        "15",
        "10"
      ],
      "150"
    ],
    "code": "121132121111000113121110110103021111302101033021001011032233",
    "spider": "&#xf147;&#xf246;&#xf14b;&#xf167;&#xf24a;&#xf14b;&#xf15e;&#xf24a;&#xf213;&#xf24a;&#xf20e;&#xf245;&#xf206;&#xf21a;&#xf24b;",
    "stanza": 1816
  },
  {
    "role": "comment",
    "lines": [
      "# The type information can be safely omitted if there is no ambiguity"
    ],
    "stanza": 1817
  },
  {
    "role": "code",
    "lines": [
      "= (test1 mult 15 10) 150;"
    ],
    "preprocessed": "= (test1 mult 15 10) 150;",
    "dt": false,
    "parse": [
      "=",
      [
        "test1",
        "mult",
        "15",
        "10"
      ],
      "150"
    ],
    "code": "121132121111000113121110110113021111302101033021001011032233",
    "spider": "&#xf147;&#xf246;&#xf14b;&#xf167;&#xf24a;&#xf14b;&#xf15f;&#xf24a;&#xf213;&#xf24a;&#xf20e;&#xf245;&#xf206;&#xf21a;&#xf24b;",
    "stanza": 1818
  },
  {
    "role": "code",
    "lines": [
      "= (test1 addmult-I-I-I-I 4 15 10) 154;"
    ],
    "preprocessed": "= (test1 addmult-I-I-I-I 4 15 10) 154;",
    "dt": false,
    "parse": [
      "=",
      [
        "test1",
        "addmult-I-I-I-I",
        "4",
        "15",
        "10"
      ],
      "154"
    ],
    "code": "121132121111000113121110111003021003021111302101033021001101032233",
    "spider": "&#xf147;&#xf246;&#xf14b;&#xf167;&#xf24a;&#xf14b;&#xf160;&#xf24a;&#xf208;&#xf24a;&#xf213;&#xf24a;&#xf20e;&#xf245;&#xf206;&#xf21e;&#xf24b;",
    "stanza": 1819
  },
  {
    "role": "code",
    "lines": [
      "begin",
      "  (test1 set-I-V 87)",
      "  (= (test1 get-I) 87);"
    ],
    "preprocessed": "begin\n  (test1 set-I-V 87)\n  (= (test1 get-I) 87);",
    "dt": false,
    "parse": [
      "begin",
      [
        "test1",
        "set-I-V",
        "87"
      ],
      [
        "=",
        [
          "test1",
          "get-I"
        ],
        "87"
      ]
    ],
    "code": "121011011321211110001131211101111130210101113321211321211110001131211110000033021010111332233",
    "spider": "&#xf145;&#xf15f;&#xf246;&#xf14b;&#xf167;&#xf24a;&#xf14b;&#xf163;&#xf24a;&#xf205;&#xf21b;&#xf245;&#xf246;&#xf147;&#xf246;&#xf14b;&#xf167;&#xf24a;&#xf14b;&#xf164;&#xf245;&#xf205;&#xf21b;&#xf245;&#xf24b;",
    "stanza": 1820
  },
  {
    "role": "code",
    "lines": [
      "= (test1 fact-I-I 0) 1;"
    ],
    "preprocessed": "= (test1 fact-I-I 0) 1;",
    "dt": false,
    "parse": [
      "=",
      [
        "test1",
        "fact-I-I",
        "0"
      ],
      "1"
    ],
    "code": "1211321211110001131211110000130203302132233",
    "spider": "&#xf147;&#xf246;&#xf14b;&#xf167;&#xf24a;&#xf14b;&#xf165;&#xf24a;&#xf204;&#xf245;&#xf205;&#xf24b;",
    "stanza": 1821
  },
  {
    "role": "code",
    "lines": [
      "= (test1 fact-I-I 1) 1;"
    ],
    "preprocessed": "= (test1 fact-I-I 1) 1;",
    "dt": false,
    "parse": [
      "=",
      [
        "test1",
        "fact-I-I",
        "1"
      ],
      "1"
    ],
    "code": "1211321211110001131211110000130213302132233",
    "spider": "&#xf147;&#xf246;&#xf14b;&#xf167;&#xf24a;&#xf14b;&#xf165;&#xf24a;&#xf205;&#xf245;&#xf205;&#xf24b;",
    "stanza": 1822
  },
  {
    "role": "code",
    "lines": [
      "= (test1 fact-I-I 5) 120;"
    ],
    "preprocessed": "= (test1 fact-I-I 5) 120;",
    "dt": false,
    "parse": [
      "=",
      [
        "test1",
        "fact-I-I",
        "5"
      ],
      "120"
    ],
    "code": "121132121111000113121111000013021013302111100032233",
    "spider": "&#xf147;&#xf246;&#xf14b;&#xf167;&#xf24a;&#xf14b;&#xf165;&#xf24a;&#xf209;&#xf245;&#xf205;&#xf23c;&#xf24b;",
    "stanza": 1823
  },
  {
    "role": "comment",
    "lines": [
      "# Yay! testing says this works.",
      "# So structure for bytecode interpretation is in place.",
      "# Very few opcodes actually implemented yet though."
    ],
    "stanza": 1824
  },
  {
    "role": "file",
    "lines": [
      "== COS_Geo =="
    ],
    "stanza": 1825
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "another simple little text-adventure space",
    "section_category": "MUD",
    "section_index": 58,
    "stanza": 1826
  },
  {
    "role": "comment",
    "lines": [
      "# let us try to make a slightly more interesting world"
    ],
    "stanza": 1827
  },
  {
    "role": "code",
    "lines": [
      "define make-table | ? lst |",
      "   reduce",
      "     (? x | ? h |",
      "        assign name (car $x) |",
      "    assign obj (cdr $x) |",
      "    hash-add $h $name $obj)",
      "     (append $hash-null $lst);"
    ],
    "preprocessed": "define make-table | ? lst |\n   reduce\n     (? x | ? h |\n        assign name (car $x) |\n    assign obj (cdr $x) |\n    hash-add $h $name $obj)\n     (append $hash-null $lst);",
    "dt": true,
    "parse": [
      "define",
      "make-table",
      [
        -1,
        "?",
        "lst",
        [
          -1,
          "reduce",
          [
            "?",
            "x",
            [
              -1,
              "?",
              "h",
              [
                -1,
                "assign",
                "name",
                [
                  "car",
                  [
                    -2,
                    "x"
                  ]
                ],
                [
                  -1,
                  "assign",
                  "obj",
                  [
                    "cdr",
                    [
                      -2,
                      "x"
                    ]
                  ],
                  [
                    -1,
                    "hash-add",
                    [
                      -2,
                      "h"
                    ],
                    [
                      -2,
                      "name"
                    ],
                    [
                      -2,
                      "obj"
                    ]
                  ]
                ]
              ]
            ]
          ],
          [
            "append",
            [
              -2,
              "hash-null"
            ],
            [
              -2,
              "lst"
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121111001003023121100312110000130231210110103212110031210100130231211003121001100103023121110312110000003212101103123121010013302312111031210100000321210111312312101001330231211111113123121001100103123121100000031231210100000332121100000312312100000103123121100001332233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf168;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf165;&#xf248;&#xf145;&#xf15e;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf150;&#xf24a;&#xf148;&#xf176;&#xf248;&#xf152;&#xf24a;&#xf147;&#xf144;&#xf246;&#xf15a;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf146;&#xf164;&#xf246;&#xf15b;&#xf249;&#xf16d;&#xf245;&#xf248;&#xf145;&#xf183;&#xf249;&#xf148;&#xf176;&#xf249;&#xf147;&#xf144;&#xf249;&#xf146;&#xf164;&#xf245;&#xf246;&#xf145;&#xf164;&#xf249;&#xf146;&#xf146;&#xf249;&#xf145;&#xf165;&#xf245;&#xf24b;",
    "stanza": 1828
  },
  {
    "role": "comment",
    "lines": [
      "# note, the quoted strings below are just represented as a big number,",
      "# nothing special"
    ],
    "stanza": 1829
  },
  {
    "role": "code",
    "lines": [
      "define geo-map | make-table | map",
      "   (? name | cons $name | room new $name)",
      "   (vector \"boston\" \"dublin\" \"paris\" \"genoa\");"
    ],
    "preprocessed": "define geo-map | make-table | map\n   (? name | cons $name | room new $name)\n   (vector \"boston\" \"dublin\" \"paris\" \"genoa\");",
    "dt": true,
    "parse": [
      "define",
      "geo-map",
      [
        -1,
        "make-table",
        [
          -1,
          "map",
          [
            "?",
            "name",
            [
              -1,
              "cons",
              [
                -2,
                "name"
              ],
              [
                -1,
                "room",
                "new",
                [
                  -2,
                  "name"
                ]
              ]
            ]
          ],
          [
            "vector",
            "\"boston\"",
            "\"dublin\"",
            "\"paris\"",
            "\"genoa\""
          ]
        ]
      ]
    ],
    "code": "1211013121111001013023121111001003023121011001321211003121100000030231210101312312110000003023121101011131210110001312312110000003321210000302001000100110001001101111011100110111010001101111011011100010001030200100010011001000111010101100010011011000110100101101110001000103020010001001110000011000010111001001101001011100110010001030200100010011001110110010101101110011011110110000100100010332233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf169;&#xf248;&#xf14b;&#xf168;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf147;&#xf144;&#xf248;&#xf159;&#xf249;&#xf147;&#xf144;&#xf248;&#xf147;&#xf15b;&#xf24a;&#xf146;&#xf175;&#xf249;&#xf147;&#xf144;&#xf245;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf20d;&#xf226;&#xf21f;&#xf23b;&#xf211;&#xf238;&#xf21f;&#xf23a;&#xf23c;&#xf226;&#xf24a;&#xf206;&#xf20d;&#xf228;&#xf221;&#xf21a;&#xf20d;&#xf230;&#xf21e;&#xf21a;&#xf23c;&#xf226;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf20a;&#xf209;&#xf236;&#xf21e;&#xf21b;&#xf210;&#xf226;&#xf24a;&#xf204;&#xf226;&#xf21d;&#xf23a;&#xf219;&#xf232;&#xf21f;&#xf23a;&#xf208;&#xf226;&#xf245;&#xf24b;",
    "stanza": 1830
  },
  {
    "role": "code",
    "lines": [
      "define my-links | map",
      "   (? entry |",
      "     assign src (car $entry) |",
      "     assign dest (cdr $entry) |",
      "     door new (geo-map $src) (geo-map $dest))",
      "   (vector",
      "    (cons \"boston\" \"dublin\")",
      "    (cons \"dublin\" \"paris\")",
      "    (cons \"boston\" \"paris\")",
      "    (cons \"paris\" \"genoa\"));"
    ],
    "preprocessed": "define my-links | map\n   (? entry |\n     assign src (car $entry) |\n     assign dest (cdr $entry) |\n     door new (geo-map $src) (geo-map $dest))\n   (vector\n    (cons \"boston\" \"dublin\")\n    (cons \"dublin\" \"paris\")\n    (cons \"boston\" \"paris\")\n    (cons \"paris\" \"genoa\"));",
    "dt": true,
    "parse": [
      "define",
      "my-links",
      [
        -1,
        "map",
        [
          "?",
          "entry",
          [
            -1,
            "assign",
            "src",
            [
              "car",
              [
                -2,
                "entry"
              ]
            ],
            [
              -1,
              "assign",
              "dest",
              [
                "cdr",
                [
                  -2,
                  "entry"
                ]
              ],
              [
                -1,
                "door",
                "new",
                [
                  "geo-map",
                  [
                    -2,
                    "src"
                  ]
                ],
                [
                  "geo-map",
                  [
                    -2,
                    "dest"
                  ]
                ]
              ]
            ]
          ]
        ],
        [
          "vector",
          [
            "cons",
            "\"boston\"",
            "\"dublin\""
          ],
          [
            "cons",
            "\"dublin\"",
            "\"paris\""
          ],
          [
            "cons",
            "\"boston\"",
            "\"paris\""
          ],
          [
            "cons",
            "\"paris\"",
            "\"genoa\""
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf16a;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf14b;&#xf16b;&#xf248;&#xf152;&#xf24a;&#xf147;&#xf15a;&#xf246;&#xf15a;&#xf249;&#xf14b;&#xf16b;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf147;&#xf15c;&#xf246;&#xf15b;&#xf249;&#xf14b;&#xf16b;&#xf245;&#xf248;&#xf147;&#xf159;&#xf24a;&#xf146;&#xf175;&#xf246;&#xf14b;&#xf169;&#xf249;&#xf147;&#xf15a;&#xf245;&#xf246;&#xf14b;&#xf169;&#xf249;&#xf147;&#xf15c;&#xf245;&#xf245;&#xf246;&#xf154;&#xf246;&#xf159;&#xf24a;&#xf206;&#xf20d;&#xf226;&#xf21f;&#xf23b;&#xf211;&#xf238;&#xf21f;&#xf23a;&#xf23c;&#xf226;&#xf24a;&#xf206;&#xf20d;&#xf228;&#xf221;&#xf21a;&#xf20d;&#xf230;&#xf21e;&#xf21a;&#xf23c;&#xf226;&#xf245;&#xf246;&#xf159;&#xf24a;&#xf206;&#xf20d;&#xf228;&#xf221;&#xf21a;&#xf20d;&#xf230;&#xf21e;&#xf21a;&#xf23c;&#xf226;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf20a;&#xf209;&#xf236;&#xf21e;&#xf21b;&#xf210;&#xf226;&#xf245;&#xf246;&#xf159;&#xf24a;&#xf206;&#xf20d;&#xf226;&#xf21f;&#xf23b;&#xf211;&#xf238;&#xf21f;&#xf23a;&#xf23c;&#xf226;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf20a;&#xf209;&#xf236;&#xf21e;&#xf21b;&#xf210;&#xf226;&#xf245;&#xf246;&#xf159;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf20a;&#xf209;&#xf236;&#xf21e;&#xf21b;&#xf210;&#xf226;&#xf24a;&#xf204;&#xf226;&#xf21d;&#xf23a;&#xf219;&#xf232;&#xf21f;&#xf23a;&#xf208;&#xf226;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1831
  },
  {
    "role": "code",
    "lines": [
      "define myrobo | robo new;"
    ],
    "preprocessed": "define myrobo | robo new;",
    "dt": true,
    "parse": [
      "define",
      "myrobo",
      [
        -1,
        "robo",
        "new"
      ]
    ],
    "code": "12110131211111100302312111100113121011000132233",
    "spider": "&#xf151;&#xf24a;&#xf147;&#xf180;&#xf248;&#xf147;&#xf177;&#xf24a;&#xf146;&#xf175;&#xf24b;",
    "stanza": 1832
  },
  {
    "role": "code",
    "lines": [
      "myrobo set-room | geo-map \"dublin\";"
    ],
    "preprocessed": "myrobo set-room | geo-map \"dublin\";",
    "dt": false,
    "parse": [
      "myrobo",
      "set-room",
      [
        -1,
        "geo-map",
        "\"dublin\""
      ]
    ],
    "code": "121111110031211101000302312111100101302001000100110010001110101011000100110110001101001011011100010001032233",
    "spider": "&#xf147;&#xf180;&#xf24a;&#xf147;&#xf16c;&#xf248;&#xf14b;&#xf169;&#xf24a;&#xf206;&#xf20d;&#xf228;&#xf221;&#xf21a;&#xf20d;&#xf230;&#xf21e;&#xf21a;&#xf23c;&#xf226;&#xf24b;",
    "stanza": 1833
  },
  {
    "role": "code",
    "lines": [
      "equal \"dublin\" | myrobo get-room name;"
    ],
    "preprocessed": "equal \"dublin\" | myrobo get-room name;",
    "dt": false,
    "parse": [
      "equal",
      "\"dublin\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "code": "121000302001000100110010001110101011000100110110001101001011011100010001030231211111100312111010103121100000032233",
    "spider": "&#xf14c;&#xf24a;&#xf206;&#xf20d;&#xf228;&#xf221;&#xf21a;&#xf20d;&#xf230;&#xf21e;&#xf21a;&#xf23c;&#xf226;&#xf248;&#xf147;&#xf180;&#xf24a;&#xf147;&#xf16e;&#xf24a;&#xf147;&#xf144;&#xf24b;",
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1834
  },
  {
    "role": "code",
    "lines": [
      "myrobo update;"
    ],
    "preprocessed": "myrobo update;",
    "dt": false,
    "parse": [
      "myrobo",
      "update"
    ],
    "code": "12111111003121110110132233",
    "spider": "&#xf147;&#xf180;&#xf24a;&#xf147;&#xf171;&#xf24b;",
    "stanza": 1835
  },
  {
    "role": "code",
    "lines": [
      "equal \"paris\" | myrobo get-room name;"
    ],
    "preprocessed": "equal \"paris\" | myrobo get-room name;",
    "dt": false,
    "parse": [
      "equal",
      "\"paris\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "code": "1210003020010001001110000011000010111001001101001011100110010001030231211111100312111010103121100000032233",
    "spider": "&#xf14c;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf20a;&#xf209;&#xf236;&#xf21e;&#xf21b;&#xf210;&#xf226;&#xf248;&#xf147;&#xf180;&#xf24a;&#xf147;&#xf16e;&#xf24a;&#xf147;&#xf144;&#xf24b;",
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1836
  },
  {
    "role": "code",
    "lines": [
      "myrobo update;"
    ],
    "preprocessed": "myrobo update;",
    "dt": false,
    "parse": [
      "myrobo",
      "update"
    ],
    "code": "12111111003121110110132233",
    "spider": "&#xf147;&#xf180;&#xf24a;&#xf147;&#xf171;&#xf24b;",
    "stanza": 1837
  },
  {
    "role": "code",
    "lines": [
      "equal \"genoa\" | myrobo get-room name;"
    ],
    "preprocessed": "equal \"genoa\" | myrobo get-room name;",
    "dt": false,
    "parse": [
      "equal",
      "\"genoa\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "code": "1210003020010001001100111011001010110111001101111011000010010001030231211111100312111010103121100000032233",
    "spider": "&#xf14c;&#xf24a;&#xf204;&#xf226;&#xf21d;&#xf23a;&#xf219;&#xf232;&#xf21f;&#xf23a;&#xf208;&#xf226;&#xf248;&#xf147;&#xf180;&#xf24a;&#xf147;&#xf16e;&#xf24a;&#xf147;&#xf144;&#xf24b;",
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1838
  },
  {
    "role": "code",
    "lines": [
      "myrobo update;"
    ],
    "preprocessed": "myrobo update;",
    "dt": false,
    "parse": [
      "myrobo",
      "update"
    ],
    "code": "12111111003121110110132233",
    "spider": "&#xf147;&#xf180;&#xf24a;&#xf147;&#xf171;&#xf24b;",
    "stanza": 1839
  },
  {
    "role": "code",
    "lines": [
      "equal \"paris\" | myrobo get-room name;"
    ],
    "preprocessed": "equal \"paris\" | myrobo get-room name;",
    "dt": false,
    "parse": [
      "equal",
      "\"paris\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "code": "1210003020010001001110000011000010111001001101001011100110010001030231211111100312111010103121100000032233",
    "spider": "&#xf14c;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf20a;&#xf209;&#xf236;&#xf21e;&#xf21b;&#xf210;&#xf226;&#xf248;&#xf147;&#xf180;&#xf24a;&#xf147;&#xf16e;&#xf24a;&#xf147;&#xf144;&#xf24b;",
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1840
  },
  {
    "role": "code",
    "lines": [
      "myrobo update;"
    ],
    "preprocessed": "myrobo update;",
    "dt": false,
    "parse": [
      "myrobo",
      "update"
    ],
    "code": "12111111003121110110132233",
    "spider": "&#xf147;&#xf180;&#xf24a;&#xf147;&#xf171;&#xf24b;",
    "stanza": 1841
  },
  {
    "role": "code",
    "lines": [
      "equal \"boston\" | myrobo get-room name;"
    ],
    "preprocessed": "equal \"boston\" | myrobo get-room name;",
    "dt": false,
    "parse": [
      "equal",
      "\"boston\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "code": "121000302001000100110001001101111011100110111010001101111011011100010001030231211111100312111010103121100000032233",
    "spider": "&#xf14c;&#xf24a;&#xf206;&#xf20d;&#xf226;&#xf21f;&#xf23b;&#xf211;&#xf238;&#xf21f;&#xf23a;&#xf23c;&#xf226;&#xf248;&#xf147;&#xf180;&#xf24a;&#xf147;&#xf16e;&#xf24a;&#xf147;&#xf144;&#xf24b;",
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1842
  },
  {
    "role": "code",
    "lines": [
      "myrobo update;"
    ],
    "preprocessed": "myrobo update;",
    "dt": false,
    "parse": [
      "myrobo",
      "update"
    ],
    "code": "12111111003121110110132233",
    "spider": "&#xf147;&#xf180;&#xf24a;&#xf147;&#xf171;&#xf24b;",
    "stanza": 1843
  },
  {
    "role": "code",
    "lines": [
      "equal \"dublin\" | myrobo get-room name;"
    ],
    "preprocessed": "equal \"dublin\" | myrobo get-room name;",
    "dt": false,
    "parse": [
      "equal",
      "\"dublin\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "code": "121000302001000100110010001110101011000100110110001101001011011100010001030231211111100312111010103121100000032233",
    "spider": "&#xf14c;&#xf24a;&#xf206;&#xf20d;&#xf228;&#xf221;&#xf21a;&#xf20d;&#xf230;&#xf21e;&#xf21a;&#xf23c;&#xf226;&#xf248;&#xf147;&#xf180;&#xf24a;&#xf147;&#xf16e;&#xf24a;&#xf147;&#xf144;&#xf24b;",
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1844
  },
  {
    "role": "code",
    "lines": [
      "myrobo update;"
    ],
    "preprocessed": "myrobo update;",
    "dt": false,
    "parse": [
      "myrobo",
      "update"
    ],
    "code": "12111111003121110110132233",
    "spider": "&#xf147;&#xf180;&#xf24a;&#xf147;&#xf171;&#xf24b;",
    "stanza": 1845
  },
  {
    "role": "code",
    "lines": [
      "equal \"paris\" | myrobo get-room name;"
    ],
    "preprocessed": "equal \"paris\" | myrobo get-room name;",
    "dt": false,
    "parse": [
      "equal",
      "\"paris\"",
      [
        -1,
        "myrobo",
        "get-room",
        "name"
      ]
    ],
    "code": "1210003020010001001110000011000010111001001101001011100110010001030231211111100312111010103121100000032233",
    "spider": "&#xf14c;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf20a;&#xf209;&#xf236;&#xf21e;&#xf21b;&#xf210;&#xf226;&#xf248;&#xf147;&#xf180;&#xf24a;&#xf147;&#xf16e;&#xf24a;&#xf147;&#xf144;&#xf24b;",
    "lines_original": [
      "demo | myrobo get-room name;"
    ],
    "stanza": 1846
  },
  {
    "role": "comment",
    "lines": [
      "# all characters should update together"
    ],
    "stanza": 1847
  },
  {
    "role": "code",
    "lines": [
      "class world (the-places the-links)",
      "   (field things | container new)",
      "   (field names | cell new $hash-null)",
      "   (field places | cell new 0)",
      "   (field links | cell new 0)",
      "   (method new | begin",
      "     (places set | make-table | map",
      "        (? name | cons $name | room new $name)",
      "    $the-places)",
      "     (links set | map",
      "        (? entry |",
      "          assign src (car $entry) |",
      "          assign dest (cdr $entry) |",
      "          door new (places get $src) (places get $dest))",
      "        $the-links))",
      "   (method add | lambda (place name val) | begin",
      "     (val set-room | places get $place)",
      "     (val set-name $name)",
      "     (names set | hash-add (names get) $name $val)",
      "     (things add $val))",
      "   (method find | ? n  | names get $n get-room name)",
      "   (method reachable | ? place |",
      "     assign exits (select-match (instanceof door) | places get $place inventory) |",
      "     map (? door | door access-from (places get $place) name) $exits)",
      "   (method update | begin ",
      "     (map (? x | x update) | things inventory)",
      "     $true);"
    ],
    "preprocessed": "class world (the-places the-links)\n   (field things | container new)\n   (field names | cell new $hash-null)\n   (field places | cell new 0)\n   (field links | cell new 0)\n   (method new | begin\n     (places set | make-table | map\n        (? name | cons $name | room new $name)\n    $the-places)\n     (links set | map\n        (? entry |\n          assign src (car $entry) |\n          assign dest (cdr $entry) |\n          door new (places get $src) (places get $dest))\n        $the-links))\n   (method add | lambda (place name val) | begin\n     (val set-room | places get $place)\n     (val set-name $name)\n     (names set | hash-add (names get) $name $val)\n     (things add $val))\n   (method find | ? n  | names get $n get-room name)\n   (method reachable | ? place |\n     assign exits (select-match (instanceof door) | places get $place inventory) |\n     map (? door | door access-from (places get $place) name) $exits)\n   (method update | begin \n     (map (? x | x update) | things inventory)\n     $true);",
    "dt": true,
    "parse": [
      "class",
      "world",
      [
        "the-places",
        "the-links"
      ],
      [
        "field",
        "things",
        [
          -1,
          "container",
          "new"
        ]
      ],
      [
        "field",
        "names",
        [
          -1,
          "cell",
          "new",
          [
            -2,
            "hash-null"
          ]
        ]
      ],
      [
        "field",
        "places",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "links",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "new",
        [
          -1,
          "begin",
          [
            "places",
            "set",
            [
              -1,
              "make-table",
              [
                -1,
                "map",
                [
                  "?",
                  "name",
                  [
                    -1,
                    "cons",
                    [
                      -2,
                      "name"
                    ],
                    [
                      -1,
                      "room",
                      "new",
                      [
                        -2,
                        "name"
                      ]
                    ]
                  ]
                ],
                [
                  -2,
                  "the-places"
                ]
              ]
            ]
          ],
          [
            "links",
            "set",
            [
              -1,
              "map",
              [
                "?",
                "entry",
                [
                  -1,
                  "assign",
                  "src",
                  [
                    "car",
                    [
                      -2,
                      "entry"
                    ]
                  ],
                  [
                    -1,
                    "assign",
                    "dest",
                    [
                      "cdr",
                      [
                        -2,
                        "entry"
                      ]
                    ],
                    [
                      -1,
                      "door",
                      "new",
                      [
                        "places",
                        "get",
                        [
                          -2,
                          "src"
                        ]
                      ],
                      [
                        "places",
                        "get",
                        [
                          -2,
                          "dest"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                -2,
                "the-links"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "add",
        [
          -1,
          "lambda",
          [
            "place",
            "name",
            "val"
          ],
          [
            -1,
            "begin",
            [
              "val",
              "set-room",
              [
                -1,
                "places",
                "get",
                [
                  -2,
                  "place"
                ]
              ]
            ],
            [
              "val",
              "set-name",
              [
                -2,
                "name"
              ]
            ],
            [
              "names",
              "set",
              [
                -1,
                "hash-add",
                [
                  "names",
                  "get"
                ],
                [
                  -2,
                  "name"
                ],
                [
                  -2,
                  "val"
                ]
              ]
            ],
            [
              "things",
              "add",
              [
                -2,
                "val"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "find",
        [
          -1,
          "?",
          "n",
          [
            -1,
            "names",
            "get",
            [
              -2,
              "n"
            ],
            "get-room",
            "name"
          ]
        ]
      ],
      [
        "method",
        "reachable",
        [
          -1,
          "?",
          "place",
          [
            -1,
            "assign",
            "exits",
            [
              "select-match",
              [
                "instanceof",
                "door"
              ],
              [
                -1,
                "places",
                "get",
                [
                  -2,
                  "place"
                ],
                "inventory"
              ]
            ],
            [
              -1,
              "map",
              [
                "?",
                "door",
                [
                  -1,
                  "door",
                  "access-from",
                  [
                    "places",
                    "get",
                    [
                      -2,
                      "place"
                    ]
                  ],
                  "name"
                ]
              ],
              [
                -2,
                "exits"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "update",
        [
          -1,
          "begin",
          [
            "map",
            [
              "?",
              "x",
              [
                -1,
                "x",
                "update"
              ]
            ],
            [
              -1,
              "things",
              "inventory"
            ]
          ],
          [
            -2,
            "true"
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf14b;&#xf16c;&#xf246;&#xf14b;&#xf16d;&#xf24a;&#xf14b;&#xf16e;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14b;&#xf16f;&#xf248;&#xf146;&#xf16f;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14b;&#xf170;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf249;&#xf146;&#xf146;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14b;&#xf171;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14b;&#xf172;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf14b;&#xf171;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf14b;&#xf168;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf147;&#xf144;&#xf248;&#xf159;&#xf249;&#xf147;&#xf144;&#xf248;&#xf147;&#xf15b;&#xf24a;&#xf146;&#xf175;&#xf249;&#xf147;&#xf144;&#xf245;&#xf249;&#xf14b;&#xf16d;&#xf245;&#xf246;&#xf14b;&#xf172;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf14b;&#xf16b;&#xf248;&#xf152;&#xf24a;&#xf147;&#xf15a;&#xf246;&#xf15a;&#xf249;&#xf14b;&#xf16b;&#xf245;&#xf248;&#xf152;&#xf24a;&#xf147;&#xf15c;&#xf246;&#xf15b;&#xf249;&#xf14b;&#xf16b;&#xf245;&#xf248;&#xf147;&#xf159;&#xf24a;&#xf146;&#xf175;&#xf246;&#xf14b;&#xf171;&#xf24a;&#xf145;&#xf17d;&#xf249;&#xf147;&#xf15a;&#xf245;&#xf246;&#xf14b;&#xf171;&#xf24a;&#xf145;&#xf17d;&#xf249;&#xf147;&#xf15c;&#xf245;&#xf245;&#xf249;&#xf14b;&#xf16e;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf172;&#xf248;&#xf15e;&#xf246;&#xf14b;&#xf173;&#xf24a;&#xf147;&#xf144;&#xf24a;&#xf14a;&#xf163;&#xf245;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf14a;&#xf163;&#xf24a;&#xf147;&#xf16c;&#xf248;&#xf14b;&#xf171;&#xf24a;&#xf145;&#xf17d;&#xf249;&#xf14b;&#xf173;&#xf245;&#xf246;&#xf14a;&#xf163;&#xf24a;&#xf147;&#xf16f;&#xf249;&#xf147;&#xf144;&#xf245;&#xf246;&#xf14b;&#xf170;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf145;&#xf183;&#xf246;&#xf14b;&#xf170;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf249;&#xf147;&#xf144;&#xf249;&#xf14a;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf16f;&#xf24a;&#xf146;&#xf172;&#xf249;&#xf14a;&#xf163;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf145;&#xf160;&#xf248;&#xf150;&#xf24a;&#xf145;&#xf152;&#xf248;&#xf14b;&#xf170;&#xf24a;&#xf145;&#xf17d;&#xf249;&#xf145;&#xf152;&#xf24a;&#xf147;&#xf16e;&#xf24a;&#xf147;&#xf144;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf174;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf173;&#xf248;&#xf152;&#xf24a;&#xf147;&#xf17a;&#xf246;&#xf145;&#xf166;&#xf246;&#xf146;&#xf160;&#xf24a;&#xf147;&#xf159;&#xf245;&#xf248;&#xf14b;&#xf171;&#xf24a;&#xf145;&#xf17d;&#xf249;&#xf14b;&#xf173;&#xf24a;&#xf146;&#xf171;&#xf245;&#xf248;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf147;&#xf159;&#xf248;&#xf147;&#xf159;&#xf24a;&#xf147;&#xf15d;&#xf246;&#xf14b;&#xf171;&#xf24a;&#xf145;&#xf17d;&#xf249;&#xf14b;&#xf173;&#xf245;&#xf147;&#xf144;&#xf245;&#xf249;&#xf147;&#xf17a;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf171;&#xf248;&#xf145;&#xf15f;&#xf246;&#xf145;&#xf15d;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf16d;&#xf24a;&#xf147;&#xf171;&#xf245;&#xf248;&#xf14b;&#xf16f;&#xf24a;&#xf146;&#xf171;&#xf245;&#xf249;&#xf145;&#xf245;&#xf24b;",
    "stanza": 1848
  },
  {
    "role": "code",
    "lines": [
      "define geo-world | world new",
      "   (vector \"boston\" \"dublin\" \"paris\" \"genoa\")",
      "     (vector",
      "       (cons \"boston\" \"dublin\")",
      "       (cons \"dublin\" \"paris\")",
      "       (cons \"boston\" \"paris\")",
      "       (cons \"paris\" \"genoa\"));"
    ],
    "preprocessed": "define geo-world | world new\n   (vector \"boston\" \"dublin\" \"paris\" \"genoa\")\n     (vector\n       (cons \"boston\" \"dublin\")\n       (cons \"dublin\" \"paris\")\n       (cons \"boston\" \"paris\")\n       (cons \"paris\" \"genoa\"));",
    "dt": true,
    "parse": [
      "define",
      "geo-world",
      [
        -1,
        "world",
        "new",
        [
          "vector",
          "\"boston\"",
          "\"dublin\"",
          "\"paris\"",
          "\"genoa\""
        ],
        [
          "vector",
          [
            "cons",
            "\"boston\"",
            "\"dublin\""
          ],
          [
            "cons",
            "\"dublin\"",
            "\"paris\""
          ],
          [
            "cons",
            "\"boston\"",
            "\"paris\""
          ],
          [
            "cons",
            "\"paris\"",
            "\"genoa\""
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf175;&#xf248;&#xf14b;&#xf16c;&#xf24a;&#xf146;&#xf175;&#xf246;&#xf154;&#xf24a;&#xf206;&#xf20d;&#xf226;&#xf21f;&#xf23b;&#xf211;&#xf238;&#xf21f;&#xf23a;&#xf23c;&#xf226;&#xf24a;&#xf206;&#xf20d;&#xf228;&#xf221;&#xf21a;&#xf20d;&#xf230;&#xf21e;&#xf21a;&#xf23c;&#xf226;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf20a;&#xf209;&#xf236;&#xf21e;&#xf21b;&#xf210;&#xf226;&#xf24a;&#xf204;&#xf226;&#xf21d;&#xf23a;&#xf219;&#xf232;&#xf21f;&#xf23a;&#xf208;&#xf226;&#xf245;&#xf246;&#xf154;&#xf246;&#xf159;&#xf24a;&#xf206;&#xf20d;&#xf226;&#xf21f;&#xf23b;&#xf211;&#xf238;&#xf21f;&#xf23a;&#xf23c;&#xf226;&#xf24a;&#xf206;&#xf20d;&#xf228;&#xf221;&#xf21a;&#xf20d;&#xf230;&#xf21e;&#xf21a;&#xf23c;&#xf226;&#xf245;&#xf246;&#xf159;&#xf24a;&#xf206;&#xf20d;&#xf228;&#xf221;&#xf21a;&#xf20d;&#xf230;&#xf21e;&#xf21a;&#xf23c;&#xf226;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf20a;&#xf209;&#xf236;&#xf21e;&#xf21b;&#xf210;&#xf226;&#xf245;&#xf246;&#xf159;&#xf24a;&#xf206;&#xf20d;&#xf226;&#xf21f;&#xf23b;&#xf211;&#xf238;&#xf21f;&#xf23a;&#xf23c;&#xf226;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf20a;&#xf209;&#xf236;&#xf21e;&#xf21b;&#xf210;&#xf226;&#xf245;&#xf246;&#xf159;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf20a;&#xf209;&#xf236;&#xf21e;&#xf21b;&#xf210;&#xf226;&#xf24a;&#xf204;&#xf226;&#xf21d;&#xf23a;&#xf219;&#xf232;&#xf21f;&#xf23a;&#xf208;&#xf226;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1849
  },
  {
    "role": "code",
    "lines": [
      "geo-world add \"dublin\" \"robo1\" | robo new;"
    ],
    "preprocessed": "geo-world add \"dublin\" \"robo1\" | robo new;",
    "dt": false,
    "parse": [
      "geo-world",
      "add",
      "\"dublin\"",
      "\"robo1\"",
      [
        -1,
        "robo",
        "new"
      ]
    ],
    "code": "1211111000131210101110302001000100110010001110101011000100110110001101001011011100010001030200100010011100100110111101100010011011110011000100100010302312111100113121011000132233",
    "spider": "&#xf14b;&#xf175;&#xf24a;&#xf146;&#xf172;&#xf24a;&#xf206;&#xf20d;&#xf228;&#xf221;&#xf21a;&#xf20d;&#xf230;&#xf21e;&#xf21a;&#xf23c;&#xf226;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf22a;&#xf241;&#xf226;&#xf21f;&#xf237;&#xf208;&#xf226;&#xf248;&#xf147;&#xf177;&#xf24a;&#xf146;&#xf175;&#xf24b;",
    "stanza": 1850
  },
  {
    "role": "code",
    "lines": [
      "geo-world add \"genoa\" \"robo2\" | robo new;"
    ],
    "preprocessed": "geo-world add \"genoa\" \"robo2\" | robo new;",
    "dt": false,
    "parse": [
      "geo-world",
      "add",
      "\"genoa\"",
      "\"robo2\"",
      [
        -1,
        "robo",
        "new"
      ]
    ],
    "code": "12111110001312101011103020010001001100111011001010110111001101111011000010010001030200100010011100100110111101100010011011110011001000100010302312111100113121011000132233",
    "spider": "&#xf14b;&#xf175;&#xf24a;&#xf146;&#xf172;&#xf24a;&#xf204;&#xf226;&#xf21d;&#xf23a;&#xf219;&#xf232;&#xf21f;&#xf23a;&#xf208;&#xf226;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf22a;&#xf241;&#xf226;&#xf21f;&#xf237;&#xf20c;&#xf226;&#xf248;&#xf147;&#xf177;&#xf24a;&#xf146;&#xf175;&#xf24b;",
    "stanza": 1851
  },
  {
    "role": "code",
    "lines": [
      "equal \"dublin\" | geo-world find \"robo1\";"
    ],
    "preprocessed": "equal \"dublin\" | geo-world find \"robo1\";",
    "dt": false,
    "parse": [
      "equal",
      "\"dublin\"",
      [
        -1,
        "geo-world",
        "find",
        "\"robo1\""
      ]
    ],
    "code": "121000302001000100110010001110101011000100110110001101001011011100010001030231211111000131210111003020010001001110010011011110110001001101111001100010010001032233",
    "spider": "&#xf14c;&#xf24a;&#xf206;&#xf20d;&#xf228;&#xf221;&#xf21a;&#xf20d;&#xf230;&#xf21e;&#xf21a;&#xf23c;&#xf226;&#xf248;&#xf14b;&#xf175;&#xf24a;&#xf145;&#xf160;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf22a;&#xf241;&#xf226;&#xf21f;&#xf237;&#xf208;&#xf226;&#xf24b;",
    "lines_original": [
      "demo | geo-world find \"robo1\";"
    ],
    "stanza": 1852
  },
  {
    "role": "code",
    "lines": [
      "equal \"genoa\" | geo-world find \"robo2\";"
    ],
    "preprocessed": "equal \"genoa\" | geo-world find \"robo2\";",
    "dt": false,
    "parse": [
      "equal",
      "\"genoa\"",
      [
        -1,
        "geo-world",
        "find",
        "\"robo2\""
      ]
    ],
    "code": "1210003020010001001100111011001010110111001101111011000010010001030231211111000131210111003020010001001110010011011110110001001101111001100100010001032233",
    "spider": "&#xf14c;&#xf24a;&#xf204;&#xf226;&#xf21d;&#xf23a;&#xf219;&#xf232;&#xf21f;&#xf23a;&#xf208;&#xf226;&#xf248;&#xf14b;&#xf175;&#xf24a;&#xf145;&#xf160;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf22a;&#xf241;&#xf226;&#xf21f;&#xf237;&#xf20c;&#xf226;&#xf24b;",
    "lines_original": [
      "demo | geo-world find \"robo2\";"
    ],
    "stanza": 1853
  },
  {
    "role": "code",
    "lines": [
      "geo-world update;"
    ],
    "preprocessed": "geo-world update;",
    "dt": false,
    "parse": [
      "geo-world",
      "update"
    ],
    "code": "121111100013121110110132233",
    "spider": "&#xf14b;&#xf175;&#xf24a;&#xf147;&#xf171;&#xf24b;",
    "stanza": 1854
  },
  {
    "role": "code",
    "lines": [
      "equal \"paris\" | geo-world find \"robo1\";"
    ],
    "preprocessed": "equal \"paris\" | geo-world find \"robo1\";",
    "dt": false,
    "parse": [
      "equal",
      "\"paris\"",
      [
        -1,
        "geo-world",
        "find",
        "\"robo1\""
      ]
    ],
    "code": "1210003020010001001110000011000010111001001101001011100110010001030231211111000131210111003020010001001110010011011110110001001101111001100010010001032233",
    "spider": "&#xf14c;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf20a;&#xf209;&#xf236;&#xf21e;&#xf21b;&#xf210;&#xf226;&#xf248;&#xf14b;&#xf175;&#xf24a;&#xf145;&#xf160;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf22a;&#xf241;&#xf226;&#xf21f;&#xf237;&#xf208;&#xf226;&#xf24b;",
    "lines_original": [
      "demo | geo-world find \"robo1\";"
    ],
    "stanza": 1855
  },
  {
    "role": "code",
    "lines": [
      "equal \"paris\" | geo-world find \"robo2\";"
    ],
    "preprocessed": "equal \"paris\" | geo-world find \"robo2\";",
    "dt": false,
    "parse": [
      "equal",
      "\"paris\"",
      [
        -1,
        "geo-world",
        "find",
        "\"robo2\""
      ]
    ],
    "code": "1210003020010001001110000011000010111001001101001011100110010001030231211111000131210111003020010001001110010011011110110001001101111001100100010001032233",
    "spider": "&#xf14c;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf20a;&#xf209;&#xf236;&#xf21e;&#xf21b;&#xf210;&#xf226;&#xf248;&#xf14b;&#xf175;&#xf24a;&#xf145;&#xf160;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf22a;&#xf241;&#xf226;&#xf21f;&#xf237;&#xf20c;&#xf226;&#xf24b;",
    "lines_original": [
      "demo | geo-world find \"robo2\";"
    ],
    "stanza": 1856
  },
  {
    "role": "code",
    "lines": [
      "equal (vector \"paris\" \"dublin\") | geo-world reachable \"boston\";"
    ],
    "preprocessed": "equal (vector \"paris\" \"dublin\") | geo-world reachable \"boston\";",
    "dt": false,
    "parse": [
      "equal",
      [
        "vector",
        "\"paris\"",
        "\"dublin\""
      ],
      [
        -1,
        "geo-world",
        "reachable",
        "\"boston\""
      ]
    ],
    "code": "1210003212100003020010001001110000011000010111001001101001011100110010001030200100010011001000111010101100010011011000110100101101110001000103302312111110001312111110000302001000100110001001101111011100110111010001101111011011100010001032233",
    "spider": "&#xf14c;&#xf246;&#xf154;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf20a;&#xf209;&#xf236;&#xf21e;&#xf21b;&#xf210;&#xf226;&#xf24a;&#xf206;&#xf20d;&#xf228;&#xf221;&#xf21a;&#xf20d;&#xf230;&#xf21e;&#xf21a;&#xf23c;&#xf226;&#xf245;&#xf248;&#xf14b;&#xf175;&#xf24a;&#xf14b;&#xf174;&#xf24a;&#xf206;&#xf20d;&#xf226;&#xf21f;&#xf23b;&#xf211;&#xf238;&#xf21f;&#xf23a;&#xf23c;&#xf226;&#xf24b;",
    "lines_original": [
      "demo | geo-world reachable \"boston\";"
    ],
    "stanza": 1857
  },
  {
    "role": "code",
    "lines": [
      "equal (vector \"paris\") | geo-world reachable \"genoa\";"
    ],
    "preprocessed": "equal (vector \"paris\") | geo-world reachable \"genoa\";",
    "dt": false,
    "parse": [
      "equal",
      [
        "vector",
        "\"paris\""
      ],
      [
        -1,
        "geo-world",
        "reachable",
        "\"genoa\""
      ]
    ],
    "code": "1210003212100003020010001001110000011000010111001001101001011100110010001033023121111100013121111100003020010001001100111011001010110111001101111011000010010001032233",
    "spider": "&#xf14c;&#xf246;&#xf154;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf20a;&#xf209;&#xf236;&#xf21e;&#xf21b;&#xf210;&#xf226;&#xf245;&#xf248;&#xf14b;&#xf175;&#xf24a;&#xf14b;&#xf174;&#xf24a;&#xf204;&#xf226;&#xf21d;&#xf23a;&#xf219;&#xf232;&#xf21f;&#xf23a;&#xf208;&#xf226;&#xf24b;",
    "lines_original": [
      "demo | geo-world reachable \"genoa\";"
    ],
    "stanza": 1858
  },
  {
    "role": "file",
    "lines": [
      "== COS_JList_impl =="
    ],
    "stanza": 1859
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "native implementation of a Java list, hash classes",
    "section_category": "JAVA",
    "section_index": 59,
    "stanza": 1860
  },
  {
    "role": "code",
    "lines": [
      "define flex-equals",
      "  (lambda (x y) ",
      "    (if (number? | x)",
      "    (if (number? | y)",
      "        (= (x) (y))",
      "        (false))",
      "    (if (number? | y)",
      "        (false)",
      "        (x equals (y)))));"
    ],
    "preprocessed": "define flex-equals\n  (lambda (x y) \n    (if (number? | x)\n    (if (number? | y)\n        (= (x) (y))\n        (false))\n    (if (number? | y)\n        (false)\n        (x equals (y)))));",
    "dt": true,
    "parse": [
      "define",
      "flex-equals",
      [
        "lambda",
        [
          "x",
          "y"
        ],
        [
          "if",
          [
            "number?",
            [
              -1,
              "x"
            ]
          ],
          [
            "if",
            [
              "number?",
              [
                -1,
                "y"
              ]
            ],
            [
              "=",
              [
                "x"
              ],
              [
                "y"
              ]
            ],
            [
              "false"
            ]
          ],
          [
            "if",
            [
              "number?",
              [
                -1,
                "y"
              ]
            ],
            [
              "false"
            ],
            [
              "x",
              "equals",
              [
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "1211013121111100103212110103212101001312100000133212111132121100030231210100133212111132121100030231210000013321211321210100133212100000133321203332121111321211000302312100000133212033212101001312101101110321210000013333332233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf176;&#xf246;&#xf15e;&#xf246;&#xf16d;&#xf24a;&#xf145;&#xf145;&#xf245;&#xf246;&#xf153;&#xf246;&#xf15c;&#xf248;&#xf16d;&#xf245;&#xf246;&#xf153;&#xf246;&#xf15c;&#xf248;&#xf145;&#xf145;&#xf245;&#xf246;&#xf147;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf145;&#xf245;&#xf245;&#xf246;&#xf144;&#xf245;&#xf245;&#xf246;&#xf153;&#xf246;&#xf15c;&#xf248;&#xf145;&#xf145;&#xf245;&#xf246;&#xf144;&#xf245;&#xf246;&#xf16d;&#xf24a;&#xf149;&#xf172;&#xf246;&#xf145;&#xf145;&#xf245;&#xf245;&#xf245;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1861
  },
  {
    "role": "code",
    "lines": [
      "define remove-object",
      "  (lambda (x) ",
      "    (remove-match (lambda (y) ",
      "            (flex-equals (x) (y)))));"
    ],
    "preprocessed": "define remove-object\n  (lambda (x) \n    (remove-match (lambda (y) \n            (flex-equals (x) (y)))));",
    "dt": true,
    "parse": [
      "define",
      "remove-object",
      [
        "lambda",
        [
          "x"
        ],
        [
          "remove-match",
          [
            "lambda",
            [
              "y"
            ],
            [
              "flex-equals",
              [
                "x"
              ],
              [
                "y"
              ]
            ]
          ]
        ]
      ]
    ],
    "code": "12110131211111001132121101032121010013321210011010321211010321210000013321211111001032121010013321210000013333332233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf177;&#xf246;&#xf15e;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf146;&#xf15e;&#xf246;&#xf15e;&#xf246;&#xf145;&#xf145;&#xf245;&#xf246;&#xf14b;&#xf176;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf145;&#xf245;&#xf245;&#xf245;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1862
  },
  {
    "role": "code",
    "lines": [
      "define contains-object",
      "  (lambda (x lst)",
      "    (if (> (list-length | lst) 0)",
      "    (if (flex-equals (head | lst) (x))",
      "        (true)",
      "        (contains-object (x) (tail | lst)))",
      "    (false)));"
    ],
    "preprocessed": "define contains-object\n  (lambda (x lst)\n    (if (> (list-length | lst) 0)\n    (if (flex-equals (head | lst) (x))\n        (true)\n        (contains-object (x) (tail | lst)))\n    (false)));",
    "dt": true,
    "parse": [
      "define",
      "contains-object",
      [
        "lambda",
        [
          "x",
          "lst"
        ],
        [
          "if",
          [
            ">",
            [
              "list-length",
              [
                -1,
                "lst"
              ]
            ],
            "0"
          ],
          [
            "if",
            [
              "flex-equals",
              [
                "head",
                [
                  -1,
                  "lst"
                ]
              ],
              [
                "x"
              ]
            ],
            [
              "true"
            ],
            [
              "contains-object",
              [
                "x"
              ],
              [
                "tail",
                [
                  -1,
                  "lst"
                ]
              ]
            ]
          ],
          [
            "false"
          ]
        ]
      ]
    ],
    "code": "12110131211111010032121101032121010013121100001332121111321210032121010010302312110000133020332121111321211111001032121010000302312110000133212101001333212133212111110100321210100133212101000130231211000013333212033332233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf178;&#xf246;&#xf15e;&#xf246;&#xf16d;&#xf24a;&#xf145;&#xf165;&#xf245;&#xf246;&#xf153;&#xf246;&#xf148;&#xf246;&#xf145;&#xf156;&#xf248;&#xf145;&#xf165;&#xf245;&#xf204;&#xf245;&#xf246;&#xf153;&#xf246;&#xf14b;&#xf176;&#xf246;&#xf145;&#xf154;&#xf248;&#xf145;&#xf165;&#xf245;&#xf246;&#xf16d;&#xf245;&#xf245;&#xf246;&#xf145;&#xf245;&#xf246;&#xf14b;&#xf178;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf155;&#xf248;&#xf145;&#xf165;&#xf245;&#xf245;&#xf245;&#xf246;&#xf144;&#xf245;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1863
  },
  {
    "role": "code",
    "lines": [
      "class COS_JList ()",
      "       (field super ((java lang Object) new))",
      "       (method unknown (lambda (x) (super (x))))",
      "       (field contents (cell new (vector)))",
      "       (method <init>-V (self))",
      "       (method <init> (self <init>-V))",
      "       (method add-Object-V (lambda (x)",
      "             (contents set (prepend (x) (contents get)))))",
      "       (method add (self add-Object-V))",
      "       (method remove-Object-Z (lambda (x)",
      "            (contents set ",
      "                  (remove-object (x) (contents get)))))",
      "       (method remove (self remove-Object-Z))",
      "       (method contains-Object-Z (lambda (x)",
      "                   (contains-object (x) (contents get))))",
      "       (method contains (self contains-Object-Z))",
      "       (method get-I-Object (lambda (x)",
      "             (list-ref (contents get) (x))))",
      "       (method get (self get-I-Object))",
      "       (method iterator-Iterator (COS_JListIterator new (self)))",
      "       (method iterator (self iterator-Iterator))",
      "       (method size-V-I (list-length (contents get)))",
      "       (method size (self size-V-I));"
    ],
    "preprocessed": "class COS_JList ()\n       (field super ((java lang Object) new))\n       (method unknown (lambda (x) (super (x))))\n       (field contents (cell new (vector)))\n       (method <init>-V (self))\n       (method <init> (self <init>-V))\n       (method add-Object-V (lambda (x)\n             (contents set (prepend (x) (contents get)))))\n       (method add (self add-Object-V))\n       (method remove-Object-Z (lambda (x)\n            (contents set \n                  (remove-object (x) (contents get)))))\n       (method remove (self remove-Object-Z))\n       (method contains-Object-Z (lambda (x)\n                   (contains-object (x) (contents get))))\n       (method contains (self contains-Object-Z))\n       (method get-I-Object (lambda (x)\n             (list-ref (contents get) (x))))\n       (method get (self get-I-Object))\n       (method iterator-Iterator (COS_JListIterator new (self)))\n       (method iterator (self iterator-Iterator))\n       (method size-V-I (list-length (contents get)))\n       (method size (self size-V-I));",
    "dt": true,
    "parse": [
      "class",
      "COS_JList",
      [],
      [
        "field",
        "super",
        [
          [
            "java",
            "lang",
            "Object"
          ],
          "new"
        ]
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            "super",
            [
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "contents",
        [
          "cell",
          "new",
          [
            "vector"
          ]
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "add-Object-V",
        [
          "lambda",
          [
            "x"
          ],
          [
            "contents",
            "set",
            [
              "prepend",
              [
                "x"
              ],
              [
                "contents",
                "get"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "add",
        [
          "self",
          "add-Object-V"
        ]
      ],
      [
        "method",
        "remove-Object-Z",
        [
          "lambda",
          [
            "x"
          ],
          [
            "contents",
            "set",
            [
              "remove-object",
              [
                "x"
              ],
              [
                "contents",
                "get"
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "remove",
        [
          "self",
          "remove-Object-Z"
        ]
      ],
      [
        "method",
        "contains-Object-Z",
        [
          "lambda",
          [
            "x"
          ],
          [
            "contains-object",
            [
              "x"
            ],
            [
              "contents",
              "get"
            ]
          ]
        ]
      ],
      [
        "method",
        "contains",
        [
          "self",
          "contains-Object-Z"
        ]
      ],
      [
        "method",
        "get-I-Object",
        [
          "lambda",
          [
            "x"
          ],
          [
            "list-ref",
            [
              "contents",
              "get"
            ],
            [
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "get",
        [
          "self",
          "get-I-Object"
        ]
      ],
      [
        "method",
        "iterator-Iterator",
        [
          "COS_JListIterator",
          "new",
          [
            "self"
          ]
        ]
      ],
      [
        "method",
        "iterator",
        [
          "self",
          "iterator-Iterator"
        ]
      ],
      [
        "method",
        "size-V-I",
        [
          "list-length",
          [
            "contents",
            "get"
          ]
        ]
      ],
      [
        "method",
        "size",
        [
          "self",
          "size-V-I"
        ]
      ]
    ],
    "code
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf14b;&#xf179;&#xf246;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf146;&#xf178;&#xf246;&#xf246;&#xf149;&#xf17e;&#xf24a;&#xf14b;&#xf159;&#xf24a;&#xf149;&#xf16d;&#xf245;&#xf146;&#xf175;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf148;&#xf246;&#xf15e;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf146;&#xf178;&#xf246;&#xf16d;&#xf245;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf146;&#xf170;&#xf246;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf246;&#xf154;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf16f;&#xf246;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf170;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf149;&#xf16f;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf17a;&#xf246;&#xf15e;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf146;&#xf170;&#xf24a;&#xf145;&#xf180;&#xf246;&#xf145;&#xf159;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf146;&#xf170;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf245;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf172;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf14b;&#xf17a;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf17b;&#xf246;&#xf15e;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf146;&#xf170;&#xf24a;&#xf145;&#xf180;&#xf246;&#xf14b;&#xf177;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf146;&#xf170;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf245;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf173;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf14b;&#xf17b;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf17c;&#xf246;&#xf15e;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf14b;&#xf178;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf146;&#xf170;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf17d;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf14b;&#xf17c;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf17e;&#xf246;&#xf15e;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf145;&#xf157;&#xf246;&#xf146;&#xf170;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf246;&#xf16d;&#xf245;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf145;&#xf17d;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf14b;&#xf17e;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf17f;&#xf246;&#xf14b;&#xf180;&#xf24a;&#xf146;&#xf175;&#xf246;&#xf146;&#xf169;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf181;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf14b;&#xf17f;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf182;&#xf246;&#xf145;&#xf156;&#xf246;&#xf146;&#xf170;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14b;&#xf183;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf14b;&#xf182;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1864
  },
  {
    "role": "code",
    "lines": [
      "define test1 (COS_JList new);"
    ],
    "preprocessed": "define test1 (COS_JList new);",
    "dt": true,
    "parse": [
      "define",
      "test1",
      [
        "COS_JList",
        "new"
      ]
    ],
    "code": "121101312111100011321211111010131210110001332233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf167;&#xf246;&#xf14b;&#xf179;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf24b;",
    "stanza": 1865
  },
  {
    "role": "code",
    "lines": [
      "begin (test1 add-Object-V (test1))",
      "       (= 1 | test1 size-V-I);"
    ],
    "preprocessed": "begin (test1 add-Object-V (test1))\n       (= 1 | test1 size-V-I);",
    "dt": false,
    "parse": [
      "begin",
      [
        "test1",
        "add-Object-V",
        [
          "test1"
        ]
      ],
      [
        "=",
        "1",
        [
          -1,
          "test1",
          "size-V-I"
        ]
      ]
    ],
    "code": "12101101132121111000113121111101103212111100011333212113021302312111100011312111111110332233",
    "spider": "&#xf145;&#xf15f;&#xf246;&#xf14b;&#xf167;&#xf24a;&#xf14b;&#xf17a;&#xf246;&#xf14b;&#xf167;&#xf245;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf205;&#xf248;&#xf14b;&#xf167;&#xf24a;&#xf14b;&#xf182;&#xf245;&#xf24b;",
    "stanza": 1866
  },
  {
    "role": "code",
    "lines": [
      "test1 == (test1 get-I-Object 0);"
    ],
    "preprocessed": "test1 == (test1 get-I-Object 0);",
    "dt": false,
    "parse": [
      "test1",
      "==",
      [
        "test1",
        "get-I-Object",
        "0"
      ]
    ],
    "code": "121111000113121100011032121111000113121111110103020332233",
    "spider": "&#xf14b;&#xf167;&#xf24a;&#xf147;&#xf14a;&#xf246;&#xf14b;&#xf167;&#xf24a;&#xf14b;&#xf17e;&#xf24a;&#xf204;&#xf245;&#xf24b;",
    "stanza": 1867
  },
  {
    "role": "code",
    "lines": [
      "class COS_JHashMap ()",
      "       (field super ((java lang Object) new))",
      "       (method unknown (lambda (x) (super (x))))",
      "       (field contents (cell new (? x 0)))",
      "       (method <init>-V (self))",
      "       (method <init> (self <init>-V))",
      "       (method put-Object-Object-V (lambda (x y)",
      "                     (let ((prev | contents get))",
      "                       (contents set ",
      "                         (? z ",
      "                            (if (flex-equals (z) (x))",
      "                            (y)",
      "                            (prev (z))))))))",
      "       (method put (self put-Object-Object-V))",
      "       (method get-Object-Object (lambda (x)",
      "                   (contents get (x))))",
      "       (method get (self get-Object-Object));"
    ],
    "preprocessed": "class COS_JHashMap ()\n       (field super ((java lang Object) new))\n       (method unknown (lambda (x) (super (x))))\n       (field contents (cell new (? x 0)))\n       (method <init>-V (self))\n       (method <init> (self <init>-V))\n       (method put-Object-Object-V (lambda (x y)\n                     (let ((prev | contents get))\n                       (contents set \n                         (? z \n                            (if (flex-equals (z) (x))\n                            (y)\n                            (prev (z))))))))\n       (method put (self put-Object-Object-V))\n       (method get-Object-Object (lambda (x)\n                   (contents get (x))))\n       (method get (self get-Object-Object));",
    "dt": true,
    "parse": [
      "class",
      "COS_JHashMap",
      [],
      [
        "field",
        "super",
        [
          [
            "java",
            "lang",
            "Object"
          ],
          "new"
        ]
      ],
      [
        "method",
        "unknown",
        [
          "lambda",
          [
            "x"
          ],
          [
            "super",
            [
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "contents",
        [
          "cell",
          "new",
          [
            "?",
            "x",
            "0"
          ]
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "put-Object-Object-V",
        [
          "lambda",
          [
            "x",
            "y"
          ],
          [
            "let",
            [
              [
                "prev",
                [
                  -1,
                  "contents",
                  "get"
                ]
              ]
            ],
            [
              "contents",
              "set",
              [
                "?",
                "z",
                [
                  "if",
                  [
                    "flex-equals",
                    [
                      "z"
                    ],
                    [
                      "x"
                    ]
                  ],
                  [
                    "y"
                  ],
                  [
                    "prev",
                    [
                      "z"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "put",
        [
          "self",
          "put-Object-Object-V"
        ]
      ],
      [
        "method",
        "get-Object-Object",
        [
          "lambda",
          [
            "x"
          ],
          [
            "contents",
            "get",
            [
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "get",
        [
          "self",
          "get-Object-Object"
        ]
      ]
    ],
    "code
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf14c;&#xf144;&#xf246;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf146;&#xf178;&#xf246;&#xf246;&#xf149;&#xf17e;&#xf24a;&#xf14b;&#xf159;&#xf24a;&#xf149;&#xf16d;&#xf245;&#xf146;&#xf175;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf148;&#xf246;&#xf15e;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf146;&#xf178;&#xf246;&#xf16d;&#xf245;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf146;&#xf170;&#xf246;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf16f;&#xf246;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf170;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf149;&#xf16f;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf145;&#xf246;&#xf15e;&#xf246;&#xf16d;&#xf24a;&#xf145;&#xf145;&#xf245;&#xf246;&#xf145;&#xf178;&#xf246;&#xf246;&#xf145;&#xf17b;&#xf248;&#xf146;&#xf170;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf245;&#xf246;&#xf146;&#xf170;&#xf24a;&#xf145;&#xf180;&#xf246;&#xf150;&#xf24a;&#xf145;&#xf146;&#xf246;&#xf153;&#xf246;&#xf14b;&#xf176;&#xf246;&#xf145;&#xf146;&#xf245;&#xf246;&#xf16d;&#xf245;&#xf245;&#xf246;&#xf145;&#xf145;&#xf245;&#xf246;&#xf145;&#xf17b;&#xf246;&#xf145;&#xf146;&#xf245;&#xf245;&#xf245;&#xf245;&#xf245;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf146;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf145;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf147;&#xf246;&#xf15e;&#xf246;&#xf16d;&#xf245;&#xf246;&#xf146;&#xf170;&#xf24a;&#xf145;&#xf17d;&#xf246;&#xf16d;&#xf245;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf145;&#xf17d;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf147;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1868
  },
  {
    "role": "code",
    "lines": [
      "define test2 (COS_JHashMap new);"
    ],
    "preprocessed": "define test2 (COS_JHashMap new);",
    "dt": true,
    "parse": [
      "define",
      "test2",
      [
        "COS_JHashMap",
        "new"
      ]
    ],
    "code": "12110131210000001003212100000000031210110001332233",
    "spider": "&#xf151;&#xf24a;&#xf14c;&#xf148;&#xf246;&#xf14c;&#xf144;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf24b;",
    "stanza": 1869
  },
  {
    "role": "code",
    "lines": [
      "begin (test2 put-Object-Object-V 5 10)",
      "       (= 10 | test2 get 5);"
    ],
    "preprocessed": "begin (test2 put-Object-Object-V 5 10)\n       (= 10 | test2 get 5);",
    "dt": false,
    "parse": [
      "begin",
      [
        "test2",
        "put-Object-Object-V",
        "5",
        "10"
      ],
      [
        "=",
        "10",
        [
          -1,
          "test2",
          "get",
          "5"
        ]
      ]
    ],
    "code": "12101101132121000000100312100000000130210130210103321211302101030231210000001003121111001302101332233",
    "spider": "&#xf145;&#xf15f;&#xf246;&#xf14c;&#xf148;&#xf24a;&#xf14c;&#xf145;&#xf24a;&#xf209;&#xf24a;&#xf20e;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf20e;&#xf248;&#xf14c;&#xf148;&#xf24a;&#xf145;&#xf17d;&#xf24a;&#xf209;&#xf245;&#xf24b;",
    "stanza": 1870
  },
  {
    "role": "file",
    "lines": [
      "== COS_JList =="
    ],
    "stanza": 1871
  },
  {
    "role": "comment",
    "lines": [
      "# There is Java code for COS_JList available"
    ],
    "stanza": 1872
  },
  {
    "role": "file",
    "lines": [
      "== COS_JHashMap =="
    ],
    "stanza": 1873
  },
  {
    "role": "comment",
    "lines": [
      "# There is Java code for COS_JHashMap available"
    ],
    "stanza": 1874
  },
  {
    "role": "file",
    "lines": [
      "== COS_JList_test =="
    ],
    "stanza": 1875
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "testing the JList class",
    "section_category": "JAVA",
    "section_index": 60,
    "stanza": 1876
  },
  {
    "role": "code",
    "lines": [
      "define test1 (COS_JList new);"
    ],
    "preprocessed": "define test1 (COS_JList new);",
    "dt": true,
    "parse": [
      "define",
      "test1",
      [
        "COS_JList",
        "new"
      ]
    ],
    "code": "121101312111100011321211111010131210110001332233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf167;&#xf246;&#xf14b;&#xf179;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf24b;",
    "stanza": 1877
  },
  {
    "role": "code",
    "lines": [
      "begin (test1 add-Object-V (test1))",
      "       (= 1 (test1 size-V-I));"
    ],
    "preprocessed": "begin (test1 add-Object-V (test1))\n       (= 1 (test1 size-V-I));",
    "dt": false,
    "parse": [
      "begin",
      [
        "test1",
        "add-Object-V",
        [
          "test1"
        ]
      ],
      [
        "=",
        "1",
        [
          "test1",
          "size-V-I"
        ]
      ]
    ],
    "code": "1210110113212111100011312111110110321211110001133321211302132121111000113121111111103332233",
    "spider": "&#xf145;&#xf15f;&#xf246;&#xf14b;&#xf167;&#xf24a;&#xf14b;&#xf17a;&#xf246;&#xf14b;&#xf167;&#xf245;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf205;&#xf246;&#xf14b;&#xf167;&#xf24a;&#xf14b;&#xf182;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1878
  },
  {
    "role": "code",
    "lines": [
      "(test1 get-I-Object 0) == (test1);"
    ],
    "preprocessed": "(test1 get-I-Object 0) == (test1);",
    "dt": false,
    "parse": [
      [
        "test1",
        "get-I-Object",
        "0"
      ],
      "==",
      [
        "test1"
      ]
    ],
    "code": "21211110001131211111101030203312110001103212111100011332233",
    "spider": "&#xf246;&#xf14b;&#xf167;&#xf24a;&#xf14b;&#xf17e;&#xf24a;&#xf204;&#xf245;&#xf147;&#xf14a;&#xf246;&#xf14b;&#xf167;&#xf245;&#xf24b;",
    "stanza": 1879
  },
  {
    "role": "file",
    "lines": [
      "== COS_JListIterator_impl =="
    ],
    "stanza": 1880
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "basic iterator implementation",
    "section_category": "JAVA",
    "section_index": 61,
    "stanza": 1881
  },
  {
    "role": "code",
    "lines": [
      "class COS_JListIterator (ref)",
      "       (field pipe (cell new (ref contents get)))",
      "       (method <init>-V (self))",
      "       (method <init> (self <init>-V))",
      "       (method hasNext-Z (> (list-length | pipe get) 0))",
      "       (method hasNext (self hasNext-Z))",
      "       (method next (self next-Object))",
      "       (method next-Object ",
      "           (let ((result (head | pipe get)))",
      "         (begin ",
      "           (pipe set | tail | pipe get)",
      "           (result))));"
    ],
    "preprocessed": "class COS_JListIterator (ref)\n       (field pipe (cell new (ref contents get)))\n       (method <init>-V (self))\n       (method <init> (self <init>-V))\n       (method hasNext-Z (> (list-length | pipe get) 0))\n       (method hasNext (self hasNext-Z))\n       (method next (self next-Object))\n       (method next-Object \n           (let ((result (head | pipe get)))\n         (begin \n           (pipe set | tail | pipe get)\n           (result))));",
    "dt": true,
    "parse": [
      "class",
      "COS_JListIterator",
      [
        "ref"
      ],
      [
        "field",
        "pipe",
        [
          "cell",
          "new",
          [
            "ref",
            "contents",
            "get"
          ]
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "self"
        ]
      ],
      [
        "method",
        "<init>",
        [
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "hasNext-Z",
        [
          ">",
          [
            "list-length",
            [
              -1,
              "pipe",
              "get"
            ]
          ],
          "0"
        ]
      ],
      [
        "method",
        "hasNext",
        [
          "self",
          "hasNext-Z"
        ]
      ],
      [
        "method",
        "next",
        [
          "self",
          "next-Object"
        ]
      ],
      [
        "method",
        "next-Object",
        [
          "let",
          [
            [
              "result",
              [
                "head",
                [
                  -1,
                  "pipe",
                  "get"
                ]
              ]
            ]
          ],
          [
            "begin",
            [
              "pipe",
              "set",
              [
                -1,
                "tail",
                [
                  -1,
                  "pipe",
                  "get"
                ]
              ]
            ],
            [
              "result"
            ]
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf14b;&#xf180;&#xf246;&#xf14c;&#xf149;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14c;&#xf14a;&#xf246;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf246;&#xf14c;&#xf149;&#xf24a;&#xf146;&#xf170;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf16f;&#xf246;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf170;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf149;&#xf16f;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf14b;&#xf246;&#xf148;&#xf246;&#xf145;&#xf156;&#xf248;&#xf14c;&#xf14a;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf204;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf14c;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf14b;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf145;&#xf17a;&#xf246;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf14d;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf14d;&#xf246;&#xf145;&#xf178;&#xf246;&#xf246;&#xf146;&#xf151;&#xf246;&#xf145;&#xf154;&#xf248;&#xf14c;&#xf14a;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf245;&#xf245;&#xf246;&#xf145;&#xf15f;&#xf246;&#xf14c;&#xf14a;&#xf24a;&#xf145;&#xf180;&#xf248;&#xf145;&#xf155;&#xf248;&#xf14c;&#xf14a;&#xf24a;&#xf145;&#xf17d;&#xf245;&#xf246;&#xf146;&#xf151;&#xf245;&#xf245;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1882
  },
  {
    "role": "code",
    "lines": [
      "define test1 (COS_JList new);"
    ],
    "preprocessed": "define test1 (COS_JList new);",
    "dt": true,
    "parse": [
      "define",
      "test1",
      [
        "COS_JList",
        "new"
      ]
    ],
    "code": "121101312111100011321211111010131210110001332233",
    "spider": "&#xf151;&#xf24a;&#xf14b;&#xf167;&#xf246;&#xf14b;&#xf179;&#xf24a;&#xf146;&#xf175;&#xf245;&#xf24b;",
    "stanza": 1883
  },
  {
    "role": "code",
    "lines": [
      "begin",
      "  (test1 add 15)",
      "  (test1 add 72)",
      "  (test1 add 99)",
      "  (true);"
    ],
    "preprocessed": "begin\n  (test1 add 15)\n  (test1 add 72)\n  (test1 add 99)\n  (true);",
    "dt": false,
    "parse": [
      "begin",
      [
        "test1",
        "add",
        "15"
      ],
      [
        "test1",
        "add",
        "72"
      ],
      [
        "test1",
        "add",
        "99"
      ],
      [
        "true"
      ]
    ],
    "code": "12101101132121111000113121010111030211113321211110001131210101110302100100033212111100011312101011103021100011332121332233",
    "spider": "&#xf145;&#xf15f;&#xf246;&#xf14b;&#xf167;&#xf24a;&#xf146;&#xf172;&#xf24a;&#xf213;&#xf245;&#xf246;&#xf14b;&#xf167;&#xf24a;&#xf146;&#xf172;&#xf24a;&#xf205;&#xf20c;&#xf245;&#xf246;&#xf14b;&#xf167;&#xf24a;&#xf146;&#xf172;&#xf24a;&#xf205;&#xf227;&#xf245;&#xf246;&#xf145;&#xf245;&#xf24b;",
    "stanza": 1884
  },
  {
    "role": "code",
    "lines": [
      "define iter1 (test1 iterator);"
    ],
    "preprocessed": "define iter1 (test1 iterator);",
    "dt": true,
    "parse": [
      "define",
      "iter1",
      [
        "test1",
        "iterator"
      ]
    ],
    "code": "12110131210000010103212111100011312111111101332233",
    "spider": "&#xf151;&#xf24a;&#xf14c;&#xf14e;&#xf246;&#xf14b;&#xf167;&#xf24a;&#xf14b;&#xf181;&#xf245;&#xf24b;",
    "stanza": 1885
  },
  {
    "role": "code",
    "lines": [
      "iter1 hasNext;"
    ],
    "preprocessed": "iter1 hasNext;",
    "dt": false,
    "parse": [
      "iter1",
      "hasNext"
    ],
    "code": "121000001010312100000100032233",
    "spider": "&#xf14c;&#xf14e;&#xf24a;&#xf14c;&#xf14c;&#xf24b;",
    "stanza": 1886
  },
  {
    "role": "code",
    "lines": [
      "equal 99 | iter1 next;"
    ],
    "preprocessed": "equal 99 | iter1 next;",
    "dt": false,
    "parse": [
      "equal",
      "99",
      [
        -1,
        "iter1",
        "next"
      ]
    ],
    "code": "12100030211000113023121000001010312111011032233",
    "spider": "&#xf14c;&#xf24a;&#xf205;&#xf227;&#xf248;&#xf14c;&#xf14e;&#xf24a;&#xf145;&#xf17a;&#xf24b;",
    "lines_original": [
      "demo | iter1 next;"
    ],
    "stanza": 1887
  },
  {
    "role": "code",
    "lines": [
      "iter1 hasNext;"
    ],
    "preprocessed": "iter1 hasNext;",
    "dt": false,
    "parse": [
      "iter1",
      "hasNext"
    ],
    "code": "121000001010312100000100032233",
    "spider": "&#xf14c;&#xf14e;&#xf24a;&#xf14c;&#xf14c;&#xf24b;",
    "stanza": 1888
  },
  {
    "role": "code",
    "lines": [
      "equal 72 | iter1 next;"
    ],
    "preprocessed": "equal 72 | iter1 next;",
    "dt": false,
    "parse": [
      "equal",
      "72",
      [
        -1,
        "iter1",
        "next"
      ]
    ],
    "code": "12100030210010003023121000001010312111011032233",
    "spider": "&#xf14c;&#xf24a;&#xf205;&#xf20c;&#xf248;&#xf14c;&#xf14e;&#xf24a;&#xf145;&#xf17a;&#xf24b;",
    "lines_original": [
      "demo | iter1 next;"
    ],
    "stanza": 1889
  },
  {
    "role": "code",
    "lines": [
      "iter1 hasNext;"
    ],
    "preprocessed": "iter1 hasNext;",
    "dt": false,
    "parse": [
      "iter1",
      "hasNext"
    ],
    "code": "121000001010312100000100032233",
    "spider": "&#xf14c;&#xf14e;&#xf24a;&#xf14c;&#xf14c;&#xf24b;",
    "stanza": 1890
  },
  {
    "role": "code",
    "lines": [
      "equal 15 | iter1 next;"
    ],
    "preprocessed": "equal 15 | iter1 next;",
    "dt": false,
    "parse": [
      "equal",
      "15",
      [
        -1,
        "iter1",
        "next"
      ]
    ],
    "code": "12100030211113023121000001010312111011032233",
    "spider": "&#xf14c;&#xf24a;&#xf213;&#xf248;&#xf14c;&#xf14e;&#xf24a;&#xf145;&#xf17a;&#xf24b;",
    "lines_original": [
      "demo | iter1 next;"
    ],
    "stanza": 1891
  },
  {
    "role": "code",
    "lines": [
      "not | iter1 hasNext;"
    ],
    "preprocessed": "not | iter1 hasNext;",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "iter1",
        "hasNext"
      ]
    ],
    "code": "121013023121000001010312100000100032233",
    "spider": "&#xf149;&#xf248;&#xf14c;&#xf14e;&#xf24a;&#xf14c;&#xf14c;&#xf24b;",
    "stanza": 1892
  },
  {
    "role": "file",
    "lines": [
      "== COS_JListIterator =="
    ],
    "stanza": 1893
  },
  {
    "role": "comment",
    "lines": [
      "# There is Java code for COS_JListIterator available"
    ],
    "stanza": 1894
  },
  {
    "role": "file",
    "lines": [
      "== COS_JDoor =="
    ],
    "stanza": 1895
  },
  {
    "role": "comment",
    "lines": [
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# ",
      "# public class COS_JDoor {",
      "#     private COS_JRoom src, dest;",
      "#     private String src_cmd, dest_cmd;",
      "# ",
      "#     public COS_JDoor(COS_JRoom src, String src_cmd,",
      "#              COS_JRoom dest, String dest_cmd) {",
      "#     this.src = src;",
      "#     this.dest = dest;",
      "#     this.src_cmd = src_cmd;",
      "#     this.dest_cmd = dest_cmd;",
      "#     src.addDoor(this);",
      "#     dest.addDoor(this);",
      "#     }",
      "# ",
      "#     public COS_JRoom apply(COS_JRoom src, String cmd) {",
      "#     if (src == this.src) {",
      "#         if (src_cmd.equals(cmd)) {",
      "#         return this.dest;",
      "#         }",
      "#     }",
      "#     if (src == this.dest) {",
      "#         if (dest_cmd.equals(cmd)) {",
      "#         return this.src;",
      "#         }",
      "#     }",
      "#     return null;",
      "#     }",
      "# ",
      "#     public COS_JRoom apply(COS_JRoom src) {",
      "#     if (src==this.src) {",
      "#         return this.dest;",
      "#     }",
      "#     if (src==this.dest) {",
      "#         return this.src;",
      "#     }",
      "#     return null;",
      "#     }",
      "# }"
    ],
    "section_description": "class translation 'COS_JDoor'",
    "section_category": "JAVA",
    "section_index": 62,
    "stanza": 1896
  },
  {
    "role": "code",
    "lines": [
      "class COS_JDoor ()",
      "   (field super-ref | make-cell 0)",
      "   (method new | set! $super-ref | (java lang Object) $this)",
      "   (method super | ? x | (get! $super-ref) $x)",
      "   (method unknown | ? x | self super $x)",
      "   (field src | cell new 0)",
      "   (field dest | cell new 0)",
      "   (field src_cmd | cell new 0)",
      "   (field dest_cmd | cell new 0)",
      "   (method <init>-COS_JRoom-String-COS_JRoom-String-V",
      "     (lambda (arg0 arg1 arg2 arg3) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self) (pair 1 $arg0) (pair 2 $arg1) (pair 3 $arg2) (pair 4 $arg3))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm invokespecial <init>-V 0 0)",
      "         ((= $x 2) | jvm aload 0)",
      "         ((= $x 3) | jvm aload 1)",
      "         ((= $x 4) | jvm putfield src $COS_JRoom)",
      "         ((= $x 5) | jvm aload 0)",
      "         ((= $x 6) | jvm aload 3)",
      "         ((= $x 7) | jvm putfield dest $COS_JRoom)",
      "         ((= $x 8) | jvm aload 0)",
      "         ((= $x 9) | jvm aload 2)",
      "         ((= $x 10) | jvm putfield src_cmd (java lang String))",
      "         ((= $x 11) | jvm aload 0)",
      "         ((= $x 12) | jvm aload 4)",
      "         ((= $x 13) | jvm putfield dest_cmd (java lang String))",
      "         ((= $x 14) | jvm aload 1)",
      "         ((= $x 15) | jvm aload 0)",
      "         ((= $x 16) | jvm invokevirtual addDoor-COS_JDoor-V 1 0)",
      "         ((= $x 17) | jvm aload 3)",
      "         ((= $x 18) | jvm aload 0)",
      "         ((= $x 19) | jvm invokevirtual addDoor-COS_JDoor-V 1 0)",
      "         ((= $x 20) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> | self <init>-COS_JRoom-String-COS_JRoom-String-V)",
      "",
      "   (method apply-COS_JRoom-String-COS_JRoom",
      "     (lambda (arg0 arg1) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self) (pair 1 $arg0) (pair 2 $arg1))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 1)",
      "         ((= $x 1) | jvm aload 0)",
      "         ((= $x 2) | jvm getfield src $COS_JRoom)",
      "         ((= $x 3) | jvm if_acmpne 12)",
      "         ((= $x 4) | jvm aload 0)",
      "         ((= $x 5) | jvm getfield src_cmd (java lang String))",
      "         ((= $x 6) | jvm aload 2)",
      "         ((= $x 7) | jvm invokevirtual equals-Object-Z 1 1)",
      "         ((= $x 8) | jvm ifeq 12)",
      "         ((= $x 9) | jvm aload 0)",
      "         ((= $x 10) | jvm getfield dest $COS_JRoom)",
      "         ((= $x 11) | jvm areturn)",
      "         ((= $x 12) | jvm aload 1)",
      "         ((= $x 13) | jvm aload 0)",
      "         ((= $x 14) | jvm getfield dest $COS_JRoom)",
      "         ((= $x 15) | jvm if_acmpne 24)",
      "         ((= $x 16) | jvm aload 0)",
      "         ((= $x 17) | jvm getfield dest_cmd (java lang String))",
      "         ((= $x 18) | jvm aload 2)",
      "         ((= $x 19) | jvm invokevirtual equals-Object-Z 1 1)",
      "         ((= $x 20) | jvm ifeq 24)",
      "         ((= $x 21) | jvm aload 0)",
      "         ((= $x 22) | jvm getfield src $COS_JRoom)",
      "         ((= $x 23) | jvm areturn)",
      "         ((= $x 24) | jvm aconst_null)",
      "         ((= $x 25) | jvm areturn)",
      "         (jvm return))",
      "   )",
      "",
      "   (method apply | self apply-COS_JRoom-String-COS_JRoom)",
      "",
      "   (method apply-COS_JRoom-COS_JRoom",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self) (pair 1 $arg0))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 1)",
      "         ((= $x 1) | jvm aload 0)",
      "         ((= $x 2) | jvm getfield src $COS_JRoom)",
      "         ((= $x 3) | jvm if_acmpne 7)",
      "         ((= $x 4) | jvm aload 0)",
      "         ((= $x 5) | jvm getfield dest $COS_JRoom)",
      "         ((= $x 6) | jvm areturn)",
      "         ((= $x 7) | jvm aload 1)",
      "         ((= $x 8) | jvm aload 0)",
      "         ((= $x 9) | jvm getfield dest $COS_JRoom)",
      "         ((= $x 10) | jvm if_acmpne 14)",
      "         ((= $x 11) | jvm aload 0)",
      "         ((= $x 12) | jvm getfield src $COS_JRoom)",
      "         ((= $x 13) | jvm areturn)",
      "         ((= $x 14) | jvm aconst_null)",
      "         ((= $x 15) | jvm areturn)",
      "         (jvm return))",
      "   )",
      "",
      " ;"
    ],
    "preprocessed": "class COS_JDoor ()\n   (field super-ref | make-cell 0)\n   (method new | set! $super-ref | (java lang Object) $this)\n   (method super | ? x | (get! $super-ref) $x)\n   (method unknown | ? x | self super $x)\n   (field src | cell new 0)\n   (field dest | cell new 0)\n   (field src_cmd | cell new 0)\n   (field dest_cmd | cell new 0)\n   (method <init>-COS_JRoom-String-COS_JRoom-String-V\n     (lambda (arg0 arg1 arg2 arg3) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self) (pair 1 $arg0) (pair 2 $arg1) (pair 3 $arg2) (pair 4 $arg3))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm invokespecial <init>-V 0 0)\n         ((= $x 2) | jvm aload 0)\n         ((= $x 3) | jvm aload 1)\n         ((= $x 4) | jvm putfield src $COS_JRoom)\n         ((= $x 5) | jvm aload 0)\n         ((= $x 6) | jvm aload 3)\n         ((= $x 7) | jvm putfield dest $COS_JRoom)\n         ((= $x 8) | jvm aload 0)\n         ((= $x 9) | jvm aload 2)\n         ((= $x 10) | jvm putfield src_cmd (java lang String))\n         ((= $x 11) | jvm aload 0)\n         ((= $x 12) | jvm aload 4)\n         ((= $x 13) | jvm putfield dest_cmd (java lang String))\n         ((= $x 14) | jvm aload 1)\n         ((= $x 15) | jvm aload 0)\n         ((= $x 16) | jvm invokevirtual addDoor-COS_JDoor-V 1 0)\n         ((= $x 17) | jvm aload 3)\n         ((= $x 18) | jvm aload 0)\n         ((= $x 19) | jvm invokevirtual addDoor-COS_JDoor-V 1 0)\n         ((= $x 20) | jvm return)\n         (jvm return))\n   )\n\n   (method <init> | self <init>-COS_JRoom-String-COS_JRoom-String-V)\n\n   (method apply-COS_JRoom-String-COS_JRoom\n     (lambda (arg0 arg1) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self) (pair 1 $arg0) (pair 2 $arg1))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 1)\n         ((= $x 1) | jvm aload 0)\n         ((= $x 2) | jvm getfield src $COS_JRoom)\n         ((= $x 3) | jvm if_acmpne 12)\n         ((= $x 4) | jvm aload 0)\n         ((= $x 5) | jvm getfield src_cmd (java lang String))\n         ((= $x 6) | jvm aload 2)\n         ((= $x 7) | jvm invokevirtual equals-Object-Z 1 1)\n         ((= $x 8) | jvm ifeq 12)\n         ((= $x 9) | jvm aload 0)\n         ((= $x 10) | jvm getfield dest $COS_JRoom)\n         ((= $x 11) | jvm areturn)\n         ((= $x 12) | jvm aload 1)\n         ((= $x 13) | jvm aload 0)\n         ((= $x 14) | jvm getfield dest $COS_JRoom)\n         ((= $x 15) | jvm if_acmpne 24)\n         ((= $x 16) | jvm aload 0)\n         ((= $x 17) | jvm getfield dest_cmd (java lang String))\n         ((= $x 18) | jvm aload 2)\n         ((= $x 19) | jvm invokevirtual equals-Object-Z 1 1)\n         ((= $x 20) | jvm ifeq 24)\n         ((= $x 21) | jvm aload 0)\n         ((= $x 22) | jvm getfield src $COS_JRoom)\n         ((= $x 23) | jvm areturn)\n         ((= $x 24) | jvm aconst_null)\n         ((= $x 25) | jvm areturn)\n         (jvm return))\n   )\n\n   (method apply | self apply-COS_JRoom-String-COS_JRoom)\n\n   (method apply-COS_JRoom-COS_JRoom\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self) (pair 1 $arg0))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 1)\n         ((= $x 1) | jvm aload 0)\n         ((= $x 2) | jvm getfield src $COS_JRoom)\n         ((= $x 3) | jvm if_acmpne 7)\n         ((= $x 4) | jvm aload 0)\n         ((= $x 5) | jvm getfield dest $COS_JRoom)\n         ((= $x 6) | jvm areturn)\n         ((= $x 7) | jvm aload 1)\n         ((= $x 8) | jvm aload 0)\n         ((= $x 9) | jvm getfield dest $COS_JRoom)\n         ((= $x 10) | jvm if_acmpne 14)\n         ((= $x 11) | jvm aload 0)\n         ((= $x 12) | jvm getfield src $COS_JRoom)\n         ((= $x 13) | jvm areturn)\n         ((= $x 14) | jvm aconst_null)\n         ((= $x 15) | jvm areturn)\n         (jvm return))\n   )\n\n ;",
    "dt": true,
    "parse": [
      "class",
      "COS_JDoor",
      [],
      [
        "field",
        "super-ref",
        [
          -1,
          "make-cell",
          "0"
        ]
      ],
      [
        "method",
        "new",
        [
          -1,
          "set!",
          [
            -2,
            "super-ref"
          ],
          [
            -1,
            [
              "java",
              "lang",
              "Object"
            ],
            [
              -2,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          -1,
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -2,
                "super-ref"
              ]
            ],
            [
              -2,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -2,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "src",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "dest",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "src_cmd",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "dest_cmd",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "<init>-COS_JRoom-String-COS_JRoom-String-V",
        [
          "lambda",
          [
            "arg0",
            "arg1",
            "arg2",
            "arg3"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          -2,
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        "2",
                        [
                          -2,
                          "arg1"
                        ]
                      ],
                      [
                        "pair",
                        "3",
                        [
                          -2,
                          "arg2"
                        ]
                      ],
                      [
                        "pair",
                        "4",
                        [
                          -2,
                          "arg3"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "src",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "5"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "6"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "3"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "7"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "dest",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "8"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "9"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "10"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "src_cmd",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "11"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "12"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "4"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "13"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "dest_cmd",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "14"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "15"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "16"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "addDoor-COS_JDoor-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "17"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "3"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "18"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "19"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "addDoor-COS_JDoor-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "20"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          -1,
          "self",
          "<init>-COS_JRoom-String-COS_JRoom-String-V"
        ]
      ],
      [
        "method",
        "apply-COS_JRoom-String-COS_JRoom",
        [
          "lambda",
          [
            "arg0",
            "arg1"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          -2,
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        "2",
                        [
                          -2,
                          "arg1"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "src",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "if_acmpne",
                        "12"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "5"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "src_cmd",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "6"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "7"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "equals-Object-Z",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "8"
                      ],
                      [
                        -1,
                        "jvm",
                        "ifeq",
                        "12"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "9"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "10"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "dest",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "11"
                      ],
                      [
                        -1,
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "12"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "13"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "14"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "dest",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "15"
                      ],
                      [
                        -1,
                        "jvm",
                        "if_acmpne",
                        "24"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "16"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "17"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "dest_cmd",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "18"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "19"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "equals-Object-Z",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "20"
                      ],
                      [
                        -1,
                        "jvm",
                        "ifeq",
                        "24"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "21"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "22"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "src",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "23"
                      ],
                      [
                        -1,
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "24"
                      ],
                      [
                        -1,
                        "jvm",
                        "aconst_null"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "25"
                      ],
                      [
                        -1,
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "apply",
        [
          -1,
          "self",
          "apply-COS_JRoom-String-COS_JRoom"
        ]
      ],
      [
        "method",
        "apply-COS_JRoom-COS_JRoom",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          -2,
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "src",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "if_acmpne",
                        "7"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "5"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "dest",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "6"
                      ],
                      [
                        -1,
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "7"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "8"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "9"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "dest",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "10"
                      ],
                      [
                        -1,
                        "jvm",
                        "if_acmpne",
                        "14"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "11"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "12"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "src",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "13"
                      ],
                      [
                        -1,
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "14"
                      ],
                      [
                        -1,
                        "jvm",
                        "aconst_null"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "15"
                      ],
                      [
                        -1,
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ],
    "code
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf14c;&#xf14f;&#xf246;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14b;&#xf158;&#xf248;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf160;&#xf249;&#xf14b;&#xf158;&#xf248;&#xf246;&#xf149;&#xf17e;&#xf24a;&#xf14b;&#xf159;&#xf24a;&#xf149;&#xf16d;&#xf245;&#xf249;&#xf146;&#xf182;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf178;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf246;&#xf161;&#xf249;&#xf14b;&#xf158;&#xf245;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf148;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf146;&#xf178;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf147;&#xf15a;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf147;&#xf15c;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14c;&#xf150;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14c;&#xf151;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf152;&#xf246;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf24a;&#xf14b;&#xf156;&#xf24a;&#xf14b;&#xf161;&#xf24a;&#xf14c;&#xf153;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf206;&#xf249;&#xf14b;&#xf156;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf207;&#xf249;&#xf14b;&#xf161;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf208;&#xf249;&#xf14c;&#xf153;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14b;&#xf144;&#xf24a;&#xf149;&#xf16f;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf147;&#xf15a;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf147;&#xf15c;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20e;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf14c;&#xf150;&#xf246;&#xf149;&#xf17e;&#xf24a;&#xf14b;&#xf159;&#xf24a;&#xf149;&#xf17b;&#xf245;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20f;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf210;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf211;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf14c;&#xf151;&#xf246;&#xf149;&#xf17e;&#xf24a;&#xf14b;&#xf159;&#xf24a;&#xf149;&#xf17b;&#xf245;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf212;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf213;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf214;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14c;&#xf155;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf215;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf216;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf217;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14c;&#xf155;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf218;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf170;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf152;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf156;&#xf246;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf24a;&#xf14b;&#xf156;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf206;&#xf249;&#xf14b;&#xf156;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf147;&#xf15a;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf176;&#xf24a;&#xf210;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf14c;&#xf150;&#xf246;&#xf149;&#xf17e;&#xf24a;&#xf14b;&#xf159;&#xf24a;&#xf149;&#xf17b;&#xf245;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf149;&#xf171;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf173;&#xf24a;&#xf210;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20e;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf147;&#xf15c;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20f;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17f;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf210;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf211;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf212;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf147;&#xf15c;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf213;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf176;&#xf24a;&#xf21c;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf214;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf215;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf14c;&#xf151;&#xf246;&#xf149;&#xf17e;&#xf24a;&#xf14b;&#xf159;&#xf24a;&#xf149;&#xf17b;&#xf245;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf216;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf217;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf149;&#xf171;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf218;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf173;&#xf24a;&#xf21c;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf219;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf21a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf147;&#xf15a;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf21b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17f;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf21c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf164;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf21d;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17f;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf157;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf156;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf158;&#xf246;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf147;&#xf15a;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf176;&#xf24a;&#xf20b;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf147;&#xf15c;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17f;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf147;&#xf15c;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20e;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf176;&#xf24a;&#xf212;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20f;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf210;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf147;&#xf15a;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf211;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17f;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf212;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf164;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf213;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17f;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1897
  },
  {
    "role": "file",
    "lines": [
      "== COS_JThing =="
    ],
    "stanza": 1898
  },
  {
    "role": "comment",
    "lines": [
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# ",
      "# public class COS_JThing extends COS_JNamed {",
      "#     private COS_JRoom location;",
      "#     private COS_JRoom nextLocation;",
      "# ",
      "#     public void setRoom(COS_JRoom location) {",
      "#     if (this.location!=null) {",
      "#         this.location.removeThing(this);",
      "#     }",
      "#     this.location = location;",
      "#     location.addThing(this);",
      "#     this.nextLocation = location;",
      "#     }",
      "#     ",
      "#     public COS_JRoom getRoom() {",
      "#     return location;",
      "#     }",
      "# ",
      "#     public void setNextRoom(COS_JRoom location) {",
      "#     nextLocation = location;",
      "#     }",
      "# ",
      "#     public void postUpdate() {",
      "#     if (nextLocation!=location) {",
      "#         setRoom(nextLocation);",
      "#     }",
      "#     }",
      "# }",
      "# "
    ],
    "section_description": "class translation 'COS_JThing'",
    "section_category": "JAVA",
    "section_index": 63,
    "stanza": 1899
  },
  {
    "role": "code",
    "lines": [
      "class COS_JThing ()",
      "   (field super-ref | make-cell 0)",
      "   (method new | set! $super-ref | (COS_JNamed) $this)",
      "   (method super | ? x | (get! $super-ref) $x)",
      "   (method unknown | ? x | self super $x)",
      "   (field location | cell new 0)",
      "   (field nextLocation | cell new 0)",
      "   (method <init>-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm invokespecial <init>-V 0 0)",
      "         ((= $x 2) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> | self <init>-V)",
      "",
      "   (method setRoom-COS_JRoom-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self) (pair 1 $arg0))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm getfield location $COS_JRoom)",
      "         ((= $x 2) | jvm ifnull 7)",
      "         ((= $x 3) | jvm aload 0)",
      "         ((= $x 4) | jvm getfield location $COS_JRoom)",
      "         ((= $x 5) | jvm aload 0)",
      "         ((= $x 6) | jvm invokevirtual removeThing-COS_JThing-V 1 0)",
      "         ((= $x 7) | jvm aload 0)",
      "         ((= $x 8) | jvm aload 1)",
      "         ((= $x 9) | jvm putfield location $COS_JRoom)",
      "         ((= $x 10) | jvm aload 1)",
      "         ((= $x 11) | jvm aload 0)",
      "         ((= $x 12) | jvm invokevirtual addThing-COS_JThing-V 1 0)",
      "         ((= $x 13) | jvm aload 0)",
      "         ((= $x 14) | jvm aload 1)",
      "         ((= $x 15) | jvm putfield nextLocation $COS_JRoom)",
      "         ((= $x 16) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method setRoom | self setRoom-COS_JRoom-V)",
      "",
      "   (method getRoom-COS_JRoom",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm getfield location $COS_JRoom)",
      "         ((= $x 2) | jvm areturn)",
      "         (jvm return))",
      "   )",
      "",
      "   (method getRoom | self getRoom-COS_JRoom)",
      "",
      "   (method setNextRoom-COS_JRoom-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self) (pair 1 $arg0))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm aload 1)",
      "         ((= $x 2) | jvm putfield nextLocation $COS_JRoom)",
      "         ((= $x 3) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method setNextRoom | self setNextRoom-COS_JRoom-V)",
      "",
      "   (method postUpdate-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm getfield nextLocation $COS_JRoom)",
      "         ((= $x 2) | jvm aload 0)",
      "         ((= $x 3) | jvm getfield location $COS_JRoom)",
      "         ((= $x 4) | jvm if_acmpeq 9)",
      "         ((= $x 5) | jvm aload 0)",
      "         ((= $x 6) | jvm aload 0)",
      "         ((= $x 7) | jvm getfield nextLocation $COS_JRoom)",
      "         ((= $x 8) | jvm invokevirtual setRoom-COS_JRoom-V 1 0)",
      "         ((= $x 9) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method postUpdate | self postUpdate-V)",
      "",
      " ;"
    ],
    "preprocessed": "class COS_JThing ()\n   (field super-ref | make-cell 0)\n   (method new | set! $super-ref | (COS_JNamed) $this)\n   (method super | ? x | (get! $super-ref) $x)\n   (method unknown | ? x | self super $x)\n   (field location | cell new 0)\n   (field nextLocation | cell new 0)\n   (method <init>-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm invokespecial <init>-V 0 0)\n         ((= $x 2) | jvm return)\n         (jvm return))\n   )\n\n   (method <init> | self <init>-V)\n\n   (method setRoom-COS_JRoom-V\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self) (pair 1 $arg0))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm getfield location $COS_JRoom)\n         ((= $x 2) | jvm ifnull 7)\n         ((= $x 3) | jvm aload 0)\n         ((= $x 4) | jvm getfield location $COS_JRoom)\n         ((= $x 5) | jvm aload 0)\n         ((= $x 6) | jvm invokevirtual removeThing-COS_JThing-V 1 0)\n         ((= $x 7) | jvm aload 0)\n         ((= $x 8) | jvm aload 1)\n         ((= $x 9) | jvm putfield location $COS_JRoom)\n         ((= $x 10) | jvm aload 1)\n         ((= $x 11) | jvm aload 0)\n         ((= $x 12) | jvm invokevirtual addThing-COS_JThing-V 1 0)\n         ((= $x 13) | jvm aload 0)\n         ((= $x 14) | jvm aload 1)\n         ((= $x 15) | jvm putfield nextLocation $COS_JRoom)\n         ((= $x 16) | jvm return)\n         (jvm return))\n   )\n\n   (method setRoom | self setRoom-COS_JRoom-V)\n\n   (method getRoom-COS_JRoom\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm getfield location $COS_JRoom)\n         ((= $x 2) | jvm areturn)\n         (jvm return))\n   )\n\n   (method getRoom | self getRoom-COS_JRoom)\n\n   (method setNextRoom-COS_JRoom-V\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self) (pair 1 $arg0))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm aload 1)\n         ((= $x 2) | jvm putfield nextLocation $COS_JRoom)\n         ((= $x 3) | jvm return)\n         (jvm return))\n   )\n\n   (method setNextRoom | self setNextRoom-COS_JRoom-V)\n\n   (method postUpdate-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm getfield nextLocation $COS_JRoom)\n         ((= $x 2) | jvm aload 0)\n         ((= $x 3) | jvm getfield location $COS_JRoom)\n         ((= $x 4) | jvm if_acmpeq 9)\n         ((= $x 5) | jvm aload 0)\n         ((= $x 6) | jvm aload 0)\n         ((= $x 7) | jvm getfield nextLocation $COS_JRoom)\n         ((= $x 8) | jvm invokevirtual setRoom-COS_JRoom-V 1 0)\n         ((= $x 9) | jvm return)\n         (jvm return))\n   )\n\n   (method postUpdate | self postUpdate-V)\n\n ;",
    "dt": true,
    "parse": [
      "class",
      "COS_JThing",
      [],
      [
        "field",
        "super-ref",
        [
          -1,
          "make-cell",
          "0"
        ]
      ],
      [
        "method",
        "new",
        [
          -1,
          "set!",
          [
            -2,
            "super-ref"
          ],
          [
            -1,
            [
              "COS_JNamed"
            ],
            [
              -2,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          -1,
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -2,
                "super-ref"
              ]
            ],
            [
              -2,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -2,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "location",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "nextLocation",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          -1,
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "setRoom-COS_JRoom-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          -2,
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "location",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "ifnull",
                        "7"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "location",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "5"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "6"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "removeThing-COS_JThing-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "7"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "8"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "9"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "location",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "10"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "11"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "12"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "addThing-COS_JThing-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "13"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "14"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "15"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "nextLocation",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "16"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "setRoom",
        [
          -1,
          "self",
          "setRoom-COS_JRoom-V"
        ]
      ],
      [
        "method",
        "getRoom-COS_JRoom",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "location",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "getRoom",
        [
          -1,
          "self",
          "getRoom-COS_JRoom"
        ]
      ],
      [
        "method",
        "setNextRoom-COS_JRoom-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          -2,
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "nextLocation",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "setNextRoom",
        [
          -1,
          "self",
          "setNextRoom-COS_JRoom-V"
        ]
      ],
      [
        "method",
        "postUpdate-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "nextLocation",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "location",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "if_acmpeq",
                        "9"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "5"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "6"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "7"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "nextLocation",
                        [
                          -2,
                          "COS_JRoom"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "8"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "setRoom-COS_JRoom-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "9"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "postUpdate",
        [
          -1,
          "self",
          "postUpdate-V"
        ]
      ]
    ],
    "code
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf14c;&#xf159;&#xf246;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14b;&#xf158;&#xf248;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf160;&#xf249;&#xf14b;&#xf158;&#xf248;&#xf246;&#xf14c;&#xf15a;&#xf245;&#xf249;&#xf146;&#xf182;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf178;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf246;&#xf161;&#xf249;&#xf14b;&#xf158;&#xf245;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf148;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf146;&#xf178;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf147;&#xf16b;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14c;&#xf15b;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf16f;&#xf246;&#xf15e;&#xf246;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14b;&#xf144;&#xf24a;&#xf149;&#xf16f;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf170;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf149;&#xf16f;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf15c;&#xf246;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf147;&#xf16b;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17c;&#xf24a;&#xf20b;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf147;&#xf16b;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14c;&#xf15d;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf147;&#xf16b;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20e;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20f;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf210;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14c;&#xf15e;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf211;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf212;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf213;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf14c;&#xf15b;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf214;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf15f;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf15c;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf160;&#xf246;&#xf15e;&#xf246;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf147;&#xf16b;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17f;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf161;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf160;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf162;&#xf246;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf14c;&#xf15b;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf163;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf162;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf164;&#xf246;&#xf15e;&#xf246;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf14c;&#xf15b;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf147;&#xf16b;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf177;&#xf24a;&#xf20d;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf14c;&#xf15b;&#xf249;&#xf14c;&#xf154;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14c;&#xf15c;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf165;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf164;&#xf245;&#xf24b;",
    "stanza": 1900
  },
  {
    "role": "file",
    "lines": [
      "== COS_JRoom =="
    ],
    "stanza": 1901
  },
  {
    "role": "comment",
    "lines": [
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# ",
      "# import java.util.Iterator;",
      "# ",
      "# public class COS_JRoom extends COS_JNamed {",
      "#     //private COS_JList content = new COS_JList();",
      "#     //private COS_JList doors = new COS_JList();",
      "# ",
      "#     private COS_JList content;",
      "#     private COS_JList doors;",
      "# ",
      "#     public COS_JRoom() {",
      "#     content = new COS_JList();",
      "#     doors = new COS_JList();",
      "#     }",
      "# ",
      "#     public COS_JList get() {",
      "#     return content;",
      "#     }",
      "# ",
      "#     public Iterator getDoors() {",
      "#     return doors.iterator();",
      "#     }",
      "# ",
      "#     public void addDoor(COS_JDoor door) {",
      "#     //System.out.println(\"add door -> \" + getName());",
      "#     doors.add(door);",
      "#     }",
      "# ",
      "#     public void addThing(COS_JThing thing) {",
      "#     content.add(thing);",
      "#     }",
      "# ",
      "#     public void removeThing(COS_JThing thing) {",
      "#     content.remove(thing);",
      "#     }",
      "# }"
    ],
    "section_description": "class translation 'COS_JRoom'",
    "section_category": "JAVA",
    "section_index": 64,
    "stanza": 1902
  },
  {
    "role": "code",
    "lines": [
      "class COS_JRoom ()",
      "   (field super-ref | make-cell 0)",
      "   (method new | set! $super-ref | (COS_JNamed) $this)",
      "   (method super | ? x | (get! $super-ref) $x)",
      "   (method unknown | ? x | self super $x)",
      "   (field content | cell new 0)",
      "   (field doors | cell new 0)",
      "   (method <init>-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm invokespecial <init>-V 0 0)",
      "         ((= $x 2) | jvm aload 0)",
      "         ((= $x 3) | jvm new $COS_JList)",
      "         ((= $x 4) | jvm dup)",
      "         ((= $x 5) | jvm invokespecial <init>-V 0 0)",
      "         ((= $x 6) | jvm putfield content $COS_JList)",
      "         ((= $x 7) | jvm aload 0)",
      "         ((= $x 8) | jvm new $COS_JList)",
      "         ((= $x 9) | jvm dup)",
      "         ((= $x 10) | jvm invokespecial <init>-V 0 0)",
      "         ((= $x 11) | jvm putfield doors $COS_JList)",
      "         ((= $x 12) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> | self <init>-V)",
      "",
      "   (method get-COS_JList",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm getfield content $COS_JList)",
      "         ((= $x 2) | jvm areturn)",
      "         (jvm return))",
      "   )",
      "",
      "   (method get | self get-COS_JList)",
      "",
      "   (method getDoors-Iterator",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm getfield doors $COS_JList)",
      "         ((= $x 2) | jvm invokevirtual iterator-Iterator 0 1)",
      "         ((= $x 3) | jvm areturn)",
      "         (jvm return))",
      "   )",
      "",
      "   (method getDoors | self getDoors-Iterator)",
      "",
      "   (method addDoor-COS_JDoor-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self) (pair 1 $arg0))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm getfield doors $COS_JList)",
      "         ((= $x 2) | jvm aload 1)",
      "         ((= $x 3) | jvm invokevirtual add-Object-V 1 0)",
      "         ((= $x 4) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method addDoor | self addDoor-COS_JDoor-V)",
      "",
      "   (method addThing-COS_JThing-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self) (pair 1 $arg0))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm getfield content $COS_JList)",
      "         ((= $x 2) | jvm aload 1)",
      "         ((= $x 3) | jvm invokevirtual add-Object-V 1 0)",
      "         ((= $x 4) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method addThing | self addThing-COS_JThing-V)",
      "",
      "   (method removeThing-COS_JThing-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self) (pair 1 $arg0))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm getfield content $COS_JList)",
      "         ((= $x 2) | jvm aload 1)",
      "         ((= $x 3) | jvm invokevirtual remove-Object-Z 1 1)",
      "         ((= $x 4) | jvm pop)",
      "         ((= $x 5) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method removeThing | self removeThing-COS_JThing-V)",
      "",
      " ;"
    ],
    "preprocessed": "class COS_JRoom ()\n   (field super-ref | make-cell 0)\n   (method new | set! $super-ref | (COS_JNamed) $this)\n   (method super | ? x | (get! $super-ref) $x)\n   (method unknown | ? x | self super $x)\n   (field content | cell new 0)\n   (field doors | cell new 0)\n   (method <init>-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm invokespecial <init>-V 0 0)\n         ((= $x 2) | jvm aload 0)\n         ((= $x 3) | jvm new $COS_JList)\n         ((= $x 4) | jvm dup)\n         ((= $x 5) | jvm invokespecial <init>-V 0 0)\n         ((= $x 6) | jvm putfield content $COS_JList)\n         ((= $x 7) | jvm aload 0)\n         ((= $x 8) | jvm new $COS_JList)\n         ((= $x 9) | jvm dup)\n         ((= $x 10) | jvm invokespecial <init>-V 0 0)\n         ((= $x 11) | jvm putfield doors $COS_JList)\n         ((= $x 12) | jvm return)\n         (jvm return))\n   )\n\n   (method <init> | self <init>-V)\n\n   (method get-COS_JList\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm getfield content $COS_JList)\n         ((= $x 2) | jvm areturn)\n         (jvm return))\n   )\n\n   (method get | self get-COS_JList)\n\n   (method getDoors-Iterator\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm getfield doors $COS_JList)\n         ((= $x 2) | jvm invokevirtual iterator-Iterator 0 1)\n         ((= $x 3) | jvm areturn)\n         (jvm return))\n   )\n\n   (method getDoors | self getDoors-Iterator)\n\n   (method addDoor-COS_JDoor-V\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self) (pair 1 $arg0))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm getfield doors $COS_JList)\n         ((= $x 2) | jvm aload 1)\n         ((= $x 3) | jvm invokevirtual add-Object-V 1 0)\n         ((= $x 4) | jvm return)\n         (jvm return))\n   )\n\n   (method addDoor | self addDoor-COS_JDoor-V)\n\n   (method addThing-COS_JThing-V\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self) (pair 1 $arg0))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm getfield content $COS_JList)\n         ((= $x 2) | jvm aload 1)\n         ((= $x 3) | jvm invokevirtual add-Object-V 1 0)\n         ((= $x 4) | jvm return)\n         (jvm return))\n   )\n\n   (method addThing | self addThing-COS_JThing-V)\n\n   (method removeThing-COS_JThing-V\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self) (pair 1 $arg0))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm getfield content $COS_JList)\n         ((= $x 2) | jvm aload 1)\n         ((= $x 3) | jvm invokevirtual remove-Object-Z 1 1)\n         ((= $x 4) | jvm pop)\n         ((= $x 5) | jvm return)\n         (jvm return))\n   )\n\n   (method removeThing | self removeThing-COS_JThing-V)\n\n ;",
    "dt": true,
    "parse": [
      "class",
      "COS_JRoom",
      [],
      [
        "field",
        "super-ref",
        [
          -1,
          "make-cell",
          "0"
        ]
      ],
      [
        "method",
        "new",
        [
          -1,
          "set!",
          [
            -2,
            "super-ref"
          ],
          [
            -1,
            [
              "COS_JNamed"
            ],
            [
              -2,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          -1,
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -2,
                "super-ref"
              ]
            ],
            [
              -2,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -2,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "content",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "doors",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "new",
                        [
                          -2,
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "5"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "6"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "content",
                        [
                          -2,
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "7"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "8"
                      ],
                      [
                        -1,
                        "jvm",
                        "new",
                        [
                          -2,
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "9"
                      ],
                      [
                        -1,
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "10"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "11"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "doors",
                        [
                          -2,
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "12"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          -1,
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "get-COS_JList",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "content",
                        [
                          -2,
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "get",
        [
          -1,
          "self",
          "get-COS_JList"
        ]
      ],
      [
        "method",
        "getDoors-Iterator",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "doors",
                        [
                          -2,
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "iterator-Iterator",
                        "0",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "getDoors",
        [
          -1,
          "self",
          "getDoors-Iterator"
        ]
      ],
      [
        "method",
        "addDoor-COS_JDoor-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          -2,
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "doors",
                        [
                          -2,
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "add-Object-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "addDoor",
        [
          -1,
          "self",
          "addDoor-COS_JDoor-V"
        ]
      ],
      [
        "method",
        "addThing-COS_JThing-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          -2,
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "content",
                        [
                          -2,
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "add-Object-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "addThing",
        [
          -1,
          "self",
          "addThing-COS_JThing-V"
        ]
      ],
      [
        "method",
        "removeThing-COS_JThing-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          -2,
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "content",
                        [
                          -2,
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "remove-Object-Z",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "pop"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "5"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "removeThing",
        [
          -1,
          "self",
          "removeThing-COS_JThing-V"
        ]
      ]
    ],
    "code
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf14c;&#xf154;&#xf246;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14b;&#xf158;&#xf248;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf160;&#xf249;&#xf14b;&#xf158;&#xf248;&#xf246;&#xf14c;&#xf15a;&#xf245;&#xf249;&#xf146;&#xf182;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf178;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf246;&#xf161;&#xf249;&#xf14b;&#xf158;&#xf245;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf148;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf146;&#xf178;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf147;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14c;&#xf166;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf16f;&#xf246;&#xf15e;&#xf246;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14b;&#xf144;&#xf24a;&#xf149;&#xf16f;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf175;&#xf249;&#xf14b;&#xf179;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf159;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14b;&#xf144;&#xf24a;&#xf149;&#xf16f;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf147;&#xf153;&#xf249;&#xf14b;&#xf179;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf175;&#xf249;&#xf14b;&#xf179;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf159;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20e;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14b;&#xf144;&#xf24a;&#xf149;&#xf16f;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20f;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf14c;&#xf166;&#xf249;&#xf14b;&#xf179;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf210;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf170;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf149;&#xf16f;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf167;&#xf246;&#xf15e;&#xf246;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf147;&#xf153;&#xf249;&#xf14b;&#xf179;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17f;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf145;&#xf17d;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf167;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf168;&#xf246;&#xf15e;&#xf246;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf14c;&#xf166;&#xf249;&#xf14b;&#xf179;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14b;&#xf17f;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17f;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf169;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf168;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf155;&#xf246;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf14c;&#xf166;&#xf249;&#xf14b;&#xf179;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14b;&#xf17a;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf16a;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf155;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf15e;&#xf246;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf147;&#xf153;&#xf249;&#xf14b;&#xf179;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14b;&#xf17a;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf16b;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf15e;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf15d;&#xf246;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf147;&#xf153;&#xf249;&#xf14b;&#xf179;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14b;&#xf17b;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14c;&#xf16c;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf16d;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf15d;&#xf245;&#xf24b;",
    "stanza": 1903
  },
  {
    "role": "file",
    "lines": [
      "== COS_JNamed =="
    ],
    "stanza": 1904
  },
  {
    "role": "comment",
    "lines": [
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# ",
      "# public class COS_JNamed {",
      "#     private String name = \"-\";",
      "#     private COS_JWorld world = null;",
      "# ",
      "#     void setName(String name) {",
      "#     this.name = name;",
      "#     }",
      "# ",
      "#     String getName() {",
      "#     return name;",
      "#     }",
      "# ",
      "#     void setWorld(COS_JWorld world) {",
      "#     this.world = world;",
      "#     }",
      "# ",
      "#     COS_JWorld getWorld() {",
      "#     return world;",
      "#     }",
      "# ",
      "#     void update() {",
      "#     }",
      "# ",
      "#     void postUpdate() {",
      "#     }",
      "# }"
    ],
    "section_description": "class translation 'COS_JNamed'",
    "section_category": "JAVA",
    "section_index": 65,
    "stanza": 1905
  },
  {
    "role": "code",
    "lines": [
      "class COS_JNamed ()",
      "   (field super-ref | make-cell 0)",
      "   (method new | set! $super-ref | (java lang Object) $this)",
      "   (method super | ? x | (get! $super-ref) $x)",
      "   (method unknown | ? x | self super $x)",
      "   (field name | cell new 0)",
      "   (field world | cell new 0)",
      "   (method <init>-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm invokespecial <init>-V 0 0)",
      "         ((= $x 2) | jvm aload 0)",
      "         ((= $x 3) | jvm ldc (String new int-init \"-\"))",
      "         ((= $x 4) | jvm putfield name (java lang String))",
      "         ((= $x 5) | jvm aload 0)",
      "         ((= $x 6) | jvm aconst_null)",
      "         ((= $x 7) | jvm putfield world $COS_JWorld)",
      "         ((= $x 8) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> | self <init>-V)",
      "",
      "   (method setName-String-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self) (pair 1 $arg0))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm aload 1)",
      "         ((= $x 2) | jvm putfield name (java lang String))",
      "         ((= $x 3) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method setName | self setName-String-V)",
      "",
      "   (method getName-String",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm getfield name (java lang String))",
      "         ((= $x 2) | jvm areturn)",
      "         (jvm return))",
      "   )",
      "",
      "   (method getName | self getName-String)",
      "",
      "   (method setWorld-COS_JWorld-V",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self) (pair 1 $arg0))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm aload 1)",
      "         ((= $x 2) | jvm putfield world $COS_JWorld)",
      "         ((= $x 3) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method setWorld | self setWorld-COS_JWorld-V)",
      "",
      "   (method getWorld-COS_JWorld",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm getfield world $COS_JWorld)",
      "         ((= $x 2) | jvm areturn)",
      "         (jvm return))",
      "   )",
      "",
      "   (method getWorld | self getWorld-COS_JWorld)",
      "",
      "   (method update-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method update | self update-V)",
      "",
      "   (method postUpdate-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method postUpdate | self postUpdate-V)",
      "",
      " ;"
    ],
    "preprocessed": "class COS_JNamed ()\n   (field super-ref | make-cell 0)\n   (method new | set! $super-ref | (java lang Object) $this)\n   (method super | ? x | (get! $super-ref) $x)\n   (method unknown | ? x | self super $x)\n   (field name | cell new 0)\n   (field world | cell new 0)\n   (method <init>-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm invokespecial <init>-V 0 0)\n         ((= $x 2) | jvm aload 0)\n         ((= $x 3) | jvm ldc (String new int-init \"-\"))\n         ((= $x 4) | jvm putfield name (java lang String))\n         ((= $x 5) | jvm aload 0)\n         ((= $x 6) | jvm aconst_null)\n         ((= $x 7) | jvm putfield world $COS_JWorld)\n         ((= $x 8) | jvm return)\n         (jvm return))\n   )\n\n   (method <init> | self <init>-V)\n\n   (method setName-String-V\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self) (pair 1 $arg0))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm aload 1)\n         ((= $x 2) | jvm putfield name (java lang String))\n         ((= $x 3) | jvm return)\n         (jvm return))\n   )\n\n   (method setName | self setName-String-V)\n\n   (method getName-String\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm getfield name (java lang String))\n         ((= $x 2) | jvm areturn)\n         (jvm return))\n   )\n\n   (method getName | self getName-String)\n\n   (method setWorld-COS_JWorld-V\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self) (pair 1 $arg0))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm aload 1)\n         ((= $x 2) | jvm putfield world $COS_JWorld)\n         ((= $x 3) | jvm return)\n         (jvm return))\n   )\n\n   (method setWorld | self setWorld-COS_JWorld-V)\n\n   (method getWorld-COS_JWorld\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm getfield world $COS_JWorld)\n         ((= $x 2) | jvm areturn)\n         (jvm return))\n   )\n\n   (method getWorld | self getWorld-COS_JWorld)\n\n   (method update-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm return)\n         (jvm return))\n   )\n\n   (method update | self update-V)\n\n   (method postUpdate-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm return)\n         (jvm return))\n   )\n\n   (method postUpdate | self postUpdate-V)\n\n ;",
    "dt": true,
    "parse": [
      "class",
      "COS_JNamed",
      [],
      [
        "field",
        "super-ref",
        [
          -1,
          "make-cell",
          "0"
        ]
      ],
      [
        "method",
        "new",
        [
          -1,
          "set!",
          [
            -2,
            "super-ref"
          ],
          [
            -1,
            [
              "java",
              "lang",
              "Object"
            ],
            [
              -2,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          -1,
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -2,
                "super-ref"
              ]
            ],
            [
              -2,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -2,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "name",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "world",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "ldc",
                        [
                          "String",
                          "new",
                          "int-init",
                          "\"-\""
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "name",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "5"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "6"
                      ],
                      [
                        -1,
                        "jvm",
                        "aconst_null"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "7"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "world",
                        [
                          -2,
                          "COS_JWorld"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "8"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          -1,
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "setName-String-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          -2,
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "name",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "setName",
        [
          -1,
          "self",
          "setName-String-V"
        ]
      ],
      [
        "method",
        "getName-String",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "name",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "getName",
        [
          -1,
          "self",
          "getName-String"
        ]
      ],
      [
        "method",
        "setWorld-COS_JWorld-V",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          -2,
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "world",
                        [
                          -2,
                          "COS_JWorld"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "setWorld",
        [
          -1,
          "self",
          "setWorld-COS_JWorld-V"
        ]
      ],
      [
        "method",
        "getWorld-COS_JWorld",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "world",
                        [
                          -2,
                          "COS_JWorld"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "getWorld",
        [
          -1,
          "self",
          "getWorld-COS_JWorld"
        ]
      ],
      [
        "method",
        "update-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "update",
        [
          -1,
          "self",
          "update-V"
        ]
      ],
      [
        "method",
        "postUpdate-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "postUpdate",
        [
          -1,
          "self",
          "postUpdate-V"
        ]
      ]
    ],
    "code
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf14c;&#xf15a;&#xf246;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14b;&#xf158;&#xf248;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf160;&#xf249;&#xf14b;&#xf158;&#xf248;&#xf246;&#xf149;&#xf17e;&#xf24a;&#xf14b;&#xf159;&#xf24a;&#xf149;&#xf16d;&#xf245;&#xf249;&#xf146;&#xf182;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf178;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf246;&#xf161;&#xf249;&#xf14b;&#xf158;&#xf245;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf148;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf146;&#xf178;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf147;&#xf144;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14b;&#xf16c;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf16f;&#xf246;&#xf15e;&#xf246;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14b;&#xf144;&#xf24a;&#xf149;&#xf16f;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf162;&#xf246;&#xf149;&#xf17b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf149;&#xf17d;&#xf24a;&#xf20c;&#xf226;&#xf238;&#xf226;&#xf245;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf147;&#xf144;&#xf246;&#xf149;&#xf17e;&#xf24a;&#xf14b;&#xf159;&#xf24a;&#xf149;&#xf17b;&#xf245;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf164;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf14b;&#xf16c;&#xf249;&#xf14c;&#xf16e;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf170;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf149;&#xf16f;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf16f;&#xf246;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf147;&#xf144;&#xf246;&#xf149;&#xf17e;&#xf24a;&#xf14b;&#xf159;&#xf24a;&#xf149;&#xf17b;&#xf245;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf170;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf16f;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf171;&#xf246;&#xf15e;&#xf246;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf147;&#xf144;&#xf246;&#xf149;&#xf17e;&#xf24a;&#xf14b;&#xf159;&#xf24a;&#xf149;&#xf17b;&#xf245;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17f;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf172;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf171;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf173;&#xf246;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf14b;&#xf16c;&#xf249;&#xf14c;&#xf16e;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf174;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf173;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf175;&#xf246;&#xf15e;&#xf246;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf14b;&#xf16c;&#xf249;&#xf14c;&#xf16e;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17f;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf176;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf175;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf177;&#xf246;&#xf15e;&#xf246;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf171;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf177;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf164;&#xf246;&#xf15e;&#xf246;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf165;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf164;&#xf245;&#xf24b;",
    "stanza": 1906
  },
  {
    "role": "file",
    "lines": [
      "== COS_JWorld =="
    ],
    "stanza": 1907
  },
  {
    "role": "comment",
    "lines": [
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# ",
      "# import java.util.Iterator;",
      "# ",
      "# public class COS_JWorld {",
      "#     private COS_JHashMap content;",
      "#     private COS_JList inventory;",
      "# ",
      "#     public COS_JWorld() {",
      "#     content = new COS_JHashMap();",
      "#     inventory = new COS_JList();",
      "#     }",
      "# ",
      "#     public void add(COS_JNamed named, String name) {",
      "#     named.setName(name);",
      "#     content.put(named.getName(),named);",
      "#     inventory.add(named);",
      "#     }",
      "# ",
      "#     public COS_JNamed get(String name) {",
      "#     return (COS_JNamed)content.get(new String(name));",
      "#     }",
      "# ",
      "#     public void update() {",
      "#     for (Iterator i = inventory.iterator(); i.hasNext(); ) {",
      "#         COS_JNamed o = (COS_JNamed) i.next();",
      "#         o.update();",
      "#     }",
      "#     for (Iterator i = inventory.iterator(); i.hasNext(); ) {",
      "#         COS_JNamed o = (COS_JNamed) i.next();",
      "#         o.postUpdate();",
      "#     }",
      "#     }",
      "# }"
    ],
    "section_description": "class translation 'COS_JWorld'",
    "section_category": "JAVA",
    "section_index": 66,
    "stanza": 1908
  },
  {
    "role": "code",
    "lines": [
      "class COS_JWorld ()",
      "   (field super-ref | make-cell 0)",
      "   (method new | set! $super-ref | (java lang Object) $this)",
      "   (method super | ? x | (get! $super-ref) $x)",
      "   (method unknown | ? x | self super $x)",
      "   (field content | cell new 0)",
      "   (field inventory | cell new 0)",
      "   (method <init>-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm invokespecial <init>-V 0 0)",
      "         ((= $x 2) | jvm aload 0)",
      "         ((= $x 3) | jvm new $COS_JHashMap)",
      "         ((= $x 4) | jvm dup)",
      "         ((= $x 5) | jvm invokespecial <init>-V 0 0)",
      "         ((= $x 6) | jvm putfield content $COS_JHashMap)",
      "         ((= $x 7) | jvm aload 0)",
      "         ((= $x 8) | jvm new $COS_JList)",
      "         ((= $x 9) | jvm dup)",
      "         ((= $x 10) | jvm invokespecial <init>-V 0 0)",
      "         ((= $x 11) | jvm putfield inventory $COS_JList)",
      "         ((= $x 12) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> | self <init>-V)",
      "",
      "   (method add-COS_JNamed-String-V",
      "     (lambda (arg0 arg1) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self) (pair 1 $arg0) (pair 2 $arg1))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 1)",
      "         ((= $x 1) | jvm aload 2)",
      "         ((= $x 2) | jvm invokevirtual setName-String-V 1 0)",
      "         ((= $x 3) | jvm aload 0)",
      "         ((= $x 4) | jvm getfield content $COS_JHashMap)",
      "         ((= $x 5) | jvm aload 1)",
      "         ((= $x 6) | jvm invokevirtual getName-String 0 1)",
      "         ((= $x 7) | jvm aload 1)",
      "         ((= $x 8) | jvm invokevirtual put-Object-Object-V 2 0)",
      "         ((= $x 9) | jvm aload 0)",
      "         ((= $x 10) | jvm getfield inventory $COS_JList)",
      "         ((= $x 11) | jvm aload 1)",
      "         ((= $x 12) | jvm invokevirtual add-Object-V 1 0)",
      "         ((= $x 13) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method add | self add-COS_JNamed-String-V)",
      "",
      "   (method get-String-COS_JNamed",
      "     (lambda (arg0) |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self) (pair 1 $arg0))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm getfield content $COS_JHashMap)",
      "         ((= $x 2) | jvm new (java lang String))",
      "         ((= $x 3) | jvm dup)",
      "         ((= $x 4) | jvm aload 1)",
      "         ((= $x 5) | jvm invokespecial <init>-String-V 1 0)",
      "         ((= $x 6) | jvm invokevirtual get-Object-Object 1 1)",
      "         ((= $x 7) | jvm checkcast $COS_JNamed)",
      "         ((= $x 8) | jvm areturn)",
      "         (jvm return))",
      "   )",
      "",
      "   (method get | self get-String-COS_JNamed)",
      "",
      "   (method update-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm getfield inventory $COS_JList)",
      "         ((= $x 2) | jvm invokevirtual iterator-Iterator 0 1)",
      "         ((= $x 3) | jvm astore 1)",
      "         ((= $x 4) | jvm aload 1)",
      "         ((= $x 5) | jvm invokeinterface hasNext-Z 0 1 1)",
      "         ((= $x 6) | jvm ifeq 14)",
      "         ((= $x 7) | jvm aload 1)",
      "         ((= $x 8) | jvm invokeinterface next-Object 0 1 1)",
      "         ((= $x 9) | jvm checkcast $COS_JNamed)",
      "         ((= $x 10) | jvm astore 2)",
      "         ((= $x 11) | jvm aload 2)",
      "         ((= $x 12) | jvm invokevirtual update-V 0 0)",
      "         ((= $x 13) | jvm goto 4)",
      "         ((= $x 14) | jvm aload 0)",
      "         ((= $x 15) | jvm getfield inventory $COS_JList)",
      "         ((= $x 16) | jvm invokevirtual iterator-Iterator 0 1)",
      "         ((= $x 17) | jvm astore 1)",
      "         ((= $x 18) | jvm aload 1)",
      "         ((= $x 19) | jvm invokeinterface hasNext-Z 0 1 1)",
      "         ((= $x 20) | jvm ifeq 28)",
      "         ((= $x 21) | jvm aload 1)",
      "         ((= $x 22) | jvm invokeinterface next-Object 0 1 1)",
      "         ((= $x 23) | jvm checkcast $COS_JNamed)",
      "         ((= $x 24) | jvm astore 2)",
      "         ((= $x 25) | jvm aload 2)",
      "         ((= $x 26) | jvm invokevirtual postUpdate-V 0 0)",
      "         ((= $x 27) | jvm goto 18)",
      "         ((= $x 28) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method update | self update-V)",
      "",
      " ;"
    ],
    "preprocessed": "class COS_JWorld ()\n   (field super-ref | make-cell 0)\n   (method new | set! $super-ref | (java lang Object) $this)\n   (method super | ? x | (get! $super-ref) $x)\n   (method unknown | ? x | self super $x)\n   (field content | cell new 0)\n   (field inventory | cell new 0)\n   (method <init>-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm invokespecial <init>-V 0 0)\n         ((= $x 2) | jvm aload 0)\n         ((= $x 3) | jvm new $COS_JHashMap)\n         ((= $x 4) | jvm dup)\n         ((= $x 5) | jvm invokespecial <init>-V 0 0)\n         ((= $x 6) | jvm putfield content $COS_JHashMap)\n         ((= $x 7) | jvm aload 0)\n         ((= $x 8) | jvm new $COS_JList)\n         ((= $x 9) | jvm dup)\n         ((= $x 10) | jvm invokespecial <init>-V 0 0)\n         ((= $x 11) | jvm putfield inventory $COS_JList)\n         ((= $x 12) | jvm return)\n         (jvm return))\n   )\n\n   (method <init> | self <init>-V)\n\n   (method add-COS_JNamed-String-V\n     (lambda (arg0 arg1) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self) (pair 1 $arg0) (pair 2 $arg1))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 1)\n         ((= $x 1) | jvm aload 2)\n         ((= $x 2) | jvm invokevirtual setName-String-V 1 0)\n         ((= $x 3) | jvm aload 0)\n         ((= $x 4) | jvm getfield content $COS_JHashMap)\n         ((= $x 5) | jvm aload 1)\n         ((= $x 6) | jvm invokevirtual getName-String 0 1)\n         ((= $x 7) | jvm aload 1)\n         ((= $x 8) | jvm invokevirtual put-Object-Object-V 2 0)\n         ((= $x 9) | jvm aload 0)\n         ((= $x 10) | jvm getfield inventory $COS_JList)\n         ((= $x 11) | jvm aload 1)\n         ((= $x 12) | jvm invokevirtual add-Object-V 1 0)\n         ((= $x 13) | jvm return)\n         (jvm return))\n   )\n\n   (method add | self add-COS_JNamed-String-V)\n\n   (method get-String-COS_JNamed\n     (lambda (arg0) |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self) (pair 1 $arg0))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm getfield content $COS_JHashMap)\n         ((= $x 2) | jvm new (java lang String))\n         ((= $x 3) | jvm dup)\n         ((= $x 4) | jvm aload 1)\n         ((= $x 5) | jvm invokespecial <init>-String-V 1 0)\n         ((= $x 6) | jvm invokevirtual get-Object-Object 1 1)\n         ((= $x 7) | jvm checkcast $COS_JNamed)\n         ((= $x 8) | jvm areturn)\n         (jvm return))\n   )\n\n   (method get | self get-String-COS_JNamed)\n\n   (method update-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm getfield inventory $COS_JList)\n         ((= $x 2) | jvm invokevirtual iterator-Iterator 0 1)\n         ((= $x 3) | jvm astore 1)\n         ((= $x 4) | jvm aload 1)\n         ((= $x 5) | jvm invokeinterface hasNext-Z 0 1 1)\n         ((= $x 6) | jvm ifeq 14)\n         ((= $x 7) | jvm aload 1)\n         ((= $x 8) | jvm invokeinterface next-Object 0 1 1)\n         ((= $x 9) | jvm checkcast $COS_JNamed)\n         ((= $x 10) | jvm astore 2)\n         ((= $x 11) | jvm aload 2)\n         ((= $x 12) | jvm invokevirtual update-V 0 0)\n         ((= $x 13) | jvm goto 4)\n         ((= $x 14) | jvm aload 0)\n         ((= $x 15) | jvm getfield inventory $COS_JList)\n         ((= $x 16) | jvm invokevirtual iterator-Iterator 0 1)\n         ((= $x 17) | jvm astore 1)\n         ((= $x 18) | jvm aload 1)\n         ((= $x 19) | jvm invokeinterface hasNext-Z 0 1 1)\n         ((= $x 20) | jvm ifeq 28)\n         ((= $x 21) | jvm aload 1)\n         ((= $x 22) | jvm invokeinterface next-Object 0 1 1)\n         ((= $x 23) | jvm checkcast $COS_JNamed)\n         ((= $x 24) | jvm astore 2)\n         ((= $x 25) | jvm aload 2)\n         ((= $x 26) | jvm invokevirtual postUpdate-V 0 0)\n         ((= $x 27) | jvm goto 18)\n         ((= $x 28) | jvm return)\n         (jvm return))\n   )\n\n   (method update | self update-V)\n\n ;",
    "dt": true,
    "parse": [
      "class",
      "COS_JWorld",
      [],
      [
        "field",
        "super-ref",
        [
          -1,
          "make-cell",
          "0"
        ]
      ],
      [
        "method",
        "new",
        [
          -1,
          "set!",
          [
            -2,
            "super-ref"
          ],
          [
            -1,
            [
              "java",
              "lang",
              "Object"
            ],
            [
              -2,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          -1,
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -2,
                "super-ref"
              ]
            ],
            [
              -2,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -2,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "content",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "inventory",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "new",
                        [
                          -2,
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "5"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "6"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "content",
                        [
                          -2,
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "7"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "8"
                      ],
                      [
                        -1,
                        "jvm",
                        "new",
                        [
                          -2,
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "9"
                      ],
                      [
                        -1,
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "10"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "11"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "inventory",
                        [
                          -2,
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "12"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          -1,
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "add-COS_JNamed-String-V",
        [
          "lambda",
          [
            "arg0",
            "arg1"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          -2,
                          "arg0"
                        ]
                      ],
                      [
                        "pair",
                        "2",
                        [
                          -2,
                          "arg1"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "setName-String-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "content",
                        [
                          -2,
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "5"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "6"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "getName-String",
                        "0",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "7"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "8"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "put-Object-Object-V",
                        "2",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "9"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "10"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "inventory",
                        [
                          -2,
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "11"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "12"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "add-Object-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "13"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "add",
        [
          -1,
          "self",
          "add-COS_JNamed-String-V"
        ]
      ],
      [
        "method",
        "get-String-COS_JNamed",
        [
          "lambda",
          [
            "arg0"
          ],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ],
                      [
                        "pair",
                        "1",
                        [
                          -2,
                          "arg0"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "content",
                        [
                          -2,
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "new",
                        [
                          "java",
                          "lang",
                          "String"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "5"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokespecial",
                        "<init>-String-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "6"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "get-Object-Object",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "7"
                      ],
                      [
                        -1,
                        "jvm",
                        "checkcast",
                        [
                          -2,
                          "COS_JNamed"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "8"
                      ],
                      [
                        -1,
                        "jvm",
                        "areturn"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "get",
        [
          -1,
          "self",
          "get-String-COS_JNamed"
        ]
      ],
      [
        "method",
        "update-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "inventory",
                        [
                          -2,
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "iterator-Iterator",
                        "0",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "astore",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "5"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokeinterface",
                        "hasNext-Z",
                        "0",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "6"
                      ],
                      [
                        -1,
                        "jvm",
                        "ifeq",
                        "14"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "7"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "8"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokeinterface",
                        "next-Object",
                        "0",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "9"
                      ],
                      [
                        -1,
                        "jvm",
                        "checkcast",
                        [
                          -2,
                          "COS_JNamed"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "10"
                      ],
                      [
                        -1,
                        "jvm",
                        "astore",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "11"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "12"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "update-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "13"
                      ],
                      [
                        -1,
                        "jvm",
                        "goto",
                        "4"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "14"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "15"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "inventory",
                        [
                          -2,
                          "COS_JList"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "16"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "iterator-Iterator",
                        "0",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "17"
                      ],
                      [
                        -1,
                        "jvm",
                        "astore",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "18"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "19"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokeinterface",
                        "hasNext-Z",
                        "0",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "20"
                      ],
                      [
                        -1,
                        "jvm",
                        "ifeq",
                        "28"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "21"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "22"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokeinterface",
                        "next-Object",
                        "0",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "23"
                      ],
                      [
                        -1,
                        "jvm",
                        "checkcast",
                        [
                          -2,
                          "COS_JNamed"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "24"
                      ],
                      [
                        -1,
                        "jvm",
                        "astore",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "25"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "26"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "postUpdate-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "27"
                      ],
                      [
                        -1,
                        "jvm",
                        "goto",
                        "18"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "28"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "update",
        [
          -1,
          "self",
          "update-V"
        ]
      ]
    ],
    "code
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf14c;&#xf16e;&#xf246;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14b;&#xf158;&#xf248;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf160;&#xf249;&#xf14b;&#xf158;&#xf248;&#xf246;&#xf149;&#xf17e;&#xf24a;&#xf14b;&#xf159;&#xf24a;&#xf149;&#xf16d;&#xf245;&#xf249;&#xf146;&#xf182;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf178;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf246;&#xf161;&#xf249;&#xf14b;&#xf158;&#xf245;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf148;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf146;&#xf178;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf147;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf146;&#xf171;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf16f;&#xf246;&#xf15e;&#xf246;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14b;&#xf144;&#xf24a;&#xf149;&#xf16f;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf175;&#xf249;&#xf14c;&#xf144;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf159;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14b;&#xf144;&#xf24a;&#xf149;&#xf16f;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf147;&#xf153;&#xf249;&#xf14c;&#xf144;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf175;&#xf249;&#xf14b;&#xf179;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf159;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20e;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14b;&#xf144;&#xf24a;&#xf149;&#xf16f;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20f;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf146;&#xf171;&#xf249;&#xf14b;&#xf179;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf210;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf170;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf149;&#xf16f;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf178;&#xf246;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf24a;&#xf14b;&#xf156;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf206;&#xf249;&#xf14b;&#xf156;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14c;&#xf16f;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf147;&#xf153;&#xf249;&#xf14c;&#xf144;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14c;&#xf171;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14c;&#xf145;&#xf24a;&#xf206;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20e;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf146;&#xf171;&#xf249;&#xf14b;&#xf179;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20f;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf210;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14b;&#xf17a;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf211;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf172;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf178;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf179;&#xf246;&#xf15e;&#xf246;&#xf14b;&#xf155;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf205;&#xf249;&#xf14b;&#xf155;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf147;&#xf153;&#xf249;&#xf14c;&#xf144;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf175;&#xf246;&#xf149;&#xf17e;&#xf24a;&#xf14b;&#xf159;&#xf24a;&#xf149;&#xf17b;&#xf245;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf159;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14b;&#xf144;&#xf24a;&#xf149;&#xf17c;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14c;&#xf147;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15b;&#xf249;&#xf14c;&#xf15a;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17f;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf145;&#xf17d;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf179;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf177;&#xf246;&#xf15e;&#xf246;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf146;&#xf171;&#xf249;&#xf14b;&#xf179;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14b;&#xf17f;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15c;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf183;&#xf24a;&#xf14c;&#xf14b;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf173;&#xf24a;&#xf212;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf183;&#xf24a;&#xf14c;&#xf14d;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15b;&#xf249;&#xf14c;&#xf15a;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20e;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15c;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20f;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf210;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14c;&#xf177;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf211;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf212;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf213;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf146;&#xf171;&#xf249;&#xf14b;&#xf179;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf214;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14b;&#xf17f;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf215;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15c;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf216;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf217;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf183;&#xf24a;&#xf14c;&#xf14b;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf218;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf173;&#xf24a;&#xf220;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf219;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf21a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf183;&#xf24a;&#xf14c;&#xf14d;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf21b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15b;&#xf249;&#xf14c;&#xf15a;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf21c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15c;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf21d;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf21e;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14c;&#xf164;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf21f;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf16d;&#xf24a;&#xf216;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf220;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf171;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf177;&#xf245;&#xf24b;",
    "stanza": 1909
  },
  {
    "role": "file",
    "lines": [
      "== COS_JRobo =="
    ],
    "stanza": 1910
  },
  {
    "role": "comment",
    "lines": [
      "# Produced by Fritzifier, based on JasminVisitor",
      "# Using BCEL library to read Java bytecode",
      "# Here is the original code:",
      "# ",
      "# import java.util.Iterator;",
      "# ",
      "# public class COS_JRobo extends COS_JThing {",
      "#     private COS_JHashMap times;",
      "#     private int now;",
      "# ",
      "#     public COS_JRobo() {",
      "#     times = new COS_JHashMap();",
      "#     now = 1;",
      "#     }",
      "# ",
      "#     public void update() {",
      "#     COS_JRoom location = getRoom();",
      "#     //System.out.println(\"Updating robo...\");",
      "#     if (location!=null) {",
      "#         int oldestTime = now;",
      "#         COS_JDoor oldestDoor = null;",
      "#         for (Iterator i = location.getDoors(); i.hasNext(); ) {",
      "#         COS_JDoor door = (COS_JDoor) i.next();",
      "#         //System.out.println(\" scanning door \");",
      "#         Integer t = (Integer)times.get(door);",
      "#         int v = 0;",
      "#         if (t!=null) {",
      "#             v = t.intValue();",
      "#         }",
      "#         if (v<oldestTime) {",
      "#             oldestTime = v;",
      "#             oldestDoor = door;",
      "#         }",
      "#         }",
      "#         if (oldestDoor!=null) {",
      "#         times.put(oldestDoor,new Integer(now));",
      "#         setNextRoom(oldestDoor.apply(location));",
      "#         }",
      "#     }",
      "#     now++;",
      "#     }",
      "# }",
      "# "
    ],
    "section_description": "class translation 'COS_JRobo'",
    "section_category": "JAVA",
    "section_index": 67,
    "stanza": 1911
  },
  {
    "role": "code",
    "lines": [
      "class COS_JRobo ()",
      "   (field super-ref | make-cell 0)",
      "   (method new | set! $super-ref | (COS_JThing) $this)",
      "   (method super | ? x | (get! $super-ref) $x)",
      "   (method unknown | ? x | self super $x)",
      "   (field times | cell new 0)",
      "   (field now | (int) new)",
      "   (method <init>-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm invokespecial <init>-V 0 0)",
      "         ((= $x 2) | jvm aload 0)",
      "         ((= $x 3) | jvm new $COS_JHashMap)",
      "         ((= $x 4) | jvm dup)",
      "         ((= $x 5) | jvm invokespecial <init>-V 0 0)",
      "         ((= $x 6) | jvm putfield times $COS_JHashMap)",
      "         ((= $x 7) | jvm aload 0)",
      "         ((= $x 8) | jvm iconst 1)",
      "         ((= $x 9) | jvm putfield now $int)",
      "         ((= $x 10) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method <init> | self <init>-V)",
      "",
      "   (method update-V",
      "     (lambda () |",
      "      let ((vars | cell new | make-hash | vector",
      "                    (pair 0 $self))",
      "           (stack | cell new | vector)) |",
      "      state-machine $vars $stack | ? jvm | ? x | cond",
      "         ((= $x 0) | jvm aload 0)",
      "         ((= $x 1) | jvm invokevirtual getRoom-COS_JRoom 0 1)",
      "         ((= $x 2) | jvm astore 1)",
      "         ((= $x 3) | jvm aload 1)",
      "         ((= $x 4) | jvm ifnull 57)",
      "         ((= $x 5) | jvm aload 0)",
      "         ((= $x 6) | jvm getfield now $int)",
      "         ((= $x 7) | jvm istore 2)",
      "         ((= $x 8) | jvm aconst_null)",
      "         ((= $x 9) | jvm astore 3)",
      "         ((= $x 10) | jvm aload 1)",
      "         ((= $x 11) | jvm invokevirtual getDoors-Iterator 0 1)",
      "         ((= $x 12) | jvm astore 4)",
      "         ((= $x 13) | jvm aload 4)",
      "         ((= $x 14) | jvm invokeinterface hasNext-Z 0 1 1)",
      "         ((= $x 15) | jvm ifeq 41)",
      "         ((= $x 16) | jvm aload 4)",
      "         ((= $x 17) | jvm invokeinterface next-Object 0 1 1)",
      "         ((= $x 18) | jvm checkcast $COS_JDoor)",
      "         ((= $x 19) | jvm astore 5)",
      "         ((= $x 20) | jvm aload 0)",
      "         ((= $x 21) | jvm getfield times $COS_JHashMap)",
      "         ((= $x 22) | jvm aload 5)",
      "         ((= $x 23) | jvm invokevirtual get-Object-Object 1 1)",
      "         ((= $x 24) | jvm checkcast (java lang Integer))",
      "         ((= $x 25) | jvm astore 6)",
      "         ((= $x 26) | jvm iconst 0)",
      "         ((= $x 27) | jvm istore 7)",
      "         ((= $x 28) | jvm aload 6)",
      "         ((= $x 29) | jvm ifnull 33)",
      "         ((= $x 30) | jvm aload 6)",
      "         ((= $x 31) | jvm invokevirtual intValue-I 0 1)",
      "         ((= $x 32) | jvm istore 7)",
      "         ((= $x 33) | jvm iload 7)",
      "         ((= $x 34) | jvm iload 2)",
      "         ((= $x 35) | jvm if_icmpge 40)",
      "         ((= $x 36) | jvm iload 7)",
      "         ((= $x 37) | jvm istore 2)",
      "         ((= $x 38) | jvm aload 5)",
      "         ((= $x 39) | jvm astore 3)",
      "         ((= $x 40) | jvm goto 13)",
      "         ((= $x 41) | jvm aload 3)",
      "         ((= $x 42) | jvm ifnull 57)",
      "         ((= $x 43) | jvm aload 0)",
      "         ((= $x 44) | jvm getfield times $COS_JHashMap)",
      "         ((= $x 45) | jvm aload 3)",
      "         ((= $x 46) | jvm new (java lang Integer))",
      "         ((= $x 47) | jvm dup)",
      "         ((= $x 48) | jvm aload 0)",
      "         ((= $x 49) | jvm getfield now $int)",
      "         ((= $x 50) | jvm invokespecial <init>-I-V 1 0)",
      "         ((= $x 51) | jvm invokevirtual put-Object-Object-V 2 0)",
      "         ((= $x 52) | jvm aload 0)",
      "         ((= $x 53) | jvm aload 3)",
      "         ((= $x 54) | jvm aload 1)",
      "         ((= $x 55) | jvm invokevirtual apply-COS_JRoom-COS_JRoom 1 1)",
      "         ((= $x 56) | jvm invokevirtual setNextRoom-COS_JRoom-V 1 0)",
      "         ((= $x 57) | jvm aload 0)",
      "         ((= $x 58) | jvm dup)",
      "         ((= $x 59) | jvm getfield now $int)",
      "         ((= $x 60) | jvm iconst 1)",
      "         ((= $x 61) | jvm iadd)",
      "         ((= $x 62) | jvm putfield now $int)",
      "         ((= $x 63) | jvm return)",
      "         (jvm return))",
      "   )",
      "",
      "   (method update | self update-V)",
      "",
      " ;"
    ],
    "preprocessed": "class COS_JRobo ()\n   (field super-ref | make-cell 0)\n   (method new | set! $super-ref | (COS_JThing) $this)\n   (method super | ? x | (get! $super-ref) $x)\n   (method unknown | ? x | self super $x)\n   (field times | cell new 0)\n   (field now | (int) new)\n   (method <init>-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm invokespecial <init>-V 0 0)\n         ((= $x 2) | jvm aload 0)\n         ((= $x 3) | jvm new $COS_JHashMap)\n         ((= $x 4) | jvm dup)\n         ((= $x 5) | jvm invokespecial <init>-V 0 0)\n         ((= $x 6) | jvm putfield times $COS_JHashMap)\n         ((= $x 7) | jvm aload 0)\n         ((= $x 8) | jvm iconst 1)\n         ((= $x 9) | jvm putfield now $int)\n         ((= $x 10) | jvm return)\n         (jvm return))\n   )\n\n   (method <init> | self <init>-V)\n\n   (method update-V\n     (lambda () |\n      let ((vars | cell new | make-hash | vector\n                    (pair 0 $self))\n           (stack | cell new | vector)) |\n      state-machine $vars $stack | ? jvm | ? x | cond\n         ((= $x 0) | jvm aload 0)\n         ((= $x 1) | jvm invokevirtual getRoom-COS_JRoom 0 1)\n         ((= $x 2) | jvm astore 1)\n         ((= $x 3) | jvm aload 1)\n         ((= $x 4) | jvm ifnull 57)\n         ((= $x 5) | jvm aload 0)\n         ((= $x 6) | jvm getfield now $int)\n         ((= $x 7) | jvm istore 2)\n         ((= $x 8) | jvm aconst_null)\n         ((= $x 9) | jvm astore 3)\n         ((= $x 10) | jvm aload 1)\n         ((= $x 11) | jvm invokevirtual getDoors-Iterator 0 1)\n         ((= $x 12) | jvm astore 4)\n         ((= $x 13) | jvm aload 4)\n         ((= $x 14) | jvm invokeinterface hasNext-Z 0 1 1)\n         ((= $x 15) | jvm ifeq 41)\n         ((= $x 16) | jvm aload 4)\n         ((= $x 17) | jvm invokeinterface next-Object 0 1 1)\n         ((= $x 18) | jvm checkcast $COS_JDoor)\n         ((= $x 19) | jvm astore 5)\n         ((= $x 20) | jvm aload 0)\n         ((= $x 21) | jvm getfield times $COS_JHashMap)\n         ((= $x 22) | jvm aload 5)\n         ((= $x 23) | jvm invokevirtual get-Object-Object 1 1)\n         ((= $x 24) | jvm checkcast (java lang Integer))\n         ((= $x 25) | jvm astore 6)\n         ((= $x 26) | jvm iconst 0)\n         ((= $x 27) | jvm istore 7)\n         ((= $x 28) | jvm aload 6)\n         ((= $x 29) | jvm ifnull 33)\n         ((= $x 30) | jvm aload 6)\n         ((= $x 31) | jvm invokevirtual intValue-I 0 1)\n         ((= $x 32) | jvm istore 7)\n         ((= $x 33) | jvm iload 7)\n         ((= $x 34) | jvm iload 2)\n         ((= $x 35) | jvm if_icmpge 40)\n         ((= $x 36) | jvm iload 7)\n         ((= $x 37) | jvm istore 2)\n         ((= $x 38) | jvm aload 5)\n         ((= $x 39) | jvm astore 3)\n         ((= $x 40) | jvm goto 13)\n         ((= $x 41) | jvm aload 3)\n         ((= $x 42) | jvm ifnull 57)\n         ((= $x 43) | jvm aload 0)\n         ((= $x 44) | jvm getfield times $COS_JHashMap)\n         ((= $x 45) | jvm aload 3)\n         ((= $x 46) | jvm new (java lang Integer))\n         ((= $x 47) | jvm dup)\n         ((= $x 48) | jvm aload 0)\n         ((= $x 49) | jvm getfield now $int)\n         ((= $x 50) | jvm invokespecial <init>-I-V 1 0)\n         ((= $x 51) | jvm invokevirtual put-Object-Object-V 2 0)\n         ((= $x 52) | jvm aload 0)\n         ((= $x 53) | jvm aload 3)\n         ((= $x 54) | jvm aload 1)\n         ((= $x 55) | jvm invokevirtual apply-COS_JRoom-COS_JRoom 1 1)\n         ((= $x 56) | jvm invokevirtual setNextRoom-COS_JRoom-V 1 0)\n         ((= $x 57) | jvm aload 0)\n         ((= $x 58) | jvm dup)\n         ((= $x 59) | jvm getfield now $int)\n         ((= $x 60) | jvm iconst 1)\n         ((= $x 61) | jvm iadd)\n         ((= $x 62) | jvm putfield now $int)\n         ((= $x 63) | jvm return)\n         (jvm return))\n   )\n\n   (method update | self update-V)\n\n ;",
    "dt": true,
    "parse": [
      "class",
      "COS_JRobo",
      [],
      [
        "field",
        "super-ref",
        [
          -1,
          "make-cell",
          "0"
        ]
      ],
      [
        "method",
        "new",
        [
          -1,
          "set!",
          [
            -2,
            "super-ref"
          ],
          [
            -1,
            [
              "COS_JThing"
            ],
            [
              -2,
              "this"
            ]
          ]
        ]
      ],
      [
        "method",
        "super",
        [
          -1,
          "?",
          "x",
          [
            -1,
            [
              "get!",
              [
                -2,
                "super-ref"
              ]
            ],
            [
              -2,
              "x"
            ]
          ]
        ]
      ],
      [
        "method",
        "unknown",
        [
          -1,
          "?",
          "x",
          [
            -1,
            "self",
            "super",
            [
              -2,
              "x"
            ]
          ]
        ]
      ],
      [
        "field",
        "times",
        [
          -1,
          "cell",
          "new",
          "0"
        ]
      ],
      [
        "field",
        "now",
        [
          -1,
          [
            "int"
          ],
          "new"
        ]
      ],
      [
        "method",
        "<init>-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "new",
                        [
                          -2,
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "5"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokespecial",
                        "<init>-V",
                        "0",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "6"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "times",
                        [
                          -2,
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "7"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "8"
                      ],
                      [
                        -1,
                        "jvm",
                        "iconst",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "9"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "now",
                        [
                          -2,
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "10"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "<init>",
        [
          -1,
          "self",
          "<init>-V"
        ]
      ],
      [
        "method",
        "update-V",
        [
          "lambda",
          [],
          [
            -1,
            "let",
            [
              [
                "vars",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "make-hash",
                    [
                      -1,
                      "vector",
                      [
                        "pair",
                        "0",
                        [
                          -2,
                          "self"
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              [
                "stack",
                [
                  -1,
                  "cell",
                  "new",
                  [
                    -1,
                    "vector"
                  ]
                ]
              ]
            ],
            [
              -1,
              "state-machine",
              [
                -2,
                "vars"
              ],
              [
                -2,
                "stack"
              ],
              [
                -1,
                "?",
                "jvm",
                [
                  -1,
                  "?",
                  "x",
                  [
                    -1,
                    "cond",
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "0"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "1"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "getRoom-COS_JRoom",
                        "0",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "2"
                      ],
                      [
                        -1,
                        "jvm",
                        "astore",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "3"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "4"
                      ],
                      [
                        -1,
                        "jvm",
                        "ifnull",
                        "57"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "5"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "6"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "now",
                        [
                          -2,
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "7"
                      ],
                      [
                        -1,
                        "jvm",
                        "istore",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "8"
                      ],
                      [
                        -1,
                        "jvm",
                        "aconst_null"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "9"
                      ],
                      [
                        -1,
                        "jvm",
                        "astore",
                        "3"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "10"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "11"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "getDoors-Iterator",
                        "0",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "12"
                      ],
                      [
                        -1,
                        "jvm",
                        "astore",
                        "4"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "13"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "4"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "14"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokeinterface",
                        "hasNext-Z",
                        "0",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "15"
                      ],
                      [
                        -1,
                        "jvm",
                        "ifeq",
                        "41"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "16"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "4"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "17"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokeinterface",
                        "next-Object",
                        "0",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "18"
                      ],
                      [
                        -1,
                        "jvm",
                        "checkcast",
                        [
                          -2,
                          "COS_JDoor"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "19"
                      ],
                      [
                        -1,
                        "jvm",
                        "astore",
                        "5"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "20"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "21"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "times",
                        [
                          -2,
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "22"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "5"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "23"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "get-Object-Object",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "24"
                      ],
                      [
                        -1,
                        "jvm",
                        "checkcast",
                        [
                          "java",
                          "lang",
                          "Integer"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "25"
                      ],
                      [
                        -1,
                        "jvm",
                        "astore",
                        "6"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "26"
                      ],
                      [
                        -1,
                        "jvm",
                        "iconst",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "27"
                      ],
                      [
                        -1,
                        "jvm",
                        "istore",
                        "7"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "28"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "6"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "29"
                      ],
                      [
                        -1,
                        "jvm",
                        "ifnull",
                        "33"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "30"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "6"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "31"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "intValue-I",
                        "0",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "32"
                      ],
                      [
                        -1,
                        "jvm",
                        "istore",
                        "7"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "33"
                      ],
                      [
                        -1,
                        "jvm",
                        "iload",
                        "7"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "34"
                      ],
                      [
                        -1,
                        "jvm",
                        "iload",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "35"
                      ],
                      [
                        -1,
                        "jvm",
                        "if_icmpge",
                        "40"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "36"
                      ],
                      [
                        -1,
                        "jvm",
                        "iload",
                        "7"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "37"
                      ],
                      [
                        -1,
                        "jvm",
                        "istore",
                        "2"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "38"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "5"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "39"
                      ],
                      [
                        -1,
                        "jvm",
                        "astore",
                        "3"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "40"
                      ],
                      [
                        -1,
                        "jvm",
                        "goto",
                        "13"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "41"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "3"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "42"
                      ],
                      [
                        -1,
                        "jvm",
                        "ifnull",
                        "57"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "43"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "44"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "times",
                        [
                          -2,
                          "COS_JHashMap"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "45"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "3"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "46"
                      ],
                      [
                        -1,
                        "jvm",
                        "new",
                        [
                          "java",
                          "lang",
                          "Integer"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "47"
                      ],
                      [
                        -1,
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "48"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "49"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "now",
                        [
                          -2,
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "50"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokespecial",
                        "<init>-I-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "51"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "put-Object-Object-V",
                        "2",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "52"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "53"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "3"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "54"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "55"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "apply-COS_JRoom-COS_JRoom",
                        "1",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "56"
                      ],
                      [
                        -1,
                        "jvm",
                        "invokevirtual",
                        "setNextRoom-COS_JRoom-V",
                        "1",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "57"
                      ],
                      [
                        -1,
                        "jvm",
                        "aload",
                        "0"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "58"
                      ],
                      [
                        -1,
                        "jvm",
                        "dup"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "59"
                      ],
                      [
                        -1,
                        "jvm",
                        "getfield",
                        "now",
                        [
                          -2,
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "60"
                      ],
                      [
                        -1,
                        "jvm",
                        "iconst",
                        "1"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "61"
                      ],
                      [
                        -1,
                        "jvm",
                        "iadd"
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "62"
                      ],
                      [
                        -1,
                        "jvm",
                        "putfield",
                        "now",
                        [
                          -2,
                          "int"
                        ]
                      ]
                    ],
                    [
                      [
                        "=",
                        [
                          -2,
                          "x"
                        ],
                        "63"
                      ],
                      [
                        -1,
                        "jvm",
                        "return"
                      ]
                    ],
                    [
                      "jvm",
                      "return"
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "method",
        "update",
        [
          -1,
          "self",
          "update-V"
        ]
      ]
    ],
    "code
    "spider": "&#xf147;&#xf150;&#xf24a;&#xf14c;&#xf17a;&#xf246;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14b;&#xf158;&#xf248;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf160;&#xf249;&#xf14b;&#xf158;&#xf248;&#xf246;&#xf14c;&#xf159;&#xf245;&#xf249;&#xf146;&#xf182;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf146;&#xf178;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf246;&#xf161;&#xf249;&#xf14b;&#xf158;&#xf245;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf148;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf146;&#xf178;&#xf249;&#xf16d;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14c;&#xf17b;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf147;&#xf14e;&#xf24a;&#xf14c;&#xf17c;&#xf248;&#xf246;&#xf182;&#xf245;&#xf146;&#xf175;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf16f;&#xf246;&#xf15e;&#xf246;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14b;&#xf144;&#xf24a;&#xf149;&#xf16f;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf175;&#xf249;&#xf14c;&#xf144;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf159;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14b;&#xf144;&#xf24a;&#xf149;&#xf16f;&#xf24a;&#xf204;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf14c;&#xf17b;&#xf249;&#xf14c;&#xf144;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf161;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf14c;&#xf17c;&#xf249;&#xf182;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20e;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf149;&#xf170;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf149;&#xf16f;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf14c;&#xf177;&#xf246;&#xf15e;&#xf246;&#xf245;&#xf248;&#xf145;&#xf178;&#xf246;&#xf246;&#xf14a;&#xf153;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf146;&#xf149;&#xf248;&#xf154;&#xf246;&#xf145;&#xf15a;&#xf24a;&#xf204;&#xf249;&#xf146;&#xf169;&#xf245;&#xf245;&#xf246;&#xf14a;&#xf154;&#xf248;&#xf146;&#xf14b;&#xf24a;&#xf146;&#xf175;&#xf248;&#xf154;&#xf245;&#xf245;&#xf248;&#xf14b;&#xf153;&#xf249;&#xf14a;&#xf153;&#xf249;&#xf14a;&#xf154;&#xf248;&#xf150;&#xf24a;&#xf14b;&#xf152;&#xf248;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf146;&#xf15b;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf204;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf205;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14c;&#xf160;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf206;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15c;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf207;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf208;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17c;&#xf24a;&#xf23d;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf209;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf14c;&#xf17c;&#xf249;&#xf182;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15d;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf164;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20d;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15c;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20e;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf20f;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14c;&#xf168;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf210;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15c;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf211;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf212;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf183;&#xf24a;&#xf14c;&#xf14b;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf213;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf173;&#xf24a;&#xf22d;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf214;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf208;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf215;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf183;&#xf24a;&#xf14c;&#xf14d;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf216;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15b;&#xf249;&#xf14c;&#xf14f;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf217;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15c;&#xf24a;&#xf209;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf218;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf219;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf14c;&#xf17b;&#xf249;&#xf14c;&#xf144;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf21a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf209;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf21b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14c;&#xf147;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf21c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15b;&#xf246;&#xf149;&#xf17e;&#xf24a;&#xf14b;&#xf159;&#xf24a;&#xf149;&#xf176;&#xf245;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf21d;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15c;&#xf24a;&#xf20a;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf21e;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf161;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf21f;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15d;&#xf24a;&#xf20b;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf220;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf20a;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf221;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17c;&#xf24a;&#xf225;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf222;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf20a;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf223;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14c;&#xf17d;&#xf24a;&#xf204;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf224;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15d;&#xf24a;&#xf20b;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf225;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf20b;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf226;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf227;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf178;&#xf24a;&#xf22c;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf228;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf160;&#xf24a;&#xf20b;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf229;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15d;&#xf24a;&#xf206;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf22a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf209;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf22b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15c;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf22c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf16d;&#xf24a;&#xf211;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf22d;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf22e;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf17c;&#xf24a;&#xf23d;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf22f;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf230;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf14c;&#xf17b;&#xf249;&#xf14c;&#xf144;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf231;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf232;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf175;&#xf246;&#xf149;&#xf17e;&#xf24a;&#xf14b;&#xf159;&#xf24a;&#xf149;&#xf176;&#xf245;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf233;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf159;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf234;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf235;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf14c;&#xf17c;&#xf249;&#xf182;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf236;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14b;&#xf144;&#xf24a;&#xf149;&#xf177;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf237;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14c;&#xf145;&#xf24a;&#xf206;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf238;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf239;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf207;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf23a;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf23b;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14c;&#xf158;&#xf24a;&#xf205;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf23c;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf180;&#xf24a;&#xf14c;&#xf162;&#xf24a;&#xf205;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf23d;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf15f;&#xf24a;&#xf204;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf23e;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf159;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf23f;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf165;&#xf24a;&#xf14c;&#xf17c;&#xf249;&#xf182;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf240;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf161;&#xf24a;&#xf205;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf241;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf16b;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf242;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf14a;&#xf167;&#xf24a;&#xf14c;&#xf17c;&#xf249;&#xf182;&#xf245;&#xf246;&#xf246;&#xf147;&#xf249;&#xf16d;&#xf24a;&#xf243;&#xf245;&#xf248;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf246;&#xf14b;&#xf152;&#xf24a;&#xf146;&#xf163;&#xf245;&#xf245;&#xf245;&#xf246;&#xf147;&#xf146;&#xf24a;&#xf147;&#xf171;&#xf248;&#xf146;&#xf169;&#xf24a;&#xf14c;&#xf177;&#xf245;&#xf24b;",
    "stanza": 1912
  },
  {
    "role": "file",
    "lines": [
      "== COS_JRoom_test =="
    ],
    "stanza": 1913
  },
  {
    "role": "comment",
    "lines": [],
    "section_description": "test JRoom, JDoor, JThing, etc",
    "section_category": "JAVA",
    "section_index": 68,
    "stanza": 1914
  },
  {
    "role": "code",
    "lines": [
      "define s (? x | String new int-init | x);"
    ],
    "preprocessed": "define s (? x | String new int-init | x);",
    "dt": true,
    "parse": [
      "define",
      "s",
      [
        "?",
        "x",
        [
          -1,
          "String",
          "new",
          "int-init",
          [
            -1,
            "x"
          ]
        ]
      ]
    ],
    "code": "12110131210001110103212110031210100130231210111011131210110001312101111001302312101001332233",
    "spider": "&#xf151;&#xf24a;&#xf14c;&#xf17e;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf149;&#xf17b;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf149;&#xf17d;&#xf248;&#xf16d;&#xf245;&#xf24b;",
    "stanza": 1915
  },
  {
    "role": "code",
    "lines": [
      "define room1 (COS_JRoom new <init>);"
    ],
    "preprocessed": "define room1 (COS_JRoom new <init>);",
    "dt": true,
    "parse": [
      "define",
      "room1",
      [
        "COS_JRoom",
        "new",
        "<init>"
      ]
    ],
    "code": "12110131210001110113212100001000031210110001312101101100332233",
    "spider": "&#xf151;&#xf24a;&#xf14c;&#xf17f;&#xf246;&#xf14c;&#xf154;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf149;&#xf170;&#xf245;&#xf24b;",
    "stanza": 1916
  },
  {
    "role": "code",
    "lines": [
      "define room2 (COS_JRoom new <init>);"
    ],
    "preprocessed": "define room2 (COS_JRoom new <init>);",
    "dt": true,
    "parse": [
      "define",
      "room2",
      [
        "COS_JRoom",
        "new",
        "<init>"
      ]
    ],
    "code": "12110131210001111003212100001000031210110001312101101100332233",
    "spider": "&#xf151;&#xf24a;&#xf14c;&#xf180;&#xf246;&#xf14c;&#xf154;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf149;&#xf170;&#xf245;&#xf24b;",
    "stanza": 1917
  },
  {
    "role": "code",
    "lines": [
      "define door12 (COS_JDoor new <init> ",
      "              (room1) (s \"south\") (room2) (s \"north\"));"
    ],
    "preprocessed": "define door12 (COS_JDoor new <init> \n              (room1) (s \"south\") (room2) (s \"north\"));",
    "dt": true,
    "parse": [
      "define",
      "door12",
      [
        "COS_JDoor",
        "new",
        "<init>",
        [
          "room1"
        ],
        [
          "s",
          "\"south\""
        ],
        [
          "room2"
        ],
        [
          "s",
          "\"north\""
        ]
      ]
    ],
    "code": "121101312100011110132121000001011312101100013121011011003212100011101133212100011101030200100010011100110110111101110101011101000110100000100010332121000111100332121000111010302001000100110111001101111011100100111010001101000001000103332233",
    "spider": "&#xf151;&#xf24a;&#xf14c;&#xf181;&#xf246;&#xf14c;&#xf14f;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf149;&#xf170;&#xf246;&#xf14c;&#xf17f;&#xf245;&#xf246;&#xf14c;&#xf17e;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf23a;&#xf241;&#xf239;&#xf221;&#xf20a;&#xf224;&#xf226;&#xf245;&#xf246;&#xf14c;&#xf180;&#xf245;&#xf246;&#xf14c;&#xf17e;&#xf24a;&#xf204;&#xf226;&#xf21f;&#xf22a;&#xf241;&#xf236;&#xf221;&#xf20a;&#xf224;&#xf226;&#xf245;&#xf245;&#xf24b;",
    "stanza": 1918
  },
  {
    "role": "code",
    "lines": [
      "define jworld (COS_JWorld new <init>);"
    ],
    "preprocessed": "define jworld (COS_JWorld new <init>);",
    "dt": true,
    "parse": [
      "define",
      "jworld",
      [
        "COS_JWorld",
        "new",
        "<init>"
      ]
    ],
    "code": "12110131210001111103212100010101031210110001312101101100332233",
    "spider": "&#xf151;&#xf24a;&#xf14c;&#xf182;&#xf246;&#xf14c;&#xf16e;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf149;&#xf170;&#xf245;&#xf24b;",
    "stanza": 1919
  },
  {
    "role": "code",
    "lines": [
      "define thing1 (COS_JThing new <init>);"
    ],
    "preprocessed": "define thing1 (COS_JThing new <init>);",
    "dt": true,
    "parse": [
      "define",
      "thing1",
      [
        "COS_JThing",
        "new",
        "<init>"
      ]
    ],
    "code": "12110131210001111113212100001010131210110001312101101100332233",
    "spider": "&#xf151;&#xf24a;&#xf14c;&#xf183;&#xf246;&#xf14c;&#xf159;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf149;&#xf170;&#xf245;&#xf24b;",
    "stanza": 1920
  },
  {
    "role": "code",
    "lines": [
      "define robo1 (COS_JRobo new <init>);"
    ],
    "preprocessed": "define robo1 (COS_JRobo new <init>);",
    "dt": true,
    "parse": [
      "define",
      "robo1",
      [
        "COS_JRobo",
        "new",
        "<init>"
      ]
    ],
    "code": "12110131210010000003212100011011031210110001312101101100332233",
    "spider": "&#xf151;&#xf24a;&#xf14d;&#xf144;&#xf246;&#xf14c;&#xf17a;&#xf24a;&#xf146;&#xf175;&#xf24a;&#xf149;&#xf170;&#xf245;&#xf24b;",
    "stanza": 1921
  },
  {
    "role": "code",
    "lines": [
      "act | jworld add (thing1) | s \"bus\";"
    ],
    "preprocessed": "act | jworld add (thing1) | s \"bus\";",
    "dt": true,
    "parse": [
      "act",
      [
        -1,
        "jworld",
        "add",
        [
          "thing1"
        ],
        [
          -1,
          "s",
          "\"bus\""
        ]
      ]
    ],
    "code": "121011011113023121000111110312101011103212100011111133023121000111010302001000100110001001110101011100110010001032233",
    "spider": "&#xf149;&#xf173;&#xf248;&#xf14c;&#xf182;&#xf24a;&#xf146;&#xf172;&#xf246;&#xf14c;&#xf183;&#xf245;&#xf248;&#xf14c;&#xf17e;&#xf24a;&#xf206;&#xf20d;&#xf226;&#xf221;&#xf21b;&#xf210;&#xf226;&#xf24b;",
    "stanza": 1922
  },
  {
    "role": "code",
    "lines": [
      "act | jworld add (robo1) | s \"autobus\";"
    ],
    "preprocessed": "act | jworld add (robo1) | s \"autobus\";",
    "dt": true,
    "parse": [
      "act",
      [
        -1,
        "jworld",
        "add",
        [
          "robo1"
        ],
        [
          -1,
          "s",
          "\"autobus\""
        ]
      ]
    ],
    "code": "12101101111302312100011111031210101110321210010000003302312100011101030200100010011000010111010101110100011011110110001001110101011100110010001032233",
    "spider": "&#xf149;&#xf173;&#xf248;&#xf14c;&#xf182;&#xf24a;&#xf146;&#xf172;&#xf246;&#xf14d;&#xf144;&#xf245;&#xf248;&#xf14c;&#xf17e;&#xf24a;&#xf20c;&#xf22a;&#xf209;&#xf239;&#xf221;&#xf20a;&#xf241;&#xf226;&#xf221;&#xf21b;&#xf210;&#xf226;&#xf24b;",
    "stanza": 1923
  },
  {
    "role": "code",
    "lines": [
      "act | jworld add (room1) | s \"boston\";"
    ],
    "preprocessed": "act | jworld add (room1) | s \"boston\";",
    "dt": true,
    "parse": [
      "act",
      [
        -1,
        "jworld",
        "add",
        [
          "room1"
        ],
        [
          -1,
          "s",
          "\"boston\""
        ]
      ]
    ],
    "code": "121011011113023121000111110312101011103212100011101133023121000111010302001000100110001001101111011100110111010001101111011011100010001032233",
    "spider": "&#xf149;&#xf173;&#xf248;&#xf14c;&#xf182;&#xf24a;&#xf146;&#xf172;&#xf246;&#xf14c;&#xf17f;&#xf245;&#xf248;&#xf14c;&#xf17e;&#xf24a;&#xf206;&#xf20d;&#xf226;&#xf21f;&#xf23b;&#xf211;&#xf238;&#xf21f;&#xf23a;&#xf23c;&#xf226;&#xf24b;",
    "stanza": 1924
  },
  {
    "role": "code",
    "lines": [
      "act | jworld add (room2) | s \"newyork\";"
    ],
    "preprocessed": "act | jworld add (room2) | s \"newyork\";",
    "dt": true,
    "parse": [
      "act",
      [
        -1,
        "jworld",
        "add",
        [
          "room2"
        ],
        [
          -1,
          "s",
          "\"newyork\""
        ]
      ]
    ],
    "code": "12101101111302312100011111031210101110321210001111003302312100011101030200100010011011100110010101110111011110010110111101110010011010110010001032233",
    "spider": "&#xf149;&#xf173;&#xf248;&#xf14c;&#xf182;&#xf24a;&#xf146;&#xf172;&#xf246;&#xf14c;&#xf180;&#xf245;&#xf248;&#xf14c;&#xf17e;&#xf24a;&#xf20c;&#xf22a;&#xf23d;&#xf229;&#xf221;&#xf23b;&#xf229;&#xf233;&#xf220;&#xf22a;&#xf230;&#xf226;&#xf24b;",
    "stanza": 1925
  },
  {
    "role": "code",
    "lines": [
      "begin (room1 get add (room1))",
      "       (= 1 | room1 get size);"
    ],
    "preprocessed": "begin (room1 get add (room1))\n       (= 1 | room1 get size);",
    "dt": false,
    "parse": [
      "begin",
      [
        "room1",
        "get",
        "add",
        [
          "room1"
        ]
      ],
      [
        "=",
        "1",
        [
          -1,
          "room1",
          "get",
          "size"
        ]
      ]
    ],
    "code": "121011011321210001110113121111001312101011103212100011101133321211302130231210001110113121111001312111111111332233",
    "spider": "&#xf145;&#xf15f;&#xf246;&#xf14c;&#xf17f;&#xf24a;&#xf145;&#xf17d;&#xf24a;&#xf146;&#xf172;&#xf246;&#xf14c;&#xf17f;&#xf245;&#xf245;&#xf246;&#xf147;&#xf24a;&#xf205;&#xf248;&#xf14c;&#xf17f;&#xf24a;&#xf145;&#xf17d;&#xf24a;&#xf14b;&#xf183;&#xf245;&#xf24b;",
    "stanza": 1926
  },
  {
    "role": "code",
    "lines": [
      "= 1 | room1 get size;"
    ],
    "preprocessed": "= 1 | room1 get size;",
    "dt": false,
    "parse": [
      "=",
      "1",
      [
        -1,
        "room1",
        "get",
        "size"
      ]
    ],
    "code": "121130213023121000111011312111100131211111111132233",
    "spider": "&#xf147;&#xf24a;&#xf205;&#xf248;&#xf14c;&#xf17f;&#xf24a;&#xf145;&#xf17d;&#xf24a;&#xf14b;&#xf183;&#xf24b;",
    "stanza": 1927
  },
  {
    "role": "code",
    "lines": [
      "= 0 | room2 get size;"
    ],
    "preprocessed": "= 0 | room2 get size;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "room2",
        "get",
        "size"
      ]
    ],
    "code": "121130203023121000111100312111100131211111111132233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf14c;&#xf180;&#xf24a;&#xf145;&#xf17d;&#xf24a;&#xf14b;&#xf183;&#xf24b;",
    "stanza": 1928
  },
  {
    "role": "code",
    "lines": [
      "act | thing1 setRoom (room1);"
    ],
    "preprocessed": "act | thing1 setRoom (room1);",
    "dt": true,
    "parse": [
      "act",
      [
        -1,
        "thing1",
        "setRoom",
        [
          "room1"
        ]
      ]
    ],
    "code": "121011011113023121000111111312100001101132121000111011332233",
    "spider": "&#xf149;&#xf173;&#xf248;&#xf14c;&#xf183;&#xf24a;&#xf14c;&#xf15f;&#xf246;&#xf14c;&#xf17f;&#xf245;&#xf24b;",
    "stanza": 1929
  },
  {
    "role": "code",
    "lines": [
      "= 2 | room1 get size;"
    ],
    "preprocessed": "= 2 | room1 get size;",
    "dt": false,
    "parse": [
      "=",
      "2",
      [
        -1,
        "room1",
        "get",
        "size"
      ]
    ],
    "code": "1211302103023121000111011312111100131211111111132233",
    "spider": "&#xf147;&#xf24a;&#xf206;&#xf248;&#xf14c;&#xf17f;&#xf24a;&#xf145;&#xf17d;&#xf24a;&#xf14b;&#xf183;&#xf24b;",
    "stanza": 1930
  },
  {
    "role": "code",
    "lines": [
      "= 0 | room2 get size;"
    ],
    "preprocessed": "= 0 | room2 get size;",
    "dt": false,
    "parse": [
      "=",
      "0",
      [
        -1,
        "room2",
        "get",
        "size"
      ]
    ],
    "code": "121130203023121000111100312111100131211111111132233",
    "spider": "&#xf147;&#xf24a;&#xf204;&#xf248;&#xf14c;&#xf180;&#xf24a;&#xf145;&#xf17d;&#xf24a;&#xf14b;&#xf183;&#xf24b;",
    "stanza": 1931
  },
  {
    "role": "code",
    "lines": [
      "act | thing1 setRoom (room2);"
    ],
    "preprocessed": "act | thing1 setRoom (room2);",
    "dt": true,
    "parse": [
      "act",
      [
        -1,
        "thing1",
        "setRoom",
        [
          "room2"
        ]
      ]
    ],
    "code": "121011011113023121000111111312100001101132121000111100332233",
    "spider": "&#xf149;&#xf173;&#xf248;&#xf14c;&#xf183;&#xf24a;&#xf14c;&#xf15f;&#xf246;&#xf14c;&#xf180;&#xf245;&#xf24b;",
    "stanza": 1932
  },
  {
    "role": "code",
    "lines": [
      "room1 get size;"
    ],
    "preprocessed": "room1 get size;",
    "dt": false,
    "parse": [
      "room1",
      "get",
      "size"
    ],
    "code": "121000111011312111100131211111111132233",
    "spider": "&#xf14c;&#xf17f;&#xf24a;&#xf145;&#xf17d;&#xf24a;&#xf14b;&#xf183;&#xf24b;",
    "stanza": 1933
  },
  {
    "role": "code",
    "lines": [
      "room2 get size;"
    ],
    "preprocessed": "room2 get size;",
    "dt": false,
    "parse": [
      "room2",
      "get",
      "size"
    ],
    "code": "121000111100312111100131211111111132233",
    "spider": "&#xf14c;&#xf180;&#xf24a;&#xf145;&#xf17d;&#xf24a;&#xf14b;&#xf183;&#xf24b;",
    "stanza": 1934
  },
  {
    "role": "code",
    "lines": [
      "thing1 equals (thing1);"
    ],
    "preprocessed": "thing1 equals (thing1);",
    "dt": false,
    "parse": [
      "thing1",
      "equals",
      [
        "thing1"
      ]
    ],
    "code": "12100011111131210110111032121000111111332233",
    "spider": "&#xf14c;&#xf183;&#xf24a;&#xf149;&#xf172;&#xf246;&#xf14c;&#xf183;&#xf245;&#xf24b;",
    "stanza": 1935
  },
  {
    "role": "code",
    "lines": [
      "room1 equals (room1);"
    ],
    "preprocessed": "room1 equals (room1);",
    "dt": false,
    "parse": [
      "room1",
      "equals",
      [
        "room1"
      ]
    ],
    "code": "12100011101131210110111032121000111011332233",
    "spider": "&#xf14c;&#xf17f;&#xf24a;&#xf149;&#xf172;&#xf246;&#xf14c;&#xf17f;&#xf245;&#xf24b;",
    "stanza": 1936
  },
  {
    "role": "code",
    "lines": [
      "not | thing1 equals (room1);"
    ],
    "preprocessed": "not | thing1 equals (room1);",
    "dt": false,
    "parse": [
      "not",
      [
        -1,
        "thing1",
        "equals",
        [
          "room1"
        ]
      ]
    ],
    "code": "12101302312100011111131210110111032121000111011332233",
    "spider": "&#xf149;&#xf248;&#xf14c;&#xf183;&#xf24a;&#xf149;&#xf172;&#xf246;&#xf14c;&#xf17f;&#xf245;&#xf24b;",
    "stanza": 1937
  },
  {
    "role": "code",
    "lines": [
      "equal \"newyork\" | door12 apply (room1) (s \"south\") getName intValue;"
    ],
    "preprocessed": "equal \"newyork\" | door12 apply (room1) (s \"south\") getName intValue;",
    "dt": false,
    "parse": [
      "equal",
      "\"newyork\"",
      [
        -1,
        "door12",
        "apply",
        [
          "room1"
        ],
        [
          "s",
          "\"south\""
        ],
        "getName",
        "intValue"
      ]
    ],
    "code": "1210003020010001001101110011001010111011101111001011011110111001001101011001000103023121000111101312100001001132121000111011332121000111010302001000100111001101101111011101010111010001101000001000103312100010111031210111010132233",
    "spider": "&#xf14c;&#xf24a;&#xf20c;&#xf22a;&#xf23d;&#xf229;&#xf221;&#xf23b;&#xf229;&#xf233;&#xf220;&#xf22a;&#xf230;&#xf226;&#xf248;&#xf14c;&#xf181;&#xf24a;&#xf14c;&#xf157;&#xf246;&#xf14c;&#xf17f;&#xf245;&#xf246;&#xf14c;&#xf17e;&#xf24a;&#xf204;&#xf226;&#xf220;&#xf23a;&#xf241;&#xf239;&#xf221;&#xf20a;&#xf224;&#xf226;&#xf245;&#xf14c;&#xf172;&#xf24a;&#xf149;&#xf179;&#xf24b;",
    "lines_original": [
      "demo | door12 apply (room1) (s \"south\") getName intValue;"
    ],
    "stanza": 1938
  },
  {
    "role": "code",
    "lines": [
      "equal \"boston\" | door12 apply (room2) (s \"north\") getName intValue;"
    ],
    "preprocessed": "equal \"boston\" | door12 apply (room2) (s \"north\") getName intValue;",
    "dt": false,
    "parse": [
      "equal",
      "\"boston\"",
      [
        -1,
        "door12",
        "apply",
        [
          "room2"
        ],
        [
          "s",
          "\"north\""
        ],
        "getName",
        "intValue"
      ]
    ],
    "code": "12100030200100010011000100110111101110011011101000110111101101110001000103023121000111101312100001001132121000111100332121000111010302001000100110111001101111011100100111010001101000001000103312100010111031210111010132233",
    "spider": "&#xf14c;&#xf24a;&#xf206;&#xf20d;&#xf226;&#xf21f;&#xf23b;&#xf211;&#xf238;&#xf21f;&#xf23a;&#xf23c;&#xf226;&#xf248;&#xf14c;&#xf181;&#xf24a;&#xf14c;&#xf157;&#xf246;&#xf14c;&#xf180;&#xf245;&#xf246;&#xf14c;&#xf17e;&#xf24a;&#xf204;&#xf226;&#xf21f;&#xf22a;&#xf241;&#xf236;&#xf221;&#xf20a;&#xf224;&#xf226;&#xf245;&#xf14c;&#xf172;&#xf24a;&#xf149;&#xf179;&#xf24b;",
    "lines_original": [
      "demo | door12 apply (room2) (s \"north\") getName intValue;"
    ],
    "stanza": 1939
  },
  {
    "role": "code",
    "lines": [
      "define o",
      "  (? x | jworld get | s | x);"
    ],
    "preprocessed": "define o\n  (? x | jworld get | s | x);",
    "dt": true,
    "parse": [
      "define",
      "o",
      [
        "?",
        "x",
        [
          -1,
          "jworld",
          "get",
          [
            -1,
            "s",
            [
              -1,
              "x"
            ]
          ]
        ]
      ]
    ],
    "code": "12110131210111011032121100312101001302312100011111031211110013023121000111010302312101001332233",
    "spider": "&#xf151;&#xf24a;&#xf149;&#xf17a;&#xf246;&#xf150;&#xf24a;&#xf16d;&#xf248;&#xf14c;&#xf182;&#xf24a;&#xf145;&#xf17d;&#xf248;&#xf14c;&#xf17e;&#xf248;&#xf16d;&#xf245;&#xf24b;",
    "stanza": 1940
  },
  {
    "role": "code",
    "lines": [
      "= \"newyork\" | (o \"bus\") getRoom getName intValue;"
    ],
    "preprocessed": "= \"newyork\" | (o \"bus\") getRoom getName intValue;",
    "dt": false,
    "parse": [
      "=",
      "\"newyork\"",
      [
        -1,
        [
          "o",
          "\"bus\""
        ],
        "getRoom",
        "getName",
        "intValue"
      ]
    ],
    "code": "12113020010001001101110011001010111011101111001011011110111001001101011001000103023212101110110302001000100110001001110101011100110010001033121000011101312100010111031210111010132233",
    "spider": "&#xf147;&#xf24a;&#xf20c;&#xf22a;&#xf23d;&#xf229;&#xf221;&#xf23b;&#xf229;&#xf233;&#xf220;&#xf22a;&#xf230;&#xf226;&#xf248;&#xf246;&#xf149;&#xf17a;&#xf24a;&#xf206;&#xf20d;&#xf226;&#xf221;&#xf21b;&#xf210;&#xf226;&#xf245;&#xf14c;&#xf161;&#xf24a;&#xf14c;&#xf172;&#xf24a;&#xf149;&#xf179;&#xf24b;",
    "stanza": 1941
  },
  {
    "role": "code",
    "lines": [
      "act | robo1 setRoom (room1);"
    ],
    "preprocessed": "act | robo1 setRoom (room1);",
    "dt": true,
    "parse": [
      "act",
      [
        -1,
        "robo1",
        "setRoom",
        [
          "room1"
        ]
      ]
    ],
    "code": "121011011113023121001000000312100001101132121000111011332233",
    "spider": "&#xf149;&#xf173;&#xf248;&#xf14d;&#xf144;&#xf24a;&#xf14c;&#xf15f;&#xf246;&#xf14c;&#xf17f;&#xf245;&#xf24b;",
    "stanza": 1942
  },
  {
    "role": "code",
    "lines": [
      "equal \"boston\" | (o \"autobus\") getRoom getName intValue;"
    ],
    "preprocessed": "equal \"boston\" | (o \"autobus\") getRoom getName intValue;",
    "dt": false,
    "parse": [
      "equal",
      "\"boston\"",
      [
        -1,
        [
          "o",
          "\"autobus\""
        ],
        "getRoom",
        "getName",
        "intValue"
      ]
    ],
    "code": "1210003020010001001100010011011110111001101110100011011110110111000100010302321210111011030200100010011000010111010101110100011011110110001001110101011100110010001033121000011101312100010111031210111010132233",
    "spider": "&#xf14c;&#xf24a;&#xf206;&#xf20d;&#xf226;&#xf21f;&#xf23b;&#xf211;&#xf238;&#xf21f;&#xf23a;&#xf23c;&#xf226;&#xf248;&#xf246;&#xf149;&#xf17a;&#xf24a;&#xf20c;&#xf22a;&#xf209;&#xf239;&#xf221;&#xf20a;&#xf241;&#xf226;&#xf221;&#xf21b;&#xf210;&#xf226;&#xf245;&#xf14c;&#xf161;&#xf24a;&#xf14c;&#xf172;&#xf24a;&#xf149;&#xf179;&#xf24b;",
    "lines_original": [
      "demo | (o \"autobus\") getRoom getName intValue;"
    ],
    "stanza": 1943
  },
  {
    "role": "code",
    "lines": [
      "act | jworld update;"
    ],
    "preprocessed": "act | jworld update;",
    "dt": true,
    "parse": [
      "act",
      [
        -1,
        "jworld",
        "update"
      ]
    ],
    "code": "1210110111130231210001111103121110110132233",
    "spider": "&#xf149;&#xf173;&#xf248;&#xf14c;&#xf182;&#xf24a;&#xf147;&#xf171;&#xf24b;",
    "stanza": 1944
  },
  {
    "role": "code",
    "lines": [
      "equal \"newyork\" | (o \"autobus\") getRoom getName intValue;"
    ],
    "preprocessed": "equal \"newyork\" | (o \"autobus\") getRoom getName intValue;",
    "dt": false,
    "parse": [
      "equal",
      "\"newyork\"",
      [
        -1,
        [
          "o",
          "\"autobus\""
        ],
        "getRoom",
        "getName",
        "intValue"
      ]
    ],
    "code": "121000302001000100110111001100101011101110111100101101111011100100110101100100010302321210111011030200100010011000010111010101110100011011110110001001110101011100110010001033121000011101312100010111031210111010132233",
    "spider": "&#xf14c;&#xf24a;&#xf20c;&#xf22a;&#xf23d;&#xf229;&#xf221;&#xf23b;&#xf229;&#xf233;&#xf220;&#xf22a;&#xf230;&#xf226;&#xf248;&#xf246;&#xf149;&#xf17a;&#xf24a;&#xf20c;&#xf22a;&#xf209;&#xf239;&#xf221;&#xf20a;&#xf241;&#xf226;&#xf221;&#xf21b;&#xf210;&#xf226;&#xf245;&#xf14c;&#xf161;&#xf24a;&#xf14c;&#xf172;&#xf24a;&#xf149;&#xf179;&#xf24b;",
    "lines_original": [
      "demo | (o \"autobus\") getRoom getName intValue;"
    ],
    "stanza": 1945
  }
]